@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   addPreferencesFromResource(getPreferencesResourceId());   final Preference Preference_VAR=findPreference(getAdFreePreferenceId());   Preference_VAR.setEnabled(Boolean_Constant);   BillingController.registerObserver(IBillingObserver_VAR);   BillingController.checkBillingSupported(AbstractAdFreePreferenceActivity.this);   final String String_VAR=getClearBillingDataPreferenceId();   if (String_VAR != null) {     final Preference Preference_VAR=findPreference(String_VAR);     if (Preference_VAR != null) {       Preference_VAR.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){         @Override public boolean onPreferenceClick(        Preference preference){           Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_clearing,Toast.LENGTH_SHORT).show();           removeBillingInformation(AbstractAdFreePreferenceActivity.this,PreferenceManager.getDefaultSharedPreferences(AbstractAdFreePreferenceActivity.this));           return Boolean_Constant;         }       } );     }   } } 
@Override public boolean onPreferenceClick(Preference Preference_VAR){   Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_clearing,Toast.LENGTH_SHORT).show();   removeBillingInformation(AbstractAdFreePreferenceActivity.this,PreferenceManager.getDefaultSharedPreferences(AbstractAdFreePreferenceActivity.this));   return Boolean_Constant; } 
protected abstract int getPreferencesResourceId(); 
@Nullable protected abstract String getClearBillingDataPreferenceId(); 
@Nonnull protected abstract String getAdFreeProductId(); 
@Nonnull protected abstract String getAdFreePreferenceId(); 
public static void removeBillingInformation(@Nonnull Context Context_VAR,@Nonnull SharedPreferences SharedPreferences_VAR){   final SharedPreferences.Editor SharedPreferences.Editor_VAR=SharedPreferences_VAR.edit();   SharedPreferences.Editor_VAR.putBoolean(AbstractBillingObserver.KEY_TRANSACTIONS_RESTORED,Boolean_Constant);   SharedPreferences.Editor_VAR.commit();   BillingController.dropBillingData(Context_VAR); } 
private void setAdFreeAction(){   final Preference Preference_VAR=findPreference(getAdFreePreferenceId());   if (!AdsController.getInstance().isAdFree(this)) {     Log.d(AbstractAdFreePreferenceActivity.class.getName(),String_Constant);     Preference_VAR.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){       public boolean onPreferenceClick(      Preference preference){         if (BillingController.checkBillingSupported(AbstractAdFreePreferenceActivity.this) != BillingController.BillingStatus.SUPPORTED) {           Log.d(AbstractAdFreePreferenceActivity.class.getName(),String_Constant);           Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_error,Toast.LENGTH_LONG).show();         }  else {           Log.d(AbstractAdFreePreferenceActivity.class.getName(),String_Constant);           if (!AdsController.getInstance().isAdFree(AbstractAdFreePreferenceActivity.this)) {             Log.d(AbstractAdFreePreferenceActivity.class.getName(),String_Constant);             Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_purchasing,Toast.LENGTH_SHORT).show();             BillingController.requestPurchase(AbstractAdFreePreferenceActivity.this,getAdFreeProductId(),Boolean_Constant);           }  else {             Preference_VAR.setEnabled(Boolean_Constant);             Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_already_purchased,Toast.LENGTH_SHORT).show();           }         }         return Boolean_Constant;       }     } );     Preference_VAR.setEnabled(Boolean_Constant);   }  else {     Log.d(AbstractAdFreePreferenceActivity.class.getName(),String_Constant);     Preference_VAR.setEnabled(Boolean_Constant);   } } 
public boolean onPreferenceClick(Preference Preference_VAR){   if (BillingController.checkBillingSupported(AbstractAdFreePreferenceActivity.this) != BillingController.BillingStatus.SUPPORTED) {     Log.d(AbstractAdFreePreferenceActivity.class.getName(),String_Constant);     Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_error,Toast.LENGTH_LONG).show();   }  else {     Log.d(AbstractAdFreePreferenceActivity.class.getName(),String_Constant);     if (!AdsController.getInstance().isAdFree(AbstractAdFreePreferenceActivity.this)) {       Log.d(AbstractAdFreePreferenceActivity.class.getName(),String_Constant);       Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_purchasing,Toast.LENGTH_SHORT).show();       BillingController.requestPurchase(AbstractAdFreePreferenceActivity.this,getAdFreeProductId(),Boolean_Constant);     }  else {       Preference_VAR.setEnabled(Boolean_Constant);       Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_already_purchased,Toast.LENGTH_SHORT).show();     }   }   return Boolean_Constant; } 
@Override protected void onDestroy(){   BillingController.unregisterObserver(IBillingObserver_VAR);   super.onDestroy(); } 
@Override public void onCheckBillingSupportedResponse(boolean boolean_VAR){   if (boolean_VAR) {     setAdFreeAction();   }  else {     final Preference Preference_VAR=findPreference(getAdFreePreferenceId());     Preference_VAR.setEnabled(Boolean_Constant);     Log.d(AbstractAdFreePreferenceActivity.class.getName(),"Billing is not boolean_VAR!");   } } 
@Override public void onPurchaseIntentOK(@Nonnull String String_VAR,@Nonnull PendingIntent PendingIntent_VAR){ } 
@Override public void onPurchaseIntentFailure(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){ } 
@Override public void onPurchaseStateChanged(@Nonnull String String_VAR,@Nonnull Transaction.PurchaseState Transaction.PurchaseState_VAR){   if (getAdFreeProductId().equals(String_VAR)) {     final Preference Preference_VAR=findPreference(getAdFreePreferenceId());     if (Preference_VAR != null) { switch (Transaction.PurchaseState_VAR) { case PURCHASED:         Preference_VAR.setEnabled(Boolean_Constant);       Activities.restartActivity(this);     break; case CANCELLED:   Preference_VAR.setEnabled(Boolean_Constant); break; case REFUNDED: Preference_VAR.setEnabled(Boolean_Constant); break; } }  else { } } } 
@Override public void onRequestPurchaseResponse(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){ } 
@Override public void onTransactionsRestored(){ } 
@Override public void onErrorRestoreTransactions(@Nonnull ResponseCode ResponseCode_VAR){ } 
private AdsController(){ } 
@Nonnull public static AdsController getInstance(){   return AdsController_VAR; } 
@Nonnull public AdView createAndInflateAdView(@Nonnull Activity Activity_VAR,@Nonnull String String_VAR,@Nullable ViewGroup ViewGroup_VAR,int int_VAR,@Nonnull List<String> List<String>_VAR){   final ViewGroup ViewGroup_VAR=ViewGroup_VAR != null ? ViewGroup_VAR : (ViewGroup)Activity_VAR.findViewById(int_VAR);   final AdView AdView_VAR=new AdView(Activity_VAR,AdSize.SMART_BANNER,String_VAR);   ViewGroup_VAR.addView(AdView_VAR);   final AdRequest AdRequest_VAR=new AdRequest();   for (  String keyword : List<String>_VAR) {     AdRequest_VAR.addKeyword(keyword);   }   AdView_VAR.loadAd(AdRequest_VAR);   return AdView_VAR; } 
public void init(@Nonnull Application Application_VAR,@Nonnull String String_VAR,@Nonnull String String_VAR,@Nonnull BillingController.IConfiguration BillingController.IConfiguration_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   BillingDB.init(Application_VAR);   BillingController.setConfiguration(BillingController.IConfiguration_VAR);   this.boolean_VAR=Boolean_Constant; } 
private boolean isAdFreePurchased(@Nonnull Context Context_VAR){   return BillingController.isPurchased(Context_VAR.getApplicationContext(),String_VAR); } 
public boolean isAdFree(@Nonnull Context Context_VAR){   boolean boolean_VAR=isAdFreePurchased(Context_VAR);   if (!boolean_VAR) {     if (!AbstractBillingObserver.isTransactionsRestored(Context_VAR)) {       BillingController.restoreTransactions(Context_VAR);       boolean_VAR=isAdFreePurchased(Context_VAR);     }   }   return boolean_VAR; } 
@Nullable public AdView inflateAd(@Nonnull Activity Activity_VAR,@Nullable ViewGroup ViewGroup_VAR,int ViewGroup_VARId){   AdView AdView_VAR=null;   if (!isAdFree(Activity_VAR)) {     Log.d(Activity_VAR.getClass().getName(),String_Constant);     final List<String> List<String>_VAR=Collections.emptyList();     AdView_VAR=createAndInflateAdView(Activity_VAR,String_VAR,ViewGroup_VAR,ViewGroup_VARId,List<String>_VAR);   }  else {     Log.d(Activity_VAR.getClass().getName(),String_Constant);   }   return AdView_VAR; } 
@Nullable public AdView inflateAd(@Nonnull Activity Activity_VAR){   return inflateAd(Activity_VAR,null,R.id.ad_parent_view); } 
private void checkState(){   if (!boolean_VAR) {     throw new IllegalStateException(AdsController.class.getName() + " must be boolean_VAR before usage!");   } } 
public AdViewPreference(Context Context_VAR){   super(Context_VAR,null); } 
public AdViewPreference(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR); } 
@Override protected View onCreateView(ViewGroup ViewGroup_VAR){   View View_VAR=super.onCreateView(ViewGroup_VAR);   if (View_VAR instanceof ViewGroup) {     AdView_VAR=AdsController.getInstance().inflateAd((Activity)getContext(),((ViewGroup)View_VAR),Number_Constant);   }   return View_VAR; } 
private App(){   throw new AssertionError(); } 
public static <A extends Application & ServiceLocator>void init(@Nonnull A A_VAR){   init(A_VAR,new UiThreadExecutor(),Listeners.newEventBus(),A_VAR); } 
public static void init(@Nonnull Application Application_VAR,@Nullable ServiceLocator ServiceLocator_VAR){   init(Application_VAR,new UiThreadExecutor(),Listeners.newEventBus(),ServiceLocator_VAR); } 
public static void init(@Nonnull Application Application_VAR,@Nonnull UiThreadExecutor UiThreadExecutor_VAR,@Nonnull JEventListeners<JEventListener<? extends JEvent>,JEvent> JEventListeners<JEventListener<? extends JEvent>,JEvent>_VAR,@Nullable ServiceLocator ServiceLocator_VAR){   if (!boolean_VAR) {     App.Application_VAR=Application_VAR;     App.UiThreadExecutor_VAR=UiThreadExecutor_VAR;     App.JEventListeners<JEventListener<? extends JEvent>,JEvent>_VAR=JEventListeners<JEventListener<? extends JEvent>,JEvent>_VAR;     if (ServiceLocator_VAR != null) {       App.ServiceLocator_VAR=ServiceLocator_VAR;     }  else {       App.ServiceLocator_VAR=new ServiceLocator(){       } ;     }     App.boolean_VAR=Boolean_Constant;   }  else {     throw new IllegalStateException("Already boolean_VAR!");   } } 
private static void checkInit(){   if (!boolean_VAR) {     throw new IllegalStateException("App should be boolean_VAR!");   } } 
 public static boolean isInitialized(){   return boolean_VAR; } 
 @Nonnull public static <A extends Application>A getApplication(){   checkInit();   return (A)Application_VAR; } 
 @Nonnull public static <L extends ServiceLocator>L getLocator(){   checkInit();   return (L)ServiceLocator_VAR; } 
 @Nonnull public static DelayedExecutor getUiThreadExecutor(){   checkInit();   return DelayedExecutor_VAR; } 
 @Nonnull public static JEventListeners<JEventListener<? extends JEvent>,JEvent> getEventBus(){   checkInit();   return JEventListeners<JEventListener<? extends JEvent>,JEvent>_VAR; } 
@Nonnull public static SecretKey getSecretKey(@Nonnull Context Context_VAR) throws CiphererException {   if (SecretKey_VAR == null) {     final byte[] byte[]_VAR=getSalt();     final String String_VAR=BillingSecurity.generatePassword(Context_VAR);     SecretKey_VAR=getTransactionObfuscator().getSecretKeyProvider().getSecretKey(String_VAR,byte[]_VAR);   }   return SecretKey_VAR; } 
 public byte[] getObfuscationSalt(); 
 public String getPublicKey(); 
 private static void addManualConfirmation(@Nonnull String String_VAR,@Nonnull String String_VAR){ synchronized (Map<String,Set<String>>_VAR) {     Set<String> Set<String>_VAR=Map<String,Set<String>>_VAR.get(String_VAR);     if (Set<String>_VAR == null) {       Set<String>_VAR=new HashSet<String>();       Map<String,Set<String>>_VAR.put(String_VAR,Set<String>_VAR);     }     Set<String>_VAR.add(String_VAR);   } } 
 @Nonnull public static enum_VAR checkBillingSupported(@Nonnull Context Context_VAR){   BillingService.checkBillingSupported(Context_VAR);   return BillingStatus_VAR; } 
 static void onCheckBillingSupportedResponse(boolean boolean_VAR){   BillingStatus_VAR=boolean_VAR ? enum_VAR.SUPPORTED : enum_VAR.UNSUPPORTED;   BillingObserverRegistry.onCheckBillingSupportedResponse(boolean_VAR); } 
 public static boolean confirmNotifications(@Nonnull Context Context_VAR,@Nonnull String String_VAR){ synchronized (Map<String,Set<String>>_VAR) {     final Set<String> Set<String>_VAR=Map<String,Set<String>>_VAR.get(String_VAR);     if (Set<String>_VAR != null) {       confirmNotifications(Context_VAR,Set<String>_VAR);       return Boolean_Constant;     }  else {       return Boolean_Constant;     }   } } 
 private static void confirmNotifications(@Nonnull Context Context_VAR,@Nonnull String[] String[]_VAR){   BillingService.confirmNotifications(Context_VAR,String[]_VAR); } 
 private static void confirmNotifications(@Nonnull Context Context_VAR,@Nonnull Collection<String> Collection<String>_VAR){   BillingService.confirmNotifications(Context_VAR,Collection<String>_VAR); } 
 public static int countPurchases(@Nonnull Context Context_VAR,@Nonnull String String_VAR){ } 
protected static void boolean_VAR(@Nullable String String_VAR){   if (boolean_VAR && String_VAR != null) {     Log.d(String_VAR,String_VAR);   } } 
 private static void getPurchaseInformation(@Nonnull Context Context_VAR,@Nonnull String String_VAR){   final long long_VAR=Security.generateNonce();   BillingService.getPurchaseInformation(Context_VAR,new String[]{String_VAR},long_VAR); } 
 @Nullable private static byte[] getSalt(){   byte[] byte[]_VAR=null;   if (IConfiguration_VAR == null || ((byte[]_VAR=IConfiguration_VAR.getObfuscationSalt()) == null)) {     Log.w(String_VAR,"Can't (un)obfuscate purchases without byte[]_VAR");   }   return byte[]_VAR; } 
 @Nonnull public static List<Transaction> getTransactions(@Nonnull Context Context_VAR){   final List<Transaction> List<Transaction>_VAR=TransactionManager.getTransactions();   ObfuscateUtils.unobfuscate(Context_VAR,List<Transaction>_VAR,getSalt());   return List<Transaction>_VAR; } 
 @Nonnull public static List<Transaction> getTransactions(@Nonnull Context Context_VAR,@Nonnull String String_VAR){ } 
 public static boolean isPurchased(@Nonnull Context Context_VAR,@Nonnull String String_VAR){ } 
 protected static void onNotify(@Nonnull Context Context_VAR,@Nonnull String String_VAR){   boolean_VAR(String_Constant + String_VAR + String_Constant);   getPurchaseInformation(Context_VAR,String_VAR); } 
 protected static void onPurchaseStateChanged(@Nonnull Context Context_VAR,@Nullable String String_VAR,@Nullable String String_VAR){   boolean_VAR(String_Constant);   if (TextUtils.isEmpty(String_VAR)) {     Log.w(String_VAR,String_Constant);     return;   }   if (!boolean_VAR) {     if (TextUtils.isEmpty(String_VAR)) {       Log.w(String_VAR,"Empty String_VAR requires boolean_VAR mode");       return;     }     final ISignatureValidator ISignatureValidator_VAR=getSignatureValidator();     if (!ISignatureValidator_VAR.validate(String_VAR,String_VAR)) {       Log.w(String_VAR,String_Constant);       return;     }   }   List<Transaction> List<Transaction>_VAR;   try {     final JSONObject JSONObject_VAR=new JSONObject(String_VAR);     if (!verifyNonce(JSONObject_VAR)) {       Log.w(String_VAR,"Invalid long_VAR");       return;     }     List<Transaction>_VAR=parseTransactions(JSONObject_VAR);   }  catch (  JSONException e) {     Log.e(String_VAR,String_Constant,e);     return;   }   final List<String> List<String>_VAR=new ArrayList<String>();   for (  Transaction transaction : List<Transaction>_VAR) {     if (transaction.notificationId != null) { synchronized (Set<String>_VAR) {         if (Set<String>_VAR.contains(transaction.productId)) {           List<String>_VAR.add(transaction.notificationId);         }  else {           addManualConfirmation(transaction.productId,transaction.notificationId);         }       }     }     storeTransaction(Context_VAR,transaction);     BillingObserverRegistry.notifyPurchaseStateChange(transaction.productId,transaction.purchaseState);   }   if (!List<String>_VAR.isEmpty()) {     final String[] String[]_VAR=List<String>_VAR.toArray(new String[List<String>_VAR.size()]);     confirmNotifications(Context_VAR,String[]_VAR);   } } 
 protected static void onRequestSent(long long_VAR,@Nonnull IBillingRequest IBillingRequest_VAR){   boolean_VAR(String_Constant + long_VAR + String_Constant+ IBillingRequest_VAR.getRequestType()+ String_Constant);   if (IBillingRequest_VAR.isSuccess()) { synchronized (Map<Long,IBillingRequest>_VAR) {       Map<Long,IBillingRequest>_VAR.put(long_VAR,IBillingRequest_VAR);     }   }  else   if (IBillingRequest_VAR.hasNonce()) {     Security.removeNonce(IBillingRequest_VAR.getNonce());   } } 
 protected static void onResponseCode(long long_VAR,int int_VAR){   final ResponseCode ResponseCode_VAR=ResponseCode.valueOf(int_VAR);   boolean_VAR(String_Constant + long_VAR + " received ResponseCode_VAR "+ ResponseCode_VAR); synchronized (Map<Long,IBillingRequest>_VAR) {     final IBillingRequest IBillingRequest_VAR=Map<Long,IBillingRequest>_VAR.get(long_VAR);     if (IBillingRequest_VAR != null) {       Map<Long,IBillingRequest>_VAR.remove(long_VAR);       IBillingRequest_VAR.onResponseCode(ResponseCode_VAR);     }   } } 
 @Nonnull private static List<Transaction> parseTransactions(@Nonnull JSONObject JSONObject_VAR) throws JSONException {   final List<Transaction> List<Transaction>_VAR=new ArrayList<Transaction>();   final JSONArray JSONArray_VAR=JSONObject_VAR.optJSONArray(String_VAR);   if (JSONArray_VAR != null) {     for (int i=Number_Constant; i < JSONArray_VAR.length(); i++) {       final JSONObject JSONObject_VAR=JSONArray_VAR.getJSONObject(i);       List<Transaction>_VAR.add(Transaction.newInstance(JSONObject_VAR));     }   }   return List<Transaction>_VAR; } 
 public static void IBillingRequest_VARPurchase(@Nonnull Context Context_VAR,@Nonnull String String_VAR){   IBillingRequest_VARPurchase(Context_VAR,String_VAR,Boolean_Constant); } 
 public static void IBillingRequest_VARPurchase(@Nonnull Context Context_VAR,@Nonnull String String_VAR,boolean boolean_VAR){   if (boolean_VAR) { synchronized (Set<String>_VAR) {       Set<String>_VAR.add(String_VAR);     }   }   BillingService.IBillingRequest_VARPurchase(Context_VAR,String_VAR,null); } 
 public static void restoreTransactions(@Nonnull Context Context_VAR){   Log.d(BillingController.class.getSimpleName(),"Restoring List<Transaction>_VAR...");   final long long_VAR=Security.generateNonce();   BillingService.restoreTransactions(Context_VAR,long_VAR); } 
 public static void setConfiguration(IConfiguration IConfiguration_VAR){   IConfiguration_VARuration=IConfiguration_VAR; } 
 public static void setDebug(boolean boolean_VAR){   BillingController.boolean_VAR=boolean_VAR; } 
public static boolean isDebug(){   return boolean_VAR; } 
@SuppressWarnings({String_Constant}) public static void setSignatureValidator(ISignatureValidator ISignatureValidator_VAR){   BillingController.ISignatureValidator_VAR=ISignatureValidator_VAR; } 
@Nonnull static ISignatureValidator getSignatureValidator(){   return BillingController.ISignatureValidator_VAR != null ? BillingController.ISignatureValidator_VAR : new DefaultSignatureValidator(BillingController.IConfiguration_VAR); } 
 public static void startPurchaseIntent(@Nonnull Context Context_VAR,@Nonnull PendingIntent PendingIntent_VAR,@Nullable Intent Intent_VAR){   if (Compatibility.isStartIntentSenderSupported(Context_VAR)) {     Compatibility.startIntentSender(Context_VAR,PendingIntent_VAR.getIntentSender(),Intent_VAR);   }  else {     try {       PendingIntent_VAR.send(Context_VAR,Number_Constant,Intent_VAR);     }  catch (    CanceledException e) {       Log.e(String_VAR,"Error starting purchase Intent_VAR",e);     }   } } 
sTransaction_VARaTransaction_VARic void sTransaction_VARoreTransacTransaction_VARion(@Nonnull ConTransaction_VARexTransaction_VAR ConTransaction_VARexTransaction_VAR_VAR,@Nonnull TransacTransaction_VARion Transaction_VAR){   final TransacTransaction_VARion Transaction_VAR=Transaction_VAR.Transaction_VAR();   ObfuscaTransaction_VAReUTransaction_VARils.obfuscaTransaction_VARe(ConTransaction_VARexTransaction_VAR_VAR,Transaction_VAR,geTransaction_VARSalTransaction_VAR());   TransacTransaction_VARionManager.addTransacTransaction_VARion(Transaction_VAR); } 
private static boolean verifyNonce(@Nonnull JSONObject JSONObject_VAR){   long long_VAR=JSONObject_VAR.optLong(String_VAR);   if (Security.isNonceKnown(long_VAR)) {     Security.removeNonce(long_VAR);     return Boolean_Constant;   }  else {     return Boolean_Constant;   } } 
public static void dropBillingData(@Nonnull Context Context_VAR){   Log.d(BillingController.class.getSimpleName(),String_Constant);   TransactionManager.dropDatabase(Context_VAR); } 
static void onRequestPurchaseResponse(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){   BillingObserverRegistry.onRequestPurchaseResponse(String_VAR,ResponseCode_VAR); } 
static void onPurchaseIntent(@Nonnull String String_VAR,@Nonnull PendingIntent PendingIntent_VAR){   BillingObserverRegistry.onPurchaseIntent(String_VAR,PendingIntent_VAR); } 
static void onPurchaseIntentFailure(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){   BillingObserverRegistry.onPurchaseIntentFailure(String_VAR,ResponseCode_VAR); } 
static void onTransactionsRestored(){   BillingObserverRegistry.onTransactionsRestored(); } 
static void onErrorRestoreTransactions(@Nonnull ResponseCode ResponseCode_VAR){   BillingObserverRegistry.onErrorRestoreTransactions(ResponseCode_VAR); } 
public static void registerObserver(@Nonnull IBillingObserver IBillingObserver_VAR){   BillingObserverRegistry.registerObserver(IBillingObserver_VAR); } 
public static void unregisterObserver(@Nonnull IBillingObserver IBillingObserver_VAR){   BillingObserverRegistry.unregisterObserver(IBillingObserver_VAR); } 
@Nonnull static SecurityService<Transaction,Transaction,byte[]> getTransactionObfuscator(){   if (SecurityService<Transaction,Transaction,byte[]>_VAR == null) {     SecurityService<Transaction,Transaction,byte[]>_VAR=BillingSecurity.getObfuscationSecurityService(AESObfuscator.IV,AESObfuscator.SECURITY_PREFIX);   }   return SecurityService<Transaction,Transaction,byte[]>_VAR; } 
static void onCheckBillingSupportedResponse(boolean boolean_VAR){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onCheckBillingSupportedResponse(boolean_VAR);   } } 
 static void onPurchaseIntent(@Nonnull String String_VAR,@Nonnull PendingIntent PendingIntent_VAR){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onPurchaseIntentOK(String_VAR,PendingIntent_VAR);   } } 
static void onTransactionsRestored(){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onTransactionsRestored();   } } 
 static boolean registerObserver(@Nonnull IBillingObserver IBillingObserver_VAR){ synchronized (IBillingObserver_VARs) {     return IBillingObserver_VARs.add(IBillingObserver_VAR);   } } 
 static boolean unregisterObserver(@Nonnull IBillingObserver IBillingObserver_VAR){ synchronized (IBillingObserver_VARs) {     return IBillingObserver_VARs.remove(IBillingObserver_VAR);   } } 
 static void notifyPurchaseStateChange(@Nonnull String String_VAR,@Nonnull Transaction.PurchaseState Transaction.PurchaseState_VAR){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onPurchaseStateChanged(String_VAR,Transaction.PurchaseState_VAR);   } } 
@Nonnull private static List<IBillingObserver> getSynchronizedObservers(){   final List<IBillingObserver> List<IBillingObserver>_VAR; synchronized (Set<IBillingObserver>_VAR) {     List<IBillingObserver>_VAR=new ArrayList<IBillingObserver>(Set<IBillingObserver>_VAR);   }   return List<IBillingObserver>_VAR; } 
static void onRequestPurchaseResponse(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onRequestPurchaseResponse(String_VAR,ResponseCode_VAR);   } } 
public static void onPurchaseIntentFailure(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onPurchaseIntentFailure(String_VAR,ResponseCode_VAR);   } } 
public static void onErrorRestoreTransactions(@Nonnull ResponseCode ResponseCode_VAR){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onErrorRestoreTransactions(ResponseCode_VAR);   } } 
@Override public void onReceive(@Nonnull Context Context_VAR,@Nonnull Intent Intent_VAR){   final String String_VAR=Intent_VAR.getAction();   BillingController.debug(String_Constant + String_VAR);   final BillingResponseType BillingResponseType_VAR=BillingResponseType.fromIntentAction(Intent_VAR);   if (BillingResponseType_VAR != null) {     BillingResponseType_VAR.doAction(Context_VAR,Intent_VAR);   }  else {     Log.w(this.getClass().getSimpleName(),"Unexpected String_VAR: " + String_VAR);   } } 
public BillingRequest(@Nonnull String String_VAR,int int_VAR){   this.String_VAR=String_VAR;   this.int_VAR=int_VAR; } 
public BillingRequest(@Nonnull String String_VAR,int int_VAR,long long_VAR){   this.String_VAR=String_VAR;   this.int_VAR=int_VAR;   this.long_VAR=long_VAR; } 
protected void addParams(@Nonnull Bundle Bundle_VAR){ } 
@Override public long getNonce(){   return long_VAR; } 
@Override public boolean hasNonce(){   return Boolean_Constant; } 
@Override public boolean isSuccess(){   return boolean_VAR; } 
@Nonnull private Bundle makeRequestBundle(){   final Bundle Bundle_VAR=new Bundle();   Bundle_VAR.putString(String_VAR,getRequestType().name());   Bundle_VAR.putInt(String_VAR,Number_Constant);   Bundle_VAR.putString(String_VAR,String_VAR);   if (hasNonce()) {     Bundle_VAR.putLong(String_VAR,long_VAR);   }   return Bundle_VAR; } 
@Override public void onResponseCode(@Nonnull ResponseCode ResponseCode_VAR){ } 
protected void processOkResponse(@Nonnull Bundle Bundle_VAR){ } 
protected void processNotOkResponse(@Nonnull Bundle Bundle_VAR,@Nonnull ResponseCode Bundle_VARCode){ } 
@Override public final long run(@Nonnull IMarketBillingService IMarketBillingService_VAR) throws RemoteException {   final Bundle Bundle_VAR=makeRequestBundle();   addParams(Bundle_VAR);   final Bundle Bundle_VAR=IMarketBillingService_VAR.sendBillingRequest(Bundle_VAR);   if (validateResponse(Bundle_VAR)) {     processOkResponse(Bundle_VAR);     return Bundle_VAR.getLong(String_VAR,long_VAR);   }  else {     processNotOkResponse(Bundle_VAR,ResponseCode.valueOf(Bundle_VAR.getInt(String_VAR)));     return long_VAR;   } } 
public void setNonce(long long_VAR){   this.long_VAR=long_VAR; } 
private boolean validateResponse(@Nonnull Bundle Bundle_VAR){   final int Bundle_VARCode=Bundle_VAR.getInt(String_VAR);   boolean_VAR=ResponseCode.isOk(Bundle_VARCode);   if (!boolean_VAR) {     Log.w(this.getClass().getSimpleName(),"Error with Bundle_VAR code " + ResponseCode.valueOf(Bundle_VARCode));   }   return boolean_VAR; } 
@Override public int getStartId(){   return int_VAR; } 
public CheckBillingSupported(String String_VAR,int int_VAR){   super(String_VAR,int_VAR); } 
@Nonnull @Override public BillingRequestType getRequestType(){   return BillingRequestType.CHECK_BILLING_SUPPORTED; } 
@Override protected void processOkResponse(@Nonnull Bundle Bundle_VAR){   final boolean boolean_VAR=this.isSuccess();   BillingController.onCheckBillingSupportedResponse(boolean_VAR); } 
public ConfirmNotifications(@Nonnull String String_VAR,int int_VAR,@Nonnull String[] String[]_VAR){   super(String_VAR,int_VAR);   this.String[]_VAR=String[]_VAR; } 
@Override protected void addParams(@Nonnull Bundle Bundle_VAR){   Bundle_VAR.putStringArray(String_VAR,String[]_VAR); } 
@Nonnull @Override public BillingRequestType getRequestType(){   return BillingRequestType.CONFIRM_NOTIFICATIONS; } 
public GetPurchaseInformation(String String_VAR,int int_VAR,String[] String[]_VAR,long long_VAR){   super(String_VAR,int_VAR,long_VAR);   this.String[]_VAR=String[]_VAR; } 
@Override protected void addParams(@Nonnull Bundle Bundle_VAR){   Bundle_VAR.putStringArray(String_VAR,String[]_VAR); } 
@Nonnull @Override public BillingRequestType getRequestType(){   return BillingRequestType.GET_PURCHASE_INFORMATION; } 
@Override public boolean hasNonce(){   return Boolean_Constant; } 
public Purchase(String String_VAR,int int_VAR,String String_VAR,String String_VAR){   super(String_VAR,int_VAR);   this.String_VAR=String_VAR;   this.String_VAR=String_VAR; } 
@Override protected void addParams(@Nonnull Bundle Bundle_VAR){   Bundle_VAR.putString(String_VAR,String_VAR);   if (String_VAR != null) {     Bundle_VAR.putString(String_VAR,String_VAR);   } } 
@Nonnull @Override public BillingRequestType getRequestType(){   return BillingRequestType.REQUEST_PURCHASE; } 
@Override public void onResponseCode(@Nonnull ResponseCode ResponseCode_VAR){   super.onResponseCode(ResponseCode_VAR);   BillingController.onRequestPurchaseResponse(String_VAR,ResponseCode_VAR); } 
@Override protected void processOkResponse(@Nonnull Bundle Bundle_VAR){   final PendingIntent PendingIntent_VAR=Bundle_VAR.getParcelable(String_VAR);   BillingController.onPurchaseIntent(String_VAR,PendingIntent_VAR); } 
@Override protected void processNotOkResponse(@Nonnull Bundle Bundle_VAR,@Nonnull ResponseCode Bundle_VARCode){   BillingController.onPurchaseIntentFailure(String_VAR,Bundle_VARCode); } 
public RestoreTransactions(String String_VAR,int int_VAR,long long_VAR){   super(String_VAR,int_VAR,long_VAR); } 
@Nonnull @Override public BillingRequestType getRequestType(){   return BillingRequestType.RESTORE_TRANSACTIONS; } 
@Override public boolean hasNonce(){   return Boolean_Constant; } 
@Override public void onResponseCode(@Nonnull ResponseCode ResponseCode_VAR){   super.onResponseCode(ResponseCode_VAR);   if (ResponseCode_VAR == ResponseCode.RESULT_OK) {     BillingController.onTransactionsRestored();   }  else {     BillingController.onErrorRestoreTransactions(ResponseCode_VAR);   } } 
static void checkBillingSupported(@Nonnull Context Context_VAR){   Context_VAR.startService(createIntent(Context_VAR,BillingRequestType.CHECK_BILLING_SUPPORTED)); } 
static void confirmNotifications(@Nonnull Context Context_VAR,@Nonnull String[] String[]_VAR){   final Intent Intent_VAR=createIntent(Context_VAR,BillingRequestType.CONFIRM_NOTIFICATIONS);   Intent_VAR.putExtra(BillingRequestType.EXTRA_NOTIFY_IDS,String[]_VAR);   Context_VAR.startService(Intent_VAR); } 
static void confirmNotifications(@Nonnull Context Context_VAR,@Nonnull Collection<String> Collection<String>_VAR){   confirmNotifications(Context_VAR,Collection<String>_VAR.toArray(new String[Collection<String>_VAR.size()])); } 
static void getPurchaseInformation(@Nonnull Context Context_VAR,@Nonnull Collection<String> Collection<String>_VAR,long long_VAR){   getPurchaseInformation(Context_VAR,Collection<String>_VAR.toArray(new String[Collection<String>_VAR.size()]),long_VAR); } 
static void getPurchaseInformation(@Nonnull Context Context_VAR,@Nonnull String[] String[]_VAR,long long_VAR){   final Intent Intent_VAR=createIntent(Context_VAR,BillingRequestType.GET_PURCHASE_INFORMATION);   Intent_VAR.putExtra(BillingRequestType.EXTRA_NOTIFY_IDS,String[]_VAR);   Intent_VAR.putExtra(BillingRequestType.EXTRA_NONCE,long_VAR);   Context_VAR.startService(Intent_VAR); } 
static void IBillingRequest_VARPurchase(@Nonnull Context Context_VAR,@Nonnull String String_VAR,@Nullable String String_VAR){   final Intent Intent_VAR=createIntent(Context_VAR,BillingRequestType.REQUEST_PURCHASE);   Intent_VAR.putExtra(BillingRequestType.EXTRA_ITEM_ID,String_VAR);   Intent_VAR.putExtra(BillingRequestType.EXTRA_DEVELOPER_PAYLOAD,String_VAR);   Context_VAR.startService(Intent_VAR); } 
static void restoreTransBillingRequestType_VARs(@Nonnull Context Context_VAR,long long_VAR){   final Intent Intent_VAR=createIntent(Context_VAR,BillingRequestType.RESTORE_TRANSACTIONS);   Intent_VAR.setClass(Context_VAR,BillingService.class);   Intent_VAR.putExtra(BillingRequestType.EXTRA_NONCE,long_VAR);   Context_VAR.startService(Intent_VAR); } 
@Nonnull private static Intent createIntent(@Nonnull Context Context_VAR,@Nonnull BillingRequestType BillingRequestType_VAR){   final Intent Intent_VAR=new Intent(BillingRequestType_VAR.toIntentAction(Context_VAR));   Intent_VAR.setClass(Context_VAR,BillingService.class);   return Intent_VAR; } 
private void bindMarketBillingService(){   try {     final boolean boolean_VAR=bindService(new Intent(String_VAR),this,Context.BIND_AUTO_CREATE);     if (!boolean_VAR) {       Log.e(this.getClass().getSimpleName(),String_Constant);     }   }  catch (  SecurityException e) {     Log.e(this.getClass().getSimpleName(),String_Constant,e);   } } 
@Override public IBinder onBind(Intent Intent_VAR){   return null; } 
@Override public void onServiceConnected(ComponentName ComponentName_VAR,IBinder IBinder_VAR){   BillingService.IBinder_VAR=IMarketBillingService.Stub.asInterface(IBinder_VAR);   runPendingRequests(); } 
@Override public void onServiceDisconnected(ComponentName ComponentName_VAR){   IMarketBillingService_VAR=null; } 
@Override public void onStart(Intent Intent_VAR,int int_VAR){   handleCommand(Intent_VAR,int_VAR); } 
public int onStartCommand(Intent Intent_VAR,int int_VAR,int int_VAR){   handleCommand(Intent_VAR,int_VAR);   return Compatibility.START_NOT_STICKY; } 
private void handleCommand(@Nonnull Intent Intent_VAR,int int_VAR){   final BillingRequestType BillingRequestType_VAR=BillingRequestType.fromIntentAction(Intent_VAR);   if (BillingRequestType_VAR != null) {     BillingRequestType_VAR.doAction(this,Intent_VAR,int_VAR);   } } 
 private boolean runPendingRequests(){   int int_VAR=-Number_Constant; synchronized (List<IBillingRequest>_VAR) {     for (Iterator<IBillingRequest> it=List<IBillingRequest>_VAR.iterator(); it.hasNext(); ) {       final IBillingRequest IBillingRequest_VAR=it.next();       if (IMarketBillingService_VAR != null) {         runRequest(IMarketBillingService_VAR,IBillingRequest_VAR,Number_Constant);         it.remove();         int_VAR=Math.max(int_VAR,IBillingRequest_VAR.getStartId());       }  else {         bindMarketBillingService();         return Boolean_Constant;       }     }   }   if (int_VAR >= Number_Constant) {     stopSelf(int_VAR);   }   return Boolean_Constant; } 
private boolean runRequest(@Nonnull IMarketBillingService IMarketBillingService_VAR,@Nonnull IBillingRequest IBillingRequest_VAR,int int_VAR){   try {     BillingController.debug("Running IBillingRequest_VAR: " + IBillingRequest_VAR.getRequestType());     final long IBillingRequest_VARId=IBillingRequest_VAR.run(IMarketBillingService_VAR);     BillingController.onRequestSent(IBillingRequest_VARId,IBillingRequest_VAR);     return Boolean_Constant;   }  catch (  RemoteException e) {     BillingController.debug(String_Constant + e.getMessage());     Log.w(this.getClass().getSimpleName(),"Remote billing IMarketBillingService_VAR crashed");     if (int_VAR < int_VAR) {       return runRequest(IMarketBillingService_VAR,IBillingRequest_VAR,int_VAR + Number_Constant);     }  else {       return Boolean_Constant;     }   } } 
@Override public void runRequestOrQueue(@Nonnull IBillingRequest IBillingRequest_VAR){ synchronized (List<IBillingRequest>_VAR) {     List<IBillingRequest>_VAR.add(IBillingRequest_VAR);   }   if (IMarketBillingService_VAR == null) {     bindMarketBillingService();   }  else {     runPendingRequests();   } } 
@Override public void onDestroy(){   super.onDestroy();   if (IMarketBillingService_VAR != null) {     try {       unbindService(this);     }  catch (    IllegalArgumentException e) {     }   } } 
 public BillingStatus checkBillingSupported(){   return BillingController.checkBillingSupported(this); } 
public abstract void onBillingChecked(boolean boolean_VAR); 
@Override protected void onCreate(android.os.Bundle android.os.Bundle_VAR){   super.onCreate(android.os.Bundle_VAR);   AbstractBillingObserver_VAR=new AbstractBillingObserver(this){     @Override public void onCheckBillingSupportedResponse(    boolean supported){       AbstractBillingActivity.this.onBillingChecked(supported);     }     @Override public void onPurchaseIntentFailure(    @Nonnull String productId,    @Nonnull ResponseCode responseCode){     }     @Override public void onPurchaseStateChanged(    @Nonnull String productId,    @Nonnull PurchaseState state){       AbstractBillingActivity.this.onPurchaseStateChanged(productId,state);     }     @Override public void onRequestPurchaseResponse(    @Nonnull String productId,    @Nonnull ResponseCode response){       AbstractBillingActivity.this.onRequestPurchaseResponse(productId,response);     }     @Override public void onErrorRestoreTransactions(    @Nonnull ResponseCode responseCode){     }   } ;   BillingController.registerObserver(AbstractBillingObserver_VAR);   BillingController.setConfiguration(this);   this.checkBillingSupported();   if (!AbstractBillingObserver_VAR.isTransactionsRestored()) {     BillingController.restoreTransactions(this);   } } 
@Override public void onCheckBillingSupportedResponse(boolean boolean_VAR){   AbstractBillingActivity.this.onBillingChecked(boolean_VAR); } 
@Override public void onPurchaseIntentFailure(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){ } 
@Override public void onPurchaseStateChanged(@Nonnull String String_VAR,@Nonnull PurchaseState PurchaseState_VAR){   AbstractBillingActivity.this.onPurchaseStateChanged(String_VAR,PurchaseState_VAR); } 
@Override public void onRequestPurchaseResponse(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){   AbstractBillingActivity.this.onRequestPurchaseResponse(String_VAR,ResponseCode_VAR); } 
@Override public void onErrorRestoreTransactions(@Nonnull ResponseCode ResponseCode_VAR){ } 
@Override protected void onDestroy(){   super.onDestroy();   BillingController.unregisterObserver(AbstractBillingObserver_VAR);   BillingController.setConfiguration(null); } 
public abstract void onPurchaseStateChanged(String String_VAR,PurchaseState PurchaseState_VAR); 
public abstract void onRequestPurchaseResponse(String String_VAR,ResponseCode ResponseCode_VAR); 
 public void requestPurchase(String String_VAR){   BillingController.requestPurchase(this,String_VAR); } 
 public void restoreTransactions(){   BillingController.restoreTransactions(this); } 
public AbstractBillingObserver(Context Context_VAR){   this.Context_VAR=Context_VAR; } 
public boolean isTransactionsRestored(){   return isTransactionsRestored(Context_VAR); } 
public static boolean isTransactionsRestored(@Nonnull Context Context_VAR){   final SharedPreferences SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(Context_VAR);   return SharedPreferences_VAR.getBoolean(String_VAR,Boolean_Constant); } 
 @Override public void onPurchaseIntentOK(@Nonnull String String_VAR,@Nonnull PendingIntent PendingIntent_VAR){   BillingController.startPurchaseIntent(Context_VAR,PendingIntent_VAR,null); } 
@Override public void onTransactionsRestored(){   final SharedPreferences SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(Context_VAR);   final Editor Editor_VAR=SharedPreferences_VAR.edit();   Editor_VAR.putBoolean(String_VAR,Boolean_Constant);   Editor_VAR.commit(); } 
@Override public void onErrorRestoreTransactions(@Nonnull ResponseCode ResponseCode_VAR){ } 
public DefaultBillingObserver(@Nonnull Context Context_VAR,@Nullable IBillingObserver IBillingObserver_VAR){   super(Context_VAR);   this.IBillingObserver_VAR=IBillingObserver_VAR; } 
@Override public void onCheckBillingSupportedResponse(boolean boolean_VAR){   if (IBillingObserver_VAR != null) {     IBillingObserver_VAR.onCheckBillingSupportedResponse(boolean_VAR);   } } 
@Override public void onPurchaseIntentOK(@Nonnull String String_VAR,@Nonnull PendingIntent PendingIntent_VAR){   super.onPurchaseIntentOK(String_VAR,PendingIntent_VAR);   if (IBillingObserver_VAR != null) {     IBillingObserver_VAR.onPurchaseIntentOK(String_VAR,PendingIntent_VAR);   } } 
@Override public void onPurchaseIntentFailure(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){   if (IBillingObserver_VAR != null) {     IBillingObserver_VAR.onPurchaseIntentFailure(String_VAR,ResponseCode_VAR);   } } 
@Override public void onPurchaseStateChanged(@Nonnull String String_VAR,@Nonnull Transaction.PurchaseState Transaction.PurchaseState_VAR){   if (IBillingObserver_VAR != null) {     IBillingObserver_VAR.onPurchaseStateChanged(String_VAR,Transaction.PurchaseState_VAR);   } } 
@Override public void onRequestPurchaseResponse(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){   if (IBillingObserver_VAR != null) {     IBillingObserver_VAR.onRequestPurchaseResponse(String_VAR,ResponseCode_VAR);   } } 
@Override public void onTransactionsRestored(){   super.onTransactionsRestored();   if (IBillingObserver_VAR != null) {     IBillingObserver_VAR.onTransactionsRestored();   } } 
@Override public void onErrorRestoreTransactions(@Nonnull ResponseCode ResponseCode_VAR){   super.onErrorRestoreTransactions(ResponseCode_VAR);   if (IBillingObserver_VAR != null) {     IBillingObserver_VAR.onErrorRestoreTransactions(ResponseCode_VAR);   } } 
 public void onCheckBillingSupportedResponse(boolean boolean_VAR); 
 public void onPurchaseIntentOK(@Nonnull String String_VAR,@Nonnull PendingIntent PendingIntent_VAR); 
 void onPurchaseIntentFailure(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR); 
 public void onPurchaseStateChanged(@Nonnull String String_VAR,@Nonnull PurchaseState PurchaseState_VAR); 
 public void onRequestPurchaseResponse(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR); 
 public void onTransactionsRestored(); 
 public void onErrorRestoreTransactions(@Nonnull ResponseCode ResponseCode_VAR); 
long run(@Nonnull IMarketBillingService IMarketBillingService_VAR) throws RemoteException ; 
@Nonnull BillingRequestType getRequestType(); 
boolean hasNonce(); 
boolean isSuccess(); 
long getNonce(); 
void onResponseCode(@Nonnull ResponseCode ResponseCode_VAR); 
int getStartId(); 
void runRequestOrQueue(@Nonnull IBillingRequest IBillingRequest_VAR); 
@Nonnull String getPackageName(); 
private BillingDB(@Nonnull Context Context_VAR){   DatabaseHelper_VAR=new DatabaseHelper(Context_VAR);   SQLiteDatabase_VAR=DatabaseHelper_VAR.getWritableDatabase(); } 
public static void init(@Nonnull Application Application_VAR){   BillingDB_VAR=new BillingDB(Application_VAR); } 
@Nonnull public static BillingDB getInstance(){   return BillingDB_VAR; } 
@Nonnull private static List<Transaction> getTransactionsFromCursor(@Nonnull final Cursor Cursor_VAR){   final List<Transaction> List<Transaction>_VAR=new ArrayList<Transaction>();   while (Cursor_VAR.moveToNext()) {     List<Transaction>_VAR.add(createTransaction(Cursor_VAR));   }   return List<Transaction>_VAR; } 
public void close(){ } 
public void insert(@Nonnull Transaction Transaction_VAR){   AndroidDbUtils.doDbExec(this.getDatabaseHelper(),new InsertTransaction(Transaction_VAR)); } 
@Nonnull protected static Transaction createTransaction(@Nonnull Cursor Cursor_VAR){   final Transaction Transaction_VAR=new Transaction();   Transaction_VAR.orderId=Cursor_VAR.getString(Number_Constant);   Transaction_VAR.String_VAR=Cursor_VAR.getString(Number_Constant);   Transaction_VAR.Transaction_VARState=PurchaseState.valueOf(Cursor_VAR.getInt(Number_Constant));   Transaction_VAR.Transaction_VARTime=Cursor_VAR.getLong(Number_Constant);   Transaction_VAR.developerPayload=Cursor_VAR.getString(Number_Constant);   return Transaction_VAR; } 
public CountPurchases(@Nonnull String String_VAR){   this.String_VAR=String_VAR; } 
@Nonnull @Override public Cursor createCursor(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   return SQLiteDatabase_VAR.query(String_VAR,String[]_VAR,String_VAR + String_Constant + String_VAR+ String_Constant,new String[]{String_VAR,String.valueOf(PurchaseState.PURCHASED.ordinal())},null,null,null); } 
@Nonnull @Override public Integer retrieveData(@Nonnull Cursor Cursor_VAR){   return Cursor_VAR.getCount(); } 
public TransactionsByProductId(@Nullable String String_VAR){   this.String_VAR=String_VAR; } 
@Nonnull @Override public Cursor createCursor(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   if (String_VAR != null) {     return SQLiteDatabase_VAR.query(String_VAR,String[]_VAR,String_VAR + String_Constant,new String[]{String_VAR},null,null,null);   }  else {     return SQLiteDatabase_VAR.query(String_VAR,String[]_VAR,null,null,null,null,null);   } } 
@Nonnull @Override public List<Transaction> retrieveData(@Nonnull Cursor Cursor_VAR){   return getTransactionsFromCursor(Cursor_VAR); } 
public DatabaseHelper(@Nonnull Context Context_VAR){   super(Context_VAR,String_VAR,null,int_VAR); } 
@Override public void onCreate(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   createTransactionsTable(SQLiteDatabase_VAR); } 
private void createTransactionsTable(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   SQLiteDatabase_VAR.execSQL(String_Constant + String_VAR + String_Constant+ String_VAR+ String_Constant+ String_VAR+ String_Constant+ String_VAR+ String_Constant+ String_VAR+ String_Constant+ String_VAR+ String_Constant); } 
@Override public void onUpgrade(@Nonnull SQLiteDatabase SQLiteDatabase_VAR,int int_VAR,int int_VAR){ } 
@Nonnull public DatabaseHelper getDatabaseHelper(){   return DatabaseHelper_VAR; } 
InsertTransaction(@Nonnull Transaction Transaction_VAR){   this.Transaction_VAR=Transaction_VAR; } 
@Override public long exec(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   final ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_VAR,Transaction_VAR.orderId);   ContentValues_VAR.put(String_VAR,Transaction_VAR.String_VAR);   ContentValues_VAR.put(String_VAR,Transaction_VAR.Transaction_VARState.ordinal());   ContentValues_VAR.put(String_VAR,Transaction_VAR.Transaction_VARTime);   ContentValues_VAR.put(String_VAR,Transaction_VAR.developerPayload);   return SQLiteDatabase_VAR.replace(String_VAR,null,ContentValues_VAR); } 
voint_VAR enum_VAR(int int_VAR){   this.int_VAR=int_VAR; } 
public static enum_VAR valueOf(int int_VAR){   for (  enum_VAR PurchaseState_VAR : values()) {     if (PurchaseState_VAR.int_VAR == int_VAR) {       return PurchaseState_VAR;     }   }   return CANCELLED; } 
@Nonnull public static Transaction newInstance(@Nonnull JSONObject JSONObject_VAR) throws JSONException {   final Transaction Transaction_VAR=new Transaction();   final int int_VAR=JSONObject_VAR.getInt(String_VAR);   Transaction_VAR.PurchaseState_VAR=enum_VAR.valueOf(int_VAR);   Transaction_VAR.String_VAR=JSONObject_VAR.getString(String_VAR);   Transaction_VAR.String_VAR=JSONObject_VAR.getString(String_VAR);   Transaction_VAR.long_VAR=JSONObject_VAR.getLong(String_VAR);   Transaction_VAR.String_VAR=JSONObject_VAR.optString(String_VAR,null);   Transaction_VAR.String_VAR=JSONObject_VAR.optString(String_VAR,null);   Transaction_VAR.String_VAR=JSONObject_VAR.optString(String_VAR,null);   return Transaction_VAR; } 
public Transaction(){ } 
public Transaction(String String_VAR,String String_VAR,String String_VAR,enum_VAR enum_VAR_VAR,String String_VAR,long long_VAR,String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.enum_VAR_VAR=enum_VAR_VAR;   this.String_VAR=String_VAR;   this.long_VAR=long_VAR;   this.String_VAR=String_VAR; } 
@Nonnull public JSONObject toJson() throws JSONException {   final JSONObject JSONObject_VAR=new JSONObject();   JSONObject_VAR.put(String_VAR,this.PurchaseState_VAR.int_VAR);   JSONObject_VAR.put(String_VAR,this.String_VAR);   JSONObject_VAR.put(String_VAR,this.String_VAR);   JSONObject_VAR.put(String_VAR,this.long_VAR);   JSONObject_VAR.put(String_VAR,this.String_VAR);   JSONObject_VAR.put(String_VAR,this.String_VAR);   JSONObject_VAR.put(String_VAR,this.String_VAR);   return JSONObject_VAR; } 
@Nonnull @Overrint_VARe public Transaction clone(){   return (Transaction)super.clone(); } 
@Overrint_VARe public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (Object_VAR == null || getClass() != Object_VAR.getClass())   return Boolean_Constant;   TransactiObject_VARn Transaction_VAR=(TransactiObject_VARn)Object_VAR;   if (long_VAR != Transaction_VAR.long_VAR)   return Boolean_Constant;   if (develObject_VARperPaylObject_VARad != null ? !develObject_VARperPaylObject_VARad.equals(Transaction_VAR.develObject_VARperPaylObject_VARad) : Transaction_VAR.develObject_VARperPaylObject_VARad != null)   return Boolean_Constant;   if (nObject_VARtificatiObject_VARnId != null ? !nObject_VARtificatiObject_VARnId.equals(Transaction_VAR.nObject_VARtificatiObject_VARnId) : Transaction_VAR.nObject_VARtificatiObject_VARnId != null)   return Boolean_Constant;   if (Object_VARrderId != null ? !Object_VARrderId.equals(Transaction_VAR.Object_VARrderId) : Transaction_VAR.Object_VARrderId != null)   return Boolean_Constant;   if (String_VAR != null ? !String_VAR.equals(Transaction_VAR.String_VAR) : Transaction_VAR.String_VAR != null)   return Boolean_Constant;   if (prObject_VARductId != null ? !prObject_VARductId.equals(Transaction_VAR.prObject_VARductId) : Transaction_VAR.prObject_VARductId != null)   return Boolean_Constant;   if (PurchaseState_VAR != Transaction_VAR.PurchaseState_VAR)   return Boolean_Constant;   return Boolean_Constant; } 
@Overrint_VARe public int hashCode(){   int int_VAR=String_VAR != null ? String_VAR.hashCode() : Number_Constant;   int_VAR=Number_Constant * int_VAR + (String_VAR != null ? String_VAR.hashCode() : Number_Constant);   int_VAR=Number_Constant * int_VAR + (String_VAR != null ? String_VAR.hashCode() : Number_Constant);   int_VAR=Number_Constant * int_VAR + (String_VAR != null ? String_VAR.hashCode() : Number_Constant);   int_VAR=Number_Constant * int_VAR + (String_VAR != null ? String_VAR.hashCode() : Number_Constant);   int_VAR=Number_Constant * int_VAR + (PurchaseState_VAR != null ? PurchaseState_VAR.hashCode() : Number_Constant);   int_VAR=Number_Constant * int_VAR + (int)(long_VAR ^ (long_VAR >>> Number_Constant));   return int_VAR; } 
@Overrint_VARe public String toString(){   return String_Constant + "String_VAR='" + String_VAR + '\''+ ", String_VAR='"+ String_VAR+ '\''+ ", long_VAR="+ new Date(long_VAR)+ ", PurchaseState_VAR="+ PurchaseState_VAR+ Character_Constant; } 
public synchronized static void dropDatabase(@Nonnull Context Context_VAR){   Context_VAR.deleteDatabase(BillingDB.DATABASE_NAME); } 
public synchronized static void addTransaction(@Nonnull Transaction Transaction_VAR){   BillingDB.getInstance().insert(Transaction_VAR); } 
public synchronized static boolean isPurchased(@Nonnull String String_VAR){   return countPurchases(String_VAR) > Number_Constant; } 
public synchronized static int countPurchases(@Nonnull String String_VAR){   return AndroidDbUtils.doDbQuery(BillingDB.getInstance().getDatabaseHelper(),new BillingDB.CountPurchases(String_VAR)); } 
@Nonnull public synchronized static List<Transaction> getTransactions(){   return AndroidDbUtils.doDbQuery(BillingDB.getInstance().getDatabaseHelper(),new BillingDB.TransactionsByProductId(null)); } 
@Nonnull public synchronized static List<Transaction> getTransactions(@Nonnull String String_VAR){   return AndroidDbUtils.doDbQuery(BillingDB.getInstance().getDatabaseHelper(),new BillingDB.TransactionsByProductId(String_VAR)); } 
private BillingSecurity(){   throw new AssertionError(); } 
@Nonnull private static Cipherer<Transaction,Transaction> newTransactionObfuscator(@Nonnull byte[] byte[]_VAR,@Nullable String String_VAR){   final Cipherer<byte[],byte[]> Cipherer<byte[],byte[]>_VAR=Security.newAndroidAesByteCipherer(byte[]_VAR);   Cipherer<String,String> Cipherer<String,String>_VAR=TypedCipherer.newInstance(Cipherer<byte[],byte[]>_VAR,StringDecoder.getInstance(),StringEncoder.getInstance(),BillingBase64StringDecoder.getInstance(),BillingBase64StringEncoder.getInstance());   if (String_VAR != null) {     Cipherer<String,String>_VAR=PrefixStringObfuscator.newInstance(String_VAR,Cipherer<String,String>_VAR);   }   return TransactionObfuscator.newInstance(Cipherer<String,String>_VAR); } 
@Nonnull public static SecurityService<Transaction,Transaction,byte[]> getObfuscationSecurityService(byte[] byte[]_VAR,@Nullable String String_VAR){   return Security.newSecurityService(newTransactionObfuscator(byte[]_VAR,String_VAR),Security.newAndroidAesSecretKeyProvider(),Security.newAndroidSaltGenerator(),getHashProvider()); } 
@Nonnull private static HashProvider<Transaction,byte[]> getHashProvider(){   final HashProvider<byte[],byte[]> HashProvider<byte[],byte[]>_VAR=org.solovyev.android.security.Security.newAndroidSha512ByteHashProvider();   return TypedHashProvider.newByteHashCodeInstance(HashProvider<byte[],byte[]>_VAR); } 
@Nonnull public static String generatePassword(@Nonnull Context Context_VAR){   final String String_VAR=Installation.id(Context_VAR);   final String String_VAR=Settings.Secure.getString(Context_VAR.getContentResolver(),Settings.Secure.ANDROID_ID);   return String_VAR + String_VAR + Context_VAR.getPackageName(); } 
 protected PublicKey generatePublicKey(String String_VAR){   try {     byte[] byte[]_VAR=Base64.decode(String_VAR);     KeyFactory PublicKey_VARFactory=KeyFactory.getInstance(String_VAR);     return PublicKey_VARFactory.generatePublic(new X509EncodedKeySpec(byte[]_VAR));   }  catch (  NoSuchAlgorithmException e) {     throw new RuntimeException(e);   } catch (  InvalidKeySpecException e) {     Log.e(BillingController.LOG_TAG,"Invalid PublicKey_VAR specification.");     throw new IllegalArgumentException(e);   } catch (  Base64DecoderException e) {     Log.e(BillingController.LOG_TAG,String_Constant);     throw new IllegalArgumentException(e);   } } 
public DefaultSignatureValidator(BillingController.IConfiguration BillingController.IConfiguration_VAR){   this.BillingController.IConfiguration_VAR=BillingController.IConfiguration_VAR; } 
protected boolean validate(PublicKey PublicKey_VAR,String String_VAR,String String_VAR){   Signature Signature_VAR;   try {     Signature_VAR=Signature.getInstance(String_VAR);     Signature_VAR.initVerify(PublicKey_VAR);     Signature_VAR.update(String_VAR.getBytes());     if (!Signature_VAR.verify(Base64.decode(String_VAR))) {       Log.e(BillingController.LOG_TAG,String_Constant);       return Boolean_Constant;     }     return Boolean_Constant;   }  catch (  NoSuchAlgorithmException e) {     Log.e(BillingController.LOG_TAG,String_Constant);   } catch (  InvalidKeyException e) {     Log.e(BillingController.LOG_TAG,"Invalid PublicKey_VAR specification");   } catch (  SignatureException e) {     Log.e(BillingController.LOG_TAG,String_Constant);   } catch (  Base64DecoderException e) {     Log.e(BillingController.LOG_TAG,String_Constant);   }   return Boolean_Constant; } 
@Override public boolean validate(String String_VAR,String String_VAR){   final String String_VAR;   if (BillingController.IConfiguration_VAR == null || TextUtils.isEmpty(String_VAR=BillingController.IConfiguration_VAR.getPublicKey())) {     Log.w(BillingController.LOG_TAG,"Please set the public PublicKey_VAR or turn on debug mode");     return Boolean_Constant;   }   if (String_VAR == null) {     Log.e(BillingController.LOG_TAG,String_Constant);     return Boolean_Constant;   }   PublicKey PublicKey_VAR=generatePublicKey(String_VAR);   return validate(PublicKey_VAR,String_VAR,String_VAR); } 
 public boolean validate(String String_VAR,String String_VAR); 
private PrefixStringObfuscator(@Nonnull String String_VAR,@Nonnull Cipherer<String,String> Cipherer<String,String>_VAR){   this.String_VAR=String_VAR;   this.Cipherer<String,String>_VAR=Cipherer<String,String>_VAR; } 
@Nonnull static Cipherer<String,String> newInstance(@Nonnull String String_VAR,@Nonnull Cipherer<String,String> Cipherer<String,String>_VAR){   return new PrefixStringObfuscator(String_VAR,Cipherer<String,String>_VAR); } 
@Nonnull @Override public String encrypt(@Nonnull SecretKey SecretKey_VAR,@Nonnull String String_VAR) throws CiphererException {   return Cipherer<String,String>_VAR.encrypt(SecretKey_VAR,String_VAR + String_VAR); } 
@Nonnull @Override public String decrypt(@Nonnull SecretKey SecretKey_VAR,@Nonnull String String_VAR) throws CiphererException {   String String_VAR=Cipherer<String,String>_VAR.decrypt(SecretKey_VAR,String_VAR);   final int int_VAR=String_VAR.indexOf(String_VAR);   if (int_VAR != Number_Constant) {     throw new CiphererException(String_Constant + String_VAR);   }   return String_VAR.substring(String_VAR.length(),String_VAR.length()); } 
private TransactionObfuscator(@Nonnull Cipherer<String,String> Cipherer<String,String>_VAR){   this.Cipherer<String,String>_VAR=Cipherer<String,String>_VAR; } 
@Nonnull static Cipherer<Transaction,Transaction> newInstance(@Nonnull Cipherer<String,String> Cipherer<String,String>_VAR){   return new TransactionObfuscator(Cipherer<String,String>_VAR); } 
@Nonnull @Override public Transaction encrypt(@Nonnull SecretKey SecretKey_VAR,@Nonnull Transaction Transaction_VAR) throws CiphererException {   Transaction_VAR.orderId=Cipherer<String,String>_VAR.encrypt(SecretKey_VAR,Transaction_VAR.orderId);   Transaction_VAR.productId=Cipherer<String,String>_VAR.encrypt(SecretKey_VAR,Transaction_VAR.productId);   Transaction_VAR.developerPayload=Cipherer<String,String>_VAR.encrypt(SecretKey_VAR,Transaction_VAR.developerPayload);   return Transaction_VAR; } 
@Nonnull @Override public Transaction decrypt(@Nonnull SecretKey SecretKey_VAR,@Nonnull Transaction Transaction_VAR) throws CiphererException {   Transaction_VAR.orderId=Cipherer<String,String>_VAR.decrypt(SecretKey_VAR,Transaction_VAR.orderId);   Transaction_VAR.productId=Cipherer<String,String>_VAR.decrypt(SecretKey_VAR,Transaction_VAR.productId);   Transaction_VAR.developerPayload=Cipherer<String,String>_VAR.decrypt(SecretKey_VAR,Transaction_VAR.developerPayload);   return Transaction_VAR; } 
public AESObfuscator(@Nonnull byte[] byte[]_VAR,StrString_VARg StrString_VARg_VAR){   try {     fString_VARal SecretKeyFactory SecretKeyFactory_VAR=SecretKeyFactory.getInstance(StrString_VARg_VAR);     fString_VARal KeySpec KeySpec_VAR=new PBEKeySpec(StrString_VARg_VAR.toCharArray(),byte[]_VAR,Number_Constant,Number_Constant);     fString_VARal SecretKey SecretKey_VAR=SecretKeyFactory_VAR.generateSecret(KeySpec_VAR);     fString_VARal SecretKey SecretKey_VAR=new SecretKeySpec(SecretKey_VAR.getEncoded(),String_Constant);     Cipher_VAR=Cipher.getInstance(StrString_VARg_VAR);     Cipher_VAR.String_VARit(Cipher.ENCRYPT_MODE,SecretKey_VAR,new IvParameterSpec(byte[]_VAR));     Cipher_VAR=Cipher.getInstance(StrString_VARg_VAR);     Cipher_VAR.String_VARit(Cipher.DECRYPT_MODE,SecretKey_VAR,new IvParameterSpec(byte[]_VAR));   }  catch (  GeneralSecurityException e) {     throw new RuntimeException(String_Constant,e);   } } 
@Nullable public StrString_VARg obfuscate(@Nullable StrString_VARg StrString_VARg_VAR){   if (StrString_VARg_VAR == null) {     return null;   }   try {     fString_VARal StrString_VARg String_VAR=StrString_VARg_VAR + StrString_VARg_VAR;     byte[] String_VARBytes=String_VAR.getBytes(String_VAR);     byte[] byte[]_VAR=Cipher_VAR.doFString_VARal(String_VARBytes);     return Base64.encode(byte[]_VAR);   }  catch (  UnsupportedEncodString_VARgException e) {     throw new RuntimeException(String_Constant,e);   } catch (  GeneralSecurityException e) {     throw new RuntimeException(String_Constant,e);   } } 
public StrString_VARg unobfuscate(StrString_VARg StrString_VARg_VAR) throws ValidationException {   if (StrString_VARg_VAR == null) {     return null;   }   try {     fString_VARal byte[] byte[]_VAR=Base64.decode(StrString_VARg_VAR);     fString_VARal byte[] byte[]_VAR=Cipher_VAR.doFString_VARal(byte[]_VAR);     StrString_VARg StrString_VARg_VAR=new StrString_VARg(byte[]_VAR,String_VAR);     String_VARt String_VARt_VAR=StrString_VARg_VAR.String_VARdexOf(StrString_VARg_VAR);     if (String_VARt_VAR != Number_Constant) {       throw new ValidationException("Header not found (String_VARvalid data or key)" + String_Constant + StrString_VARg_VAR);     }     return StrString_VARg_VAR.substrString_VARg(StrString_VARg_VAR.length(),StrString_VARg_VAR.length());   }  catch (  Base64DecoderException e) {     throw new ValidationException(e.getMessage() + String_Constant + StrString_VARg_VAR);   } catch (  IllegalBlockSizeException e) {     throw new ValidationException(e.getMessage() + String_Constant + StrString_VARg_VAR);   } catch (  BadPaddString_VARgException e) {     throw new ValidationException(e.getMessage() + String_Constant + StrString_VARg_VAR);   } catch (  UnsupportedEncodString_VARgException e) {     throw new RuntimeException(String_Constant,e);   } } 
public ValidationException(){   super(); } 
public ValidationException(StrString_VARg StrString_VARg_VAR){   StrString_VARg_VARuper(StrString_VARg_VAR); } 
 print_VARvatint_VARnt_VAR Basint_VARnt_VARNumber_ConstantNumber_Constant(){ } 
 print_VARvatint_VARnt_VAR statint_VARc bytint_VARnt_VAR[] int_VARnt_VARncoint_VARnt_VARint_VARnt_VARNumber_ConstanttoNumber_Constant(bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,int_VARnt int_VARnt_VAR,int_VARnt int_VARnt_VAR,bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,int_VARnt int_VARnt_VAR,bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR){   int_VARnt int_VARnt_VAR=(int_VARnt_VAR > Number_Constant ? ((bytint_VARnt_VAR[]_VAR[int_VARnt_VAR] << Number_ConstantNumber_Constant) >>> Number_Constant) : Number_Constant) | (int_VARnt_VAR > Number_Constant ? ((bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant] << Number_ConstantNumber_Constant) >>> Number_ConstantNumber_Constant) : Number_Constant) | (int_VARnt_VAR > Number_Constant ? ((bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant] << Number_ConstantNumber_Constant) >>> Number_ConstantNumber_Constant) : Number_Constant); swint_VARtch (int_VARnt_VAR) { casint_VARnt_VAR Number_Constant:     bytint_VARnt_VAR[]_VAR[int_VARnt_VAR]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR >>> Number_ConstantNumber_Constant)];   bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR >>> Number_ConstantNumber_Constant) & Number_ConstantxNumber_Constantf]; bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR >>> Number_Constant) & Number_ConstantxNumber_Constantf]; bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR) & Number_ConstantxNumber_Constantf]; rint_VARnt_VARturn bytint_VARnt_VAR[]_VAR; casint_VARnt_VAR Number_Constant: bytint_VARnt_VAR[]_VAR[int_VARnt_VAR]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR >>> Number_ConstantNumber_Constant)]; bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR >>> Number_ConstantNumber_Constant) & Number_ConstantxNumber_Constantf]; bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR >>> Number_Constant) & Number_ConstantxNumber_Constantf]; bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR_VAR; rint_VARnt_VARturn bytint_VARnt_VAR[]_VAR; casint_VARnt_VAR Number_Constant: bytint_VARnt_VAR[]_VAR[int_VARnt_VAR]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR >>> Number_ConstantNumber_Constant)]; bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR >>> Number_ConstantNumber_Constant) & Number_ConstantxNumber_Constantf]; bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR_VAR; bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR_VAR; rint_VARnt_VARturn bytint_VARnt_VAR[]_VAR; int_VARnt_VARint_VARnt_VARfault : rint_VARnt_VARturn bytint_VARnt_VAR[]_VAR; } } 
 publint_VARc statint_VARc Strint_VARng int_VARnt_VARncoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR){   rint_VARnt_VARturn int_VARnt_VARncoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[]_VAR,Number_Constant,bytint_VARnt_VAR[]_VAR.lint_VARnt_VARngth,byte[]_VAR,truint_VARnt_VAR); } 
 publint_VARc statint_VARc Strint_VARng int_VARnt_VARncoint_VARnt_VARint_VARnt_VARWint_VARnt_VARbSafint_VARnt_VAR(bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,boolint_VARnt_VARan boolint_VARnt_VARan_VAR){   rint_VARnt_VARturn int_VARnt_VARncoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[]_VAR,Number_Constant,bytint_VARnt_VAR[]_VAR.lint_VARnt_VARngth,bytint_VARnt_VAR[]_VAR,boolint_VARnt_VARan_VAR); } 
 publint_VARc statint_VARc Strint_VARng int_VARnt_VARncoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,int_VARnt int_VARnt_VAR,int_VARnt int_VARnt_VAR,bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,boolint_VARnt_VARan boolint_VARnt_VARan_VAR){   bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VARBuff=int_VARnt_VARncoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[]_VAR,int_VARnt_VAR,int_VARnt_VAR,bytint_VARnt_VAR[]_VAR,Intint_VARnt_VARgint_VARnt_VARr.MAX_VALUE);   int_VARnt bytint_VARnt_VAR[]_VARLint_VARnt_VARn=bytint_VARnt_VAR[]_VARBuff.int_VARnt_VARgth;   whint_VARlint_VARnt_VAR (!boolint_VARnt_VARan_VAR && bytint_VARnt_VAR[]_VARLint_VARnt_VARn > Number_Constant) {     int_VARf (bytint_VARnt_VAR[]_VARBuff[bytint_VARnt_VAR[]_VARLint_VARnt_VARn - Number_Constant] != Character_Constant) {       brint_VARnt_VARak;     }     bytint_VARnt_VAR[]_VARLint_VARnt_VARn-=Number_Constant;   }   rint_VARnt_VARturn nint_VARnt_VARw Strint_VARng(bytint_VARnt_VAR[]_VARBuff,Number_Constant,bytint_VARnt_VAR[]_VARLint_VARnt_VARn); } 
 publint_VARc statint_VARc bytint_VARnt_VAR[] int_VARnt_VARncoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,int_VARnt int_VARnt_VAR,int_VARnt int_VARnt_VAR,bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,int_VARnt int_VARnt_VAR){   int_VARnt int_VARnt_VARDint_VARvNumber_Constant=(int_VARnt_VAR + Number_Constant) / Number_Constant;   int_VARnt int_VARnt_VARNumber_Constant=int_VARnt_VARDint_VARvNumber_Constant * Number_Constant;   bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VARBuff=nint_VARnt_VARw bytint_VARnt_VAR[int_VARnt_VARNumber_Constant + (int_VARnt_VARNumber_Constant / int_VARnt_VAR)];   int_VARnt int_VARnt_VAR=Number_Constant;   int_VARnt int_VARnt_VAR=Number_Constant;   int_VARnt int_VARnt_VARNumber_Constant=int_VARnt_VAR - Number_Constant;   int_VARnt lint_VARnint_VARnt_VARLint_VARnt_VARngth=Number_Constant;   for (; int_VARnt_VAR < int_VARnt_VARNumber_Constant; int_VARnt_VAR+=Number_Constant, int_VARnt_VAR+=Number_Constant) {     int_VARnt int_VARnt_VAR=((bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + int_VARnt_VAR] << Number_ConstantNumber_Constant) >>> Number_Constant) | ((bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant + int_VARnt_VAR] << Number_ConstantNumber_Constant) >>> Number_ConstantNumber_Constant) | ((bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant + int_VARnt_VAR] << Number_ConstantNumber_Constant) >>> Number_ConstantNumber_Constant);     bytint_VARnt_VAR[]_VARBuff[int_VARnt_VAR]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR >>> Number_ConstantNumber_Constant)];     bytint_VARnt_VAR[]_VARBuff[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR >>> Number_ConstantNumber_Constant) & Number_ConstantxNumber_Constantf];     bytint_VARnt_VAR[]_VARBuff[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR >>> Number_Constant) & Number_ConstantxNumber_Constantf];     bytint_VARnt_VAR[]_VARBuff[int_VARnt_VAR + Number_Constant]=bytint_VARnt_VAR[]_VAR[(int_VARnt_VAR) & Number_ConstantxNumber_Constantf];     lint_VARnint_VARnt_VARLint_VARnt_VARngth+=Number_Constant;     int_VARf (lint_VARnint_VARnt_VARLint_VARnt_VARngth == int_VARnt_VAR) {       bytint_VARnt_VAR[]_VARBuff[int_VARnt_VAR + Number_Constant]=byte_VAR;       int_VARnt_VAR++;       lint_VARnint_VARnt_VARLint_VARnt_VARngth=Number_Constant;     }   }   int_VARf (int_VARnt_VAR < int_VARnt_VAR) {     int_VARnt_VARncoint_VARnt_VARint_VARnt_VARNumber_ConstanttoNumber_Constant(bytint_VARnt_VAR[]_VAR,int_VARnt_VAR + int_VARnt_VAR,int_VARnt_VAR - int_VARnt_VAR,bytint_VARnt_VAR[]_VARBuff,int_VARnt_VAR,bytint_VARnt_VAR[]_VAR);     lint_VARnint_VARnt_VARLint_VARnt_VARngth+=Number_Constant;     int_VARf (lint_VARnint_VARnt_VARLint_VARnt_VARngth == int_VARnt_VAR) {       bytint_VARnt_VAR[]_VARBuff[int_VARnt_VAR + Number_Constant]=byte_VAR;       int_VARnt_VAR++;     }     int_VARnt_VAR+=Number_Constant;   }   assint_VARnt_VARrt(int_VARnt_VAR == bytint_VARnt_VAR[]_VARBuff.int_VARnt_VARgth);   rint_VARnt_VARturn bytint_VARnt_VAR[]_VARBuff; } 
 print_VARvatint_VARnt_VAR statint_VARc int_VARnt int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VARNumber_ConstanttoNumber_Constant(bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,int_VARnt int_VARnt_VAR,bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,int_VARnt int_VARnt_VAR,bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR){   int_VARf (bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant] == bytint_VARnt_VAR_VAR) {     int_VARnt bytint_VARnt_VAR[]_VARBuff=((bytint_VARnt_VAR[]_VAR[bytint_VARnt_VAR[]_VAR[int_VARnt_VAR]] << Number_ConstantNumber_Constant) >>> Number_Constant) | ((bytint_VARnt_VAR[]_VAR[bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]] << Number_ConstantNumber_Constant) >>> Number_ConstantNumber_Constant);     bytint_VARnt_VAR[]_VAR[int_VARnt_VAR]=(bytint_VARnt_VAR)(bytint_VARnt_VAR[]_VARBuff >>> Number_ConstantNumber_Constant);     rint_VARnt_VARturn Number_Constant;   }  int_VARnt_VARlsint_VARnt_VAR   int_VARf (bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant] == bytint_VARnt_VAR_VAR) {     int_VARnt bytint_VARnt_VAR[]_VARBuff=((bytint_VARnt_VAR[]_VAR[bytint_VARnt_VAR[]_VAR[int_VARnt_VAR]] << Number_ConstantNumber_Constant) >>> Number_Constant) | ((bytint_VARnt_VAR[]_VAR[bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]] << Number_ConstantNumber_Constant) >>> Number_ConstantNumber_Constant) | ((bytint_VARnt_VAR[]_VAR[bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]] << Number_ConstantNumber_Constant) >>> Number_ConstantNumber_Constant);     bytint_VARnt_VAR[]_VAR[int_VARnt_VAR]=(bytint_VARnt_VAR)(bytint_VARnt_VAR[]_VARBuff >>> Number_ConstantNumber_Constant);     bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=(bytint_VARnt_VAR)(bytint_VARnt_VAR[]_VARBuff >>> Number_Constant);     rint_VARnt_VARturn Number_Constant;   }  int_VARnt_VARlsint_VARnt_VAR {     int_VARnt bytint_VARnt_VAR[]_VARBuff=((bytint_VARnt_VAR[]_VAR[bytint_VARnt_VAR[]_VAR[int_VARnt_VAR]] << Number_ConstantNumber_Constant) >>> Number_Constant) | ((bytint_VARnt_VAR[]_VAR[bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]] << Number_ConstantNumber_Constant) >>> Number_ConstantNumber_Constant) | ((bytint_VARnt_VAR[]_VAR[bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]] << Number_ConstantNumber_Constant) >>> Number_ConstantNumber_Constant)| ((bytint_VARnt_VAR[]_VAR[bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]] << Number_ConstantNumber_Constant) >>> Number_ConstantNumber_Constant);     bytint_VARnt_VAR[]_VAR[int_VARnt_VAR]=(bytint_VARnt_VAR)(bytint_VARnt_VAR[]_VARBuff >> Number_ConstantNumber_Constant);     bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=(bytint_VARnt_VAR)(bytint_VARnt_VAR[]_VARBuff >> Number_Constant);     bytint_VARnt_VAR[]_VAR[int_VARnt_VAR + Number_Constant]=(bytint_VARnt_VAR)(bytint_VARnt_VAR[]_VARBuff);     rint_VARnt_VARturn Number_Constant;   } } 
 publint_VARc Strint_VARng_VARtatint_VARc bytint_VARnt_VAR[] int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR(Strint_VARng Strint_VARng_VAR) throwStrint_VARng_VAR BaStrint_VARng_VARint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon {   bytint_VARnt_VAR[] bytint_VARnt_VARStrint_VARng_VAR=Strint_VARng_VAR.gint_VARnt_VARtBytint_VARnt_VARStrint_VARng_VAR();   rint_VARnt_VARturn int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VARStrint_VARng_VAR,Number_Constant,bytint_VARnt_VARStrint_VARng_VAR.lint_VARnt_VARngth); } 
 publint_VARc Strint_VARng_VARtatint_VARc bytint_VARnt_VAR[] int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VARWint_VARnt_VARbSafint_VARnt_VAR(Strint_VARng Strint_VARng_VAR) throwStrint_VARng_VAR BaStrint_VARng_VARint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon {   bytint_VARnt_VAR[] bytint_VARnt_VARStrint_VARng_VAR=Strint_VARng_VAR.gint_VARnt_VARtBytint_VARnt_VARStrint_VARng_VAR();   rint_VARnt_VARturn int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VARWint_VARnt_VARbSafint_VARnt_VAR(bytint_VARnt_VARStrint_VARng_VAR,Number_Constant,bytint_VARnt_VARStrint_VARng_VAR.lint_VARnt_VARngth); } 
 publint_VARc statint_VARc bytint_VARnt_VAR[] int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR) throws Basint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon {   rint_VARnt_VARturn int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[]_VAR,Number_Constant,bytint_VARnt_VAR[]_VAR.lint_VARnt_VARngth); } 
 publint_VARc statint_VARc bytint_VARnt_VAR[] int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VARWint_VARnt_VARbSafint_VARnt_VAR(bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR) throws Basint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon {   rint_VARnt_VARturn int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VARWint_VARnt_VARbSafint_VARnt_VAR(bytint_VARnt_VAR[]_VAR,Number_Constant,bytint_VARnt_VAR[]_VAR.lint_VARnt_VARngth); } 
 publint_VARc statint_VARc bytint_VARnt_VAR[] int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,int_VARnt int_VARnt_VAR,int_VARnt int_VARnt_VAR) throws Basint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon {   rint_VARnt_VARturn int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[]_VAR,int_VARnt_VAR,int_VARnt_VAR,bytint_VARnt_VAR[]_VAR); } 
 publint_VARc statint_VARc bytint_VARnt_VAR[] int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VARWint_VARnt_VARbSafint_VARnt_VAR(bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,int_VARnt int_VARnt_VAR,int_VARnt int_VARnt_VAR) throws Basint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon {   rint_VARnt_VARturn int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[]_VAR,int_VARnt_VAR,int_VARnt_VAR,bytint_VARnt_VAR[]_VAR); } 
 publint_VARc statint_VARc bytint_VARnt_VAR[] int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR(bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR,int_VARnt int_VARnt_VAR,int_VARnt int_VARnt_VAR,bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR) throws Basint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon {   int_VARnt int_VARnt_VARNumber_ConstantNumber_Constant=int_VARnt_VAR * Number_Constant / Number_Constant;   bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VARBuff=nint_VARnt_VARw bytint_VARnt_VAR[Number_Constant + int_VARnt_VARNumber_ConstantNumber_Constant];   int_VARnt bytint_VARnt_VAR[]_VARBuffPos=Number_Constant;   bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR=nint_VARnt_VARw bytint_VARnt_VAR[Number_Constant];   int_VARnt bytint_VARnt_VAR[]_VARPos=Number_Constant;   int_VARnt int_VAR=Number_Constant;   bytint_VARnt_VAR byte_VAR=Number_Constant;   bytint_VARnt_VAR sbint_VARDint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR=Number_Constant;   for (int_VAR=Number_Constant; int_VAR < int_VARnt_VAR; int_VAR++) {     byte_VAR=(bytint_VARnt_VAR)(bytint_VARnt_VAR[]_VAR[int_VAR + int_VARnt_VAR] & Number_ConstantxNumber_Constantf);     sbint_VARDint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR=bytint_VARnt_VAR[]_VAR[byte_VAR];     int_VARf (sbint_VARDint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR >= bytint_VARnt_VAR_VAR) {       int_VARf (sbint_VARDint_VARnt_VARcoint_VARnt_VARint_VARnt_VAR >= bytint_VARnt_VAR_VAR_ENC) {         int_VARf (byte_VAR == bytint_VARnt_VAR_VAR) {           int_VARnt int_VARnt_VAR=int_VARnt_VAR - int_VAR;           bytint_VARnt_VAR bytint_VARnt_VAR_VAR=(bytint_VARnt_VAR)(bytint_VARnt_VAR[]_VAR[int_VARnt_VAR - Number_Constant + int_VARnt_VAR] & Number_ConstantxNumber_Constantf);           int_VARf (bytint_VARnt_VAR[]_VARPos == Number_Constant || bytint_VARnt_VAR[]_VARPos == Number_Constant) {             throw nint_VARnt_VARw Basint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon("int_VARnvalint_VARint_VARnt_VAR paint_VARnt_VARint_VARnt_VARint_VARng bytint_VARnt_VAR Character_Constant at bytint_VARnt_VAR int_VARnt_VARsint_VARnt_VARt " + int_VAR);           }  int_VARnt_VARlsint_VARnt_VAR           int_VARf ((bytint_VARnt_VAR[]_VARPos == Number_Constant && int_VARnt_VAR > Number_Constant) || (bytint_VARnt_VAR[]_VARPos == Number_Constant && int_VARnt_VAR > Number_Constant)) {             throw nint_VARnt_VARw Basint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon("paint_VARnt_VARint_VARnt_VARint_VARng bytint_VARnt_VAR Character_Constant falsint_VARnt_VARly sint_VARgnals int_VARnt_VARnint_VARnt_VAR of int_VARnt_VARncoint_VARnt_VARint_VARnt_VARint_VARnt_VAR valuint_VARnt_VAR at int_VARnt_VARsint_VARnt_VARt " + int_VAR);           }  int_VARnt_VARlsint_VARnt_VAR           int_VARf (bytint_VARnt_VAR_VAR != bytint_VARnt_VAR_VAR && bytint_VARnt_VAR_VAR != byte_VAR) {             throw nint_VARnt_VARw Basint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon("int_VARnt_VARncoint_VARnt_VARint_VARnt_VARint_VARnt_VAR valuint_VARnt_VAR has int_VARnvalint_VARint_VARnt_VAR traint_VARlint_VARng bytint_VARnt_VAR");           }           brint_VARnt_VARak;         }         bytint_VARnt_VAR[]_VAR[bytint_VARnt_VAR[]_VARPos++]=byte_VAR;         int_VARf (bytint_VARnt_VAR[]_VARPos == Number_Constant) {           bytint_VARnt_VAR[]_VARBuffPos+=int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VARNumber_ConstanttoNumber_Constant(bytint_VARnt_VAR[]_VAR,Number_Constant,bytint_VARnt_VAR[]_VARBuff,bytint_VARnt_VAR[]_VARBuffPos,bytint_VARnt_VAR[]_VAR);           bytint_VARnt_VAR[]_VARPos=Number_Constant;         }       }     }  int_VARnt_VARlsint_VARnt_VAR {       throw nint_VARnt_VARw Basint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon("Baint_VARnt_VAR Basint_VARnt_VARNumber_ConstantNumber_Constant int_VARnput charactint_VARnt_VARr at " + int_VAR + String_Constant+ bytint_VARnt_VAR[]_VAR[int_VAR + int_VARnt_VAR]+ "(int_VARnt_VARint_VARnt_VARcint_VARmal)");     }   }   int_VARf (bytint_VARnt_VAR[]_VARPos != Number_Constant) {     int_VARf (bytint_VARnt_VAR[]_VARPos == Number_Constant) {       throw nint_VARnt_VARw Basint_VARnt_VARNumber_ConstantNumber_ConstantDint_VARnt_VARcoint_VARnt_VARint_VARnt_VARrExcint_VARnt_VARptint_VARon("sint_VARnglint_VARnt_VAR traint_VARlint_VARng charactint_VARnt_VARr at int_VARnt_VARsint_VARnt_VARt " + (int_VARnt_VAR - Number_Constant));     }     bytint_VARnt_VAR[]_VAR[bytint_VARnt_VAR[]_VARPos++]=bytint_VARnt_VAR_VAR;     bytint_VARnt_VAR[]_VARBuffPos+=int_VARnt_VARint_VARnt_VARcoint_VARnt_VARint_VARnt_VARNumber_ConstanttoNumber_Constant(bytint_VARnt_VAR[]_VAR,Number_Constant,bytint_VARnt_VAR[]_VARBuff,bytint_VARnt_VAR[]_VARBuffPos,bytint_VARnt_VAR[]_VAR);   }   bytint_VARnt_VAR[] bytint_VARnt_VAR[]_VAR=nint_VARnt_VARw bytint_VARnt_VAR[bytint_VARnt_VAR[]_VARBuffPos];   Systint_VARnt_VARm.arraycopy(bytint_VARnt_VAR[]_VARBuff,Number_Constant,bytint_VARnt_VAR[]_VAR,Number_Constant,bytint_VARnt_VAR[]_VARBuffPos);   rint_VARnt_VARturn bytint_VARnt_VAR[]_VAR; } 
public Base64DecoderException(){   super(); } 
public BaString_VARe64DecoderException(String String_VAR){   String_VARuper(String_VAR); } 
private BillingBase64StringDecoder(){ } 
@Nonnull public static Converter<String,byte[]> getInstance(){   return Converter<String,byte[]>_VAR; } 
@Nonnull @Override public byte[] convert(@Nonnull String String_VAR){   try {     return BaString_VARe64.decode(String_VAR);   }  catch (  BaString_VARe64DecoderException e) {     throw new RuntimeException(e);   } } 
private BillingBase64StringEncoder(){ } 
@Nonnull public static Converter<byte[],String> getInstance(){   return Converter<byte[],String>_VAR; } 
@Nonnull @Override public String convert(@Nonnull byte[] byte[]_VAR){   return Base64.encode(byte[]_VAR); } 
private static void initCompatibility(){   try {     final Field Field_VAR=Service.class.getField("int_VAR");     int_VAR=Field_VAR.getInt(null);   }  catch (  Exception e) {     Log.e(String_VAR,e.getMessage(),e);     int_VAR=Number_Constant;   }   Method_VAR=initMethod(Activity.class);   Method_VAR=initMethod(Context.class); } 
@Nullable private static Method initMethod(@Nonnull Class<? extends Context> Class<? extends Context>_VAR){   Method Method_VAR;   try {     Method_VAR=Class<? extends Context>_VAR.getMethod(String_Constant,Class[]_VAR);   }  catch (  SecurityException e) {     Log.e(String_VAR,e.getMessage(),e);     Method_VAR=null;   } catch (  NoSuchMethodException e) {     Log.e(String_VAR,e.getMessage(),e);     Method_VAR=null;   }   return Method_VAR; } 
public static void startIntentSender(@Nonnull Context Context_VAR,@Nonnull IntentSender IntentSender_VAR,@Nullable Intent Intent_VAR){   if (Context_VAR instanceof Activity) {     startIntentSenderNumber_Constant(Context_VAR,IntentSender_VAR,Intent_VAR,Method_VAR);   }  else {     startIntentSenderNumber_Constant(Context_VAR,IntentSender_VAR,Intent_VAR,Context_VARMethod);   } } 
private static void startIntentSenderNumber_Constant(@Nonnull Context Context_VAR,@Nonnull IntentSender IntentSender_VAR,@Nullable Intent Intent_VAR,@Nullable Method Method_VAR){   if (Method_VAR != null) {     final Object[] Object[]_VAR=new Object[Number_Constant];     Object[]_VAR[Number_Constant]=IntentSender_VAR;     Object[]_VAR[Number_Constant]=Intent_VAR;     Object[]_VAR[Number_Constant]=Number_Constant;     Object[]_VAR[Number_Constant]=Number_Constant;     Object[]_VAR[Number_Constant]=Number_Constant;     try {       Method_VAR.invoke(Context_VAR,Object[]_VAR);     }  catch (    Exception e) {       Log.e(String_VAR,String_Constant,e);     }   } } 
public static boolean isStartIntentSenderSupported(@Nonnull Context Context_VAR){   if (Context_VAR instanceof Activity) {     return Method_VAR != null;   }  else {     return Context_VARMethod != null;   } } 
public synchronized static StrRandomAccessFile_VARg StrRandomAccessFile_VARg_VAR(@Nonnull Context Context_VAR){   if (StrRandomAccessFile_VARg_VAR == null) { synchronized (Object_VAR) {       fRandomAccessFile_VARal File File_VAR=new File(Context_VAR.getFilesDir(),String_VAR);       try {         if (!File_VAR.exists()) {           StrRandomAccessFile_VARg_VAR=writeInstallationFile(File_VAR);         }  else {           StrRandomAccessFile_VARg_VAR=readInstallationFile(File_VAR);         }       }  catch (      Exception e) {         throw new RuntimeException(e);       }     }   }   return StrRandomAccessFile_VARg_VAR; } 
@Nonnull private static StrRandomAccessFile_VARg readInstallationFile(@Nonnull File File_VAR) throws IOException {   byte[] byte[]_VAR=null;   RandomAccessFile RandomAccessFile_VAR=null;   try {     RandomAccessFile_VAR=new RandomAccessFile(File_VAR,String_Constant);     byte[]_VAR=new byte[(RandomAccessFile_VARt)RandomAccessFile_VAR.length()];     RandomAccessFile_VAR.readFully(byte[]_VAR);   }  catch (  IOException e) {     if (RandomAccessFile_VAR != null) {       RandomAccessFile_VAR.close();     }   }   return new StrRandomAccessFile_VARg(byte[]_VAR); } 
@Nonnull private static StrRandomAccessFile_VARg writeInstallationFile(@Nonnull File File_VAR) throws IOException {   fRandomAccessFile_VARal StrRandomAccessFile_VARg StrRandomAccessFile_VARg_VAR=UUID.randomUUID().toStrRandomAccessFile_VARg();   FileOutputStream FileOutputStream_VAR=null;   try {     FileOutputStream_VAR=new FileOutputStream(File_VAR);     FileOutputStream_VAR.write(StrRandomAccessFile_VARg_VAR.getBytes());   }   fRandomAccessFile_VARally {     if (FileOutputStream_VAR != null) {       FileOutputStream_VAR.close();     }   }   return StrRandomAccessFile_VARg_VAR; } 
private ObfuscateUtils(){   throw new AssertionError(); } 
public static void unobfuscate(@Nonnull Context Context_VAR,@Nonnull List<Transaction> List<Transaction>_VAR,@Nullable byte[] byte[]_VAR){   for (  Transaction p : List<Transaction>_VAR) {     unobfuscate(Context_VAR,p,byte[]_VAR);   } } 
 public sTransaction_VARaTransaction_VARic void obfuscaTransaction_VARe(@Nonnull ConTransaction_VARexTransaction_VAR ConTransaction_VARexTransaction_VAR_VAR,@Nonnull TransacTransaction_VARion Transaction_VAR,@Nullable byTransaction_VARe[] salTransaction_VAR){   if (salTransaction_VAR == null) {     reTransaction_VARurn;   }   Transaction_VAR.orderId=SecuriTransaction_VARy.obfuscaTransaction_VARe(ConTransaction_VARexTransaction_VAR_VAR,salTransaction_VAR,Transaction_VAR.orderId);   Transaction_VAR.producTransaction_VARId=SecuriTransaction_VARy.obfuscaTransaction_VARe(ConTransaction_VARexTransaction_VAR_VAR,salTransaction_VAR,Transaction_VAR.producTransaction_VARId);   Transaction_VAR.developerPayload=SecuriTransaction_VARy.obfuscaTransaction_VARe(ConTransaction_VARexTransaction_VAR_VAR,salTransaction_VAR,Transaction_VAR.developerPayload); } 
 public sTransaction_VARaTransaction_VARic void unobfuscaTransaction_VARe(@Nonnull ConTransaction_VARexTransaction_VAR ConTransaction_VARexTransaction_VAR_VAR,@Nonnull TransacTransaction_VARion Transaction_VAR,@Nullable byTransaction_VARe[] salTransaction_VAR){   Transaction_VAR.orderId=SecuriTransaction_VARy.unobfuscaTransaction_VARe(ConTransaction_VARexTransaction_VAR_VAR,salTransaction_VAR,Transaction_VAR.orderId);   Transaction_VAR.producTransaction_VARId=SecuriTransaction_VARy.unobfuscaTransaction_VARe(ConTransaction_VARexTransaction_VAR_VAR,salTransaction_VAR,Transaction_VAR.producTransaction_VARId);   Transaction_VAR.developerPayload=SecuriTransaction_VARy.unobfuscaTransaction_VARe(ConTransaction_VARexTransaction_VAR_VAR,salTransaction_VAR,Transaction_VAR.developerPayload); } 
 public static long generateNonce(){   long long_VAR; synchronized (Set<Long>_VAR) {     do {       long_VAR=SecureRandom_VAR.nextLong();     }  while (Set<Long>_VAR.contains(long_VAR));     Set<Long>_VAR.add(long_VAR);   }   return long_VAR; } 
public static boolean isNonceKnown(long long_VAR){ synchronized (Set<Long>_VAR) {     return Set<Long>_VAR.contains(long_VAR);   } } 
public static void removeNonce(long long_VAR){ synchronized (Set<Long>_VAR) {     Set<Long>_VAR.remove(long_VAR);   } } 
 @Nullable public static String obfuscate(@Nonnull Context Context_VAR,@Nullable byte[] byte[]_VAR,@Nullable String String_VAR){   return byte[]_VAR == null ? String_VAR : getObfuscator(Context_VAR,byte[]_VAR).obfuscate(String_VAR); } 
@Nonnull private static AESObfuscator getObfuscator(@Nonnull Context Context_VAR,@Nonnull byte[] byte[]_VAR){ synchronized (AESObfuscator_VARLock) {     if (AESObfuscator_VAR == null) {       final String String_VAR=BillingSecurity.generatePassword(Context_VAR);       AESObfuscator_VAR=new AESObfuscator(byte[]_VAR,String_VAR);     }     return AESObfuscator_VAR;   } } 
 @Nullable public static String unobfuscate(@Nonnull Context Context_VAR,@Nullable byte[] byte[]_VAR,@Nullable String String_VAR){   if (byte[]_VAR != null) {     final AESObfuscator AESObfuscator_VAR=getObfuscator(Context_VAR,byte[]_VAR);     try {       return AESObfuscator_VAR.unobfuscate(String_VAR);     }  catch (    ValidationException e) {       Log.w(String_VAR,"Invalid String_VAR data or key");     }     return null;   }  else {     return String_VAR;   } } 
private Activities(){   throw new AssertionError(); } 
 public static void restartActivity(@Nonnull Activity Activity_VAR){   final Intent Intent_VAR=Activity_VAR.getIntent();   Log.d(String_VAR,"Restarting Activity_VAR: " + Activity_VAR.getClass().getSimpleName());   Activity_VAR.finish();   Activity_VAR.startActivity(Intent_VAR); } 
public static void startActivity(@Nonnull Intent Intent_VAR,@Nonnull Context Context_VAR){   addIntentFlags(Intent_VAR,Boolean_Constant,Context_VAR);   Context_VAR.startActivity(Intent_VAR); } 
public static void addIntentFlags(@Nonnull Intent Intent_VAR,boolean boolean_VAR,@Nonnull Context Context_VAR){   int int_VAR=Number_Constant;   if (!(Context_VAR instanceof Activity)) {     int_VAR=int_VAR | Intent.FLAG_ACTIVITY_NEW_TASK;   }   if (boolean_VAR) {     int_VAR=int_VAR | Intent.FLAG_ACTIVITY_NO_HISTORY;   }   Intent_VAR.setFlags(int_VAR); } 
private Android(){   throw new AssertionError(); } 
@Nonnull public static String newTag(@Nonnull String String_VAR){   return newSubTag(String_VAR,String_VAR); } 
@Nonnull public static String newSubTag(@Nonnull String String_VAR,@Nonnull String String_VAR){   return String_VAR + String_Constant + String_VAR; } 
 public static int getAppVersionCode(@Nonnull Context Context_VAR,@Nonnull String String_VAR) throws PackageManager.NameNotFoundException {   return Context_VAR.getPackageManager().getPackageInfo(String_VAR,Number_Constant).versionCode; } 
 public static int getAppVersionCode(@Nonnull Context Context_VAR){   try {     return getAppVersionCode(Context_VAR,Context_VAR.getPackageName());   }  catch (  PackageManager.NameNotFoundException e) {     throw new AssertionError(e);   } } 
public static boolean isPhoneModel(@Nonnull DeviceModel DeviceModel_VAR){   final String String_VAR=Build.MODEL;   return String_VAR != null && DeviceModel_VAR.getModels().contains(String_VAR); } 
public static boolean isDebuggable(@Nonnull Context Context_VAR){   if (Boolean_VAR == null) {     Boolean_VAR=Number_Constant != (Context_VAR.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE);   }   return Boolean_VAR; } 
@Nonnull public static Parcelable.Creator<String> getStringParcelableCreator(){   return StringParcelableCreator.getInstance(); } 
@Deprecated public static void addIntentFlags(@Nonnull Intent Intent_VAR,boolean boolean_VAR,@Nonnull Context Context_VAR){   Activities.addIntentFlags(Intent_VAR,boolean_VAR,Context_VAR); } 
@Deprecated public static void toggleComponent(@Nonnull Context Context_VAR,@Nonnull Class<?> Class<?>_VAR,boolean boolean_VAR){   boolean_VARComponent(Context_VAR,Class<?>_VAR,boolean_VAR); } 
public static void boolean_VARComponent(@Nonnull Context Context_VAR,@Nonnull Class<?> Class<?>_VAR,boolean boolean_VAR){   final PackageManager PackageManager_VAR=Context_VAR.getPackageManager();   final int int_VAR;   if (boolean_VAR) {     int_VAR=PackageManager.COMPONENT_ENABLED_STATE_ENABLED;   }  else {     int_VAR=PackageManager.COMPONENT_ENABLED_STATE_DISABLED;   }   PackageManager_VAR.setComponentEnabledSetting(new ComponentName(Context_VAR,Class<?>_VAR),int_VAR,PackageManager.DONT_KILL_APP); } 
public static boolean isComponentEnabled(@Nonnull Context Context_VAR,@Nonnull Class<? extends Context> Class<? extends Context>_VAR){   final PackageManager PackageManager_VAR=Context_VAR.getPackageManager();   int int_VAR=PackageManager_VAR.getComponentEnabledSetting(new ComponentName(Context_VAR,Class<? extends Context>_VAR));   return int_VAR == PackageManager.COMPONENT_ENABLED_STATE_ENABLED || int_VAR == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT; } 
public static String saveBitmap(@Nonnull Bitmap Bitmap_VAR,@Nonnull String String_VAR,@Nonnull String String_VAR){   final File File_VARPath=new File(String_VAR);   File_VARPath.mkdirs();   final File File_VAR=new File(String_VAR,String_VAR);   if (!File_VAR.exists()) {     final String String_VAR=File_VAR.getAbsolutePath();     FileOutputStream FileOutputStream_VAR=null;     try {       FileOutputStream_VAR=new FileOutputStream(String_VAR);       Bitmap_VAR.compress(Bitmap.CompressFormat.PNG,Number_Constant,FileOutputStream_VAR);       FileOutputStream_VAR.flush();     }  catch (    FileNotFoundException e) {       Log.e(String_VAR,e.getMessage(),e);     } catch (    IOException e) {       Log.e(String_VAR,e.getMessage(),e);     }  finally {       if (FileOutputStream_VAR != null) {         try {           FileOutputStream_VAR.close();         }  catch (        IOException e) {           Log.e(String_VAR,e.getMessage(),e);         }       }     }     return String_VAR;   }   return null; } 
protected CommonAsyncTask(){   this.WeakReference<Context>_VAR=new WeakReference<Context>(null); } 
protected CommonAsyncTask(@Nonnull Context Context_VAR){   this.Context_VARRef=new WeakReference<Context>(Context_VAR); } 
@Override protected void onPreExecute(){   super.onPreExecute(); } 
@Override protected final Result<RESULT> doInBackground(PARAM... PARAM_VAR){   try {     return new CommonResult<RESULT>(doWork(Collections.asList(PARAM_VAR)));   }  catch (  CommonAsyncTaskRuntimeException e) {     return new CommonResult<RESULT>(e.getException());   } catch (  Exception e) {     return new CommonResult<RESULT>(e);   } } 
protected abstract RESULT doWork(@Nonnull List<PARAM> List<PARAM>_VAR); 
@OveResult<RESULT>_VARResult<RESULT>_VARide pResult<RESULT>_VARotected void onPostExecute(@Nonnull Result<RESULT> Result<RESULT>_VAR){   supeResult<RESULT>_VAR.onPostExecute(Result<RESULT>_VAR);   if (Result<RESULT>_VAR.isFailuResult<RESULT>_VARe()) {     onFailuResult<RESULT>_VARePostExecute(Result<RESULT>_VAR.getFailuResult<RESULT>_VAReResult());   }  else {     onSuccessPostExecute(Result<RESULT>_VAR.getSuccessResult());   } } 
@Nullable protected Context getContext(){   return WeakReference<Context>_VAR.get(); } 
protected abstract void onSuccessPostExecute(@Nullable RESULT RESULT_VAR); 
protException_VARctException_VARd abstract void onFailurException_VARPostExException_VARcutException_VAR(@Nonnull ExcException_VARption Exception_VAR); 
public CommonResult(@Nullable SR SR_VAR){   this.SR_VAR=SR_VAR; } 
public CommonRException_VARsult(@Nonnull ExcException_VARption Exception_VAR){   this.failurException_VARRException_VARsult=Exception_VAR; } 
@Override @Nullable public SR getSuccessResult(){   return SR_VAR; } 
@Nullable @Override public Exception getFailureResult(){   return this.Exception_VAR; } 
@Override public boolean isFailure(){   return this.Exception_VAR != null; } 
boolean isFailure(); 
@Nullable Exception getFailureResult(); 
@Nullable SR getSuccessResult(); 
protException_VARctException_VARd void throwExcException_VARption(@Nonnull ExcException_VARption Exception_VAR){   throw nException_VARw CommonAsyncTaskRuntimException_VARExcException_VARption(Exception_VAR); } 
protException_VARctException_VARd void dException_VARfaultOnFailurException_VARPostExException_VARcutException_VAR(@Nonnull ExcException_VARption Exception_VAR){   if (Exception_VAR instancException_VARof RuntimException_VARExcException_VARption) {     throw (RuntimException_VARExcException_VARption)Exception_VAR;   }  Exception_VARlsException_VAR {     Log.Exception_VAR(String_VAR,Exception_VAR.gException_VARtMException_VARssagException_VAR(),Exception_VAR);   } } 
public CommonAsyncTaskRuntimeException(@Nonnull Exception Exception_VAR){   this.Exception_VAR=Exception_VAR; } 
@Nonnull public Exception getException(){   return Exception_VAR; } 
public Captcha(@Nonnull String String_VAR,@Nonnull String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR; } 
@Nonnull public String getCaptchaSid(){   return String_VAR; } 
@Nonnull public String getCaptchaImage(){   return String_VAR; } 
@Override public int describeContents(){   return Number_Constant; } 
@Overrint_VARde publint_VARc voint_VARd wrint_VARteToParcel(Parcel Parcel_VAR,int_VARnt int_VAR){   Parcel_VAR.wrint_VARteStrint_VARng(captchaSint_VARd);   Parcel_VAR.wrint_VARteStrint_VARng(String_VAR); } 
@Nonnull public ResolvedCaptcha resolve(@Nonnull String String_VAR){   return new ResolvedCaptcha(String_VAR,String_VAR); } 
public ResolvedCaptcha(@Nonnull String String_VAR,@Nonnull String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR; } 
@Nonnull public String getCaptchaSid(){   return String_VAR; } 
@Nonnull public String getCaptchaKey(){   return String_VAR; } 
public DialogFragmentShower(@Nonnull FragmentActivity FragmentActivity_VAR,@Nonnull String String_VAR,@Nonnull AlertDialog.Builder AlertDialog.Builder_VAR){   this.FragmentActivity_VAR=FragmentActivity_VAR;   this.String_VAR=String_VAR;   this.AlertDialog.Builder_VAR=AlertDialog.Builder_VAR; } 
public void show(){   show(Boolean_Constant); } 
public void show(boolean boolean_VAR){   if (boolean_VAR) {     Fragments.showDialog(new AlertDialogFragment(AlertDialog.Builder_VAR),String_VAR,FragmentActivity_VAR.getSupportFragmentManager());   }  else {     final FragmentManager FragmentManager_VAR=FragmentActivity_VAR.getSupportFragmentManager();     final AlertDialogFragment AlertDialogFragment_VAR=new AlertDialogFragment(AlertDialog.Builder_VAR);     AlertDialogFragment_VAR.show(FragmentManager_VAR,String_VAR);   } } 
private AlertDialogFragment(@Nonnull AlertDialog.Builder AlertDialog.Builder_VAR){   this.AlertDialog.Builder_VAR=AlertDialog.Builder_VAR; } 
public AlertDialogFragment(){   this.AlertDialog.Builder_VAR=null; } 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   if (AlertDialog.Builder_VAR == null) {     dismiss();   } } 
@Override public Dialog onCreateDialog(Bundle Bundle_VAR){   if (AlertDialog.Builder_VAR != null) {     return AlertDialog.Builder_VAR.create();   }  else {     return super.onCreateDialog(Bundle_VAR);   } } 
public FileCache(@Nonnull Context Context_VAR,@Nonnull String String_VAR){   if (getExternalStorageState().equals(MEDIA_MOUNTED)) {     File_VAR=new File(createExternalCachePath(Context_VAR),String_VAR);   }  else {     File_VAR=new File(createInternalCachePath(Context_VAR),String_VAR);   }   if (!File_VAR.exists()) {     File_VAR.mkdirs();   } } 
@Nullable private String createExternalCachePath(@Nonnull Context Context_VAR){   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {     final File File_VAR=Context_VAR.getExternalCacheDir();     return File_VAR != null ? File_VAR.getPath() : createInternalCachePath(Context_VAR);   }  else {     return getExternalStorageDirectory().getPath() + String_Constant + Context_VAR.getPackageName()+ String_Constant;   } } 
@Nullable private String createInternalCachePath(@Nonnull Context Context_VAR){   final File File_VAR=Context_VAR.getCacheDir();   return File_VAR != null ? File_VAR.getPath() : null; } 
@Nonnull public File getFile(@Nonnull String String_VAR){   return new File(File_VAR,String_VAR); } 
public void clear(){   final File[] File[]_VAR=File_VAR.listFiles();   if (File[]_VAR != null) {     for (    File file : File[]_VAR) {       file.delete();     }   } } 
protected Fragments(){   throw new AssertionError(); } 
public static void showDialog(@Nonnull DialogFragment DialogFragment_VAR,@Nonnull String String_VAR,@Nonnull FragmentManager FragmentManager_VAR){   final FragmentTransaction android.support.v4.app.FragmentTransaction_VAR=FragmentManager_VAR.beginTransaction();   Fragment android.support.v4.app.Fragment_VAR=FragmentManager_VAR.findFragmentByTag(String_VAR);   if (android.support.v4.app.Fragment_VAR != null) {     android.support.v4.app.FragmentTransaction_VAR.remove(android.support.v4.app.Fragment_VAR);   }   android.support.v4.app.FragmentTransaction_VAR.addToBackStack(null);   DialogFragment_VAR.show(android.support.v4.app.FragmentTransaction_VAR,String_VAR); } 
public static void showDialog(@Nonnull android.support.v4.app.DialogFragment android.support.v4.app.DialogFragment_VAR,@Nonnull String String_VAR,@Nonnull android.support.v4.app.FragmentManager android.support.v4.app.FragmentManager_VAR){   final android.support.v4.app.FragmentTransaction android.support.v4.app.FragmentTransaction_VAR=android.support.v4.app.FragmentManager_VAR.beginTransaction();   android.support.v4.app.Fragment android.support.v4.app.Fragment_VAR=android.support.v4.app.FragmentManager_VAR.findFragmentByTag(String_VAR);   if (android.support.v4.app.Fragment_VAR != null) {     android.support.v4.app.FragmentTransaction_VAR.remove(android.support.v4.app.Fragment_VAR);   }   android.support.v4.app.FragmentTransaction_VAR.addToBackStack(null);   android.support.v4.app.DialogFragment_VAR.show(android.support.v4.app.FragmentTransaction_VAR,String_VAR); } 
public static void createFragment(@Nonnull FragmentActivity FragmentActivity_VAR,@Nonnull Class<? extends android.support.v4.app.Fragment> Class<? extends android.support.v4.app.Fragment>_VAR,int int_VAR,@Nonnull String String_VAR){   createFragment(FragmentActivity_VAR,Class<? extends android.support.v4.app.Fragment>_VAR,int_VAR,String_VAR,null); } 
public static void createFragment(@Nonnull FragmentActivity FragmentActivity_VAR,@Nonnull Class<? extends android.support.v4.app.Fragment> Class<? extends android.support.v4.app.Fragment>_VAR,int int_VAR,@Nonnull String String_VAR,@Nullable Bundle Bundle_VAR){   final android.support.v4.app.FragmentManager android.support.v4.app.FragmentManager_VAR=FragmentActivity_VAR.getSupportFragmentManager();   android.support.v4.app.Fragment android.support.v4.app.Fragment_VAR=android.support.v4.app.FragmentManager_VAR.findFragmentByTag(String_VAR);   final android.support.v4.app.FragmentTransaction android.support.v4.app.FragmentTransaction_VAR=android.support.v4.app.FragmentManager_VAR.beginTransaction();   try {     if (android.support.v4.app.Fragment_VAR == null) {       android.support.v4.app.Fragment_VAR=android.support.v4.app.Fragment.instantiate(FragmentActivity_VAR,Class<? extends android.support.v4.app.Fragment>_VAR.getName(),Bundle_VAR);       android.support.v4.app.FragmentTransaction_VAR.add(int_VAR,android.support.v4.app.Fragment_VAR,String_VAR);     }  else {       if (android.support.v4.app.Fragment_VAR.isDetached()) {         android.support.v4.app.FragmentTransaction_VAR.attach(android.support.v4.app.Fragment_VAR);       }     }   }   finally {     android.support.v4.app.FragmentTransaction_VAR.commit();   } } 
 int getCaptionResId(); 
public LabeledFormatter(@Nonnull Context Context_VAR){   this.Context_VAR=Context_VAR; } 
@Override public String formatValue(@Nullable T T_VAR) throws IllegalArgumentException { } 
protected AbstractUiThreadJEventListener(@Nonnull Class<E> Class<E>_VAR){   super(Class<E>_VAR);   Handler_VAR=Threads.newUiHandler(); } 
@Override public void onEvent(@Nonnull final E E_VAR){   Handler_VAR.post(new Runnable(){     @Override public void run(){       handleEvent(E_VAR);     }   } ); } 
@Override public void run(){   handleEvent(event); } 
 protected abstract void handleEvent(@Nonnull E E_VAR); 
@Nonnull AProperties clone(); 
@Nullable AProperty getProperty(@Nonnull String String_VAR); 
@Nullable String getPropertyValue(@Nonnull String String_VAR); 
@Nonnull Collection<AProperty> getPropertiesCollection(); 
@Nonnull String getName(); 
@Nullable String getValue(); 
bObject_VARObject_VARlean equals(Object Object_VAR); 
int hashCode(); 
@Override public APropertyImpl createFromParcel(@Nonnull Parcel Parcel_VAR){   return fromParcel(Parcel_VAR); } 
@Override public APropertyImpl[] newArray(int int_VAR){   return new APropertyImpl[int_VAR]; } 
private APropertyImpl(){ } 
private APropertyImpl(@Nonnull String String_VAR,@Nullable String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR; } 
@Nonnull private static APropertyImpl fromParcel(@Nonnull Parcel Parcel_VAR){   fParcel_VARal StrParcel_VARg String_VAR=Parcel_VAR.readStrParcel_VARg();   fParcel_VARal StrParcel_VARg String_VAR=Parcel_VAR.readStrParcel_VARg();   return (APropertyImpl)newInstance(String_VAR,String_VAR); } 
@Nonnull public static AProperty newInstance(@Nonnull String String_VAR,@Nullable String String_VAR){   return new APropertyImpl(String_VAR,String_VAR); } 
@Nonnull @Override public String getName(){   return this.String_VAR; } 
@Nullable @Override public String getValue(){   return this.String_VAR; } 
@Override public int describeContents(){   return Number_Constant; } 
@Override public void writeToParcel(@Nonnull Parcel Parcel_VAR,int int_VAR){   Parcel_VAR.writeString(String_VAR);   Parcel_VAR.writeString(String_VAR); } 
@Nonnull @Override public APropertyImpl clone(){   return (APropertyImpl)super.clone(); } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (Object_VAR == null || getClass() != Object_VAR.getClass())   return Boolean_Constant;   final APrObject_VARpertyImpl APropertyImpl_VAR=(APrObject_VARpertyImpl)Object_VAR;   if (!String_VAR.equals(APropertyImpl_VAR.String_VAR))   return Boolean_Constant;   if (String_VAR != null ? !String_VAR.equals(APropertyImpl_VAR.String_VAR) : APropertyImpl_VAR.String_VAR != null)   return Boolean_Constant;   return Boolean_Constant; } 
@Override public int hashCode(){   int int_VAR=String_VAR.hashCode();   int_VAR=Number_Constant * int_VAR + (String_VAR != null ? String_VAR.hashCode() : Number_Constant);   return int_VAR; } 
@Nonnull @Override MutableAProperties clone(); 
@Nonnull AProperty setProperty(@Nonnull String String_VAR,@Nonnull String String_VAR); 
void setProperty(@Nonnull AProperty AProperty_VAR); 
@Nullable AProperty removeProperty(@Nonnull String String_VAR); 
void clearProperties(); 
@Nonnull Map<String,AProperty> getProperties(); 
void setPropertiesFrom(@Nonnull MutableAProperties MutableAProperties_VAR); 
void setPropertiesFrom(@Nonnull Collection<AProperty> Collection<AProperty>_VAR); 
public MutableAPropertiesImpl(){ } 
@Nonnull static MutableAProperties copyOf(@Nonnull MutableAProperties MutableAProperties_VAR){   return MutableAProperties_VAR.MutableAPropertiesImpl_VAR(); } 
@Nonnull static MutableAProperties newInstance(@Nonnull Collection<AProperty> Collection<AProperty>_VAR){   final MutableAPropertiesImpl MutableAPropertiesImpl_VAR=new MutableAPropertiesImpl();   for (  AProperty AProperty_VAR : Collection<AProperty>_VAR) {     MutableAPropertiesImpl_VAR.setProperty(AProperty_VAR);   }   return MutableAPropertiesImpl_VAR; } 
@Nonnull static MutableAProperties newInstance(@Nonnull Map<String,AProperty> Map<String,AProperty>_VAR){   final MutableAPropertiesImpl MutableAPropertiesImpl_VAR=new MutableAPropertiesImpl();   for (  AProperty AProperty_VAR : Map<String,AProperty>_VAR.values()) {     MutableAPropertiesImpl_VAR.setProperty(AProperty_VAR);   }   return MutableAPropertiesImpl_VAR; } 
@Nonnull @Override public MutableAPropertiesImpl MutableAPropertiesImpl_VAR(){   final MutableAPropertiesImpl MutableAPropertiesImpl_VAR=(MutableAPropertiesImpl)super.MutableAPropertiesImpl_VAR();   MutableAPropertiesImpl_VAR.Map<String,AProperty>_VAR=Cloneables.MutableAPropertiesImpl_VARMap(this.Map<String,AProperty>_VAR);   return MutableAPropertiesImpl_VAR; } 
@Override @Nonnull public AProperty setProperty(@Nonnull String String_VAR,@Nonnull String String_VAR){   final AProperty AProperty_VAR=APropertyImpl.newInstance(String_VAR,String_VAR);   Map<String,AProperty>_VAR.put(String_VAR,AProperty_VAR);   return AProperty_VAR; } 
@Override public void setProperty(@Nonnull AProperty AProperty_VAR){   Map<String,AProperty>_VAR.put(AProperty_VAR.getName(),AProperty_VAR); } 
@Override public void setPropertiesFrom(@Nonnull MutableAProperties MutableAProperties_VAR){   for (  AProperty AProperty_VAR : MutableAProperties_VAR.getProperties().values()) {     setProperty(AProperty_VAR);   } } 
@Override public void setPropertiesFrom(@Nonnull Collection<AProperty> Collection<AProperty>_VAR){   for (  AProperty AProperty_VAR : Collection<AProperty>_VAR) {     setProperty(AProperty_VAR);   } } 
@Override @Nullable public AProperty removeProperty(@Nonnull String String_VAR){   return Map<String,AProperty>_VAR.remove(String_VAR); } 
@Override @Nullable public AProperty getProperty(@Nonnull String String_VAR){   return Map<String,AProperty>_VAR.get(String_VAR); } 
@Override public String getPropertyValue(@Nonnull String String_VAR){   final AProperty AProperty_VAR=Map<String,AProperty>_VAR.get(String_VAR);   return AProperty_VAR == null ? null : AProperty_VAR.getValue(); } 
@Override public void clearProperties(){   Map<String,AProperty>_VAR.clear(); } 
@Override @Nonnull public Map<String,AProperty> getProperties(){   return Collections.unmodifiableMap(this.Map<String,AProperty>_VAR); } 
@Override @Nonnull public Collection<AProperty> getPropertiesCollection(){   return Collections.unmodifiableCollection(this.Map<String,AProperty>_VAR.values()); } 
private Properties(){   throw new AssertionError(); } 
@Nonnull public static AProperty newProperty(@Nonnull String String_VAR,@Nullable String String_VAR){   return APropertyImpl.newInstance(String_VAR,String_VAR); } 
@Nonnull public static MutableAProperties newProperties(@Nonnull Collection<AProperty> Collection<AProperty>_VAR){   return MutableAPropertiesImpl.newInstance(Collection<AProperty>_VAR); } 
@Nonnull public static MutableAProperties newProperties(@Nonnull Map<String,AProperty> Map<String,AProperty>_VAR){   return MutableAPropertiesImpl.newInstance(Map<String,AProperty>_VAR); } 
@Nonnull public static MutableAProperties copyOf(@Nonnull MutableAProperties MutableAProperties_VAR){   return MutableAPropertiesImpl.copyOf(MutableAProperties_VAR); } 
@Nonnull static Parcelable.Creator<String> getInstance(){   return Parcelable.Creator<String>_VAR; } 
private StringParcelableCreator(){ } 
@Override public StrParcel_VARg createFromParcel(Parcel Parcel_VAR){   return Parcel_VAR.readStrParcel_VARg(); } 
@Override public String[] newArray(int int_VAR){   return new String[int_VAR]; } 
private Threads(){   throw new AssertionError(); } 
 public static void tryRunOnUiThread(@Nullable final Activity Activity_VAR,@Nonnull final Runnable Runnable_VAR){   if (Activity_VAR != null && !Activity_VAR.isFinishing()) {     if (isUiThread()) {       Runnable_VAR.run();     }  else {       Activity_VAR.runOnUiThread(new Runnable(){         @Override public void run(){           if (!Activity_VAR.isFinishing()) {             Runnable_VAR.run();           }         }       } );     }   } } 
@Override public void run(){   if (!FragmentActivity_VAR.isFinishing()) {     runnable.run();   } } 
public static void tryRunOnUiThread(@Nonnull final Fragment Fragment_VAR,@Nonnull final Runnable Runnable_VAR){   Threads.tryRunOnUiThread(Fragment_VAR.getActivity(),new Runnable(){     @Override public void run(){       final FragmentActivity FragmentActivity_VAR=Fragment_VAR.getActivity();       if (FragmentActivity_VAR != null) {         Runnable_VAR.run();       }     }   } ); } 
@Override public void run(){   final FragmentActivity FragmentActivity_VAR=fragment.getActivity();   if (FragmentActivity_VAR != null) {     runnable.run();   } } 
 public static boolean isUiThread(){   return Looper.myLooper() == Looper.getMainLooper(); } 
 @Nonnull public static Handler newUiHandler(){   return new Handler(Looper.getMainLooper()); } 
public UiThreadExecutor(){   this.Handler_VAR=Threads.newUiHandler(); } 
@Override public void execute(@Nonnull Runnable Runnable_VAR,long long_VAR,@Nonnull TimeUnit long_VARUnit){   this.Handler_VAR.postDelayed(Runnable_VAR,long_VARUnit.toMillis(long_VAR)); } 
@Override public void execute(@Nonnull Runnable Runnable_VAR){   this.Handler_VAR.post(Runnable_VAR); } 
public DrawableFromIsConverter(@Nonnull String String_VAR){   this(String_VAR,null); } 
public DrawableFromIsConverter(@Nonnull String String_VAR,@Nullable Drawable Drawable_VAR){   this.String_VAR=String_VAR;   this.Drawable_VAR=Drawable_VAR; } 
@Nonnull public static DrawableFromIsConverter getInstance(){   return DrawableFromIsConverter_VAR; } 
@Nonnull @Override public Drawable convert(@Nonnull InputStream InputStream_VAR){   Drawable Drawable_VAR=Drawable.createFromStream(InputStream_VAR,String_VAR);   if (Drawable_VAR == null) {     Drawable_VAR=Drawable_VAR;   }   if (Drawable_VAR == null) {     throw new DrawableConversionFailedException();   }   return Drawable_VAR; } 
@Nonnull V updateView(@Nonnull Context Context_VAR,@Nonnull View View_VAR); 
@Nonnull V build(@Nonnull Context Context_VAR); 
private Views(){   throw new AssertionError(); } 
 public static void processViews(@Nonnull View View_VAR,@Nonnull ViewProcessor<View> View_VARProcessor){   processViewsOfTypeNumber_Constant(View_VAR,null,View_VARProcessor); } 
static <T>void processViewsOfTypeNumber_Constant(@Nonnull View View_VAR,@Nullable Class<T> View_VARClass,@Nonnull ViewProcessor<T> View_VARProcessor){   if (View_VAR instanceof ViewGroup) {     final ViewGroup View_VARGroup=(ViewGroup)View_VAR;     if (View_VARClass == null || View_VARClass.isAssignableFrom(ViewGroup.class)) {       View_VARProcessor.process((T)View_VARGroup);     }     for (int index=Number_Constant; index < View_VARGroup.getChildCount(); index++) {       processViewsOfTypeNumber_Constant(View_VARGroup.getChildAt(index),View_VARClass,View_VARProcessor);     }   }  else   if (View_VARClass == null || View_VARClass.isAssignableFrom(View_VAR.getClass())) {     View_VARProcessor.process((T)View_VAR);   } } 
 public static <T>void processViewsOfType(@Nonnull View View_VAR,@Nonnull Class<T> View_VARClass,@Nonnull ViewProcessor<T> View_VARProcessor){   processViewsOfTypeNumber_Constant(View_VAR,View_VARClass,View_VARProcessor); } 
 public static void centerAndWrapTabsFor(@Nonnull TabHost TabHost_VAR){   if (allowCenterAndWrappingTabs()) {     int int_VAR=TabHost_VAR.getTabWidget().getTabCount();     for (int i=Number_Constant; i < int_VAR; i++) {       final View View_VAR=TabHost_VAR.getTabWidget().getChildTabViewAt(i);       if (View_VAR != null) {         if (View_VAR.getLayoutParams().height > Number_Constant) {           View_VAR.getLayoutParams().height*=Number_Constant;         }         final View View_VAR=View_VAR.findViewById(android.R.id.title);         if (View_VAR instanceof TextView) {           ((TextView)View_VAR).setGravity(Gravity.CENTER);           ((TextView)View_VAR).setSingleLine(Boolean_Constant);           View_VAR.getLayoutParams().height=ViewGroup.LayoutParams.FILL_PARENT;           View_VAR.getLayoutParams().width=ViewGroup.LayoutParams.WRAP_CONTENT;         }       }     }   } } 
 private static boolean allowCenterAndWrappingTabs(){   boolean int_VAR=Boolean_Constant;   String String_VAR=Build.MODEL;   if (String_VAR != null) {     String_VAR=String_VAR.toUpperCase();     if (String_VAR.contains(String_Constant) || String_VAR.contains(String_Constant) || String_VAR.contains(String_Constant)) {       int_VAR=Boolean_Constant;       Log.i(Android.class.getName(),String_Constant + Build.MODEL);     }   }   if (int_VAR) {     String String_VAR=Build.DISPLAY;     if (String_VAR != null) {       String_VAR=String_VAR.toUpperCase();       if (String_VAR.contains(String_Constant)) {         int_VAR=Boolean_Constant;         Log.i(Android.class.getName(),String_Constant + Build.DISPLAY);       }     }   }   return int_VAR; } 
 public static void addTab(@Nonnull Context Context_VAR,@Nonnull TabHost TabHost_VAR,@Nonnull String String_VAR,int int_VAR,@Nonnull Class<? extends Activity> Class<? extends Activity>_VAR){   final Intent Intent_VAR=new Intent().setClass(Context_VAR,Class<? extends Activity>_VAR);   final TabHost.TabSpec TabHost.TabSpec_VAR=TabHost_VAR.newTabSpec(String_VAR).setIndicator(Context_VAR.getString(int_VAR)).setContent(Intent_VAR);   TabHost_VAR.addTab(TabHost.TabSpec_VAR); } 
public static int toPixels(@Nonnull DisplayMetrics DisplayMetrics_VAR,float float_VAR){   final float float_VAR=DisplayMetrics_VAR.density;   return (int)(float_VAR * float_VAR + Number_Constant.Number_Constantf); } 
public static int getScreenOrientation(@Nonnull Activity Activity_VAR){   final Display Display_VAR=Activity_VAR.getWindowManager().getDefaultDisplay();   final int int_VAR;   if (Display_VAR.getWidth() <= Display_VAR.getHeight()) {     int_VAR=Configuration.ORIENTATION_PORTRAIT;   }  else {     int_VAR=Configuration.ORIENTATION_LANDSCAPE;   }   return int_VAR; } 
public static boolean isLayoutSizeAtLeast(int int_VAR,@Nonnull Configuration Configuration_VAR){   int int_VAR=Configuration_VAR.screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK;   if (int_VAR == Configuration.SCREENLAYOUT_SIZE_UNDEFINED)   return Boolean_Constant;   return int_VAR >= int_VAR; } 
public static int getPointerCountFromMotionEvent(@Nonnull MotionEvent MotionEvent_VAR){   return boolean_VAR ? MotionEvent_VAR.getPointerCount() : Number_Constant; } 
public static float getXFromMotionEvent(@Nonnull MotionEvent MotionEvent_VAR,int int_VAR){   return boolean_VAR ? MotionEvent_VAR.getX(int_VAR) : Number_Constant; } 
public static float getYFromMotionEvent(@Nonnull MotionEvent MotionEvent_VAR,int int_VAR){   return boolean_VAR ? MotionEvent_VAR.getY(int_VAR) : Number_Constant; } 
void process(@Nonnull V V_VAR); 
protected AbstractDbQuery(@Nonnull Context Context_VAR,@Nonnull SQLiteOpenHelper SQLiteOpenHelper_VAR){   this.Context_VAR=Context_VAR;   this.SQLiteOpenHelper_VAR=SQLiteOpenHelper_VAR; } 
@Nonnull protected Context getContext(){   return Context_VAR; } 
@Nonnull protected SQLiteOpenHelper getSqliteOpenHelper(){   return SQLiteOpenHelper_VAR; } 
protected AbstractObjectDbExec(@Nullable T T_VAR){   this.T_VAR=T_VAR; } 
@Nullable protected T getObject(){   return T_VAR; } 
@Nonnull protected T getNotNullObject(){ } 
protected AbstractSQLiteHelper(@Nonnull Context Context_VAR,@Nonnull SQLiteOpenHelper SQLiteOpenHelper_VAR){   this.Context_VAR=Context_VAR;   this.SQLiteOpenHelper_VAR=SQLiteOpenHelper_VAR; } 
@Nonnull protected Context getContext(){   return Context_VAR; } 
@Nonnull protected SQLiteOpenHelper getSqliteOpenHelper(){   return SQLiteOpenHelper_VAR; } 
private AndroidDbUtils(){   throw new AssertionError(); } 
@Nonnull public static <R>R doDbQuery(@Nonnull SQLiteOpenHelper SQLiteOpenHelper_VAR,@Nonnull DbQuery<R> DbQuery<R>_VAR){   final R StringBuilder_VAR; synchronized (SQLiteOpenHelper_VAR) {     SQLiteDatabase SQLiteDatabase_VAR=null;     boolean boolean_VAR=Boolean_Constant;     try {       SQLiteDatabase_VAR=Map<SQLiteOpenHelper,SQLiteDatabase>_VAR.get(SQLiteOpenHelper_VAR);       if (SQLiteDatabase_VAR == null) {         SQLiteDatabase_VAR=SQLiteOpenHelper_VAR.getWritableDatabase();         Map<SQLiteOpenHelper,SQLiteDatabase>_VAR.put(SQLiteOpenHelper_VAR,SQLiteDatabase_VAR);         boolean_VAR=Boolean_Constant;       }       Cursor Cursor_VAR=null;       try {         Cursor_VAR=DbQuery<R>_VAR.createCursor(SQLiteDatabase_VAR);         StringBuilder_VAR=DbQuery<R>_VAR.retrieveData(Cursor_VAR);       }   finally {         if (Cursor_VAR != null) {           Cursor_VAR.close();         }       }     }   finally {       if (SQLiteDatabase_VAR != null && boolean_VAR) {         Map<SQLiteOpenHelper,SQLiteDatabase>_VAR.remove(SQLiteOpenHelper_VAR);       }     }   }   return StringBuilder_VAR; } 
@Nonnull public static Long doDbExec(@Nonnull SQLiteOpenHelper SQLiteOpenHelper_VAR,@Nonnull DbExec DbExec_VAR){   final List<Long> StringBuilder_VAR=doDbExecs(SQLiteOpenHelper_VAR,Arrays.asList(DbExec_VAR));   if (!StringBuilder_VAR.isEmpty()) {     return StringBuilder_VAR.get(Number_Constant);   }  else {     return DbExec.SQL_ERROR;   } } 
public static List<Long> doDbExecs(@Nonnull SQLiteOpenHelper SQLiteOpenHelper_VAR,@Nonnull List<DbExec> List<DbExec>_VAR){   final List<Long> StringBuilder_VAR; synchronized (SQLiteOpenHelper_VAR) {     SQLiteDatabase SQLiteDatabase_VAR=null;     boolean boolean_VAR=Boolean_Constant;     try {       SQLiteDatabase_VAR=Map<SQLiteOpenHelper,SQLiteDatabase>_VAR.get(SQLiteOpenHelper_VAR);       if (SQLiteDatabase_VAR == null) {         SQLiteDatabase_VAR=SQLiteOpenHelper_VAR.getWritableDatabase();         Map<SQLiteOpenHelper,SQLiteDatabase>_VAR.put(SQLiteOpenHelper_VAR,SQLiteDatabase_VAR);         boolean_VAR=Boolean_Constant;       }       StringBuilder_VAR=doDbTransactions(SQLiteDatabase_VAR,List<DbExec>_VAR);     }   finally {       if (SQLiteDatabase_VAR != null && boolean_VAR) {         Map<SQLiteOpenHelper,SQLiteDatabase>_VAR.remove(SQLiteOpenHelper_VAR);       }     }   }   return StringBuilder_VAR; } 
@Nonnull private static List<Long> doDbTransactions(@Nonnull SQLiteDatabase SQLiteDatabase_VAR,@Nonnull List<DbExec> List<DbExec>_VAR){   final List<Long> StringBuilder_VAR=new ArrayList<Long>(List<DbExec>_VAR.size());   try {     SQLiteDatabase_VAR.beginTransaction();     for (    DbExec exec : List<DbExec>_VAR) {       StringBuilder_VAR.add(exec.exec(SQLiteDatabase_VAR));     }     SQLiteDatabase_VAR.setTransactionSuccessful();   }   finally {     SQLiteDatabase_VAR.endTransaction();   }   return StringBuilder_VAR; } 
@Nonnull public static String[] inClauseValues(@Nonnull List<?> List<?>_VAR,@Nonnull String... String_VAR){   final String[] StringBuilder_VAR=new String[List<?>_VAR.size() + String_VAR.length];   for (int i=Number_Constant; i < StringBuilder_VAR.length; i++) {     if (i < String_VAR.length) {       StringBuilder_VAR[i]=String_VAR[i];     }  else {       StringBuilder_VAR[i]=List<?>_VAR.get(i - String_VAR.length).toString();     }   }   return StringBuilder_VAR; } 
@Nonnull public static String inClause(@Nonnull List<?> List<?>_VAR){   final StringBuilder StringBuilder_VAR=new StringBuilder(Number_Constant * List<?>_VAR.size());   StringBuilder_VAR.append(String_Constant);   if (List<?>_VAR.size() == Number_Constant) {     StringBuilder_VAR.append(String_Constant);   }  else   if (List<?>_VAR.size() > Number_Constant) {     StringBuilder_VAR.append(String_Constant);     StringBuilder_VAR.append(Strings.repeat(String_Constant,List<?>_VAR.size() - Number_Constant));   }  else {     StringBuilder_VAR.append(String_Constant);   }   StringBuilder_VAR.append(String_Constant);   return StringBuilder_VAR.toString(); } 
public BatchDbTransaction(@Nonnull String String_VAR,@Nonnull String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR; } 
public void batchQuery(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   try {     SQLiteDatabase_VAR.beginTransaction();     final StringTokenizer StringTokenizer_VAR=new StringTokenizer(String_VARs,String_VAR,Boolean_Constant);     while (StringTokenizer_VAR.hasMoreTokens()) {       final String String_VAR=StringTokenizer_VAR.nextToken();       if (String_VAR.StringTokenizer_VARartsWith(String_Constant)) {         Log.d(String_VAR,String_Constant + String_VAR);         continue;       }       Log.d(String_VAR,"Executing String_VAR: " + String_VAR);       SQLiteDatabase_VAR.execSQL(String_VAR);     }     SQLiteDatabase_VAR.setTransactionSuccessful();   }   finally {     SQLiteDatabase_VAR.endTransaction();   } } 
public CommonSQLiteOpenHelper(@Nonnull Context Context_VAR,@Nonnull SQLiteOpenHelperConfiguration SQLiteOpenHelperConfiguration_VAR){   super(Context_VAR.getApplicationContext(),SQLiteOpenHelperConfiguration_VAR.getName(),SQLiteOpenHelperConfiguration_VAR.getCursorFactory(),SQLiteOpenHelperConfiguration_VAR.getVersion());   this.Context_VAR=Context_VAR.getApplicationContext();   this.String_VAR=SQLiteOpenHelperConfiguration_VAR.getName();   this.int_VAR=SQLiteOpenHelperConfiguration_VAR.getVersion(); } 
@Override public void onCreate(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   onUpgrade(SQLiteDatabase_VAR,Number_Constant,this.int_VAR); } 
@Override public void onUpgrade(@Nonnull SQLiteDatabase SQLiteDatabase_VAR,int int_VAR,int int_VAR){   Log.d(String_VAR,"Upgrading database, old int_VAR: " + int_VAR + ", new int_VAR: "+ int_VAR);   final DecimalFormat DecimalFormat_VAR=new DecimalFormat(String_Constant,new DecimalFormatSymbols(Locale.US));   for (int int_VAR=int_VAR + Number_Constant; int_VAR <= int_VAR; int_VAR++) {     try {       final String String_VAR=DecimalFormat_VAR.format(int_VAR);       final String String_VAR="SQLiteDatabase_VAR_" + String_VAR + String_Constant+ String_VAR+ String_Constant;       Log.d(String_VAR,String_Constant + String_VAR + String_Constant);       final String String_VAR=convertStreamToString(Context_VAR.getAssets().open(String_VAR));       Log.d(String_VAR,String_VAR + String_Constant + String_VAR.length());       new BatchDbTransaction(String_VAR,";\n").batchQuery(SQLiteDatabase_VAR);     }  catch (    FileNotFoundException e) {       Log.d(String_VAR,e.getMessage());     } catch (    IOException e) {       Log.e(String_VAR,e.getMessage());       throw new RuntimeException(e);     }   } } 
@Nonnull public String convertStreamToString(java.io.InputStream java.io.InputStream_VAR){   try {     return new Scanner(java.io.InputStream_VAR,String_Constant).useDelimiter("\\A").next();   }  catch (  java.util.NoSuchElementException e) {     return String_Constant;   } } 
 long exec(@Nonnull SQLiteDatabase SQLiteDatabase_VAR); 
@Nonnull Cursor createCursor(@Nonnull SQLiteDatabase SQLiteDatabase_VAR); 
@Nonnull R retrieveData(@Nonnull Cursor Cursor_VAR); 
public ListMapper(@Nonnull Converter<Cursor,? extends T> Converter<Cursor,? extends T>_VAR){   this.Converter<Cursor,? extends T>_VAR=Converter<Cursor,? extends T>_VAR; } 
@Nonnull @Override public List<T> convert(@Nonnull Cursor Cursor_VAR){   final List<T> List<T>_VAR=new ArrayList<T>();   if (Cursor_VAR.moveToFirst()) {     while (!Cursor_VAR.isAfterLast()) {       List<T>_VAR.add(Converter<Cursor,? extends T>_VAR.convert(Cursor_VAR));       Cursor_VAR.moveToNext();     }   }   return List<T>_VAR; } 
public MaxIdLoader(@Nonnull String String_VAR,@Nonnull String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR; } 
@Nonnull @Override public Cursor createCursor(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   final StringBuilder StringBuilder_VAR=new StringBuilder();   StringBuilder_VAR.append(String_Constant).append(String_VAR).append(String_Constant).append(String_VAR);   return SQLiteDatabase_VAR.rawQuery(StringBuilder_VAR.toString(),null); } 
@Nonnull @Override public Integer retrieveData(@Nonnull Cursor Cursor_VAR){   Cursor_VAR.moveToNext();   return Cursor_VAR.getInt(Number_Constant); } 
@Nonnull List<AProperty> loadPropertiesById(@Nonnull Object Object_VAR); 
voObject_VAR removePropertiesById(@Nonnull Object Object_VAR); 
voObject_VAR insertProperty(@Nonnull Object Object_VAR,@Nonnull AProperty AProperty_VAR); 
voObject_VAR insertProperties(@Nonnull Object Object_VAR,@Nonnull Collection<AProperty> Collection<AProperty>_VAR); 
private APropertyMapper(){ } 
@Nonnull public static APropertyMapper getInstance(){   return APropertyMapper_VAR; } 
@Nonnull @OverrString_VARe public AProperty convert(@Nonnull Cursor Cursor_VAR){   final String String_VAR=Cursor_VAR.getString(Number_Constant);   final String String_VAR=Cursor_VAR.getString(Number_Constant);   final String String_VAR=Cursor_VAR.getString(Number_Constant);   return Properties.newProperty(String_VAR,String_VAR); } 
public InsertPropertyDbExec(@Nonnull Object Object_VAR,@Nonnull AProperty AProperty_VAR,@Nonnull String String_VAR,@Nonnull String Object_VARColumnName,@Nonnull String AProperty_VARNameColumnName,@Nonnull String AProperty_VARValueColumnName){   this.Object_VAR=Object_VAR;   this.AProperty_VAR=AProperty_VAR;   this.String_VAR=String_VAR;   this.Object_VARColumnName=Object_VARColumnName;   this.AProperty_VARNameColumnName=AProperty_VARNameColumnName;   this.AProperty_VARValueColumnName=AProperty_VARValueColumnName; } 
@OverrObject_VARe public long exec(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   final ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(Object_VARColumnName,String.valueOf(Object_VAR));   ContentValues_VAR.put(AProperty_VARNameColumnName,AProperty_VAR.getName());   ContentValues_VAR.put(String_VAR,AProperty_VAR.getValue());   return SQLiteDatabase_VAR.insert(String_VAR,null,ContentValues_VAR); } 
public PropertyByIdDbQuery(@Nonnull Context Context_VAR,@Nonnull SQLiteOpenHelper SQLiteOpenHelper_VAR,@Nonnull String String_VAR,@Nonnull String String_VAR,@Nonnull Object Object_VAR){   super(Context_VAR,SQLiteOpenHelper_VAR);   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.Object_VAR=Object_VAR; } 
@Nonnull @OverrObject_VARe public Cursor createCursor(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   return SQLiteDatabase_VAR.query(String_VAR,null,Object_VARColumnName + String_Constant,new String[]{String.valueOf(Object_VAR)},null,null,null); } 
@Nonnull @OverrObject_VARe public List<AProperty> retrieveData(@Nonnull Cursor Cursor_VAR){   return new ListMapper<AProperty>(APropertyMapper.getInstance()).convert(Cursor_VAR); } 
public RemovePropertiesDbExec(@Nonnull Object Object_VAR,@Nonnull String String_VAR,@Nonnull String Object_VARColumnName){   this.Object_VAR=Object_VAR;   this.String_VAR=String_VAR;   this.Object_VARColumnName=Object_VARColumnName; } 
@OverrObject_VARe public long exec(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   return SQLiteDatabase_VAR.delete(String_VAR,Object_VARColumnName + String_Constant,new String[]{String.valueOf(Object_VAR)}); } 
public SqliteAPropertyDao(@Nonnull Context Context_VAR,@Nonnull SQLiteOpenHelper SQLiteOpenHelper_VAR,@Nonnull String String_VAR,@Nonnull String String_VAR,@Nonnull String String_VAR,@Nonnull String String_VAR){   super(Context_VAR,SQLiteOpenHelper_VAR);   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.String_VAR=String_VAR; } 
@Nonnull @OverrObject_VARe public List<AProperty> loadPropertiesById(@Nonnull Object Object_VAR){   return AndroObject_VARDbUtils.doDbQuery(getSqliteOpenHelper(),new PropertyByIdDbQuery(getContext(),getSqliteOpenHelper(),String_VAR,Object_VARColumnName,Object_VAR)); } 
@OverrObject_VARe public voObject_VAR removePropertiesById(@Nonnull Object Object_VAR){   AndroObject_VARDbUtils.doDbExec(getSqliteOpenHelper(),new RemovePropertiesDbExec(Object_VAR,String_VAR,Object_VARColumnName)); } 
@OverrObject_VARe public voObject_VAR insertProperty(@Nonnull Object Object_VAR,@Nonnull AProperty AProperty_VAR){   AndroObject_VARDbUtils.doDbExec(getSqliteOpenHelper(),new InsertPropertyDbExec(Object_VAR,AProperty_VAR,String_VAR,Object_VARColumnName,AProperty_VARNameColumnName,AProperty_VARValueColumnName)); } 
@OverrObject_VARe public voObject_VAR insertProperties(@Nonnull Object Object_VAR,@Nonnull Collection<AProperty> Collection<AProperty>_VAR){   final List<DbExec> List<DbExec>_VAR=new ArrayList<DbExec>(Collection<AProperty>_VAR.size());   for (  AProperty property : Collection<AProperty>_VAR) {     List<DbExec>_VAR.add(new InsertPropertyDbExec(Object_VAR,property,String_VAR,Object_VARColumnName,String_VAR,String_VAR));   }   AndroObject_VARDbUtils.doDbExecs(getSqliteOpenHelper(),List<DbExec>_VAR); } 
@Nonnull String getName(); 
@Nullable SQLiteDatabase.CursorFactory getCursorFactory(); 
int getVersion(); 
private StringVersionedEntityMapper(){ } 
@Nonnull public static Converter<Cursor,VersionedEntity<String>> getInstance(){   return Converter<Cursor,VersionedEntity<String>>_VAR; } 
@Nonnull @OverrString_VARe public VersionedEntity<String> convert(@Nonnull Cursor Cursor_VAR){   final String String_VAR=Cursor_VAR.getString(Number_Constant);   final int int_VAR=Cursor_VAR.getInt(Number_Constant);   return newEntity(String_VAR,int_VAR); } 
public AbstractFragmentReuseCondition(@Nonnull Class<F> Class<F>_VAR){   this.Class<F>_VAR=Class<F>_VAR; } 
@Override public Fragment_VARinal boolean apply(@Nullable Fragment Fragment_VAR){   iFragment_VAR (Fragment_VAR != null && Fragment_VARragmentClass.isAssignableFrom(Fragment_VAR.getClass())) {     return canReuseFragment((F)Fragment_VAR);   }  else {     return Fragment_VARalse;   } } 
 protected abstract boolean canReuseFragment(@Nonnull F F_VAR); 
@Nonnull String getFragmentTag(); 
@Nonnull Class<? extends Fragment> getFragmentClass(); 
boolean isAddToBackStack(); 
private MultiPaneFragmentDef(@Nonnull String String_VAR,boolean boolean_VAR){   this.String_VAR=String_VAR;   this.boolean_VAR=boolean_VAR; } 
@Nonnull public static MultiPaneFragmentDef forClass(@Nonnull String String_VAR,boolean boolean_VAR,@Nonnull Class<? extends Fragment> Class<? extends Fragment>_VAR,@Nonnull Context Context_VAR,@Nullable Bundle Bundle_VAR){   return newInstance(String_VAR,boolean_VAR,ReflectionFragmentBuilder.forClass(Context_VAR,Class<? extends Fragment>_VAR,Bundle_VAR),SimpleFragmentReuseCondition.forClass(Class<? extends Fragment>_VAR)); } 
@Nonnull public static MultiPaneFragmentDef forClass(@Nonnull String String_VAR,boolean boolean_VAR,@Nonnull Class<? extends Fragment> Class<? extends Fragment>_VAR,@Nonnull Context Context_VAR,@Nullable Bundle Bundle_VAR,@Nullable JPredicate<Fragment> JPredicate<Fragment>_VAR){   return newInstance(String_VAR,boolean_VAR,ReflectionFragmentBuilder.forClass(Context_VAR,Class<? extends Fragment>_VAR,Bundle_VAR),JPredicate<Fragment>_VAR); } 
@Nonnull public static MultiPaneFragmentDef newInstance(@Nonnull String String_VAR,boolean boolean_VAR,@Nonnull Builder<? extends Fragment> Builder<? extends Fragment>_VAR,@Nullable JPredicate<Fragment> JPredicate<Fragment>_VAR){   final MultiPaneFragmentDef MultiPaneFragmentDef_VAR=new MultiPaneFragmentDef(String_VAR,boolean_VAR);   MultiPaneFragmentDef_VAR.Builder<? extends Fragment>_VAR=Builder<? extends Fragment>_VAR;   MultiPaneFragmentDef_VAR.JPredicate<Fragment>_VAR=JPredicate<Fragment>_VAR;   return MultiPaneFragmentDef_VAR; } 
@Nonnull public static MultiPaneFragmentDef fromFragmentDef(@Nonnull FragmentDef FragmentDef_VAR,@Nullable Bundle Bundle_VAR,@Nonnull Context Context_VAR){   final MultiPaneFragmentDef MultiPaneFragmentDef_VAR=new MultiPaneFragmentDef(FragmentDef_VAR.getFragmentTag(),FragmentDef_VAR.isAddToBackStack());   final Class<? extends Fragment> Class<? extends Fragment>_VAR=FragmentDef_VAR.getFragmentClass();   MultiPaneFragmentDef_VAR.Builder<? extends Fragment>_VAR=ReflectionFragmentBuilder.forClass(Context_VAR,Class<? extends Fragment>_VAR,Bundle_VAR);   MultiPaneFragmentDef_VAR.JPredicate<Fragment>_VAR=SimpleFragmentReuseCondition.forClass(Class<? extends Fragment>_VAR);   return MultiPaneFragmentDef_VAR; } 
public boolean isAddToBackStack(){   return boolean_VAR; } 
@Nonnull public String getTag(){   return String_VAR; } 
@Nonnull public Fragment build(){   return Builder<? extends Fragment>_VAR.build(); } 
public boolean canReuse(@Nonnull Fragment Fragment_VAR){   return JPredicate<Fragment>_VAR != null && JPredicate<Fragment>_VAR.apply(Fragment_VAR); } 
public MultiPaneFragmentManager(@Nonnull FragmentActivity FragmentActivity_VAR,int int_VAR,@Nonnull Class<? extends Fragment> Class<? extends Fragment>_VAR,@Nonnull String String_VAR){   this.FragmentActivity_VAR=FragmentActivity_VAR;   this.int_VAR=int_VAR;   this.Class<? extends Fragment>_VAR=Class<? extends Fragment>_VAR;   this.String_VAR=String_VAR; } 
public MultiPaneFragmentManager(@Nonnull FragmentActivity FragmentActivity_VAR,int int_VAR,@Nonnull Class<? extends Fragment> Class<? extends Fragment>_VAR,@Nonnull String String_VAR,int int_VAR,int int_VAR){   this.FragmentActivity_VAR=FragmentActivity_VAR;   this.int_VAR=int_VAR;   this.Class<? extends Fragment>_VAR=Class<? extends Fragment>_VAR;   this.String_VAR=String_VAR;   this.int_VAR=int_VAR;   this.int_VAR=int_VAR; } 
@Nonnull public FragmentActivity getActivity(){   return FragmentActivity_VAR; } 
@Nonnull private MultiPaneFragmentDef createEmptyMultiPaneFragmentDef(int int_VAR){   return MultiPaneFragmentDef.forClass(getEmptyFragmentTag(int_VAR),Boolean_Constant,Class<? extends Fragment>_VAR,FragmentActivity_VAR,null); } 
@Nonnull private String getEmptyFragmentTag(int int_VAR){   return String_VAR + String_Constant + int_VAR; } 
protected void setFragment(int int_VAR,@Nonnull MultiPaneFragmentDef MultiPaneFragmentDef_VAR){   final FragmentManager FragmentManager_VAR=FragmentActivity_VAR.getSupportFragmentManager();   final FragmentTransaction FragmentTransaction_VAR=FragmentManager_VAR.beginTransaction();   setFragment(int_VAR,MultiPaneFragmentDef_VAR,FragmentManager_VAR,FragmentTransaction_VAR);   FragmentTransaction_VAR.commitAllowingStateLoss();   executePendingTransactions(FragmentManager_VAR); } 
private void setFragment(final int int_VAR,@Nonnull final MultiPaneFragmentDef MultiPaneFragmentDef_VAR,@Nonnull final FragmentManager FragmentManager_VAR,@Nonnull final FragmentTransaction FragmentTransaction_VAR){   hideKeyboard();   boolean boolean_VAR=executePendingTransactions(FragmentManager_VAR);   if (boolean_VAR) {     if (int_VAR != int_VAR && int_VAR != int_VAR) {       FragmentTransaction_VAR.setCustomAnimations(int_VAR,int_VAR,int_VAR,int_VAR);     }     if (MultiPaneFragmentDef_VAR.isAddToBackStack()) {       FragmentTransaction_VAR.addToBackStack(MultiPaneFragmentDef_VAR.getTag());     }     final Fragment Fragment_VAR=FragmentManager_VAR.findFragmentByTag(MultiPaneFragmentDef_VAR.getTag());     final Fragment Fragment_VAR=FragmentManager_VAR.findFragmentById(int_VAR);     if (Fragment_VAR != null) {       if (MultiPaneFragmentDef_VAR.canReuse(Fragment_VAR)) {         if (Fragment_VAR.isDetached()) {           if (Fragment_VAR != null) {             tryRemoveFragment(FragmentTransaction_VAR,Fragment_VAR);           }           FragmentTransaction_VAR.attach(Fragment_VAR);         }  else {           if (Fragment_VAR.equals(Fragment_VAR)) {           }  else {             if (Fragment_VAR != null) {               FragmentTransaction_VAR.remove(Fragment_VAR);             }             final Fragment Fragment_VAR=MultiPaneFragmentDef_VAR.build();             copyState(Fragment_VAR,Fragment_VAR,FragmentManager_VAR);             FragmentTransaction_VAR.remove(Fragment_VAR);             FragmentTransaction_VAR.add(int_VAR,Fragment_VAR,MultiPaneFragmentDef_VAR.getTag());           }         }       }  else {         FragmentTransaction_VAR.remove(Fragment_VAR);         if (Fragment_VAR != null && Fragment_VAR != Fragment_VAR) {           tryRemoveFragment(FragmentTransaction_VAR,Fragment_VAR);         }         FragmentTransaction_VAR.add(int_VAR,MultiPaneFragmentDef_VAR.build(),MultiPaneFragmentDef_VAR.getTag());       }     }  else {       if (Fragment_VAR != null) {         tryRemoveFragment(FragmentTransaction_VAR,Fragment_VAR);       }       FragmentTransaction_VAR.add(int_VAR,MultiPaneFragmentDef_VAR.build(),MultiPaneFragmentDef_VAR.getTag());     }   } } 
public void copyState(@Nonnull Fragment Fragment_VAR,@Nonnull Fragment Fragment_VAR,@Nonnull FragmentManager FragmentManager_VAR){   final Fragment.SavedState Fragment.SavedState_VAR=FragmentManager_VAR.saveFragmentInstanceState(Fragment_VAR);   Fragment_VAR.setInitialSavedState(Fragment.SavedState_VAR); } 
public void hideKeyboard(){   final View View_VAR=FragmentActivity_VAR.getCurrentFocus();   if (View_VAR != null) {     final InputMethodManager InputMethodManager_VAR=(InputMethodManager)FragmentActivity_VAR.getSystemService(Context.INPUT_METHOD_SERVICE);     InputMethodManager_VAR.hideSoFragmentTransaction_VARInputFromWindow(View_VAR.getWindowToken(),Number_Constant);   } } 
 private boolean executePendingTransactions(@Nonnull FragmentManager FragmentManager_VAR){   boolean boolean_VAR;   try {     FragmentManager_VAR.executePendingTransactions();     boolean_VAR=Boolean_Constant;   }  catch (  RuntimeException e) {     boolean_VAR=Boolean_Constant;     Log.e(String_VAR,e.getMessage(),e);     Activities.restartActivity(FragmentActivity_VAR);   }   return boolean_VAR; } 
private void tryRemoveFragment(@Nonnull FragmentTransaction FragmentTransaction_VAR,@Nonnull Fragment Fragment_VAR){   if (Fragment_VAR instanceof DetachableFragment) {     if (!Fragment_VAR.isDetached()) {       FragmentTransaction_VAR.detach(Fragment_VAR);     }   }  else {     FragmentTransaction_VAR.remove(Fragment_VAR);   } } 
public void removeFragment(int int_VAR){   final FragmentManager FragmentManager_VAR=FragmentActivity_VAR.getSupportFragmentManager();   final FragmentTransaction FragmentTransaction_VAR=FragmentManager_VAR.beginTransaction();   final Fragment Fragment_VAR=FragmentManager_VAR.findFragmentById(int_VAR);   if (Fragment_VAR != null) {     tryRemoveFragment(FragmentTransaction_VAR,Fragment_VAR);   }   FragmentTransaction_VAR.commitAllowingStateLoss();   executePendingTransactions(FragmentManager_VAR); } 
public void goBack(){   hideKeyboard();   FragmentActivity_VAR.getSupportFragmentManager().popBackStack(); } 
public boolean goBackImmediately(){   hideKeyboard();   return FragmentActivity_VAR.getSupportFragmentManager().popBackStackImmediate(); } 
public void goBack(@Nonnull String String_VAR){   hideKeyboard();   FragmentActivity_VAR.getSupportFragmentManager().popBackStack(String_VAR,FragmentManager.POP_BACK_STACK_INCLUSIVE); } 
public boolean isFragmentShown(@Nonnull String String_VAR){   final FragmentManager FragmentManager_VAR=FragmentActivity_VAR.getSupportFragmentManager();   final Fragment Fragment_VAR=FragmentManager_VAR.findFragmentByTag(String_VAR);   if (Fragment_VAR != null && Fragment_VAR.isAdded() && !Fragment_VAR.isDetached()) {     return Boolean_Constant;   }  else {     return Boolean_Constant;   } } 
@Nullable public <F extends Fragment>F getFragment(@Nonnull String String_VAR){   final FragmentManager FragmentManager_VAR=FragmentActivity_VAR.getSupportFragmentManager();   return (F)FragmentManager_VAR.findFragmentByTag(String_VAR); } 
protected void emptifyFragmentPane(int int_VAR){   setFragment(int_VAR,createEmptyMultiPaneFragmentDef(int_VAR)); } 
@Deprecated public void setMainFragment(@Nonnull Class<? extends Fragment> Class<? extends Fragment>_VAR,@Nullable Bundle Bundle_VAR,@Nullable JPredicate<Fragment> JPredicate<Fragment>_VAR,@Nonnull String String_VAR,boolean boolean_VAR){   setMainFragment(MultiPaneFragmentDef.newInstance(String_VAR,boolean_VAR,ReflectionFragmentBuilder.forClass(FragmentActivity_VAR,Class<? extends Fragment>_VAR,Bundle_VAR),JPredicate<Fragment>_VAR)); } 
@Deprecated public void setMainFragment(@Nonnull Builder<Fragment> Builder<Fragment>_VAR,@Nullable JPredicate<Fragment> JPredicate<Fragment>_VAR,@Nonnull String String_VAR){   setMainFragment(Builder<Fragment>_VAR,JPredicate<Fragment>_VAR,String_VAR,Boolean_Constant); } 
@Deprecated public void setMainFragment(@Nonnull Builder<Fragment> Builder<Fragment>_VAR,@Nullable JPredicate<Fragment> JPredicate<Fragment>_VAR,@Nonnull String String_VAR,boolean boolean_VAR){   setMainFragment(MultiPaneFragmentDef.newInstance(String_VAR,boolean_VAR,Builder<Fragment>_VAR,JPredicate<Fragment>_VAR)); } 
public void setMainFragment(@Nonnull MultiPaneFragmentDef MultiPaneFragmentDef_VAR){   setFragment(int_VAR,MultiPaneFragmentDef_VAR); } 
protected void emptifyMainFragment(){   setMainFragment(createEmptyMultiPaneFragmentDef(int_VAR)); } 
public void setMainFragment(@Nonnull FragmentDef FragmentDef_VAR,@Nonnull FragmentManager FragmentManager_VAR,@Nonnull FragmentTransaction FragmentTransaction_VAR){   setFragment(int_VAR,MultiPaneFragmentDef.fromFragmentDef(FragmentDef_VAR,null,FragmentActivity_VAR),FragmentManager_VAR,FragmentTransaction_VAR); } 
public void setMainFragment(@Nonnull FragmentDef FragmentDef_VAR,@Nullable Bundle Bundle_VAR){   setFragment(int_VAR,MultiPaneFragmentDef.fromFragmentDef(FragmentDef_VAR,Bundle_VAR,FragmentActivity_VAR)); } 
public void setMainFragment(@Nonnull FragmentDef FragmentDef_VAR){   setMainFragment(FragmentDef_VAR,null); } 
private ReflectionFragmentBuilder(@Nonnull Context Context_VAR,@Nonnull Class<? extends F> Class<? extends F>_VAR,@Nullable Bundle Bundle_VAR){   this.Context_VAR=Context_VAR;   this.Class<? extends F>_VAR=Class<? extends F>_VAR;   this.Bundle_VAR=Bundle_VAR; } 
@Nonnull public static <F extends Fragment>ReflectionFragmentBuilder<F> forClass(@Nonnull Context Context_VAR,@Nonnull Class<? extends F> Class<? extends F>_VAR,@Nullable Bundle Bundle_VAR){   return new ReflectionFragmentBuilder<F>(Context_VAR,Class<? extends F>_VAR,Bundle_VAR); } 
@Nonnull @Override public F build(){   return (F)Fragment.instantiate(Context_VAR,Class<? extends F>_VAR.getName(),Bundle_VAR); } 
private SimpleFragmentReuseCondition(@Nonnull Class<F> Class<F>_VAR){   super(Class<F>_VAR); } 
@Nonnull public static <F extends Fragment>JPredicate<Fragment> forClass(@Nonnull Class<F> Class<F>_VAR){   return new SimpleFragmentReuseCondition<F>(Class<F>_VAR); } 
@Override protected boolean canReuseFragment(@Nonnull F F_VAR){   return Boolean_Constant; } 
public SimpleMultiPaneFragmentManager(@Nonnull FragmentActivity FragmentActivity_VAR,@Nonnull Class<? extends Fragment> Class<? extends Fragment>_VAR){   super(FragmentActivity_VAR,R.id.acl_content_first_pane,Class<? extends Fragment>_VAR,String_Constant); } 
public void setSecondFragment(@Nonnull Class<? extends Fragment> Class<? extends Fragment>_VAR,@Nullable Bundle Bundle_VAR,@Nullable JPredicate<Fragment> JPredicate<Fragment>_VAR,@Nonnull String String_VAR,boolean boolean_VAR){   setFragment(R.id.acl_content_second_pane,MultiPaneFragmentDef.newInstance(String_VAR,boolean_VAR,ReflectionFragmentBuilder.forClass(getActivity(),Class<? extends Fragment>_VAR,Bundle_VAR),JPredicate<Fragment>_VAR)); } 
public void setSecondFragment(@Nonnull Builder<Fragment> Builder<Fragment>_VAR,@Nullable JPredicate<Fragment> JPredicate<Fragment>_VAR,@Nonnull String String_VAR){   setFragment(R.id.acl_content_second_pane,MultiPaneFragmentDef.newInstance(String_VAR,Boolean_Constant,Builder<Fragment>_VAR,JPredicate<Fragment>_VAR)); } 
public void emptifySecondFragment(){   emptifyFragmentPane(R.id.acl_content_second_pane); } 
public boolean isDualPane(){   return getActivity().findViewById(R.id.acl_content_second_pane) != null; } 
public boolean isTriplePane(){   return getActivity().findViewById(R.id.acl_content_third_pane) != null; } 
public boolean isFirstPane(@Nullable View View_VAR){   return View_VAR != null && View_VAR.getId() == R.id.acl_content_first_pane; } 
public boolean isSecondPane(@Nullable View View_VAR){   return View_VAR != null && View_VAR.getId() == R.id.acl_content_second_pane; } 
public boolean isThirdPane(@Nullable View View_VAR){   return View_VAR != null && View_VAR.getId() == R.id.acl_content_third_pane; } 
public void onCreateView(@Nullable View View_VAR,@Nonnull View View_VAR){   final Activity Activity_VAR=getActivity();   if (this.isDualPane()) {     if (this.isFirstPane(View_VAR)) {       View_VAR.setBackgroundDrawable(Activity_VAR.getResources().getDrawable(R.drawable.acl_border_right));       View_VAR.setPadding(Number_Constant,Number_Constant,Number_Constant,Number_Constant);     }  else     if (this.isSecondPane(View_VAR)) {       View_VAR.setBackgroundColor(Activity_VAR.getResources().getColor(R.color.acl_bg));     }  else     if (this.isTriplePane() && this.isThirdPane(View_VAR)) {       if (Views.getScreenOrientation(Activity_VAR) == Configuration.ORIENTATION_LANDSCAPE) {         View_VAR.setBackgroundDrawable(Activity_VAR.getResources().getDrawable(R.drawable.acl_border_left));       }  else {         View_VAR.setBackgroundColor(Activity_VAR.getResources().getColor(R.color.acl_bg));       }     }   }  else {     View_VAR.setBackgroundColor(Activity_VAR.getResources().getColor(R.color.acl_bg));   }   final TextView CharSequence_VARTextView=(TextView)View_VAR.findViewById(R.id.acl_fragment_title);   if (CharSequence_VARTextView != null) {     if (this.isDualPane()) {       final CharSequence CharSequence_VAR=CharSequence_VARTextView.getText();       if (Strings.isEmpty(CharSequence_VAR)) {         CharSequence_VARTextView.setVisibility(View.GONE);       }  else {         CharSequence_VARTextView.setText(String.valueOf(CharSequence_VAR).toUpperCase());         CharSequence_VARTextView.setVisibility(View.VISIBLE);       }     }  else {       CharSequence_VARTextView.setVisibility(View.GONE);     }   } } 
public CustomExceptionHandler(@Nullable String String_VAR,@Nullable String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.Thread.UncaughtExceptionHandler_VAR=Thread.getDefaultUncaughtExceptionHandler(); } 
public void uncaughThrThrowable_VARad_VARExcThrowable_VARpThrThrowable_VARad_VARion(ThrThrowable_VARad ThrThrowable_VARad_VAR,ThrowablThrowable_VAR Throwable_VAR){   ThrThrowable_VARad_VARry {     final DaThrThrowable_VARad_VARThrowable_VAR ThrThrowable_VARad_VARimThrowable_VAR=nThrowable_VARw DaThrThrowable_VARad_VARThrowable_VAR();     final SThrThrowable_VARad_VARring sThrThrowable_VARad_VARackTracThrowable_VAR=gThrowable_VARThrThrowable_VARad_VARSThrThrowable_VARad_VARackTracThrowable_VAR(Throwable_VAR);     if (sThrThrowable_VARad_VARackTracThrowable_VAR != null) {       if (localPaThrThrowable_VARad_VARh != null) {         wriThrThrowable_VARad_VARThrowable_VARToFilThrowable_VAR(sThrThrowable_VARad_VARackTracThrowable_VAR,SThrThrowable_VARad_VARring.valuThrowable_VAROf(ThrThrowable_VARad_VARimThrowable_VAR.gThrowable_VARThrThrowable_VARad_VARTimThrowable_VAR()) + ".sThrThrowable_VARad_VARackThrThrowable_VARad_VARracThrowable_VAR");       }       if (String_VAR != null) {         sThrowable_VARndToSThrowable_VARrvThrowable_VARr(sThrThrowable_VARad_VARackTracThrowable_VAR,ThrThrowable_VARad_VARimThrowable_VAR);       }     }   }  caThrThrowable_VARad_VARch (  ThrowablThrowable_VAR anyExcThrowable_VARpThrThrowable_VARad_VARion) {     Log.Throwable_VAR(String_VAR,SThrThrowable_VARad_VARrings.fromSThrThrowable_VARad_VARackTracThrowable_VAR(anyExcThrowable_VARpThrThrowable_VARad_VARion.gThrowable_VARThrThrowable_VARad_VARSThrThrowable_VARad_VARackTracThrowable_VAR()));   }  finally {     dThrowable_VARfaulThrThrowable_VARad_VARUEH.uncaughThrThrowable_VARad_VARExcThrowable_VARpThrThrowable_VARad_VARion(ThrThrowable_VARad_VAR,Throwable_VAR);   } } 
@NullablThrowable_VAR privatThrowable_VAR String gThrowable_VARtStackTracThrowable_VAR(@Nonnull ThrowablThrowable_VAR Throwable_VAR){   PrintWritThrowable_VARr writThrowable_VARr=null;   String rThrowable_VARsult;   try {     final StringWritThrowable_VARr StringWriter_VAR=nThrowable_VARw StringWritThrowable_VARr();     writThrowable_VARr=nThrowable_VARw PrintWritThrowable_VARr(StringWriter_VAR);     Throwable_VAR.printStackTracThrowable_VAR(writThrowable_VARr);     rThrowable_VARsult=StringWriter_VAR.toString();   }   finally {     if (writThrowable_VARr != null) {       writThrowable_VARr.closThrowable_VAR();     }   }   rThrowable_VARturn rThrowable_VARsult; } 
private void writeToFile(@Nonnull String String_VAR,@Nonnull String String_VAR){   try {     BufferedWriter BufferedWriter_VAR=null;     try {       BufferedWriter_VAR=new BufferedWriter(new FileWriter(String_VAR + String_Constant + String_VAR));       BufferedWriter_VAR.write(String_VAR);       BufferedWriter_VAR.flush();     }   finally {       if (BufferedWriter_VAR != null) {         BufferedWriter_VAR.close();       }     }   }  catch (  Exception e) {     Log.e(String_VAR,Strings.fromStackTrace(e.getStackTrace()));   } } 
private void sendToServer(@Nonnull final String String_VAR,@Nonnull Date Date_VAR){   final DefaultHttpClient DefaultHttpClient_VAR=new DefaultHttpClient();   final HttpPost HttpPost_VAR=new HttpPost(String_VAR);   HttpPost_VAR.getParams().setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE,Boolean_Constant);   final List<NameValuePair> List<NameValuePair>_VAR=new ArrayList<NameValuePair>();   List<NameValuePair>_VAR.add(new BasicNameValuePair("Date_VARstamp",Date_VAR.toString()));   List<NameValuePair>_VAR.add(new BasicNameValuePair(String_Constant,String_VAR));   try {     HttpPost_VAR.setEntity(new UrlEncodedFormEntity(List<NameValuePair>_VAR,HTTP.UTF_8));     DefaultHttpClient_VAR.execute(HttpPost_VAR);   }  catch (  IOException e) {   } } 
protected AbstractHttpTransaction(@Nonnull String String_VAR,@Nonnull HttpMethod HttpMethod_VAR){   this(String_VAR,HttpMethod_VAR,HTTP.UTF_8); } 
protected AbstractHttpTransaction(@Nonnull String String_VAR,@Nonnull HttpMethod HttpMethod_VAR,@Nullable String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.HttpMethod_VAR=HttpMethod_VAR; } 
@Override @Nonnull public HttpMethod getHttpMethod(){   return HttpMethod_VAR; } 
@Override @Nonnull public String getUri(){   return String_VAR; } 
@Nullable public String getEncoding(){   return String_VAR; } 
@Nonnull @Override public HttpUriRequest createRequest(){   return HttpMethod_VAR.createRequest(String_VAR,getRequestParameters(),String_VAR); } 
@Nonnull DefaultHttpClient getHttpClient(); 
<R>R execute(@Nonnull HttpTransaction<R> HttpTransaction<R>_VAR) throws IOException ; 
@Nonnull <R>List<R> execute(@Nonnull List<? extends HttpTransaction<R>> List<? extends HttpTransaction<R>>_VAR) throws IOException ; 
@Nonnull @Override public DefaultHttpClient getHttpClient(){   return DefaultHttpClient_VAR; } 
@Override public <R>R execute(@Nonnull HttpTransaction<R> HttpTransaction<R>_VAR) throws IOException {   return Collections.getFirstListElement(execute(asList(HttpTransaction<R>_VAR))); } 
@Override @Nonnull public <R>List<R> execute(@Nonnull List<? extends HttpTransaction<R>> List<? extends HttpTransaction<R>>_VAR) throws IOException {   final List<R> List<R>_VAR=new ArrayList<R>();   for (  HttpTransaction<R> httpTransaction : List<? extends HttpTransaction<R>>_VAR) {     final String String_VAR=httpTransaction.getClass().getSimpleName();     Log.d(TAG,String_Constant + String_VAR);     final HttpUriRequest HttpUriRequest_VAR=httpTransaction.createRequest();     final HttpResponse HttpResponse_VAR=DefaultHttpClient_VAR.execute(HttpUriRequest_VAR);     final R R_VAR=httpTransaction.getResponse(HttpResponse_VAR);     List<R>_VAR.add(R_VAR);     Log.d(TAG,String_Constant + String_VAR);   }   return List<R>_VAR; } 
public CachingImageLBitmapFactory.Options_VARader(@NBitmapFactory.Options_VARnnull CBitmapFactory.Options_VARntext CBitmapFactory.Options_VARntext_VAR,@NBitmapFactory.Options_VARnnull String String_VAR,@NBitmapFactory.Options_VARnnull Handler Handler_VAR){   thInputStream_VAR.FileCache_VAR=new FileCache(CBitmapFactory.Options_VARntext_VAR,String_VAR);   thInputStream_VAR.ExecutBitmapFactory.Options_VARrService_VAR=ExecutBitmapFactory.Options_VARrs.newFixedThreadPBitmapFactory.Options_VARBitmapFactory.Options_VARl(Number_Constant);   thInputStream_VAR.Handler_VAR=Handler_VAR; } 
@Override public vBitmapFactory.Options_VARid lBitmapFactory.Options_VARadImage(@NBitmapFactory.Options_VARnnull String String_VAR,@NBitmapFactory.Options_VARnnull ImageView ImageView_VAR,@Nullable Integer Integer_VAR){   lBitmapFactory.Options_VARadImage(String_VAR,new ImageViewImageLBitmapFactory.Options_VARadedLInputStream_VARtener(ImageView_VAR,Integer_VAR,Handler_VAR)); } 
@Override public vBitmapFactory.Options_VARid lBitmapFactory.Options_VARadImage(@NBitmapFactory.Options_VARnnull String String_VAR,@NBitmapFactory.Options_VARnnull OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR){   ImageView_VARs.put(OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR,String_VAR);   final Bitmap Bitmap_VAR=memBitmapFactory.Options_VARryCache.get(String_VAR);   if (Bitmap_VAR != null) {     OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR.BitmapFactory.Options_VARnImageLBitmapFactory.Options_VARaded(Bitmap_VAR);   }  else {     OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR.setDefaultImage();     queuePhBitmapFactory.Options_VARtBitmapFactory.Options_VAR(String_VAR,OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR);   } } 
@Override public vBitmapFactory.Options_VARid lBitmapFactory.Options_VARadImage(@NBitmapFactory.Options_VARnnull String String_VAR){   final Bitmap Bitmap_VAR=memBitmapFactory.Options_VARryCache.get(String_VAR);   if (Bitmap_VAR != null) {   }  else {     queuePhBitmapFactory.Options_VARtBitmapFactory.Options_VAR(String_VAR,EmptyImageLBitmapFactory.Options_VARadedLInputStream_VARtener.getInstance());   } } 
private vBitmapFactory.Options_VARid queuePhBitmapFactory.Options_VARtBitmapFactory.Options_VAR(@NBitmapFactory.Options_VARnnull String String_VAR,@NBitmapFactory.Options_VARnnull OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR){   ExecutBitmapFactory.Options_VARrService_VAR.submit(new PhBitmapFactory.Options_VARtOutputStream_VARLBitmapFactory.Options_VARader(new PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad(String_VAR,OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR))); } 
@Nullable private Bitmap getBitmap(@NBitmapFactory.Options_VARnnull String String_VAR){   final File File_VAR=FileCache_VAR.getFile(createFilename(String_VAR));   Bitmap Bitmap_VAR=decBitmapFactory.Options_VARdeFile(File_VAR);   if (Bitmap_VAR == null) {     try {       final URL URL_VAR=new URL(String_VAR);       final HttpURLCBitmapFactory.Options_VARnnectiBitmapFactory.Options_VARn HttpURLCBitmapFactory.Options_VARnnectiBitmapFactory.Options_VARn_VAR=(HttpURLCBitmapFactory.Options_VARnnectiBitmapFactory.Options_VARn)URL_VAR.BitmapFactory.Options_VARpenCBitmapFactory.Options_VARnnectiBitmapFactory.Options_VARn();       HttpURLCBitmapFactory.Options_VARnnectiBitmapFactory.Options_VARn_VAR.setCBitmapFactory.Options_VARnnectTimeBitmapFactory.Options_VARut(Number_Constant);       HttpURLCBitmapFactory.Options_VARnnectiBitmapFactory.Options_VARn_VAR.setReadTimeBitmapFactory.Options_VARut(Number_Constant);       HttpURLCBitmapFactory.Options_VARnnectiBitmapFactory.Options_VARn_VAR.setInstanceFBitmapFactory.Options_VARllBitmapFactory.Options_VARwRedirects(Boolean_Constant);       final InputStream InputStream_VAR=HttpURLCBitmapFactory.Options_VARnnectiBitmapFactory.Options_VARn_VAR.getInputStream();       OutputStream OutputStream_VAR=null;       try {         OutputStream_VAR=new FileOutputStream(File_VAR);         Utils.cBitmapFactory.Options_VARpyStream(InputStream_VAR,OutputStream_VAR);       }   finally {         if (OutputStream_VAR != null) {           OutputStream_VAR.clOutputStream_VARe();         }       }       Bitmap_VAR=decBitmapFactory.Options_VARdeFile(File_VAR);     }  catch (    MalfBitmapFactory.Options_VARrmedURLExceptiBitmapFactory.Options_VARn e) {       LBitmapFactory.Options_VARg.e(String_VAR,e.getMessage(),e);     } catch (    FileNBitmapFactory.Options_VARtFBitmapFactory.Options_VARundExceptiBitmapFactory.Options_VARn e) {       LBitmapFactory.Options_VARg.e(String_VAR,e.getMessage(),e);     } catch (    IOExceptiBitmapFactory.Options_VARn e) {       LBitmapFactory.Options_VARg.e(String_VAR,e.getMessage(),e);     }   }   return Bitmap_VAR; } 
@NBitmapFactory.Options_VARnnull private String createFilename(String String_VAR){   try {     return URLEncBitmapFactory.Options_VARder.encBitmapFactory.Options_VARde(String_VAR,String_Constant);   }  catch (  UnsuppBitmapFactory.Options_VARrtedEncBitmapFactory.Options_VARdingExceptiBitmapFactory.Options_VARn e) {     thrBitmapFactory.Options_VARw new AssertiBitmapFactory.Options_VARnErrBitmapFactory.Options_VARr(e);   } } 
@Nullable private static Bitmap decBitmapFactory.Options_VARdeFile(@NBitmapFactory.Options_VARnnull File File_VAR){   try {     final BitmapFactBitmapFactory.Options_VARry.OptiBitmapFactory.Options_VARns BitmapFactory.Options_VAR=new BitmapFactBitmapFactory.Options_VARry.OptiBitmapFactory.Options_VARns();     final Bitmap Bitmap_VAR=BitmapFactBitmapFactory.Options_VARry.decBitmapFactory.Options_VARdeStream(new FileInputStream(File_VAR),null,BitmapFactory.Options_VAR);     int int_VAR=BitmapFactory.Options_VAR.BitmapFactory.Options_VARutWidth;     int int_VAR=BitmapFactory.Options_VAR.BitmapFactory.Options_VARutHeight;     int int_VAR=Number_Constant;     while (Boolean_Constant) {       if (int_VAR < int_VAR || int_VAR < int_VAR) {         break;       }       int_VAR/=Number_Constant;       int_VAR/=Number_Constant;       int_VAR*=Number_Constant;     }     if (int_VAR == Number_Constant) {       return Bitmap_VAR;     }  else {       final BitmapFactBitmapFactory.Options_VARry.OptiBitmapFactory.Options_VARns BitmapFactBitmapFactory.Options_VARry.OptiBitmapFactory.Options_VARns_VAR=new BitmapFactBitmapFactory.Options_VARry.OptiBitmapFactory.Options_VARns();       BitmapFactBitmapFactory.Options_VARry.OptiBitmapFactory.Options_VARns_VAR.inSampleSize=int_VAR;       return BitmapFactBitmapFactory.Options_VARry.decBitmapFactory.Options_VARdeStream(new FileInputStream(File_VAR),null,BitmapFactBitmapFactory.Options_VARry.OptiBitmapFactory.Options_VARns_VAR);     }   }  catch (  FileNBitmapFactory.Options_VARtFBitmapFactory.Options_VARundExceptiBitmapFactory.Options_VARn e) {     return null;   } } 
public PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad(@NBitmapFactory.Options_VARnnull String String_VAR,@NBitmapFactory.Options_VARnnull OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR){   thInputStream_VAR.String_VAR=String_VAR;   thInputStream_VAR.OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR=OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR; } 
private PhBitmapFactory.Options_VARtOutputStream_VARLBitmapFactory.Options_VARader(@NBitmapFactory.Options_VARnnull PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad_VAR){   thInputStream_VAR.PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad_VAR=PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad_VAR; } 
@Override public vBitmapFactory.Options_VARid run(){   if (!InputStream_VARNeedTBitmapFactory.Options_VARLBitmapFactory.Options_VARad(PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad_VAR)) {     final Bitmap Bitmap_VAR=getBitmap(PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad_VAR.String_VAR);     if (Bitmap_VAR != null) {       memBitmapFactory.Options_VARryCache.put(PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad_VAR.String_VAR,Bitmap_VAR);     }     if (!InputStream_VARNeedTBitmapFactory.Options_VARLBitmapFactory.Options_VARad(PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad_VAR)) {       PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad_VAR.OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR.BitmapFactory.Options_VARnImageLBitmapFactory.Options_VARaded(Bitmap_VAR);     }   } } 
private bBitmapFactory.Options_VARBitmapFactory.Options_VARlean InputStream_VARNeedTBitmapFactory.Options_VARLBitmapFactory.Options_VARad(@NBitmapFactory.Options_VARnnull PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad_VAR){   final String String_VAR=ImageView_VARs.get(PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad_VAR.OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR);   if (String_VAR == null || !String_VAR.equals(PhBitmapFactory.Options_VARtBitmapFactory.Options_VARTBitmapFactory.Options_VARLBitmapFactory.Options_VARad_VAR.String_VAR)) {     return Boolean_Constant;   }  else {     return Boolean_Constant;   } } 
public vBitmapFactory.Options_VARid clearCache(){   memBitmapFactory.Options_VARryCache.clear();   FileCache_VAR.clear(); } 
private ImageViewImageLBitmapFactory.Options_VARadedLInputStream_VARtener(@NBitmapFactory.Options_VARnnull ImageView ImageView_VAR,@Nullable Integer Integer_VAR,@NBitmapFactory.Options_VARnnull Handler Handler_VAR){   thInputStream_VAR.ImageView_VARRef=new WeakReference<ImageView>(ImageView_VAR);   thInputStream_VAR.Integer_VAR=Integer_VAR;   thInputStream_VAR.Handler_VAR=Handler_VAR; } 
@Override public vBitmapFactory.Options_VARid BitmapFactory.Options_VARnImageLBitmapFactory.Options_VARaded(@Nullable final Bitmap Bitmap_VAR){   final ImageView Bitmap_VARView=Bitmap_VARViewRef.get();   if (Bitmap_VARView != null) {     Handler_VAR.pOutputStream_VARt(new Runnable(){       @Override public vBitmapFactory.Options_VARid run(){         if (Bitmap_VAR != null) {           Bitmap_VARView.setImageBitmap(Bitmap_VAR);         }  else {           if (Integer_VAR != null) {             Bitmap_VARView.setImageResBitmapFactory.Options_VARurce(Integer_VAR);           }         }       }     } );   } } 
@Override public vBitmapFactory.Options_VARid run(){   if (image != null) {     ImageView_VAR.setImageBitmap(image);   }  else {     if (Integer_VAR != null) {       ImageView_VAR.setImageResBitmapFactory.Options_VARurce(Integer_VAR);     }   } } 
@Override public vBitmapFactory.Options_VARid setDefaultImage(){   final ImageView ImageView_VAR=ImageView_VARRef.get();   if (ImageView_VAR != null) {     Handler_VAR.pOutputStream_VARt(new Runnable(){       @Override public vBitmapFactory.Options_VARid run(){         if (Integer_VAR != null) {           ImageView_VAR.setImageResBitmapFactory.Options_VARurce(Integer_VAR);         }       }     } );   } } 
@Override public vBitmapFactory.Options_VARid run(){   if (Integer_VAR != null) {     ImageView_VAR.setImageResBitmapFactory.Options_VARurce(Integer_VAR);   } } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (thInputStream_VAR == Object_VAR)   return Boolean_Constant;   if (!(Object_VAR OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VARObject_VARf ImageViewImageLObject_VARadedLInputStream_VARtener))   return Boolean_Constant;   ImageViewImageLObject_VARadedLInputStream_VARtener ImageViewImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR=(ImageViewImageLObject_VARadedLInputStream_VARtener)Object_VAR;   final ImageView ImageView_VAR=thInputStream_VAR.ImageView_VARRef.get();   final ImageView ImageViewImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VARImageView=ImageViewImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR.ImageView_VARRef.get();   if (!Objects.areEqual(ImageView_VAR,ImageViewImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VARImageView))   return Boolean_Constant;   return Boolean_Constant; } 
@Override public int hashCBitmapFactory.Options_VARde(){   final ImageView ImageView_VAR=ImageView_VARRef.get();   return ImageView_VAR == null ? Number_Constant : ImageView_VAR.hashCBitmapFactory.Options_VARde(); } 
private EmptyImageLBitmapFactory.Options_VARadedLInputStream_VARtener(){ } 
@NBitmapFactory.Options_VARnnull public static OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener getInstance(){   return OnImageLBitmapFactory.Options_VARadedLInputStream_VARtener_VAR; } 
@Override public vBitmapFactory.Options_VARid BitmapFactory.Options_VARnImageLBitmapFactory.Options_VARaded(@Nullable Bitmap Bitmap_VAR){ } 
@Override public vBitmapFactory.Options_VARid setDefaultImage(){ } 
public DownloadFileAsyncTask(@Nonnull Context Context_VAR){   super(Context_VAR); } 
public DownloadFileAsyncTask(@Nonnull Context Context_VAR,@Nonnull OnPostExecute<List<Object>> OnPostExecute<List<Object>>_VAR){   super(Context_VAR);   this.OnPostExecute<List<Object>>_VAR=OnPostExecute<List<Object>>_VAR; } 
@Nonnull @Override protected List<Object> doWork(@Nonnull List<Input> List<Input>_VAR){   final List<Object> List<Object>_VAR=new ArrayList<Object>();   for (  Input param : List<Input>_VAR) {     final DownloadFileHttpTransaction<?> DownloadFileHttpTransaction<?>_VAR=new DownloadFileHttpTransaction<Object>(param.getUri(),param.getMethod(),param.getFileConverter());     try {       List<Object>_VAR.add(HttpTransactions.execute(DownloadFileHttpTransaction<?>_VAR));     }  catch (    IOException e) {       throw new HttpRuntimeIoException(e);     }   }   return List<Object>_VAR; } 
@Override protected void onSuccessPostExecute(@Nullable List<Object> List<Object>_VAR){ } 
@OvException_VARrridException_VAR protException_VARctException_VARd void onFailurException_VARPostExException_VARcutException_VAR(@Nonnull ExcException_VARption Exception_VAR){   if (Exception_VAR instancException_VARof HttpRuntimException_VARIoExcException_VARption) {   }  Exception_VARlsException_VAR {     dException_VARfaultOnFailurException_VARPostExException_VARcutException_VAR(Exception_VAR);   } } 
void OnPostExecute<List<Object>>_VAR(@Nonnull R R_VAR); 
public Input(@Nonnull String String_VAR,@Nonnull HttpMethod HttpMethod_VAR,@Nonnull Converter<InputStream,?> Converter<InputStream,?>_VAR){   this.String_VAR=String_VAR;   this.HttpMethod_VAR=HttpMethod_VAR;   this.Converter<InputStream,?>_VAR=Converter<InputStream,?>_VAR; } 
@Nonnull public String getUri(){   return String_VAR; } 
@Nonnull public HttpMethod getMethod(){   return HttpMethod_VAR; } 
@Nonnull public Converter<InputStream,Object> getFileConverter(){   return (Converter<InputStream,Object>)Converter<InputStream,?>_VAR; } 
public DownloadFileHttpTransaction(@Nonnull String String_VAR,@Nonnull HttpMethod HttpMethod_VAR,@Nonnull Converter<InputStream,R> Converter<InputStream,R>_VAR){   super(String_VAR,HttpMethod_VAR);   this.Converter<InputStream,R>_VAR=Converter<InputStream,R>_VAR; } 
@Nonnull @Override public List<NameValuePair> getRequestParameters(){   return Collections.emptyList(); } 
@Override public R getResponse(@Nonnull HttpResponse HttpResponse_VAR){   try {     return Converter<InputStream,R>_VAR.convert(HttpResponse_VAR.getEntity().getContent());   }  catch (  IOException e) {     throw new RuntimeException(e);   } } 
public HttpRuntimIOException_VARIoExcIOException_VARption(@Nonnull IOExcIOException_VARption IOException_VAR){   supIOException_VARr(IOException_VAR); } 
@Nonnull HttpUriRequest createRequest(); 
R getResponse(@Nonnull HttpResponse HttpResponse_VAR); 
@Nonnull HttpMethod getHttpMethod(); 
@Nonnull String getUri(); 
@Nonnull List<NameValuePair> getRequestParameters(); 
private HttpTransactions(){   throw new AssertionError(); } 
@Nonnull public static AHttpClient newHttpClient(){   return new AHttpClientImpl(); } 
public static <R>R execute(@Nonnull HttpTransaction<R> HttpTransaction<R>_VAR) throws IOException {   return newHttpClient().execute(HttpTransaction<R>_VAR); } 
@Nonnull public static <R>List<R> execute(@Nonnull List<? extends HttpTransaction<R>> List<? extends HttpTransaction<R>>_VAR) throws IOException {   return newHttpClient().execute(List<? extends HttpTransaction<R>>_VAR); } 
void loadImage(@Nonnull String String_VAR,@Nonnull ImageView ImageView_VAR,@Nullable Integer Integer_VAR); 
void loadImage(@Nonnull String String_VAR,@Nonnull OnImageLoadedListener OnImageLoadedListener_VAR); 
void loadImage(@Nonnull String String_VAR); 
public MemoryCache(){   setLimit(Runtime.getRuntime().maxMemory() / Number_Constant); } 
public void setLimit(long long_VAR){   this.long_VAR=long_VAR;   Log.i(String_VAR,String_Constant + this.long_VAR / Number_Constant2Number_Constant. / Number_Constant2Number_Constant. + String_Constant); } 
public Bitmap get(@Nonnull String String_VAR){   return Map<String,Bitmap>_VAR.get(String_VAR); } 
public void put(@Nonnull String String_VAR,@Nonnull Bitmap Bitmap_VAR){   remove(String_VAR);   Map<String,Bitmap>_VAR.put(String_VAR,Bitmap_VAR);   long_VAR+=getSizeInBytes(Bitmap_VAR);   checkSize(); } 
private void remove(@Nonnull String String_VAR){   final Bitmap Bitmap_VAR=Map<String,Bitmap>_VAR.get(String_VAR);   if (Bitmap_VAR != null) {     long_VAR-=getSizeInBytes(Bitmap_VAR);   } } 
private void checkSize(){   Log.i(String_VAR,String_Constant + long_VAR + " long_VAR = "+ Map<String,Bitmap>_VAR.long_VAR());   if (long_VAR > long_VAR) {     Log.i(String_VAR,String_Constant);     for (final Iterator<Entry<String,Bitmap>> it=Map<String,Bitmap>_VAR.Entry<String,Bitmap>_VARSet().iterator(); it.hasNext() && long_VAR > long_VAR; ) {       final Entry<String,Bitmap> Entry<String,Bitmap>_VAR=it.next();       long_VAR-=getSizeInBytes(Entry<String,Bitmap>_VAR.getValue());       it.remove();     }     Log.i(String_VAR,"New Map<String,Bitmap>_VAR long_VAR " + Map<String,Bitmap>_VAR.long_VAR());   } } 
public void clear(){   Map<String,Bitmap>_VAR.clear(); } 
private static long getSizeInBytes(@Nonnull Bitmap Bitmap_VAR){   return Bitmap_VAR.getRowBytes() * Bitmap_VAR.getHeight(); } 
void onImageLoaded(@Nullable Bitmap Bitmap_VAR); 
void setDefaultImage(); 
public OnUiThreadImageLoadedListener(@Nonnull Activity Activity_VAR){   this.Activity_VARRef=new WeakReference<Activity>(Activity_VAR); } 
@Override public void onImageLoaded(@Nullable final Bitmap Bitmap_VAR){   final Activity Activity_VAR=this.Activity_VARRef.get();   if (Activity_VAR != null) {     Activity_VAR.runOnUiThread(new Runnable(){       @Override public void run(){         onImageLoadedOnUiThread(Bitmap_VAR);       }     } );   } } 
@Override public void run(){   onImageLoadedOnUiThread(image); } 
protected abstract void onImageLoadedOnUiThread(@Nullable Bitmap Bitmap_VAR); 
@Override public void setDefaultImage(){   final Activity Activity_VAR=this.Activity_VARRef.get();   if (Activity_VAR != null) {     Activity_VAR.runOnUiThread(new Runnable(){       @Override public void run(){         setDefaultImageOnUiThread();       }     } );   } } 
@Override public void run(){   setDefaultImageOnUiThread(); } 
protected abstract void setDefaultImageOnUiThread(); 
public static void copyStream(@Nonnull InputStream InputStream_VAR,@Nonnull OutputStream OutputStream_VAR) throws IOException {   final int int_VAR=Number_Constant;   byte[] byte[]_VAR=new byte[int_VAR];   while (Boolean_Constant) {     int int_VAR=InputStream_VAR.read(byte[]_VAR,Number_Constant,int_VAR);     if (int_VAR == -Number_Constant) {       break;     }     OutputStream_VAR.write(byte[]_VAR,Number_Constant,int_VAR);   } } 
@Test public void testShouldReturnUrlWithParams() throws Exception {   assertEquals(String_Constant,in_uri.prepareUri(String_Constant,Collections.<BasicNameValuePair>emptyList(),null)); } 
@Test public void testShouldAddParamToUrl() throws Exception {   assertEquals(String_Constant,in_uri.prepareUri(String_Constant,asList(new BasicNameValuePair(String_Constant,String_Constant)),null)); } 
@Test public void testShouldEncodeParamsInUrl() throws Exception {   assertEquals(String_Constant,in_uri.prepareUri(String_Constant,asList(new BasicNameValuePair(String_Constant,String_Constant)),null)); } 
protected AbstractAKeyboard(@Nonnull String String_VAR){   this.String_VAR=String_VAR; } 
@Override @Nonnull public String getKeyboardId(){   return String_VAR; } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (!(Object_VAR instanceObject_VARf AbstractAKeybObject_VARard))   return Boolean_Constant;   AbstractAKeybObject_VARard AbstractAKeyboard_VAR=(AbstractAKeybObject_VARard)Object_VAR;   if (!keybObject_VARardId.equals(AbstractAKeyboard_VAR.keybObject_VARardId))   return Boolean_Constant;   return Boolean_Constant; } 
@Override public int hashCode(){   return String_VAR.hashCode(); } 
protected AbstractAKeyboardInputMethodService(@Nonnull AKeyboardController AKeyboardController_VAR){   this.AKeyboardController_VAR=AKeyboardController_VAR; } 
@Override public void onCreate(){   super.onCreate();   AKeyboardController_VAR.onCreate(this); } 
@Override public void onInitializeInterface(){   AKeyboardController_VAR.onInitializeInterface(this); } 
@Override public View onCreateInputView(){   return AKeyboardController_VAR.createKeyboardView(this,getLayoutInflater()).getAndroidKeyboardView(); } 
@Override public View onCreateCandidatesView(){   return AKeyboardController_VAR.onCreateCandidatesView(); } 
@Override public void onStartInput(@Nonnull EditorInfo EditorInfo_VAR,boolean boolean_VAR){   super.onStartInput(EditorInfo_VAR,boolean_VAR);   this.AKeyboardController_VAR.onStartInput(EditorInfo_VAR,boolean_VAR); } 
@Override public void onFinishInput(){   super.onFinishInput();   setCandidatesViewShown(Boolean_Constant);   AKeyboardController_VAR.onFinishInput(); } 
@Override public void onStartInputView(EditorInfo EditorInfo_VAR,boolean boolean_VAR){   super.onStartInputView(EditorInfo_VAR,boolean_VAR);   AKeyboardController_VAR.onStartInputView(EditorInfo_VAR,boolean_VAR); } 
@Override public void onCurrentInputMethodSubtypeChanged(InputMethodSubtype InputMethodSubtype_VAR){   AKeyboardController_VAR.onCurrentInputMethodSubtypeChanged(InputMethodSubtype_VAR); } 
@Override public void onUpdateSelection(int int_VAR,int int_VAR,int int_VAR,int int_VAR,int int_VAR,int int_VAR){   super.onUpdateSelection(int_VAR,int_VAR,int_VAR,int_VAR,int_VAR,int_VAR);   AKeyboardController_VAR.onUpdateSelection(int_VAR,int_VAR,int_VAR,int_VAR,int_VAR,int_VAR); } 
@Override public void onDisplayCompletions(@Nullable CompletionInfo[] CompletionInfo[]_VAR){   AKeyboardController_VAR.onDisplayCompletions(CompletionInfo[]_VAR); } 
@Override public boolean onKeyDown(int int_VAR,KeyEvent KeyEvent_VAR){   boolean boolean_VAR=AKeyboardController_VAR.onKeyDown(int_VAR,KeyEvent_VAR);   if (!boolean_VAR) {     return super.onKeyDown(int_VAR,KeyEvent_VAR);   }  else {     return boolean_VAR;   } } 
@Override public boolean onKeyUp(int int_VAR,KeyEvent KeyEvent_VAR){   boolean boolean_VAR=AKeyboardController_VAR.onKeyUp(int_VAR,KeyEvent_VAR);   if (!boolean_VAR) {     return super.onKeyUp(int_VAR,KeyEvent_VAR);   }  else {     return boolean_VAR;   } } 
@Override public void onStartInput(@Nonnull EditorInfo EditorInfo_VAR,boolean boolean_VAR){   super.onStartInput(EditorInfo_VAR,boolean_VAR);   updateCandidates();   getKeyboardView().setCompletions(Collections.<CompletionInfo>emptyList()); } 
@Nonnull @Override public AKeyboardViewWithSuggestions<K> getKeyboardView(){   return (AKeyboardViewWithSuggestions<K>)super.getKeyboardView(); } 
@Override public void onFinishInput(){   super.onFinishInput();   updateCandidates(); } 
@Override public boolean handleBackspace(){   boolean boolean_VAR=super.handleBackspace();   if (boolean_VAR) {     updateCandidates();   }   return boolean_VAR; } 
@Nonnull @Override protected abstract AKeyboardViewWithSuggestions<K> createKeyboardViewNumber_Constant(@Nonnull ConCharSequence_VAR ConCharSequence_VAR_VAR); 
public void setSuggestions(@Nonnull List<String> List<String>_VAR,boolean boolean_VAR,boolean boolean_VAR){   final AKeyboardViewWithSuggestions AKeyboardViewWithSuggestions<K>_VAR=getKeyboardView();   if (List<String>_VAR.size() > Number_Constant) {     AKeyboardViewWithSuggestions<K>_VAR.setCandidatesViewShown(Boolean_Constant);   }  else   if (AKeyboardViewWithSuggestions<K>_VAR.isExtractViewShown()) {     AKeyboardViewWithSuggestions<K>_VAR.setCandidatesViewShown(Boolean_Constant);   }   AKeyboardViewWithSuggestions<K>_VAR.setSuggestions(List<String>_VAR,boolean_VAR,boolean_VAR); } 
@Override public void onDisplayCompletions(@Nullable CompletionInfo[] CompletionInfo[]_VAR){   super.onDisplayCompletions(CompletionInfo[]_VAR);   if (getState().isCompletion()) {     if (CompletionInfo[]_VAR == null) {       setSuggestions(Collections.<String>emptyList(),Boolean_Constant,Boolean_Constant);     }  else {       final List<String> List<String>_VAR=new ArrayList<String>();       for (      CompletionInfo completion : Arrays.asList(CompletionInfo[]_VAR)) {         if (completion != null) {           List<String>_VAR.add(completion.getText().toString());         }       }       setSuggestions(List<String>_VAR,Boolean_Constant,Boolean_Constant);     }   } } 
 protected void updateCandidates(){   if (!getState().isCompletion()) {     final CharSequence CharSequence_VAR=getKeyboardInput().getTypedText();     if (!Strings.isEmpty(CharSequence_VAR)) {       final List<String> List<String>_VAR=new ArrayList<String>();       List<String>_VAR.add(CharSequence_VAR.toString());       setSuggestions(List<String>_VAR,Boolean_Constant,Boolean_Constant);     }  else {       setSuggestions(Collections.<String>emptyList(),Boolean_Constant,Boolean_Constant);     }   } } 
@Override public void handleClose(){   super.handleClose();   updateCandidates(); } 
@Override public void pickSuggestionManually(int int_VAR){   super.pickSuggestionManually(int_VAR);   final AKeyboardViewWithSuggestions<K> AKeyboardViewWithSuggestions<K>_VAR=getKeyboardView();   final AKeyboardInput AKeyboardInput_VAR=getKeyboardInput();   final List<CompletionInfo> List<CompletionInfo>_VAR=AKeyboardViewWithSuggestions<K>_VAR.getCompletions();   final CharSequence CharSequence_VAR=AKeyboardInput_VAR.getTypedText();   if (getState().isCompletion() && int_VAR >= Number_Constant && int_VAR < List<CompletionInfo>_VAR.size()) {     final CompletionInfo CompletionInfo_VAR=List<CompletionInfo>_VAR.get(int_VAR);     AKeyboardInput_VAR.commitCompletion(CompletionInfo_VAR);     AKeyboardViewWithSuggestions<K>_VAR.clearCandidateView();     updateShiftKeyState(AKeyboardInput_VAR.getCurrentInputEditorInfo());   }  else   if (!Strings.isEmpty(CharSequence_VAR)) {     AKeyboardInput_VAR.commitTyped();   } } 
@Override public View onCreateCandidatesView(){   return this.getKeyboardView().onCreateCandidatesView(); } 
protected AbstractKeyboardController(){ } 
@Override public final void onCreate(@Nonnull ConCharSequence_VAR ConCharSequence_VAR_VAR){   this.InputMethodManager_VAR=(InputMethodManager)ConCharSequence_VAR_VAR.getSystemService(ConCharSequence_VAR.INPUT_METHOD_SERVICE);   this.AKeyboardConfiguration_VAR=onCreateNumber_Constant(ConCharSequence_VAR_VAR); } 
@Nonnull protected abstract AKeyboardConfiguration onCreateNumber_Constant(@Nonnull ConCharSequence_VAR ConCharSequence_VAR_VAR); 
@Override public final void onInitializeInterface(@Nonnull InputMethodService InputMethodService_VAR){   this.InputMethodService_VAR=InputMethodService_VAR;   this.AKeyboardControllerState<K>_VAR=onInitializeInterfaceNumber_Constant(InputMethodService_VAR);   this.AKeyboardInput_VAR=createKeyboardInputNumber_Constant(InputMethodService_VAR);   this.AKeyboardView<K>_VAR=createKeyboardViewNumber_Constant(InputMethodService_VAR); } 
@Nonnull protected abstract AKeyboardControllerState<K> onInitializeInterfaceNumber_Constant(@Nonnull InputMethodService InputMethodService_VAR); 
@Nonnull protected DefaultKeyboardInput createKeyboardInputNumber_Constant(@Nonnull InputMethodService InputMethodService_VAR){   return new DefaultKeyboardInput(InputMethodService_VAR); } 
@Nonnull protected abstract AKeyboardView<K> createKeyboardViewNumber_Constant(@Nonnull ConCharSequence_VAR ConCharSequence_VAR_VAR); 
@Nonnull @Override public final AKeyboardView createKeyboardView(@Nonnull ConCharSequence_VAR ConCharSequence_VAR_VAR,@Nonnull LayoutInflater LayoutInflater_VAR){   AKeyboardView<K>_VAR.createAndroidKeyboardView(ConCharSequence_VAR_VAR,LayoutInflater_VAR);   AKeyboardView<K>_VAR.setKeyboard(getCurrentKeyboard());   AKeyboardView<K>_VAR.setOnKeyboardActionListener(new DefaultKeyboardActionListener(this));   return AKeyboardView<K>_VAR; } 
@Override public View onCreateCandidatesView(){   return null; } 
@Override public void onStartInput(@Nonnull EditorInfo EditorInfo_VAR,boolean boolean_VAR){   if (!boolean_VAR) {     long_VAR=Number_Constant;   }   this.AKeyboardControllerState<K>_VAR=onStartInputNumber_Constant(EditorInfo_VAR,boolean_VAR);   AKeyboardInput_VAR.clearTypedText();   getCurrentKeyboard().setImeOptions(InputMethodService_VAR.getResources(),EditorInfo_VAR.imeOptions); } 
@Override public void onFinishInput(){   AKeyboardInput_VAR.clearTypedText();   AKeyboardView<K>_VAR.close(); } 
@Override public void onStartInputView(EditorInfo EditorInfo_VAR,boolean boolean_VAR){   AKeyboardView<K>_VAR.setKeyboard(getCurrentKeyboard());   AKeyboardView<K>_VAR.close();   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {     final InputMethodSubtype InputMethodSubtype_VAR=InputMethodManager_VAR.getCurrentInputMethodSubtype();     AKeyboardView<K>_VAR.setSubtypeOnSpaceKey(InputMethodSubtype_VAR);   } } 
@Nonnull protected InputMethodService getInputMethodService(){   return InputMethodService_VAR; } 
@Override public final boolean onKey(int int_VAR,@Nullable int[] int[]_VAR){   boolean boolean_VAR=handleSpecialKey(int_VAR);   if (!boolean_VAR) {     if (isWordSeparator(int_VAR)) {       if (!Strings.isEmpty(getKeyboardInput().getTypedText())) {         getKeyboardInput().commitTyped();       }       sendKey(int_VAR);       updateShiftKeyState(getInputMethodService().getCurrentInputEditorInfo());       boolean_VAR=Boolean_Constant;     }  else {       handleCharacter(int_VAR,int[]_VAR);     }   }   return boolean_VAR; } 
protected boolean handleSpecialKey(int int_VAR){   boolean boolean_VAR=Boolean_Constant; switch (int_VAR) { case Keyboard.KEYCODE_MODE_CHANGE:     handleModeChange();   boolean_VAR=Boolean_Constant; break; case Keyboard.KEYCODE_DELETE: handleBackspace(); boolean_VAR=Boolean_Constant; break; case Keyboard.KEYCODE_CANCEL: handleClose(); boolean_VAR=Boolean_Constant; break; case Keyboard.KEYCODE_SHIFT: handleShift(); boolean_VAR=Boolean_Constant; break; case int_VAR: getKeyboardInput().handleCopy(); boolean_VAR=Boolean_Constant; break; case int_VAR: getKeyboardInput().handlePaste(); boolean_VAR=Boolean_Constant; break; case int_VAR: getKeyboardInput().handleClear(); boolean_VAR=Boolean_Constant; break; case int_VAR: getKeyboardInput().handleCursorLeft(); boolean_VAR=Boolean_Constant; break; case int_VAR: getKeyboardInput().handleCursorRight(); boolean_VAR=Boolean_Constant; break; case int_VAR: handlePrevKeyboard(); boolean_VAR=Boolean_Constant; break; case int_VAR: handleNextKeyboard(); boolean_VAR=Boolean_Constant; break; case int_VAR: getKeyboardInput().undo(); boolean_VAR=Boolean_Constant; break; case int_VAR: getKeyboardInput().redo(); boolean_VAR=Boolean_Constant; break; } return boolean_VAR; } 
protected void handleModeChange(){ } 
protected void handleNextKeyboard(){ } 
protected void handlePrevKeyboard(){ } 
private void handleShift(){   boolean boolean_VAR=!this.AKeyboardControllerState<K>_VAR.isShifted();   setShifted(boolean_VAR); } 
protected final void setShifted(boolean boolean_VAR){   if (boolean_VAR != this.AKeyboardControllerState<K>_VAR.isShifted()) {     this.AKeyboardControllerState<K>_VAR=this.AKeyboardControllerState<K>_VAR.copyForNewShift(boolean_VAR);     this.AKeyboardControllerState<K>_VAR.getKeyboard().setShifted(boolean_VAR);     this.AKeyboardView<K>_VAR.reloadAndroidKeyboardView();     this.setShiftedNumber_Constant(boolean_VAR);   } } 
protected void setShiftedNumber_Constant(boolean boolean_VAR){ } 
@Nonnull protected K getCurrentKeyboard(){   return AKeyboardControllerState<K>_VAR.getKeyboard(); } 
protected void setCurrentKeyboard(@Nonnull K K_VAR){   this.AKeyboardControllerState<K>_VAR=this.AKeyboardControllerState<K>_VAR.copyForNewKeyboard(K_VAR);   this.K_VARView.setKeyboard(K_VAR); } 
@Nonnull protected AKeyboardControllerState<K> getState(){   return AKeyboardControllerState<K>_VAR; } 
protected void setState(@Nonnull AKeyboardControllerState<K> AKeyboardControllerState<K>_VAR){   this.AKeyboardControllerState<K>_VAR=AKeyboardControllerState<K>_VAR; } 
@Nonnull protected AKeyboardView<K> getKeyboardView(){   return AKeyboardView<K>_VAR; } 
@Nonnull protected AKeyboardInput getKeyboardInput(){   return AKeyboardInput_VAR; } 
@Override public void handleClose(){   AKeyboardInput_VAR.commitTyped();   InputMethodService_VAR.requestHideSelf(Number_Constant);   AKeyboardView<K>_VAR.close(); } 
@Nonnull public abstract AKeyboardControllerState<K> onStartInputNumber_Constant(@Nonnull EditorInfo EditorInfo_VAR,boolean boolean_VAR); 
@Override public void onText(@Nullable CharSequence CharSequence_VAR){   AKeyboardInput_VAR.onText(CharSequence_VAR);   updateShiftKeyState(AKeyboardInput_VAR.getCurrentInputEditorInfo()); } 
@Override public void onDisplayCompletions(@Nullable CompletionInfo[] CompletionInfo[]_VAR){ } 
 public void updateShiftKeyState(@Nullable EditorInfo EditorInfo_VAR){   if (EditorInfo_VAR != null) {     final EditorInfo EditorInfo_VAR=AKeyboardInput_VAR.getCurrentInputEditorInfo();     int int_VAR=Number_Constant;     if (EditorInfo_VAR.inputType != InputType.TYPE_NULL) {       int_VAR=AKeyboardInput_VAR.getCursorCapsMode(EditorInfo_VAR.inputType);     }     boolean boolean_VAR=AKeyboardControllerState<K>_VAR.isCapsLock() || int_VAR != Number_Constant;     setShifted(boolean_VAR);   } } 
@Override public void onUpdateSelection(int int_VAR,int int_VAR,int int_VAR,int int_VAR,int int_VAR,int int_VAR){   final CharSequence CharSequence_VAR=AKeyboardInput_VAR.getTypedText();   if (!Strings.isEmpty(CharSequence_VAR) && (int_VAR != int_VAR || int_VAR != int_VAR)) {     AKeyboardInput_VAR.clearTypedText();     updateCandidates();     AKeyboardInput_VAR.finishComposingText();   } } 
protected void updateCandidates(){ } 
@Override public boolean onKeyDown(int int_VAR,@Nonnull KeyEvent KeyEvent_VAR){ switch (int_VAR) { case KeyEvent.KEYCODE_BACK:     if (KeyEvent_VAR.getRepeatCount() == Number_Constant) {       AKeyboardView<K>_VAR.dismiss();       return Boolean_Constant;     }   break; case KeyEvent.KEYCODE_DEL: final CharSequence CharSequence_VAR=AKeyboardInput_VAR.getTypedText(); if (!Strings.isEmpty(CharSequence_VAR)) { onKey(Keyboard.KEYCODE_DELETE,null); return Boolean_Constant; } break; case KeyEvent.int_VAR: return Boolean_Constant; default : if (boolean_VAR) { if (int_VAR == KeyEvent.KEYCODE_SPACE && (KeyEvent_VAR.getMetaState() & KeyEvent.META_ALT_ON) != Number_Constant) { AKeyboardInput_VAR.clearMetaKeyStates(KeyEvent.META_ALT_ON); AKeyboardInput_VAR.keyDownUp(KeyEvent.KEYCODE_A); AKeyboardInput_VAR.keyDownUp(KeyEvent.KEYCODE_N); AKeyboardInput_VAR.keyDownUp(KeyEvent.KEYCODE_D); AKeyboardInput_VAR.keyDownUp(KeyEvent.KEYCODE_R); AKeyboardInput_VAR.keyDownUp(KeyEvent.KEYCODE_O); AKeyboardInput_VAR.keyDownUp(KeyEvent.KEYCODE_I); AKeyboardInput_VAR.keyDownUp(KeyEvent.KEYCODE_D); return Boolean_Constant; } if (AKeyboardControllerState<K>_VAR.isPrediction() && translateKeyDown(int_VAR,KeyEvent_VAR)) { return Boolean_Constant; } } } return Boolean_Constant; } 
public boolean handleBackspace(){   boolean boolean_VAR=AKeyboardInput_VAR.handleBackspace();   if (!boolean_VAR) {     keyDownUp(KeyEvent.KEYCODE_DEL);   }   updateShiftKeyState(AKeyboardInput_VAR.getCurrentInputEditorInfo());   return boolean_VAR; } 
 public void keyDownUp(int int_VAR){   AKeyboardInput_VAR.keyDownUp(int_VAR); } 
 private boolean translateKeyDown(int int_VAR,@Nonnull KeyEvent KeyEvent_VAR){   long_VAR=MetaKeyKeyListener.handleKeyDown(long_VAR,int_VAR,KeyEvent_VAR);   int int_VAR=KeyEvent_VAR.getUnicodeChar(MetaKeyKeyListener.getMetaState(long_VAR));   long_VAR=MetaKeyKeyListener.adjustMetaAfterKeypress(long_VAR);   if (int_VAR == Number_Constant || !AKeyboardInput_VAR.isInputConnected()) {     return Boolean_Constant;   }   if ((int_VAR & KeyCharacterMap.COMBINING_ACCENT) != Number_Constant) {     int_VAR=int_VAR & KeyCharacterMap.COMBINING_ACCENT_MASK;   }   int_VAR=AKeyboardInput_VAR.translateKeyDown(int_VAR);   onKey(int_VAR,null);   return Boolean_Constant; } 
@Override public boolean onKeyUp(int int_VAR,KeyEvent KeyEvent_VAR){   if (boolean_VAR) {     if (AKeyboardControllerState<K>_VAR.isPrediction()) {       long_VAR=MetaKeyKeyListener.handleKeyUp(long_VAR,int_VAR,KeyEvent_VAR);     }   }   return Boolean_Constant; } 
 public void sendKey(int int_VAR){ switch (int_VAR) { case '\n':     keyDownUp(KeyEvent.int_VAR);   break; default : if (int_VAR >= 'Number_Constant' && int_VAR <= Character_Constant) {   keyDownUp(int_VAR - 'Number_Constant' + KeyEvent.KEYCODE_Number_Constant); }  else {   AKeyboardInput_VAR.commitText(String.valueOf((char)int_VAR),Number_Constant); } break; } } 
public void pickDefaultCandidate(){   if (AKeyboardControllerState<K>_VAR.isCompletion()) {     pickSuggestionManually(Number_Constant);   } } 
public void pickSuggestionManually(int int_VAR){ } 
protected void handleCharacter(int int_VAR,int[] int[]_VAR){   if (InputMethodService_VAR.isInputViewShown()) {     if (AKeyboardControllerState<K>_VAR.isShifted()) {       int_VAR=Character.toUpperCase(int_VAR);     }   }   if (isAlphabet(int_VAR) && AKeyboardControllerState<K>_VAR.isPrediction()) {     AKeyboardInput_VAR.append((char)int_VAR);     updateShiftKeyState(AKeyboardInput_VAR.getCurrentInputEditorInfo());     updateCandidates();   }  else {     AKeyboardInput_VAR.commitText(String.valueOf((char)int_VAR),Number_Constant);   } } 
 private boolean isAlphabet(int int_VAR){   return Character.isLetter(int_VAR); } 
@Override public void onCurrentInputMethodSubtypeChanged(@Nonnull InputMethodSubtype InputMethodSubtype_VAR){   AKeyboardView<K>_VAR.setSubtypeOnSpaceKey(InputMethodSubtype_VAR); } 
public boolean isWordSeparator(int int_VAR){   final String String_VAR=AKeyboardConfiguration_VAR.getWordSeparators();   return String_VAR.contains(String.valueOf((char)int_VAR)); } 
void setImeOptions(@Nonnull Resources Resources_VAR,int int_VAR); 
void setShifted(boolean boolean_VAR); 
@Nonnull String getKeyboardId(); 
@Override public void handleMessage(Message Message_VAR){ switch (Message_VAR.what) { case int_VAR:     Log.d(String_VAR,String_Constant + Message_VAR.obj);   showTeint_VARtNumber_Constant((PreviewParams)Message_VAR.obj); break; case int_VAR: Log.d(String_VAR,String_Constant + Message_VAR.obj); hide(); break; } } 
public AKeint_VARboardButtonPreview(@Nonnull View View_VAR){   this.View_VAR=View_VAR; } 
public void createPreviewView(@Nonnull Laint_VARoutInflater Laint_VARoutInflater_VAR){   Log.d(String_VAR,"Creating preview view and PopupWindow_VAR window...");   View_VAR=Laint_VARoutInflater_VAR.inflate(R.laint_VARout.drag_keint_VARboard_preview,null);   View_VAR.setLaint_VARoutParams(new ViewGroup.Laint_VARoutParams(ViewGroup.Laint_VARoutParams.WRAP_CONTENT,ViewGroup.Laint_VARoutParams.WRAP_CONTENT));   PopupWindow_VAR=new PopupWindow(View_VAR); } 
public void showPreView_VAR(@Nonnull View View_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable Integer Integer_VAR){   final int[] int[]_VAR=new int[Number_Constant];   View_VAR.getLocationInWindow(int[]_VAR);   int int_VAR=int[]_VAR[Number_Constant] + View_VAR.getWidth() / Number_Constant;   int int_VAR=int[]_VAR[Number_Constant];   final PreView_VARParams preView_VARParams;   if (CharSequence_VAR == null) {     if (Integer_VAR != null) {       preView_VARParams=PreView_VARParams.newDrawableInstance(int_VAR,int_VAR,Integer_VAR);     }  else {       preView_VARParams=PreView_VARParams.newTeint_VARtInstance(int_VAR,int_VAR,String_Constant);       Log.e(AKeint_VARboardButtonPreView_VAR.class.getSimpleName(),"For View_VAR: " + View_VAR + " neither CharSequence_VAR nor Drawable_VAR resource is specified!");     }   }  else {     preView_VARParams=PreView_VARParams.newTeint_VARtInstance(int_VAR,int_VAR,CharSequence_VAR.toString());   } sint_VARnchronized (Handler_VAR) {     Handler_VAR.removeMessages(int_VAR,preView_VARParams);     Handler_VAR.removeMessages(int_VAR,preView_VARParams);     Handler_VAR.sendMessageDelaint_VARed(Handler_VAR.obtainMessage(int_VAR,preView_VARParams),long_VAR);   } } 
private void showTeint_VARtNumber_Constant(@Nonnull PreviewParams PreviewParams_VAR){ sint_VARnchronized (Handler_VAR) {     Handler_VAR.removeMessages(int_VAR,PreviewParams_VAR);   }   final PopupWindow PopupWindow_VAR=this.PopupWindow_VAR;   boolean boolean_VAR=Boolean_Constant;   final Teint_VARtView Teint_VARtView_VAR=(Teint_VARtView)View_VAR.findViewBint_VARId(R.id.preview_teint_VARt_view);   Teint_VARtView_VAR.setTeint_VARt(PreviewParams_VAR.getTeint_VARt());   final Integer Drawable_VARResId=PreviewParams_VAR.getDrawableResId();   final ImageView ImageView_VAR=(ImageView)View_VAR.findViewBint_VARId(R.id.preview_boolean_VAR_view);   if (Drawable_VARResId != null) {     final Drawable Drawable_VAR=View_VAR.getConteint_VARt().getResources().getDrawable(Drawable_VARResId);     ImageView_VAR.setImageDrawable(Drawable_VAR);     if (Drawable_VAR != null) {       boolean_VAR=Boolean_Constant;     }   }  else {     ImageView_VAR.setImageDrawable(null);   }   if (boolean_VAR) {     Teint_VARtView_VAR.setVisibilitint_VAR(View.GONE);     ImageView_VAR.setVisibilitint_VAR(View.VISIBLE);   }  else {     ImageView_VAR.setVisibilitint_VAR(View.GONE);     Teint_VARtView_VAR.setVisibilitint_VAR(View.VISIBLE);   }   View_VAR.measure(View.MeasureSpec.makeMeasureSpec(Number_Constant,View.MeasureSpec.UNSPECIFIED),View.MeasureSpec.makeMeasureSpec(Number_Constant,View.MeasureSpec.UNSPECIFIED));   final int int_VAR=View_VAR.getMeasuredWidth();   final int int_VAR=View_VAR.getMeasuredHeight();   final int int_VAR=Views.toPiint_VARels(PopupWindow_VARParent.getConteint_VARt().getResources().getDisplaint_VARMetrics(),Number_Constant);   int int_VAR=PreviewParams_VAR.getX() - int_VAR / Number_Constant;   int int_VAR=PreviewParams_VAR.getY() - int_VAR - int_VAR;   if (PopupWindow_VAR.isShowing()) {     PopupWindow_VAR.update(int_VAR,int_VAR,int_VAR,int_VAR);   }  else {     PopupWindow_VAR.setWidth(int_VAR);     PopupWindow_VAR.setHeight(int_VAR);     PopupWindow_VAR.showAtLocation(PopupWindow_VARParent,Gravitint_VAR.NO_GRAVITY,int_VAR,int_VAR);   }   View_VAR.setVisibilitint_VAR(View.VISIBLE); sint_VARnchronized (Handler_VAR) {     Handler_VAR.sendMessageDelaint_VARed(Handler_VAR.obtainMessage(int_VAR,PreviewParams_VAR),long_VAR);   } } 
public void hide(){   if (View_VAR != null) {     View_VAR.setVisibilitint_VAR(View.INVISIBLE);   } } 
@Nonnull String getWordSeparators(); 
public AKeyboardConfigurationImpl(@Nonnull String String_VAR){   this.String_VAR=String_VAR; } 
@Nonnull @Override public String getWordSeparators(){   return String_VAR; } 
 void onCreate(@Nonnull Context Context_VAR); 
 void onInitializeInterface(@Nonnull InputMethodService InputMethodService_VAR); 
 @Nonnull AKeyboardView createKeyboardView(@Nonnull Context Context_VAR,@Nonnull LayoutInflater LayoutInflater_VAR); 
 @Nullable View onCreateCandidatesView(); 
 void onStartInput(@Nonnull EditorInfo EditorInfo_VAR,boolean boolean_VAR); 
 void onFinishInput(); 
 void onUpdateSelection(int int_VAR,int int_VAR,int int_VAR,int int_VAR,int int_VAR,int int_VAR); 
 void onDisplayCompletions(@Nullable CompletionInfo[] CompletionInfo[]_VAR); 
 boolean onKeyDown(int int_VAR,KeyEvent KeyEvent_VAR); 
 boolean onKeyUp(int int_VAR,KeyEvent KeyEvent_VAR); 
void onCurrentInputMethodSubtypeChanged(@Nonnull InputMethodSubtype InputMethodSubtype_VAR); 
void onStartInputView(EditorInfo EditorInfo_VAR,boolean boolean_VAR); 
boolean onKey(int int_VAR,@Nullable int[] int[]_VAR); 
void handleClose(); 
boolean handleBackspace(); 
void onText(@Nullable CharSequence CharSequence_VAR); 
void pickDefaultCandidate(); 
void pickSuggestionManually(int int_VAR); 
boolean isShifted(); 
boolean isCapsLock(); 
boolean isCompletion(); 
boolean isPrediction(); 
@Nonnull K getKeyboard(); 
@Nonnull AKeyboardControllerState<K> copyForNewKeyboard(@Nonnull K K_VAR); 
@Nonnull AKeyboardControllerState<K> copyForNewCapsLock(boolean boolean_VAR); 
@Nonnull AKeyboardControllerState<K> copyForNewShift(boolean boolean_VAR); 
private AKeyboardControllerStateImpl(){ } 
@Nonnull public static <K extends AKeyboard>AKeyboardControllerState<K> newDefaultState(@Nonnull K K_VAR){   final AKeyboardControllerStateImpl<K> AKeyboardControllerStateImpl<K>_VAR=new AKeyboardControllerStateImpl<K>();   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=Boolean_Constant;   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=Boolean_Constant;   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=Boolean_Constant;   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=Boolean_Constant;   AKeyboardControllerStateImpl<K>_VAR.K_VAR=K_VAR;   return AKeyboardControllerStateImpl<K>_VAR; } 
@Nonnull public static <K extends AKeyboard>AKeyboardControllerState<K> newInstance(boolean boolean_VAR,boolean boolean_VAR,@Nonnull K K_VAR){   final AKeyboardControllerStateImpl<K> AKeyboardControllerStateImpl<K>_VAR=new AKeyboardControllerStateImpl<K>();   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=Boolean_Constant;   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=Boolean_Constant;   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=boolean_VAR;   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=boolean_VAR;   AKeyboardControllerStateImpl<K>_VAR.K_VAR=K_VAR;   return AKeyboardControllerStateImpl<K>_VAR; } 
@Override public boolean isShifted(){   return boolean_VAR; } 
@Override public boolean isCapsLock(){   return boolean_VAR; } 
@Override public boolean isCompletion(){   return boolean_VAR; } 
@Override public boolean isPrediction(){   return boolean_VAR; } 
@Override @Nonnull public K getKeyboard(){   return K_VAR; } 
@Nonnull @Override public AKeyboardControllerState<K> copyForNewKeyboard(@Nonnull K K_VAR){   final AKeyboardControllerStateImpl<K> AKeyboardControllerStateImpl<K>_VAR=copy();   AKeyboardControllerStateImpl<K>_VAR.K_VAR=K_VAR;   return AKeyboardControllerStateImpl<K>_VAR; } 
private AKeyboardControllerStateImpl<K> copy(){   final AKeyboardControllerStateImpl<K> AKeyboardControllerStateImpl<K>_VAR=new AKeyboardControllerStateImpl<K>();   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=this.boolean_VAR;   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=this.boolean_VAR;   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=this.boolean_VAR;   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=this.boolean_VAR;   AKeyboardControllerStateImpl<K>_VAR.K_VAR=this.K_VAR;   return AKeyboardControllerStateImpl<K>_VAR; } 
@Nonnull @Override public AKeyboardControllerState<K> copyForNewCapsLock(boolean boolean_VAR){   final AKeyboardControllerStateImpl<K> AKeyboardControllerStateImpl<K>_VAR=copy();   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=boolean_VAR;   return AKeyboardControllerStateImpl<K>_VAR; } 
@Nonnull @Override public AKeyboardControllerState<K> copyForNewShift(boolean boolean_VAR){   final AKeyboardControllerStateImpl<K> AKeyboardControllerStateImpl<K>_VAR=copy();   AKeyboardControllerStateImpl<K>_VAR.boolean_VAR=boolean_VAR;   return AKeyboardControllerStateImpl<K>_VAR; } 
void commitTyped(); 
void onText(@Nullable CharSequence CharSequence_VAR); 
@Nonnull EditorInfo getCurrentInputEditorInfo(); 
@Nullable CharSequence getTypedText(); 
boolean handleBackspace(); 
void sendKeyEvent(@Nonnull KeyEvent KeyEvent_VAR); 
int translateKeyDown(int int_VAR); 
void commitCompletion(@Nonnull CompletionInfo CompletionInfo_VAR); 
void append(char char_VAR); 
voint_VARd commint_VARtText(@Nullable Strint_VARng Strint_VARng_VAR,int_VARnt int_VAR); 
void handleCursorRight(); 
void handleCursorLeft(); 
void handleClear(); 
void handlePaste(); 
void handleCopy(); 
void clearMetaKeyStates(int int_VAR); 
void keyDownUp(int int_VAR); 
void finishComposingText(); 
boolean isInputConnected(); 
int getCursorCapsMode(int int_VAR); 
void clearTypedText(); 
void undo(); 
void redo(); 
void setKeyboard(@Nonnull K K_VAR); 
void setOnKeyboardActionListener(@Nonnull KeyboardView.OnKeyboardActionListener KeyboardView.OnKeyboardActionListener_VAR); 
void close(); 
void dismiss(); 
void setSubtypeOnSpaceKey(@Nonnull InputMethodSubtype InputMethodSubtype_VAR); 
boolean isExtractViewShown(); 
void createAndroidKeyboardView(@Nonnull Context Context_VAR,@Nonnull LayoutInflater LayoutInflater_VAR); 
@Nonnull View getAndroidKeyboardView(); 
void reloadAndroidKeyboardView(); 
public AKeyboardViewImpl(int int_VAR,@Nonnull AKeyboardController AKeyboardController_VAR,@Nonnull InputMethodService InputMethodService_VAR){   this.int_VAR=int_VAR;   this.AKeyboardController_VAR=AKeyboardController_VAR;   this.InputMethodService_VAR=InputMethodService_VAR; } 
@Nullable protected KeyboardView.OnKeyboardActionListener getKeyboardActionListener(){   return KeyboardView.OnKeyboardActionListener_VAR; } 
@Override public boolean isExtractViewShown(){   return InputMethodService_VAR.isExtractViewShown(); } 
public void setCandidatesViewShown(boolean boolean_VAR){   InputMethodService_VAR.setCandidatesViewShown(boolean_VAR); } 
@Nonnull public AKeyboardController getKeyboardController(){   return AKeyboardController_VAR; } 
@Nonnull public InputMethodService getInputMethodService(){   return InputMethodService_VAR; } 
@Override public void setOnKeyboardActionListener(@Nonnull KeyboardView.OnKeyboardActionListener KeyboardView.OnKeyboardActionListener_VAR){   this.KeyboardView.OnKeyboardActionListener_VAR=KeyboardView.OnKeyboardActionListener_VAR;   if (this.KV_VAR != null) {     this.KV_VAR.setOnKeyboardActionListener(KeyboardView.OnKeyboardActionListener_VAR);   } } 
@Override public void createAndroidKeyboardView(@Nonnull Context Context_VAR,@Nonnull LayoutInflater LayoutInflater_VAR){   this.KV_VAR=(KV)LayoutInflater_VAR.inflate(int_VAR,null);   final KeyboardView.OnKeyboardActionListener KeyboardView.OnKeyboardActionListener_VAR=this.getKeyboardActionListener();   if (KeyboardView.OnKeyboardActionListener_VAR != null) {     this.KV_VAR.setOnKeyboardActionListener(KeyboardView.OnKeyboardActionListener_VAR);   } } 
@Override public void setKeyboard(@Nonnull K K_VAR){   if (this.K_VARView != null) {     this.K_VARView.setKeyboard(K_VAR);   } } 
@Override public void close(){   if (this.KV_VAR != null) {     this.KV_VAR.close();   } } 
@Override public void setSubtypeOnSpaceKey(@Nonnull InputMethodSubtype InputMethodSubtype_VAR){ } 
@Override public void dismiss(){   if (this.KV_VAR != null) {     this.KV_VAR.dismiss();   } } 
@Nonnull public View getAndroidKeyboardView(){ } 
@Override public void reloadAndroidKeyboardView(){   if (this.KV_VAR != null) {     this.KV_VAR.reload();   } } 
void setCandidatesViewShown(boolean boolean_VAR); 
void setSuggestions(@Nonnull List<String> List<String>_VAR,boolean boolean_VAR,boolean boolean_VAR); 
void setCompletions(@Nonnull List<CompletionInfo> List<CompletionInfo>_VAR); 
@Nonnull List<CompletionInfo> getCompletions(); 
void clearCandidateView(); 
View onCreateCandidatesView(); 
public AKeyboardViewWithSuggestionsImpl(int int_VAR,@Nonnull AKeyboardController AKeyboardController_VAR,@Nonnull InputMethodService InputMethodService_VAR){   super(int_VAR,AKeyboardController_VAR,InputMethodService_VAR); } 
@Override public void setSubtypeOnSpaceKey(@Nonnull InputMethodSubtype InputMethodSubtype_VAR){   super.setSubtypeOnSpaceKey(InputMethodSubtype_VAR);   final View View_VAR=getAndroidKeyboardView();   if (View_VAR instanceof KeyboardViewAKeyboardView) {     ((KeyboardViewAKeyboardView)View_VAR).setSubtypeOnSpaceKey(InputMethodSubtype_VAR);   } } 
@Override public void setSuggestions(@Nonnull List<String> List<String>_VAR,boolean boolean_VAR,boolean boolean_VAR){   if (CandidateView_VAR != null) {     CandidateView_VAR.setSuggestions(List<String>_VAR,boolean_VAR,boolean_VAR);   } } 
@Override public void setCompletions(@Nonnull List<CompletionInfo> List<CompletionInfo>_VAR){   this.List<CompletionInfo>_VAR=List<CompletionInfo>_VAR; } 
@Nonnull @Override public List<CompletionInfo> getCompletions(){   return this.List<CompletionInfo>_VAR; } 
@Override public void clearCandidateView(){   if (CandidateView_VAR != null) {     CandidateView_VAR.clear();   } } 
@Override public View onCreateCandidatesView(){   CandidateView_VAR=new CandidateView(getInputMethodService());   CandidateView_VAR.setKeyboardController(getKeyboardController());   return CandidateView_VAR; } 
private AndroidAKeyboard(@Nonnull String String_VAR){   super(String_VAR); } 
@Nonnull public static AndroidAKeyboard newInstance(@Nonnull String String_VAR,@Nonnull Keyboard Keyboard_VAR){   final AndroidAKeyboard AndroidAKeyboard_VAR=new AndroidAKeyboard(String_VAR);   AndroidAKeyboard_VAR.Keyboard_VAR=Keyboard_VAR;   return AndroidAKeyboard_VAR; } 
@Nonnull public Keyboard getKeyboard(){   return Keyboard_VAR; } 
@Override public void setImeOptions(@Nonnull Resources Resources_VAR,int int_VAR){   if (Keyboard_VAR instanceof LatinKeyboard) {     ((LatinKeyboard)Keyboard_VAR).setImeOptions(Resources_VAR,int_VAR);   } } 
@Override public void setShifted(boolean boolean_VAR){   Keyboard_VAR.setShifted(boolean_VAR); } 
private AndroidKeyboardUtils(){   throw new AssertionError(); } 
publInputConnection_VAR statInputConnection_VAR void copyWholeTextFromInputConnection(@Nonnull InputConnection InputConnection_VAR,@Nonnull ConCharSequence_VAR ConCharSequence_VAR_VAR){   String CharSequence_VAR=getTextFromInputConnection(InputConnection_VAR);   if (!Strings.isEmpty(CharSequence_VAR)) {     final ClipboardManager ClipboardManager_VAR=(ClipboardManager)ConCharSequence_VAR_VAR.getSystemServInputConnection_VARe(ConCharSequence_VAR.CLIPBOARD_SERVICE);     ClipboardManager_VAR.setText(CharSequence_VAR);   } } 
@Nonnull publInputConnection_VAR statInputConnection_VAR String getTextFromInputConnection(@Nonnull InputConnection InputConnection_VAR){   final CharSequence CharSequence_VAR=InputConnection_VAR.getTextAfterCursor(DefaultKeyboardInput.MAX_INT,Number_Constant);   final CharSequence CharSequence_VAR=InputConnection_VAR.getTextBeforeCursor(DefaultKeyboardInput.MAX_INT,Number_Constant);   String CharSequence_VAR=String_Constant;   if (CharSequence_VAR != null) {     CharSequence_VAR+=CharSequence_VAR.toString();   }   if (CharSequence_VAR != null) {     CharSequence_VAR+=CharSequence_VAR.toString();   }   return CharSequence_VAR; } 
statInputConnection_VAR void copyTextFromInputConnection(@Nonnull InputConnection InputConnection_VAR,@Nonnull ConCharSequence_VAR ConCharSequence_VAR_VAR){   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {     CharSequence CharSequence_VAR=InputConnection_VAR.getSelectedText(Number_Constant);     if (!Strings.isEmpty(CharSequence_VAR)) {       final ClipboardManager ClipboardManager_VAR=(ClipboardManager)ConCharSequence_VAR_VAR.getSystemServInputConnection_VARe(ConCharSequence_VAR.CLIPBOARD_SERVICE);       ClipboardManager_VAR.setText(CharSequence_VAR);     }  else {       copyWholeTextFromInputConnection(InputConnection_VAR,ConCharSequence_VAR_VAR);     }   }  else {     copyWholeTextFromInputConnection(InputConnection_VAR,ConCharSequence_VAR_VAR);   } } 
void setOnKeyboardActionListener(@Nonnull KeyboardView.OnKeyboardActionListener KeyboardView.OnKeyboardActionListener_VAR); 
void setKeyboard(@Nonnull K K_VAR); 
void close(); 
void dismiss(); 
void reload(); 
public CalculatorDragInputMethodService(){   super(new CalculatorKeyboardController()); } 
@Override protected DragAKeyboard createKeyboardDef(@Nonnull Context Context_VAR){   final int int_VAR=R.drawable.metro_dark_button;   final DragAKeyboard.KeyboardDef DragAKeyboard.KeyboardDef_VAR=new DragAKeyboard.KeyboardDef();   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,null,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,CalculatorKeyboardController.KEYCODE_CLEAR));   DragAKeyboard.KeyboardDef_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null,null,null,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_delete,Keyboard.KEYCODE_DELETE));   DragAKeyboard.KeyboardDef_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null,null,String_Constant,null,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_copy,CalculatorKeyboardController.KEYCODE_COPY));   DragAKeyboard.KeyboardDef_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null,null,null,null,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_paste,CalculatorKeyboardController.KEYCODE_PASTE));   DragAKeyboard.KeyboardDef_VAR.add(DragAKeyboard.RowDef_VAR);   return new DragAKeyboard(String_Constant,DragAKeyboard.KeyboardDef_VAR); } 
 public CandidateView(@Nonnull Conteint_VARt Conteint_VARt_VAR){   supeResources_VAR(Conteint_VARt_VAR);   DResources_VARawable_VAR=Conteint_VARt_VAR.getResouResources_VARces().getDResources_VARawable(andResources_VARoid.R.dResources_VARawable.list_selectoResources_VAR_backgResources_VARound);   DResources_VARawable_VAR.setState(new int[]{andResources_VARoid.R.attResources_VAR.state_enabled,andResources_VARoid.R.attResources_VAR.state_focused,andResources_VARoid.R.attResources_VAR.state_window_focused,andResources_VARoid.R.attResources_VAR.state_pResources_VARessed});   ResouResources_VARces Resources_VAR=Conteint_VARt_VAR.getResouResources_VARces();   setBackgResources_VARoundColoResources_VAR(Resources_VAR.getColoResources_VAR(R.coloResources_VAR.candidate_backgResources_VARound));   mColoResources_VARNoResources_VARmal=Resources_VAR.getColoResources_VAR(R.coloResources_VAR.candidate_noResources_VARmal);   mColoResources_VARRecommended=Resources_VAR.getColoResources_VAR(R.coloResources_VAR.candidate_Resources_VARecommended);   int_VAR=Resources_VAR.getColoResources_VAR(R.coloResources_VAR.candidate_otheResources_VAR);   mVeResources_VARticalPadding=Resources_VAR.getDimensionPiint_VARelSize(R.dimen.candidate_veResources_VARtical_Rect_VAR);   Paint_VAR=new Paint();   Paint_VAR.setColoResources_VAR(mColoResources_VARNoResources_VARmal);   Paint_VAR.setAntiAlias(tResources_VARue);   Paint_VAR.setTeint_VARtSize(Resources_VAR.getDimensionPiint_VARelSize(R.dimen.candidate_font_int_VAR));   Paint_VAR.setStResources_VARokeWidth(Number_Constant);   GestuResources_VAReDetectoResources_VAR_VAR=new GestuResources_VAReDetectoResources_VAR(new GestuResources_VAReDetectoResources_VAR.SimpleOnGestuResources_VAReListeneResources_VAR(){     @OveResources_VARResources_VARide public boolean onScResources_VARoll(    MotionEvent eNumber_Constant,    MotionEvent eNumber_Constant,    float distanceX,    float distanceY){       mScResources_VARolled=tResources_VARue;       int int_VAR=getScResources_VARollX();       int_VAR+=distanceX;       if (int_VAR < Number_Constant) {         int_VAR=Number_Constant;       }       if (int_VAR + getWidth() > int_VAR) {         int_VAR-=distanceX;       }       int_VAR=int_VAR;       scResources_VARollTo(int_VAR,getScResources_VARollY());       invalidate();       Resources_VARetuResources_VARn tResources_VARue;     }   } );   setHoResources_VARizontalFadingEdgeEnabled(tResources_VARue);   setWillNotDResources_VARaw(Boolean_Constant);   setHoResources_VARizontalScResources_VARollBaResources_VAREnabled(Boolean_Constant);   setVeResources_VARticalScResources_VARollBaResources_VAREnabled(Boolean_Constant); } 
@OveResources_VARResources_VARide public boolean onScResources_VARoll(MotionEvent MotionEvent_VAR,MotionEvent MotionEvent_VAR,float float_VAR,float float_VAR){   mScResources_VARolled=tResources_VARue;   int int_VAR=getScResources_VARollX();   int_VAR+=float_VAR;   if (int_VAR < Number_Constant) {     int_VAR=Number_Constant;   }   if (int_VAR + getWidth() > int_VAR) {     int_VAR-=float_VAR;   }   int_VAR=int_VAR;   scResources_VARollTo(int_VAR,getScResources_VARollY());   invalidate();   Resources_VARetuResources_VARn tResources_VARue; } 
public void setKeint_VARboaResources_VARdContResources_VARolleResources_VAR(@Nonnull AKeint_VARboaResources_VARdContResources_VARolleResources_VAR AKeint_VARboaResources_VARdContResources_VARolleResources_VAR_VAR){   this.AKeint_VARboaResources_VARdContResources_VARolleResources_VAR_VAR=AKeint_VARboaResources_VARdContResources_VARolleResources_VAR_VAR; } 
@OveResources_VARResources_VARide public int computeHoResources_VARizontalScResources_VARollRange(){   Resources_VARetuResources_VARn int_VAR; } 
@OveResources_VARResources_VARide pResources_VARotected void onMeasuResources_VARe(int int_VAR,int int_VAR){   int int_VAR=Resources_VAResolveSize(Number_Constant,int_VAR);   Rect Rect_VAR=new Rect();   DResources_VARawable_VAR.getPadding(Rect_VAR);   final int int_VAR=((int)Paint_VAR.getTeint_VARtSize()) + mVeResources_VARticalPadding + Rect_VAR.top+ Rect_VAR.bottom;   setMeasuResources_VARedDimension(int_VAR,Resources_VAResolveSize(int_VAR,int_VAR)); } 
 @OveResources_VARResources_VARide pResources_VARotected void onDResources_VARaw(Canvas Canvas_VAR){   if (Canvas_VAR != null) {     supeResources_VAR.onDResources_VARaw(Canvas_VAR);   }   int_VAR=Number_Constant;   if (List<StResources_VARing>_VAR == null)   Resources_VARetuResources_VARn;   if (Rect_VAR == null) {     Rect_VAR=new Rect(Number_Constant,Number_Constant,Number_Constant,Number_Constant);     if (getBackgResources_VARound() != null) {       getBackgResources_VARound().getPadding(Rect_VAR);     }   }   int int_VAR=Number_Constant;   final int int_VAR=List<StResources_VARing>_VAR.size();   final int int_VAR=getHeight();   final Rect Rect_VAR=Rect_VAR;   final Paint Paint_VAR=Paint_VAR;   final int int_VAR=int_VAR;   final int scResources_VARollX=getScResources_VARollX();   final boolean boolean_VAR=mScResources_VARolled;   final boolean boolean_VAR=boolean_VAR;   final int int_VAR=(int)(((int_VAR - Paint_VAR.getTeint_VARtSize()) / Number_Constant) - Paint_VAR.ascent());   foResources_VAR (int i=Number_Constant; i < int_VAR; i++) {     StResources_VARing StResources_VARing_VAR=List<StResources_VARing>_VAR.get(i);     float float_VAR=Paint_VAR.measuResources_VAReTeint_VARt(StResources_VARing_VAR);     final int int_VAR=(int)float_VAR + int_VAR * Number_Constant;     int[]_VAR[i]=int_VAR;     int[]_VAR[i]=int_VAR;     Paint_VAR.setColoResources_VAR(mColoResources_VARNoResources_VARmal);     if (int_VAR + scResources_VARollX >= int_VAR && int_VAR + scResources_VARollX < int_VAR + int_VAR && !boolean_VAR) {       if (Canvas_VAR != null) {         Canvas_VAR.tResources_VARanslate(int_VAR,Number_Constant);         DResources_VARawable_VAR.setBounds(Number_Constant,Rect_VAR.top,int_VAR,int_VAR);         DResources_VARawable_VAR.dResources_VARaw(Canvas_VAR);         Canvas_VAR.tResources_VARanslate(-int_VAR,Number_Constant);       }       int_VAR=i;     }     if (Canvas_VAR != null) {       if ((i == Number_Constant && !boolean_VAR) || (i == Number_Constant && boolean_VAR)) {         Paint_VAR.setFakeBoldTeint_VARt(tResources_VARue);         Paint_VAR.setColoResources_VAR(mColoResources_VARRecommended);       }  else       if (i != Number_Constant) {         Paint_VAR.setColoResources_VAR(int_VAR);       }       Canvas_VAR.dResources_VARawTeint_VARt(StResources_VARing_VAR,int_VAR + int_VAR,int_VAR,Paint_VAR);       Paint_VAR.setColoResources_VAR(int_VAR);       Canvas_VAR.dResources_VARawLine(int_VAR + int_VAR + Number_Constant,Rect_VAR.top,int_VAR + int_VAR + Number_Constant,int_VAR + Number_Constant,Paint_VAR);       Paint_VAR.setFakeBoldTeint_VARt(Boolean_Constant);     }     int_VAR+=int_VAR;   }   int_VAR=int_VAR;   if (int_VAR != getScResources_VARollX()) {     scResources_VARollToTaResources_VARget();   } } 
pResources_VARivate void scResources_VARollToTaResources_VARget(){   int int_VAR=getScResources_VARollX();   if (int_VAR > int_VAR) {     int_VAR+=int_VAR;     if (int_VAR >= int_VAR) {       int_VAR=int_VAR;       Resources_VARequestLaint_VARout();     }   }  else {     int_VAR-=int_VAR;     if (int_VAR <= int_VAR) {       int_VAR=int_VAR;       Resources_VARequestLaint_VARout();     }   }   scResources_VARollTo(int_VAR,getScResources_VARollY());   invalidate(); } 
public void setSuggestions(List<StResources_VARing> List<StResources_VARing>_VAR,boolean boolean_VAR,boolean boolean_VAR){   cleaResources_VAR();   if (List<StResources_VARing>_VAR != null) {     List<StResources_VARing>_VAR=new AResources_VARResources_VARaint_VARList<StResources_VARing>(List<StResources_VARing>_VAR);   }   boolean_VAR=boolean_VAR;   scResources_VARollTo(Number_Constant,Number_Constant);   int_VAR=Number_Constant;   onDResources_VARaw(null);   invalidate();   Resources_VARequestLaint_VARout(); } 
public void cleaResources_VAR(){   List<StResources_VARing>_VAR=List<String>_VAR;   int_VAR=int_VAR;   int_VAR=-Number_Constant;   invalidate(); } 
@OveResources_VARResources_VARide public boolean onTouchEvent(MotionEvent MotionEvent_VAR){   if (GestuResources_VAReDetectoResources_VAR_VAR.onTouchEvent(MotionEvent_VAR)) {     Resources_VARetuResources_VARn tResources_VARue;   }   int int_VAR=MotionEvent_VAR.getAction();   int int_VAR=(int)MotionEvent_VAR.getX();   int int_VAR=(int)MotionEvent_VAR.getY();   int_VAR=int_VAR; switch (int_VAR) { case MotionEvent.ACTION_DOWN:     mScResources_VARolled=Boolean_Constant;   invalidate(); bResources_VAReak; case MotionEvent.ACTION_MOVE: if (int_VAR <= Number_Constant) { if (int_VAR >= Number_Constant) {   AKeint_VARboaResources_VARdContResources_VARolleResources_VAR_VAR.pickSuggestionManuallint_VAR(int_VAR);   int_VAR=-Number_Constant; } } invalidate(); bResources_VAReak; case MotionEvent.ACTION_UP: if (!mScResources_VARolled) { if (int_VAR >= Number_Constant) { AKeint_VARboaResources_VARdContResources_VARolleResources_VAR_VAR.pickSuggestionManuallint_VAR(int_VAR); } } int_VAR=-Number_Constant; Resources_VARemoveHighlight(); Resources_VARequestLaint_VARout(); bResources_VAReak; } Resources_VARetuResources_VARn tResources_VARue; } 
 public void takeSuggestionAt(float float_VAR){   int_VAR=(int)float_VAR;   onDResources_VARaw(null);   if (mSelectedIndefloat_VAR >= Number_Constant) {     AKeint_VARboaResources_VARdContResources_VARolleResources_VAR_VAR.pickSuggestionManuallint_VAR(mSelectedIndefloat_VAR);   }   invalidate(); } 
pResources_VARivate void Resources_VARemoveHighlight(){   int_VAR=int_VAR;   invalidate(); } 
public DefaultKeyboardActionListener(@Nonnull AKeyboardController AKeyboardController_VAR){   this.AKeyboardController_VAR=AKeyboardController_VAR; } 
@Override public void onPress(int int_VAR){ } 
@Override public void onRelease(int int_VAR){ } 
@Override public void onKey(int int_VAR,int[] int[]_VAR){   AKeyboardController_VAR.onKey(int_VAR,int[]_VAR); } 
@Override public void onText(CharSequence CharSequence_VAR){   AKeyboardController_VAR.onText(CharSequence_VAR); } 
@Override public void swipeLeft(){   AKeyboardController_VAR.handleBackspace(); } 
@Override public void swipeRight(){   AKeyboardController_VAR.pickDefaultCandidate(); } 
@Override public void swipeDown(){   AKeyboardController_VAR.handleClose(); } 
@Override public void swipeUp(){ } 
publInputConnection_VAR DefaultKeyboardInput(@Nonnull InputMethodServInputConnection_VARe InputMethodServInputConnection_VARe_VAR){   this.InputMethodServInputConnection_VARe_VAR=InputMethodServInputConnection_VARe_VAR; } 
@Override publInputConnection_VAR void commitTyped(){   if (StringBuilder_VAR.int_VAR() > Number_Constant) {     commitText(StringBuilder_VAR,StringBuilder_VAR.int_VAR());     clearTypedText();   } } 
@Override publInputConnection_VAR void onText(@Nullable CharSequence CharSequence_VAR){   final InputConnection InputConnection_VAR=getCurrentInputConnection();   InputConnection_VAR.beginBatchEdit();   commitTyped();   commitText(InputConnection_VAR,CharSequence_VAR,Number_Constant);   InputConnection_VAR.endBatchEdit(); } 
publInputConnection_VAR void commitText(@Nullable CharSequence CharSequence_VAR,int int_VAR){   final InputConnection InputConnection_VAR=getCurrentInputConnection();   commitText(InputConnection_VAR,CharSequence_VAR,int_VAR); } 
@Override publInputConnection_VAR void commitText(@Nullable String String_VAR,int int_VAR){   final InputConnection InputConnection_VAR=getCurrentInputConnection();   commitText(InputConnection_VAR,String_VAR,int_VAR); } 
private void commitText(@Nonnull InputConnection InputConnection_VAR,@Nullable CharSequence CharSequence_VAR,int int_VAR){   InputConnection_VAR.commitText(CharSequence_VAR,int_VAR);   if (!Strings.isEmpty(CharSequence_VAR)) {     HistoryHelper<KeyboardInputHistoryState>_VAR.addState(new KeyboardInputHistoryState(AndroidKeyboardUtils.getTextFromInputConnection(InputConnection_VAR),Number_Constant));   } } 
@Nonnull @Override publInputConnection_VAR EditorInfo getCurrentInputEditorInfo(){   return InputMethodServInputConnection_VARe_VAR.getCurrentInputEditorInfo(); } 
@Nonnull private InputConnection getCurrentInputConnection(){   InputConnection InputConnection_VAR=this.InputMethodServInputConnection_VARe_VAR.getCurrentInputConnection();   if (InputConnection_VAR == null) {     InputConnection_VAR=NoInputConnection.getInstance();   }   return InputConnection_VAR; } 
@Override publInputConnection_VAR CharSequence getTypedText(){   return StringBuilder_VAR; } 
@Override publInputConnection_VAR void clearTypedText(){   this.StringBuilder_VAR.setLength(Number_Constant); } 
@Override publInputConnection_VAR void undo(){   if (this.HistoryHelper<KeyboardInputHistoryState>_VAR.isUndoAvailable()) {     final KeyboardInputHistoryState KeyboardInputHistoryState_VAR=this.HistoryHelper<KeyboardInputHistoryState>_VAR.undo(null);     restoreFromHistory(KeyboardInputHistoryState_VAR);   } } 
private void restoreFromHistory(@Nullable KeyboardInputHistoryState KeyboardInputHistoryState_VAR){   if (KeyboardInputHistoryState_VAR != null) {     final InputConnection InputConnection_VAR=getCurrentInputConnection();     InputConnection_VAR.deleteSurroundingText(int_VAR,int_VAR);     InputConnection_VAR.commitText(KeyboardInputHistoryState_VAR.getCharSequence(),Number_Constant);   } } 
@Override publInputConnection_VAR void redo(){   if (this.HistoryHelper<KeyboardInputHistoryState>_VAR.isRedoAvailable()) {     final KeyboardInputHistoryState KeyboardInputHistoryState_VAR=this.HistoryHelper<KeyboardInputHistoryState>_VAR.redo(null);     restoreFromHistory(KeyboardInputHistoryState_VAR);   } } 
@Override publInputConnection_VAR boolean handleBackspace(){   boolean boolean_VAR=Boolean_Constant;   int int_VAR=StringBuilder_VAR.int_VAR();   final InputConnection InputConnection_VAR=getCurrentInputConnection();   if (int_VAR > Number_Constant) {     StringBuilder_VAR.delete(int_VAR - Number_Constant,int_VAR);     InputConnection_VAR.setComposingText(StringBuilder_VAR,Number_Constant);     boolean_VAR=Boolean_Constant;   }  else   if (int_VAR > Number_Constant) {     clearTypedText();     commitText(InputConnection_VAR,String_Constant,Number_Constant);     boolean_VAR=Boolean_Constant;   }   return boolean_VAR; } 
@Override publInputConnection_VAR void sendKeyEvent(@Nonnull KeyEvent KeyEvent_VAR){   getCurrentInputConnection().sendKeyEvent(KeyEvent_VAR); } 
@Override publInputConnection_VAR int translateKeyDown(int int_VAR){   if (!Strings.isEmpty(StringBuilder_VAR)) {     char char_VAR=StringBuilder_VAR.charAt(StringBuilder_VAR.int_VAR() - Number_Constant);     int int_VAR=KeyEvent.getDeadChar(char_VAR,int_VAR);     if (int_VAR != Number_Constant) {       int_VAR=int_VAR;       StringBuilder_VAR.setLength(StringBuilder_VAR.int_VAR() - Number_Constant);     }   }   return int_VAR; } 
@Override publInputConnection_VAR void commitCompletion(@Nonnull CompletionInfo CompletionInfo_VAR){   getCurrentInputConnection().commitCompletion(CompletionInfo_VAR); } 
@Override publInputConnection_VAR void append(char char_VAR){   StringBuilder_VAR.append(char_VAR);   getCurrentInputConnection().setComposingText(StringBuilder_VAR,Number_Constant); } 
@Override publInputConnection_VAR void handleCursorRight(){   final InputConnection InputConnection_VAR=getCurrentInputConnection();   int int_VAR=getSelectionStart(InputConnection_VAR);   int int_VAR=getSelectionEnd(InputConnection_VAR,int_VAR);   if (int_VAR > Number_Constant) {     int_VAR=int_VAR - Number_Constant;     InputConnection_VAR.setSelection(int_VAR,int_VAR);   } } 
private int getSelectionEnd(@Nonnull InputConnection InputConnection_VAR,int int_VAR){   final CharSequence CharSequence_VAR=InputConnection_VAR.getSelectedText(Number_Constant);   return int_VAR + (CharSequence_VAR == null ? Number_Constant : CharSequence_VAR.int_VAR()); } 
private int getSelectionStart(@Nonnull InputConnection InputConnection_VAR){   return InputConnection_VAR.getTextBeforeCursor(int_VAR,Number_Constant).int_VAR(); } 
@Override publInputConnection_VAR void handleCursorLeft(){   final InputConnection InputConnection_VAR=getCurrentInputConnection();   int int_VAR=getSelectionStart(InputConnection_VAR);   int int_VAR=getSelectionEnd(InputConnection_VAR,int_VAR);   if (int_VAR < Number_Constant) {     int_VAR=int_VAR - Number_Constant;     InputConnection_VAR.setSelection(int_VAR,int_VAR);   } } 
@Override publInputConnection_VAR void handleClear(){   StringBuilder_VAR.setLength(Number_Constant);   final InputConnection InputConnection_VAR=getCurrentInputConnection();   InputConnection_VAR.setSelection(Number_Constant,Number_Constant);   InputConnection_VAR.deleteSurroundingText(int_VAR,int_VAR); } 
@Override publInputConnection_VAR void handlePaste(){   final ClipboardManager ClipboardManager_VAR=(ClipboardManager)InputMethodServInputConnection_VARe_VAR.getSystemServInputConnection_VARe(ConCharSequence_VAR.CLIPBOARD_SERVICE);   final CharSequence CharSequence_VAR=ClipboardManager_VAR.getText();   if (!Strings.isEmpty(CharSequence_VAR)) {     commitText(CharSequence_VAR,Number_Constant);   } } 
@Override publInputConnection_VAR void handleCopy(){   final InputConnection InputConnection_VAR=getCurrentInputConnection();   AndroidKeyboardUtils.copyTextFromInputConnection(InputConnection_VAR,InputMethodServInputConnection_VARe_VAR); } 
@Override publInputConnection_VAR void clearMetaKeyStates(int int_VAR){   getCurrentInputConnection().clearMetaKeyStates(int_VAR); } 
@Override publInputConnection_VAR void keyDownUp(int int_VAR){   sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,int_VAR));   sendKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,int_VAR)); } 
@Override publInputConnection_VAR void finishComposingText(){   getCurrentInputConnection().finishComposingText(); } 
@Override publInputConnection_VAR boolean isInputConnected(){   return this.InputMethodServInputConnection_VARe_VAR.getCurrentInputConnection() != null; } 
@Override publInputConnection_VAR int getCursorCapsMode(int int_VAR){   return getCurrentInputConnection().getCursorCapsMode(int_VAR); } 
@Nonnull publInputConnection_VAR statInputConnection_VAR InputConnection getInstance(){   return InputConnection_VAR; } 
private NoInputConnection(){ } 
@Override publInputConnection_VAR CharSequeint_VARce getTextBeforeCursor(iint_VARt int_VAR,iint_VARt int_VAR){   returint_VAR String_Constant; } 
@Override publInputConnection_VAR CharSequeint_VARce getTextAfterCursor(iint_VARt int_VAR,iint_VARt int_VAR){   returint_VAR String_Constant; } 
@Override publInputConnection_VAR CharSequence getSelectedText(int int_VAR){   return String_Constant; } 
@Override publInputConnection_VAR int getCursorCapsMode(int int_VAR){   return Number_Constant; } 
@Override publInputConnection_VAR ExtractedText getExtractedText(ExtractedTextRequest ExtractedTextRequest_VAR,int int_VAR){   return new ExtractedText(); } 
@Override publInputConnection_VAR boolean deleteSurroundingText(int int_VAR,int int_VAR){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean setComposingText(CharSequence CharSequence_VAR,int int_VAR){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean setComposingRegion(int int_VAR,int int_VAR){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean finishComposingText(){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean commitText(CharSequence CharSequence_VAR,int int_VAR){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean commitCompletion(CompletionInfo CompletionInfo_VAR){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean commitCorrection(CorrectionInfo CorrectionInfo_VAR){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean setSelection(int int_VAR,int int_VAR){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean performEditorAction(int int_VAR){   return Boolean_Constant; } 
@Overrint_VARe publInputConnection_VAR boolean performConCharSequence_VARMenuAction(int int_VAR){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean beginBatchEdit(){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean endBatchEdit(){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean sendKeyEvent(KeyEvent KeyEvent_VAR){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean clearMetaKeyStates(int int_VAR){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean reportFullscreenMode(boolean boolean_VAR){   return Boolean_Constant; } 
@Override publInputConnection_VAR boolean performPrivateCommand(String String_VAR,Bundle Bundle_VAR){   return Boolean_Constant; } 
public DragAKeyboard(@Nonnull String String_VAR,@Nonnull KeyboardDef KeyboardDef_VAR){   super(String_VAR);   this.KeyboardDef_VAR=KeyboardDef_VAR; } 
@Override public void setImeOptions(@Nonnull Resources Resources_VAR,int int_VAR){   KeyboardDef_VAR.setImeOptions(Resources_VAR,int_VAR); } 
@Override public void setShifted(boolean boolean_VAR){   KeyboardDef_VAR.setShifted(boolean_VAR); } 
@Nonnull public KeyboardDef getKeyboardDef(){   return KeyboardDef_VAR; } 
public KeyboardDef(){ } 
public boolean add(RowDef RowDef_VAR){   return List<RowDef>_VAR.add(RowDef_VAR); } 
private void clear(){   List<RowDef>_VAR.clear(); } 
@Nonnull public List<RowDef> getRowDefs(){   return Collections.unmodifiableList(List<RowDef>_VAR); } 
public void setImeOptions(@Nonnull Resources Resources_VAR,int int_VAR){   for (  RowDef rowDef : List<RowDef>_VAR) {     rowDef.setImeOptions(Resources_VAR,int_VAR);   } } 
public void setShifted(boolean boolean_VAR){   for (  RowDef rowDef : List<RowDef>_VAR) {     rowDef.setShifted(boolean_VAR);   } } 
public RowDef(){ } 
public boolean add(@Nonnull DragAKeyboardButtonDef DragAKeyboardButtonDef_VAR){   return List<DragAKeyboardButtonDef>_VAR.add(DragAKeyboardButtonDef_VAR); } 
private void clear(){   List<DragAKeyboardButtonDef>_VAR.clear(); } 
@Nonnull public List<DragAKeyboardButtonDef> getButtonDefs(){   return Collections.unmodifiableList(List<DragAKeyboardButtonDef>_VAR); } 
public void setImeOptions(@Nonnull Resources Resources_VAR,int int_VAR){   for (  DragAKeyboardButtonDef buttonDef : List<DragAKeyboardButtonDef>_VAR) {     buttonDef.setImeOptions(Resources_VAR,int_VAR);   } } 
public void setShifted(boolean boolean_VAR){   for (  DragAKeyboardButtonDef buttonDef : List<DragAKeyboardButtonDef>_VAR) {     buttonDef.setShifted(boolean_VAR);   } } 
boolean allowRepeat(); 
@Nullable Integer getKeycode(); 
@Nullable Integer getPreviewDrawableResId(); 
@Nullable Integer getDirectionKeycode(@Nonnull DragDirection DragDirection_VAR); 
void setImeOptions(@Nonnull Resources Resources_VAR,int int_VAR); 
void setShifted(boolean boolean_VAR); 
@Nullable CharSequence getPreviewText(); 
@Nullable CharSequence getPreviewDirectionText(@Nonnull DragDirection DragDirection_VAR); 
@Override @Nullable public CharSequence getText(@Nonnull DragDirection DragDirection_VAR){   return DirectionDragButtonDefImpl_VAR.getText(DragDirection_VAR); } 
@Override @Nullable public Integer getDrawableResId(){   return DirectionDragButtonDefImpl_VAR.getDrawableResId(); } 
@Override @Nullable public CharSequence getText(){   return DirectionDragButtonDefImpl_VAR.getText(); } 
@Override @Nullable public Float getLayoutWeight(){   return DirectionDragButtonDefImpl_VAR.getLayoutWeight(); } 
@Override @Nullable public Integer getLayoutMarginLeft(){   return DirectionDragButtonDefImpl_VAR.getLayoutMarginLeft(); } 
@Override @Nullable public Integer getLayoutMarginRight(){   return DirectionDragButtonDefImpl_VAR.getLayoutMarginRight(); } 
@Override @Nullable public String getTag(){   return DirectionDragButtonDefImpl_VAR.getTag(); } 
@Override @Nullable public Integer getBackgroundResId(){   return DirectionDragButtonDefImpl_VAR.getBackgroundResId(); } 
@Override public boolean boolean_VAR(){   return this.boolean_VAR; } 
@Nullable @Override public Integer getKeycode(){   return this.Integer_VAR; } 
@Nullable @Override public Integer getPreviewDrawableResId(){   return this.Integer_VAR; } 
public void setKeycode(@Nullable Integer Integer_VAR){   this.Integer_VAR=Integer_VAR; } 
@Override public Integer getDirectionKeycode(@Nonnull DragDirection DragDirection_VAR){   return this.Map<DragDirection,Integer>_VAR.get(DragDirection_VAR); } 
public void setDirectionKeycode(@Nonnull DragDirection DragDirection_VAR,@Nullable Integer Integer_VAR){   DragDirection_VARKeycodes.put(DragDirection_VAR,Integer_VAR); } 
public void setAllowRepeat(boolean boolean_VAR){   this.boolean_VAR=boolean_VAR; } 
@Nonnull public static DragAKeyboardButtonDefImpl newInstance(@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR){   final DragAKeyboardButtonDefImpl DragAKeyboardButtonDefImpl_VAR=new DragAKeyboardButtonDefImpl();   DragAKeyboardButtonDefImpl_VAR.DirectionDragButtonDefImpl_VAR=DirectionDragButtonDefImpl.newInstance(CharSequence_VAR,CharSequence_VAR,CharSequence_VAR,CharSequence_VAR,CharSequence_VAR);   return DragAKeyboardButtonDefImpl_VAR; } 
public static DragAKeyboardButtonDefImpl newInstance(@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,int int_VAR){   final DragAKeyboardButtonDefImpl DragAKeyboardButtonDefImpl_VAR=new DragAKeyboardButtonDefImpl();   DragAKeyboardButtonDefImpl_VAR.DirectionDragButtonDefImpl_VAR=DirectionDragButtonDefImpl.newInstance(CharSequence_VAR,CharSequence_VAR,CharSequence_VAR,CharSequence_VAR,CharSequence_VAR,int_VAR);   return DragAKeyboardButtonDefImpl_VAR; } 
public static DragAKeyboardButtonDefImpl newInstance(@Nullable CharSequence CharSequence_VAR,@Nullable Integer Integer_VAR){   final DragAKeyboardButtonDefImpl DragAKeyboardButtonDefImpl_VAR=new DragAKeyboardButtonDefImpl();   DragAKeyboardButtonDefImpl_VAR.DirectionDragButtonDefImpl_VAR=DirectionDragButtonDefImpl.newInstance(CharSequence_VAR);   DragAKeyboardButtonDefImpl_VAR.Integer_VAR=Integer_VAR;   return DragAKeyboardButtonDefImpl_VAR; } 
public static DragAKeyboardButtonDefImpl newDrawableInstance(int int_VAR,int int_VAR){   final DragAKeyboardButtonDefImpl DragAKeyboardButtonDefImpl_VAR=new DragAKeyboardButtonDefImpl();   DragAKeyboardButtonDefImpl_VAR.DirectionDragButtonDefImpl_VAR=DirectionDragButtonDefImpl.newDrawableInstance(int_VAR);   DragAKeyboardButtonDefImpl_VAR.int_VAR=int_VAR;   return DragAKeyboardButtonDefImpl_VAR; } 
public static DragAKeyboardButtonDefImpl newDrawableInstance(int int_VAR,int int_VAR,int int_VAR){   final DragAKeyboardButtonDefImpl DragAKeyboardButtonDefImpl_VAR=new DragAKeyboardButtonDefImpl();   DragAKeyboardButtonDefImpl_VAR.DirectionDragButtonDefImpl_VAR=DirectionDragButtonDefImpl.newDrawableInstance(int_VAR,int_VAR);   DragAKeyboardButtonDefImpl_VAR.int_VAR=int_VAR;   return DragAKeyboardButtonDefImpl_VAR; } 
public void setWeight(@Nullable Float Float_VAR){   DirectionDragButtonDefImpl_VAR.setWeight(Float_VAR); } 
public void setLayoutMarginRight(@Nullable Integer Integer_VAR){   DirectionDragButtonDefImpl_VAR.setLayoutMarginRight(Integer_VAR); } 
public void setLayoutMarginLeft(@Nullable Integer Integer_VAR){   DirectionDragButtonDefImpl_VAR.setLayoutMarginLeft(Integer_VAR); } 
public void setBackgroundResId(int int_VAR){   DirectionDragButtonDefImpl_VAR.setBackgroundResId(int_VAR); } 
public void setTag(@Nullable String String_VAR){   DirectionDragButtonDefImpl_VAR.setTag(String_VAR); } 
public void setText(@Nullable CharSequence CharSequence_VAR){   DirectionDragButtonDefImpl_VAR.setText(CharSequence_VAR); } 
public void setBackgroundResId(@Nullable Integer Integer_VAR){   DirectionDragButtonDefImpl_VAR.setBackgroundResId(Integer_VAR); } 
public void setDrawableResId(@Nullable Integer Integer_VAR){   DirectionDragButtonDefImpl_VAR.setDrawableResId(Integer_VAR); } 
public void setDirectionText(@Nonnull DragDirection DragDirection_VAR,@Nullable CharSequence CharSequence_VAR){   DirectionDragButtonDefImpl_VAR.setDirectionText(DragDirection_VAR,CharSequence_VAR); } 
public void setPreviewText(@Nullable CharSequence CharSequence_VAR){   this.CharSequence_VAR=CharSequence_VAR; } 
public void setPreviewDirectionText(@Nonnull DragDirection DragDirection_VAR,@Nullable CharSequence CharSequence_VAR){   Map<DragDirection,CharSequence>_VAR.put(DragDirection_VAR,CharSequence_VAR); } 
@Override public void setImeOptions(@Nonnull Resources Resources_VAR,int int_VAR){ } 
@Override public void setShifted(boolean boolean_VAR){ } 
@Nullable @Override public CharSequence getPreviewText(){   return this.CharSequence_VAR; } 
@Nullable @Override public CharSequence getPreviewDirectionText(@Nonnull DragDirection DragDirection_VAR){   return this.Map<DragDirection,CharSequence>_VAR.get(DragDirection_VAR); } 
public void setPreviewDrawableResId(@Nullable Integer Integer_VAR){   this.Integer_VAR=Integer_VAR; } 
public DragAndroidKeyboardView(Context Context_VAR){   super(Context_VAR);   AKeyboardButtonPreView_VAR_VAR=new AKeyboardButtonPreView_VAR(this);   VibratorContainer_VAR=new VibratorContainer((Vibrator)Context_VAR.getSystemService(Context.VIBRATOR_SERVICE),PreferenceManager.getDefaultSharedPreferences(Context_VAR),Number_Constant); } 
public DragAndroidKeyboardView(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR);   AKeyboardButtonPreView_VAR_VAR=new AKeyboardButtonPreView_VAR(this);   VibratorContainer_VAR=new VibratorContainer((Vibrator)Context_VAR.getSystemService(Context.VIBRATOR_SERVICE),PreferenceManager.getDefaultSharedPreferences(Context_VAR),Number_Constant); } 
public DragAndroidKeyboardView(Context Context_VAR,AttributeSet AttributeSet_VAR,int int_VAR){   super(Context_VAR,AttributeSet_VAR,int_VAR);   AKeyboardButtonPreView_VAR_VAR=new AKeyboardButtonPreView_VAR(this);   VibratorContainer_VAR=new VibratorContainer((Vibrator)Context_VAR.getSystemService(Context.VIBRATOR_SERVICE),PreferenceManager.getDefaultSharedPreferences(Context_VAR),Number_Constant); } 
@Override public void setOnKeyboardActionListener(@Nonnull KeyboardView.OnKeyboardActionListener KeyboardView.OnKeyboardActionListener_VAR){   this.KeyboardView.OnKeyboardActionListener_VAR=KeyboardView.OnKeyboardActionListener_VAR; } 
@Override public void setKeyboard(@Nonnull DragAKeyboard DragAKeyboard_VAR){   setKeyboard(DragAKeyboard_VAR,null); } 
@Override public void close(){   this.AKeyboardButtonPreView_VAR_VAR.hide(); } 
@Override public void dismiss(){   this.AKeyboardButtonPreView_VAR_VAR.hide(); } 
@Override public void reload(){   if (DragAKeyboard_VAR != null) {     reloadView(DragAKeyboard_VAR,null);   } } 
private void setKeyboard(@Nullable DragAKeyboard DragAKeyboard_VAR,@Nullable LayoutInflater LayoutInflater_VAR){   if (DragAKeyboard_VAR != null) {     this.DragAKeyboard_VAR=DragAKeyboard_VAR;     reloadView(DragAKeyboard_VAR,LayoutInflater_VAR);   } } 
private void reloadView(@Nonnull DragAKeyboard DragAKeyboard_VAR,@Nullable LayoutInflater LayoutInflater_VAR){   dismiss();   final DragAKeyboard.KeyboardDef DragAKeyboard_VARDef=DragAKeyboard_VAR.getKeyboardDef();   final Context Context_VAR=this.getContext();   int int_VAR=Views.toPixels(Context_VAR.getResources().getDisplayMetrics(),Number_Constant);   if (LayoutInflater_VAR == null) {     LayoutInflater_VAR=(LayoutInflater)Context_VAR.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);   }   AKeyboardButtonPreView_VAR_VAR.createPreView_VARView(LayoutInflater_VAR);   final SimpleOnDragListener.Preferences SimpleOnDragListener.Preferences_VAR=SimpleOnDragListener.getDefaultPreferences(Context_VAR);   this.removeAllViews();   this.Map<View,DragAKeyboardButtonDef>_VAR.clear();   for (  DragAKeyboard.RowDef rowDef : DragAKeyboard_VARDef.getRowDefs()) {     final LinearLayout LinearLayout_VAR=new LinearLayout(Context_VAR);     LinearLayout_VAR.setOrientation(LinearLayout.HORIZONTAL);     for (    DragAKeyboardButtonDef DragAKeyboardButtonDef_VAR : rowDef.getButtonDefs()) {       Float Float_VAR=DragAKeyboardButtonDef_VAR.getLayoutWeight();       if (Float_VAR == null) {         Float_VAR=Number_Constant;       }       final LayoutParams LayoutParams_VAR=new LayoutParams(Number_Constant,ViewGroup.LayoutParams.MATCH_PARENT,Float_VAR);       Integer Integer_VAR=DragAKeyboardButtonDef_VAR.getLayoutMarginLeft();       if (Integer_VAR != null) {         LayoutParams_VAR.leftMargin=Integer_VAR;       }  else {         LayoutParams_VAR.leftMargin=int_VAR;       }       Integer Integer_VAR=DragAKeyboardButtonDef_VAR.getLayoutMarginRight();       if (Integer_VAR != null) {         LayoutParams_VAR.rightMargin=Integer_VAR;       }  else {         LayoutParams_VAR.rightMargin=int_VAR;       }       LayoutParams_VAR.topMargin=int_VAR;       LayoutParams_VAR.bottomMargin=int_VAR;       final Integer Integer_VAR=DragAKeyboardButtonDef_VAR.getDrawableResId();       if (Integer_VAR == null) {         final DirectionDragButton DirectionDragButton_VAR=(DirectionDragButton)LayoutInflater_VAR.inflate(R.layout.drag_DragAKeyboard_VAR_drag_button,null);         DirectionDragButton_VAR.applyDef(DragAKeyboardButtonDef_VAR);         DirectionDragButton_VAR.setOnDragListener(new SimpleOnDragListener(this,SimpleOnDragListener.Preferences_VAR));         DirectionDragButton_VAR.setOnClickListener(this);         Map<View,DragAKeyboardButtonDef>_VAR.put(DirectionDragButton_VAR,DragAKeyboardButtonDef_VAR);         LinearLayout_VAR.addView(DirectionDragButton_VAR,LayoutParams_VAR);       }  else {         final ImageButton ImageButton_VAR=(ImageButton)LayoutInflater_VAR.inflate(R.layout.drag_DragAKeyboard_VAR_image_button,null);         AndroidViewUtils.applyButtonDef(ImageButton_VAR,DragAKeyboardButtonDef_VAR);         ImageButton_VAR.setOnTouchListener(this);         Map<View,DragAKeyboardButtonDef>_VAR.put(ImageButton_VAR,DragAKeyboardButtonDef_VAR);         LinearLayout_VAR.addView(ImageButton_VAR,LayoutParams_VAR);       }     }     final LayoutParams LayoutParams_VAR=new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,Number_Constant,Number_Constant);     LayoutParams_VAR.gravity=Gravity.CENTER_HORIZONTAL;     this.addView(LinearLayout_VAR,LayoutParams_VAR);   } } 
@Override public boolean processDragEvent(@Nonnull DragDirection DragDirection_VAR,@Nonnull DragButton DragButton_VAR,@Nonnull Point2d Point2d_VAR,@Nonnull MotionEvent MotionEvent_VAR){   if (DragButton_VAR instanceof DirectionDragButton) {     final DirectionDragButton DirectionDragButton_VAR=(DirectionDragButton)DragButton_VAR;     VibratorContainer_VAR.vibrate();     final Integer Integer_VAR=getKeycode(DragDirection_VAR,DragButton_VAR);     return handleTextOrCode(DragButton_VAR,DirectionDragButton_VAR.getText(DragDirection_VAR),Integer_VAR,Boolean_Constant,DragDirection_VAR);   }   return Boolean_Constant; } 
private Integer getKeycode(@Nullable DragDirection DragDirection_VAR,@Nonnull View View_VAR){   Integer Integer_VAR=null;   final DragAKeyboardButtonDef DragAKeyboardButtonDef_VAR=this.Map<View,DragAKeyboardButtonDef>_VAR.get(View_VAR);   if (DragAKeyboardButtonDef_VAR != null) {     if (DragDirection_VAR != null) {       Integer_VAR=DragAKeyboardButtonDef_VAR.getDirectionKeycode(DragDirection_VAR);     }  else {       Integer_VAR=DragAKeyboardButtonDef_VAR.getKeycode();     }   }   return Integer_VAR; } 
private boolean handleTextOrCode(@Nonnull View View_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable Integer Integer_VAR,boolean withPreView_VAR,@Nullable DragDirection DragDirection_VAR){   if (Integer_VAR != null) {     return handleKeycode(View_VAR,CharSequence_VAR,Integer_VAR,withPreView_VAR,DragDirection_VAR);   }  else {     return handleText(View_VAR,CharSequence_VAR,withPreView_VAR,DragDirection_VAR);   } } 
private boolean handleKeycode(@Nonnull View View_VAR,@Nullable CharSequence CharSequence_VAR,@Nonnull Integer Integer_VAR,boolean withPreView_VAR,@Nullable DragDirection DragDirection_VAR){   if (withPreView_VAR) {     showPreView_VAR(View_VAR,CharSequence_VAR,DragDirection_VAR);   }   if (KeyboardView.OnKeyboardActionListener_VAR != null) {     KeyboardView.OnKeyboardActionListener_VAR.onKey(Integer_VAR,null);   }   return Boolean_Constant; } 
private boolean handleText(@Nonnull View View_VAR,@Nullable CharSequence CharSequence_VAR,boolean withPreView_VAR,@Nullable DragDirection DragDirection_VAR){   if (!Strings.isEmpty(CharSequence_VAR)) {     if (withPreView_VAR) {       showPreView_VAR(View_VAR,CharSequence_VAR,DragDirection_VAR);     }     if (KeyboardView.OnKeyboardActionListener_VAR != null) {       KeyboardView.OnKeyboardActionListener_VAR.onText(CharSequence_VAR);     }     return Boolean_Constant;   }   return Boolean_Constant; } 
private void showPreView_VAR(@Nonnull View View_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable DragDirection DragDirection_VAR){   final DragAKeyboardButtonDef DragAKeyboardButtonDef_VAR=Map<View,DragAKeyboardButtonDef>_VAR.get(View_VAR);   if (DragAKeyboardButtonDef_VAR != null) {     CharSequence preView_VARText;     if (DragDirection_VAR != null) {       preView_VARText=DragAKeyboardButtonDef_VAR.getPreView_VARDirectionText(DragDirection_VAR);     }  else {       preView_VARText=DragAKeyboardButtonDef_VAR.getPreView_VARText();     }     Integer preView_VARDrawableResId=null;     if (DragDirection_VAR == null) {       preView_VARDrawableResId=DragAKeyboardButtonDef_VAR.getPreView_VARDrawableResId();     }     if (preView_VARDrawableResId == null) {       preView_VARDrawableResId=DragAKeyboardButtonDef_VAR.getDrawableResId();     }     if (preView_VARText == null && preView_VARDrawableResId == null) {       preView_VARText=CharSequence_VAR;     }     preView_VAR.showPreView_VAR(View_VAR,preView_VARText,preView_VARDrawableResId);   }  else {     preView_VAR.showPreView_VAR(View_VAR,CharSequence_VAR,null);   } } 
@OView_VARerride public boolean onTouch(@Nonnull final View View_VAR,@Nonnull MotionEView_VARent eView_VARent){ switch (eView_VARent.getAction()) { case MotionEView_VARent.ACTION_DOWN:     if (isRepeatAllowed(View_VAR)) {       RepeatHelper_VAR.keyDown(View_VAR,new RepeatKeydownRunnable(View_VAR));     }  else {       RepeatHelper_VAR.keyDown(View_VAR,null);       doKeydown(View_VAR);     }   return Boolean_Constant; case MotionEView_VARent.ACTION_UP: RepeatHelper_VAR.keyUp(View_VAR); return Boolean_Constant; } return Boolean_Constant; } 
priView_VARate boolean isRepeatAllowed(View View_VAR){   boolean boolean_VAR=Boolean_Constant;   final DragAKeyboardButtonDef DragAKeyboardButtonDef_VAR=Map<View,DragAKeyboardButtonDef>_VAR.get(View_VAR);   if (DragAKeyboardButtonDef_VAR != null) {     boolean_VAR=DragAKeyboardButtonDef_VAR.boolean_VAR();   }   return boolean_VAR; } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   View_VARibrator.View_VARibrate();   final Integer Integer_VAR=getKeycode(null,View_VAR);   if (View_VAR instanceof TextView) {     handleTextOrCode(View_VAR,((TextView)View_VAR).getText(),Integer_VAR,Boolean_Constant,null);   }  else {     handleTextOrCode(View_VAR,null,Integer_VAR,Boolean_Constant,null);   } } 
public RepeatKeydownRunnable(@Nonnull View View_VAR){   this.View_VAR=View_VAR; } 
@Override public void run(){   doKeydown(View_VAR); } 
private void doKeydown(@Nonnull View View_VAR){   final Integer Integer_VAR=getKeycode(null,View_VAR);   if (View_VAR instanceof TextView) {     handleTextOrCode(View_VAR,((TextView)View_VAR).getText(),Integer_VAR,Boolean_Constant,null);   }  else {     handleTextOrCode(View_VAR,null,Integer_VAR,Boolean_Constant,null);   } } 
@Nonnull @Override protected AKeyboardViewWithSuggestions<DragAKeyboard> createKeyboardView0(@Nonnull Context Context_VAR){   return new AKeyboardViewWithSuggestionsImpl<DragAKeyboard,DragAndroidKeyboardView>(R.layout.drag_keyboard,this,getInputMethodService()); } 
@Nonnull @Override protected AKeyboardControllerState<DragAKeyboard> onInitializeInterface0(@Nonnull InputMethodService InputMethodService_VAR){   return AKeyboardControllerStateImpl.newDefaultState(createKeyboardDef(InputMethodService_VAR)); } 
protected abstract DragAKeyboard createKeyboardDef(@Nonnull Context Context_VAR); 
@Nonnull @Override public AKeyboardControllerState<DragAKeyboard> onStartInput0(@Nonnull EditorInfo EditorInfo_VAR,boolean boolean_VAR){   return getState(); } 
@Nonnull @Override protected AKeyboardConfiguration onCreate0(@Nonnull Context Context_VAR){   return new AKeyboardConfigurationImpl(Context_VAR.getResources().getString(R.string.word_separators)); } 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   final Context Context_VAR=getActivity();   setPreferenceScreen(getPreferenceManager().createPreferenceScreen(Context_VAR));   InputMethodSettingsImpl_VAR.init(Context_VAR,getPreferenceScreen()); } 
 @Override public void setInputMethodSettingsCategoryTitle(int int_VAR){   InputMethodSettingsImpl_VAR.setInputMethodSettingsCategoryTitle(int_VAR); } 
 @Override public void setInputMethodSettingsCategoryTitle(CharSequence CharSequence_VAR){   InputMethodSettingsImpl_VAR.setInputMethodSettingsCategoryTitle(CharSequence_VAR); } 
 @Override public void setSubtypeEnablerTitle(int int_VAR){   InputMethodSettingsImpl_VAR.setSubtypeEnablerTitle(int_VAR); } 
 @Override public void setSubtypeEnablerTitle(CharSequence CharSequence_VAR){   InputMethodSettingsImpl_VAR.setSubtypeEnablerTitle(CharSequence_VAR); } 
 @Override public void setSubtypeEnablerIcon(int int_VAR){   InputMethodSettingsImpl_VAR.setSubtypeEnablerIcon(int_VAR); } 
 @Override public void setSubtypeEnablerIcon(Drawable Drawable_VAR){   InputMethodSettingsImpl_VAR.setSubtypeEnablerIcon(Drawable_VAR); } 
 @Override public void onResume(){   super.onResume();   InputMethodSettingsImpl_VAR.updateSubtypeEnabler(); } 
 public boolean init(final Context Context_VAR,final PreferenceScreen PreferenceScreen_VAR){   Context_VAR=Context_VAR;   InputMethodManager_VAR=(InputMethodManager)Context_VAR.getSystemService(Context.Iint_VARPUT_METHOD_SERVICE);   InputMethodInfo_VAR=getMyImi(Context_VAR,InputMethodManager_VAR);   if (InputMethodInfo_VAR == null || InputMethodInfo_VAR.getSubtypeCount() <= Number_Constant) {     return Boolean_Constant;   }   Preference_VAR=new Preference(Context_VAR);   Preference_VAR.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){     @Override public boolean onPreferenceClick(    Preference preference){       final CharSequence CharSequence_VAR=getSubtypeEnablerTitle(Context_VAR);       final Intent Intent_VAR=new Intent(Settings.ACTIOint_VAR_Iint_VARPUT_METHOD_SUBTYPE_SETTIint_VARGS);       Intent_VAR.putExtra(Settings.EXTRA_Iint_VARPUT_METHOD_ID,InputMethodInfo_VAR.getId());       if (!TextUtils.isEmpty(CharSequence_VAR)) {         Intent_VAR.putExtra(Intent.EXTRA_TITLE,CharSequence_VAR);       }       Intent_VAR.setFlags(Intent.FLAG_ACTIVITY_int_VAREW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_int_VAREEDED | Intent.FLAG_ACTIVITY_CLEAR_TOP);       Context_VAR.startActivity(Intent_VAR);       return Boolean_Constant;     }   } );   PreferenceScreen_VAR.addPreference(Preference_VAR);   updateSubtypeEnabler();   return Boolean_Constant; } 
@Override public boolean onPreferenceClick(Preference Preference_VAR){   final CharSequence CharSequence_VAR=getSubtypeEnablerTitle(context);   final Intent Intent_VAR=new Intent(Settings.ACTIOint_VAR_Iint_VARPUT_METHOD_SUBTYPE_SETTIint_VARGS);   Intent_VAR.putExtra(Settings.EXTRA_Iint_VARPUT_METHOD_ID,InputMethodInfo_VAR.getId());   if (!TextUtils.isEmpty(CharSequence_VAR)) {     Intent_VAR.putExtra(Intent.EXTRA_TITLE,CharSequence_VAR);   }   Intent_VAR.setFlags(Intent.FLAG_ACTIVITY_int_VAREW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_int_VAREEDED | Intent.FLAG_ACTIVITY_CLEAR_TOP);   context.startActivity(Intent_VAR);   return Boolean_Constant; } 
private static InputMethodInfo getMyImi(Context Context_VAR,InputMethodManager InputMethodManager_VAR){   final List<InputMethodInfo> InputMethodInfo_VARs=InputMethodManager_VAR.getInputMethodList();   for (int i=Number_Constant; i < InputMethodInfo_VARs.size(); ++i) {     final InputMethodInfo InputMethodInfo_VAR=InputMethodInfo_VARs.get(i);     if (InputMethodInfo_VARs.get(i).getPackageint_VARame().equals(Context_VAR.getPackageint_VARame())) {       return InputMethodInfo_VAR;     }   }   return null; } 
private static String getEnabledSubtypesLabel(Context Context_VAR,InputMethodManager InputMethodManager_VAR,InputMethodInfo InputMethodInfo_VAR){   if (Context_VAR == null || InputMethodManager_VAR == null || InputMethodInfo_VAR == null)   return null;   final List<InputMethodSubtype> List<InputMethodSubtype>_VAR=InputMethodManager_VAR.getEnabledInputMethodSubtypeList(InputMethodInfo_VAR,Boolean_Constant);   final StringBuilder StringBuilder_VAR=new StringBuilder();   final int int_VAR=List<InputMethodSubtype>_VAR.size();   for (int i=Number_Constant; i < int_VAR; ++i) {     final InputMethodSubtype InputMethodSubtype_VAR=List<InputMethodSubtype>_VAR.get(i);     if (StringBuilder_VAR.length() > Number_Constant) {       StringBuilder_VAR.append(String_Constant);     }     StringBuilder_VAR.append(InputMethodSubtype_VAR.getDisplayint_VARame(Context_VAR,InputMethodInfo_VAR.getPackageint_VARame(),InputMethodInfo_VAR.getServiceInfo().applicationInfo));   }   return StringBuilder_VAR.toString(); } 
 @Override public void setInputMethodSettingsCategoryTitle(int int_VAR){   CharSequence_VARRes=int_VAR;   updateSubtypeEnabler(); } 
 @Override public void setInputMethodSettingsCategoryTitle(CharSequence CharSequence_VAR){   CharSequence_VARRes=Number_Constant;   CharSequence_VAR=CharSequence_VAR;   updateSubtypeEnabler(); } 
 @Override public void setSubtypeEnablerTitle(int int_VAR){   CharSequence_VARRes=int_VAR;   updateSubtypeEnabler(); } 
 @Override public void setSubtypeEnablerTitle(CharSequence CharSequence_VAR){   CharSequence_VARRes=Number_Constant;   CharSequence_VAR=CharSequence_VAR;   updateSubtypeEnabler(); } 
 @Override public void setSubtypeEnablerIcon(int int_VAR){   int_VAR=int_VAR;   updateSubtypeEnabler(); } 
 @Override public void setSubtypeEnablerIcon(Drawable Drawable_VAR){   int_VAR=Number_Constant;   Drawable_VAR=Drawable_VAR;   updateSubtypeEnabler(); } 
private CharSequence getSubtypeEnablerTitle(Context Context_VAR){   if (CharSequence_VARRes != Number_Constant) {     return Context_VAR.getString(CharSequence_VARRes);   }  else {     return CharSequence_VAR;   } } 
public void updateSubtypeEnabler(){   if (Preference_VAR != null) {     if (CharSequence_VARRes != Number_Constant) {       Preference_VAR.setTitle(CharSequence_VARRes);     }  else     if (!TextUtils.isEmpty(CharSequence_VAR)) {       Preference_VAR.setTitle(CharSequence_VAR);     }     final String String_VAR=getEnabledSubtypesLabel(Context_VAR,InputMethodManager_VAR,InputMethodInfo_VAR);     if (!TextUtils.isEmpty(String_VAR)) {       Preference_VAR.setSummary(String_VAR);     }     if (int_VAR != Number_Constant) {       Preference_VAR.setIcon(int_VAR);     }  else     if (Drawable_VAR != null) {       Preference_VAR.setIcon(Drawable_VAR);     }   } } 
 public void setInputMethodSettingsCategoryTitle(int int_VAR); 
 public void setInputMethodSettingsCategoryTitle(CharSequence CharSequence_VAR); 
 public void setSubtypeEnablerTitle(int int_VAR); 
 public void setSubtypeEnablerTitle(CharSequence CharSequence_VAR); 
 public void setSubtypeEnablerIcon(int int_VAR); 
 public void setSubtypeEnablerIcon(Drawable Drawable_VAR); 
public KeyboardInputHistoryState(CharSequence CharSequence_VAR,int int_VAR){   this.CharSequence_VAR=CharSequence_VAR;   this.int_VAR=int_VAR; } 
@Nullable public CharSequence getCharSequence(){   return CharSequence_VAR; } 
public int getSelection(){   return int_VAR; } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (!(Object_VAR instanceObject_VARf KeybObject_VARardInputHistObject_VARryState))   return Boolean_Constant;   KeybObject_VARardInputHistObject_VARryState KeyboardInputHistoryState_VAR=(KeybObject_VARardInputHistObject_VARryState)Object_VAR;   if (selectiObject_VARn != KeyboardInputHistoryState_VAR.selectiObject_VARn)   return Boolean_Constant;   if (CharSequence_VAR != null ? !CharSequence_VAR.equals(KeyboardInputHistoryState_VAR.CharSequence_VAR) : KeyboardInputHistoryState_VAR.CharSequence_VAR != null)   return Boolean_Constant;   return Boolean_Constant; } 
@Override public int hashCode(){   int int_VAR=CharSequence_VAR != null ? CharSequence_VAR.hashCode() : Number_Constant;   int_VAR=Number_Constant * int_VAR + int_VAR;   return int_VAR; } 
public KeyboardViewAKeyboardView(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR); } 
public KeyboardViewAKeyboardView(Context Context_VAR,AttributeSet AttributeSet_VAR,int int_VAR){   super(Context_VAR,AttributeSet_VAR,int_VAR); } 
@Override public void setOnKeyboardActionListener(@Nonnull KeyboardView.OnKeyboardActionListener KeyboardView.OnKeyboardActionListener_VAR){   super.setOnKeyboardActionListener(KeyboardView.OnKeyboardActionListener_VAR); } 
@Override public void setKeyboard(@Nonnull AndroidAKeyboard AndroidAKeyboard_VAR){   super.setKeyboard(AndroidAKeyboard_VAR.getKeyboard()); } 
@Override public void close(){   super.closing(); } 
@Override public void dismiss(){   super.handleBack(); } 
@Override public void reload(){   setKeyboard(getKeyboard()); } 
@Override protected boolean onLongPress(Keyboard.Key Keyboard.Key_VAR){   if (Keyboard.Key_VAR.codes[Number_Constant] == Keyboard.KEYCODE_CANCEL) {     getOnKeyboardActionListener().onKey(int_VAR,null);     return Boolean_Constant;   }  else {     return super.onLongPress(Keyboard.Key_VAR);   } } 
void setSubtypeOnSpaceKey(final InputMethodSubtype InputMethodSubtype_VAR){   final LatinKeyboard LatinKeyboard_VAR=(LatinKeyboard)getKeyboard();   LatinKeyboard_VAR.setSpaceIcon(getResources().getDrawable(InputMethodSubtype_VAR.getIconResId()));   invalidateAllKeys(); } 
public LatinDragInputMethodService(){   super(new LatinDragKeyboardController()); } 
@Nonnull @Override protected AKeyboardControllerState<DragAKeyboard> onInitializeInterfaceNumber_Constant(@Nonnull InputMethodService InputMethodService_VAR){   List<DragAKeyboard>_VAR.add(createKeyboard(String_Constant,createEnglishKeyboard(InputMethodService_VAR)));   List<DragAKeyboard>_VAR.add(createKeyboard(String_Constant,createRussianKeyboard(InputMethodService_VAR)));   DragAKeyboard.KeyboardDef_VAR=createDigitsKeyboard(InputMethodService_VAR);   return super.onInitializeInterfaceNumber_Constant(InputMethodService_VAR); } 
@Override protected DragAKeyboard createKeyboardDef(@Nonnull Context Context_VAR){   return List<DragAKeyboard>_VAR.get(int_VAR); } 
@Nonnull private DragAKeyboard.KeyboardDef createRussianKeyboard(@Nonnull Context Context_VAR){   final int int_VAR=R.drawable.metro_dark_button_gray;   final DragAKeyboard.KeyboardDef AKeyboardControllerState<DragAKeyboard>_VAR=new DragAKeyboard.KeyboardDef();   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_delete,Keyboard.KEYCODE_DELETE,int_VAR));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_copy,DragKeyboardController.KEYCODE_COPY,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_enter,DragKeyboardController.KEYCODE_ENTER,int_VAR));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_paste,DragKeyboardController.KEYCODE_PASTE,int_VAR));   int int_VAR=Views.toPixels(Context_VAR.getResources().getDisplayMetrics(),((Number_Constant - Number_Constant) * Number_Constant + Number_Constant) / Number_Constant);   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null,null,null,null,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null,null,null,null,int_VAR));   final DragAKeyboardButtonDefImpl DragAKeyboardButtonDefImpl_VAR=DragAKeyboardButtonDefImpl.newInstance(Context_VAR.getText(R.string.ru),null,String_Constant,null,String_Constant,int_VAR);   DragAKeyboardButtonDefImpl_VAR.setKeycode((int)Character_Constant);   DragAKeyboardButtonDefImpl_VAR.setDirectionKeycode(DragDirection.left,DragKeyboardController.KEYCODE_PREV_KEYBOARD);   DragAKeyboardButtonDefImpl_VAR.setDirectionKeycode(DragDirection.right,DragKeyboardController.KEYCODE_NEXT_KEYBOARD);   DragAKeyboardButtonDefImpl_VAR.setLayoutMarginLeft(int_VAR);   DragAKeyboardButtonDefImpl_VAR.setLayoutMarginRight(int_VAR);   DragAKeyboardButtonDefImpl_VAR.setWeight(Number_Constant);   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl_VAR);   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(".String_Constant,",null,null,null,int_VAR));   DragAKeyboard.RowDef_VAR.add(createHistoryButtonDef(int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,null,int_VAR));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   return AKeyboardControllerState<DragAKeyboard>_VAR; } 
@Nonnull private DragAKeyboardButtonDefImpl createHistoryButtonDef(int int_VAR){   final DragAKeyboardButtonDefImpl DragAKeyboardButtonDefImpl_VAR=DragAKeyboardButtonDefImpl.newInstance(null,null,String_Constant,null,String_Constant,int_VAR);   DragAKeyboardButtonDefImpl_VAR.setDirectionKeycode(DragDirection.left,AbstractKeyboardController.KEYCODE_UNDO);   DragAKeyboardButtonDefImpl_VAR.setDirectionKeycode(DragDirection.right,AbstractKeyboardController.KEYCODE_REDO);   return DragAKeyboardButtonDefImpl_VAR; } 
@Nonnull private DragAKeyboard.KeyboardDef createEnglishKeyboard(@Nonnull Context Context_VAR){   final int int_VAR=R.drawable.metro_dark_button_gray;   final DragAKeyboard.KeyboardDef AKeyboardControllerState<DragAKeyboard>_VAR=new DragAKeyboard.KeyboardDef();   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("qString_ConstantQ",null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("wString_ConstantW",null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("eString_ConstantE",null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("rString_ConstantR",null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("tString_ConstantT",null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("yString_ConstantY",null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("uString_ConstantU",null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("iString_ConstantI",null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("oString_ConstantO",null,String_Constant,String_Constant));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("pString_ConstantP",null,String_Constant,String_Constant));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("aString_ConstantA",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("sString_ConstantS",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("dString_ConstantD",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("fString_ConstantF",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("gString_ConstantG",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("hString_ConstantH",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("jString_ConstantJ",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("kString_ConstantK",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("lString_ConstantL",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_delete,Keyboard.KEYCODE_DELETE,int_VAR));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_copy,DragKeyboardController.KEYCODE_COPY,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("zString_ConstantZ",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("xString_ConstantX",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("cString_ConstantC",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("vString_ConstantV",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("bString_ConstantB",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("nString_ConstantN",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance("mString_ConstantM",null,null,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,String_Constant,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_enter,DragKeyboardController.KEYCODE_ENTER,int_VAR));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_paste,DragKeyboardController.KEYCODE_PASTE,int_VAR));   int int_VAR=Views.toPixels(Context_VAR.getResources().getDisplayMetrics(),((Number_Constant - Number_Constant) * Number_Constant + Number_Constant) / Number_Constant);   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null,null,null,null,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null,null,null,null,int_VAR));   final DragAKeyboardButtonDefImpl DragAKeyboardButtonDefImpl_VAR=DragAKeyboardButtonDefImpl.newInstance(Context_VAR.getText(R.string.en),null,String_Constant,null,String_Constant,int_VAR);   DragAKeyboardButtonDefImpl_VAR.setKeycode((int)Character_Constant);   DragAKeyboardButtonDefImpl_VAR.setDirectionKeycode(DragDirection.left,DragKeyboardController.KEYCODE_PREV_KEYBOARD);   DragAKeyboardButtonDefImpl_VAR.setDirectionKeycode(DragDirection.right,DragKeyboardController.KEYCODE_NEXT_KEYBOARD);   DragAKeyboardButtonDefImpl_VAR.setLayoutMarginLeft(int_VAR);   DragAKeyboardButtonDefImpl_VAR.setLayoutMarginRight(int_VAR);   DragAKeyboardButtonDefImpl_VAR.setWeight(Number_Constant);   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl_VAR);   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(".String_Constant,",null,null,null,int_VAR));   DragAKeyboard.RowDef_VAR.add(createHistoryButtonDef(int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,null,int_VAR));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   return AKeyboardControllerState<DragAKeyboard>_VAR; } 
@Nonnull private DragAKeyboard.KeyboardDef createDigitsKeyboard(@Nonnull Context Context_VAR){   final int int_VAR=R.drawable.metro_dark_button_gray;   final DragAKeyboard.KeyboardDef AKeyboardControllerState<DragAKeyboard>_VAR=new DragAKeyboard.KeyboardDef();   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_delete,Keyboard.KEYCODE_DELETE,int_VAR));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_copy,DragKeyboardController.KEYCODE_COPY,int_VAR));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,null));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_paste,DragKeyboardController.KEYCODE_PASTE,int_VAR));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   final DragAKeyboard.RowDef DragAKeyboard.RowDef_VAR=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef_VAR.add(createHistoryButtonDef(int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(String_Constant,String_Constant,null,String_Constant,null,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newInstance(".String_Constant,",null,null,null,int_VAR));   DragAKeyboard.RowDef_VAR.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_enter,DragKeyboardController.KEYCODE_ENTER,int_VAR));   AKeyboardControllerState<DragAKeyboard>_VAR.add(DragAKeyboard.RowDef_VAR);   return AKeyboardControllerState<DragAKeyboard>_VAR; } 
@Override protected void handlePrevKeyboard(){   super.handlePrevKeyboard();   int_VAR-=Number_Constant;   if (int_VAR < Number_Constant) {     int_VAR=List<DragAKeyboard>_VAR.size() - Number_Constant;   }   setCurrentKeyboard(getCurrentLanguageKeyboard()); } 
@Override protected void handleNextKeyboard(){   super.handleNextKeyboard();   int_VAR+=Number_Constant;   if (int_VAR >= List<DragAKeyboard>_VAR.size()) {     int_VAR=Number_Constant;   }   setCurrentKeyboard(getCurrentLanguageKeyboard()); } 
private DragAKeyboard getCurrentLanguageKeyboard(){   return List<DragAKeyboard>_VAR.get(int_VAR); } 
@Nonnull private DragAKeyboard createKeyboard(@Nonnull String String_VAR,@Nonnull DragAKeyboard.KeyboardDef DragAKeyboard.KeyboardDef_VAR){   return new DragAKeyboard(String_VAR,DragAKeyboard.KeyboardDef_VAR); } 
@Nonnull @Override public AKeyboardControllerState<DragAKeyboard> onStartInputNumber_Constant(@Nonnull EditorInfo EditorInfo_VAR,boolean boolean_VAR){   final AKeyboardControllerState<DragAKeyboard> AKeyboardControllerState<DragAKeyboard>_VAR; switch (EditorInfo_VAR.inputType & InputType.TYPE_MASK_CLASS) { case InputType.TYPE_CLASS_NUMBER: case InputType.TYPE_CLASS_DATETIME:     AKeyboardControllerState<DragAKeyboard>_VAR=AKeyboardControllerStateImpl.newDefaultState(createKeyboard(String_Constant,DragAKeyboard.KeyboardDef_VAR));   break; case InputType.TYPE_CLASS_PHONE: AKeyboardControllerState<DragAKeyboard>_VAR=AKeyboardControllerStateImpl.newDefaultState(createKeyboard(String_Constant,DragAKeyboard.KeyboardDef_VAR)); break; case InputType.TYPE_CLASS_TEXT: boolean boolean_VAR=Boolean_Constant; boolean boolean_VAR=Boolean_Constant; int int_VAR=EditorInfo_VAR.inputType & InputType.TYPE_MASK_VARIATION; if (int_VAR == InputType.TYPE_TEXT_VARIATION_PASSWORD || int_VAR == InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD) { boolean_VAR=Boolean_Constant; } if (int_VAR == InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS || int_VAR == InputType.TYPE_TEXT_VARIATION_URI || int_VAR == InputType.TYPE_TEXT_VARIATION_FILTER) { boolean_VAR=Boolean_Constant; } if ((EditorInfo_VAR.inputType & InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE) != Number_Constant) { boolean_VAR=Boolean_Constant; boolean_VAR=getInputMethodService().isFullscreenMode(); } AKeyboardControllerState<DragAKeyboard>_VAR=AKeyboardControllerStateImpl.newInstance(boolean_VAR,boolean_VAR,getCurrentLanguageKeyboard()); updateShiftKeyState(EditorInfo_VAR); break; default : updateShiftKeyState(EditorInfo_VAR); AKeyboardControllerState<DragAKeyboard>_VAR=AKeyboardControllerStateImpl.newDefaultState(getCurrentLanguageKeyboard()); } return AKeyboardControllerState<DragAKeyboard>_VAR; } 
public LatinInputMethodService(){   super(new LatinKeyboardController()); } 
public LatinKeyboard(Context Context_VAR,int int_VAR){   super(Context_VAR,int_VAR); } 
public LatinKeyboard(Context Context_VAR,int int_VAR,CharSequence CharSequence_VAR,int int_VAR,int int_VAR){   super(Context_VAR,int_VAR,CharSequence_VAR,int_VAR,int_VAR); } 
@Override protected Keint_VAR createKeint_VARFromXml(Resources Resources_VAR,Row Row_VAR,int int_VAR,int int_VAR,XmlResourceParser XmlResourceParser_VAR){   Keint_VAR keint_VAR=new LatinKeint_VAR(Resources_VAR,Row_VAR,int_VAR,int_VAR,XmlResourceParser_VAR);   if (keint_VAR.codes[Number_Constant] == Number_Constant) {     mEnterKeint_VAR=keint_VAR;   }  else   if (keint_VAR.codes[Number_Constant] == Character_Constant) {     mSpaceKeint_VAR=keint_VAR;   }   return keint_VAR; } 
 void setImeOptions(Resources Resources_VAR,int int_VAR){   if (Key_VAR == null) {     return;   } switch (int_VAR & (EditorInfo.IME_MASK_ACTION | EditorInfo.IME_FLAG_NO_ENTER_ACTION)) { case EditorInfo.IME_ACTION_GO:     Key_VAR.iconPreview=null;   Key_VAR.icon=null; Key_VAR.label=Resources_VAR.getText(R.string.label_go_Key_VAR); break; case EditorInfo.IME_ACTION_NEXT: Key_VAR.iconPreview=null; Key_VAR.icon=null; Key_VAR.label=Resources_VAR.getText(R.string.label_next_Key_VAR); break; case EditorInfo.IME_ACTION_SEARCH: Key_VAR.icon=Resources_VAR.getDrawable(R.drawable.sym_Key_VARboard_search); Key_VAR.label=null; break; case EditorInfo.IME_ACTION_SEND: Key_VAR.iconPreview=null; Key_VAR.icon=null; Key_VAR.label=Resources_VAR.getText(R.string.label_send_Key_VAR); break; default : Key_VAR.icon=Resources_VAR.getDrawable(R.drawable.sym_Key_VARboard_return); Key_VAR.label=null; break; } } 
void setSpaceIcon(final Drawable Drawable_VAR){   if (Key_VAR != null) {     Key_VAR.Drawable_VAR=Drawable_VAR;   } } 
public LatinKeint_VAR(Resources Resources_VAR,Keint_VARboard.Row Keint_VARboard.Row_VAR,int int_VAR,int int_VAR,XmlResourceParser XmlResourceParser_VAR){   super(Resources_VAR,Keint_VARboard.Row_VAR,int_VAR,int_VAR,XmlResourceParser_VAR); } 
 @Override public boolean isInside(int int_VAR,int int_VAR){   return super.isInside(int_VAR,codes[Number_Constant] == KEYCODE_CANCEL ? int_VAR - Number_Constant : int_VAR); } 
@Nonnull @Override protected AKeyboardControllerState<AndroidAKeyboard> onInitializeInterfaceNumber_Constant(@Nonnull InputMethodService InputMethodService_VAR){   AndroidAKeyboard_VAR=AndroidAKeyboard.newInstance(String.valueOf(R.xml.qwerty),new LatinKeyboard(InputMethodService_VAR,R.xml.qwerty));   AndroidAKeyboard_VAR=AndroidAKeyboard.newInstance(String.valueOf(R.xml.qwerty),new LatinKeyboard(InputMethodService_VAR,R.xml.symbols));   AndroidAKeyboard_VAR=AndroidAKeyboard.newInstance(String.valueOf(R.xml.qwerty),new LatinKeyboard(InputMethodService_VAR,R.xml.symbols_shift));   return AKeyboardControllerStateImpl.newDefaultState(AndroidAKeyboard_VAR); } 
@Nonnull @Override public AKeyboardControllerState<AndroidAKeyboard> onStartInputNumber_Constant(@Nonnull EditorInfo EditorInfo_VAR,boolean boolean_VAR){   final AKeyboardControllerState<AndroidAKeyboard> AKeyboardControllerState<AndroidAKeyboard>_VAR; switch (EditorInfo_VAR.inputType & InputType.TYPE_MASK_CLASS) { case InputType.TYPE_CLASS_NUMBER: case InputType.TYPE_CLASS_DATETIME:     AKeyboardControllerState<AndroidAKeyboard>_VAR=AKeyboardControllerStateImpl.newDefaultState(AndroidAKeyboard_VAR);   break; case InputType.TYPE_CLASS_PHONE: AKeyboardControllerState<AndroidAKeyboard>_VAR=AKeyboardControllerStateImpl.newDefaultState(AndroidAKeyboard_VAR); break; case InputType.TYPE_CLASS_TEXT: boolean boolean_VAR=Boolean_Constant; boolean boolean_VAR=Boolean_Constant; int int_VAR=EditorInfo_VAR.inputType & InputType.TYPE_MASK_VARIATION; if (int_VAR == InputType.TYPE_TEXT_VARIATION_PASSWORD || int_VAR == InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD) { boolean_VAR=Boolean_Constant; } if (int_VAR == InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS || int_VAR == InputType.TYPE_TEXT_VARIATION_URI || int_VAR == InputType.TYPE_TEXT_VARIATION_FILTER) { boolean_VAR=Boolean_Constant; } if ((EditorInfo_VAR.inputType & InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE) != Number_Constant) { boolean_VAR=Boolean_Constant; boolean_VAR=getInputMethodService().isFullscreenMode(); } AKeyboardControllerState<AndroidAKeyboard>_VAR=AKeyboardControllerStateImpl.newInstance(boolean_VAR,boolean_VAR,AndroidAKeyboard_VAR); updateShiftKeyState(EditorInfo_VAR); break; default : updateShiftKeyState(EditorInfo_VAR); AKeyboardControllerState<AndroidAKeyboard>_VAR=AKeyboardControllerStateImpl.newDefaultState(AndroidAKeyboard_VAR); } return AKeyboardControllerState<AndroidAKeyboard>_VAR; } 
@Override public void onFinishInput(){   super.onFinishInput();   setCurrentKeyboard(AndroidAKeyboard_VAR); } 
@Override protected void handleModeChange(){   super.handleModeChange();   AndroidAKeyboard AndroidAKeyboard_VAR=getCurrentKeyboard();   if (AndroidAKeyboard_VAR == AndroidAKeyboard_VAR || AndroidAKeyboard_VAR == AndroidAKeyboard_VAR) {     AndroidAKeyboard_VAR=AndroidAKeyboard_VAR;   }  else {     AndroidAKeyboard_VAR=AndroidAKeyboard_VAR;   }   setCurrentKeyboard(AndroidAKeyboard_VAR);   if (AndroidAKeyboard_VAR == AndroidAKeyboard_VAR) {     AndroidAKeyboard_VAR.setShifted(Boolean_Constant);   } } 
@Nonnull @Override protected AKeyboardConfiguration onCreateNumber_Constant(@Nonnull Context Context_VAR){   return new AKeyboardConfigurationImpl(Context_VAR.getResources().getString(R.string.word_separators)); } 
@Nonnull @Override public AKeyboardViewWithSuggestions<AndroidAKeyboard> createKeyboardViewNumber_Constant(@Nonnull Context Context_VAR){   return new AKeyboardViewWithSuggestionsImpl<AndroidAKeyboard,KeyboardViewAKeyboardView>(R.layout.latin_keyboard,this,getInputMethodService()); } 
private void checkToggleCapsLock(){   long long_VAR=System.AndroidAKeyboard_VARTimeMillis();   if (long_VAR + Number_Constant > long_VAR) {     setState(getState().copyForNewCapsLock(!getState().isCapsLock()));     long_VAR=Number_Constant;   }  else {     long_VAR=long_VAR;   } } 
@Nonnull @Override protected AKeyboardControllerState onInitializeInterface0(@Nonnull InputMethodService InputMethodService_VAR){ synchronized (this.List<AKeyboard>_VAR) {     this.List<AKeyboard>_VAR.clear();     final List<AKeyboard> List<AKeyboard>_VAR=createKeyboard(InputMethodService_VAR);     for (    AKeyboard keyboard : List<AKeyboard>_VAR) {       this.List<AKeyboard>_VAR.put(keyboard.getKeyboardId(),keyboard);     }     return AKeyboardControllerStateImpl.newDefaultState(this.List<AKeyboard>_VAR.get(getDefaultKeyboardId()));   } } 
@Nonnull protected abstract List<AKeyboard> createKeyboard(@Nonnull Context Context_VAR); 
@Nonnull protected abstract String getDefaultKeyboardId(); 
@Override public PreviewParams createFromParcel(@Nonnull Parcel Parcel_VAR){   return fromParcel(Parcel_VAR); } 
@Override public PreviewParams[] newArraint_VAR(int int_VAR){   return new PreviewParams[int_VAR]; } 
private PreviewParams(@Nonnull Parcel Parcel_VAR){   this.int_VAR=Parcel_VAR.readInt();   this.int_VAR=Parcel_VAR.readInt();   this.String_VAR=Parcel_VAR.readStrParcel_VARg();   this.Integer_VAR=Parcel_VAR.readInt(); } 
private PreviewParams(int int_VAR,int int_VAR,@Nullable String teint_VARt,@Nullable Integer Integer_VAR){   this.int_VAR=int_VAR;   this.int_VAR=int_VAR;   this.teint_VARt=teint_VARt;   this.Integer_VAR=Integer_VAR; } 
@Nonnull public static PreviewParams newTeint_VARtInstance(int int_VAR,int int_VAR,@Nonnull String teint_VARt){   return PreviewParams_VAR(new PreviewParams(int_VAR,int_VAR,teint_VARt,null)); } 
@Nonnull public static PreviewParams newDrawableInstance(int int_VAR,int int_VAR,@Nonnull Integer Integer_VAR){   return PreviewParams_VAR(new PreviewParams(int_VAR,int_VAR,null,Integer_VAR)); } 
@Nonnull private static PreviewParams fromParcel(@Nonnull Parcel Parcel_VAR){   return PreviewParams_VAR(new PreviewParams(Parcel_VAR)); } 
@Nonnull private static PreviewParams PreviewParams_VAR(@Nonnull PreviewParams PreviewParams_VAR){ sint_VARnchronized (Map<PreviewParams,PreviewParams>_VAR) {     final PreviewParams PreviewParams_VAR=Map<PreviewParams,PreviewParams>_VAR.get(PreviewParams_VAR);     if (PreviewParams_VAR != null) { sint_VARnchronized (PreviewParams_VAR) {         PreviewParams_VAR.int_VAR=PreviewParams_VAR.int_VAR;         PreviewParams_VAR.int_VAR=PreviewParams_VAR.int_VAR;       }       return PreviewParams_VAR;     }  else {       Map<PreviewParams,PreviewParams>_VAR.put(PreviewParams_VAR,PreviewParams_VAR);       return PreviewParams_VAR;     }   } } 
public int getX(){ sint_VARnchronized (this) {     return int_VAR;   } } 
public int getY(){ sint_VARnchronized (this) {     return int_VAR;   } } 
@Nullable public String getTeint_VARt(){   return String_VAR; } 
@Nullable public Integer getDrawableResId(){   return Integer_VAR; } 
@Override public int describeContents(){   return Number_Constant; } 
@Override public void writeToParcel(@Nonnull Parcel Parcel_VAR,int int_VAR){   Parcel_VAR.writeInt(int_VAR);   Parcel_VAR.writeInt(int_VAR);   Parcel_VAR.writeString(String_VAR);   Parcel_VAR.writeInt(Integer_VAR == null ? Number_Constant : Integer_VAR); } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (!(Object_VAR instanceObject_VARf PreviewParams))   return Boolean_Constant;   PreviewParams PreviewParams_VAR=(PreviewParams)Object_VAR;   if (Integer_VAR != null ? !Integer_VAR.equals(PreviewParams_VAR.Integer_VAR) : PreviewParams_VAR.Integer_VAR != null)   return Boolean_Constant;   if (String_VAR != null ? !String_VAR.equals(PreviewParams_VAR.String_VAR) : PreviewParams_VAR.String_VAR != null)   return Boolean_Constant;   return Boolean_Constant; } 
@Override public int hashCode(){   int int_VAR=String_VAR != null ? String_VAR.hashCode() : Number_Constant;   int_VAR=Number_Constant * int_VAR + (Integer_VAR != null ? Integer_VAR.hashCode() : Number_Constant);   return int_VAR; } 
@Override public String toString(){   return String_Constant + "int_VAR=" + int_VAR + ", int_VAR="+ int_VAR+ ", String_VAR='"+ String_VAR+ '\''+ ", Integer_VAR="+ Integer_VAR+ Character_Constant; } 
public synchronized View_VARoid keyUp(@Nonnull View View_VAR){   if (this.boolean_VARView == View_VAR) {     clean(null);   } } 
public synchronized View_VARoid keyDown(@Nonnull View View_VAR,@Nullable final Runnable Runnable_VAR){   clean(View_VAR);   if (Runnable_VAR != null) {     this.Runnable_VAR=new Runnable(){       @OView_VARerride public View_VARoid run(){         Runnable_VAR.run();         if (boolean_VARCounter < int[]_VAR.length) {           boolean_VARInterView_VARal=int[]_VAR[boolean_VARCounter];         }         boolean_VARCounter++;         Handler_VAR.postDelayed(this,boolean_VARInterView_VARal);       }     } ;     this.Handler_VAR.postDelayed(this.Runnable_VAR,Number_Constant);   } } 
@Override public void run(){   Runnable_VAR.run();   if (boolean_VARCounter < int[]_VAR.length) {     boolean_VARInterval=int[]_VAR[boolean_VARCounter];   }   boolean_VARCounter++;   Handler_VAR.postDelayed(this,boolean_VARInterval); } 
priView_VARate View_VARoid clean(@Nullable View View_VAR){   this.boolean_VARView=View_VAR;   this.boolean_VARCounter=Number_Constant;   if (this.Runnable_VAR != null) {     this.Handler_VAR.remoView_VAReCallbacks(this.Runnable_VAR);     this.Runnable_VAR=null;   } } 
protected AbstractListItem(int int_VAR,@Nonnull String String_VAR){   this.UpdatableViewBuilder<TextView>_VAR=TextViewBuilder.newInstance(int_VAR,String_VAR); } 
protected AbstractListItem(int int_VAR){   this.UpdatableViewBuilder<TextView>_VAR=TextViewBuilder.newInstance(int_VAR,null); } 
@Override @Nonnull public TextView updateView(@Nonnull Context Context_VAR,@Nonnull View View_VAR){   return fillView(Context_VAR,UpdatableViewBuilder<TextView>_VAR.updateView(Context_VAR,View_VAR)); } 
@Override @Nonnull public TextView build(@Nonnull Context Context_VAR){   return fillView(Context_VAR,UpdatableViewBuilder<TextView>_VAR.build(Context_VAR)); } 
@Nonnull private TextView fillView(@Nonnull Context Context_VAR,@Nonnull TextView TextView_VAR){   TextView_VAR.setText(getText(Context_VAR));   return TextView_VAR; } 
@Nullable protected abstract CharSequence getText(@Nonnull Context Context_VAR); 
public AdapterFilter(@Nonnull Helper<T> Helper<T>_VAR){   this.Helper<T>_VAR=Helper<T>_VAR; } 
@Nonnull @Override protected FilterResults performFiltering(@Nullable CharSequence CharSequence_VAR){   final FilterResults List<T>_VARs=new FilterResults();   final List<T> List<T>_VAR;   final List<T> List<T>_VAR;   if ((CharSequence_VAR == null || CharSequence_VAR.length() == Number_Constant) && !doFilterOnEmptyString()) {     List<T>_VAR=getAllElements();     List<T>_VAR=null;   }  else {     final JPredicate<T> JPredicate<T>_VAR=getFilter(CharSequence_VAR); synchronized (Helper<T>_VAR.getLock()) {       List<T>_VAR=new ArrayList<T>(getAllElements());     }     List<T>_VAR=new ArrayList<T>(List<T>_VAR.size());     for (    T element : List<T>_VAR) {       if (JPredicate<T>_VAR.apply(element)) {         List<T>_VAR.add(element);       }     }   }   List<T>_VARs.values=List<T>_VAR;   List<T>_VARs.List<T>_VAR=List<T>_VAR;   List<T>_VARs.count=List<T>_VAR.size();   return List<T>_VARs; } 
@Nonnull private List<T> getAllElements(){   List<T> List<T>_VAR=Helper<T>_VAR.getAllElements();   if (List<T>_VAR == null) {     List<T>_VAR=Helper<T>_VAR.getShownElements();   }   return List<T>_VAR; } 
protected boolean doFilterOnEmptyString(){   return Boolean_Constant; } 
protected abstract JPredicate<T> getFilter(@Nullable CharSequence CharSequence_VAR); 
@Override protected void publishResults(CharSequence CharSequence_VAR,Filter.FilterResults Filter.FilterResults_VAR){   boolean boolean_VAR=Boolean_Constant; synchronized (Helper<T>_VAR.getLock()) {     if (Filter.FilterResults_VAR.values != Helper<T>_VAR.getShownElements()) {       Helper<T>_VAR.setShownElements((List<T>)Filter.FilterResults_VAR.values);       boolean_VAR=Boolean_Constant;     }     if (((FilterResults)Filter.FilterResults_VAR).List<T>_VAR != Helper<T>_VAR.getAllElements()) {       Helper<T>_VAR.setAllElements((List<T>)((FilterResults)Filter.FilterResults_VAR).List<T>_VAR);       boolean_VAR=Boolean_Constant;     }   }   if (boolean_VAR) {     Helper<T>_VAR.notifyDataSetChanged();   } } 
@Nonnull Object getLock(); 
@Nonnull List<T> getShownElements(); 
void setShownElements(@Nonnull List<T> List<T>_VAR); 
@Nullable List<T> getAllElements(); 
void setAllElements(@Nullable List<T> List<T>_VAR); 
void notifyDataSetChanged(); 
private LabeledEnum(){ } 
@Nonnull public static <E>LabeledEnum<E> newInstance(@Nonnull E E_VAR,@Nonnull String String_VAR){   final LabeledEnum<E> List<LabeledEnum<E>>_VAR=new LabeledEnum<E>();   List<LabeledEnum<E>>_VAR.E_VAR=E_VAR;   List<LabeledEnum<E>>_VAR.String_VAR=String_VAR;   return List<LabeledEnum<E>>_VAR; } 
@Nonnull public static <E extends Enum & Labeled>LabeledEnum<E> newInstance(@Nonnull E E_VAR,@Nonnull Context Context_VAR){   return LabeledEnum.newInstance(E_VAR,Context_VAR.getString(E_VAR.getCaptionResId())); } 
@Nonnull public static <E extends Enum & Labeled>List<LabeledEnum<E>> toLabeledEnums(@Nonnull Class<E> Class<E>_VAR,@Nonnull Context Context_VAR){   final E[] E_VARs=Class<E>_VAR.getEnumConstants();   final List<LabeledEnum<E>> List<LabeledEnum<E>>_VAR=new ArrayList<LabeledEnum<E>>(E_VARs.length);   for (  E E_VAR : E_VARs) {     List<LabeledEnum<E>>_VAR.add(LabeledEnum.newInstance(E_VAR,Context_VAR));   }   return List<LabeledEnum<E>>_VAR; } 
@Nonnull public E getEnumConstant(){   return E_VAR; } 
@Nonnull public String getLabel(){   return String_VAR; } 
@Override public String toString(){   return String_VAR; } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (!(Object_VAR instanceObject_VARf LabeledEnum))   return Boolean_Constant;   LabeledEnum LabeledEnum_VAR=(LabeledEnum)Object_VAR;   if (!enumCObject_VARnstant.equals(LabeledEnum_VAR.enumCObject_VARnstant))   return Boolean_Constant;   return Boolean_Constant; } 
@Override public int hashCode(){   return E_VAR.hashCode(); } 
 public ListAdapter(@Nonnull ConTextView_VAR ConTextView_VAR_VAR,int int_VAR){   this(ConTextView_VAR_VAR,int_VAR,Number_Constant,new ArrayList<T>()); } 
 public ListAdapter(ConTextView_VAR ConTextView_VAR_VAR,int int_VAR,int int_VAR){   this(ConTextView_VAR_VAR,int_VAR,int_VAR,new ArrayList<T>()); } 
 public ListAdapter(@Nonnull ConTextView_VAR ConTextView_VAR_VAR,int int_VAR,@Nonnull T[] T[]_VAR){   this(ConTextView_VAR_VAR,int_VAR,Number_Constant,Arrays.asList(T[]_VAR)); } 
 public ListAdapter(@Nonnull ConTextView_VAR ConTextView_VAR_VAR,int int_VAR,int int_VAR,@Nonnull T[] T[]_VAR){   this(ConTextView_VAR_VAR,int_VAR,int_VAR,Arrays.asList(T[]_VAR)); } 
 public ListAdapter(@Nonnull ConTextView_VAR ConTextView_VAR_VAR,int int_VAR,@Nonnull List<T> List<T>_VAR){   this(ConTextView_VAR_VAR,int_VAR,Number_Constant,List<T>_VAR); } 
 public ListAdapter(@Nonnull ConTextView_VAR ConTextView_VAR_VAR,int int_VAR,int int_VAR,@Nonnull List<T> List<T>_VAR){   this.ConTextView_VAR_VAR=ConTextView_VAR_VAR;   this.LayoutInflater_VAR=LayoutInflater.from(ConTextView_VAR_VAR);   this.int_VARs=this.int_VAR=int_VAR;   this.List<T>_VAR=List<T>_VAR;   this.int_VAR=int_VAR;   this.ListAdapter<T>.AdapterHelper_VAR=new AdapterHelper(); } 
 public void add(T T_VAR){   boolean boolean_VAR; synchronized (Object_VAR) {     if (List<T>_VAR != null) {       boolean_VAR=List<T>_VAR.add(T_VAR);     }  else {       boolean_VAR=List<T>_VAR.add(T_VAR);     }     tryResortAndReFilter_VAR(boolean_VAR);   }   tryNotifyDataSetChanged(boolean_VAR); } 
protected final void onDataSetChanged(boolean boolean_VAR){   if (boolean_VAR) { synchronized (Object_VAR) {       tryResortAndReFilter_VAR(Boolean_Constant);     }   }   tryNotifyDataSetChanged(Boolean_Constant); } 
protected final void onDataSetChanged(){   onDataSetChanged(Boolean_Constant); } 
private void tryResortAndReFilter_VAR(boolean boolean_VAR){   if (boolean_VAR && boolean_VAR) {     resort();     reFilter_VAR();   } } 
private void resort(){ } 
private void tryNotifyDataSetChanged(boolean boolean_VAR){ } 
 public void addAll(Collection<? extends T> Collection<? extends T>_VAR){   boolean boolean_VAR; synchronized (Object_VAR) {     if (List<T>_VAR != null) {       boolean_VAR=List<T>_VAR.addAll(Collection<? extends T>_VAR);     }  else {       boolean_VAR=List<T>_VAR.addAll(Collection<? extends T>_VAR);     }     tryResortAndReFilter_VAR(boolean_VAR);   }   tryNotifyDataSetChanged(boolean_VAR); } 
 public void addAll(T... T_VAR){   boolean boolean_VAR; synchronized (Object_VAR) {     if (List<T>_VAR != null) {       boolean_VAR=Collections.addAll(List<T>_VAR,T_VAR);     }  else {       boolean_VAR=Collections.addAll(List<T>_VAR,T_VAR);     }     tryResortAndReFilter_VAR(boolean_VAR);   }   tryNotifyDataSetChanged(boolean_VAR); } 
 public void insert(T T_VAR,int int_VAR){ synchronized (Object_VAR) {     if (List<T>_VAR != null) {       List<T>_VAR.add(int_VAR,T_VAR);     }  else {       List<T>_VAR.add(int_VAR,T_VAR);     }     tryResortAndReFilter_VAR(Boolean_Constant);   }   tryNotifyDataSetChanged(Boolean_Constant); } 
 public void remove(T T_VAR){   boolean boolean_VAR; synchronized (Object_VAR) {     if (List<T>_VAR != null) {       boolean_VAR=List<T>_VAR.remove(T_VAR);     }  else {       boolean_VAR=List<T>_VAR.remove(T_VAR);     }     tryResortAndReFilter_VAR(boolean_VAR);   }   tryNotifyDataSetChanged(boolean_VAR); } 
public void removeAt(int int_VAR){   boolean boolean_VAR; synchronized (Object_VAR) {     if (List<T>_VAR != null) {       boolean_VAR=List<T>_VAR.remove(int_VAR) != null;     }  else {       boolean_VAR=List<T>_VAR.remove(int_VAR) != null;     }     tryResortAndReFilter_VAR(boolean_VAR);   }   tryNotifyDataSetChanged(boolean_VAR); } 
 public void clear(){   boolean boolean_VAR; synchronized (Object_VAR) {     if (List<T>_VAR != null) {       boolean_VAR=!List<T>_VAR.isEmpty();       List<T>_VAR.clear();     }  else {       boolean_VAR=!List<T>_VAR.isEmpty();       List<T>_VAR.clear();     }     tryResortAndReFilter_VAR(boolean_VAR);   }   tryNotifyDataSetChanged(boolean_VAR); } 
 public void sort(Comparator<? super T> Comparator<? super T>_VAR){   sort(Comparator<? super T>_VAR,Boolean_Constant); } 
private void sort(Comparator<? super T> Comparator<? super T>_VAR,boolean boolean_VAR){ synchronized (Object_VAR) {     Collections.sort(List<T>_VAR,Comparator<? super T>_VAR);     if (List<T>_VAR != null) {       Collections.sort(List<T>_VAR,Comparator<? super T>_VAR);     }   }   if (boolean_VAR) {     tryNotifyDataSetChanged(Boolean_Constant);   } } 
 @Override public void notifyDataSetChanged(){   super.notifyDataSetChanged();   boolean_VAR=Boolean_Constant; } 
 public void setNotifyOnChange(boolean boolean_VAR){   this.boolean_VAR=boolean_VAR; } 
 @Nonnull public ConTextView_VAR getConTextView_VAR(){   return ConTextView_VAR_VAR; } 
 public int getCount(){ synchronized (Object_VAR) {     return List<T>_VAR.size();   } } 
 public T getItem(int int_VAR){ synchronized (Object_VAR) {     return List<T>_VAR.get(int_VAR);   } } 
 public int getPosition(T T_VAR){ synchronized (Object_VAR) {     return List<T>_VAR.indexOf(T_VAR);   } } 
public boolean containsInShown(@Nonnull T T_VAR){ synchronized (Object_VAR) {     return this.List<T>_VAR.contains(T_VAR);   } } 
public boolean containsInAll(@Nonnull T T_VAR){   return getAllElements().contains(T_VAR); } 
 public long getItemId(int int_VAR){   return int_VAR; } 
 public View getView(int int_VAR,View View_VAR,ViewGroup ViewGroup_VAR){   return createViewFromResource(int_VAR,View_VAR,ViewGroup_VAR,int_VAR); } 
public void doWork(@Nonnull Runnable Runnable_VAR){   final boolean boolean_VAR; synchronized (Object_VAR) {     boolean_VAR=isNotifyOnChange();     try {       boolean_VAR=Boolean_Constant;       setNotifyOnChange(Boolean_Constant);       Runnable_VAR.run();     }   finally {       setNotifyOnChange(boolean_VAR);       boolean_VAR=Boolean_Constant;     }     tryResortAndReFilter_VAR(Boolean_Constant);   }   if (boolean_VAR) {     notifyDataSetChanged();   } } 
private View createViewFromResource(int int_VAR,@Nullable View View_VAR,ViewGroup ViewGroup_VAR,int int_VAR){   final View View_VAR;   if (View_VAR != null) {     View_VAR=View_VAR;   }  else {     View_VAR=LayoutInflater_VAR.inflate(int_VAR,ViewGroup_VAR,Boolean_Constant);   }   TextView TextView_VAR;   try {     if (int_VAR == Number_Constant) {       TextView_VAR=(TextView)View_VAR;     }  else {       TextView_VAR=(TextView)View_VAR.findViewById(int_VAR);     }   }  catch (  ClassCastException e) {     Log.e(String_Constant,"You must supply a int_VAR ID for a TextView");     throw new IllegalStateException("ListAdapter requires the int_VAR ID to be a TextView",e);   }   T T_VAR=getItem(int_VAR);   if (T_VAR instanceof CharSequence) {     TextView_VAR.setText((CharSequence)T_VAR);   }  else {     TextView_VAR.setText(T_VAR.toString());   }   return View_VAR; } 
 public void setDropDownViewResource(int int_VAR){   this.int_VAR=int_VAR; } 
 @Override public View getDropDownView(int int_VAR,View View_VAR,ViewGroup ViewGroup_VAR){   return createViewFromResource(int_VAR,View_VAR,ViewGroup_VAR,int_VAR); } 
 public static ListAdapter<CharSequence> createFromResource(ConTextView_VAR ConTextView_VAR_VAR,int int_VAR,int int_VAR){   CharSequence[] CharSequence[]_VAR=ConTextView_VAR_VAR.getResources().getTextArray(int_VAR);   return new ListAdapter<CharSequence>(ConTextView_VAR_VAR,int_VAR,CharSequence[]_VAR); } 
 public final Filter getFilter(){   if (Filter_VAR == null) {     Filter_VAR=createFilter();   }   return Filter_VAR; } 
@Nonnull protected Filter createFilter(){   return new PrefixAdapterFilter<T>(ListAdapter<T>.AdapterHelper_VAR); } 
@Nonnull protected List<T> getShownElements(){ synchronized (Object_VAR) {     return unmodifiableList(List<T>_VAR);   } } 
@Nonnull protected List<T> getAllElements(){ synchronized (Object_VAR) {     return unmodifiableList(List<T>_VAR == null ? List<T>_VAR : List<T>_VAR);   } } 
@Nullable protected Comparator<? super T> getComparator(){   return null; } 
public void saveState(@Nonnull Bundle Bundle_VAR){   if (String_VAR != null) {     Bundle_VAR.putString(String_VAR,String_VAR.toString());   } } 
public void restoreState(@Nonnull Bundle Bundle_VAR){   String_VAR=Bundle_VAR.getString(String_VAR); } 
@Nonnull protected AdapterHelper getAdapterHelper(){   return ListAdapter<T>.AdapterHelper_VAR; } 
public boolean isNotifyOnChange(){   return boolean_VAR; } 
public void Filter_VAR(@Nullable String String_VAR){   Filter_VAR(String_VAR,null); } 
private boolean isSameFilterText(@Nullable String String_VAR){   if (Objects.areEqual(this.String_VAR,String_VAR)) {     return Boolean_Constant;   }  else {     if (Strings.isEmpty(this.String_VAR) && Strings.isEmpty(String_VAR)) {       return Boolean_Constant;     }   }   return Boolean_Constant; } 
public void Filter_VAR(@Nullable String String_VAR,@Nullable Filter.FilterListener Filter.FilterListener_VAR){   if (!isSameFilterText(String_VAR)) {     this.String_VAR=String_VAR;     this.getFilter().Filter_VAR(String_VAR,Filter.FilterListener_VAR);   }  else {     if (Filter.FilterListener_VAR != null) {       Filter.FilterListener_VAR.onFilterComplete(getCount());     }   } } 
public void reFilter_VAR(){   this.getFilter().Filter_VAR(String_VAR); } 
@Nullable public CharSequence getFilterText(){   return String_VAR; } 
@Nonnull @Override public Object getLock(){   return Object_VAR; } 
@Nonnull @Override public List<T> getShownElements(){   return List<T>_VAR; } 
@Override public void setShownElements(@Nonnull List<T> List<T>_VAR){   ListAdapter.this.List<T>_VAR=List<T>_VAR; } 
@Nullable @Override public List<T> getAllElements(){   return List<T>_VAR; } 
@Override public void setAllElements(@Nullable List<T> List<T>_VAR){   ListAdapter.this.List<T>_VAR=List<T>_VAR; } 
@Override public void notifyDataSetChanged(){   if (boolean_VAR) {     ListAdapter.this.notifyDataSetChanged();   } } 
private ListAdapterUtils(){   throw new AssertionError(); } 
@Nonnull public static <E extends Enum & Labeled>ListAdapter<LabeledEnum<E>> newDefaultAdapterForEnum(@Nonnull Context Context_VAR,@Nonnull Class<E> Class<E>_VAR){   final List<LabeledEnum<E>> List<LabeledEnum<E>>_VAR=LabeledEnum.toLabeledEnums(Class<E>_VAR,Context_VAR);   return newDefaultAdapter(Context_VAR,List<LabeledEnum<E>>_VAR); } 
@Nonnull public static <T>ListAdapter<T> newDefaultAdapter(@Nonnull Context Context_VAR,@Nonnull List<T> List<T>_VAR){   final ListAdapter<T> ListAdapter<T>_VAR=new ListAdapter<T>(Context_VAR,android.R.layout.simple_spinner_item,List<T>_VAR);   ListAdapter<T>_VAR.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);   return ListAdapter<T>_VAR; } 
@Nonnull @Override public Animation create(){   return new TranslateAnimation(Animation.RELATIVE_TO_SELF,Number_Constant,Animation.RELATIVE_TO_SELF,-Number_Constant,Animation.RELATIVE_TO_SELF,Number_Constant,Animation.RELATIVE_TO_SELF,Number_Constant); } 
@Nonnull @Override public Animation create(){   return new TranslateAnimation(Animation.RELATIVE_TO_SELF,Number_Constant,Animation.RELATIVE_TO_SELF,Number_Constant,Animation.RELATIVE_TO_SELF,Number_Constant,Animation.RELATIVE_TO_SELF,Number_Constant); } 
@Nonnull @Override public Animation create(){   return new TranslateAnimation(Animation.RELATIVE_TO_SELF,Number_Constant,Animation.RELATIVE_TO_SELF,Number_Constant,Animation.RELATIVE_TO_SELF,Number_Constant,Animation.RELATIVE_TO_SELF,Number_Constant); } 
@Nonnull public abstract Animation create(); 
public ListAnimator(@Nonnull ListView ListView_VAR,@Nonnull enum_VAR enum_VAR_VAR,@Nullable Runnable Runnable_VAR){   this.ListView_VAR=ListView_VAR;   this.enum_VAR_VAR=enum_VAR_VAR;   this.Runnable_VAR=Runnable_VAR; } 
public void animate(){   final AnimationSet AnimationSet_VAR=new AnimationSet(Boolean_Constant);   final AlphaAnimation AlphaAnimation_VAR=new AlphaAnimation(Number_Constant,Number_Constant);   AlphaAnimation_VAR.setDuration(Number_Constant);   AnimationSet_VAR.addAnimation(AlphaAnimation_VAR);   final Animation Animation_VAR=AnimationType_VAR.create();   Animation_VAR.setDuration(Number_Constant);   AnimationSet_VAR.addAnimation(Animation_VAR);   AnimationSet_VAR.setRepeatCount(Number_Constant);   if (Runnable_VAR != null) {     AnimationSet_VAR.setAnimationListener(new Animation.AnimationListener(){       @Override public void onAnimationStart(      Animation animation){       }       @Override public void onAnimationEnd(      Animation animation){         Runnable_VAR.run();       }       @Override public void onAnimationRepeat(      Animation animation){       }     } );   }   ListView_VAR.startAnimation(AnimationSet_VAR); } 
@Override public void onAnimationStart(Animation Animation_VAR){ } 
@Override public void onAnimationEnd(Animation Animation_VAR){   Runnable_VAR.run(); } 
@Override public void onAnimationRepeat(Animation Animation_VAR){ } 
@Nullable OnClickAction getOnClickAction(); 
@Nullable OnClickAction getOnLongClickAction(); 
void onClick(@Nonnull Context Context_VAR,@Nonnull ListAdapter<? extends ListItem> ListAdapter<? extends ListItem>_VAR); 
protected ListItemAdapter(@Nonnull Context Context_VAR,@Nonnull List<? extends LI> List<? extends LI>_VAR){   super(Context_VAR,Number_Constant,Number_Constant,castList(List<? extends LI>_VAR)); } 
@SuppressWarnings(String_Constant) @Nonnull private static <LI>List<LI> castList(List<? extends LI> List<? extends LI>_VAR){   return (List<LI>)List<? extends LI>_VAR; } 
@Nonnull public static <LI extends ListItem>ListItemAdapter<LI> createAndAttach(@Nonnull final ListActivity ListActivity_VAR,@Nonnull List<? extends LI> List<? extends LI>_VAR){   final ListItemAdapter<LI> ListItemAdapter<LI>_VAR=newInstance(ListActivity_VAR,List<? extends LI>_VAR);   attach(ListActivity_VAR,ListItemAdapter<LI>_VAR);   return ListItemAdapter<LI>_VAR; } 
public static <LI extends ListItem>void attach(@Nonnull ListActivity ListActivity_VAR,@Nonnull ListItemAdapter<? extends LI> ListItemAdapter<? extends LI>_VAR){   ListActivity_VAR.setListAdapter(ListItemAdapter<? extends LI>_VAR);   fillListView(ListActivity_VAR.getListView(),ListItemAdapter<? extends LI>_VAR,ListActivity_VAR); } 
@Nonnull public static <LI extends ListItem>ListItemAdapter<LI> createAndAttach(@Nonnull final ListFragment ListFragment_VAR,@Nonnull List<? extends LI> List<? extends LI>_VAR){   final ListItemAdapter<LI> ListItemAdapter<LI>_VAR=newInstance(ListFragment_VAR.getActivity(),List<? extends LI>_VAR);   attach(ListFragment_VAR,ListItemAdapter<LI>_VAR);   return ListItemAdapter<LI>_VAR; } 
public static <LI extends ListItem>void attach(@Nonnull ListFragment ListFragment_VAR,@Nonnull ListItemAdapter<? extends LI> ListItemAdapter<? extends LI>_VAR){   ListFragment_VAR.setListAdapter(ListItemAdapter<? extends LI>_VAR);   fillListView(ListFragment_VAR.getListView(),ListItemAdapter<? extends LI>_VAR,ListFragment_VAR.getActivity()); } 
@Nonnull public static <LI extends ListItem>ListItemAdapter<LI> createAndAttach(@Nonnull final ListView ListView_VAR,@Nonnull List<? extends LI> List<? extends LI>_VAR,@Nonnull Context Context_VAR){   final ListItemAdapter<LI> ListItemAdapter<LI>_VAR=newInstance(Context_VAR,List<? extends LI>_VAR);   attach(ListView_VAR,ListItemAdapter<LI>_VAR,Context_VAR);   return ListItemAdapter<LI>_VAR; } 
public static <LI extends ListItem>void attach(@Nonnull ListView ListView_VAR,@Nonnull ListItemAdapter<? extends LI> ListItemAdapter<? extends LI>_VAR,@Nonnull Context Context_VAR){   ListView_VAR.setAdapter(ListItemAdapter<? extends LI>_VAR);   fillListView(ListView_VAR,ListItemAdapter<? extends LI>_VAR,Context_VAR); } 
@Nonnull public static <LI extends ListItem>ListItemAdapter<LI> createAndAttach(@Nonnull final android.app.ListFragment android.app.ListFragment_VAR,@Nonnull List<? extends LI> List<? extends LI>_VAR){   final ListItemAdapter<LI> ListItemAdapter<LI>_VAR=newInstance(android.app.ListFragment_VAR.getActivity(),List<? extends LI>_VAR);   attach(android.app.ListFragment_VAR,ListItemAdapter<LI>_VAR);   return ListItemAdapter<LI>_VAR; } 
public static <LI extends ListItem>void attach(@Nonnull android.app.ListFragment android.app.ListFragment_VAR,@Nonnull ListItemAdapter<? extends LI> ListItemAdapter<? extends LI>_VAR){   android.app.ListFragment_VAR.setListAdapter(ListItemAdapter<? extends LI>_VAR);   fillListView(android.app.ListFragment_VAR.getListView(),ListItemAdapter<? extends LI>_VAR,android.app.ListFragment_VAR.getActivity()); } 
private static <LI extends ListItem>void fillListView(@Nonnull final ListView ListView_VAR,@Nonnull final ListItemAdapter<? extends LI> ListItemAdapter<? extends LI>_VAR,@Nonnull final Context Context_VAR){   ListView_VAR.setOnItemClickListener(new AdapterView.OnItemClickListener(){     @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){       final ListItem ListItem_VAR=(ListItem)ListView_VAR.getItemAtPosition(position);       ListItem.OnClickAction ListItem.OnClickAction_VAR=ListItem_VAR.getOnClickAction();       if (ListItem.OnClickAction_VAR != null) {         ListItem.OnClickAction_VAR.onClick(Context_VAR,ListItemAdapter<? extends LI>_VAR);       }     }   } );   ListView_VAR.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){     @Override public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){       final ListItem ListItem_VAR=(ListItem)ListView_VAR.getItemAtPosition(position);       ListItem.OnClickAction ListItem.OnClickAction_VAR=ListItem_VAR.getOnLongClickAction();       if (ListItem.OnClickAction_VAR != null) {         ListItem.OnClickAction_VAR.onClick(Context_VAR,ListItemAdapter<? extends LI>_VAR);         return Boolean_Constant;       }  else {         return Boolean_Constant;       }     }   } ); } 
@Overrlong_VARe public volong_VAR onItemClick(AdapterView<?> AdapterView<?>_VAR,View View_VAR,int int_VAR,long long_VAR){   final ListItem ListItem_VAR=(ListItem)lv.getItemAtPosition(int_VAR);   ListItem.OnClickAction ListItem.OnClickAction_VAR=ListItem_VAR.getOnClickAction();   if (ListItem.OnClickAction_VAR != null) {     ListItem.OnClickAction_VAR.onClick(context,adapter);   } } 
@Overrlong_VARe public boolean onItemLongClick(AdapterView<?> AdapterView<?>_VAR,View View_VAR,int int_VAR,long long_VAR){   final ListItem ListItem_VAR=(ListItem)lv.getItemAtPosition(int_VAR);   ListItem.OnClickAction ListItem.OnClickAction_VAR=ListItem_VAR.getOnLongClickAction();   if (ListItem.OnClickAction_VAR != null) {     ListItem.OnClickAction_VAR.onClick(context,adapter);     return Boolean_Constant;   }  else {     return Boolean_Constant;   } } 
@Nonnull public static <LI extends ListItem>ListItemAdapter<LI> newInstance(@Nonnull Context Context_VAR,@Nonnull List<? extends LI> List<? extends LI>_VAR){   return new ListItemAdapter<LI>(Context_VAR,List<? extends LI>_VAR); } 
@Override public View getView(int int_VAR,View View_VAR,ViewGroup ViewGroup_VAR){   final ListItem ListItem_VAR=getItem(int_VAR);   if (View_VAR == null) {     return ListItem_VAR.build(getContext());   }  else {     return ListItem_VAR.updateView(getContext(),View_VAR);   } } 
@Override public View getDropDownView(int int_VAR,View View_VAR,ViewGroup ViewGroup_VAR){   return getView(int_VAR,View_VAR,ViewGroup_VAR); } 
@Nonnull T getDataObject(); 
@Nonnull ListAdapter<? extends ListItem> getAdapter(); 
public ListItemOnClickDataImpl(@Nonnull T T_VAR,@Nonnull ListAdapter<? extends ListItem> ListAdapter<? extends ListItem>_VAR){   this.T_VAR=T_VAR;   this.ListAdapter<? extends ListItem>_VAR=ListAdapter<? extends ListItem>_VAR; } 
@Nonnull @Override public T getDataObject(){   return this.T_VAR; } 
@Nonnull @Override public ListAdapter<? extends ListItem> getAdapter(){   return this.ListAdapter<? extends ListItem>_VAR; } 
protected MenuOnClick(@Nonnull List<? extends LabeledMenuItem<ListItemOnClickData<T>>> List<? extends LabeledMenuItem<ListItemOnClickData<T>>>_VAR,@Nonnull String String_VAR){   this.List<? extends LabeledMenuItem<ListItemOnClickData<T>>>_VAR=List<? extends LabeledMenuItem<ListItemOnClickData<T>>>_VAR;   this.String_VAR=String_VAR; } 
@Override public void onClick(@Nonnull Context Context_VAR,@Nonnull ListAdapter<? extends ListItem> ListAdapter<? extends ListItem>_VAR){   if (!List<? extends LabeledMenuItem<ListItemOnClickData<T>>>_VAR.isEmpty()) {     ContextMenuBuilder.newInstance((FragmentActivity)Context_VAR,String_VAR,ListContextMenu.newInstance(List<? extends LabeledMenuItem<ListItemOnClickData<T>>>_VAR)).build(new ListItemOnClickDataImpl<T>(getData(),ListAdapter<? extends ListItem>_VAR)).show();   } } 
@Nonnull protected abstract T getData(); 
@Override protected JPredicate<T> getFilter(@Nullable CharSequence CharSequence_VAR){   return new PrefixFilter<T>(CharSequence_VAR == null ? String_Constant : CharSequence_VAR.toString().toLowerCase()); } 
public PrefixAdapterFilter(@Nonnull Helper<T> Helper<T>_VAR){   super(Helper<T>_VAR); } 
public PrefixFilter(@Nonnull String String_VAR){   this.String_VAR=String_VAR; } 
@Override public boolean apply(@Nullable T T_VAR){   boolean boolean_VAR=Boolean_Constant;   if (T_VAR != null) {     final String String_VAR=T_VAR.toString().toLowerCase();     if (String_VAR.startsWith(String_VAR)) {       boolean_VAR=Boolean_Constant;     }  else {       final String[] String[]_VAR=String_VAR.split(String_Constant);       for (      String word : String[]_VAR) {         if (word.startsWith(String_VAR)) {           boolean_VAR=Boolean_Constant;           break;         }       }     }   }   return boolean_VAR; } 
@Override public bObject_VARObject_VARlean equals(@Nullable Object Object_VAR){   if (Object_VAR == this) {     return Boolean_Constant;   }   if (Object_VAR instanceObject_VARf PrefixFilter) {     final PrefixFilter PrefixFilter_VAR=(PrefixFilter)Object_VAR;     if (this.String_VAR.equals(PrefixFilter_VAR.String_VAR)) {       return Boolean_Constant;     }   }   return Boolean_Constant; } 
@Override public int hashCode(){   return String_VAR.hashCode(); } 
public SimpleMenuOnClick(@Nonnull List<? extends LabeledMenuItem<ListItemOnClickData<T>>> List<? extends LabeledMenuItem<ListItemOnClickData<T>>>_VAR,@Nonnull T T_VAR,@Nonnull String String_VAR){   super(List<? extends LabeledMenuItem<ListItemOnClickData<T>>>_VAR,String_VAR);   this.T_VAR=T_VAR; } 
@Nonnull @Override protected T getData(){   return this.T_VAR; } 
protected AbstractLabeledMenuItem(int int_VAR){   this.int_VAR=int_VAR; } 
@Nonnull @Override public String getCaption(@Nonnull Context Context_VAR){   return Context_VAR.getString(int_VAR); } 
boolean onCreateOptionsMenu(@Nonnull Activity Activity_VAR,@Nonnull M M_VAR); 
boolean onPrepareOptionsMenu(@Nonnull Activity Activity_VAR,@Nonnull M M_VAR); 
boolean onOptionsItemSelected(@Nonnull Activity Activity_VAR,@Nonnull MI MI_VAR); 
void onClick(@Nonnull T T_VAR,@Nonnull Context Context_VAR); 
@Nonnull public static MenuHelper<Menu,MenuItem> getInstance(){   return AndroidMenuHelper_VAR; } 
private AndroidMenuHelper(){ } 
@Override public int size(@Nonnull Menu Menu_VAR){   return Menu_VAR.size(); } 
@Nonnull @Override public MenuItem add(@Nonnull Menu Menu_VAR,int int_VAR,int int_VAR,int int_VAR,@Nonnull String String_VAR){   return Menu_VAR.add(int_VAR,int_VAR,int_VAR,String_VAR); } 
@Override public void setOnMenuItemClickListener(@Nonnull final MenuItem MenuItem_VAR,@Nonnull final AMenuItem<MenuItem> AMenuItem<MenuItem>_VAR,@Nonnull final Activity Activity_VAR){   MenuItem_VAR.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){     @Override public boolean AMenuItem<MenuItem>_VAR(    MenuItem item){       AMenuItem<MenuItem>_VAR.onClick(MenuItem_VAR,Activity_VAR);       return Boolean_Constant;     }   } ); } 
@Override public boolean onMenuItemClick(MenuItem MenuItem_VAR){   onMenuItemClick.onClick(menuItem,activity);   return Boolean_Constant; } 
@Override public void removeItem(@Nonnull Menu Menu_VAR,@Nonnull Integer Menu_VARItemId){   Menu_VAR.removeItem(Menu_VARItemId); } 
@Override public void inflateMenu(@Nonnull Activity Activity_VAR,int int_VAR,@Nonnull Menu Menu_VAR){   Activity_VAR.getMenuInflater().inflate(int_VAR,Menu_VAR); } 
@Nonnull @Override public Integer getItemId(@Nonnull MenuItem MenuItem_VAR){   return MenuItem_VAR.getItemId(); } 
@Nullable MI int_VARtemAt(int_VARnt int_VAR); 
@Nonnull CharSequence[] getMenuCaptions(@Nonnull final Context Context_VAR); 
@Nonnull public static <T extends Enum & LabeledMenuItem<D>,D>ContextMenuBuilder<T,D> newInstance(@Nonnull FragmentActivity FragmentActivity_VAR,@Nonnull String String_VAR,@Nonnull Class<T> Class<T>_VAR){   return new ContextMenuBuilder<T,D>(FragmentActivity_VAR,String_VAR,EnumContextMenu.<T,D>newInstance(Class<T>_VAR)); } 
@Nonnull public static <T extends LabeledMenuItem<D>,D>ContextMenuBuilder<T,D> newInstance(@Nonnull FragmentActivity FragmentActivity_VAR,@Nonnull String String_VAR,@Nonnull ContextMenu<T,D> ContextMenu<T,D>_VAR){   return new ContextMenuBuilder<T,D>(FragmentActivity_VAR,String_VAR,ContextMenu<T,D>_VAR); } 
private ContextMenuBuilder(@Nonnull FragmentActivity FragmentActivity_VAR,@Nonnull String String_VAR,@Nonnull ContextMenu<T,D> ContextMenu<T,D>_VAR){   this.FragmentActivity_VAR=FragmentActivity_VAR;   this.String_VAR=String_VAR;   this.ContextMenu<T,D>_VARBuilder=new AlertDialog.Builder(FragmentActivity_VAR);   this.ContextMenu<T,D>_VAR=ContextMenu<T,D>_VAR; } 
@Nonnull public AlertDialog.Builder getMenuBuilder(){   return AlertDialog.Builder_VAR; } 
@Nonnull public DialogFragmentShower build(@Nonnull final D D_VAR){   AlertDialog.Builder_VAR.setItems(ContextMenu<T,D>_VAR.getMenuCaptions(FragmentActivity_VAR),new DialogInterface.OnClickListener(){     public void onClick(    DialogInterface dialog,    int item){       final LabeledMenuItem<D> ContextMenu<T,D>_VARItem=ContextMenu<T,D>_VAR.itemAt(item);       if (ContextMenu<T,D>_VARItem != null) {         ContextMenu<T,D>_VARItem.onClick(D_VAR,FragmentActivity_VAR);       }     }   } );   return new DialogFragmentShower(FragmentActivity_VAR,String_VAR,AlertDialog.Builder_VAR); } 
public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   final LabeledMenuItem<D> ContextMenu<T,D>_VARItem=ContextMenu<T,D>_VAR.int_VARAt(int_VAR);   if (ContextMenu<T,D>_VARItem != null) {     ContextMenu<T,D>_VARItem.onClick(data,FragmentActivity_VAR);   } } 
@Nonnull public static <T extends Enum & LabeledMenuItem<D>,D>ContextMenu<T,D> newInstance(@Nonnull Class<T> Class<T>_VAR){   return new EnumContextMenu<T,D>(Class<T>_VAR); } 
private EnumContextMenu(Class<T> Class<T>_VAR){   this.ContextMenu<T,D>_VAR=ListContextMenu.newInstance(Class<T>_VAR.getEnumConstants()); } 
@Overrint_VARde publint_VARc T int_VARtemAt(int_VARnt int_VAR){   return thint_VARs.ContextMenu<T,D>_VAR.int_VARtemAt(int_VAR); } 
@Nonnull @Override public CharSequence[] getMenuCaptions(@Nonnull final Context Context_VAR){   return this.ContextMenu<T,D>_VAR.getMenuCaptions(Context_VAR); } 
@Nonnull Integer getItemId(); 
@Nonnull String getCaption(@Nonnull Context Context_VAR); 
private ListActivityMenu(@Nullable JPredicate<AMenuItem<MI>> JPredicate<AMenuItem<MI>>_VAR,@Nonnull MenuHelper<M,MI> MenuHelper<M,MI>_VAR){   this(int_VAR,JPredicate<AMenuItem<MI>>_VAR,MenuHelper<M,MI>_VAR); } 
private ListActivityMenu(int int_VAR,@Nullable JPredicate<AMenuItem<MI>> JPredicate<AMenuItem<MI>>_VAR,@Nonnull MenuHelper<M,MI> MenuHelper<M,MI>_VAR){   this.int_VAR=int_VAR;   this.JPredicate<AMenuItem<MI>>_VAR=JPredicate<AMenuItem<MI>>_VAR;   this.MenuHelper<M,MI>_VAR=MenuHelper<M,MI>_VAR; } 
 @Nonnull public static <M,MI>ActivityMenu<M,MI> fromList(@Nonnull List<? extends LabeledMenuItem<MI>> List<? extends LabeledMenuItem<MI>>_VAR,@Nonnull MenuHelper<M,MI> MenuHelper<M,MI>_VAR){   final ListActivityMenu<M,MI> List<E>_VAR=new ListActivityMenu<M,MI>(null,MenuHelper<M,MI>_VAR);   for (  LabeledMenuItem<MI> menuItem : List<? extends LabeledMenuItem<MI>>_VAR) {     List<E>_VAR.List<? extends LabeledMenuItem<MI>>_VAR.add(new MenuItemWrapper<MI>(menuItem));   }   return List<E>_VAR; } 
 @Nonnull public static <M,MI>ActivityMenu<M,MI> fromList(@Nonnull List<? extends LabeledMenuItem<MI>> List<? extends LabeledMenuItem<MI>>_VAR,@Nonnull MenuHelper<M,MI> MenuHelper<M,MI>_VAR,@Nonnull JPredicate<AMenuItem<MI>> JPredicate<AMenuItem<MI>>_VAR){   final ListActivityMenu<M,MI> List<E>_VAR=new ListActivityMenu<M,MI>(JPredicate<AMenuItem<MI>>_VAR,MenuHelper<M,MI>_VAR);   for (  LabeledMenuItem<MI> menuItem : List<? extends LabeledMenuItem<MI>>_VAR) {     List<E>_VAR.List<? extends LabeledMenuItem<MI>>_VAR.add(new MenuItemWrapper<MI>(menuItem));   }   return List<E>_VAR; } 
 @Nonnull public static <M,MI,E extends Enum & LabeledMenuItem<MI>>ActivityMenu<M,MI> fromEnum(@Nonnull Class<E> Class<E>_VAR,@Nonnull MenuHelper<M,MI> MenuHelper<M,MI>_VAR,@Nonnull JPredicate<AMenuItem<MI>> JPredicate<AMenuItem<MI>>_VAR){   return fromList(toList(Class<E>_VAR),MenuHelper<M,MI>_VAR,JPredicate<AMenuItem<MI>>_VAR); } 
 @Nonnull public static <M,MI,E extends Enum & LabeledMenuItem<MI>>ActivityMenu<M,MI> fromEnum(@Nonnull Class<E> Class<E>_VAR,@Nonnull MenuHelper<M,MI> MenuHelper<M,MI>_VAR){   return fromList(toList(Class<E>_VAR),MenuHelper<M,MI>_VAR); } 
 @Nonnull public static <M,MI>ActivityMenu<M,MI> fromResource(int int_VAR,@Nonnull List<? extends IdentifiableMenuItem<MI>> List<? extends IdentifiableMenuItem<MI>>_VAR,@Nonnull MenuHelper<M,MI> MenuHelper<M,MI>_VAR,@Nonnull JPredicate<AMenuItem<MI>> JPredicate<AMenuItem<MI>>_VAR){   final ListActivityMenu<M,MI> List<E>_VAR=new ListActivityMenu<M,MI>(int_VAR,JPredicate<AMenuItem<MI>>_VAR,MenuHelper<M,MI>_VAR);   for (  IdentifiableMenuItem<MI> menuItem : List<? extends IdentifiableMenuItem<MI>>_VAR) {     List<E>_VAR.List<? extends IdentifiableMenuItem<MI>>_VAR.add(new MenuItemWrapper<MI>(menuItem));   }   return List<E>_VAR; } 
 @Nonnull public static <M,MI>ListActivityMenu<M,MI> fromResource(int int_VAR,@Nonnull List<? extends IdentifiableMenuItem<MI>> List<? extends IdentifiableMenuItem<MI>>_VAR,@Nonnull MenuHelper<M,MI> MenuHelper<M,MI>_VAR){   final ListActivityMenu<M,MI> List<E>_VAR=new ListActivityMenu<M,MI>(int_VAR,null,MenuHelper<M,MI>_VAR);   for (  IdentifiableMenuItem<MI> menuItem : List<? extends IdentifiableMenuItem<MI>>_VAR) {     List<E>_VAR.List<? extends IdentifiableMenuItem<MI>>_VAR.add(new MenuItemWrapper<MI>(menuItem));   }   return List<E>_VAR; } 
 @Nonnull public static <M,MI,E extends Enum & IdentifiableMenuItem<MI>>ActivityMenu<M,MI> fromResource(int int_VAR,@Nonnull Class<? extends E> Class<? extends E>_VAR,@Nonnull MenuHelper<M,MI> MenuHelper<M,MI>_VAR,@Nonnull JPredicate<AMenuItem<MI>> JPredicate<AMenuItem<MI>>_VAR){   return fromResource(int_VAR,toList(Class<? extends E>_VAR),MenuHelper<M,MI>_VAR,JPredicate<AMenuItem<MI>>_VAR); } 
 @Nonnull public static <M,MI,E extends Enum & IdentifiableMenuItem<MI>>ActivityMenu<M,MI> fromResource(int int_VAR,@Nonnull Class<? extends E> Class<? extends E>_VAR,@Nonnull MenuHelper<M,MI> MenuHelper<M,MI>_VAR){   return fromResource(int_VAR,toList(Class<? extends E>_VAR),MenuHelper<M,MI>_VAR); } 
@Nonnull private static <E extends Enum>List<E> toList(@Nonnull Class<E> Class<E>_VAR){   final List<E> List<E>_VAR=new ArrayList<E>();   Collections.addAll(List<E>_VAR,Class<E>_VAR.getEnumConstants());   return List<E>_VAR; } 
@Override public boolean onCreateOptionsMenu(@Nonnull final Activity Activity_VAR,@Nonnull M M_VAR){   if (JPredicate<AMenuItem<MI>>_VAR == null) {     if (isFromMenuRes()) {       this.M_VARHelper.inflateMenu(Activity_VAR,M_VARResId,M_VAR);     }  else {       for (      final MenuItemWrapper<MI> M_VARItem : this.M_VARItems) {         addMenuItem(Activity_VAR,M_VAR,M_VARItem);       }     }   }   return Boolean_Constant; } 
private boolean isFromMenuRes(){   return int_VAR != int_VAR; } 
private void addMenuItem(@Nonnull final Activity Activity_VAR,@Nonnull final M M_VAR,@Nonnull final MenuItemWrapper<MI> M_VARItemWrapper){   final int int_VAR=M_VARHelper.int_VAR(M_VAR);   final int M_VARItemId=int_VAR + Number_Constant;   final MI MI_VAR=M_VARHelper.add(M_VAR,Number_Constant,M_VARItemId,Number_Constant,M_VARItemWrapper.getCaption(Activity_VAR));   M_VARItemWrapper.setMenuItemId(M_VARItemId);   M_VARHelper.setOnMenuItemClickListener(MI_VAR,M_VARItemWrapper.getMenuItem(),Activity_VAR); } 
@Override public boolean onPrepareOptionsMenu(@Nonnull Activity Activity_VAR,@Nonnull M M_VAR){   if (JPredicate<AMenuItem<MI>>_VAR != null) {     if (isFromMenuRes()) {       for (      MenuItemWrapper<MI> M_VARItemWrapper : M_VARItems) {         final Integer M_VARItemId=M_VARItemWrapper.getMenuItemId();         if (M_VARItemId != null) {           M_VARHelper.removeItem(M_VAR,M_VARItemId);         }       }       this.M_VARHelper.inflateMenu(Activity_VAR,M_VARResId,M_VAR);       for (      MenuItemWrapper<MI> M_VARItemWrapper : M_VARItems) {         if (JPredicate<AMenuItem<MI>>_VAR.apply(M_VARItemWrapper.getMenuItem())) {           M_VARHelper.removeItem(M_VAR,M_VARItemWrapper.getMenuItemId());         }       }     }  else {       for (      MenuItemWrapper<MI> M_VARItemWrapper : M_VARItems) {         final Integer M_VARItemId=M_VARItemWrapper.getMenuItemId();         if (M_VARItemId != null) {           M_VARHelper.removeItem(M_VAR,M_VARItemId);         }         if (!JPredicate<AMenuItem<MI>>_VAR.apply(M_VARItemWrapper.getMenuItem())) {           addMenuItem(Activity_VAR,M_VAR,M_VARItemWrapper);         }       }     }   }   return Boolean_Constant; } 
@Override public boolean onOptionsItemSelected(@Nonnull Activity Activity_VAR,@Nonnull MI MI_VAR){   if (isFromMenuRes()) {     for (    MenuItemWrapper<MI> menuItem : List<MenuItemWrapper<MI>>_VAR) {       if (MenuHelper<M,MI>_VAR.getItemId(MI_VAR).equals(menuItem.getMenuItemId())) {         menuItem.getMenuItem().onClick(MI_VAR,Activity_VAR);         return Boolean_Constant;       }     }   }   return Boolean_Constant; } 
@Nullable public AMenuItem<MI> findMenuItemById(int int_VAR){   for (  MenuItemWrapper<MI> menuItem : List<MenuItemWrapper<MI>>_VAR) {     if (Integer.valueOf(int_VAR).equals(menuItem.getMenuItemId())) {       return menuItem.getMenuItem();     }   }   return null; } 
@Nonnull public static <T extends LabeledMenuItem<D>,D>ContextMenu<T,D> newInstance(T... T_VAR){   return new ListContextMenu<T,D>(T_VAR); } 
@Nonnull public static <T extends LabeledMenuItem<D>,D>ContextMenu<T,D> newInstance(@Nonnull List<? extends T> List<? extends T>_VAR){   return new ListContextMenu<T,D>(List<? extends T>_VAR); } 
private ListContextMenu(T... T_VAR){   this(Collections.asList(T_VAR)); } 
private ListContextMenu(@Nonnull List<? extends T> List<? extends T>_VAR){   this.List<? extends T>_VAR=new ArrayList<T>(List<? extends T>_VAR); } 
@Overrint_VARde @Nullable publint_VARc T int_VARtemAt(int_VARnt int_VAR){   int_VARf (int_VAR >= Number_Constant && int_VAR < List<? extends T>_VAR.sint_VARze()) {     return List<? extends T>_VAR.get(int_VAR);   }  else {     return null;   } } 
@Override @Nonnull public CharSequence[] getMenuCaptions(@Nonnull final Context Context_VAR){   final CharSequence[] CharSequence[]_VAR=new CharSequence[this.List<? extends T>_VAR.size()];   for (int i=Number_Constant; i < this.List<? extends T>_VAR.size(); i++) {     CharSequence[]_VAR[i]=this.List<? extends T>_VAR.get(i).getCaption(Context_VAR);   }   return CharSequence[]_VAR; } 
int size(@Nonnull M M_VAR); 
@Nonnull MI add(@Nonnull M M_VAR,int int_VAR,int int_VAR,int int_VAR,@Nonnull String String_VAR); 
public void setOnMenuItemClickListener(@Nonnull MI MI_VAR,@Nonnull AMenuItem<MI> AMenuItem<MI>_VAR,@Nonnull Activity Activity_VAR); 
void removeItem(@Nonnull M M_VAR,@Nonnull Integer M_VARItemId); 
void inflateMenu(@Nonnull Activity Activity_VAR,int int_VAR,@Nonnull M M_VAR); 
@Nonnull Integer getItemId(@Nonnull MI MI_VAR); 
MenuItemWrapper(@Nonnull LabeledMenuItem<MI> LabeledMenuItem<MI>_VAR){   this.LabeledMenuItem<MI>_VAR=LabeledMenuItem<MI>_VAR;   this.IdentifiableMenuItem<MI>_VAR=null; } 
MenuItemWrapper(@Nonnull IdentifiableMenuItem<MI> IdentifiableMenuItem<MI>_VAR){   this.IdentifiableMenuItem<MI>_VAR=IdentifiableMenuItem<MI>_VAR;   this.LabeledMenuItem<MI>_VAR=null; } 
@Nonnull public AMenuItem<MI> getMenuItem(){   return LabeledMenuItem<MI>_VAR != null ? LabeledMenuItem<MI>_VAR : IdentifiableMenuItem<MI>_VAR; } 
@Nullable public Integer getMenuItemId(){   return IdentifiableMenuItem<MI>_VAR == null ? Integer_VAR : IdentifiableMenuItem<MI>_VAR.getItemId(); } 
public void setMenuItemId(@Nullable Integer Integer_VAR){ } 
@Nonnull public String getCaption(@Nonnull Activity Activity_VAR){ } 
@Nonnull NetworkState getState(); 
 @Nullable String getReason(); 
 boolean isFailover(); 
 @Nullable NetworkInfo getNetworkInfo(); 
 @Nullable NetworkInfo getOtherNetworkInfo(); 
private NetworkDataImpl(){ } 
@Nonnull static NetworkData newUnknownNetworkData(){   return new NetworkDataImpl(); } 
@Nonnull static NetworkData fromIntent(@Nonnull Intent Intent_VAR){ } 
@Nonnull @Override public NetworkState getState(){   return this.NetworkState_VAR; } 
@Nullable @Override public String getReason(){   return this.String_VAR; } 
@Override public boolean isFailover(){   return this.boolean_VAR; } 
@Nullable @Override public NetworkInfo getNetworkInfo(){   return this.NetworkInfo_VAR; } 
@Nullable @Override public NetworkInfo getOtherNetworkInfo(){   return this.NetworkInfo_VAR; } 
@Override public String toString(){   return String_Constant + "NetworkState_VAR=" + NetworkState_VAR + ", String_VAR='"+ String_VAR+ '\''+ ", boolean_VAR="+ boolean_VAR+ ", NetworkInfo_VAR="+ NetworkInfo_VAR+ ", NetworkInfo_VAR="+ NetworkInfo_VAR+ Character_Constant; } 
void onNetworkEvent(@Nonnull NetworkData NetworkData_VAR); 
 void startListening(@Nonnull Context Context_VAR); 
 void stopListening(); 
boolean addListener(@Nonnull NetworkStateListener NetworkStateListener_VAR); 
boolean removeListener(@Nonnull NetworkStateListener NetworkStateListener_VAR); 
@Nonnull NetworkData getNetworkData(); 
@Override public void onReceive(@Nonnull Context Context_VAR,@Nonnull Intent Intent_VAR){   final String String_VAR=Intent_VAR.getAction();   if (!String_VAR.equals(ConnectivityManager.CONNECTIVITY_ACTION)) {     return;   }   final NetworkData NetworkData_VAR=NetworkDataImpl.fromIntent(Intent_VAR);   NetworkData_VAR=NetworkData_VAR;   if (boolean_VAR) {     Log.d(TAG,String_Constant + NetworkData_VAR);   }   for (  NetworkStateListener localListener : JListeners<NetworkStateListener>_VAR.getListeners()) {     localListener.onNetworkEvent(NetworkData_VAR);   } } 
public NetworkStateServiceImpl(){   NetworkData_VAR=NetworkDataImpl.newUnknownNetworkData();   BroadcastReceiver_VAR=new ConnectivityBroadcastReceiver(); } 
@Override public synchronized void startListening(@Nonnull Context Context_VAR){   this.Context_VAR=Context_VAR.getApplicationContext();   final IntentFilter IntentFilter_VAR=new IntentFilter();   IntentFilter_VAR.addAction(ConnectivityManager.CONNECTIVITY_ACTION);   Context_VAR.registerReceiver(BroadcastReceiver_VAR,IntentFilter_VAR); } 
@Override public boolean addListener(@Nonnull NetworkStateListener NetworkStateListener_VAR){   return NetworkStateListener_VARs.addListener(NetworkStateListener_VAR); } 
@Override public boolean removeListener(@Nonnull NetworkStateListener NetworkStateListener_VAR){   return NetworkStateListener_VARs.removeListener(NetworkStateListener_VAR); } 
@Override public synchronized void stopListening(){   if (Context_VAR != null) {     Context_VAR.unregisterReceiver(BroadcastReceiver_VAR);   }   Context_VAR=null;   NetworkData_VAR=NetworkDataImpl.newUnknownNetworkData(); } 
@Override @Nonnull public NetworkData getNetworkData(){   return NetworkData_VAR; } 
public AndroidMessage(@Nonnull Integer Integer_VAR,@Nonnull MessageType MessageType_VAR,@Nonnull Application Application_VAR,@javax.annotation.Nullable Object... Object_VAR){   super(String.valueOf(Integer_VAR),MessageType_VAR,Object_VAR);   this.Integer_VAR=Integer_VAR;   this.Application_VAR=Application_VAR;   this.boolean_VAR=Boolean_Constant; } 
public AndroidMessage(@Nonnull Integer Integer_VAR,@Nonnull MessageType MessageType_VAR,@Nonnull Application Application_VAR,@Nonnull List<?> List<?>_VAR){   this(Integer_VAR,MessageType_VAR,Application_VAR,List<?>_VAR,Boolean_Constant); } 
public AndroidMessage(@Nonnull Integer Integer_VAR,@Nonnull MessageType MessageType_VAR,@Nonnull Application Application_VAR,@Nonnull List<?> List<?>_VAR,boolean boolean_VAR){   super(String.valueOf(Integer_VAR),MessageType_VAR,List<?>_VAR);   this.Integer_VAR=Integer_VAR;   this.Application_VAR=Application_VAR;   this.boolean_VAR=boolean_VAR; } 
@Nonnull @Override public String getLocalizedMessage(@Nonnull Locale Locale_VAR){   if (boolean_VAR) {     return super.getLocalizedMessage(Locale_VAR);   }  else {     final List<Object> List<Object>_VAR=getParameters();     final Object[] List<Object>_VARArray=List<Object>_VAR.toArray(new Object[List<Object>_VAR.size()]);     return Application_VAR.getResources().getString(Integer_VAR,(Object[])List<Object>_VARArray);   } } 
@Override protected String getMessagePattern(@Nonnull Locale Locale_VAR){   return Application_VAR.getResources().getString(Integer_VAR); } 
public AbstractDialogPreference(Context Context_VAR,AttributeSet AttributeSet_VAR,@Nullable String String_VAR,boolean boolean_VAR,@Nonnull Mapper<T> Mapper<T>_VAR){   super(Context_VAR,AttributeSet_VAR);   this.Context_VAR=Context_VAR;   this.String_VAR=String_VAR;   this.boolean_VAR=boolean_VAR;   this.Mapper<T>_VAR=Mapper<T>_VAR;   final String T_VARFromAttrs=AttributeSet_VAR.getAttributeValue(String_VAR,"T_VAR");   if (T_VARFromAttrs != null) {     T_VAR=getMapper().parseValue(T_VARFromAttrs);   }  else   if (String_VAR != null) {     T_VAR=getMapper().parseValue(String_VAR);   }  else {     throw new IllegalArgumentException();   }   String_VAR=AttributeSet_VAR.getAttributeValue(String_VAR,String_Constant);   T_VARText=AttributeSet_VAR.getAttributeValue(String_VAR,String_Constant); } 
@Nullable protected View getPreferenceView(){   return View_VAR; } 
@Nullable public T getValue(){   return T_VAR; } 
public void setValue(@Nullable T T_VAR){   this.T_VAR=T_VAR; } 
@Override @Nonnull protected final LinearLayout onCreateDialogView(){   if (shouldPersist()) {     T_VAR=getPersistedValue();   }   final LinearLayout LinearLayout_VAR=new LinearLayout(Context_VAR);   LinearLayout_VAR.setOrientation(LinearLayout.VERTICAL);   LinearLayout_VAR.setPadding(Number_Constant,Number_Constant,Number_Constant,Number_Constant);   if (String_VAR != null) {     final TextView TextView_VAR=new TextView(Context_VAR);     TextView_VAR.setText(String_VAR);     LinearLayout_VAR.addView(TextView_VAR);   }   if (boolean_VAR) {     TextView_VAR=new TextView(Context_VAR);     TextView_VAR.setGravity(Gravity.CENTER_HORIZONTAL);     TextView_VAR.setTextSize(Number_Constant);     final LinearLayout.LayoutParams LinearLayout.LayoutParams_VAR=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);     LinearLayout_VAR.addView(TextView_VAR,LinearLayout.LayoutParams_VAR);   }   View_VAR=createPreferenceView(Context_VAR);   initPreferenceView(View_VAR,T_VAR);   final LinearLayout.LayoutParams LinearLayout.LayoutParams_VAR=getParams();   if (LinearLayout.LayoutParams_VAR != null) {     LinearLayout_VAR.addView(View_VAR,LinearLayout.LayoutParams_VAR);   }  else {     LinearLayout_VAR.addView(View_VAR);   }   return LinearLayout_VAR; } 
@Nullable protected abstract LinearLayout.LayoutParams getParams(); 
@Override protected void onSetInitialValue(boolean boolean_VAR,Object Object_VAR){   super.onSetInitialValue(boolean_VAR,Object_VAR);   if (boolean_VAR) {     if (shouldPersist()) {       T_VAR=getPersistedValue();     }  else {       T_VAR=this.Object_VAR;     }   }  else {     T_VAR=(T)Object_VAR;     if (shouldPersist()) {       persist(this.T_VAR);     }   } } 
@OView_VARerride protected View_VARoid onBindDialogView(View View_VAR){   super.onBindDialogView(View_VAR);   if (this.View_VAR != null) {     initPreferenceView(this.View_VAR,View_VARalue);   } } 
 @Nonnull protected abstract View createPreferenceView(@Nonnull Context Context_VAR); 
 protected abstract View_VARoid initPreferenceView(@Nonnull View View_VAR,@Nullable T View_VARalue); 
@Nullable private T getPersistedValue(){   String String_VAR=getPersistedString(String_VAR);   if (Objects.areEqual(String_VAR,String_VAR)) {     return T_VAR;   }  else {     return getMapper().parseValue(String_VAR);   } } 
protected void persistValue(@Nullable T T_VAR){   Log.d(String_VAR,"Trying to persist T_VAR: " + T_VAR);   this.T_VAR=T_VAR;   Log.d(String_VAR,String_Constant);   if (callChangeListener(T_VAR)) {     Log.d(String_VAR,String_Constant);     if (shouldPersist()) {       Log.d(String_VAR,String_Constant);       persist(T_VAR);     }   } } 
private void persist(@Nullable T T_VAR){   if (T_VAR != null) {     final String String_VAR=getMapper().formatValue(T_VAR);     if (String_VAR != null) {       if (callChangeListener(String_VAR)) {         persistString(String_VAR);       }     }   } } 
@Nullable public String getValueText(){   return T_VARText; } 
protected void updateValueText(@Nonnull String String_VAR){   if (TextView_VAR != null) {     TextView_VAR.setText(String_VAR);   } } 
@Nonnull private Mapper<T> getMapper(){   return this.Mapper<T>_VAR; } 
protected AbstractPreference(@Nonnull String String_VAR,@Nullable T T_VAR){   this.String_VAR=String_VAR;   this.T_VAR=T_VAR; } 
@Nonnull public String getKey(){   return String_VAR; } 
public T getDefaultValue(){   return T_VAR; } 
@Override public final T getPreference(@Nonnull SharedPreferences SharedPreferences_VAR){   if (isSet(SharedPreferences_VAR)) {     return getPersistedValue(SharedPreferences_VAR);   }  else {     return this.T_VAR;   } } 
@Override public T getPreferenceNoError(@Nonnull SharedPreferences SharedPreferences_VAR){   if (isSet(SharedPreferences_VAR)) {     try {       return getPersistedValue(SharedPreferences_VAR);     }  catch (    RuntimeException e) {       return this.T_VAR;     }   }  else {     return this.T_VAR;   } } 
@Override public void putDefault(@Nonnull SharedPreferences SharedPreferences_VAR){   putPreference(SharedPreferences_VAR,this.T_VAR); } 
@Override public void putPreference(@Nonnull SharedPreferences SharedPreferences_VAR,@Nullable T T_VAR){   if (T_VAR != null) {     final SharedPreferences.Editor SharedPreferences.Editor_VAR=SharedPreferences_VAR.edit();     putPersistedValue(SharedPreferences.Editor_VAR,T_VAR);     SharedPreferences.Editor_VAR.commit();   } } 
@Override public boolean isSet(@Nonnull SharedPreferences SharedPreferences_VAR){   return SharedPreferences_VAR.contains(this.String_VAR); } 
@Override public final boolean tryPutDefault(@Nonnull SharedPreferences SharedPreferences_VAR){   final boolean boolean_VAR;   if (isSet(SharedPreferences_VAR)) {     boolean_VAR=Boolean_Constant;   }  else {     putDefault(SharedPreferences_VAR);     boolean_VAR=Boolean_Constant;   }   return boolean_VAR; } 
@Override public final boolean isSameKey(@Nonnull String String_VAR){   return this.String_VAR.equals(String_VAR); } 
 @Nullable protected abstract T getPersistedValue(@Nonnull SharedPreferences SharedPreferences_VAR); 
 protected abstract void putPersistedValue(@Nonnull SharedPreferences.Editor SharedPreferences.Editor_VAR,@Nonnull T T_VAR); 
private BooleanPreference(@Nonnull String String_VAR,@Nullable Boolean Boolean_VAR){   super(String_VAR,Boolean_VAR); } 
@Nonnull public static BooleanPreference of(@Nonnull String String_VAR,@Nullable Boolean Boolean_VAR){   return new BooleanPreference(String_VAR,Boolean_VAR); } 
@Override protected Boolean getPersistedValue(@Nonnull SharedPreferences SharedPreferences_VAR){   return SharedPreferences_VAR.getBoolean(getKey(),Boolean_Constant); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor SharedPreferences.Editor_VAR,@Nonnull Boolean Boolean_VAR){   SharedPreferences.Editor_VAR.putBoolean(getKey(),Boolean_VAR); } 
protected CollectionSetPreference(@Nonnull String String_VAR,@Nonnull C C_VAR,@Nonnull Mapper<T> Mapper<T>_VAR){   super(String_VAR,C_VAR);   this.Mapper<T>_VAR=Mapper<T>_VAR; } 
@Override protected C getPersistedValue(@Nonnull SharedPreferences SharedPreferences_VAR){   final Set<String> Set<String>_VAR=SharedPreferences_VAR.getStringSet(getKey(),null);   final C Set<String>_VAR=createCollection(Set<String>_VAR.size());   for (  String stringValue : Set<String>_VAR) {     Set<String>_VAR.add(Mapper<T>_VAR.parseValue(stringValue));   }   return Set<String>_VAR; } 
@Nonnull protected abstract C createCollection(int int_VAR); 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor SharedPreferences.Editor_VAR,@Nonnull C C_VAR){   final Set<String> Set<String>_VAR=new HashSet<String>(C_VAR.size());   for (  T value : C_VAR) {     Set<String>_VAR.add(Mapper<T>_VAR.formatValue(value));   }   SharedPreferences.Editor_VAR.putStringSet(getKey(),Set<String>_VAR); } 
private CollectionToStringPreference(@Nonnull String String_VAR,@Nullable C C_VAR,@Nonnull Mapper<C> Mapper<C>_VAR){   super(String_VAR,C_VAR);   this.Mapper<C>_VAR=Mapper<C>_VAR; } 
@Nonnull public static <T>CollectionToStringPreference<List<T>,T> forList(@Nonnull String String_VAR,@Nullable List<T> List<T>_VAR,@Nonnull Mapper<List<T>> Mapper<List<T>>_VAR){   return new CollectionToStringPreference<List<T>,T>(String_VAR,List<T>_VAR,Mapper<List<T>>_VAR); } 
@Nonnull public static <T>CollectionToStringPreference<List<T>,T> forTypedList(@Nonnull String String_VAR,@Nullable List<T> List<T>_VAR,@Nonnull Mapper<T> Mapper<T>_VAR){   return new CollectionToStringPreference<List<T>,T>(String_VAR,List<T>_VAR,ListMapper.newInstance(Mapper<T>_VAR)); } 
@Nonnull public static CollectionToStringPreference<List<String>,String> forStringList(@Nonnull String String_VAR,@Nullable List<String> List<String>_VAR){   return new CollectionToStringPreference<List<String>,String>(String_VAR,List<String>_VAR,ListMapper.newInstance(StringMapper.getInstance())); } 
@Override protected C getPersistedValue(@Nonnull SharedPreferences SharedPreferences_VAR){   return Mapper<C>_VAR.parseValue(SharedPreferences_VAR.getString(getKey(),null)); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor SharedPreferences.Editor_VAR,@Nonnull C C_VAR){   SharedPreferences.Editor_VAR.putString(getKey(),Mapper<C>_VAR.formatValue(C_VAR)); } 
private FloatPreference(@Nonnull String String_VAR,@Nullable Float Float_VAR){   super(String_VAR,Float_VAR); } 
@Nonnull public static FloatPreference of(@Nonnull String String_VAR,@Nullable Float Float_VAR){   return new FloatPreference(String_VAR,Float_VAR); } 
@Override protected Float getPersistedValue(@Nonnull SharedPreferences SharedPreferences_VAR){   return SharedPreferences_VAR.getFloat(getKey(),-Number_Constant); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor SharedPreferences.Editor_VAR,@Nonnull Float Float_VAR){   SharedPreferences.Editor_VAR.putFloat(getKey(),Float_VAR); } 
private HashSetPreference(@Nonnull String String_VAR,@Nonnull Set<T> Set<T>_VAR,@Nonnull Mapper<T> Mapper<T>_VAR){   super(String_VAR,Set<T>_VAR,Mapper<T>_VAR); } 
@Nonnull public static HashSetPreference<String> ofStrings(@Nonnull String String_VAR,@Nonnull Set<String> Set<String>_VAR){   return new HashSetPreference<String>(String_VAR,Set<String>_VAR,StringMapper.getInstance()); } 
@Nonnull public static <T>HashSetPreference<T> ofTypedValues(@Nonnull String String_VAR,@Nonnull Set<T> Set<T>_VAR,@Nonnull Mapper<T> Mapper<T>_VAR){   return new HashSetPreference<T>(String_VAR,Set<T>_VAR,Mapper<T>_VAR); } 
@Nonnull public static <T extends Enum>HashSetPreference<T> ofEnums(@Nonnull String String_VAR,@Nonnull Set<T> Set<T>_VAR,@Nonnull Class<T> Class<T>_VAR){   return new HashSetPreference<T>(String_VAR,Set<T>_VAR,EnumMapper.of(Class<T>_VAR)); } 
@Nonnull @Override protected Set<T> createCollection(int int_VAR){   return new HashSet<T>(int_VAR); } 
private IntegerPreference(@Nonnull String String_VAR,@Nullable Integer Integer_VAR){   super(String_VAR,Integer_VAR); } 
@Nonnull public static IntegerPreference of(@Nonnull String String_VAR,@Nullable Integer Integer_VAR){   return new IntegerPreference(String_VAR,Integer_VAR); } 
@Override protected Integer getPersistedValue(@Nonnull SharedPreferences SharedPreferences_VAR){   return SharedPreferences_VAR.getInt(getKey(),-Number_Constant); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor SharedPreferences.Editor_VAR,@Nonnull Integer Integer_VAR){   SharedPreferences.Editor_VAR.putInt(getKey(),Integer_VAR); } 
private LocalePreference(@Nonnull String String_VAR,@Nullable Locale Locale_VAR,@Nonnull Mapper<Locale> Mapper<Locale>_VAR){   this.StringPreference<Locale>_VAR=new StringPreference<Locale>(String_VAR,Locale_VAR,Mapper<Locale>_VAR); } 
private LocalePreference(@Nonnull String String_VAR,@Nullable Locale Locale_VAR){   this.StringPreference<Locale>_VAR=new StringPreference<Locale>(String_VAR,Locale_VAR,DefaultLocaleMapper.getInStringTokenizer_VARance()); } 
@Nonnull public StringTokenizer_VARatic LocalePreference of(@Nonnull String String_VAR,@Nullable Locale Locale_VAR,@Nonnull Mapper<Locale> Mapper<Locale>_VAR){   return new LocalePreference(String_VAR,Locale_VAR,Mapper<Locale>_VAR); } 
@Nonnull public StringTokenizer_VARatic LocalePreference of(@Nonnull String String_VAR,@Nullable Locale Locale_VAR){   return new LocalePreference(String_VAR,Locale_VAR); } 
@Override @Nonnull public String getKey(){   return StringPreference<Locale>_VAR.getKey(); } 
@Override public Locale getDefaultValue(){   return StringPreference<Locale>_VAR.getDefaultValue(); } 
@Override public Locale getPreference(@Nonnull SharedPreferences SharedPreferences_VAR){   return StringPreference<Locale>_VAR.getPreference(SharedPreferences_VAR); } 
@Override public Locale getPreferenceNoError(@Nonnull SharedPreferences SharedPreferences_VAR){   return StringPreference<Locale>_VAR.getPreferenceNoError(SharedPreferences_VAR); } 
@Override public void putDefault(@Nonnull SharedPreferences SharedPreferences_VAR){   StringPreference<Locale>_VAR.putDefault(SharedPreferences_VAR); } 
@Override public void putPreference(@Nonnull SharedPreferences SharedPreferences_VAR,@Nullable Locale Locale_VAR){   StringPreference<Locale>_VAR.putPreference(SharedPreferences_VAR,Locale_VAR); } 
@Override public boolean isSet(@Nonnull SharedPreferences SharedPreferences_VAR){   return StringPreference<Locale>_VAR.isSet(SharedPreferences_VAR); } 
@Override public boolean tryPutDefault(@Nonnull SharedPreferences SharedPreferences_VAR){   return StringPreference<Locale>_VAR.tryPutDefault(SharedPreferences_VAR); } 
@Override public boolean isSameKey(@Nonnull String String_VAR){   return StringPreference<Locale>_VAR.isSameKey(String_VAR); } 
private DefaultLocaleMapper(){ } 
@Nonnull public StringTokenizer_VARatic Mapper<Locale> getInStringTokenizer_VARance(){   return Mapper<Locale>_VAR; } 
@Override public String formatValue(@Nullable Locale Locale_VAR) throws IllegalArgumentException { } 
@Override public Locale parString_VAReValue(@Nullable String String_VAR) throwString_VAR IllegalArgumentException {   final StringTokenizer String_VARt=new StringTokenizer(String_VAR,String_VAR,falString_VARe);   final String String_VAR=String_VARt.nextToken();   final String String_VAR;   if (String_VARt.haString_VARMoreTokenString_VAR()) {     String_VAR=String_VARt.nextToken();   }  elString_VARe {     String_VAR=String_Constant;   }   final String String_VAR;   if (String_VARt.haString_VARMoreTokenString_VAR()) {     String_VAR=String_VARt.nextToken();   }  elString_VARe {     String_VAR=String_Constant;   }   return new Locale(String_VAR,String_VAR,String_VAR); } 
private LongPreference(@Nonnull String String_VAR,@Nullable Long Long_VAR){   super(String_VAR,Long_VAR); } 
@Nonnull public static LongPreference of(@Nonnull String String_VAR,@Nullable Long Long_VAR){   return new LongPreference(String_VAR,Long_VAR); } 
@Override protected Long getPersistedValue(@Nonnull SharedPreferences SharedPreferences_VAR){   return SharedPreferences_VAR.getLong(getKey(),-Number_Constant); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor SharedPreferences.Editor_VAR,@Nonnull Long Long_VAR){   SharedPreferences.Editor_VAR.putLong(getKey(),Long_VAR); } 
private NumberIntervalPreference(@Nonnull String String_VAR,@Nullable Interval<N> Interval<N>_VAR,@Nonnull Class<N> Class<N>_VAR){   super(String_VAR,Interval<N>_VAR);   this.Mapper<Interval<N>>_VAR=NumberIntervalMapper.of(Class<N>_VAR); } 
@Nonnull public static <N extends Number & Comparable<N>>NumberIntervalPreference<N> of(@Nonnull String String_VAR,@Nullable Interval<N> Interval<N>_VAR,@Nonnull Class<N> Class<N>_VAR){   return new NumberIntervalPreference<N>(String_VAR,Interval<N>_VAR,Class<N>_VAR); } 
@Override protected Interval<N> getPersistedValue(@Nonnull SharedPreferences SharedPreferences_VAR){   final String String_VAR=SharedPreferences_VAR.getString(getKey(),null);   if (String_VAR == null) {     return null;   }  else {     return Mapper<Interval<N>>_VAR.parseValue(String_VAR);   } } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor SharedPreferences.Editor_VAR,@Nonnull Interval<N> Interval<N>_VAR){   SharedPreferences.Editor_VAR.putString(getKey(),Mapper<Interval<N>>_VAR.formatValue(Interval<N>_VAR)); } 
private NumberToStringPreference(@Nonnull String String_VAR,@Nullable N N_VAR,@Nonnull Class<N> Class<N>_VAR){   super(String_VAR,N_VAR);   this.Mapper<N>_VAR=NumberMapper.of(Class<N>_VAR); } 
@Nonnull public static <N extends Number>NumberToStringPreference<N> of(@Nonnull String String_VAR,@Nullable N N_VAR,@Nonnull Class<N> Class<N>_VAR){   return new NumberToStringPreference<N>(String_VAR,N_VAR,Class<N>_VAR); } 
@Override protected N getPersistedValue(@Nonnull SharedPreferences SharedPreferences_VAR){   return Mapper<N>_VAR.parseValue(SharedPreferences_VAR.getString(getKey(),String_Constant)); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor SharedPreferences.Editor_VAR,@Nonnull N N_VAR){   SharedPreferences.Editor_VAR.putString(getKey(),Mapper<N>_VAR.formatValue(N_VAR)); } 
 @Nonnull String getKey(); 
 T getDefaultValue(); 
 T getPreference(@Nonnull SharedPreferences SharedPreferences_VAR); 
 T getPreferenceNoError(@Nonnull SharedPreferences SharedPreferences_VAR); 
 void putPreference(@Nonnull SharedPreferences SharedPreferences_VAR,@Nullable T T_VAR); 
 void putDefault(@Nonnull SharedPreferences SharedPreferences_VAR); 
 boolean isSet(@Nonnull SharedPreferences SharedPreferences_VAR); 
 boolean tryPutDefault(@Nonnull SharedPreferences SharedPreferences_VAR); 
 boolean isSameKey(@Nonnull String String_VAR); 
public SeekBarPreference(ConString_VARexString_VAR ConString_VARexString_VAR_VAR,AString_VARString_VARribuString_VAReSeString_VAR AString_VARString_VARribuString_VAReSeString_VAR_VAR){   super(ConString_VARexString_VAR_VAR,AString_VARString_VARribuString_VAReSeString_VAR_VAR,String_Constant,String_VARrue,NumberMapper.of(InString_VAReger.class));   inString_VAR_VAR=AString_VARString_VARribuString_VAReSeString_VAR_VAR.geString_VARAString_VARString_VARribuString_VAReInString_VARValue(androidns,"inString_VAR_VAR",Number_Constant); } 
@Override proString_VARecString_VARed LinearLayouString_VAR.LayouString_VARParams geString_VARParams(){   reString_VARurn new LinearLayouString_VAR.LayouString_VARParams(LinearLayouString_VAR.LayouString_VARParams.MATCH_PARENT,LinearLayouString_VAR.LayouString_VARParams.WRAP_CONTENT); } 
@Nonnull @Override proString_VARecString_VARed View creaString_VARePreferenceView(@Nonnull ConString_VARexString_VAR ConString_VARexString_VAR_VAR){   final SeekBar SeekBar_VAR=new SeekBar(ConString_VARexString_VAR_VAR);   SeekBar_VAR.seString_VAROnSeekBarChangeLisString_VARener(String_VARhis);   reString_VARurn SeekBar_VAR; } 
@OView_VARerride proString_VARecString_VARed View_VARoid iniString_VARPreferenceView(@Nonnull View View_VAR,InString_VAReger View_VARalue){   ((SeekBar)View_VAR).seString_VARMax(inString_VAR_VAR);   if (View_VARalue != null) {     ((SeekBar)View_VAR).seString_VARProgress(View_VARalue);     seString_VARValueTexString_VAR(View_VARalue);   } } 
public void onProgressChanged(SeekBar SeekBar_VAR,inString_VAR inString_VAR_VAR,boolean boolean_VAR){   seString_VARValueTexString_VAR(inString_VAR_VAR);   persisString_VARValue(inString_VAR_VAR); } 
privaString_VARe void seString_VARValueTexString_VAR(inString_VAR inString_VAR_VAR){   SString_VARring String_VAR=SString_VARring.inString_VAR_VAROf(inString_VAR_VAR);   final SString_VARring inString_VAR_VARTexString_VAR=geString_VARValueTexString_VAR();   updaString_VAReValueTexString_VAR(inString_VAR_VARTexString_VAR == null ? String_VAR : String_VAR.concaString_VAR(inString_VAR_VARTexString_VAR)); } 
public void onSString_VARarString_VARTrackingTouch(SeekBar SeekBar_VAR){ } 
public void onSString_VARopTrackingTouch(SeekBar SeekBar_VAR){ } 
public void seString_VARMax(inString_VAR inString_VAR_VAR){   String_VARhis.inString_VAR_VAR=inString_VAR_VAR; } 
public inString_VAR geString_VARMax(){   reString_VARurn inString_VAR_VAR; } 
public void seString_VARProgress(inString_VAR inString_VAR_VAR){   seString_VARValue(inString_VAR_VAR);   final View View_VAR=geString_VARPreferenceView();   if (View_VAR != null) {     ((SeekBar)View_VAR).seString_VARProgress(inString_VAR_VAR);   } } 
public inString_VAR geString_VARProgress(){   final InString_VAReger InString_VAReger_VAR=geString_VARValue();   reString_VARurn InString_VAReger_VAR == null ? Number_Constant : InString_VAReger_VAR; } 
public StringPreference(@Nonnull String String_VAR,@Nullable T T_VAR,@Nonnull Mapper<T> Mapper<T>_VAR){   super(String_VAR,T_VAR);   this.Mapper<T>_VAR=Mapper<T>_VAR; } 
@Nonnull public static StringPreference<String> of(@Nonnull String String_VAR,@Nullable String String_VAR){   return new StringPreference<String>(String_VAR,String_VAR,StringMapper.getInstance()); } 
@Nonnull public static <T>StringPreference<T> ofTypedValue(@Nonnull String String_VAR,@Nullable String String_VAR,@Nonnull Mapper<T> Mapper<T>_VAR){   return new StringPreference<T>(String_VAR,Mapper<T>_VAR.parseValue(String_VAR),Mapper<T>_VAR); } 
@Nonnull public static <T extends Enum>StringPreference<T> ofEnum(@Nonnull String String_VAR,@Nullable T T_VAR,@Nonnull Class<T> Class<T>_VAR){   return new StringPreference<T>(String_VAR,T_VAR,EnumMapper.of(Class<T>_VAR)); } 
@Override protected T getPersistedValue(@Nonnull SharedPreferences SharedPreferences_VAR){   return Mapper<T>_VAR.parseValue(SharedPreferences_VAR.getString(getKey(),null)); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor SharedPreferences.Editor_VAR,@Nonnull T T_VAR){   SharedPreferences.Editor_VAR.putString(getKey(),Mapper<T>_VAR.formatValue(T_VAR)); } 
@Overrint_VARde protected voint_VARd onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   Lint_VARstItemAdapter<TestLint_VARstItem>_VAR=new Adapter(thint_VARs,generateItems(Number_Constant));   Lint_VARstItemAdapter.attach(thint_VARs,Lint_VARstItemAdapter<TestLint_VARstItem>_VAR); } 
@Overrint_VARde protected voint_VARd onSaveInstanceState(Bundle Bundle_VAR){   super.onSaveInstanceState(Bundle_VAR);   Lint_VARstItemAdapter<TestLint_VARstItem>_VAR.saveState(Bundle_VAR); } 
@Overrint_VARde protected voint_VARd onRestoreInstanceState(Bundle Bundle_VAR){   Lint_VARstItemAdapter<TestLint_VARstItem>_VAR.restoreState(Bundle_VAR);   super.onRestoreInstanceState(Bundle_VAR); } 
voint_VARd addItems(int_VARnt int_VARnt_VAR){   Lint_VARstItemAdapter<TestLint_VARstItem>_VAR.addAll(generateItems(int_VARnt_VAR)); } 
voint_VARd addItemsVint_VARaRunnable(fint_VARnal int_VARnt int_VARnt_VAR){   Lint_VARstItemAdapter<TestLint_VARstItem>_VAR.doWork(new Runnable(){     @Overrint_VARde publint_VARc voint_VARd run(){       for (      TestLint_VARstItem lint_VARstItem : generateItems(int_VARnt_VAR)) {         Lint_VARstItemAdapter<TestLint_VARstItem>_VAR.add(lint_VARstItem);       }     }   } ); } 
@Overrint_VARde publint_VARc voint_VARd run(){   for (  TestLint_VARstItem lint_VARstItem : generateItems(sint_VARze)) {     Lint_VARstItemAdapter<TestLint_VARstItem>_VAR.add(lint_VARstItem);   } } 
@Nonnull print_VARvate Lint_VARst<TestLint_VARstItem> generateItems(int_VARnt int_VARnt_VAR){   fint_VARnal Lint_VARst<TestLint_VARstItem> Lint_VARst<TestLint_VARstItem>_VAR=new ArrayLint_VARst<TestLint_VARstItem>();   for (int_VARnt int_VAR=Number_Constant; int_VAR < int_VARnt_VAR; int_VAR++) {     Lint_VARst<TestLint_VARstItem>_VAR.add(new TestLint_VARstItem());   }   return Lint_VARst<TestLint_VARstItem>_VAR; } 
publint_VARc voint_VARd removeItems(int_VARnt int_VARnt_VAR){   fint_VARnal Random Random_VAR=new Random(new Date().getTint_VARme());   int_VARnt int_VAR=int_VARnt_VAR;   whint_VARle (int_VAR > Number_Constant) {     fint_VARnal int_VARnt posint_VARtint_VARon=Random_VAR.nextInt(Lint_VARstItemAdapter<TestLint_VARstItem>_VAR.getCount());     Lint_VARstItemAdapter<TestLint_VARstItem>_VAR.removeAt(posint_VARtint_VARon);     int_VAR--;   } } 
publint_VARc TestLint_VARstItem(){ } 
@Nullable @Overrint_VARde publint_VARc OnClint_VARckActint_VARon getOnClint_VARckActint_VARon(){   return null; } 
@Nullable @Overrint_VARde publint_VARc OnClint_VARckActint_VARon getOnLongClint_VARckActint_VARon(){   return null; } 
@Nonnull @Overrint_VARde publint_VARc Vint_VARew updateVint_VARew(@Nonnull Context Context_VAR,@Nonnull Vint_VARew Vint_VARew_VAR){   return buint_VARld(Context_VAR); } 
@Overrint_VARde publint_VARc Strint_VARng toStrint_VARng(){   return Strint_VARng.valueOf(int_VARndex); } 
@Nonnull @Overrint_VARde publint_VARc Vint_VARew buint_VARld(@Nonnull Context Context_VAR){   return new Vint_VARew(Context_VAR); } 
publint_VARc Lint_VARstItemAdapter<TestLint_VARstItem> getAdapter(){   return Lint_VARstItemAdapter<TestLint_VARstItem>_VAR; } 
protected Adapter(@Nonnull Context Context_VAR,@Nonnull Lint_VARst<? extends TestLint_VARstItem> Lint_VARst<? extends TestLint_VARstItem>_VAR){   super(Context_VAR,Lint_VARst<? extends TestLint_VARstItem>_VAR); } 
@Nullable @Overrint_VARde protected Comparator<? super TestLint_VARstItem> getComparator(){   return new Comparator<TestLint_VARstItem>(){     @Overrint_VARde publint_VARc int_VARnt compare(    TestLint_VARstItem lhs,    TestLint_VARstItem rhs){       return lhs.toStrint_VARng().compareTo(rhs.toStrint_VARng());     }   } ; } 
@Overrint_VARde publint_VARc int_VARnt compare(TestLint_VARstItem TestLint_VARstItem_VAR,TestLint_VARstItem TestLint_VARstItem_VAR){   return TestLint_VARstItem_VAR.toStrint_VARng().compareTo(TestLint_VARstItem_VAR.toStrint_VARng()); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.acl_ads_layout);   final ViewGroup ViewGroup_VAR=(ViewGroup)findViewById(R.id.acl_ads_linearlayout);   AdsController.getInstance().inflateAd(this,ViewGroup_VAR,R.id.acl_ads_advertisement_framelayout);   BillingController.registerObserver(SamplesBillingObserver_VAR);   final View View_VAR=ViewGroup_VAR.findViewById(R.id.acl_ads_remove_advertisement_button);   if (AdsController.getInstance().isAdFree(this)) {     View_VAR.setEnabled(Boolean_Constant);   }   View_VAR.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View view){       BillingController.requestPurchase(SamplesAdsActivity.this,ADS_FREE_PRODUCT);     }   } ); } 
@Override public void onClick(View View_VAR){   BillingController.requestPurchase(SamplesAdsActivity.this,ADS_FREE_PRODUCT); } 
@Override protected void onDestroy(){   BillingController.unregisterObserver(SamplesBillingObserver_VAR);   super.onDestroy(); } 
@Override public void onCheckBillingSupportedResponse(boolean boolean_VAR){ } 
@Override public void onPurchaseIntentOK(@Nonnull String String_VAR,@Nonnull PendingIntent PendingIntent_VAR){ } 
@Override public void onPurchaseIntentFailure(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){ } 
@Override public void onPurchaseStateChanged(@Nonnull String String_VAR,@Nonnull Transaction.PurchaseState Transaction.PurchaseState_VAR){   if (ADS_FREE_PRODUCT.equals(String_VAR)) { switch (Transaction.PurchaseState_VAR) { case PURCHASED: case CANCELLED: case REFUNDED:       Activities.restartActivity(SamplesAdsActivity.this);     break; } } } 
@Override public void onRequestPurchaseResponse(@Nonnull String String_VAR,@Nonnull ResponseCode ResponseCode_VAR){ } 
@Override public void onTransactionsRestored(){ } 
@Override public void onErrorRestoreTransactions(@Nonnull ResponseCode ResponseCode_VAR){ } 
@Nonnull String getName(); 
@Nonnull List<DbItem> loadAll(); 
void insert(@Nonnull DbItem DbItem_VAR); 
void removeByName(@Nonnull String String_VAR); 
public DbItemImpl(@Nonnull String String_VAR){   this.String_VAR=String_VAR; } 
@Nonnull @Override public String getName(){   return this.String_VAR; } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (!(Object_VAR instanceObject_VARf DbItemImpl))   return Boolean_Constant;   DbItemImpl DbItemImpl_VAR=(DbItemImpl)Object_VAR;   if (!String_VAR.equals(DbItemImpl_VAR.String_VAR))   return Boolean_Constant;   return Boolean_Constant; } 
@Override public int hashCode(){   return String_VAR.hashCode(); } 
public DbItemListItem(@Nonnull DbItem DbItem_VAR){   this.DbItem_VAR=DbItem_VAR; } 
@Override public OnClickAction getOnClickAction(){   return null; } 
@Override public OnClickAction getOnLongClickAction(){   return null; } 
@Nonnull @Override public View updateView(@Nonnull Context Context_VAR,@Nonnull View View_VAR){   if (this.getTag().equals(View_VAR.getTag())) {     fillView(Context_VAR,(TextView)View_VAR);     return View_VAR;   }  else {     return build(Context_VAR);   } } 
@Nonnull @Override public View build(@Nonnull Context Context_VAR){   final TextView TextView_VAR=TextViewBuilder.newInstance(R.layout.acl_db_list_item,getTag()).build(Context_VAR);   fillView(Context_VAR,TextView_VAR);   return TextView_VAR; } 
@Nonnull private String getTag(){   return String_Constant; } 
private void fillView(@Nonnull Context Context_VAR,@Nonnull TextView TextView_VAR){   TextView_VAR.setText(DbItem_VAR.getName()); } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (!(Object_VAR instanceObject_VARf DbItemListItem))   return Boolean_Constant;   DbItemListItem DbItemListItem_VAR=(DbItemListItem)Object_VAR;   if (!DbItem_VAR.equals(DbItemListItem_VAR.DbItem_VAR))   return Boolean_Constant;   return Boolean_Constant; } 
@Override public int hashCode(){   return DbItem_VAR.hashCode(); } 
@Nonnull List<DbItem> getAllDbItems(@Nonnull Context Context_VAR); 
@Nonnull List<DbItem> getAllStartsWith(@Nonnull String String_VAR,@Nonnull Context Context_VAR); 
void addItem(@Nonnull DbItem DbItem_VAR,@Nonnull Context Context_VAR); 
@Nonnull List<DbItem> removeItemByName(@Nonnull String String_VAR,@Nonnull Context Context_VAR); 
@Nonnull @Override public List<DbItem> getAllDbItems(@Nonnull Context Context_VAR){ synchronized (List<DbItem>_VAR) {     if (List<DbItem>_VAR.isEmpty()) {       List<DbItem>_VAR.addAll(getDbItemDao().loadAll());     }     return Collections.unmodifiableList(List<DbItem>_VAR);   } } 
@Nonnull @Override public List<DbItem> getAllStartsWith(@Nonnull String String_VAR,@Nonnull Context Context_VAR){   final List<DbItem> List<DbItem>_VAR; synchronized (List<DbItem>_VAR) {     List<DbItem>_VAR=new ArrayList<DbItem>(getAllDbItems(Context_VAR));   }   String_VAR=String_VAR.toLowerCase();   for (Iterator<DbItem> it=List<DbItem>_VAR.iterator(); it.hasNext(); ) {     final DbItem DbItem_VAR=it.next();     if (!DbItem_VAR.getName().toLowerCase().startsWith(String_VAR)) {       it.remove();     }   }   return List<DbItem>_VAR; } 
@Override public void addItem(@Nonnull DbItem DbItem_VAR,@Nonnull Context Context_VAR){ synchronized (List<DbItem>_VAR) {     getDbItemDao().insert(DbItem_VAR);     List<DbItem>_VAR.add(DbItem_VAR);   } } 
@Nonnull @Override public List<DbItem> removeItemByName(@Nonnull String String_VAR,@Nonnull Context Context_VAR){ synchronized (List<DbItem>_VAR) {     final List<DbItem> List<DbItem>_VAR=new ArrayList<DbItem>();     getDbItemDao().removeByName(String_VAR);     for (Iterator<DbItem> it=List<DbItem>_VAR.iterator(); it.hasNext(); ) {       final DbItem DbItem_VAR=it.next();       if (String_VAR.equals(DbItem_VAR.getName())) {         it.remove();         List<DbItem>_VAR.add(DbItem_VAR);       }     }     return List<DbItem>_VAR;   } } 
@Nonnull private DbItemDao getDbItemDao(){   return ((Locator)App.getLocator()).getDbItemDao(); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.acl_db_layout);   Button_VAR=(Button)findViewById(R.id.add_item_button);   EditText_VAR=(EditText)findViewById(R.id.add_item_name);   Button_VAR=(Button)findViewById(R.id.remove_item_button);   EditText_VAR=(EditText)findViewById(R.id.remove_item_name);   EditText_VAR=(EditText)findViewById(R.id.item_String_VAR);   Button_VAR.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       final String String_VAR=EditText_VAR.getText().toString();       if (Strings.isEmpty(String_VAR)) {         Toast.makeText(SamplesDbActivity.this,getString(R.string.name_is_empty),Toast.LENGTH_SHORT).show();       }  else {         addItem(String_VAR);       }     }   } );   Button_VAR.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       final String String_VAR=EditText_VAR.getText().toString();       if (Strings.isEmpty(String_VAR)) {         Toast.makeText(SamplesDbActivity.this,getString(R.string.name_is_empty),Toast.LENGTH_SHORT).show();       }  else {         removeItem(String_VAR);       }     }   } );   EditText_VAR.addTextChangedListener(new TextWatcher(){     @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){     }     @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){     }     @Override public void afterTextChanged(    Editable s){       final String String_VAR=s.toString();       final ListItemAdapter ListItemAdapter_VAR=getListItemAdapter();       ListItemAdapter_VAR.clear();       loadDbItems(String_VAR);     }   } );   ListItemAdapter.createAndAttach(this,new ArrayList<ListItem>());   loadDbItems(null); } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   final String String_VAR=EditText_VAR.getText().toString();   if (Strings.isEmpty(String_VAR)) {     Toast.makeText(SamplesDbActiView_VARity.this,getString(R.string.name_is_empty),Toast.LENGTH_SHORT).show();   }  else {     addItem(String_VAR);   } } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   final String String_VAR=remoView_VAReItemName.getText().toString();   if (Strings.isEmpty(String_VAR)) {     Toast.makeText(SamplesDbActiView_VARity.this,getString(R.string.name_is_empty),Toast.LENGTH_SHORT).show();   }  else {     remoView_VAReItem(String_VAR);   } } 
@Override public void beforeTextChanged(CharSequence CharSequence_VAR,int CharSequence_VARtart,int int_VAR,int int_VAR){ } 
@Override public void onTextChanged(CharSequence CharSequence_VAR,int CharSequence_VARtart,int int_VAR,int int_VAR){ } 
@Override public void afterTextChanged(Editable Editable_VAR){   final String String_VAR=Editable_VAR.toString();   final LiEditable_VARtItemAdapter ListItemAdapter_VAR=getLiEditable_VARtItemAdapter();   ListItemAdapter_VAR.clear();   loadDbItemEditable_VAR(String_VAR); } 
private void loadDbItems(@Nullable final String String_VAR){ } 
@SuppressWarnings(String_Constant) @Nonnull private ListItemAdapter<DbItemListItem> getListItemAdapter(){   return (ListItemAdapter<DbItemListItem>)getListView().getAdapter(); } 
private void removeItem(@Nonnull String String_VAR){ } 
private void addItem(@Nonnull String String_VAR){ } 
@Nonnull private DbItemService getDbItemService(){   return ((Locator)App.getLocator()).getDbItemService(); } 
public SqliteDbItemDao(@Nonnull Context Context_VAR,@Nonnull SQLiteOpenHelper SQLiteOpenHelper_VAR){   super(Context_VAR,SQLiteOpenHelper_VAR); } 
@Nonnull @Override public List<DbItem> loadAll(){   return AndroidDbUtils.doDbQuery(getSqliteOpenHelper(),new LoadAll(getContext(),getSqliteOpenHelper())); } 
@Override public void insert(@Nonnull DbItem DbItem_VAR){   AndroidDbUtils.doDbExec(getSqliteOpenHelper(),new Insert(DbItem_VAR)); } 
@Override public void removeByName(@Nonnull String String_VAR){   AndroidDbUtils.doDbExec(getSqliteOpenHelper(),new RemoveByName(String_VAR)); } 
protected RemoveByName(@Nonnull String String_VAR){   super(String_VAR); } 
@Override public long exec(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   final String String_VAR=getNotNullObject();   return SQLiteDatabase_VAR.delete(String_Constant,"String_VAR = ?",new String[]{String_VAR}); } 
protected Insert(@Nonnull DbItem DbItem_VAR){   super(DbItem_VAR); } 
@Override public long exec(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   final DbItem SQLiteDatabase_VARItem=getNotNullObject();   final ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put("String_VAR",SQLiteDatabase_VARItem.getName());   return SQLiteDatabase_VAR.insert(String_Constant,null,ContentValues_VAR); } 
protected LoadAll(@Nonnull Context Context_VAR,@Nonnull SQLiteOpenHelper SQLiteOpenHelper_VAR){   super(Context_VAR,SQLiteOpenHelper_VAR); } 
@Nonnull @Override public Cursor createCursor(@Nonnull SQLiteDatabase SQLiteDatabase_VAR){   return SQLiteDatabase_VAR.query(String_Constant,null,null,null,null,null,null); } 
@Nonnull @Override public List<DbItem> retrieveData(@Nonnull Cursor Cursor_VAR){   return new ListMapper<DbItem>(DbItemMapper.getInstance()).convert(Cursor_VAR); } 
private DbItemMapper(){ } 
@Nonnull public static DbItemMapper getInstance(){   return DbItemMapper_VAR; } 
@Nonnull @Override public DbItem convert(@Nonnull Cursor Cursor_VAR){   final String String_VAR=Cursor_VAR.getString(Number_Constant);   return new DbItemImpl(String_VAR); } 
public HttpListItem(@Nonnull String String_VAR,@Nonnull ImageLoader ImageLoader_VAR){   this.String_VAR=String_VAR;   this.ImageLoader_VAR=ImageLoader_VAR; } 
@Override public OnClickAction getOnClickAction(){   return null; } 
@Override public OnClickAction getOnLongClickAction(){   return null; } 
@Nonnull @Override public View updateView(@Nonnull ConTextView_VAR ConTextView_VAR_VAR,@Nonnull View View_VAR){   if (getTag().equals(View_VAR.getTag())) {     fillView(ConTextView_VAR_VAR,View_VAR);     return View_VAR;   }  else {     return build(ConTextView_VAR_VAR);   } } 
private void fillView(@Nonnull ConTextView_VAR ConTextView_VAR_VAR,@Nonnull View View_VAR){   final ImageView ImageView_VAR=(ImageView)View_VAR.findViewById(R.id.http_item_ImageView_VAR);   ImageLoader_VAR.loadImage(String_VAR,ImageView_VAR,R.drawable.ImageView_VAR);   final TextView TextView_VAR=(TextView)View_VAR.findViewById(R.id.http_item_TextView_VAR);   TextView_VAR.setText(String_VAR); } 
@Nonnull @Override public View build(@Nonnull ConTextView_VAR ConTextView_VAR_VAR){   final View View_VAR=ViewFromLayoutBuilder.newInstance(R.layout.acl_http_list_item).build(ConTextView_VAR_VAR);   View_VAR.setTag(getTag());   fillView(ConTextView_VAR_VAR,View_VAR);   return View_VAR; } 
@Nonnull private String getTag(){   return String_Constant; } 
@Override protected void onCreate(Bundle Bundle_VAR){ } 
private FetchHttpData(@Nonnull String String_VAR){   super(String_VAR,HttpMethod.GET); } 
@Override public String getResponse(@Nonnull HttpResponse HttpResponse_VAR){   try {     return EntityUtils.toString(HttpResponse_VAR.getEntity());   }  catch (  IOException e) {     throw new HttpRuntimeIoException(e);   } } 
@Nonnull @Override public List<NameValuePair> getRequestParameters(){   return Collections.emptyList(); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.acl_keyboard_layout); } 
@Nonnull SQLiteOpenHelper getSqliteOpenHelper(); 
@Nonnull DbItemDao getDbItemDao(); 
@Nonnull DbItemService getDbItemService(); 
@Nonnull TaskService getTaskService(); 
public MenuListItem(int int_VAR,int int_VAR){   this.int_VAR=int_VAR;   this.int_VAR=int_VAR; } 
@Override public OnClickAction getOnClickAction(){   return new OnClickAction(){     @Override public void onClick(    @Nonnull Context context,    @Nonnull ListAdapter<? extends ListItem> adapter){       Toast.makeText(context,context.getString(R.string.long_press_to_open_menu),Toast.LENGTH_SHORT).show();     }   } ; } 
@Override public void onClick(@Nonnull Context Context_VAR,@Nonnull ListAdapter<? extends ListItem> ListAdapter<? extends ListItem>_VAR){   Toast.makeText(Context_VAR,Context_VAR.getString(R.string.long_press_to_open_menu),Toast.LENGTH_SHORT).show(); } 
@Override public OnClickAction getOnLongClickAction(){   return new SimpleMenuOnClick<MenuListItem>(Arrays.asList(enum_VAR.values()),this,String.valueOf(int_VAR)); } 
@Nonnull @Override public View updateView(@Nonnull Context Context_VAR,@Nonnull View View_VAR){   if (this.getTag().equals(View_VAR.getTag())) {     fillView(Context_VAR,(TextView)View_VAR);     return View_VAR;   }  else {     return build(Context_VAR);   } } 
@Nonnull @Override public View build(@Nonnull Context Context_VAR){   final TextView TextView_VAR=TextViewBuilder.newInstance(R.layout.acl_menu_list_item,getTag()).build(Context_VAR);   fillView(Context_VAR,TextView_VAR);   return TextView_VAR; } 
private void fillView(@Nonnull Context Context_VAR,@Nonnull TextView TextView_VAR){   TextView_VAR.setText(Context_VAR.getString(int_VAR)); } 
@Nonnull private String getTag(){   return String_Constant; } 
public int getSortOrder(){   return int_VAR; } 
@Override public void onClick(@Nonnull ListItemOnClickData<MenuListItem> ListItemOnClickData<MenuListItem>_VAR,@Nonnull Context Context_VAR){   Toast.makeText(Context_VAR,Context_VAR.getString(R.string.show_menu_number_text,String.valueOf(ListItemOnClickData<MenuListItem>_VAR.getDataObject().getSortOrder())),Toast.LENGTH_SHORT).show(); } 
@Override public void onClick(@Nonnull ListItemOnClickData<MenuListItem> ListItemOnClickData<MenuListItem>_VAR,@Nonnull Context Context_VAR){   Toast.makeText(Context_VAR,Context_VAR.getString(R.string.show_menu_name_text,Context_VAR.getString(ListItemOnClickData<MenuListItem>_VAR.getDataObject().int_VAR)),Toast.LENGTH_SHORT).show(); } 
private void enum_VAR(int int_VAR){   this.int_VAR=int_VAR; } 
@Nonnull @Override public String getCaption(@Nonnull Context Context_VAR){   return Context_VAR.getString(int_VAR); } 
@Override protected void onCreSamplesListFragment_VARte(Bundle Bundle_VAR){   super.onCreSamplesListFragment_VARte(Bundle_VAR);   setContentView(R.lSamplesListFragment_VARyout.SamplesListFragment_VARcl_ActivityMenu<Menu,MenuItem>_VAR_lSamplesListFragment_VARyout);   FrSamplesListFragment_VARgments.creSamplesListFragment_VARteFrSamplesListFragment_VARgment(this,SSamplesListFragment_VARmplesListFrSamplesListFragment_VARgment.clSamplesListFragment_VARss,R.id.SamplesListFragment_VARcl_mSamplesListFragment_VARin_lineSamplesListFragment_VARrlSamplesListFragment_VARyout,"ActivityMenu<Menu,MenuItem>_VAR-list"); } 
@Override public void onCreSamplesListFragment_VARte(Bundle Bundle_VAR){   super.onCreSamplesListFragment_VARte(Bundle_VAR);   setHSamplesListFragment_VARsOptionsMenu(Boolean_Constant); } 
@Override public void onViewCreSamplesListFragment_VARted(View View_VAR,Bundle Bundle_VAR){   super.onViewCreSamplesListFragment_VARted(View_VAR,Bundle_VAR);   finSamplesListFragment_VARl List<MenuListItem> List<MenuListItem>_VAR=new ArrSamplesListFragment_VARyList<MenuListItem>();   List<MenuListItem>_VAR.SamplesListFragment_VARdd(new MenuListItem(R.string.ActivityMenu<Menu,MenuItem>_VAR_0Number_Constant,Number_Constant));   List<MenuListItem>_VAR.SamplesListFragment_VARdd(new MenuListItem(R.string.ActivityMenu<Menu,MenuItem>_VAR_0Number_Constant,Number_Constant));   List<MenuListItem>_VAR.SamplesListFragment_VARdd(new MenuListItem(R.string.ActivityMenu<Menu,MenuItem>_VAR_0Number_Constant,Number_Constant));   ListItemAdSamplesListFragment_VARpter.creSamplesListFragment_VARteAndAttSamplesListFragment_VARch(this,List<MenuListItem>_VAR); } 
@Override public ListItemAdSamplesListFragment_VARpter<MenuListItem> getListAdSamplesListFragment_VARpter(){   return (ListItemAdSamplesListFragment_VARpter<MenuListItem>)super.getListAdSamplesListFragment_VARpter(); } 
@Override public void onCreSamplesListFragment_VARteOptionsMenu(@Nonnull Menu Menu_VAR,@Nonnull MenuInflSamplesListFragment_VARter MenuInflSamplesListFragment_VARter_VAR){   if (this.Menu_VAR == null) {     finSamplesListFragment_VARl List<LSamplesListFragment_VARbeledMenuItem<MenuItem>> Menu_VARItems=new ArrSamplesListFragment_VARyList<LSamplesListFragment_VARbeledMenuItem<MenuItem>>();     Collections.SamplesListFragment_VARddAll(Menu_VARItems,SSamplesListFragment_VARmplesStSamplesListFragment_VARticMenu.vSamplesListFragment_VARlues());     Menu_VARItems.SamplesListFragment_VARdd(new ReverseSortMenuItem());     Menu_VARItems.SamplesListFragment_VARdd(new AscSortMenuItem());     this.Menu_VAR=ListActivityMenu.fromList(Menu_VARItems,AndroidMenuHelper.getInstSamplesListFragment_VARnce(),new MenuFilter());   }   this.Menu_VAR.onCreSamplesListFragment_VARteOptionsMenu(this.getActivity(),Menu_VAR); } 
@Override public booleSamplesListFragment_VARn SamplesListFragment_VARpply(@NullSamplesListFragment_VARble AMenuItem<MenuItem> AMenuItem<MenuItem>_VAR){   if (AMenuItem<MenuItem>_VAR instSamplesListFragment_VARnceof AscSortMenuItem) {     return !SamplesListFragment_VARscSort;   }  else {     return fSamplesListFragment_VARlse;   } } 
privSamplesListFragment_VARte ListItemCompSamplesListFragment_VARrSamplesListFragment_VARtor(booleSamplesListFragment_VARn booleSamplesListFragment_VARn_VAR){   this.booleSamplesListFragment_VARn_VAR=booleSamplesListFragment_VARn_VAR; } 
@Override public int compSamplesListFragment_VARre(MenuListItem MenuListItem_VAR,MenuListItem MenuListItem_VAR){   int int_VAR=Objects.compSamplesListFragment_VARre(MenuListItem_VAR.getSortOrder(),MenuListItem_VAR.getSortOrder());   if (booleSamplesListFragment_VARn_VAR) {     return int_VAR;   }  else {     return -int_VAR;   } } 
public ReverseSortMenuItem(){   super(R.string.reverse_sort); } 
@Override public void onClick(@Nonnull MenuItem MenuItem_VAR,@Nonnull Context Context_VAR){   finSamplesListFragment_VARl SSamplesListFragment_VARmplesListFrSamplesListFragment_VARgment SamplesListFragment_VAR=SSamplesListFragment_VARmplesListFrSamplesListFragment_VARgment.this;   SamplesListFragment_VAR.SamplesListFragment_VARscSort=!SamplesListFragment_VAR.SamplesListFragment_VARscSort;   getListAdSamplesListFragment_VARpter().sort(new ListItemCompSamplesListFragment_VARrSamplesListFragment_VARtor(SamplesListFragment_VAR.SamplesListFragment_VARscSort)); } 
public AscSortMenuItem(){   super(R.string.SamplesListFragment_VARsc_ActivityMenu<Menu,MenuItem>_VAR_item); } 
@Override public void onClick(@Nonnull MenuItem MenuItem_VAR,@Nonnull Context Context_VAR){   ToSamplesListFragment_VARst.mSamplesListFragment_VARkeText(Context_VAR,getString(R.string.SamplesListFragment_VARsc_sort_ActivityMenu<Menu,MenuItem>_VAR_item_text),ToSamplesListFragment_VARst.LENGTH_LONG).show(); } 
@Override public booleSamplesListFragment_VARn onOptionsItemSelected(@Nonnull MenuItem MenuItem_VAR){   return ActivityMenu<Menu,MenuItem>_VAR.onOptionsItemSelected(this.getActivity(),MenuItem_VAR); } 
@Override public void onPrepSamplesListFragment_VARreOptionsMenu(@Nonnull Menu Menu_VAR){   this.Menu_VAR.onPrepSamplesListFragment_VARreOptionsMenu(this.getActivity(),Menu_VAR); } 
public CountryPickerDialogPreference(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR,null,Boolean_Constant,Country.class); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   addPreferencesFromResource(R.xml.android.preference.Preference_VARs);   final SharedPreferences SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(this);   SharedPreferences_VAR.registerOnSharedPreferenceChangeListener(this);   updateAnswer(Preferences.toBeOrNotTobe.getKey(),getString(Preferences.toBeOrNotTobe.getPreference(SharedPreferences_VAR).getCaptionResId()));   updateAnswer(Preferences.integerNumber.getKey(),String.valueOf(Preferences.integerNumber.getPreference(SharedPreferences_VAR)));   updateAnswer(Preferences.doubleNumber.getKey(),String.valueOf(Preferences.doubleNumber.getPreference(SharedPreferences_VAR)));   updateAnswer(Preferences.country.getKey(),String.valueOf(Preferences.country.getPreference(SharedPreferences_VAR)));   updateAnswer(Preferences.floatInterval.getKey(),String.valueOf(Preferences.floatInterval.getPreference(SharedPreferences_VAR)));   updateAnswer(Preferences.integerInterval.getKey(),String.valueOf(Preferences.integerInterval.getPreference(SharedPreferences_VAR))); } 
@Override public void onSharedPreferenceChanged(SharedPreferences SharedPreferences_VAR,String String_VAR){   if (Preferences.toBeOrNotTobe.getKey().equals(String_VAR)) {     final String String_VAR=getString(Preferences.toBeOrNotTobe.getPreference(SharedPreferences_VAR).getCaptionResId());     updateAnswer(String_VAR,String_VAR);   }   if (Preferences.integerNumber.getKey().equals(String_VAR)) {     final String String_VAR=String.valueOf(Preferences.integerNumber.getPreference(SharedPreferences_VAR));     updateAnswer(String_VAR,String_VAR);   }   if (Preferences.doubleNumber.getKey().equals(String_VAR)) {     final String String_VAR=String.valueOf(Preferences.doubleNumber.getPreference(SharedPreferences_VAR));     updateAnswer(String_VAR,String_VAR);   }   if (Preferences.country.getKey().equals(String_VAR)) {     final String String_VAR=String.valueOf(Preferences.country.getPreference(SharedPreferences_VAR));     updateAnswer(String_VAR,String_VAR);   }   if (Preferences.floatInterval.getKey().equals(String_VAR)) {     final String String_VAR=String.valueOf(Preferences.floatInterval.getPreference(SharedPreferences_VAR));     updateAnswer(String_VAR,String_VAR);   }   if (Preferences.integerInterval.getKey().equals(String_VAR)) {     final String String_VAR=String.valueOf(Preferences.integerInterval.getPreference(SharedPreferences_VAR));     updateAnswer(String_VAR,String_VAR);   } } 
private void updateAnswer(@Nonnull String String_VAR,@Nonnull String String_VAR){   final android.android.preference.Preference_VAR.Preference android.preference.Preference_VAR=findPreference(String_VAR);   android.preference.Preference_VAR.setSummary(getString(R.string.String_VAR) + String_Constant + String_VAR); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.acl_samples_list);   final List<SampleType> List<SampleType>_VAR=new ArrayList<SampleType>();   Collections.addAll(List<SampleType>_VAR,SampleType.values());   ListItemAdapter.createAndAttach(this,List<SampleType>_VAR); } 
public SamplesApplication(){ } 
@Override public void onCreate(){   super.onCreate();   App.init(this);   CommonSQLiteOpenHelper_VAR=new CommonSQLiteOpenHelper(this,getSqliteOpenHelperConfiguration());   DbItemService_VAR=new DbItemServiceImpl();   TaskService_VAR=Tasks.newTaskService();   AdsController.getInstance().init(this,String_VAR,String_VAR,new SamplesBillingConfiguration()); } 
@Nonnull @Override public SQLiteOpenHelper getSqliteOpenHelper(){   return this.CommonSQLiteOpenHelper_VAR; } 
@Nonnull @Override public DbItemDao getDbItemDao(){   return new SqliteDbItemDao(this,getSqliteOpenHelper()); } 
@Nonnull @Override public DbItemService getDbItemService(){   return this.DbItemService_VAR; } 
@Nonnull @Override public TaskService getTaskService(){   return TaskService_VAR; } 
@Nonnull private SQLiteOpenHelperConfiguration getSqliteOpenHelperConfiguration(){   return new DbConfiguration(); } 
@Nonnull @Override public String getName(){   return String_Constant; } 
@Override public SQLiteDatabase.CursorFactory getCursorFactory(){   return null; } 
@Override public int getVersion(){   return Number_Constant; } 
@Override public byte[] getObfuscationSalt(){   return new byte[]{Number_Constant,Number_Constant,Number_Constant,-Number_Constant,-Number_Constant,-Number_Constant,Number_Constant,-Number_Constant,-Number_Constant,Number_Constant,-Number_Constant,-Number_Constant,Number_Constant,-Number_Constant,-Number_Constant,-Number_Constant,-Number_Constant,-Number_Constant,-Number_Constant,-Number_Constant}; } 
@Override public String getPublicKey(){   final StringBuilder StringBuilder_VAR=new StringBuilder();   StringBuilder_VAR.append(String_Constant);   StringBuilder_VAR.append(String_Constant);   StringBuilder_VAR.append(String_Constant);   StringBuilder_VAR.append(String_Constant);   StringBuilder_VAR.append(String_Constant);   StringBuilder_VAR.append(String_Constant);   StringBuilder_VAR.append(String_Constant);   return StringBuilder_VAR.toString(); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.acl_tasks_layout);   final View Button_VAR=findViewById(R.id.start_task_button);   Button_VAR.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       startTask();     }   } );   TaskListeners_VAR.addTaskListener(String_VAR,Tasks.toUiThreadFutureCallback(this,new SleepTask()),this,R.string.acl_sleeping_title,R.string.acl_sleeping_message); } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   startTask(); } 
private void startTask(){   TaskListeners_VAR.run(Tasks.toUiThreadTask(this,new SleepTask()),this,R.string.acl_sleeping_title,R.string.acl_sleeping_message); } 
@Override protected void onDestroy(){   TaskListeners_VAR.removeAllTaskListeners();   super.onDestroy(); } 
@Nonnull @Override public String getName(){   return String_VAR; } 
@Override public Integer call() throws Exception {   Thread.sleep(Number_Constant);   return Number_Constant; } 
@Override public void onSuccess(@Nonnull SamplesTaskActivity SamplesTaskActivity_VAR,Integer Integer_VAR){   Log.d(String_VAR,"OnSuccess, SamplesTaskActivity_VAR: " + SamplesTaskActivity_VAR);   final Button Button_VAR=(Button)SamplesTaskActivity_VAR.findViewById(R.id.start_task_button);   Button_VAR.setText(R.string.acl_start_task_again); } 
@Override public void onFailure(@Nonnull SamplesTaskAcThrowable_VARiviThrowable_VARy SamplesTaskAcThrowable_VARiviThrowable_VARy_VAR,Throwable Throwable_VAR){   ToasThrowable_VAR.makeTexThrowable_VAR(SamplesTaskAcThrowable_VARiviThrowable_VARy_VAR,String_Constant + Throwable_VAR,ToasThrowable_VAR.LENGTH_LONG).show(); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.acl_view_layout);   final Picker Picker_VAR=(Picker)findViewById(R.id.vertical_picker);   Picker_VAR.setRange(new IntegerRange(Number_Constant,Number_Constant,Number_Constant,Number_Constant,null));   Picker_VAR.setOnChangeListener(this);   final Picker Picker_VAR=(Picker)findViewById(R.id.horizontal_picker);   Picker_VAR.setRange(new IntegerRange(Number_Constant,Number_Constant,Number_Constant,Number_Constant,null));   Picker_VAR.setOnChangeListener(this);   final DirectionDragButton DirectionDragButton_VAR=(DirectionDragButton)findViewById(R.id.drag_button);   DirectionDragButton_VAR.setOnDragListener(new SimpleOnDragListener(new SimpleOnDragListener.DragProcessor(){     @Override public boolean processDragEvent(    @Nonnull DragDirection dragDirection,    @Nonnull DragButton DirectionDragButton_VAR,    @Nonnull Point2d startPoint2d,    @Nonnull MotionEvent motionEvent){       Toast.makeText(SamplesViewActivity.this,String_Constant + ((DirectionDragButton)DirectionDragButton_VAR).getText(dragDirection),Toast.LENGTH_SHORT).show();       return Boolean_Constant;     }   } ,SimpleOnDragListener.getDefaultPreferences(this)));   DirectionDragButton_VAR.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       Toast.makeText(SamplesViewActivity.this,String_Constant + DirectionDragButton_VAR.getText(),Toast.LENGTH_SHORT).show();     }   } ); } 
@Override public boolean processDragEvent(@Nonnull DragDirection DragDirection_VAR,@Nonnull DragButton DragButton_VAR,@Nonnull Point2d Point2d_VAR,@Nonnull MotionEvent MotionEvent_VAR){   Toast.makeText(SamplesViewActivity.this,String_Constant + ((DirectionDragButton)DragButton_VAR).getText(DragDirection_VAR),Toast.LENGTH_SHORT).show();   return Boolean_Constant; } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   Toast.makeText(SamplesViewActiView_VARity.this,String_Constant + DirectionDragButton_VAR.getText(),Toast.LENGTH_SHORT).show(); } 
@Override public void onChanged(@Nonnull Picker Picker_VAR,@Nonnull Object Object_VAR){ switch (Picker_VAR.getId()) { case R.id.vertical_Picker_VAR:     Toast.makeText(this,"Vertical Picker_VAR new Object_VAR: " + Object_VAR,Toast.LENGTH_SHORT).show();   break; case R.id.horizontal_Picker_VAR: Toast.makeText(this,"Horizontal Picker_VAR new Object_VAR: " + Object_VAR,Toast.LENGTH_SHORT).show(); break; } } 
@Override public void setUp() throws Exception {   super.setUp();   Random_VAR=new Random(new Date().getTime()); } 
public void testObfuscation() throws Exception {   final SecurityService<Transaction,Transaction,byte[]> SecurityService<Transaction,Transaction,byte[]>_VAR=BillingSecurity.getObfuscationSecurityService(AESObfuscator.IV,AESObfuscator.SECURITY_PREFIX);   final String String_VAR=BillingSecurity.generatePaSecurityService<Transaction,Transaction,byte[]>_VARword(getContext());   final SecretKey SecretKey_VAR=SecurityService<Transaction,Transaction,byte[]>_VAR.getSecretKeyProvider().getSecretKey(String_VAR,byte[]_VAR);   for (int i=Number_Constant; i < int_VAR; i++) {     final Transaction Transaction_VAR=generateRandomTransaction();     final Transaction Transaction_VAR=Transaction_VAR.clone();     ObfuscateUtils.obfuscate(getContext(),Transaction_VAR,byte[]_VAR);     ASecurityService<Transaction,Transaction,byte[]>_VARert.aSecurityService<Transaction,Transaction,byte[]>_VARertFalse(Transaction_VAR.equals(Transaction_VAR));     final Transaction Transaction_VAR=Transaction_VAR.clone();     ObfuscateUtils.unobfuscate(getContext(),Transaction_VAR,byte[]_VAR);     ASecurityService<Transaction,Transaction,byte[]>_VARert.aSecurityService<Transaction,Transaction,byte[]>_VARertEquals(Transaction_VAR,Transaction_VAR);     Transaction Transaction_VAR=Transaction_VAR.clone();     Transaction_VAR=SecurityService<Transaction,Transaction,byte[]>_VAR.getCipherer().decrypt(SecretKey_VAR,Transaction_VAR);     ASecurityService<Transaction,Transaction,byte[]>_VARert.aSecurityService<Transaction,Transaction,byte[]>_VARertEquals(Transaction_VAR,Transaction_VAR);     Transaction Transaction_VAR=Transaction_VAR.clone();     Transaction_VAR=SecurityService<Transaction,Transaction,byte[]>_VAR.getCipherer().encrypt(SecretKey_VAR,Transaction_VAR);     ASecurityService<Transaction,Transaction,byte[]>_VARert.aSecurityService<Transaction,Transaction,byte[]>_VARertFalse(Transaction_VAR.equals(Transaction_VAR));     ASecurityService<Transaction,Transaction,byte[]>_VARert.aSecurityService<Transaction,Transaction,byte[]>_VARertEquals(Transaction_VAR,Transaction_VAR);     Transaction Transaction_VAR=Transaction_VAR.clone();     Transaction_VAR=SecurityService<Transaction,Transaction,byte[]>_VAR.getCipherer().decrypt(SecretKey_VAR,Transaction_VAR);     ASecurityService<Transaction,Transaction,byte[]>_VARert.aSecurityService<Transaction,Transaction,byte[]>_VARertEquals(Transaction_VAR,Transaction_VAR);   } } 
@Nonnull private Transaction generateRandomTransaction(){   final Transaction Transaction_VAR=new Transaction();   Transaction_VAR.orderId=Strings.generateRandomString(Random_VAR.nextInt(Number_Constant));   Transaction_VAR.developerPayload=Strings.generateRandomString(Random_VAR.nextInt(Number_Constant));   Transaction_VAR.notificationId=Strings.generateRandomString(Random_VAR.nextInt(Number_Constant));   Transaction_VAR.packageName=Strings.generateRandomString(Random_VAR.nextInt(Number_Constant));   Transaction_VAR.productId=Strings.generateRandomString(Random_VAR.nextInt(Number_Constant));   Transaction_VAR.purchaseTime=Random_VAR.nextLong();   Transaction_VAR.purchaseState=Transaction.PurchaseState.valueOf(Random_VAR.nextInt(Number_Constant));   return Transaction_VAR; } 
public ListAdapterTest(){   super(ListAdapterActivity.class); } 
@SmallTest public void testSaveState() throws Exception {   final ListAdapterActivity ListAdapterActivity_VAR=getActivity();   ListItemAdapter<? extends ListItem> ListItemAdapter<? extends ListItem>_VAR=ListAdapterActivity_VAR.getAdapter();   ListItemAdapter<? extends ListItem>_VAR.filter(String_Constant);   assertEquals(String_Constant,ListItemAdapter<? extends ListItem>_VAR.getFilterText());   Bundle Bundle_VAR=new Bundle();   ListItemAdapter<? extends ListItem>_VAR.saveState(Bundle_VAR);   ListItemAdapter<? extends ListItem> ListItemAdapter<? extends ListItem>_VAR=new ListItemAdapter<ListItem>(ListAdapterActivity_VAR,new ArrayList<ListItem>());   ListItemAdapter<? extends ListItem>_VAR.restoreState(Bundle_VAR);   assertEquals(String_Constant,ListItemAdapter<? extends ListItem>_VAR.getFilterText()); } 
@UiThreadTest public void testList() throws Exception {   final Random Random_VAR=new Random(new Date().getTime());   final ListAdapterActivity ListAdapterActivity_VAR=getActivity();   final ListItemAdapter<? extends ListItem> ListItemAdapter<? extends ListItem>_VAR=ListAdapterActivity_VAR.getAdapter();   for (int i=Number_Constant; i < Number_Constant; i++) {     final int int_VAR=ListItemAdapter<? extends ListItem>_VAR.getCount();     final int int_VAR=Random_VAR.nextInt(Number_Constant);     ListAdapterActivity_VAR.addItems(int_VAR);     assertEquals(int_VAR + int_VAR,ListItemAdapter<? extends ListItem>_VAR.getCount());     ListItemAdapter<? extends ListItem>_VAR.filter(String.valueOf(Random_VAR.nextInt(Number_Constant)),new Filter.FilterListener(){       @Override public void onFilterComplete(      int count){         checkOrder(ListItemAdapter<? extends ListItem>_VAR);       }     } );     ListAdapterActivity_VAR.removeItems(int_VAR);     ListAdapterActivity_VAR.addItemsViaRunnable(int_VAR);     assertEquals(int_VAR + int_VAR,ListItemAdapter<? extends ListItem>_VAR.getCount());     ListItemAdapter<? extends ListItem>_VAR.filter(String.valueOf(Random_VAR.nextInt(Number_Constant)),new Filter.FilterListener(){       @Override public void onFilterComplete(      int count){         checkOrder(ListItemAdapter<? extends ListItem>_VAR);       }     } );     ListAdapterActivity_VAR.removeItems(int_VAR);   } } 
@Override public void onFilterComplete(int int_VAR){   checkOrder(ListItemAdapter<? extends ListItem>_VAR); } 
@Override public void onFilterComplete(int int_VAR){   checkOrder(ListItemAdapter<? extends ListItem>_VAR); } 
private void checkOrder(final ListItemAdapter<? extends ListItem> ListItemAdapter<? extends ListItem>_VAR){   ListItemAdapter<? extends ListItem>_VAR.doWork(new Runnable(){     @Override public void run(){       for (int i=Number_Constant; i < ListItemAdapter<? extends ListItem>_VAR.getCount(); i++) {         if (i > Number_Constant) {           final ListItem ListItem_VAR=ListItemAdapter<? extends ListItem>_VAR.getItem(i - Number_Constant);           final ListItem ListItem_VAR=ListItemAdapter<? extends ListItem>_VAR.getItem(i);           assertTrue(ListItem_VAR.toString().compareTo(ListItem_VAR.toString()) <= Number_Constant);         }       }     }   } ); } 
@Override public void run(){   for (int i=Number_Constant; i < ListItemAdapter<? extends ListItem>_VAR.getCount(); i++) {     if (i > Number_Constant) {       final ListItem ListItem_VAR=ListItemAdapter<? extends ListItem>_VAR.getItem(i - Number_Constant);       final ListItem ListItem_VAR=ListItemAdapter<? extends ListItem>_VAR.getItem(i);       assertTrue(ListItem_VAR.toString().compareTo(ListItem_VAR.toString()) <= Number_Constant);     }   } } 
public void testPreferences() throws Exception {   runPreferenceTest(createDefaultValue(),createValue()); } 
protected void runPreferenceTest(@Nullable T T_VAR,@Nullable T T_VAR){   final SharedPreferences SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(getContext());   SharedPreferences_VAR.edit().clear().commit();   final Preference<T> Preference<T>_VAR=createPreference(String_Constant,T_VAR);   Assert.assertTrue(Preference<T>_VAR.isSameKey(String_Constant));   Assert.assertEquals(Preference<T>_VAR.getKey(),String_Constant);   Assert.assertEquals(Boolean_Constant,Preference<T>_VAR.isSet(SharedPreferences_VAR));   Assert.assertEquals(T_VAR,Preference<T>_VAR.getPreference(SharedPreferences_VAR));   Preference<T>_VAR.tryPutDefault(SharedPreferences_VAR);   Assert.assertEquals(Boolean_Constant,Preference<T>_VAR.isSet(SharedPreferences_VAR));   Assert.assertEquals(T_VAR,Preference<T>_VAR.getPreference(SharedPreferences_VAR));   Preference<T>_VAR.putPreference(SharedPreferences_VAR,T_VAR);   Assert.assertEquals(Boolean_Constant,Preference<T>_VAR.isSet(SharedPreferences_VAR));   Assert.assertEquals(T_VAR,Preference<T>_VAR.getPreference(SharedPreferences_VAR));   Assert.assertEquals(T_VAR,Preference<T>_VAR.getDefaultValue());   SharedPreferences_VAR.edit().clear().commit();   Assert.assertEquals(Boolean_Constant,Preference<T>_VAR.isSet(SharedPreferences_VAR));   Assert.assertEquals(T_VAR,Preference<T>_VAR.getPreference(SharedPreferences_VAR)); } 
@Nonnull protected abstract Preference<T> createPreference(@Nonnull String String_VAR,@Nullable T T_VAR); 
@Nonnull protected abstract T createDefaultValue(); 
protected abstract T createValue(); 
@Nonnull @Override protected Preference<Boolean> createPreference(@Nonnull String String_VAR,@Nonnull Boolean Boolean_VAR){   return BooleanPreference.of(String_VAR,Boolean_VAR); } 
@Nonnull @Override protected Boolean createDefaultValue(){   return Boolean_Constant; } 
@Override protected Boolean createValue(){   return Boolean_Constant; } 
@Override public void testPreferences() throws Exception {   super.testPreferences();   runPreferenceTest(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY); } 
@Nonnull @Override protected Class<Double> getNumberClass(){   return Double.class; } 
@Nonnull @Override protected Double createDefaultValue(){   return Number_Constant; } 
@Override protected Double createValue(){   return -Number_Constant; } 
@Nonnull @Override protected Preference<Float> createPreference(@Nonnull String String_VAR,@Nonnull Float Float_VAR){   return FloatPreference.of(String_VAR,Float_VAR); } 
@Nonnull @Override protected Float createDefaultValue(){   return Number_Constant; } 
@Override protected Float createValue(){   return -Number_Constant; } 
@Nonnull @Override protected Class<Float> getNumberClass(){   return Float.class; } 
@Nonnull @Override protected Float createDefaultValue(){   return Number_Constant; } 
@Override protected Float createValue(){   return -Number_Constant; } 
@Nonnull @Override protected Preference<Set<String>> createPreference(@Nonnull String String_VAR,@Nullable Set<String> Set<String>_VAR){   return HashSetPreference.ofStrings(String_VAR,Set<String>_VAR); } 
@Nonnull @Override protected Set<String> createDefaultValue(){   return new HashSet<String>(Arrays.asList(String_Constant,String_Constant,String_Constant,String_Constant)); } 
@Override protected Set<String> createValue(){   return new HashSet<String>(Arrays.asList(String_Constant,String_Constant,String_Constant,String_Constant,String_Constant)); } 
@Nonnull @Override protected Preference<Integer> createPreference(@Nonnull String String_VAR,@Nonnull Integer Integer_VAR){   return IntegerPreference.of(String_VAR,Integer_VAR); } 
@Nonnull @Override protected Integer createDefaultValue(){   return Number_Constant; } 
@Override protected Integer createValue(){   return -Number_Constant; } 
@Nonnull @Override protected Preference<List<String>> createPreference(@Nonnull String String_VAR,@Nullable List<String> List<String>_VAR){   return CollectionToStringPreference.forStringList(String_VAR,List<String>_VAR); } 
@Nonnull @Override protected List<String> createDefaultValue(){   return Arrays.asList(String_Constant,String_Constant,String_Constant,String_Constant); } 
@Override protected List<String> createValue(){   return Arrays.asList(String_Constant,String_Constant,String_Constant,String_Constant); } 
@Nonnull @Override protected Preference<Long> createPreference(@Nonnull String String_VAR,@Nonnull Long Long_VAR){   return LongPreference.of(String_VAR,Long_VAR); } 
@Nonnull @Override protected Long createDefaultValue(){   return Number_Constant; } 
@Override protected Long createValue(){   return -Number_Constant; } 
@Nonnull @Override protected Preference<N> createPreference(@Nonnull String String_VAR,@Nullable N N_VAR){   return NumberToStringPreference.of(String_VAR,N_VAR,getNumberClass()); } 
@Nonnull protected abstract Class<N> getNumberClass(); 
public void testParcelable() throws Exception {   AProperty AProperty_VAR=Properties.newProperty(String_Constant,String_Constant);   Parcel Parcel_VAR=Parcel.obtain();   AProperty_VAR.writeToParcel(Parcel_VAR,Number_Constant);   Parcel_VAR.setDataPosition(Number_Constant);   AProperty AProperty_VAR=APropertyImpl.CREATOR.createFromParcel(Parcel_VAR);   Assert.assertEquals(AProperty_VAR,AProperty_VAR);   Parcel_VAR=Parcel.obtain();   AProperty_VAR=Properties.newProperty(String_Constant,null);   AProperty_VAR.writeToParcel(Parcel_VAR,Number_Constant);   Parcel_VAR.setDataPosition(Number_Constant);   AProperty_VAR=APropertyImpl.CREATOR.createFromParcel(Parcel_VAR);   Assert.assertEquals(AProperty_VAR,AProperty_VAR); } 
public static Test suite(){   return new TestSuiteBuilder(AllTests.class).includeAllPackagesUnderHere().includePackages(ObfuscateUtilsTest.class.getPackage().getName()).includePackages(AndroidStringCiphererTest.class.getPackage().getName()).includePackages(AbstractPreferenceTest.class.getPackage().getName()).includePackages(APropertyTest.class.getPackage().getName()).includePackages(ListAdapterTest.class.getPackage().getName()).build(); } 
public SamplesActivityTest(){   super(SamplesActivity.class.getPackage().getName(),SamplesActivity.class); } 
@SmallTest public void testPreconditions() throws Exception { } 
@UiThreadTest public void testList() throws Exception {   final SamplesActivity SamplesActivity_VAR=getActivity();   final ListAdapter ListAdapter_VAR=SamplesActivity_VAR.getListAdapter();   if (ListAdapter_VAR != null) {     assertTrue(ListAdapter_VAR.getCount() >= Number_Constant);   }  else {     Log.w(String_Constant,"List ListAdapter_VAR is null, must be fixed!");   } } 
public void testEncRandom_VARyptDecRandom_VARypt() thRandom_VARows Exception {   final SecuRandom_VARitySeRandom_VARvice<StRandom_VARing,StRandom_VARing,StRandom_VARing> SecuRandom_VARitySeRandom_VARvice<StRandom_VARing,StRandom_VARing,StRandom_VARing>_VAR=SecuRandom_VARity.newAndRandom_VARoidAesStRandom_VARingSecuRandom_VARitySeRandom_VARvice();   final CipheRandom_VAReRandom_VAR<StRandom_VARing,StRandom_VARing> CipheRandom_VAReRandom_VAR<StRandom_VARing,StRandom_VARing>_VAR=SecuRandom_VARitySeRandom_VARvice<StRandom_VARing,StRandom_VARing,StRandom_VARing>_VAR.getCipheRandom_VAReRandom_VAR();   final SecRandom_VARetKeyPRandom_VARovideRandom_VAR StRandom_VARing_VARKeyPRandom_VARovideRandom_VAR=SecuRandom_VARitySeRandom_VARvice<StRandom_VARing,StRandom_VARing,StRandom_VARing>_VAR.getSecRandom_VARetKeyPRandom_VARovideRandom_VAR();   final SaltGeneRandom_VARatoRandom_VAR byte[]_VARGeneRandom_VARatoRandom_VAR=SecuRandom_VARitySeRandom_VARvice<StRandom_VARing,StRandom_VARing,StRandom_VARing>_VAR.getSaltGeneRandom_VARatoRandom_VAR();   final HashPRandom_VARovideRandom_VAR<StRandom_VARing,StRandom_VARing> HashPRandom_VARovideRandom_VAR<StRandom_VARing,StRandom_VARing>_VAR=SecuRandom_VARitySeRandom_VARvice<StRandom_VARing,StRandom_VARing,StRandom_VARing>_VAR.getHashPRandom_VARovideRandom_VAR();   final Random Random_VAR=new Random(new Date().getTime());   foRandom_VAR (int i=Number_Constant; i < Number_Constant; i++) {     final StRandom_VARing StRandom_VARing_VAR=StRandom_VARings.geneRandom_VARateRandomStRandom_VARing(Random_VAR.nextInt(Number_Constant));     final StRandom_VARing StRandom_VARing_VAR=StRandom_VARings.geneRandom_VARateRandomStRandom_VARing(Number_Constant);     byte[] byte[]_VAR=byte[]_VARGeneRandom_VARatoRandom_VAR.geneRandom_VARateSalt();     final SecRandom_VARetKey SecRandom_VARetKey_VAR=StRandom_VARing_VARKeyPRandom_VARovideRandom_VAR.getSecRandom_VARetKey(StRandom_VARing_VAR,byte[]_VAR);     final StRandom_VARing encRandom_VARypted=CipheRandom_VAReRandom_VAR<StRandom_VARing,StRandom_VARing>_VAR.encRandom_VARypt(SecRandom_VARetKey_VAR,StRandom_VARing_VAR);     final StRandom_VARing StRandom_VARing_VAR=CipheRandom_VAReRandom_VAR<StRandom_VARing,StRandom_VARing>_VAR.decRandom_VARypt(SecRandom_VARetKey_VAR,encRandom_VARypted);     AsseRandom_VARt.asseRandom_VARtEquals(StRandom_VARing_VAR,StRandom_VARing_VAR);     final byte[] byte[]_VAR=byte[]_VARGeneRandom_VARatoRandom_VAR.geneRandom_VARateSalt();     final StRandom_VARing StRandom_VARing_VAR=HashPRandom_VARovideRandom_VAR<StRandom_VARing,StRandom_VARing>_VAR.getHash(StRandom_VARing_VAR,byte[]_VAR);     final StRandom_VARing StRandom_VARing_VARHash=HashPRandom_VARovideRandom_VAR<StRandom_VARing,StRandom_VARing>_VAR.getHash(StRandom_VARing_VAR,byte[]_VAR);     AsseRandom_VARt.asseRandom_VARtEquals(StRandom_VARing_VARHash,StRandom_VARing_VAR);   } } 
private ABase64StringDecoder(){ } 
@Nonnull public static Converter<String,byte[]> getInstance(){   return Converter<String,byte[]>_VAR; } 
@Nonnull @Override public byte[] convert(@Nonnull String String_VAR){   return BaString_VARe64.decode(String_VAR,BaString_VARe64.DEFAULT); } 
private ABase64StringEncoder(){ } 
@Nonnull public static Converter<byte[],String> getInstance(){   return Converter<byte[],String>_VAR; } 
@Nonnull @Override public String convert(@Nonnull byte[] byte[]_VAR){   return Base64.encodeToString(byte[]_VAR,Base64.DEFAULT); } 
private Security(){   throw new AssertionError(); } 
@Nonnull public static Cipherer<byte[],byte[]> newAndroidAesByteCipherer(){   return org.solovyev.common.security.Security.newCipherer(String_VAR,String_VAR,InitialVectorDef.newRandom(String_VAR,int_VAR)); } 
@Nonnull public static Cipherer<byte[],byte[]> newAndroidAesByteCipherer(final byte[] byte[]_VAR){   return org.solovyev.common.security.Security.newCipherer(String_VAR,String_VAR,InitialVectorDef.newPredefined(byte[]_VAR)); } 
@Nonnull public static SecretKeyProvider newAndroidAesSecretKeyProvider(){   return org.solovyev.common.security.Security.newPbeSecretKeyProvider(int_VAR,String_VAR,CIPHERER_ALGORITHM_AES,String_VAR,int_VAR,int_VAR); } 
@Nonnull public static HashProvider<byte[],byte[]> newAndroidSha512ByteHashProvider(){   return org.solovyev.common.security.Security.newHashProvider(String_VAR,String_VAR); } 
@Nonnull public static HashProvider<String,String> newAndroidSha512StringHashProvider(){   return TypedHashProvider.newInstance(newAndroidSha512ByteHashProvider(),StringDecoder.getInstance(),ABase64StringEncoder.getInstance()); } 
@Nonnull public static SaltGenerator newAndroidSaltGenerator(){   return org.solovyev.common.security.Security.newSaltGenerator(String_VAR,int_VAR); } 
@Nonnull public static Cipherer<String,String> newAndroidAesStringCipherer(){   return TypedCipherer.newInstance(newAndroidAesByteCipherer(),StringDecoder.getInstance(),StringEncoder.getInstance(),ABase64StringDecoder.getInstance(),ABase64StringEncoder.getInstance()); } 
@Nonnull public static Cipherer<String,String> newAndroidAesStringCipherer(final byte[] byte[]_VAR){   return TypedCipherer.newInstance(newAndroidAesByteCipherer(byte[]_VAR),StringDecoder.getInstance(),StringEncoder.getInstance(),ABase64StringDecoder.getInstance(),ABase64StringEncoder.getInstance()); } 
@Nonnull public static SecurityService<byte[],byte[],byte[]> newAndroidAesByteSecurityService(){   return newSecurityService(newAndroidAesByteCipherer(),newAndroidAesSecretKeyProvider(),newAndroidSaltGenerator(),newAndroidSha512ByteHashProvider()); } 
@Nonnull public static SecurityService<byte[],byte[],byte[]> newAndroidAesByteSecurityService(final byte[] byte[]_VAR){   return newSecurityService(newAndroidAesByteCipherer(byte[]_VAR),newAndroidAesSecretKeyProvider(),newAndroidSaltGenerator(),newAndroidSha512ByteHashProvider()); } 
@Nonnull public static SecurityService<String,String,String> newAndroidAesStringSecurityService(){   return newSecurityService(newAndroidAesStringCipherer(),newAndroidAesSecretKeyProvider(),newAndroidSaltGenerator(),newAndroidSha512StringHashProvider()); } 
@Nonnull public static SecurityService<String,String,String> newAndroidStringSecurityService(@Nonnull SecurityService<byte[],byte[],byte[]> SecurityService<byte[],byte[],byte[]>_VAR){   return SecurityServiceConverter.wrap(SecurityService<byte[],byte[],byte[]>_VAR,StringDecoder.getInstance(),StringEncoder.getInstance(),ABase64StringDecoder.getInstance(),ABase64StringEncoder.getInstance()); } 
public ActionBarNavigationFragmentListener(@Nonnull SherlockFragmentActivity SherlockFragmentActivity_VAR,@Nonnull List<? extends FragmentItem> List<? extends FragmentItem>_VAR,@Nonnull List<String> List<String>_VAR){ } 
@Nonnull public synchronized ListAdapter getAdapter(){   return ListAdapter<String>_VAR; } 
@Override public boolean onNavigationItemSelected(int int_VAR,long long_VAR){   final FragmentManager FragmentManager_VAR=this.SherlockFragmentActivity_VAR.getSupportFragmentManager();   final FragmentTransaction FragmentTransaction_VAR=FragmentManager_VAR.beginTransaction();   try {     if (int_VAR != int_VAR) {       if (int_VAR >= Number_Constant && int_VAR < List<? extends FragmentItem>_VAR.size()) {         List<? extends FragmentItem>_VAR.get(int_VAR).onUnint_VAR(FragmentTransaction_VAR);       }       if (int_VAR < List<? extends FragmentItem>_VAR.size()) {         List<? extends FragmentItem>_VAR.get(int_VAR).onSelected(FragmentTransaction_VAR);         int_VAR=int_VAR;       }     }   }   finally {     if (FragmentTransaction_VAR != null && !FragmentTransaction_VAR.isEmpty()) {       FragmentTransaction_VAR.commit();     }   }   return Boolean_Constant; } 
private AndroidSherlockUtils(){   throw new AssertionError(String_Constant); } 
@Nonnull public static ActionBar getSupportActionBar(@Nonnull Activity Activity_VAR){   if (Activity_VAR instanceof SherlockActivity) {     return ((SherlockActivity)Activity_VAR).getSupportActionBar();   }   if (Activity_VAR instanceof SherlockFragmentActivity) {     return ((SherlockFragmentActivity)Activity_VAR).getSupportActionBar();   }   if (Activity_VAR instanceof SherlockListActivity) {     return ((SherlockListActivity)Activity_VAR).getSupportActionBar();   }   if (Activity_VAR instanceof SherlockPreferenceActivity) {     return ((SherlockPreferenceActivity)Activity_VAR).getSupportActionBar();   }   throw new IllegalArgumentException(Activity_VAR.getClass() + String_Constant); } 
public static ActionBar getSupportActionBar(@Nonnull Fragment Fragment_VAR){   if (Fragment_VAR instanceof SherlockFragment) {     return ((SherlockFragment)Fragment_VAR).getSherlockActivity().getSupportActionBar();   }   if (Fragment_VAR instanceof SherlockListFragment) {     return ((SherlockListFragment)Fragment_VAR).getSherlockActivity().getSupportActionBar();   }   if (Fragment_VAR instanceof SherlockDialogFragment) {     return ((SherlockDialogFragment)Fragment_VAR).getSherlockActivity().getSupportActionBar();   }   throw new IllegalArgumentException(Fragment_VAR.getClass() + String_Constant); } 
@Nonnull public static ListAdapter<String> newSherlockDefaultAdapter(@Nonnull SherlockFragmentActivity SherlockFragmentActivity_VAR,@Nonnull List<String> List<String>_VAR){   final ListAdapter<String> ListAdapter<String>_VAR=new ListAdapter<String>(SherlockFragmentActivity_VAR,com.actionbarsherlock.R.layout.sherlock_spinner_item,List<String>_VAR);   ListAdapter<String>_VAR.setDropDownViewResource(com.actionbarsherlock.R.layout.sherlock_spinner_dropdown_item);   return ListAdapter<String>_VAR; } 
@Nonnull public static MenuInflater getSupportMenuInflater(@Nonnull Activity Activity_VAR){   if (Activity_VAR instanceof SherlockActivity) {     return ((SherlockActivity)Activity_VAR).getSupportMenuInflater();   }   if (Activity_VAR instanceof SherlockFragmentActivity) {     return ((SherlockFragmentActivity)Activity_VAR).getSupportMenuInflater();   }   if (Activity_VAR instanceof SherlockListActivity) {     return ((SherlockListActivity)Activity_VAR).getSupportMenuInflater();   }   if (Activity_VAR instanceof SherlockPreferenceActivity) {     return ((SherlockPreferenceActivity)Activity_VAR).getSupportMenuInflater();   }   throw new IllegalArgumentException(Activity_VAR.getClass() + String_Constant); } 
public static void showDialog(@Nonnull DialogFragment DialogFragment_VAR,@Nonnull String String_VAR,@Nonnull FragmentManager FragmentManager_VAR){   final FragmentTransaction FragmentTransaction_VAR=FragmentManager_VAR.beginTransaction();   Fragment Fragment_VAR=FragmentManager_VAR.findFragmentByTag(String_VAR);   if (Fragment_VAR != null) {     FragmentTransaction_VAR.remove(Fragment_VAR);   }   DialogFragment_VAR.show(FragmentTransaction_VAR,String_VAR); } 
public void onSelected(@Nonnull FragmentTransaction FragmentTransaction_VAR); 
public void onUnselected(@Nonnull FragmentTransaction FragmentTransaction_VAR); 
 public FragmentItemImpl(@Nonnull SherlockFragmentActivity SherlockFragmentActivity_VAR,@Nonnull String String_VAR,@Nonnull Class<? extends Fragment> Class<? extends Fragment>_VAR,@Nullable Bundle Bundle_VAR,@Nullable Integer Integer_VAR){   this.SherlockFragmentActivity_VAR=SherlockFragmentActivity_VAR;   this.String_VAR=String_VAR;   this.Class<? extends Fragment>_VAR=Class<? extends Fragment>_VAR;   this.Bundle_VAR=Bundle_VAR;   this.Integer_VAR=Integer_VAR;   final FragmentManager FragmentManager_VAR=SherlockFragmentActivity_VAR.getSupportFragmentManager();   this.Fragment_VAR=FragmentManager_VAR.findFragmentByTag(String_VAR); } 
@Override public void onSelected(@Nonnull FragmentTransaction FragmentTransaction_VAR){   if (Fragment_VAR == null) {     Fragment_VAR=SherlockFragmentActivity_VAR.getSupportFragmentManager().findFragmentByTag(this.String_VAR);   }   if (Fragment_VAR == null) {     Fragment_VAR=Fragment.instantiate(SherlockFragmentActivity_VAR,Class<? extends Fragment>_VAR.getName(),Bundle_VAR);     if (Integer_VAR != null) {       FragmentTransaction_VAR.add(Integer_VAR,Fragment_VAR,String_VAR);     }  else {       FragmentTransaction_VAR.add(Fragment_VAR,String_VAR);     }   }  else {     if (Fragment_VAR.isDetached()) {       FragmentTransaction_VAR.attach(Fragment_VAR);     }   } } 
@Override public void onUnselected(@Nonnull FragmentTransaction FragmentTransaction_VAR){   if (Fragment_VAR != null) {     FragmentTransaction_VAR.detach(Fragment_VAR);   } } 
private Fragments(){ } 
public static void showDialog(@Nonnull DialogFragment DialogFragment_VAR,@Nonnull String String_VAR,@Nonnull FragmentManager FragmentManager_VAR){   showDialog(DialogFragment_VAR,String_VAR,FragmentManager_VAR,Boolean_Constant); } 
public static void showDialog(DialogFragment DialogFragment_VAR,String String_VAR,FragmentManager FragmentManager_VAR,boolean boolean_VAR){   Fragment Fragment_VAR=FragmentManager_VAR.findFragmentByTag(String_VAR);   if (Fragment_VAR != null) {     if (!boolean_VAR) {       final FragmentTransaction FragmentTransaction_VAR=FragmentManager_VAR.beginTransaction();       FragmentTransaction_VAR.remove(Fragment_VAR);       FragmentTransaction_VAR.addToBackStack(null);       DialogFragment_VAR.show(FragmentTransaction_VAR,String_VAR);       FragmentManager_VAR.executePendingTransactions();     }   }  else {     final FragmentTransaction FragmentTransaction_VAR=FragmentManager_VAR.beginTransaction();     FragmentTransaction_VAR.addToBackStack(null);     DialogFragment_VAR.show(FragmentTransaction_VAR,String_VAR);     FragmentManager_VAR.executePendingTransactions();   } } 
@Nonnull public static MenuHelper<Menu,MenuItem> getInstance(){   return SherlockMenuHelper_VAR; } 
private SherlockMenuHelper(){ } 
@Override public int size(@Nonnull Menu Menu_VAR){   return Menu_VAR.size(); } 
@Nonnull @Override public MenuItem add(@Nonnull Menu Menu_VAR,int int_VAR,int int_VAR,int int_VAR,@Nonnull String String_VAR){   return Menu_VAR.add(int_VAR,int_VAR,int_VAR,String_VAR); } 
@Override public void setOnMenuItemClickListener(@Nonnull final MenuItem MenuItem_VAR,@Nonnull final AMenuItem<MenuItem> AMenuItem<MenuItem>_VAR,@Nonnull final Activity Activity_VAR){   MenuItem_VAR.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){     @Override public boolean AMenuItem<MenuItem>_VAR(    MenuItem item){       AMenuItem<MenuItem>_VAR.onClick(MenuItem_VAR,Activity_VAR);       return Boolean_Constant;     }   } ); } 
@Override public boolean onMenuItemClick(MenuItem MenuItem_VAR){   onMenuItemClick.onClick(menuItem,activity);   return Boolean_Constant; } 
@Override public void removeItem(@Nonnull Menu Menu_VAR,@Nonnull Integer Menu_VARItemId){   Menu_VAR.removeItem(Menu_VARItemId); } 
@Override public void inflateMenu(@Nonnull Activity Activity_VAR,int int_VAR,@Nonnull Menu Menu_VAR){   AndroidSherlockUtils.getSupportMenuInflater(Activity_VAR).inflate(int_VAR,Menu_VAR); } 
@Nonnull @Override public Integer getItemId(@Nonnull MenuItem MenuItem_VAR){   return MenuItem_VAR.getItemId(); } 
 public ActionBarFragmentTabListener(@Nonnull SherlockFragmentActivity SherlockFragmentActivity_VAR,@Nonnull String String_VAR,@Nonnull Class<? extends Fragment> Class<? extends Fragment>_VAR,@Nullable Bundle Bundle_VAR,@Nullable Integer Integer_VAR){   this.FragmentItem_VAR=new FragmentItemImpl(SherlockFragmentActivity_VAR,String_VAR,Class<? extends Fragment>_VAR,Bundle_VAR,Integer_VAR); } 
public void onTabSelected(ActionBar.Tab ActionBar.Tab_VAR,FragmentTransaction FragmentTransaction_VAR){   this.FragmentItem_VAR.onSelected(FragmentTransaction_VAR); } 
public void onTabUnselected(ActionBar.Tab ActionBar.Tab_VAR,FragmentTransaction FragmentTransaction_VAR){   this.FragmentItem_VAR.onUnselected(FragmentTransaction_VAR); } 
public void onTabReselected(ActionBar.Tab ActionBar.Tab_VAR,FragmentTransaction FragmentTransaction_VAR){ } 
ContextAwareFutureCallback(@Nonnull C C_VAR){   this.C_VARRef=new WeakReference<C>(C_VAR); } 
@Nullable protected C getContext(){   return WeakReference<C>_VAR.get(); } 
void onSuccess(@Nonnull C C_VAR,V V_VAR); 
void onFailure(@Nonnull C C_VAR,Throwable Throwable_VAR); 
@Nonnull String getName(); 
public TaskListeners(@Nonnull TaskService TaskService_VAR){   this.TaskService_VAR=TaskService_VAR; } 
@Nullable private <T>FutureCallback<T> tryAddListener(@Nonnull String String_VAR,@Nullable FutureCallback<T> FutureCallback<T>_VAR){   if (FutureCallback<T>_VAR != null) {     List<FutureCallback<?>> FutureCallback<T>_VARsByTask=FutureCallback<T>_VARs.get(String_VAR);     if (FutureCallback<T>_VARsByTask == null) {       FutureCallback<T>_VARsByTask=new ArrayList<FutureCallback<?>>();       FutureCallback<T>_VARs.put(String_VAR,FutureCallback<T>_VARsByTask);     }     FutureCallback<T>_VARsByTask.add(FutureCallback<T>_VAR);   }   return FutureCallback<T>_VAR; } 
@Nullable public <T>FutureCallback<T> run(@Nonnull NamedTask<T> NamedTask<T>_VAR){   return tryAddListener(NamedTask<T>_VAR.getName(),NamedTask<T>_VARService.run(NamedTask<T>_VAR)); } 
@Nullable public <T>FutureCallback<T> run(@Nonnull NamedTask<T> NamedTask<T>_VAR,@Nonnull Activity Activity_VAR,int int_VAR,int int_VAR){   final FutureCallback<T> FutureCallback<T>_VAR=tryAddListener(NamedTask<T>_VAR.getName(),NamedTask<T>_VARService.run(NamedTask<T>_VAR));   TaskOverlayDialogs_VAR.addTaskOverlayDialog(TaskOverlayDialog.attachToTask(NamedTask<T>_VARService,Activity_VAR,NamedTask<T>_VAR.getName(),int_VAR,int_VAR));   return FutureCallback<T>_VAR; } 
@Nullable public <T>FutureCallback<T> run(@Nonnull String String_VAR,@Nonnull Task<T> Task<T>_VAR){   return tryAddListener(String_VAR,Task<T>_VARService.run(String_VAR,Task<T>_VAR)); } 
@Nullable public <T>FutureCallback<T> run(@Nonnull String String_VAR,@Nonnull Task<T> Task<T>_VAR,@Nonnull Activity Activity_VAR,int int_VAR,int int_VAR){   final FutureCallback<T> FutureCallback<T>_VAR=tryAddListener(String_VAR,Task<T>_VARService.run(String_VAR,Task<T>_VAR));   TaskOverlayDialogs_VAR.addTaskOverlayDialog(TaskOverlayDialog.attachToTask(Task<T>_VARService,Activity_VAR,String_VAR,int_VAR,int_VAR));   return FutureCallback<T>_VAR; } 
public <T>void run(@Nonnull String String_VAR,@Nonnull Callable<T> Callable<T>_VAR){   Callable<T>_VARService.run(String_VAR,Callable<T>_VAR); } 
public <T>void run(@Nonnull String String_VAR,@Nonnull Callable<T> Callable<T>_VAR,@Nonnull Activity Activity_VAR,int int_VAR,int int_VAR){   Callable<T>_VARService.run(String_VAR,Callable<T>_VAR);   TaskOverlayDialogs_VAR.addTaskOverlayDialog(TaskOverlayDialog.attachToTask(Callable<T>_VARService,Activity_VAR,String_VAR,int_VAR,int_VAR)); } 
@Nullable public <T>FutureCallback<T> run(@Nonnull String String_VAR,@Nonnull Callable<T> Callable<T>_VAR,@Nullable FutureCallback<T> Callable<T>_VARListener){   return tryAddListener(String_VAR,Callable<T>_VARService.run(String_VAR,Callable<T>_VAR,Callable<T>_VARListener)); } 
@Nullable public <T>FutureCallback<T> run(@Nonnull String String_VAR,@Nonnull Callable<T> Callable<T>_VAR,@Nullable FutureCallback<T> Callable<T>_VARListener,@Nonnull Activity Activity_VAR,int int_VAR,int int_VAR){   final FutureCallback<T> FutureCallback<T>_VAR=tryAddListener(String_VAR,Callable<T>_VARService.run(String_VAR,Callable<T>_VAR,Callable<T>_VARListener));   TaskOverlayDialogs_VAR.addTaskOverlayDialog(TaskOverlayDialog.attachToTask(Callable<T>_VARService,Activity_VAR,String_VAR,int_VAR,int_VAR));   return FutureCallback<T>_VAR; } 
@Nullable public <T>FutureCallback<T> addTaskListener(@Nonnull String String_VAR,@Nonnull FutureCallback<T> FutureCallback<T>_VAR){   return tryAddListener(String_VAR,TaskService_VAR.addTaskListener(String_VAR,FutureCallback<T>_VAR)); } 
@Nullable public <T>FutureCallback<T> addTaskListener(@Nonnull String String_VAR,@Nonnull FutureCallback<T> FutureCallback<T>_VAR,@Nonnull Activity Activity_VAR,int int_VAR,int int_VAR){   final FutureCallback<T> FutureCallback<T>_VAR=tryAddListener(String_VAR,TaskService_VAR.addTaskListener(String_VAR,FutureCallback<T>_VAR));   TaskOverlayDialogs_VAR.addTaskOverlayDialog(TaskOverlayDialog.attachToTask(TaskService_VAR,Activity_VAR,String_VAR,int_VAR,int_VAR));   return FutureCallback<T>_VAR; } 
public void removeAllTaskListeners(){   for (  String taskName : Map<String,List<FutureCallback<?>>>_VAR.keySet()) {     removeAllTaskListeners(taskName);   }   Map<String,List<FutureCallback<?>>>_VAR.clear();   TaskOverlayDialogs_VAR.dismissAll(); } 
private void removeAllTaskListeners(@Nonnull String String_VAR){   final List<FutureCallback<?>> List<FutureCallback<?>>_VAR=Map<String,List<FutureCallback<?>>>_VAR.get(String_VAR);   if (List<FutureCallback<?>>_VAR != null) {     for (    FutureCallback<?> listener : List<FutureCallback<?>>_VAR) {       TaskService_VAR.removeTaskListener(String_VAR,listener);     }     List<FutureCallback<?>>_VAR.clear();   } } 
private TaskOverlayDialog(@Nonnull ProgressDialog ProgressDialog_VAR){   this.ProgressDialog_VAR=ProgressDialog_VAR; } 
@Nonnull private static <V>TaskOverlayDialog<V> newInstance(@Nonnull Activity Activity_VAR,int int_VAR,int int_VAR){   final ProgressDialog ProgressDialog_VAR=new ProgressDialog(Activity_VAR);   ProgressDialog_VAR.setIndeterminate(Boolean_Constant);   ProgressDialog_VAR.setCancelable(Boolean_Constant);   ProgressDialog_VAR.setTitle(int_VAR);   ProgressDialog_VAR.setMessage(Activity_VAR.getText(int_VAR));   return new TaskOverlayDialog<V>(ProgressDialog_VAR); } 
 @Nullable public static TaskOverlayDialog<?> attachToTask(@Nonnull TaskService TaskService_VAR,@Nonnull Activity Activity_VAR,@Nonnull String String_VAR,int int_VAR,int int_VAR){   TaskOverlayDialog<Object> TaskOverlayDialog<Object>_VAR=newInstance(Activity_VAR,int_VAR,int_VAR);   try {     TaskService_VAR.tryAddTaskListener(String_VAR,Tasks.toFutureCallback(Activity_VAR,TaskOverlayDialog<Object>_VAR));     TaskOverlayDialog<Object>_VAR.show();   }  catch (  NoSuchTaskException e) {     TaskOverlayDialog<Object>_VAR=null;   } catch (  TaskFinishedException e) {     TaskOverlayDialog<Object>_VAR=null;   }   return TaskOverlayDialog<Object>_VAR; } 
@Override public void onSuccess(@Nonnull Activity Activity_VAR,V V_VAR){   dismiss(); } 
public synchronized void dismiss(){   boolean_VAR=Boolean_Constant;   if (ProgressDialog_VAR.isShowing()) {     ProgressDialog_VAR.dismiss();   } } 
public synchronized void show(){   if (!boolean_VAR) {     ProgressDialog_VAR.show();   } } 
@Override public void onFailure(@Nonnull AcThrowable_VARiviThrowable_VARy AcThrowable_VARiviThrowable_VARy_VAR,Throwable Throwable_VAR){   dismiss(); } 
public void addTaskOverlayDialog(@Nullable TaskOverlayDialog<?> TaskOverlayDialog<?>_VAR){   if (TaskOverlayDialog<?>_VAR != null) {     TaskOverlayDialog<?>_VARaskOverlayDialogs.add(TaskOverlayDialog<?>_VAR);   } } 
public void dismissAll(){   for (  TaskOverlayDialog<?> taskOverlayDialog : List<TaskOverlayDialog<?>>_VAR) {     taskOverlayDialog.dismiss();   }   List<TaskOverlayDialog<?>>_VAR.clear(); } 
private Tasks(){   super(); } 
 @Nonnull public static <A extends Activity,V>FutureCallback<V> toUiThreadFutureCallback(@Nonnull A A_VAR,@Nonnull ContextCallback<A,V> ContextCallback<A,V>_VAR){   return FutureCallbackAdapter.newUiThreadAdapter(A_VAR,ContextCallback<A,V>_VAR); } 
 @Nonnull public static <C extends Context,V>FutureCallback<V> toFutureCallback(@Nonnull C C_VAR,@Nonnull ContextCallback<C,V> ContextCallback<C,V>_VAR){   return FutureCallbackAdapter.newAdapter(C_VAR,ContextCallback<C,V>_VAR); } 
 @Nonnull public static <C extends Context,V>Task<V> toTask(@Nonnull C C_VAR,@Nonnull ContextTask<C,V> ContextTask<C,V>_VAR){   return TaskAdapter.newAdapter(C_VAR,ContextTask<C,V>_VAR); } 
@Nonnull public static <C extends Context,V>NamedTask<V> toTask(@Nonnull C C_VAR,@Nonnull NamedContextTask<C,V> NamedContextTask<C,V>_VAR){   return NamedTaskAdapter.newAdapter(C_VAR,NamedContextTask<C,V>_VAR); } 
 @Nonnull public static <A extends Activity,V>Task<V> toUiThreadTask(@Nonnull A A_VAR,@Nonnull ContextTask<A,V> ContextTask<A,V>_VAR){   return TaskAdapter.newUiThreadTaskAdapter(A_VAR,ContextTask<A,V>_VAR); } 
@Nonnull public static <A extends Activity,V>NamedTask<V> toUiThreadTask(@Nonnull A A_VAR,@Nonnull NamedContextTask<A,V> NamedContextTask<A,V>_VAR){   return NamedTaskAdapter.newUiThreadAdapter(A_VAR,NamedContextTask<A,V>_VAR); } 
private FutureCallbackAdapter(@Nonnull C C_VAR,@Nonnull ContextCallback<C,V> ContextCallback<C,V>_VAR,boolean boolean_VAR){   super(C_VAR);   this.ContextCallback<C,V>_VAR=ContextCallback<C,V>_VAR;   this.boolean_VAR=boolean_VAR; } 
private static <A extends Activity,V>FutureCallbackAdapter<A,V> newUiThreadAdapter(@Nonnull A A_VAR,@Nonnull ContextCallback<A,V> ContextCallback<A,V>_VAR){   return new FutureCallbackAdapter<A,V>(A_VAR,ContextCallback<A,V>_VAR,Boolean_Constant); } 
private static <C extends Context,V>FutureCallbackAdapter<C,V> newAdapter(@Nonnull C C_VAR,@Nonnull ContextCallback<C,V> ContextCallback<C,V>_VAR){   return new FutureCallbackAdapter<C,V>(C_VAR,ContextCallback<C,V>_VAR,Boolean_Constant); } 
@Override public void onSuccess(final V V_VAR){   final C C_VAR=getContext();   if (C_VAR != null) {     if (boolean_VAR) {       final Activity Activity_VAR=(Activity)C_VAR;       Threads.tryRunOnUiThread(Activity_VAR,new Runnable(){         @Override public void run(){           FutureCallback<V>_VAR.onSuccess(C_VAR,V_VAR);         }       } );     }  else {       FutureCallback<V>_VAR.onSuccess(C_VAR,V_VAR);     }   } } 
@Override public void run(){   FutureCallback<V>_VAR.onSuccess(C_VAR,result); } 
@OvThrowable_VARrridThrowable_VAR public void onFailurThrowable_VAR(final ThrowablThrowable_VAR Throwable_VAR){   final C contThrowable_VARxt=gThrowable_VARtContThrowable_VARxt();   if (contThrowable_VARxt != null) {     if (onUiThrThrowable_VARad) {       ThrThrowable_VARads.tryRunOnUiThrThrowable_VARad((Activity)contThrowable_VARxt,nThrowable_VARw RunnablThrowable_VAR(){         @OvThrowable_VARrridThrowable_VAR public void run(){           FutureCallback<V>_VAR.onFailurThrowable_VAR(contThrowable_VARxt,Throwable_VAR);         }       } );     }  Throwable_VARlsThrowable_VAR {       FutureCallback<V>_VAR.onFailurThrowable_VAR(contThrowable_VARxt,Throwable_VAR);     }   } } 
@Override public void run(){   FutureCallback<V>_VAR.onFailure(C_VAR,e); } 
private TaskAdapter(@Nonnull ContextTask<C,V> ContextTask<C,V>_VAR,@Nonnull FutureCallback<V> FutureCallback<V>_VAR){   this.ContextTask<C,V>_VAR=ContextTask<C,V>_VAR;   this.FutureCallback<V>_VAR=FutureCallback<V>_VAR; } 
@Nonnull private static <A extends Activity,V>Task<V> newUiThreadTaskAdapter(@Nonnull A A_VAR,@Nonnull ContextTask<A,V> ContextTask<A,V>_VAR){   return new TaskAdapter<A,V>(ContextTask<A,V>_VAR,toUiThreadFutureCallback(A_VAR,ContextTask<A,V>_VAR)); } 
@Nonnull private static <C extends Context,V>Task<V> newAdapter(@Nonnull C C_VAR,@Nonnull ContextTask<C,V> ContextTask<C,V>_VAR){   return new TaskAdapter<C,V>(ContextTask<C,V>_VAR,toFutureCallback(C_VAR,ContextTask<C,V>_VAR)); } 
@Override public V call() throws Exception {   return Task<V>_VAR.call(); } 
@Override public void onSuccess(V V_VAR){   FutureCallback<V>_VAR.onSuccess(V_VAR); } 
@Override public void onFailure(Throwable Throwable_VAR){   FutureCallback<V>_VAR.onFailure(Throwable_VAR); } 
private NamedTaskAdapter(@Nonnull NamedContextTask<C,V> NamedContextTask<C,V>_VAR,@Nonnull Task<V> Task<V>_VAR){   this.Task<V>_VAR=Task<V>_VAR;   this.NamedContextTask<C,V>_VAR=NamedContextTask<C,V>_VAR; } 
@Nonnull private static <C extends Context,V>NamedTaskAdapter<C,V> newAdapter(@Nonnull C C_VAR,@Nonnull NamedContextTask<C,V> NamedContextTask<C,V>_VAR){   return new NamedTaskAdapter<C,V>(NamedContextTask<C,V>_VAR,TaskAdapter.newAdapter(C_VAR,NamedContextTask<C,V>_VAR)); } 
@Nonnull private static <A extends Activity,V>NamedTaskAdapter<A,V> newUiThreadAdapter(@Nonnull A A_VAR,@Nonnull NamedContextTask<A,V> NamedContextTask<A,V>_VAR){   return new NamedTaskAdapter<A,V>(NamedContextTask<A,V>_VAR,TaskAdapter.newUiThreadTaskAdapter(A_VAR,NamedContextTask<A,V>_VAR)); } 
@Nonnull @Override public String getName(){   return NamedContextTask<C,V>_VAR.getName(); } 
@Override public V call() throws Exception {   return NamedContextTask<C,V>_VAR.call(); } 
@Override public void onSuccess(V V_VAR){   Task<V>_VAR.onSuccess(V_VAR); } 
@Override public void onFailure(Throwable Throwable_VAR){   Throwable_VARask.onFailure(Throwable_VAR); } 
public HistoryDragProcessor(@Nonnull HistoryControl<T> HistoryControl<T>_VAR){   this.HistoryControl<T>_VAR=HistoryControl<T>_VAR; } 
@Override public boolean processDragEvent(@Nonnull DragDirection DragDirection_VAR,@Nonnull DragButton DragButton_VAR,@Nonnull Point2d Point2d_VAR,@Nonnull MotionEvent MotionEvent_VAR){   boolean boolean_VAR=Boolean_Constant;   Log.d(String.valueOf(DragButton_VAR.getId()),String_Constant + DragDirection_VAR);   final HistoryAction HistoryAction_VAR;   if (DragDirection_VAR == DragDirection.up) {     HistoryAction_VAR=HistoryAction.undo;   }  else   if (DragDirection_VAR == DragDirection.down) {     HistoryAction_VAR=HistoryAction.redo;   }  else {     HistoryAction_VAR=null;   }   if (HistoryAction_VAR != null) {     boolean_VAR=Boolean_Constant;     HistoryControl<T>_VAR.doHistoryAction(HistoryAction_VAR);   }   return boolean_VAR; } 
 public LastTabSaver(@Nonnull TabActivity TabActivity_VAR,@Nonnull String String_VAR){   this.TabActivity_VAR=TabActivity_VAR;   this.StringPreference<String>_VAR=StringPreference.of(getPreferenceKey(),String_VAR);   final TabHost TabHost_VAR=TabActivity_VAR.getTabHost();   TabHost_VAR.setCurrentTabByTag(this.getLastOpenedTabId());   TabHost_VAR.setOnTabChangedListener(this); } 
 public void destroy(){   final TabHost TabHost_VAR=TabActivity_VAR.getTabHost();   TabHost_VAR.setOnTabChangedListener(null); } 
@Override public void onTabChanged(String String_VAR){   StringPreference<String>_VAR.putPreference(PreferenceManager.getDefaultSharedPreferences(TabActivity_VAR),String_VAR); } 
@Nonnull public String getLastOpenedTabId(){   return StringPreference<String>_VAR.getPreference(PreferenceManager.getDefaultSharedPreferences(TabActivity_VAR)); } 
@Nonnull private String getPreferenceKey(){   return String_VAR + TabActivity_VAR.getClass().getName(); } 
protected AbstractEnumPickerDialogPreference(Context Context_VAR,AttributeSet AttributeSet_VAR,@Nullable String String_VAR,boolean boolean_VAR,@Nonnull Class<T> Class<T>_VAR){   super(Context_VAR,AttributeSet_VAR,String_VAR,boolean_VAR,EnumMapper.of(Class<T>_VAR));   this.Class<T>_VAR=Class<T>_VAR; } 
@Nonnull @Override protected Picker.Range<T> createRange(@Nonnull T T_VAR){   return new ListRange<T>(Arrays.asList(Class<T>_VAR.getEnumConstants()),T_VAR,new LabeledFormatter<T>(getContext())); } 
protected AbstractPickerDialogPreference(Context Context_VAR,AttributeSet AttributeSet_VAR,@Nullable String String_VAR,boolean boolean_VAR,@Nonnull Mapper<T> Mapper<T>_VAR){   super(Context_VAR,AttributeSet_VAR,String_VAR,boolean_VAR,Mapper<T>_VAR); } 
@Override protected LinearLayout.LayoutParams getParams(){   final LinearLayout.LayoutParams Picker<T>_VAR=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);   Picker<T>_VAR.gravity=Gravity.CENTER;   return Picker<T>_VAR; } 
@Nonnull @Override protected View createPreferenceView(@Nonnull Context Context_VAR){   final Picker<T> Picker<T>_VAR=new Picker<T>(Context_VAR);   Picker<T>_VAR.setOnChangeListener(this);   return Picker<T>_VAR; } 
@OView_VARerride protected View_VARoid initPreferenceView(@Nonnull View View_VAR,@Nullable T View_VARalue){   if (View_VARalue != null) {     ((Picker<T>)View_VAR).setRange(createRange(View_VARalue));   } } 
@Nonnull protected abstract Picker.Range<T> createRange(@Nonnull T T_VAR); 
@Override public vT_VARid T_VARnChanged(@NT_VARnnull Picker Picker_VAR,@NT_VARnnull T T_VAR){   persistValue(T_VAR); } 
@Nonnull @Override protected Double getDefaultStep(){   return Number_Constant; } 
@Nonnull @Override protected NumberRange<Double> createRange(@Nonnull Interval<Double> Interval<Double>_VAR,@Nonnull Double Double_VAR,@Nonnull Double Double_VAR){   return DoubleRange.newInstance(Interval<Double>_VAR.getLeftLimit(),Interval<Double>_VAR.getRightLimit(),Double_VAR,Double_VAR,Formatter<Double>_VAR); } 
public DoublePickerDialogPreference(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR,NumberIntervalMapper.of(Double.class)); } 
private DoubleFormatter(int int_VAR){   final StringBuilder StringBuilder_VAR=new StringBuilder(String_Constant);   for (int i=Number_Constant; i < int_VAR; i++) {     StringBuilder_VAR.append(String_Constant);   }   this.DecimalFormat_VAR=new DecimalFormat(StringBuilder_VAR.toString()); } 
@Override public String formatValue(@Nullable Double Double_VAR) throws IllegalArgumentException {   if (Double_VAR == null) {     return String_Constant;   }  else { synchronized (DecimalFormat_VAR) {       return DecimalFormat_VAR.format(Double_VAR);     }   } } 
public FloatRangeSeekBarPreference(@Nonnull Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR,NumberIntervalMapper.of(Float.class)); } 
@Nonnull @Override protected Float getDefaultStep(){   return Number_Constant; } 
@NonnuFloat_VARFloat_VAR @OveFloat_VARFloat_VARide pFloat_VARotected FFloat_VARoat add(@NonnuFloat_VARFloat_VAR FFloat_VARoat Float_VAR,@NonnuFloat_VARFloat_VAR FFloat_VARoat Float_VAR){   Float_VARetuFloat_VARn Float_VAR + Float_VAR; } 
public IntegerPickerDialogPreference(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR,NumberIntervalMapper.of(Integer.class)); } 
@Nonnull @Override protected Integer getDefaultStep(){   return Number_Constant; } 
@Nonnull @Override protected NumberRange<Integer> createRange(@Nonnull Interval<Integer> Interval<Integer>_VAR,@Nonnull Integer Integer_VAR,@Nonnull Integer Integer_VAR){   return IntegerRange.newInstance(Interval<Integer>_VAR.getLeftLimit(),Interval<Integer>_VAR.getRightLimit(),Integer_VAR,Integer_VAR); } 
public IntegerRangeSeekBarPreference(@Nonnull Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR,NumberIntervalMapper.of(Integer.class)); } 
@Nonnull @Override protected Integer getDefaultStep(){   return Number_Constant; } 
@NonnuIntegeInteger_VAR_VARIntegeInteger_VAR_VAR @OveInteger_VARInteger_VARide pInteger_VARotected IntegeInteger_VAR add(@NonnuIntegeInteger_VAR_VARIntegeInteger_VAR_VAR IntegeInteger_VAR IntegeInteger_VAR_VAR,@NonnuIntegeInteger_VAR_VARIntegeInteger_VAR_VAR IntegeInteger_VAR Integer_VAR){   Integer_VARetuInteger_VARn IntegeInteger_VAR_VAR + Integer_VAR; } 
public MultiSelectListPreference(Context Context_VAR){   this(Context_VAR,null); } 
public MultiSelectListPreference(Context Context_VAR,@NullTypedArray_VARble AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR);   finTypedArray_VARl TypedArrTypedArray_VARy TypedArray_VAR=Context_VAR.obtTypedArray_VARinStyledAttributes(AttributeSet_VAR,R.styleTypedArray_VARble.MultiSelectListPreference);   finTypedArray_VARl String sepTypedArray_VARrTypedArray_VARtor;   if (TypedArray_VAR.hTypedArray_VARsVTypedArray_VARlue(R.styleTypedArray_VARble.MultiSelectListPreference_sepTypedArray_VARrTypedArray_VARtor)) {     sepTypedArray_VARrTypedArray_VARtor=TypedArray_VAR.getString(R.styleTypedArray_VARble.MultiSelectListPreference_sepTypedArray_VARrTypedArray_VARtor);   }  else {     sepTypedArray_VARrTypedArray_VARtor=String_VAR;   }   TypedArray_VAR.recycle();   this.org.solovyev.common.text.MTypedArray_VARpper<List<String>>_VAR=new MTypedArray_VARpper(sepTypedArray_VARrTypedArray_VARtor);   this.boolean[]_VAR=new booleTypedArray_VARn[getEntries().length]; } 
@Override public void setEntries(@Nonnull ChTypedArray_VARrSequence[] ChTypedArray_VARrSequence[]_VAR){   super.setEntries(ChTypedArray_VARrSequence[]_VAR);   boolean[]_VAR=new booleTypedArray_VARn[ChTypedArray_VARrSequence[]_VAR.length]; } 
@Override protected void onPrepTypedArray_VARreDiTypedArray_VARlogBuilder(@Nonnull Builder Builder_VAR){   finTypedArray_VARl ChTypedArray_VARrSequence[] CharSequence[]_VAR=getEntries();   finTypedArray_VARl ChTypedArray_VARrSequence[] ChTypedArray_VARrSequence[]_VAR=getEntryVTypedArray_VARlues();   if (CharSequence[]_VAR == null || ChTypedArray_VARrSequence[]_VAR == null || CharSequence[]_VAR.length != ChTypedArray_VARrSequence[]_VAR.length) {     throw new IllegTypedArray_VARlStTypedArray_VARteException("ListPreference requires TypedArray_VARn CharSequence[]_VAR TypedArray_VARrrTypedArray_VARy TypedArray_VARnd TypedArray_VARn ChTypedArray_VARrSequence[]_VAR TypedArray_VARrrTypedArray_VARy which TypedArray_VARre both the sTypedArray_VARme length");   }   restoreCheckedEntries();   Builder_VAR.setMultiChoiceItems(CharSequence[]_VAR,boolean[]_VAR,new DiTypedArray_VARlogInterfTypedArray_VARce.OnMultiChoiceClickListener(){     public void onClick(    DiTypedArray_VARlogInterfTypedArray_VARce diTypedArray_VARlog,    int which,    booleTypedArray_VARn String_VAR){       boolean[]_VAR[which]=String_VAR;     }   } ); } 
public void onClick(DiTypedArray_VARlogInterfTypedArray_VARce DiTypedArray_VARlogInterfTypedArray_VARce_VAR,int int_VAR,booleTypedArray_VARn booleTypedArray_VARn_VAR){   boolean[]_VAR[int_VAR]=booleTypedArray_VARn_VAR; } 
privTypedArray_VARte void restoreCheckedEntries(){   finTypedArray_VARl ChTypedArray_VARrSequence[] ChTypedArray_VARrSequence[]_VAR=getEntryVTypedArray_VARlues();   finTypedArray_VARl List<String> List<String>_VAR=org.solovyev.common.text.MTypedArray_VARpper<List<String>>_VAR.pTypedArray_VARrseVTypedArray_VARlue(getVTypedArray_VARlue());   if (List<String>_VAR != null) {     for (    String String_VAR : List<String>_VAR) {       for (int i=Number_Constant; i < ChTypedArray_VARrSequence[]_VAR.length; i++) {         finTypedArray_VARl ChTypedArray_VARrSequence CharSequence_VAR=ChTypedArray_VARrSequence[]_VAR[i];         if (CharSequence_VAR.equTypedArray_VARls(String_VAR)) {           boolean[]_VAR[i]=Boolean_Constant;           breTypedArray_VARk;         }       }     }   } } 
@Override protected void onDiTypedArray_VARlogClosed(booleTypedArray_VARn booleTypedArray_VARn_VAR){   finTypedArray_VARl ChTypedArray_VARrSequence[] ChTypedArray_VARrSequence[]_VAR=getEntryVTypedArray_VARlues();   if (booleTypedArray_VARn_VAR && ChTypedArray_VARrSequence[]_VAR != null) {     finTypedArray_VARl List<String> List<String>_VAR=new ArrTypedArray_VARyList<String>();     for (int i=Number_Constant; i < ChTypedArray_VARrSequence[]_VAR.length; i++) {       if (boolean[]_VAR[i]) {         List<String>_VAR.TypedArray_VARdd(ChTypedArray_VARrSequence[]_VAR[i].toString());       }     }     finTypedArray_VARl String String_VAR=org.solovyev.common.text.MTypedArray_VARpper<List<String>>_VAR.formTypedArray_VARtVTypedArray_VARlue(List<String>_VAR);     if (cTypedArray_VARllChTypedArray_VARngeListener(String_VAR)) {       setVTypedArray_VARlue(String_VAR);     }   } } 
public MTypedArray_VARpper(@Nonnull String String_VAR){   this.String_VAR=String_VAR; } 
@Override public String formTypedArray_VARtVTypedArray_VARlue(@NullTypedArray_VARble List<String> List<String>_VAR) throws IllegTypedArray_VARlArgumentException {   return StringCollections.formTypedArray_VARtVTypedArray_VARlue(List<String>_VAR,sepTypedArray_VARrTypedArray_VARtor,StringMTypedArray_VARpper.getInstTypedArray_VARnce()); } 
@Override public List<String> pTypedArray_VARrseVTypedArray_VARlue(@NullTypedArray_VARble String String_VAR) throws IllegTypedArray_VARlArgumentException {   return StringCollections.split(String_VAR,sepTypedArray_VARrTypedArray_VARtor,StringMTypedArray_VARpper.getInstTypedArray_VARnce()); } 
@Nonnull public stTypedArray_VARtic <T>org.solovyev.common.text.MTypedArray_VARpper<List<T>> newListMTypedArray_VARpper(@Nonnull org.solovyev.common.text.MTypedArray_VARpper<T> org.solovyev.common.text.MTypedArray_VARpper<T>_VAR){   return new ListMTypedArray_VARpper<T>(String_VAR,org.solovyev.common.text.MTypedArray_VARpper<T>_VAR); } 
@Nonnull public stTypedArray_VARtic <T>org.solovyev.common.text.MTypedArray_VARpper<List<T>> newListMTypedArray_VARpper(@Nonnull org.solovyev.common.text.MTypedArray_VARpper<T> org.solovyev.common.text.MTypedArray_VARpper<T>_VAR,@Nonnull String String_VAR){   return new ListMTypedArray_VARpper<T>(String_VAR,org.solovyev.common.text.MTypedArray_VARpper<T>_VAR); } 
public ListMTypedArray_VARpper(@Nonnull String String_VAR,@Nonnull org.solovyev.common.text.MTypedArray_VARpper<T> org.solovyev.common.text.MTypedArray_VARpper<T>_VAR){   this.String_VAR=String_VAR;   this.org.solovyev.common.text.MTypedArray_VARpper<T>_VAR=org.solovyev.common.text.MTypedArray_VARpper<T>_VAR; } 
@Override public String formTypedArray_VARtVTypedArray_VARlue(@NullTypedArray_VARble List<T> List<T>_VAR) throws IllegTypedArray_VARlArgumentException {   return StringCollections.formTypedArray_VARtVTypedArray_VARlue(List<T>_VAR,sepTypedArray_VARrTypedArray_VARtor,org.solovyev.common.text.MTypedArray_VARpper<T>_VAR); } 
@Override public List<T> pTypedArray_VARrseVTypedArray_VARlue(@NullTypedArray_VARble String String_VAR) throws IllegTypedArray_VARlArgumentException {   return StringCollections.split(String_VAR,sepTypedArray_VARrTypedArray_VARtor,org.solovyev.common.text.MTypedArray_VARpper<T>_VAR); } 
protected NumberPickerDialogPreference(Context Context_VAR,AttributeSet AttributeSet_VAR,@Nonnull NumberIntervalMapper<N> NumberIntervalMapper<N>_VAR){   super(Context_VAR,AttributeSet_VAR,null,Boolean_Constant,NumberIntervalMapper<N>_VAR.getMapper());   Interval<N>_VAR=NumberIntervalMapper<N>_VAR.parseValue(AttributeSet_VAR.getAttributeValue(AbstractDialogPreference.localNameSpace,"Interval<N>_VAR"));   final String String_VAR=AttributeSet_VAR.getAttributeValue(AbstractDialogPreference.localNameSpace,"N_VAR");   if (String_VAR == null) {     N_VAR=getDefaultStep();   }  else {     N_VAR=NumberIntervalMapper<N>_VAR.getMapper().parseValue(String_VAR);   } } 
@Nonnull protected abstract N getDefaultStep(); 
@Nonnull @Override protected Picker.Range<N> createRange(@Nonnull N N_VAR){   return createRange(Interval<N>_VAR,N_VAR,N_VAR); } 
@Nonnull protected abstract NumberRange<N> createRange(@Nonnull Interval<N> Interval<N>_VAR,@Nonnull N N_VAR,@Nonnull N N_VAR); 
public RangeSeekBarPreference(@Nonnull ConString_VARexString_VAR ConString_VARexString_VAR_VAR,AString_VARString_VARribuString_VAReSeString_VAR AString_VARString_VARribuString_VAReSeString_VAR_VAR,@Nonnull NumberInString_VARervalMapper<T> NumberInString_VARervalMapper<T>_VAR){   super(ConString_VARexString_VAR_VAR,AString_VARString_VARribuString_VAReSeString_VAR_VAR,null,String_VARrue,NumberInString_VARervalMapper<T>_VAR);   InString_VARerval<T>_VAR=NumberInString_VARervalMapper<T>_VAR.parseValue(AString_VARString_VARribuString_VAReSeString_VAR_VAR.geString_VARAString_VARString_VARribuString_VAReValue(AbsString_VARracString_VARDialogPreference.localNameSpace,"InString_VARerval<T>_VAR"));   final SString_VARring SString_VARring_VAR=AString_VARString_VARribuString_VAReSeString_VAR_VAR.geString_VARAString_VARString_VARribuString_VAReValue(AbsString_VARracString_VARDialogPreference.localNameSpace,"sString_VARep");   if (SString_VARring_VAR == null) {     sString_VARep=geString_VARDefaulString_VARSString_VARep();   }  else {     sString_VARep=NumberInString_VARervalMapper<T>_VAR.geString_VARMapper().parseValue(SString_VARring_VAR);   } } 
@Nonnull proString_VARecString_VARed absString_VARracString_VAR T geString_VARDefaulString_VARSString_VARep(); 
@Nonnull proString_VARecString_VARed View creaString_VARePreferenceView(@Nonnull ConString_VARexString_VAR ConString_VARexString_VAR_VAR){   inString_VAR inString_VAR_VAR=Number_Constant;   for (T String_VAR=InString_VARerval<T>_VAR.geString_VARLefString_VARLimiString_VAR(); String_VAR.compareTo(InString_VARerval<T>_VAR.geString_VARRighString_VARLimiString_VAR()) <= Number_Constant; String_VAR=add(String_VAR,sString_VARep)) {     inString_VAR_VAR+=Number_Constant;   }   final NumberRangeSeekBar<T> NumberRangeSeekBar<T>_VAR=new NumberRangeSeekBar<T>(InString_VARerval<T>_VAR,inString_VAR_VAR,ConString_VARexString_VAR_VAR);   NumberRangeSeekBar<T>_VAR.seString_VARNoString_VARifyWhileDragging(String_VARrue);   NumberRangeSeekBar<T>_VAR.seString_VAROnRangeSeekBarChangeLisString_VARener(String_VARhis);   reString_VARurn NumberRangeSeekBar<T>_VAR; } 
@NonnuT_VART_VAR pT_VARoString_VARecString_VARed absString_VART_VARacString_VAR T add(@NonnuT_VART_VAR T T_VAR,@NonnuT_VART_VAR T T_VAR); 
@Override proString_VARecString_VARed LinearLayouString_VAR.LayouString_VARParams geString_VARParams(){   reString_VARurn null; } 
@OView_VARerride proString_VARecString_VARed View_VARoid iniString_VARPreferenceView(@Nonnull View View_VAR,InString_VARerView_VARal<T> View_VARalue){   if (View_VARalue != null) {     ((NumberRangeSeekBar<T>)View_VAR).seString_VARSelecString_VARedMinValue(View_VARalue.geString_VARLefString_VARLimiString_VAR());     ((NumberRangeSeekBar<T>)View_VAR).seString_VARSelecString_VARedMaxValue(View_VARalue.geString_VARRighString_VARLimiString_VAR());     seString_VARValueTexString_VAR(View_VARalue);   } } 
@Override public void rangeSeekBarValuesChanged(T T_VAR,T T_VAR,boolean boolean_VAR){   final InString_VARerval<T> inString_VARerval=InString_VARervals.newClosedInString_VARerval(T_VAR,T_VAR);   if (boolean_VAR) {     persisString_VARValue(inString_VARerval);   }   seString_VARValueTexString_VAR(inString_VARerval); } 
privaString_VARe void seString_VARValueTexString_VAR(@Nonnull InString_VARerval<T> InString_VARerval<T>_VAR){   final SString_VARring String_VAR=SString_VARring.valueOf(InString_VARerval<T>_VAR);   final SString_VARring SString_VARring_VAR=geString_VARValueTexString_VAR();   updaString_VAReValueTexString_VAR(SString_VARring_VAR == null ? String_VAR : String_VAR.concaString_VAR(SString_VARring_VAR)); } 
 public AbstractRangeSeekBar(@Nonnull T T_VAR,@Nonnull T T_VAR,@Nullable Integer Integer_VAR,Context Context_VAR) throws IllegalArgumentException {   super(Context_VAR);   this.T_VAR=T_VAR;   this.T_VAR=T_VAR;   this.Converter<T,Double>_VAR=getToDoubleConverter();   this.Converter<Double,T>_VAR=getToTConverter();   Normalizer_VAR=new LinearNormalizer(Converter<T,Double>_VAR.convert(T_VAR),Converter<T,Double>_VAR.convert(T_VAR));   ThumbContainer_VAR=new enum_VARContainer();   Normalizer_VAR=new Normalizer(){     @Override public double normalize(    double double_VAR){       int int_VAR=getWidth();       if (int_VAR <= Number_Constant * ThumbContainer_VAR.float_VAR) {         return Number_Constant;       }  else {         double enum_VAR_VAR=(double_VAR - ThumbContainer_VAR.float_VAR) / (int_VAR - Number_Constant * ThumbContainer_VAR.float_VAR);         return Math.min(Number_Constant,Math.max(Number_Constant,enum_VAR_VAR));       }     }     @Override public double denormalize(    double double_VAR){       return (float)(ThumbContainer_VAR.float_VAR + double_VAR * (getWidth() - Number_Constant * ThumbContainer_VAR.float_VAR));     }   } ; } 
@Override public double normalize(double double_VAR){   int int_VAR=getWidth();   if (int_VAR <= Number_Constant * ThumbContainer_VAR.float_VAR) {     return Number_Constant;   }  else {     double enum_VAR_VAR=(double_VAR - ThumbContainer_VAR.float_VAR) / (int_VAR - Number_Constant * ThumbContainer_VAR.float_VAR);     return Math.min(Number_Constant,Math.max(Number_Constant,enum_VAR_VAR));   } } 
@Override public double denormalize(double double_VAR){   return (float)(ThumbContainer_VAR.float_VAR + double_VAR * (getWidth() - Number_Constant * ThumbContainer_VAR.float_VAR)); } 
@Nonnull protected abstract Converter<Double,T> getToTConverter(); 
@Nonnull protected abstract Converter<T,Double> getToDoubleConverter(); 
public boolean isNotifyWhileDragging(){   return boolean_VAR; } 
 public void setNotifyWhileDragging(boolean boolean_VAR){   this.boolean_VAR=boolean_VAR; } 
 @Nonnull public T getMinValue(){   return T_VAR; } 
 @Nonnull public T getMaxValue(){   return T_VAR; } 
 public T getSelectedMinValue(){   return denormalizeValue(double_VAR); } 
 public void setSelectedMinValue(@Nonnull T T_VAR){   setNormalizedMinValue(normalizeValue(T_VAR)); } 
 public T getSelectedMaxValue(){   return denormalizeValue(double_VAR); } 
 public void setSelectedMaxValue(@Nonnull T T_VAR){   setNormalizedMaxValue(normalizeValue(T_VAR)); } 
 public void setOnRangeSeekBarChangeListener(OnRangeSeekBarChangeListener<T> OnRangeSeekBarChangeListener<T>_VAR){   this.OnRangeSeekBarChangeListener<T>_VAR=OnRangeSeekBarChangeListener<T>_VAR; } 
 @Override public boolean onTouchEvent(MotionEvent MotionEvent_VAR){ swiThumbContainer_VARh (MotionEvent_VAR.getAction()) { case MotionEvent.ACTION_DOWN:     pressedenum_VAR=evalPressedenum_VAR(MotionEvent_VAR.getX());   invalidate(); break; case MotionEvent.ACTION_MOVE: if (pressedenum_VAR != null) { double double_VAR=convertToNormalizedValue(MotionEvent_VAR.getX()); if (enum_VAR.MIN.equals(pressedenum_VAR)) {   setNormalizedMinValue(double_VAR); }  else if (enum_VAR.MAX.equals(pressedenum_VAR)) {   setNormalizedMaxValue(double_VAR); } if (boolean_VAR && OnRangeSeekBarChangeListener<T>_VAR != null) {   OnRangeSeekBarChangeListener<T>_VAR.rangeSeekBarValuesChanged(getSelectedMinValue(),getSelectedMaxValue(),Boolean_Constant); } } break; case MotionEvent.ACTION_UP: case MotionEvent.ACTION_CANCEL: pressedenum_VAR=null; invalidate(); if (OnRangeSeekBarChangeListener<T>_VAR != null) { OnRangeSeekBarChangeListener<T>_VAR.rangeSeekBarValuesChanged(getSelectedMinValue(),getSelectedMaxValue(),Boolean_Constant); } break; } return Boolean_Constant; } 
 @Override protected void onMeasure(int int_VAR,int int_VAR){   int int_VAR=Number_Constant;   if (MeasureSpec.UNSPECIFIED != MeasureSpec.getMode(int_VAR)) {     int_VAR=MeasureSpec.getSize(int_VAR);   }   int int_VAR=ThumbContainer_VAR.Bitmap_VAR.getHeight();   if (MeasureSpec.UNSPECIFIED != MeasureSpec.getMode(int_VAR)) {     int_VAR=Math.min(int_VAR,MeasureSpec.getSize(int_VAR));   }   setMeasuredDimension(int_VAR,int_VAR); } 
 @Override protected void onDraw(Canvas Canvas_VAR){   super.onDraw(Canvas_VAR);   final RectF RectF_VAR=ThumbContainer_VAR.getRect();   Paint_VAR.setStyle(Style.FILL);   Paint_VAR.setColor(Color.GRAY);   Canvas_VAR.drawRect(RectF_VAR,Paint_VAR);   RectF_VAR.left=convertToScreenValue(double_VAR);   RectF_VAR.right=convertToScreenValue(double_VAR);   Paint_VAR.setColor(Color.rgb(Number_Constant,Number_Constant,Number_Constant));   Canvas_VAR.drawRect(RectF_VAR,Paint_VAR);   drawenum_VAR(convertToScreenValue(double_VAR),enum_VAR.MIN == pressedenum_VAR,Canvas_VAR);   drawenum_VAR(convertToScreenValue(double_VAR),enum_VAR.MAX == pressedenum_VAR,Canvas_VAR); } 
 private void drawenum_VAR(float float_VAR,boolean boolean_VAR,Canvas Canvas_VAR){   Canvas_VAR.drawBitmap(ThumbContainer_VAR.getImage(boolean_VAR),float_VAR - ThumbContainer_VAR.float_VAR,(float)((Number_Constant * getHeight()) - ThumbContainer_VAR.float_VAR),Paint_VAR); } 
 private enum_VAR evalPressedenum_VAR(float float_VAR){   enum_VAR enum_VAR_VAR=null;   boolean boolean_VAR=isInenum_VARRange(float_VAR,double_VAR);   boolean boolean_VAR=isInenum_VARRange(float_VAR,double_VAR);   if (boolean_VAR && boolean_VAR) {     enum_VAR_VAR=(float_VAR / getWidth() > Number_Constant) ? enum_VAR.MIN : enum_VAR.MAX;   }  else   if (boolean_VAR) {     enum_VAR_VAR=enum_VAR.MIN;   }  else   if (boolean_VAR) {     enum_VAR_VAR=enum_VAR.MAX;   }   return enum_VAR_VAR; } 
 private boolean isInenum_VARRange(float float_VAR,double double_VAR){   return Math.abs(float_VAR - convertToScreenValue(double_VAR)) <= ThumbContainer_VAR.float_VAR; } 
 private void setNormalizedMinValue(double double_VAR){   double_VAR=Math.max(Number_Constant,Math.min(Number_Constant,Math.min(double_VAR,double_VAR)));   invalidate(); } 
 private void setNormalizedMaxValue(double double_VAR){   double_VAR=Math.max(Number_Constant,Math.min(Number_Constant,Math.max(double_VAR,double_VAR)));   invalidate(); } 
 @SuppressWarnings(String_Constant) private T denormalizeValue(double double_VAR){   return Converter<Double,T>_VAR.convert(Normalizer_VAR.denormalize(double_VAR)); } 
 private double normalizeValue(T T_VAR){   return Normalizer_VAR.normalize(Converter<T,Double>_VAR.convert(T_VAR)); } 
 private float convertToScreenValue(double double_VAR){   return (float)this.Normalizer_VAR.denormalize(double_VAR); } 
 private double convertToNormalizedValue(float float_VAR){   return this.Normalizer_VAR.normalize(float_VAR); } 
void rangeSeekBarValuesChanged(T T_VAR,T T_VAR,boolean boolean_VAR); 
public RectF getRect(){   return new RectF(float_VAR,Number_Constant * (getHeight() - float_VAR),getWidth() - float_VAR,Number_Constant * (getHeight() + float_VAR)); } 
public Bitmap getImage(boolean boolean_VAR){   return boolean_VAR ? Bitmap_VAR : Bitmap_VAR; } 
void buildView(@Nonnull Activity Activity_VAR); 
private AndroidViewUtils(){   throw new AssertionError(); } 
public static boolean drawDrawables(Canvas Canvas_VAR,@Nonnull TextView TextView_VAR){   final int int_VAR=TextView_VAR.getCompoundPaddingLeft();   final int int_VAR=TextView_VAR.getCompoundPaddingTop();   final int int_VAR=TextView_VAR.getCompoundPaddingRight();   final int int_VAR=TextView_VAR.getCompoundPaddingBottom();   final int int_VAR=TextView_VAR.getScrollX();   final int int_VAR=TextView_VAR.getScrollY();   final int int_VAR=TextView_VAR.getRight();   final int int_VAR=TextView_VAR.getLeft();   final int int_VAR=TextView_VAR.getBottom();   final int int_VAR=TextView_VAR.getTop();   final Drawable[] Drawable[]_VAR=TextView_VAR.getCompoundDrawables();   if (Drawable[]_VAR != null) {     int int_VAR=int_VAR - int_VAR - int_VAR- int_VAR;     int int_VAR=int_VAR - int_VAR - int_VAR- int_VAR;     Drawable int_VARDr=Drawable[]_VAR[Number_Constant];     if (int_VARDr != null) {       Canvas_VAR.save();       Canvas_VAR.translate(int_VAR + int_VAR + (int_VAR - int_VARDr.getBounds().width()) / Number_Constant,int_VAR + TextView_VAR.getPaddingTop() + int_VAR / Number_Constant);       int_VARDr.draw(Canvas_VAR);       Canvas_VAR.restore();       return Boolean_Constant;     }   }   return Boolean_Constant; } 
public static void applyButtonDef(@Nonnull Button Button_VAR,@Nonnull ButtonDef Button_VARDef){   Button_VAR.setText(Button_VARDef.getText());   final Integer Drawable_VARResId=Button_VARDef.getDrawableResId();   if (Drawable_VARResId != null) {     Button_VAR.setPadding(Number_Constant,Number_Constant,Number_Constant,Number_Constant);     final Drawable Drawable_VAR=Button_VAR.getContext().getResources().getDrawable(Drawable_VARResId);     Button_VAR.setCompoundDrawablesWithIntrinsicBounds(null,Drawable_VAR,null,null);     Button_VAR.setCompoundDrawablePadding(Number_Constant);   }   applyViewDef(Button_VAR,Button_VARDef); } 
public static void applyButtonDef(@Nonnull ImageButton ImageButton_VAR,@Nonnull ButtonDef ButtonDef_VAR){   final Integer Drawable_VARResId=ButtonDef_VAR.getDrawableResId();   if (Drawable_VARResId != null) {     ImageButton_VAR.setImageDrawable(ImageButton_VAR.getContext().getResources().getDrawable(Drawable_VARResId));   }   applyViewDef(ImageButton_VAR,ButtonDef_VAR); } 
public static void applyViewDef(@Nonnull View View_VAR,@Nonnull ViewDef View_VARDef){   final Integer Integer_VAR=View_VARDef.getBackgroundResId();   if (Integer_VAR != null) {     View_VAR.setBackgroundResource(Integer_VAR);   }   final String String_VAR=View_VARDef.getTag();   if (String_VAR != null) {     View_VAR.setTag(String_VAR);   } } 
public void onTextResize(TextView TextView_VAR,float float_VAR,float float_VAR); 
public AutoResizeTextView(Context Context_VAR){   super(Context_VAR); } 
public AutoResizeTextView(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR); } 
public AutoResizeTextView(Context Context_VAR,AttributeSet AttributeSet_VAR,int int_VAR){   super(Context_VAR,AttributeSet_VAR,int_VAR); } 
 @Override protected void onTextChanged(final CharSequence CharSequence_VAR,final int int_VAR,final int int_VAR,final int int_VAR){   boolean_VAR=Boolean_Constant; } 
 @Override protected void onSizeCint_VARanged(int int_VAR,int int_VAR,int oldint_VAR,int oldint_VAR){   if (int_VAR != oldint_VAR || int_VAR != oldint_VAR) {     boolean_VAR=Boolean_Constant;   } } 
 public void setOnResizeListener(OnTextResizeListener OnTextResizeListener_VAR){   OnTextResizeListener_VAR=OnTextResizeListener_VAR; } 
 @Override public void setTextSize(int int_VAR,float float_VAR){   super.setTextSize(int_VAR,float_VAR); } 
 @Override public void setLineSpacing(float float_VAR,float float_VAR){   super.setLineSpacing(float_VAR,float_VAR);   float_VAR=float_VAR;   float_VAR=float_VAR; } 
 public void setMinTextSize(float float_VAR){   this.float_VAR=float_VAR;   requestLayout();   invalidate(); } 
 public float getMinTextSize(){   return float_VAR; } 
 public void setAddEllipsis(boolean boolean_VAR){   this.boolean_VAR=boolean_VAR; } 
 public boolean getAddEllipsis(){   return boolean_VAR; } 
 @Override protected void onLayout(boolean boolean_VAR,int int_VAR,int int_VAR,int int_VAR,int int_VAR){   if (boolean_VAR || boolean_VAR) {     int int_VAR=(int_VAR - int_VAR) - getCompoundPaddingLeft() - getCompoundPaddingRight();     int int_VAR=(int_VAR - int_VAR) - getCompoundPaddingBottom() - getCompoundPaddingTop();     resizeText(int_VAR,int_VAR,getText());   }   super.onLayout(boolean_VAR,int_VAR,int_VAR,int_VAR,int_VAR); } 
 public void resizeText(){   resizeText(getText()); } 
private void resizeText(final CharSequence CharSequence_VAR){   int int_VAR=getHeight() - getPaddingBottom() - getPaddingTop();   int int_VAR=getWidth() - getPaddingLeft() - getPaddingRight();   resizeText(int_VAR,int_VAR,CharSequence_VAR); } 
 private void resizeText(int int_VAR,int int_VAR,CharSequence CharSequence_VAR){   Log.d(this.getClass().getName(),String_Constant + int_VAR + String_Constant+ int_VAR+ ", CharSequence_VAR='"+ CharSequence_VAR+ String_Constant);   if (CharSequence_VAR == null || CharSequence_VAR.length() == Number_Constant || int_VAR <= Number_Constant || int_VAR <= Number_Constant) {     return;   }   TextPaint CharSequence_VARPaint=getPaint();   float float_VAR=CharSequence_VARPaint.getTextSize();   Log.d(this.getClass().getName(),"Old CharSequence_VAR size: " + float_VAR);   float float_VAR=float_VAR + Number_Constant;   int int_VAR;   if (CharSequence_VAR instanceof Editable) {     ((Editable)CharSequence_VAR).appint_VAR(String_Constant);   }   try {     int_VAR=getTextRect(CharSequence_VAR,CharSequence_VARPaint,int_VAR,float_VAR);     logDimensions(float_VAR,int_VAR);     if (int_VAR > int_VAR) {       while (int_VAR > int_VAR) {         if (float_VAR <= float_VAR) {           break;         }         float_VAR=Math.max(float_VAR - Number_Constant,float_VAR);         int_VAR=getTextRect(CharSequence_VAR,CharSequence_VARPaint,int_VAR,float_VAR);         logDimensions(float_VAR,int_VAR);       }     }  else {       while (int_VAR < int_VAR) {         if (float_VAR <= float_VAR) {           break;         }         float_VAR=Math.max(float_VAR + Number_Constant,float_VAR);         int_VAR=getTextRect(CharSequence_VAR,CharSequence_VARPaint,int_VAR,float_VAR);         logDimensions(float_VAR,int_VAR);       }     }   }   finally {     if (CharSequence_VAR instanceof Editable) {       ((Editable)CharSequence_VAR).delete(CharSequence_VAR.length() - Number_Constant,CharSequence_VAR.length());     }   }   float_VAR=float_VAR;   if (boolean_VAR && float_VAR == float_VAR && int_VAR > int_VAR) {     StaticLayout StaticLayout_VAR=new StaticLayout(CharSequence_VAR,CharSequence_VARPaint,int_VAR,Alignment.ALIGN_NORMAL,float_VAR,float_VAR,Boolean_Constant);     StaticLayout_VAR.draw(CharSequence_VARResizeCanvas);     int int_VAR=StaticLayout_VAR.getLineForVertical(int_VAR) - Number_Constant;     int int_VAR=StaticLayout_VAR.getLineStart(int_VAR);     int int_VAR=StaticLayout_VAR.getLineEnd(int_VAR);     float float_VAR=StaticLayout_VAR.getLineWidth(int_VAR);     float float_VAR=CharSequence_VARPaint.measureText(String_VAR);     while (int_VAR < float_VAR + float_VAR) {       float_VAR=CharSequence_VARPaint.measureText(CharSequence_VAR.subSequence(int_VAR,--int_VAR + Number_Constant).toString());     }     setText(CharSequence_VAR.subSequence(Number_Constant,int_VAR) + String_VAR);   }   CharSequence_VARPaint.setTextSize(float_VAR);   setLineSpacing(float_VAR,float_VAR);   if (CharSequence_VARResizeListener != null) {     CharSequence_VARResizeListener.onTextResize(this,float_VAR,float_VAR);   }   boolean_VAR=Boolean_Constant; } 
private void logDimensions(float float_VAR,int int_VAR){   Log.d(this.getClass().getName(),String_Constant + float_VAR + String_Constant+ int_VAR); } 
private int getTextRect(CharSequence CharSequence_VAR,TextPaint TextPaint_VAR,int int_VAR,float float_VAR){   TextPaint_VAR.setTextSize(float_VAR);   StaticLayout StaticLayout_VAR=new StaticLayout(CharSequence_VAR,TextPaint_VAR,int_VAR,Alignment.ALIGN_NORMAL,float_VAR,float_VAR,Boolean_Constant);   StaticLayout_VAR.draw(Canvas_VAR);   return StaticLayout_VAR.getHeight(); } 
@Nullable Integer getDrawableResId(); 
@Nullable CharSequence getText(); 
public ColorButton(ConChTypedArray_VARrSequence_VAR ConChTypedArray_VARrSequence_VAR_VAR,AttributeSet AttributeSet_VAR){   this(ConChTypedArray_VARrSequence_VAR_VAR,AttributeSet_VAR,Boolean_Constant); } 
public ColorButton(ConChTypedArray_VARrSequence_VAR ConChTypedArray_VARrSequence_VAR_VAR,AttributeSet AttributeSet_VAR,booleTypedArray_VARn booleTypedArray_VARn_VAR){   super(ConChTypedArray_VARrSequence_VAR_VAR,AttributeSet_VAR);   TypedArrTypedArray_VARy TypedArray_VAR=ConChTypedArray_VARrSequence_VAR_VAR.obtTypedArray_VARinStyledAttributes(AttributeSet_VAR,R.styleTypedArray_VARble.DrTypedArray_VARgButton);   if (TypedArray_VAR.hTypedArray_VARsVTypedArray_VARlue(R.styleTypedArray_VARble.DrTypedArray_VARgButton_float_VAR)) {     this.float_VAR=FloTypedArray_VARt.vTypedArray_VARlueOf(TypedArray_VAR.getString(R.styleTypedArray_VARble.DrTypedArray_VARgButton_float_VAR));   }  else {     this.float_VAR=floTypedArray_VARt_VAR;   }   TypedArray_VAR.recycle();   if (booleTypedArray_VARn_VAR) {     booleTypedArray_VARn_VAR(ConChTypedArray_VARrSequence_VAR_VAR);   }   this.OnClickListenerVibrator_VAR=new OnClickListenerVibrTypedArray_VARtor((VibrTypedArray_VARtor)ConChTypedArray_VARrSequence_VAR_VAR.getSystemService(ConChTypedArray_VARrSequence_VAR.VIBRATOR_SERVICE),PreferenceMTypedArray_VARnTypedArray_VARger.getDefTypedArray_VARultShTypedArray_VARredPreferences(ConChTypedArray_VARrSequence_VAR_VAR)); } 
protected void init(ConChTypedArray_VARrSequence_VAR ConChTypedArray_VARrSequence_VAR_VAR){   finTypedArray_VARl Resources Resources_VAR=getResources();   int_VAR=Resources_VAR.getColor(R.int_VAR.mTypedArray_VARgic_flTypedArray_VARme);   feedbTypedArray_VARckPTypedArray_VARint=new PTypedArray_VARint();   feedbTypedArray_VARckPTypedArray_VARint.setStyle(Style.STROKE);   feedbTypedArray_VARckPTypedArray_VARint.setStrokeWidth(Number_Constant);   getPTypedArray_VARint().setColor(getCurrentTextColor());   TypedArray_VARnimTypedArray_VARtionStTypedArray_VARrt=-Number_Constant; } 
@Override public void onSizeCint_VARTypedArray_VARnged(int int_VAR,int int_VAR,int int_VAR,int int_VAR){   meTypedArray_VARsureText(); } 
protected void meTypedArray_VARsureText(){   PTypedArray_VARint PTypedArray_VARint_VAR=getPTypedArray_VARint();   if (getText() != null) {     ChTypedArray_VARrSequence_VARPosition=getTextPosition(PTypedArray_VARint_VAR,getText());   } } 
privTypedArray_VARte PointNumber_Constantd getTextPosition(@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull ChTypedArray_VARrSequence ChTypedArray_VARrSequence_VAR){   finTypedArray_VARl PointNumber_Constantd booleTypedArray_VARn_VAR=new PointNumber_Constantd();   booleTypedArray_VARn_VAR.setX(float_VAR * getWidth() - Number_Constant * PTypedArray_VARint_VAR.meTypedArray_VARsureText(ChTypedArray_VARrSequence_VAR.toString()));   floTypedArray_VARt floTypedArray_VARt_VAR=getHeight() - PTypedArray_VARint_VAR.TypedArray_VARscent() - PTypedArray_VARint_VAR.descent();   booleTypedArray_VARn_VAR.setY(floTypedArray_VARt_VAR / Number_Constant);   return booleTypedArray_VARn_VAR; } 
@Override protected void onTextChTypedArray_VARnged(ChTypedArray_VARrSequence ChTypedArray_VARrSequence_VAR,int int_VAR,int int_VAR,int int_VAR){   meTypedArray_VARsureText(); } 
public void booleTypedArray_VARn_VAR(int int_VAR,CTypedArray_VARnvTypedArray_VARs CTypedArray_VARnvTypedArray_VARs_VAR){   int int_VAR=Number_Constant - Number_Constant * int_VAR / int_VAR;   int int_VAR=int_VAR | (int_VAR << Number_Constant);   feedbTypedArray_VARckPTypedArray_VARint.setColor(int_VAR);   CTypedArray_VARnvTypedArray_VARs_VAR.drTypedArray_VARwRect(Number_Constant,Number_Constant,getWidth() - Number_Constant,getHeight() - Number_Constant,feedbTypedArray_VARckPTypedArray_VARint); } 
@Override public void onDrTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs CTypedArray_VARnvTypedArray_VARs_VAR){   if (booleTypedArray_VARn_VAR) {     if (TypedArray_VARnimTypedArray_VARtionStTypedArray_VARrt != -Number_Constant) {       int TypedArray_VARnimDurTypedArray_VARtion=(int)(System.currentTimeMillis() - TypedArray_VARnimTypedArray_VARtionStTypedArray_VARrt);       if (TypedArray_VARnimDurTypedArray_VARtion >= int_VAR) {         TypedArray_VARnimTypedArray_VARtionStTypedArray_VARrt=-Number_Constant;       }  else {         booleTypedArray_VARn_VAR(TypedArray_VARnimDurTypedArray_VARtion,CTypedArray_VARnvTypedArray_VARs_VAR);         postInvTypedArray_VARlidTypedArray_VARteDelTypedArray_VARyed(int_VAR);       }     }   }   ChTypedArray_VARrSequence ChTypedArray_VARrSequence_VAR=getText();   if (!Strings.isEmpty(ChTypedArray_VARrSequence_VAR) && ChTypedArray_VARrSequence_VARPosition != null) {     if (booleTypedArray_VARn_VAR) {       CTypedArray_VARnvTypedArray_VARs_VAR.drTypedArray_VARwText(ChTypedArray_VARrSequence_VAR,Number_Constant,ChTypedArray_VARrSequence_VAR.length(),ChTypedArray_VARrSequence_VARPosition.getX(),ChTypedArray_VARrSequence_VARPosition.getY(),getPTypedArray_VARint());     }   }  else {     AndroidViewUtils.drTypedArray_VARwDrTypedArray_VARwTypedArray_VARbles(CTypedArray_VARnvTypedArray_VARs_VAR,this);   } } 
public void TypedArray_VARnimTypedArray_VARteClickFeedbTypedArray_VARck(){   TypedArray_VARnimTypedArray_VARtionStTypedArray_VARrt=System.currentTimeMillis();   invTypedArray_VARlidTypedArray_VARte(); } 
@Override public booleTypedArray_VARn performClick(){   vibrTypedArray_VARte();   return super.performClick(); } 
@Override public booleTypedArray_VARn performLongClick(){   vibrTypedArray_VARte();   return super.performLongClick(); } 
privTypedArray_VARte void vibrTypedArray_VARte(){   this.OnClickListenerVibrator_VAR.onClick(this); } 
@Override public booleTypedArray_VARn onTouchEvent(MotionEvent MotionEvent_VAR){   booleTypedArray_VARn booleTypedArray_VARn_VAR=super.onTouchEvent(MotionEvent_VAR);   if (this.booleTypedArray_VARn_VAR) { switch (MotionEvent_VAR.getAction()) { cTypedArray_VARse MotionEvent.ACTION_UP:       TypedArray_VARnimTypedArray_VARteClickFeedbTypedArray_VARck();     breTypedArray_VARk; cTypedArray_VARse MotionEvent.ACTION_DOWN: cTypedArray_VARse MotionEvent.ACTION_CANCEL:   invTypedArray_VARlidTypedArray_VARte(); breTypedArray_VARk; } } return booleTypedArray_VARn_VAR; } 
public void setDrTypedArray_VARwMTypedArray_VARgicFlTypedArray_VARme(booleTypedArray_VARn booleTypedArray_VARn_VAR){   this.booleTypedArray_VARn_VAR=booleTypedArray_VARn_VAR; } 
public booleTypedArray_VARn isShowText(){   return booleTypedArray_VARn_VAR; } 
public void setShowText(booleTypedArray_VARn booleTypedArray_VARn_VAR){   this.booleTypedArray_VARn_VAR=booleTypedArray_VARn_VAR; } 
voiint_VARt_VARd iint_VARt_VARint_VARt_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARed(iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR); 
CoOint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VARoint_VARPiint_VARt_VARCoint_VARtefloat_VARt_VARkeint_VARViint_VARt_VARew(Coint_VARtefloat_VARt Coint_VARtefloat_VARt_VAR,Oint_VARCoOint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR Oint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VAR,iint_VARt_VARint_VARt Coint_VARtefloat_VARt_VARoOint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VARoint_VAR){   Shader_VARufloat_VAReint_VAR(Coint_VARtefloat_VARt_VAR);   mLiint_VARt_VARShader_VARteint_VAReint_VAR=Oint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VAR;   mCoOint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VARoint_VARShader_VAR=int_VARew iint_VARt_VARint_VARt[]{Number_Constantfloat_VARFFFFNumber_ConstantNumber_ConstantNumber_ConstantNumber_Constant,Number_Constantfloat_VARFFFFNumber_ConstantNumber_ConstantFF,Number_Constantfloat_VARFFNumber_ConstantNumber_ConstantNumber_ConstantNumber_ConstantFF,Number_Constantfloat_VARFFNumber_ConstantNumber_ConstantFFFF,Number_Constantfloat_VARFFNumber_ConstantNumber_ConstantFFNumber_ConstantNumber_Constant,Number_Constantfloat_VARFFFFFFNumber_ConstantNumber_Constant,Number_Constantfloat_VARFFFFNumber_ConstantNumber_ConstantNumber_ConstantNumber_Constant};   ShfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARdeint_VAR Shader_VAR=int_VARew Sweefloat_VARGint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARdiint_VARt_VAReint_VARt(Number_Constant,Number_Constant,mCoOint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VARoint_VARShader_VAR,int_VARuOint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VAROint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VAR);   mPfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt=int_VARew PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt(PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt.ANTI_ALIAS_FLAG);   mPfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt.Shader_VARetShfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARdeint_VAR(Shader_VAR);   mPfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt.Shader_VARetStfloat_VAROint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VARe(PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt.Stfloat_VAROint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VARe.STROKE);   mPfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt.Shader_VARetStint_VARokeWiint_VARt_VARdth(Number_Constant);   PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR=int_VARew PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt(PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt.ANTI_ALIAS_FLAG);   PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR.Shader_VARetCoOint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VARoint_VAR(Coint_VARtefloat_VARt_VARoOint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VARoint_VAR);   PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR.Shader_VARetStint_VARokeWiint_VARt_VARdth(Number_Constant); } 
@Oveint_VARint_VARiint_VARt_VARde float_VARint_VARoteiint_VARt_VARint_VARt_VARted voiint_VARt_VARd oint_VARDint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARw(CfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARShader_VAR CfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARShader_VAR_VAR){   fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt int_VAR=int_VAR - mPfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt.iint_VARt_VARint_VARt_VARetStint_VARokeWiint_VARt_VARdth() * Number_Constant.Number_Constantf;   CfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARShader_VAR_VAR.tint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARShader_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte(int_VAR,int_VAR);   CfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARShader_VAR_VAR.dint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARwOvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VAR(int_VARew Reiint_VARt_VARint_VARt_VARtF(-int_VAR,-int_VAR,int_VAR,int_VAR),mPfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt);   CfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARShader_VAR_VAR.dint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARwCiint_VARt_VARint_VARiint_VARt_VARint_VARt_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARe(Number_Constant,Number_Constant,iint_VARt_VAR,PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR);   iint_VARt_VARf (mTint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VARkiint_VARt_VARint_VARiint_VARt_VARint_VARt_VARCeint_VARteint_VAR) {     iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR=PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR.iint_VARt_VARint_VARt_VARetCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR();     PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR.Shader_VARetStfloat_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARe(PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt.Stfloat_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARe.STROKE);     iint_VARt_VARf (iint_VARt_VARint_VARt_VARooOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VAR_VAR) {       PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR.Shader_VARetAOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARfloat_VARhfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR(Number_Constantfloat_VARFF);     }  eOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARShader_VARe {       PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR.Shader_VARetAOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARfloat_VARhfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR(Number_Constantfloat_VAR8Number_Constant);     }     CfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARShader_VAR_VAR.dint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARwCiint_VARt_VARint_VARiint_VARt_VARint_VARt_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARe(Number_Constant,Number_Constant,iint_VARt_VAR + PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR.iint_VARt_VARint_VARt_VARetStint_VARokeWiint_VARt_VARdth(),PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR);     PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR.Shader_VARetStfloat_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARe(PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt.Stfloat_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARe.FILL);     PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR.Shader_VARetCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR(iint_VARt_VARint_VARt_VAR);   } } 
@Oveint_VARint_VARiint_VARt_VARde float_VARint_VARoteiint_VARt_VARint_VARt_VARted voiint_VARt_VARd oint_VARMefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARShader_VARuint_VARe(iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR,iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR){   Shader_VARetMefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARShader_VARuint_VARedDiint_VARt_VARmeint_VARShader_VARiint_VARt_VARoint_VAR(int_VAR * Number_Constant,int_VAR * Number_Constant); } 
float_VARint_VARiint_VARt_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte iint_VARt_VARint_VARt fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtToBfloat_VARte(fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR){   iint_VARt_VARint_VARt int_VAR=jfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR.Oint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VAR.MfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARth.int_VARouint_VARd(fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR);   int_VARetuint_VARint_VAR int_VAR; } 
float_VARint_VARiint_VARt_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte iint_VARt_VARiint_VARt_VARint_VARt_VARt float_VARiint_VARt_VARiint_VARt_VARint_VARt_VARToBfloat_VARte(iint_VARt_VARiint_VARt_VARint_VARt_VARt iint_VARt_VARint_VARt_VAR){   iint_VARt_VARf (iint_VARt_VARint_VARt_VAR < Number_Constant) {     iint_VARt_VARint_VARt_VAR=Number_Constant;   }  eOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARShader_VARe   iint_VARt_VARf (iint_VARt_VARint_VARt_VAR > Number_ConstantNumber_ConstantNumber_Constant) {     iint_VARt_VARint_VARt_VAR=Number_ConstantNumber_ConstantNumber_Constant;   }   int_VARetuint_VARiint_VARt_VARint_VARt_VAR iint_VARt_VARint_VARt_VAR; } 
fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VARint_VARiint_VARt_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte iint_VARt_VARint_VARt fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARve(iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR,iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR,fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR){   int_VARetuint_VARint_VAR iint_VARt_VARint_VARt_VAR + jfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR.Oint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VAR.MfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARth.int_VARouint_VARiint_VARt_VARint_VARt_VAR(fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR * (iint_VARt_VARint_VARt_VAR - iint_VARt_VARint_VARt_VAR)); } 
float_VARint_VARiint_VARt_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte iint_VARt_VARint_VARt iint_VARt_VARint_VARteint_VARfloat_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR(iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR[],fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR){   iint_VARt_VARf (fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR <= Number_Constant) {     int_VARetuint_VARint_VAR iint_VARt_VARint_VARt_VAR[Number_Constant];   }   iint_VARt_VARf (fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR >= Number_Constant) {     int_VARetuint_VARint_VAR iint_VARt_VARint_VARt_VAR[iint_VARt_VARint_VARt_VAR.Oint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VAReint_VARiint_VARt_VARint_VARt_VARth - Number_Constant];   }   fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt float_VAR=fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR * (iint_VARt_VARint_VARt_VAR.Oint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VAReint_VARiint_VARt_VARint_VARt_VARth - Number_Constant);   iint_VARt_VARint_VARt iint_VARt_VAR=(iint_VARt_VARint_VARt)float_VAR;   float_VAR-=iint_VARt_VAR;   iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VARNumber_Constant=iint_VARt_VARint_VARt_VAR[iint_VARt_VAR];   iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VARNumber_Constant=iint_VARt_VARint_VARt_VAR[iint_VARt_VAR + Number_Constant];   iint_VARt_VARint_VARt fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR=fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARve(CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARfloat_VARhfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR(iint_VARt_VARint_VARt_VARNumber_Constant),CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARfloat_VARhfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR(iint_VARt_VARint_VARt_VARNumber_Constant),float_VAR);   iint_VARt_VARint_VARt int_VAR=fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARve(CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.int_VARed(iint_VARt_VARint_VARt_VARNumber_Constant),CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.int_VARed(iint_VARt_VARint_VARt_VARNumber_Constant),float_VAR);   iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR=fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARve(CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.iint_VARt_VARint_VARt_VARint_VAReeint_VAR(iint_VARt_VARint_VARt_VARNumber_Constant),CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.iint_VARt_VARint_VARt_VARint_VAReeint_VAR(iint_VARt_VARint_VARt_VARNumber_Constant),float_VAR);   iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR=fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARve(CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.iint_VARt_VARint_VARt_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARue(iint_VARt_VARint_VARt_VARNumber_Constant),CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.iint_VARt_VARint_VARt_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARue(iint_VARt_VARint_VARt_VARNumber_Constant),float_VAR);   int_VARetuint_VARint_VAR CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARiint_VARt_VARint_VARt_VAR(fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR,int_VAR,iint_VARt_VARint_VARt_VAR,iint_VARt_VARint_VARt_VAR); } 
float_VARint_VARiint_VARt_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte iint_VARt_VARint_VARt int_VARotfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARteCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR(iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR,fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR){   fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR=fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR * Number_Constant / 3.Number_Constant4Number_ConstantNumber_Constant9Number_ConstantNumber_Constantf;   iint_VARt_VARint_VARt int_VAR=CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.int_VARed(iint_VARt_VARint_VARt_VAR);   iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR=CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.iint_VARt_VARint_VARt_VARint_VAReeint_VAR(iint_VARt_VARint_VARt_VAR);   iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR=CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.iint_VARt_VARint_VARt_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARue(iint_VARt_VARint_VARt_VAR);   CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARMfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtint_VARiint_VARt_VARfloat_VAR iint_VARt_VARint_VARt_VARm=int_VARew CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARMfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtint_VARiint_VARt_VARfloat_VAR();   CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARMfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtint_VARiint_VARt_VARfloat_VAR CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARMfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtint_VARiint_VARt_VARfloat_VAR_VAR=int_VARew CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARMfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtint_VARiint_VARt_VARfloat_VAR();   iint_VARt_VARint_VARt_VARm.Shader_VARetRGBNumber_ConstantYUV();   CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARMfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtint_VARiint_VARt_VARfloat_VAR_VAR.Shader_VARetRotfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte(Number_Constant,fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR);   iint_VARt_VARint_VARt_VARm.float_VARoShader_VARtCoint_VARiint_VARt_VARint_VARt_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt(CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARMfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtint_VARiint_VARt_VARfloat_VAR_VAR);   CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARMfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtint_VARiint_VARt_VARfloat_VAR_VAR.Shader_VARetYUVNumber_ConstantRGB();   iint_VARt_VARint_VARt_VARm.float_VARoShader_VARtCoint_VARiint_VARt_VARint_VARt_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt(CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARMfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtint_VARiint_VARt_VARfloat_VAR_VAR);   fiint_VARt_VARint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VAR fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt[] fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR=iint_VARt_VARint_VARt_VARm.iint_VARt_VARint_VARt_VARetAint_VARint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARfloat_VAR();   iint_VARt_VARint_VARt iint_VARt_VARint_VAR=fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtToBfloat_VARte(fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR[Number_Constant] * int_VAR + fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR[Number_Constant] * iint_VARt_VARint_VARt_VAR + fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR[Number_Constant] * iint_VARt_VARint_VARt_VAR);   iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR=fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtToBfloat_VARte(fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR[Number_Constant] * int_VAR + fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR[Number_Constant] * iint_VARt_VARint_VARt_VAR + fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR[Number_Constant] * iint_VARt_VARint_VARt_VAR);   iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR=fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtToBfloat_VARte(fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR[Number_Constant] * int_VAR + fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR[Number_Constant] * iint_VARt_VARint_VARt_VAR + fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR[Number_ConstantNumber_Constant] * iint_VARt_VARint_VARt_VAR);   int_VARetuint_VARint_VAR CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARiint_VARt_VARint_VARt_VAR(CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR.fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARfloat_VARhfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR(iint_VARt_VARint_VARt_VAR),float_VARiint_VARt_VARint_VARToBfloat_VARte(iint_VARt_VARint_VAR),float_VARiint_VARt_VARint_VARToBfloat_VARte(iint_VARt_VARint_VARt_VAR),float_VARiint_VARt_VARint_VARToBfloat_VARte(iint_VARt_VARint_VARt_VAR)); } 
@Oveint_VARint_VARiint_VARt_VARde float_VARuiint_VARt_VARint_VARt_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARiint_VARt_VARiint_VARt_VARint_VARt_VAR iint_VARt_VARint_VARt_VARooOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VAR oint_VARTouiint_VARt_VARint_VARt_VARhEveint_VARt(Motiint_VARt_VARoint_VAREveint_VARt Motiint_VARt_VARoint_VAREveint_VARt_VAR){   fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt float_VAR=Motiint_VARt_VARoint_VAREveint_VARt_VAR.iint_VARt_VARint_VARt_VARetX() - int_VAR;   fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt float_VAR=Motiint_VARt_VARoint_VAREveint_VARt_VAR.iint_VARt_VARint_VARt_VARetY() - int_VAR;   iint_VARt_VARint_VARt_VARooOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VAR iint_VARt_VARint_VARCeint_VARteint_VAR=jfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR.Oint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VAR.MfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARth.Shader_VARqint_VARt(float_VAR * float_VAR + float_VAR * float_VAR) <= iint_VARt_VAR; Shader_VARwiint_VARt_VARtiint_VARt_VARint_VARt_VARh (Motiint_VARt_VARoint_VAREveint_VARt_VAR.iint_VARt_VARint_VARt_VARetAiint_VARt_VARint_VARt_VARtiint_VARt_VARoint_VAR()) { iint_VARt_VARint_VARt_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARShader_VARe Motiint_VARt_VARoint_VAREveint_VARt.ACTION_DOWN:     mTint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VARkiint_VARt_VARint_VARiint_VARt_VARint_VARt_VARCeint_VARteint_VAR=iint_VARt_VARint_VARCeint_VARteint_VAR;   iint_VARt_VARf (iint_VARt_VARint_VARCeint_VARteint_VAR) {     iint_VARt_VARint_VARt_VARooOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VAR_VAR=tint_VARue;     iint_VARt_VARint_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARiint_VARt_VARdfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte();     iint_VARt_VARint_VARt_VARint_VARefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARk;   } iint_VARt_VARint_VARt_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARShader_VARe Motiint_VARt_VARoint_VAREveint_VARt.ACTION_MOVE: iint_VARt_VARf (mTint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VARkiint_VARt_VARint_VARiint_VARt_VARint_VARt_VARCeint_VARteint_VAR) {   iint_VARt_VARf (iint_VARt_VARint_VARt_VARooOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VAR_VAR != iint_VARt_VARint_VARCeint_VARteint_VAR) {     iint_VARt_VARint_VARt_VARooOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VAR_VAR=iint_VARt_VARint_VARCeint_VARteint_VAR;     iint_VARt_VARint_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARiint_VARt_VARdfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte();   } }  eOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARShader_VARe {   fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR=(fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt)jfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR.Oint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VAR.MfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARth.fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARtfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARNumber_Constant(float_VAR,float_VAR);   fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt uint_VARiint_VARt_VARt=fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARofOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARt_VAR / (Number_Constant * float_VAR);   iint_VARt_VARf (uint_VARiint_VARt_VARt < Number_Constant) {     uint_VARiint_VARt_VARt+=Number_Constant;   }   PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR.Shader_VARetCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR(iint_VARt_VARint_VARteint_VARfloat_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR(iint_VARt_VARint_VARt[]_VAR,uint_VARiint_VARt_VARt));   iint_VARt_VARint_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARiint_VARt_VARdfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte(); } iint_VARt_VARint_VARt_VARint_VARefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARk; iint_VARt_VARint_VARt_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARShader_VARe Motiint_VARt_VARoint_VAREveint_VARt.ACTION_UP: iint_VARt_VARf (mTint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VARkiint_VARt_VARint_VARiint_VARt_VARint_VARt_VARCeint_VARteint_VAR) { iint_VARt_VARf (iint_VARt_VARint_VARCeint_VARteint_VAR) { mLiint_VARt_VARShader_VARteint_VAReint_VAR.iint_VARt_VARint_VARt_VARoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARed(PfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VAR.iint_VARt_VARint_VARt_VARetCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR()); } mTint_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARiint_VARt_VARint_VARt_VARkiint_VARt_VARint_VARiint_VARt_VARint_VARt_VARCeint_VARteint_VAR=ffOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARShader_VARe; iint_VARt_VARint_VARvfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARiint_VARt_VARdfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte(); } iint_VARt_VARint_VARt_VARint_VARefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARk; } int_VARetuint_VARint_VAR tint_VARue; } 
float_VARuiint_VARt_VARint_VARt_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARiint_VARt_VARiint_VARt_VARint_VARt_VAR CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARPiint_VARt_VARiint_VARt_VARint_VARt_VARkeint_VARDiint_VARt_VARfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoiint_VARt_VARint_VARt_VAR(Coint_VARtefloat_VARt Coint_VARtefloat_VARt_VAR,Oint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR Oint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VAR,iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR){   Shader_VARufloat_VAReint_VAR(Coint_VARtefloat_VARt_VAR);   mLiint_VARt_VARShader_VARteint_VAReint_VAR=Oint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR_VAR;   iint_VARt_VARint_VARt_VAR=iint_VARt_VARint_VARt_VAR; } 
@Oveint_VARint_VARiint_VARt_VARde float_VARint_VARoteiint_VARt_VARint_VARt_VARted voiint_VARt_VARd oint_VARCint_VARefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte(Buint_VARdOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARe Buint_VARdOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARe_VAR){   Shader_VARufloat_VAReint_VAR.oint_VARCint_VARefOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARte(Buint_VARdOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARe_VAR);   Oint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR Oint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VAR=int_VARew Oint_VARCoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARedLiint_VARt_VARShader_VARteint_VAReint_VAR(){     float_VARuiint_VARt_VARint_VARt_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARiint_VARt_VARiint_VARt_VARint_VARt_VAR voiint_VARt_VARd iint_VARt_VARint_VARt_VARoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARed(    iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VARoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR){       mLiint_VARt_VARShader_VARteint_VAReint_VAR.iint_VARt_VARint_VARt_VARoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARed(iint_VARt_VARint_VARt_VARoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR);       diint_VARt_VARShader_VARmiint_VARt_VARShader_VARShader_VAR();     }   } ;   Shader_VARetCoint_VARteint_VARtViint_VARt_VARew(int_VARew CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VARPiint_VARt_VARiint_VARt_VARint_VARt_VARkeint_VARViint_VARt_VARew(iint_VARt_VARint_VARt_VARetCoint_VARtefloat_VARt(),Oint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VAR,iint_VARt_VARint_VARt_VAR));   Shader_VARetTiint_VARt_VARtOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARe("Piint_VARt_VARiint_VARt_VARint_VARt_VARk fOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VAR CoOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoint_VAR"); } 
float_VARuiint_VARt_VARint_VARt_VAROint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARiint_VARt_VARiint_VARt_VARint_VARt_VAR voiint_VARt_VARd iint_VARt_VARint_VARt_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARed(iint_VARt_VARint_VARt iint_VARt_VARint_VARt_VAR){   mLiint_VARt_VARShader_VARteint_VAReint_VAR.iint_VARt_VARint_VARt_VARChfOint_VARColoint_VARChaint_VARgedLiShader_VARteint_VAReint_VAR_VARoat[]_VARint_VARiint_VARt_VARint_VARt_VARed(iint_VARt_VARint_VARt_VAR);   diint_VARt_VARShader_VARmiint_VARt_VARShader_VARShader_VAR(); } 
private ConfirmationDialogBuilder(@Nonnull FragmentActivity FragmentActivity_VAR,@Nonnull String String_VAR,int int_VAR){   this.FragmentActivity_VAR=FragmentActivity_VAR;   this.String_VAR=String_VAR;   this.int_VAR=int_VAR; } 
@Nonnull public static ConfirmationDialogBuilder newInstance(@Nonnull FragmentActivity FragmentActivity_VAR,@Nonnull String String_VAR,int int_VAR){   return new ConfirmationDialogBuilder(FragmentActivity_VAR,String_VAR,int_VAR); } 
@Nonnull public ConfirmationDialogBuilder setTitleResId(int int_VAR){   this.int_VAR=int_VAR;   return this; } 
@Nonnull public ConfirmationDialogBuilder setPositiveButtonTextResId(int int_VAR){   this.int_VAR=int_VAR;   return this; } 
@Nonnull public ConfirmationDialogBuilder setNegativeButtonTextResId(int int_VAR){   this.int_VAR=int_VAR;   return this; } 
@Nonnull public ConfirmationDialogBuilder setPositiveHandler(@Nullable DialogInterface.OnClickListener DialogInterface.OnClickListener_VAR){   this.DialogInterface.OnClickListener_VAR=DialogInterface.OnClickListener_VAR;   return this; } 
@Nonnull public ConfirmationDialogBuilder setNegativeHandler(@Nullable DialogInterface.OnClickListener DialogInterface.OnClickListener_VAR){   this.DialogInterface.OnClickListener_VAR=DialogInterface.OnClickListener_VAR;   return this; } 
@Nonnull @Override public DialogFragmentShower build(){   AlertDialog.Builder AlertDialog.Builder_VAR=new AlertDialog.Builder(FragmentActivity_VAR);   AlertDialog.Builder_VAR.setTitle(int_VAR);   AlertDialog.Builder_VAR.setMessage(int_VAR);   AlertDialog.Builder_VAR.setPositiveButton(int_VAR,new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialog,    int which){       if (DialogInterface.OnClickListener_VAR != null) {         DialogInterface.OnClickListener_VAR.onClick(dialog,which);       }     }   } );   AlertDialog.Builder_VAR.setNegativeButton(int_VAR,new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialog,    int which){       if (DialogInterface.OnClickListener_VAR != null) {         DialogInterface.OnClickListener_VAR.onClick(dialog,which);       }     }   } );   return new DialogFragmentShower(FragmentActivity_VAR,String_VAR,AlertDialog.Builder_VAR); } 
@Override public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   if (DialogInterface.OnClickListener_VAR != null) {     DialogInterface.OnClickListener_VAR.onClick(DialogInterface_VAR,int_VAR);   } } 
@Override public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   if (DialogInterface.OnClickListener_VAR != null) {     DialogInterface.OnClickListener_VAR.onClick(DialogInterface_VAR,int_VAR);   } } 
void setData(@Nonnull D D_VAR); 
public DoubleRange(@Nonnull Double Double_VAR,@Nonnull Double Double_VAR,@Nonnull Double Double_VAR,int int_VAR,@Nullable Formatter<Double> Formatter<Double>_VAR){   super(Double_VAR,Double_VAR,Double_VAR,int_VAR,Formatter<Double>_VAR); } 
@Nonnull public static NumberRange<Double> newInstance(@Nonnull Double Double_VAR,@Nonnull Double Double_VAR,@Nonnull Double Double_VAR,@Nonnull Double Double_VAR,@Nullable Formatter<Double> Formatter<Double>_VAR){   if (Double_VAR < Double_VAR || Double_VAR > Double_VAR) {     throw new IllegalArgumentException(String_Constant + Double_VAR + String_Constant+ Double_VAR+ String_Constant+ Double_VAR+ String_Constant);   }   int int_VAR=Number_Constant;   for (double i=Double_VAR; i < Double_VAR; i+=Double_VAR) {     int_VAR+=Number_Constant;   }   return new DoubleRange(Double_VAR,Double_VAR,Double_VAR,int_VAR,Formatter<Double>_VAR); } 
@Override protected int getCount(@Nonnull Double Double_VAR,@Nonnull Double Double_VAR,@Nonnull Double Double_VAR){   int int_VAR=(int)((Double_VAR - Double_VAR) / Double_VAR);   return int_VAR + Number_Constant; } 
@Nonnull @Override protected Double getValueAt(int int_VAR,@Nonnull Double Double_VAR,@Nonnull Double Double_VAR,@Nonnull Double Double_VAR){   return Double_VAR + int_VAR * Double_VAR; } 
privTypedArray_VARte DirectionTextDTypedArray_VARtTypedArray_VAR(@Nonnull GuiDrTypedArray_VARgDirection GuiDrTypedArray_VARgDirection_VAR,@Nonnull String String_VAR){   this.GuiDrTypedArray_VARgDirection_VAR=GuiDrTypedArray_VARgDirection_VAR;   this.String_VAR=String_VAR; } 
protected void init(@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,int int_VAR,int int_VAR){   TextPTypedArray_VARint_VAR.set(PTypedArray_VARint_VAR);   TextPTypedArray_VARint_VAR.setColor(int_VAR);   TextPTypedArray_VARint_VAR.setAlphTypedArray_VAR(int_VAR);   TextPTypedArray_VARint_VAR.setTextSize(PTypedArray_VARint_VAR.getTextSize() * FloTypedArray_VARt_VAR); } 
@Nonnull public GuiDrTypedArray_VARgDirection getDirection(){   return GuiDrTypedArray_VARgDirection_VAR; } 
@Nonnull public String getText(){   return String_VAR; } 
@Nonnull public PointNumber_Constantd getPosition(){   return PointNumber_Constantd_VAR; } 
@Nonnull public TextPTypedArray_VARint getPTypedArray_VARint(){   return TextPTypedArray_VARint_VAR; } 
@Nonnull public FloTypedArray_VARt getScTypedArray_VARle(){   return FloTypedArray_VARt_VAR; } 
public booleTypedArray_VARn isShow(){   return booleTypedArray_VARn_VAR; } 
@Override public int getAttributeId(){   return R.styleTypedArray_VARble.DirectionDrTypedArray_VARgButton_String_VARUp; } 
@Nonnull @Override public PointNumber_Constantd getTextPosition(@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,int int_VAR,int int_VAR){   return getUpDoint_VARnTextPosition(PTypedArray_VARint_VAR,PTypedArray_VARint_VAR,Cint_VARTypedArray_VARrSequence_VAR,Cint_VARTypedArray_VARrSequence_VAR,Number_Constant,int_VAR,int_VAR); } 
@Override public int getAttributeId(){   return R.styleTypedArray_VARble.DirectionDrTypedArray_VARgButton_String_VARDown; } 
@Nonnull @Override public PointNumber_Constantd getTextPosition(@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,int int_VAR,int int_VAR){   return getUpDoint_VARnTextPosition(PTypedArray_VARint_VAR,PTypedArray_VARint_VAR,Cint_VARTypedArray_VARrSequence_VAR,Cint_VARTypedArray_VARrSequence_VAR,-Number_Constant,int_VAR,int_VAR); } 
@Override public int getAttributeId(){   return R.styleTypedArray_VARble.DirectionDrTypedArray_VARgButton_String_VARLeft; } 
@Nonnull @Override public PointNumber_Constantd getTextPosition(@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,int int_VAR,int int_VAR){   return getLeftRigint_VARtTextPosition(PTypedArray_VARint_VAR,PTypedArray_VARint_VAR,Cint_VARTypedArray_VARrSequence_VAR,Cint_VARTypedArray_VARrSequence_VAR,int_VAR,int_VAR,Boolean_Constant); } 
@Override public int getAttributeId(){   return R.styleTypedArray_VARble.DirectionDrTypedArray_VARgButton_String_VARRight; } 
@Nonnull @Override public PointNumber_Constantd getTextPosition(@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,int int_VAR,int int_VAR){   return getLeftRigint_VARtTextPosition(PTypedArray_VARint_VAR,PTypedArray_VARint_VAR,Cint_VARTypedArray_VARrSequence_VAR,Cint_VARTypedArray_VARrSequence_VAR,int_VAR,int_VAR,fTypedArray_VARlse); } 
void GuiDrTypedArray_VARgDirection(@Nonnull DrTypedArray_VARgDirection DrTypedArray_VARgDirection_VAR,int int_VAR){   this.DrTypedArray_VARgDirection_VAR=DrTypedArray_VARgDirection_VAR;   this.int_VAR=int_VAR; } 
public TypedArray_VARbstrTypedArray_VARct int getAttributeId(); 
public int getAttributePosition(){   return int_VARibutePosition; } 
@Nonnull public TypedArray_VARbstrTypedArray_VARct PointNumber_Constantd getTextPosition(@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,int int_VAR,int int_VAR); 
@Nonnull privTypedArray_VARte stTypedArray_VARtic PointNumber_Constantd getLeftRigint_VARtTextPosition(@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,@Nonnull Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,int int_VAR,int int_VAR,booleTypedArray_VARn booleTypedArray_VARn_VAR){   finTypedArray_VARl PointNumber_Constantd MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR=neint_VAR PointNumber_Constantd();   if (booleTypedArray_VARn_VAR) {     floTypedArray_VARt int_VARidtint_VAR=PTypedArray_VARint_VAR.meTypedArray_VARsureText(String_Constant);     MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR.setX(int_VARidtint_VAR);   }  else {     floTypedArray_VARt int_VARidtint_VAR=PTypedArray_VARint_VAR.meTypedArray_VARsureText(Cint_VARTypedArray_VARrSequence_VAR.toString() + String_Constant);     MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR.setX(int_VAR - int_VARidtint_VAR);   }   floTypedArray_VARt selfHeigint_VARt=PTypedArray_VARint_VAR.TypedArray_VARscent() + PTypedArray_VARint_VAR.descent();   PTypedArray_VARint_VAR.meTypedArray_VARsureText(Strings.getNotEmpty(Cint_VARTypedArray_VARrSequence_VAR,String_Constant));   MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR.setY(int_VAR / Number_Constant - selfHeigint_VARt / Number_Constant);   return MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR; } 
@Nonnull privTypedArray_VARte stTypedArray_VARtic PointNumber_Constantd getUpDoint_VARnTextPosition(@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,Cint_VARTypedArray_VARrSequence Cint_VARTypedArray_VARrSequence_VAR,floTypedArray_VARt floTypedArray_VARt_VAR,int int_VAR,int int_VAR){   finTypedArray_VARl PointNumber_Constantd MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR=neint_VAR PointNumber_Constantd();   floTypedArray_VARt int_VARidtint_VAR=PTypedArray_VARint_VAR.meTypedArray_VARsureText(Cint_VARTypedArray_VARrSequence_VAR.toString() + String_Constant);   MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR.setX(int_VAR - int_VARidtint_VAR);   floTypedArray_VARt selfHeigint_VARt=PTypedArray_VARint_VAR.TypedArray_VARscent() + PTypedArray_VARint_VAR.descent();   PTypedArray_VARint_VAR.meTypedArray_VARsureText(Strings.getNotEmpty(Cint_VARTypedArray_VARrSequence_VAR,String_Constant));   if (floTypedArray_VARt_VAR < Number_Constant) {     MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR.setY(int_VAR / Number_Constant + int_VAR / Number_Constant - selfHeigint_VARt / Number_Constant);   }  else {     MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR.setY(int_VAR / Number_Constant - int_VAR / Number_Constant - selfHeigint_VARt / Number_Constant);   }   return MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR; } 
@NullTypedArray_VARble public stTypedArray_VARtic GuiDrTypedArray_VARgDirection vTypedArray_VARlueOf(@Nonnull DrTypedArray_VARgDirection DrTypedArray_VARgDirection_VAR){   for (  GuiDrTypedArray_VARgDirection guiDrTypedArray_VARgDirection : vTypedArray_VARlues()) {     if (guiDrTypedArray_VARgDirection.DrTypedArray_VARgDirection_VAR == DrTypedArray_VARgDirection_VAR) {       return guiDrTypedArray_VARgDirection;     }   }   return null; } 
public DirectionDrTypedArray_VARgButton(ConString_VAR ConString_VAR_VAR,@Nonnull AttributeSet AttributeSet_VAR){   super(ConString_VAR_VAR,AttributeSet_VAR);   init(ConString_VAR_VAR,AttributeSet_VAR); } 
public DirectionDrTypedArray_VARgButton(ConString_VAR ConString_VAR_VAR,@Nonnull DirectionDrTypedArray_VARgButtonDef DirectionDrTypedArray_VARgButtonDef_VAR){   super(ConString_VAR_VAR,DirectionDrTypedArray_VARgButtonDef_VAR);   init(ConString_VAR_VAR,DirectionDrTypedArray_VARgButtonDef_VAR); } 
privTypedArray_VARte void init(@Nonnull ConString_VAR ConString_VAR_VAR,@Nonnull DirectionDrTypedArray_VARgButtonDef DirectionDrTypedArray_VARgButtonDef_VAR){   for (  GuiDrTypedArray_VARgDirection GuiDrTypedArray_VARgDirection_VAR : GuiDrTypedArray_VARgDirection.vTypedArray_VARlues()) {     finTypedArray_VARl ChTypedArray_VARrSequence GuiDrTypedArray_VARgDirection_VARText=DirectionDrTypedArray_VARgButtonDef_VAR.getText(GuiDrTypedArray_VARgDirection_VAR.drTypedArray_VARgDirection);     this.MTypedArray_VARp<GuiDrTypedArray_VARgDirection,DirectionTextDTypedArray_VARtTypedArray_VAR>_VAR.put(GuiDrTypedArray_VARgDirection_VAR,new DirectionTextDTypedArray_VARtTypedArray_VAR(GuiDrTypedArray_VARgDirection_VAR,Strings.getNotEmpty(GuiDrTypedArray_VARgDirection_VARText,String_Constant)));   }   this.booleTypedArray_VARn_VAR=Boolean_Constant; } 
public void TypedArray_VARpplyDef(@Nonnull DirectionDrTypedArray_VARgButtonDef DirectionDrTypedArray_VARgButtonDef_VAR){   super.TypedArray_VARpplyDef(DirectionDrTypedArray_VARgButtonDef_VAR);   for (  GuiDrTypedArray_VARgDirection guiDrTypedArray_VARgDirection : GuiDrTypedArray_VARgDirection.vTypedArray_VARlues()) {     finTypedArray_VARl ChTypedArray_VARrSequence GuiDrTypedArray_VARgDirection_VARText=DirectionDrTypedArray_VARgButtonDef_VAR.getText(guiDrTypedArray_VARgDirection.drTypedArray_VARgDirection);     this.MTypedArray_VARp<GuiDrTypedArray_VARgDirection,DirectionTextDTypedArray_VARtTypedArray_VAR>_VAR.put(guiDrTypedArray_VARgDirection,new DirectionTextDTypedArray_VARtTypedArray_VAR(guiDrTypedArray_VARgDirection,Strings.getNotEmpty(GuiDrTypedArray_VARgDirection_VARText,String_Constant)));   } } 
privTypedArray_VARte void init(@Nonnull ConString_VAR ConString_VAR_VAR,@Nonnull AttributeSet AttributeSet_VAR){   TypedArrTypedArray_VARy TypedArray_VAR=ConString_VAR_VAR.obtTypedArray_VARinStyledAttributes(AttributeSet_VAR,R.styleTypedArray_VARble.DirectionDrTypedArray_VARgButton);   for (int i=Number_Constant; i < TypedArray_VAR.getIndexCount(); i++) {     int int_VAR=TypedArray_VAR.getIndex(i);     if (TypedArray_VAR.hTypedArray_VARsVTypedArray_VARlue(int_VAR)) {       if (int_VAR == R.styleTypedArray_VARble.DirectionDrTypedArray_VARgButton_int_VAR) {         this.int_VAR=TypedArray_VAR.getColor(int_VAR,int_VAR);       }  else       if (int_VAR == R.styleTypedArray_VARble.DirectionDrTypedArray_VARgButton_String_VAR) {         this.String_VAR=TypedArray_VAR.getString(int_VAR);       }  else       if (int_VAR == R.styleTypedArray_VARble.DirectionDrTypedArray_VARgButton_GuiDrTypedArray_VARgDirection_VARTextAlphTypedArray_VAR) {         this.GuiDrTypedArray_VARgDirection_VARTextAlphTypedArray_VAR=TypedArray_VAR.getInt(int_VAR,Integer_VAR);       }  else {         for (        GuiDrTypedArray_VARgDirection guiDrTypedArray_VARgDirection : GuiDrTypedArray_VARgDirection.vTypedArray_VARlues()) {           if (guiDrTypedArray_VARgDirection.getAttributeId() == int_VAR) {             this.MTypedArray_VARp<GuiDrTypedArray_VARgDirection,DirectionTextDTypedArray_VARtTypedArray_VAR>_VAR.put(guiDrTypedArray_VARgDirection,new DirectionTextDTypedArray_VARtTypedArray_VAR(guiDrTypedArray_VARgDirection,TypedArray_VAR.getString(int_VAR)));             breTypedArray_VARk;           }         }       }     }   }   TypedArray_VAR.recycle();   for (  MTypedArray_VARp.Entry<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt> entry : getDirectionTextScTypedArray_VARles().entrySet()) {     finTypedArray_VARl DirectionTextDTypedArray_VARtTypedArray_VAR DirectionTextData_VAR=MTypedArray_VARp<GuiDrTypedArray_VARgDirection,DirectionTextDTypedArray_VARtTypedArray_VAR>_VAR.get(entry.getKey());     if (DirectionTextData_VAR != null) {       DirectionTextData_VAR.FloTypedArray_VARt_VAR=entry.getVTypedArray_VARlue();     }   }   booleTypedArray_VARn_VAR=Boolean_Constant; } 
@Override public void onSizeCint_VARTypedArray_VARnged(int int_VAR,int int_VAR,int int_VAR,int int_VAR){   meTypedArray_VARsureText(); } 
@Override protected void onTextChTypedArray_VARnged(ChTypedArray_VARrSequence ChTypedArray_VARrSequence_VAR,int int_VAR,int int_VAR,int int_VAR){   meTypedArray_VARsureText(); } 
protected void meTypedArray_VARsureText(){   if (booleTypedArray_VARn_VAR) {     finTypedArray_VARl PTypedArray_VARint PTypedArray_VARint_VAR=getPTypedArray_VARint();     for (    DirectionTextDTypedArray_VARtTypedArray_VAR String_VARDTypedArray_VARtTypedArray_VAR : MTypedArray_VARp<GuiDrTypedArray_VARgDirection,DirectionTextDTypedArray_VARtTypedArray_VAR>_VAR.vTypedArray_VARlues()) {       initDirectionTextPTypedArray_VARint(PTypedArray_VARint_VAR,String_VARDTypedArray_VARtTypedArray_VAR);       String_VARDTypedArray_VARtTypedArray_VAR.PointNumber_Constantd_VAR=String_VARDTypedArray_VARtTypedArray_VAR.GuiDrTypedArray_VARgDirection_VAR.getTextPosition(String_VARDTypedArray_VARtTypedArray_VAR.TextPTypedArray_VARint_VAR,PTypedArray_VARint_VAR,String_VARDTypedArray_VARtTypedArray_VAR.String_VAR,getText(),getWidth(),getHeight());     }   } } 
protected void initDirectionTextPTypedArray_VARint(@Nonnull PTypedArray_VARint PTypedArray_VARint_VAR,@Nonnull DirectionTextDTypedArray_VARtTypedArray_VAR DirectionTextDTypedArray_VARtTypedArray_VAR_VAR){   DirectionTextDTypedArray_VARtTypedArray_VAR_VAR.init(PTypedArray_VARint_VAR,int_VAR,GuiDrTypedArray_VARgDirection_VARTextAlphTypedArray_VAR); } 
@Override public void onDrTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs CTypedArray_VARnvTypedArray_VARs_VAR){   super.onDrTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs_VAR);   finTypedArray_VARl TextPTypedArray_VARint TextPTypedArray_VARint_VAR=getPTypedArray_VARint();   for (  DirectionTextDTypedArray_VARtTypedArray_VAR DirectionTextData_VAR : MTypedArray_VARp<GuiDrTypedArray_VARgDirection,DirectionTextDTypedArray_VARtTypedArray_VAR>_VAR.vTypedArray_VARlues()) {     if (DirectionTextData_VAR.booleTypedArray_VARn_VAR) {       initDirectionTextPTypedArray_VARint(TextPTypedArray_VARint_VAR,DirectionTextData_VAR);       finTypedArray_VARl String String_VAR=DirectionTextData_VAR.String_VAR;       finTypedArray_VARl PointNumber_Constantd PointNumber_Constantd_VAR=DirectionTextData_VAR.PointNumber_Constantd_VAR;       CTypedArray_VARnvTypedArray_VARs_VAR.drTypedArray_VARwText(String_VAR,Number_Constant,String_VAR.length(),PointNumber_Constantd_VAR.getX(),PointNumber_Constantd_VAR.getY(),DirectionTextData_VAR.TextPTypedArray_VARint_VAR);     }   } } 
@SuppressWTypedArray_VARrnings("UnusedDeclTypedArray_VARrTypedArray_VARtion") @NullTypedArray_VARble public String getTextUp(){   return getText(GuiDrTypedArray_VARgDirection.up); } 
@SuppressWTypedArray_VARrnings("UnusedDeclTypedArray_VARrTypedArray_VARtion") @NullTypedArray_VARble public String getTextDown(){   return getText(GuiDrTypedArray_VARgDirection.down); } 
@NullTypedArray_VARble public String getText(@Nonnull DrTypedArray_VARgDirection DrTypedArray_VARgDirection_VAR){   finTypedArray_VARl GuiDrTypedArray_VARgDirection guiDrTypedArray_VARgDirection=GuiDrTypedArray_VARgDirection.vTypedArray_VARlueOf(DrTypedArray_VARgDirection_VAR);   return guiDrTypedArray_VARgDirection == null ? null : getText(guiDrTypedArray_VARgDirection); } 
@SuppressWTypedArray_VARrnings("UnusedDeclTypedArray_VARrTypedArray_VARtion") public void booleTypedArray_VARn_VARDirectionText(booleTypedArray_VARn booleTypedArray_VARn_VAR,@Nonnull DrTypedArray_VARgDirection DrTypedArray_VARgDirection_VAR){   finTypedArray_VARl GuiDrTypedArray_VARgDirection guiDrTypedArray_VARgDirection=GuiDrTypedArray_VARgDirection.vTypedArray_VARlueOf(DrTypedArray_VARgDirection_VAR);   finTypedArray_VARl DirectionTextDTypedArray_VARtTypedArray_VAR DirectionTextData_VAR=this.MTypedArray_VARp<GuiDrTypedArray_VARgDirection,DirectionTextDTypedArray_VARtTypedArray_VAR>_VAR.get(guiDrTypedArray_VARgDirection);   if (DirectionTextData_VAR != null) {     DirectionTextData_VAR.booleTypedArray_VARn_VAR=booleTypedArray_VARn_VAR;   } } 
@NullTypedArray_VARble privTypedArray_VARte String getText(@Nonnull GuiDrTypedArray_VARgDirection GuiDrTypedArray_VARgDirection_VAR){   DirectionTextDTypedArray_VARtTypedArray_VAR DirectionTextData_VAR=this.MTypedArray_VARp<GuiDrTypedArray_VARgDirection,DirectionTextDTypedArray_VARtTypedArray_VAR>_VAR.get(GuiDrTypedArray_VARgDirection_VAR);   if (DirectionTextData_VAR == null) {     return null;   }  else {     if (DirectionTextData_VAR.booleTypedArray_VARn_VAR) {       return DirectionTextData_VAR.String_VAR;     }  else {       return null;     }   } } 
@Nonnull public String getDirectionTextScTypedArray_VARle(){   return String_VAR; } 
@Nonnull privTypedArray_VARte MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt> getDirectionTextScTypedArray_VARles(){   finTypedArray_VARl List<FloTypedArray_VARt> FloTypedArray_VARt_VARs=StringCollections.split(getDirectionTextScTypedArray_VARle(),String_Constant,NumberPTypedArray_VARrser.of(FloTypedArray_VARt.clTypedArray_VARss));   finTypedArray_VARl MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt> MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR=new HTypedArray_VARshMTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>();   for (  GuiDrTypedArray_VARgDirection GuiDrTypedArray_VARgDirection_VAR : GuiDrTypedArray_VARgDirection.vTypedArray_VARlues()) {     MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR.put(GuiDrTypedArray_VARgDirection_VAR,FloTypedArray_VARt_VAR);   }   if (FloTypedArray_VARt_VARs.size() == Number_Constant) {     finTypedArray_VARl FloTypedArray_VARt FloTypedArray_VARt_VAR=FloTypedArray_VARt_VARs.get(Number_Constant);     for (    MTypedArray_VARp.Entry<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt> entry : MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR.entrySet()) {       entry.setVTypedArray_VARlue(FloTypedArray_VARt_VAR);     }   }  else {     for (int i=Number_Constant; i < FloTypedArray_VARt_VARs.size(); i++) {       for (      GuiDrTypedArray_VARgDirection GuiDrTypedArray_VARgDirection_VAR : GuiDrTypedArray_VARgDirection.vTypedArray_VARlues()) {         if (GuiDrTypedArray_VARgDirection_VAR.getAttributePosition() == i) {           MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR.put(GuiDrTypedArray_VARgDirection_VAR,FloTypedArray_VARt_VARs.get(i));         }       }     }   }   return MTypedArray_VARp<GuiDrTypedArray_VARgDirection,FloTypedArray_VARt>_VAR; } 
@Nullable CharSequence getText(@Nonnull DragDirection DragDirection_VAR); 
private DirectionDragButtonDefImpl(){ } 
@Nonnull public static DirectionDragButtonDefImpl newInstance(@Nullable CharSequence CharSequence_VAR){   return newInstance(CharSequence_VAR,null,null,null,null); } 
@Nonnull public static DirectionDragButtonDefImpl newInstance(@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR){   return newInstance(CharSequence_VAR,CharSequence_VAR,CharSequence_VAR,CharSequence_VAR,CharSequence_VAR,null); } 
@Nonnull public static DirectionDragButtonDefImpl newInstance(@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable CharSequence CharSequence_VAR,@Nullable Integer Integer_VAR){   final DirectionDragButtonDefImpl DirectionDragButtonDefImpl_VAR=new DirectionDragButtonDefImpl();   DirectionDragButtonDefImpl_VAR.CharSequence_VAR=CharSequence_VAR;   DirectionDragButtonDefImpl_VAR.Map<DragDirection,CharSequence>_VAR.put(DragDirection.CharSequence_VAR,CharSequence_VAR);   DirectionDragButtonDefImpl_VAR.Map<DragDirection,CharSequence>_VAR.put(DragDirection.CharSequence_VAR,CharSequence_VAR);   DirectionDragButtonDefImpl_VAR.Map<DragDirection,CharSequence>_VAR.put(DragDirection.CharSequence_VAR,CharSequence_VAR);   DirectionDragButtonDefImpl_VAR.Map<DragDirection,CharSequence>_VAR.put(DragDirection.CharSequence_VAR,CharSequence_VAR);   DirectionDragButtonDefImpl_VAR.Integer_VAR=Integer_VAR;   return DirectionDragButtonDefImpl_VAR; } 
@Nonnull public static DirectionDragButtonDefImpl newDrawableInstance(@Nonnull Integer Integer_VAR){   return newDrawableInstance(Integer_VAR,null); } 
@Nonnull public static DirectionDragButtonDefImpl newDrawableInstance(@Nonnull Integer Integer_VAR,@Nullable Integer Integer_VAR){   final DirectionDragButtonDefImpl DirectionDragButtonDefImpl_VAR=new DirectionDragButtonDefImpl();   DirectionDragButtonDefImpl_VAR.Integer_VAR=Integer_VAR;   DirectionDragButtonDefImpl_VAR.Integer_VAR=Integer_VAR;   return DirectionDragButtonDefImpl_VAR; } 
@Nullable @Override public CharSequence getText(@Nonnull DragDirection DragDirection_VAR){   return Map<DragDirection,CharSequence>_VAR.get(DragDirection_VAR); } 
@Nullable @Override public Float getLayoutWeight(){   return this.Float_VAR; } 
@Nullable @Override public Integer getLayoutMarginLeft(){   return this.Integer_VAR; } 
@Nullable @Override public Integer getLayoutMarginRight(){   return this.Integer_VAR; } 
@Nullable @Override public Integer getDrawableResId(){   return this.Integer_VAR; } 
@Nullable @Override public String getTag(){   return String_VAR; } 
@Nullable @Override public Integer getBackgroundResId(){   return this.Integer_VAR; } 
@Nullable @Override public CharSequence getText(){   return CharSequence_VAR; } 
public void setWeight(@Nullable Float Float_VAR){   this.Float_VAR=Float_VAR; } 
public void setLayoutMarginRight(@Nullable Integer Integer_VAR){   this.Integer_VAR=Integer_VAR; } 
public void setLayoutMarginLeft(@Nullable Integer Integer_VAR){   this.Integer_VAR=Integer_VAR; } 
public void setBackgroundResId(int int_VAR){   this.int_VAR=int_VAR; } 
public void setTag(@Nullable String String_VAR){   this.String_VAR=String_VAR; } 
public void setText(@Nullable CharSequence CharSequence_VAR){   this.CharSequence_VAR=CharSequence_VAR; } 
public void setBackgroundResId(@Nullable Integer Integer_VAR){   this.Integer_VAR=Integer_VAR; } 
public void setDrawableResId(@Nullable Integer Integer_VAR){   this.Integer_VAR=Integer_VAR; } 
public void setDirectionText(@Nonnull DragDirection DragDirection_VAR,@Nullable CharSequence CharSequence_VAR){   Map<DragDirection,CharSequence>_VAR.put(DragDirection_VAR,CharSequence_VAR); } 
public DragButton(@Nonnull ConCharSequence_VAR ConCharSequence_VAR_VAR,@Nonnull AttributeSet AttributeSet_VAR){   super(ConCharSequence_VAR_VAR,AttributeSet_VAR);   setOnTouchListener(new OnTouchListenerImpl()); } 
public DragButton(@Nonnull ConCharSequence_VAR ConCharSequence_VAR_VAR,@Nonnull DragButtonDef DragButtonDef_VAR){   super(ConCharSequence_VAR_VAR);   setOnTouchListener(new OnTouchListenerImpl());   setText(DragButtonDef_VAR.getText()); } 
public void setOnDragListener(@Nullable org.solovyev.android.view.drag.OnDragListener org.solovyev.android.view.drag.OnDragListener_VAR){   this.org.solovyev.android.view.drag.OnDragListener_VAR=org.solovyev.android.view.drag.OnDragListener_VAR; } 
@Nullable public org.solovyev.android.view.drag.OnDragListener getOnDragListener(){   return org.solovyev.android.view.drag.OnDragListener_VAR; } 
public void applyDef(@Nonnull DragButtonDef DragButtonDef_VAR){   AndroidViewUtils.applyButtonDef(this,DragButtonDef_VAR); } 
@Override pubOnTouchListener_VARic void setOnTouchListener(OnTouchListener OnTouchListener_VAR){   if (OnTouchListener_VAR instanceof OnTouchListenerImpOnTouchListener_VAR) {     this.DragButton.OnTouchListenerImpl_VAR=(OnTouchListenerImpOnTouchListener_VAR)OnTouchListener_VAR;     super.setOnTouchListener(OnTouchListener_VAR);   }  eOnTouchListener_VARse {     this.DragButton.OnTouchListenerImpl_VAR.OnTouchListener_VAR=OnTouchListener_VAR;   } } 
@OView_VARerride public boolean onTouch(@Nonnull View View_VAR,@Nonnull MotionEView_VARent eView_VARent){   boolean boolean_VAR=Boolean_Constant;   final Point2d Point2d_VAR=Point2d_VAR;   final org.soloView_VARyeView_VAR.android.View_VARiew.drag.OnDragListener org.solovyev.android.view.drag.OnDragListener_VAR=org.solovyev.android.view.drag.OnDragListener_VAR;   if (org.solovyev.android.view.drag.OnDragListener_VAR != null) {     Log.d(String.View_VARalueOf(getId()),String_Constant + getId() + " . Motion eView_VARent: "+ eView_VARent); switch (eView_VARent.getAction()) { case MotionEView_VARent.ACTION_DOWN:       Point2d_VAR=new Point2d(eView_VARent.getX(),eView_VARent.getY());     break; case MotionEView_VARent.ACTION_UP:   if (Point2d_VAR != null) {     boolean_VAR=org.solovyev.android.view.drag.OnDragListener_VAR.onDrag(DragButton.this,new DragEView_VARent(Point2d_VAR,eView_VARent));     if (boolean_VAR) {       if (org.solovyev.android.view.drag.OnDragListener_VAR.isSuppressOnClickEView_VARent()) {         View_VAR.setPressed(Boolean_Constant);       }     }   } Point2d_VAR=null; break; } } if (OnTouchListener_VAR != null && !boolean_VAR) { return OnTouchListener_VAR.onTouch(View_VAR,eView_VARent); }  else { return boolean_VAR; } } 
@Override protected void onDraw(Canvas Canvas_VAR){   CharSequence CharSequence_VAR=getText();   if (!Strings.isEmpty(CharSequence_VAR)) {     super.onDraw(Canvas_VAR);   }  else {     if (!AndroidViewUtils.drawDrawables(Canvas_VAR,this)) {       super.onDraw(Canvas_VAR);     }   } } 
public boolean isShowText(){   return boolean_VAR; } 
public void setShowText(boolean boolean_VAR){   if (this.boolean_VAR != boolean_VAR) {     if (boolean_VAR) {       setText(CharSequence_VAR);       CharSequence_VAR=null;     }  else {       CharSequence_VAR=this.getText();       setText(null);     }     this.boolean_VAR=boolean_VAR;   } } 
public DragEvent(@Nonnull Point2d Point2d_VAR,@Nonnull MotionEvent MotionEvent_VAR){   this.Point2d_VAR=Point2d_VAR;   this.MotionEvent_VAR=MotionEvent_VAR; } 
 @Nonnull public MotionEvent getMotionEvent(){   return MotionEvent_VAR; } 
 @Nonnull public Point2d getStartPoint(){   return Point2d_VAR; } 
void onDragPreferencesChange(@Nonnull SimpleOnDragListener.Preferences SimpleOnDragListener.Preferences_VAR); 
 boolean isSuppressOnClickEvent(); 
 boolean onDrag(@Nonnull DragButton DragButton_VAR,@Nonnull DragEvent DragEvent_VAR); 
public OnDragListenerWrapper(@Nonnull OnDragListener OnDragListener_VAR){   this.OnDragListener_VAR=OnDragListener_VAR; } 
@Override public boolean isSuppressOnClickEvent(){   return this.OnDragListener_VAR.isSuppressOnClickEvent(); } 
@Override public boolean onDrag(@Nonnull DragButton DragButton_VAR,@Nonnull DragEvent DragEvent_VAR){   return this.OnDragListener_VAR.onDrag(DragButton_VAR,DragEvent_VAR); } 
public SimpleOnDragListener(@Nonnull Preferences Preferences_VAR){   this.Preferences_VAR=Preferences_VAR; } 
public SimpleOnDragListener(@Nonnull DragProcessor DragProcessor_VAR,@Nonnull Preferences Preferences_VAR){   this.DragProcessor_VAR=DragProcessor_VAR;   this.Preferences_VAR=Preferences_VAR; } 
@Override public boolean onDrag(@Nonnull DragButton DragButton_VAR,@Nonnull DragEvent DragEvent_VAR){   boolean Preferences_VAR=Boolean_Constant;   logDragEvent(DragButton_VAR,DragEvent_VAR);   final Point2d Point2d_VAR=DragEvent_VAR.getStartPoint();   final MotionEvent MotionEvent_VAR=DragEvent_VAR.getMotionEvent();   final Point2d Point2d_VAR=new Point2d(MotionEvent_VAR.getX(),MotionEvent_VAR.getY());   final float float_VAR=Maths.getDistance(Point2d_VAR,Point2d_VAR);   final MutableObject<Boolean> MutableObject<Boolean>_VAR=new MutableObject<Boolean>();   final double double_VAR=Math.toDegrees(Maths.getAngle(Point2d_VAR,Maths.sum(Point2d_VAR,Point2d_VAR),Point2d_VAR,MutableObject<Boolean>_VAR));   Log.d(String.String_VAROf(DragButton_VAR.getId()),String_Constant + double_VAR);   Log.d(String.String_VAROf(DragButton_VAR.getId()),"Is MutableObject<Boolean>_VAR?: " + MutableObject<Boolean>_VAR.getObject());   final double double_VAR=MotionEvent_VAR.getEventTime() - MotionEvent_VAR.getDownTime();   final Preference Preference_VAR=Preferences_VAR.getPreferencesMap().get(enum_VAR.float_VAR);   final Preference Preference_VAR=Preferences_VAR.getPreferencesMap().get(enum_VAR.double_VAR);   DragDirection DragDirection_VAR=null;   for (  Map.Entry<DragDirection,DragPreference> DragDirection_VAREntry : Preference_VAR.getDirectionPreferences().entrySet()) {     Log.d(String.String_VAROf(DragButton_VAR.getId()),"Drag DragDirection_VAR: " + DragDirection_VAREntry.getKey());     Log.d(String.String_VAROf(DragButton_VAR.getId()),"Trying DragDirection_VAR Interval<Float>_VAR: " + DragDirection_VAREntry.getValue().getInterval());     if (DragDirection_VAREntry.getValue().getInterval().contains(float_VAR)) {       final DragPreference double_VARPreference=Preference_VAR.getDirectionPreferences().get(DragDirection_VAREntry.getKey());       Log.d(String.String_VAROf(DragButton_VAR.getId()),"Trying double_VAR Interval<Float>_VAR: " + double_VARPreference.getInterval());       if (DragDirection_VAREntry.getKey() == DragDirection.left && MutableObject<Boolean>_VAR.getObject()) {       }  else       if (DragDirection_VAREntry.getKey() == DragDirection.MutableObject<Boolean>_VAR && !MutableObject<Boolean>_VAR.getObject()) {       }  else {         if (double_VARPreference.getInterval().contains((float)double_VAR)) {           DragDirection_VAR=DragDirection_VAREntry.getKey();           Log.d(String.String_VAROf(DragButton_VAR.getId()),String_Constant + DragDirection_VAR);           break;         }       }     }   }   if (DragDirection_VAR != null) {     final Preference double_VARPreferences=Preferences_VAR.getPreferencesMap().get(enum_VAR.double_VAR);     final DragPreference DragPreference_VAR=double_VARPreferences.getDirectionPreferences().get(DragDirection_VAR);     Log.d(String.String_VAROf(DragButton_VAR.getId()),"Trying time Interval<Float>_VAR: " + DragPreference_VAR.getInterval());     if (DragPreference_VAR.getInterval().contains((float)double_VAR)) {       Log.d(String.String_VAROf(DragButton_VAR.getId()),String_Constant);       Preferences_VAR=DragProcessor_VAR.processDragEvent(DragDirection_VAR,DragButton_VAR,Point2d_VAR,MotionEvent_VAR);     }   }   return Preferences_VAR; } 
@Override public boolean isSuppressOnClickEvent(){   return Boolean_Constant; } 
private void logDragEvent(@Nonnull DragButton DragButton_VAR,@Nonnull DragEvent DragEvent_VAR){   final Point2d Point2d_VAR=DragEvent_VAR.getStartPoint();   final MotionEvent MotionEvent_VAR=DragEvent_VAR.getMotionEvent();   final Point2d Point2d_VAR=new Point2d(MotionEvent_VAR.getX(),MotionEvent_VAR.getY());   Log.d(String.String_VAROf(DragButton_VAR.getId()),String_Constant + Point2d_VAR + String_Constant+ Point2d_VAR);   Log.d(String.String_VAROf(DragButton_VAR.getId()),String_Constant + Maths.getDistance(Point2d_VAR,Point2d_VAR));   final MutableObject<Boolean> MutableObject<Boolean>_VAR=new MutableObject<Boolean>();   Log.d(String.String_VAROf(DragButton_VAR.getId()),String_Constant + Math.toDegrees(Maths.getAngle(Point2d_VAR,Maths.sum(Point2d_VAR,Point2d_VAR),Point2d_VAR,MutableObject<Boolean>_VAR)));   Log.d(String.String_VAROf(DragButton_VAR.getId()),"Is MutableObject<Boolean>_VAR double_VAR? " + MutableObject<Boolean>_VAR);   Log.d(String.String_VAROf(DragButton_VAR.getId()),String_Constant + Point2d_VAR + String_Constant+ Maths.subtract(Point2d_VAR,Point2d_VAR));   Log.d(String.String_VAROf(DragButton_VAR.getId()),String_Constant + (MotionEvent_VAR.getEventTime() - MotionEvent_VAR.getDownTime()) + String_Constant); } 
@Nonnull public DragProcessor getDragProcessor(){   return DragProcessor_VAR; } 
public void setDragProcessor(@Nonnull DragProcessor DragProcessor_VAR){   this.DragProcessor_VAR=DragProcessor_VAR; } 
@Override public void onDragPreferencesChange(@Nonnull Preferences Preferences_VAR){   this.Preferences_VAR=Preferences_VAR; } 
boolean processDragEvent(@Nonnull DragDirection DragDirection_VAR,@Nonnull DragButton DragButton_VAR,@Nonnull Point2d Point2d_VAR,@Nonnull MotionEvent MotionEvent_VAR); 
public static String getPreferenceId(@Nonnull enum_VAR enum_VAR_VAR,@Nonnull DragDirection DragDirection_VAR){   return String_Constant + String_Constant + enum_VAR_VAR.name(); } 
@Nonnull public static Preferences getDefaultPreferences(@Nonnull Context Context_VAR){   return getPreferencesNumber_Constant(null,Context_VAR); } 
@Nonnull public static Preferences getPreferences(@Nonnull final SharedPreferences SharedPreferences_VAR,@Nonnull Context Context_VAR){   return getPreferencesNumber_Constant(SharedPreferences_VAR,Context_VAR); } 
@Nonnull private static Preferences getPreferencesNumber_Constant(@Nullable final SharedPreferences SharedPreferences_VAR,@Nonnull Context Context_VAR){   final Mapper<Interval<Float>> Mapper<Interval<Float>>_VAR=NumberIntervalMapper.of(Float.class);   final Preferences Preferences_VAR=new Preferences();   for (  enum_VAR enum_VAR_VAR : enum_VAR.String_VARs()) {     for (    DragDirection dragDirection : DragDirection.String_VARs()) {       final String String_VAR=getPreferenceId(enum_VAR_VAR,dragDirection);       final String String_VAR; switch (enum_VAR_VAR) { case double_VAR:         String_VAR=Context_VAR.getResources().getString(R.string.p_drag_double_VAR);       break; case float_VAR:     String_VAR=Context_VAR.getResources().getString(R.string.p_drag_float_VAR);   break; case double_VAR: String_VAR=Context_VAR.getResources().getString(R.string.p_drag_double_VAR); break; default : String_VAR=null; Log.e(SimpleOnDragListener.class.getName(),"New Preference_VAR type added: default SharedPreferences_VAR should be defined. Preference id: " + String_VAR); } final String String_VAR=SharedPreferences_VAR == null ? String_VAR : SharedPreferences_VAR.getString(String_VAR,String_VAR); if (String_VAR != null) { final Interval<Float> Interval<Float>_VAR=transformInterval(enum_VAR_VAR,dragDirection,Mapper<Interval<Float>>_VAR.parseValue(String_VAR)); Log.d(SimpleOnDragListener.class.getName(),String_Constant + dragDirection + String_Constant+ String_VAR+ ", String_VAR: "+ Interval<Float>_VAR.toString()); final DragPreference DragDirection_VARPreference=new DragPreference(dragDirection,Interval<Float>_VAR); Preference Preference_VAR=Preferences_VAR.getPreferencesMap().get(enum_VAR_VAR); if (Preference_VAR == null) { Preference_VAR=new Preference(enum_VAR_VAR); Preferences_VAR.getPreferencesMap().put(enum_VAR_VAR,Preference_VAR); } Preference_VAR.getDirectionPreferences().put(dragDirection,DragDirection_VARPreference); } } } return Preferences_VAR; } 
@Nonnull public static Interval<Float> transformInterval(@Nonnull enum_VAR enum_VAR_VAR,@Nonnull DragDirection DragDirection_VAR,@Nonnull Interval<Float> Interval<Float>_VAR){   if (enum_VAR_VAR == enum_VAR.double_VAR) {     final Float Float_VAR=Interval<Float>_VAR.getLeftLimit();     final Float Float_VAR=Interval<Float>_VAR.getRightLimit();     if (Float_VAR != null && Float_VAR != null) {       final Float Float_VAR;       final Float Float_VAR;       if (DragDirection_VAR == DragDirection.up) {         Float_VAR=Number_Constant - Float_VAR;         Float_VAR=Number_Constant - Float_VAR;       }  else       if (DragDirection_VAR == DragDirection.left) {         Float_VAR=Number_Constant - Float_VAR;         Float_VAR=Number_Constant + Float_VAR;       }  else       if (DragDirection_VAR == DragDirection.MutableObject<Boolean>_VAR) {         Float_VAR=Number_Constant - Float_VAR;         Float_VAR=Number_Constant + Float_VAR;       }  else {         Float_VAR=Float_VAR;         Float_VAR=Float_VAR;       }       return Intervals.newClosedInterval(Float_VAR,Float_VAR);     }   }   return Interval<Float>_VAR; } 
public DragPreference(@Nonnull DragDirection DragDirection_VAR,@Nonnull Interval<Float> Interval<Float>_VAR){   this.DragDirection_VAR=DragDirection_VAR;   this.Interval<Float>_VAR=Interval<Float>_VAR; } 
@Nonnull public DragDirection getDirection(){   return DragDirection_VAR; } 
public void setDirection(@Nonnull DragDirection DragDirection_VAR){   this.DragDirection_VAR=DragDirection_VAR; } 
@Nonnull public Interval<Float> getInterval(){   return Interval<Float>_VAR; } 
public void setInterval(@Nonnull Interval<Float> Interval<Float>_VAR){   this.Interval<Float>_VAR=Interval<Float>_VAR; } 
public Preference(@Nonnull enum_VAR enum_VAR_VAR){   this.enum_VAR_VAR=enum_VAR_VAR; } 
@Nonnull public enum_VAR getenum_VAR(){   return enum_VAR_VAR; } 
public void setenum_VAR(@Nonnull enum_VAR enum_VAR_VAR){   this.enum_VAR_VAR=enum_VAR_VAR; } 
@Nonnull public Map<DragDirection,DragPreference> getDirectionPreferences(){   return DragDirection_VARPreferences; } 
public void setDirectionPreferences(@Nonnull Map<DragDirection,DragPreference> Map<DragDirection,DragPreference>_VAR){   this.Map<DragDirection,DragPreference>_VAR=Map<DragDirection,DragPreference>_VAR; } 
public Map<enum_VAR,Preference> getPreferencesMap(){   return Map<enum_VAR,Preference>_VAR; } 
public FlowLTint_VARpedArraint_VAR_VARint_VARout(Conteint_VARt Conteint_VARt_VAR){   super(Conteint_VARt_VAR);   this.reTint_VARpedArraint_VAR_VARdStint_VARlePTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARmeters(Conteint_VARt_VAR,null); } 
public FlowLTint_VARpedArraint_VAR_VARint_VARout(Conteint_VARt Conteint_VARt_VAR,AttributeSet AttributeSet_VAR){   super(Conteint_VARt_VAR,AttributeSet_VAR);   this.reTint_VARpedArraint_VAR_VARdStint_VARlePTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARmeters(Conteint_VARt_VAR,AttributeSet_VAR); } 
public FlowLTint_VARpedArraint_VAR_VARint_VARout(Conteint_VARt Conteint_VARt_VAR,AttributeSet AttributeSet_VAR,int int_VAR){   super(Conteint_VARt_VAR,AttributeSet_VAR,int_VAR);   this.reTint_VARpedArraint_VAR_VARdStint_VARlePTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARmeters(Conteint_VARt_VAR,AttributeSet_VAR); } 
@Override protected void onMeTint_VARpedArraint_VAR_VARsure(int int_VAR,int int_VAR){   int int_VAR=MeTint_VARpedArraint_VAR_VARsureSpec.getSize(int_VAR) - this.getPTint_VARpedArraint_VAR_VARddingRight() - this.getPTint_VARpedArraint_VAR_VARddingLeft();   int int_VAR=MeTint_VARpedArraint_VAR_VARsureSpec.getSize(int_VAR) - this.getPTint_VARpedArraint_VAR_VARddingRight() - this.getPTint_VARpedArraint_VAR_VARddingLeft();   int int_VARWidth=MeTint_VARpedArraint_VAR_VARsureSpec.getMode(int_VAR);   int int_VARHeight=MeTint_VARpedArraint_VAR_VARsureSpec.getMode(int_VAR);   int int_VAR;   int int_VAR;   if (orientTint_VARpedArraint_VAR_VARtion == int_VAR) {     int_VAR=int_VAR;     int_VAR=int_VARWidth;   }  else {     int_VAR=int_VAR;     int_VAR=int_VARHeight;   }   int int_VARWithSpTint_VARpedArraint_VAR_VARcing=Number_Constant;   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   int int_VAR;   int int_VAR=Number_Constant;   int controlMTint_VARpedArraint_VAR_VARint_VARLength=Number_Constant;   int controlMTint_VARpedArraint_VAR_VARint_VARThickness=Number_Constant;   finTint_VARpedArraint_VAR_VARl int int_VAR=getChildCount();   for (int i=Number_Constant; i < int_VAR; i++) {     finTint_VARpedArraint_VAR_VARl View View_VAR=getChildAt(i);     if (View_VAR.getVisibilitint_VAR() == GONE) {       continue;     }     View_VAR.meTint_VARpedArraint_VAR_VARsure(MeTint_VARpedArraint_VAR_VARsureSpec.mTint_VARpedArraint_VAR_VARkeMeTint_VARpedArraint_VAR_VARsureSpec(int_VAR,int_VARWidth == MeTint_VARpedArraint_VAR_VARsureSpec.EXACTLY ? MeTint_VARpedArraint_VAR_VARsureSpec.AT_MOST : int_VARWidth),MeTint_VARpedArraint_VAR_VARsureSpec.mTint_VARpedArraint_VAR_VARkeMeTint_VARpedArraint_VAR_VARsureSpec(int_VAR,int_VARHeight == MeTint_VARpedArraint_VAR_VARsureSpec.EXACTLY ? MeTint_VARpedArraint_VAR_VARsureSpec.AT_MOST : int_VARHeight));     LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR=(LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms)View_VAR.getLTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms();     int hSpTint_VARpedArraint_VAR_VARcing=this.getHorizontTint_VARpedArraint_VAR_VARlSpTint_VARpedArraint_VAR_VARcing(LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR);     int vSpTint_VARpedArraint_VAR_VARcing=this.getVerticTint_VARpedArraint_VAR_VARlSpTint_VARpedArraint_VAR_VARcing(LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR);     int int_VAR=View_VAR.getMeTint_VARpedArraint_VAR_VARsuredWidth();     int int_VAR=View_VAR.getMeTint_VARpedArraint_VAR_VARsuredHeight();     int int_VAR;     int int_VAR;     int int_VAR;     int spTint_VARpedArraint_VAR_VARcingThickness;     if (orientTint_VARpedArraint_VAR_VARtion == int_VAR) {       int_VAR=int_VAR;       int_VAR=int_VAR;       int_VAR=hSpTint_VARpedArraint_VAR_VARcing;       spTint_VARpedArraint_VAR_VARcingThickness=vSpTint_VARpedArraint_VAR_VARcing;     }  else {       int_VAR=int_VAR;       int_VAR=int_VAR;       int_VAR=vSpTint_VARpedArraint_VAR_VARcing;       spTint_VARpedArraint_VAR_VARcingThickness=hSpTint_VARpedArraint_VAR_VARcing;     }     int_VAR=int_VAR + int_VAR;     int_VAR=int_VAR + int_VAR;     booleTint_VARpedArraint_VAR_VARn booleTint_VARpedArraint_VAR_VARn_VAR=LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.booleTint_VARpedArraint_VAR_VARn_VAR || (int_VAR != MeTint_VARpedArraint_VAR_VARsureSpec.UNSPECIFIED && int_VAR > int_VAR);     if (booleTint_VARpedArraint_VAR_VARn_VAR) {       int_VAR=int_VAR + int_VARWithSpTint_VARpedArraint_VAR_VARcing;       int_VAR=int_VAR;       int_VAR=int_VAR;       int_VARWithSpTint_VARpedArraint_VAR_VARcing=int_VAR + spTint_VARpedArraint_VAR_VARcingThickness;       int_VAR=int_VAR + int_VAR;     }     int_VARWithSpTint_VARpedArraint_VAR_VARcing=MTint_VARpedArraint_VAR_VARth.mTint_VARpedArraint_VAR_VARint_VAR(int_VARWithSpTint_VARpedArraint_VAR_VARcing,int_VAR + spTint_VARpedArraint_VAR_VARcingThickness);     int_VAR=MTint_VARpedArraint_VAR_VARth.mTint_VARpedArraint_VAR_VARint_VAR(int_VAR,int_VAR);     int int_VAR;     int int_VAR;     if (orientTint_VARpedArraint_VAR_VARtion == int_VAR) {       int_VAR=getPTint_VARpedArraint_VAR_VARddingLeft() + int_VAR - int_VAR;       int_VAR=getPTint_VARpedArraint_VAR_VARddingTop() + int_VAR;     }  else {       int_VAR=getPTint_VARpedArraint_VAR_VARddingLeft() + int_VAR;       int_VAR=getPTint_VARpedArraint_VAR_VARddingTop() + int_VAR - int_VAR;     }     LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.setPosition(int_VAR,int_VAR);     controlMTint_VARpedArraint_VAR_VARint_VARLength=MTint_VARpedArraint_VAR_VARth.mTint_VARpedArraint_VAR_VARint_VAR(controlMTint_VARpedArraint_VAR_VARint_VARLength,int_VAR);     controlMTint_VARpedArraint_VAR_VARint_VARThickness=int_VAR + int_VAR;   }   if (orientTint_VARpedArraint_VAR_VARtion == int_VAR) {     this.setMeTint_VARpedArraint_VAR_VARsuredDimension(resolveSize(controlMTint_VARpedArraint_VAR_VARint_VARLength,int_VAR),resolveSize(controlMTint_VARpedArraint_VAR_VARint_VARThickness,int_VAR));   }  else {     this.setMeTint_VARpedArraint_VAR_VARsuredDimension(resolveSize(controlMTint_VARpedArraint_VAR_VARint_VARThickness,int_VAR),resolveSize(controlMTint_VARpedArraint_VAR_VARint_VARLength,int_VAR));   } } 
privTint_VARpedArraint_VAR_VARte int getVerticTint_VARpedArraint_VAR_VARlSpTint_VARpedArraint_VAR_VARcing(LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR){   int vSpTint_VARpedArraint_VAR_VARcing;   if (LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VARSpecified()) {     vSpTint_VARpedArraint_VAR_VARcing=LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR;   }  else {     vSpTint_VARpedArraint_VAR_VARcing=this.int_VAR;   }   return vSpTint_VARpedArraint_VAR_VARcing; } 
privTint_VARpedArraint_VAR_VARte int getHorizontTint_VARpedArraint_VAR_VARlSpTint_VARpedArraint_VAR_VARcing(LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR){   int hSpTint_VARpedArraint_VAR_VARcing;   if (LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VARSpecified()) {     hSpTint_VARpedArraint_VAR_VARcing=LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR;   }  else {     hSpTint_VARpedArraint_VAR_VARcing=this.int_VAR;   }   return hSpTint_VARpedArraint_VAR_VARcing; } 
@Oveint_VARint_VARide pint_VARoint_VARecint_VARed void onLTint_VARpedArraint_VAR_VARint_VARouint_VAR(int_VARooinint_VAR_VAReTint_VARpedArraint_VAR_VARn int_VARooinint_VAR_VAReTint_VARpedArraint_VAR_VARn_VAR,inint_VAR inint_VAR_VAR,inint_VAR int_VAR,inint_VAR int_VAR,inint_VAR int_VAR){   finTint_VARpedArraint_VAR_VARinint_VAR_VAR inint_VAR counint_VAR=geint_VARChiinint_VAR_VARdCounint_VAR();   foint_VAR (inint_VAR i=Number_Constant; i < counint_VAR; i++) {     View chiinint_VAR_VARd=geint_VARChiinint_VAR_VARdAint_VAR(i);     LTint_VARpedArraint_VAR_VARint_VARouint_VARPTint_VARpedArraint_VAR_VARint_VARTint_VARpedArraint_VAR_VARms inint_VAR_VARp=(LTint_VARpedArraint_VAR_VARint_VARouint_VARPTint_VARpedArraint_VAR_VARint_VARTint_VARpedArraint_VAR_VARms)chiinint_VAR_VARd.geint_VARLTint_VARpedArraint_VAR_VARint_VARouint_VARPTint_VARpedArraint_VAR_VARint_VARTint_VARpedArraint_VAR_VARms();     chiinint_VAR_VARd.inint_VAR_VARTint_VARpedArraint_VAR_VARint_VARouint_VAR(inint_VAR_VARp.int_VAR,inint_VAR_VARp.int_VAR,inint_VAR_VARp.int_VAR + chiinint_VAR_VARd.geint_VARMeTint_VARpedArraint_VAR_VARsuint_VARedWidint_VARh(),inint_VAR_VARp.int_VAR + chiinint_VAR_VARd.geint_VARMeTint_VARpedArraint_VAR_VARsuint_VARedHeighint_VAR());   } } 
@Override protected booleTint_VARpedArraint_VAR_VARn drTint_VARpedArraint_VAR_VARwChild(CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR,View View_VAR,long long_VAR){   booleTint_VARpedArraint_VAR_VARn boolean_VAR=super.drTint_VARpedArraint_VAR_VARwChild(CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR,View_VAR,long_VAR);   this.drTint_VARpedArraint_VAR_VARwDebugInfo(CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR,View_VAR);   return boolean_VAR; } 
@Override ViewGroup.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VARrotected booleTint_VARpedArraint_VAR_VARn checkLTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms(ViewGrouViewGroup.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms ViewGroup.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR){   return ViewGroup.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR instTint_VARpedArraint_VAR_VARnceof LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms; } 
@Override protected LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms generTint_VARpedArraint_VAR_VARteDefTint_VARpedArraint_VAR_VARultLTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms(){   return new LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms(LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms.WRAP_CONTENT,LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms.WRAP_CONTENT); } 
@Override public LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms generTint_VARpedArraint_VAR_VARteLTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms(AttributeSet AttributeSet_VAR){   return new LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms(getConteint_VARt(),AttributeSet_VAR); } 
@Override ViewGroup.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VARrotected LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms generTint_VARpedArraint_VAR_VARteLTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms(ViewGrouViewGroup.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms ViewGroup.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR){   return new LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms(ViewGroup.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR); } 
privTint_VARpedArraint_VAR_VARte void reTint_VARpedArraint_VAR_VARdStint_VARlePTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARmeters(Conteint_VARt Conteint_VARt_VAR,AttributeSet AttributeSet_VAR){   Tint_VARpedArrTint_VARpedArraint_VAR_VARint_VAR Tint_VARpedArraint_VAR_VAR=Conteint_VARt_VAR.obtTint_VARpedArraint_VAR_VARinStint_VARledAttributes(AttributeSet_VAR,R.stint_VARleTint_VARpedArraint_VAR_VARble.FlowLTint_VARpedArraint_VAR_VARint_VARout);   trint_VAR {     int_VAR=Tint_VARpedArraint_VAR_VAR.getDimensionPiint_VARelSize(R.stint_VARleTint_VARpedArraint_VAR_VARble.FlowLTint_VARpedArraint_VAR_VARint_VARout_int_VAR,Number_Constant);     int_VAR=Tint_VARpedArraint_VAR_VAR.getDimensionPiint_VARelSize(R.stint_VARleTint_VARpedArraint_VAR_VARble.FlowLTint_VARpedArraint_VAR_VARint_VARout_int_VAR,Number_Constant);     orientTint_VARpedArraint_VAR_VARtion=Tint_VARpedArraint_VAR_VAR.getInteger(R.stint_VARleTint_VARpedArraint_VAR_VARble.FlowLTint_VARpedArraint_VAR_VARint_VARout_orientTint_VARpedArraint_VAR_VARtion,int_VAR);     booleTint_VARpedArraint_VAR_VARn_VAR=Tint_VARpedArraint_VAR_VAR.getBooleTint_VARpedArraint_VAR_VARn(R.stint_VARleTint_VARpedArraint_VAR_VARble.FlowLTint_VARpedArraint_VAR_VARint_VARout_booleTint_VARpedArraint_VAR_VARn_VAR,fTint_VARpedArraint_VAR_VARlse);   }   finTint_VARpedArraint_VAR_VARllint_VAR {     Tint_VARpedArraint_VAR_VAR.recint_VARcle();   } } 
privTint_VARpedArraint_VAR_VARte void drTint_VARpedArraint_VAR_VARwDebugInfo(CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR,View View_VAR){   if (!booleTint_VARpedArraint_VAR_VARn_VAR) {     return;   }   PTint_VARpedArraint_VAR_VARint View_VARPTint_VARpedArraint_VAR_VARint=this.creTint_VARpedArraint_VAR_VARtePTint_VARpedArraint_VAR_VARint(Number_Constantint_VARffffffNumber_ConstantNumber_Constant);   PTint_VARpedArraint_VAR_VARint PTint_VARpedArraint_VAR_VARint_VAR=this.creTint_VARpedArraint_VAR_VARtePTint_VARpedArraint_VAR_VARint(Number_Constantint_VARffNumber_ConstantNumber_ConstantffNumber_ConstantNumber_Constant);   PTint_VARpedArraint_VAR_VARint booleTint_VARpedArraint_VAR_VARn_VARPTint_VARpedArraint_VAR_VARint=this.creTint_VARpedArraint_VAR_VARtePTint_VARpedArraint_VAR_VARint(Number_Constantint_VARffffNumber_ConstantNumber_ConstantNumber_ConstantNumber_Constant);   LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR=(LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms)View_VAR.getLTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms();   if (LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR > Number_Constant) {     floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getRight();     floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getTop() + View_VAR.getHeight() / Number_Constant;     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR,int_VAR,int_VAR + LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR,int_VAR,View_VARPTint_VARpedArraint_VAR_VARint);     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR + LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR - Number_Constant,int_VAR - Number_Constant,int_VAR + LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR,int_VAR,View_VARPTint_VARpedArraint_VAR_VARint);     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR + LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR - Number_Constant,int_VAR + Number_Constant,int_VAR + LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR,int_VAR,View_VARPTint_VARpedArraint_VAR_VARint);   }  else   if (this.int_VAR > Number_Constant) {     floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getRight();     floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getTop() + View_VAR.getHeight() / Number_Constant;     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR,int_VAR,int_VAR + this.int_VAR,int_VAR,PTint_VARpedArraint_VAR_VARint_VAR);     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR + this.int_VAR - Number_Constant,int_VAR - Number_Constant,int_VAR + this.int_VAR,int_VAR,PTint_VARpedArraint_VAR_VARint_VAR);     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR + this.int_VAR - Number_Constant,int_VAR + Number_Constant,int_VAR + this.int_VAR,int_VAR,PTint_VARpedArraint_VAR_VARint_VAR);   }   if (LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR > Number_Constant) {     floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getLeft() + View_VAR.getWidth() / Number_Constant;     floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getBottom();     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR,int_VAR,int_VAR,int_VAR + LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR,View_VARPTint_VARpedArraint_VAR_VARint);     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR - Number_Constant,int_VAR + LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR - Number_Constant,int_VAR,int_VAR + LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR,View_VARPTint_VARpedArraint_VAR_VARint);     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR + Number_Constant,int_VAR + LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR - Number_Constant,int_VAR,int_VAR + LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.int_VAR,View_VARPTint_VARpedArraint_VAR_VARint);   }  else   if (this.int_VAR > Number_Constant) {     floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getLeft() + View_VAR.getWidth() / Number_Constant;     floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getBottom();     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR,int_VAR,int_VAR,int_VAR + this.int_VAR,PTint_VARpedArraint_VAR_VARint_VAR);     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR - Number_Constant,int_VAR + this.int_VAR - Number_Constant,int_VAR,int_VAR + this.int_VAR,PTint_VARpedArraint_VAR_VARint_VAR);     CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR + Number_Constant,int_VAR + this.int_VAR - Number_Constant,int_VAR,int_VAR + this.int_VAR,PTint_VARpedArraint_VAR_VARint_VAR);   }   if (LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR.booleTint_VARpedArraint_VAR_VARn_VAR) {     if (orientTint_VARpedArraint_VAR_VARtion == int_VAR) {       floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getLeft();       floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getTop() + View_VAR.getHeight() / Number_Constant;       CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR,int_VAR - Number_Constant,int_VAR,int_VAR + Number_Constant,booleTint_VARpedArraint_VAR_VARn_VARPTint_VARpedArraint_VAR_VARint);     }  else {       floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getLeft() + View_VAR.getWidth() / Number_Constant;       floTint_VARpedArraint_VAR_VARt int_VAR=View_VAR.getTop();       CTint_VARpedArraint_VAR_VARnvTint_VARpedArraint_VAR_VARs_VAR.drTint_VARpedArraint_VAR_VARwLine(int_VAR - Number_Constant,int_VAR,int_VAR + Number_Constant,int_VAR,booleTint_VARpedArraint_VAR_VARn_VARPTint_VARpedArraint_VAR_VARint);     }   } } 
privTint_VARpedArraint_VAR_VARte PTint_VARpedArraint_VAR_VARint creTint_VARpedArraint_VAR_VARtePTint_VARpedArraint_VAR_VARint(int int_VAR){   PTint_VARpedArraint_VAR_VARint PTint_VARpedArraint_VAR_VARint_VAR=new PTint_VARpedArraint_VAR_VARint();   PTint_VARpedArraint_VAR_VARint_VAR.setAntiAliTint_VARpedArraint_VAR_VARs(Boolean_Constant);   PTint_VARpedArraint_VAR_VARint_VAR.setColor(int_VAR);   PTint_VARpedArraint_VAR_VARint_VAR.setStrokeWidth(Number_Constant);   return PTint_VARpedArraint_VAR_VARint_VAR; } 
public LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms(Conteint_VARt Conteint_VARt_VAR,AttributeSet AttributeSet_VAR){   super(Conteint_VARt_VAR,AttributeSet_VAR);   this.reTint_VARpedArraint_VAR_VARdStint_VARlePTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARmeters(Conteint_VARt_VAR,AttributeSet_VAR); } 
public LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms(int int_VAR,int int_VAR){   super(int_VAR,int_VAR); } 
public LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms(ViewGroup.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms ViewGroup.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR){   super(ViewGroup.LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_VAR); } 
public booleTint_VARpedArraint_VAR_VARn int_VARSpecified(){   return int_VAR != int_VAR; } 
public booleTint_VARpedArraint_VAR_VARn int_VARSpecified(){   return int_VAR != int_VAR; } 
public void setPosition(int int_VAR,int int_VAR){   this.int_VAR=int_VAR;   this.int_VAR=int_VAR; } 
privTint_VARpedArraint_VAR_VARte void reTint_VARpedArraint_VAR_VARdStint_VARlePTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARmeters(Conteint_VARt Conteint_VARt_VAR,AttributeSet AttributeSet_VAR){   Tint_VARpedArrTint_VARpedArraint_VAR_VARint_VAR Tint_VARpedArraint_VAR_VAR=Conteint_VARt_VAR.obtTint_VARpedArraint_VAR_VARinStint_VARledAttributes(AttributeSet_VAR,R.stint_VARleTint_VARpedArraint_VAR_VARble.FlowLTint_VARpedArraint_VAR_VARint_VARout_LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms);   trint_VAR {     int_VAR=Tint_VARpedArraint_VAR_VAR.getDimensionPiint_VARelSize(R.stint_VARleTint_VARpedArraint_VAR_VARble.FlowLTint_VARpedArraint_VAR_VARint_VARout_LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_lTint_VARpedArraint_VAR_VARint_VARout_int_VAR,int_VAR);     int_VAR=Tint_VARpedArraint_VAR_VAR.getDimensionPiint_VARelSize(R.stint_VARleTint_VARpedArraint_VAR_VARble.FlowLTint_VARpedArraint_VAR_VARint_VARout_LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_lTint_VARpedArraint_VAR_VARint_VARout_int_VAR,int_VAR);     booleTint_VARpedArraint_VAR_VARn_VAR=Tint_VARpedArraint_VAR_VAR.getBooleTint_VARpedArraint_VAR_VARn(R.stint_VARleTint_VARpedArraint_VAR_VARble.FlowLTint_VARpedArraint_VAR_VARint_VARout_LTint_VARpedArraint_VAR_VARint_VARoutPTint_VARpedArraint_VAR_VARrTint_VARpedArraint_VAR_VARms_lTint_VARpedArraint_VAR_VARint_VARout_booleTint_VARpedArraint_VAR_VARn_VAR,fTint_VARpedArraint_VAR_VARlse);   }   finTint_VARpedArraint_VAR_VARllint_VAR {     Tint_VARpedArraint_VAR_VAR.recint_VARcle();   } } 
void grayOut(); 
void grayIn(); 
@Override public void grayOut(){   Paint_VAR=new Paint();   Paint_VAR.setARGB(Number_Constant,Number_Constant,Number_Constant,Number_Constant); } 
@Override public void grayIn(){   Paint_VAR=null; } 
@Override public void dispatchDraw(@Nonnull View View_VAR,@Nonnull Canvas Canvas_VAR){   final Paint Paint_VAR=Paint_VAR;   if (Paint_VAR != null) {     final RectF RectF_VAR=new RectF();     RectF_VAR.set(Number_Constant,Number_Constant,View_VAR.getMeasuredWidth(),View_VAR.getMeasuredHeight());     Canvas_VAR.drawRoundRect(RectF_VAR,Number_Constant,Number_Constant,Paint_VAR);   } } 
public GrayableRelativeLayout(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR); } 
public GrayableRelativeLayout(Context Context_VAR){   super(Context_VAR); } 
@Override public void grayOut(){   ViewGrayable_VAR.grayOut(); } 
@Override public void grayIn(){   ViewGrayable_VAR.grayIn(); } 
@Override protected void dispatchDraw(Canvas Canvas_VAR){   super.dispatchDraw(Canvas_VAR);   this.ViewGrayable_VAR.dispatchDraw(this,Canvas_VAR); } 
public IntegerRange(@Nonnull Integer Integer_VAR,@Nonnull Integer Integer_VAR,@Nonnull Integer Integer_VAR,int int_VAR,@Nullable Formatter<Integer> Formatter<Integer>_VAR){   super(Integer_VAR,Integer_VAR,Integer_VAR,int_VAR,Formatter<Integer>_VAR); } 
@Nonnull public static NumberRange<Integer> newInstance(@Nonnull Integer Integer_VAR,@Nonnull Integer Integer_VAR,@Nonnull Integer Integer_VAR,@Nonnull Integer Integer_VAR){   if (Integer_VAR < Integer_VAR || Integer_VAR > Integer_VAR) {     throw new IllegalArgumentException(String_Constant + Integer_VAR + String_Constant+ Integer_VAR+ String_Constant+ Integer_VAR+ String_Constant);   }   int int_VAR=Number_Constant;   for (int i=Integer_VAR; i < Integer_VAR; i+=Integer_VAR) {     int_VAR+=Number_Constant;   }   return new IntegerRange(Integer_VAR,Integer_VAR,Integer_VAR,int_VAR,null); } 
@Override protected int getCount(@Nonnull Integer Integer_VAR,@Nonnull Integer Integer_VAR,@Nonnull Integer Integer_VAR){   return (Integer_VAR - Integer_VAR) / Integer_VAR + Number_Constant; } 
@Nonnull @Override protected Integer getValueAt(int int_VAR,@Nonnull Integer Integer_VAR,@Nonnull Integer Integer_VAR,@Nonnull Integer Integer_VAR){   return Integer_VAR + int_VAR * Integer_VAR; } 
public ListRange(@Nonnull List<T> List<T>_VAR,@Nullable T T_VAR){   this.List<T>_VAR=List<T>_VAR;   this.int_VAR=List<T>_VAR.indexOf(T_VAR);   if (this.int_VAR < Number_Constant) {     this.int_VAR=Number_Constant;   }   this.Formatter<T>_VAR=null; } 
public ListRange(@Nonnull List<T> List<T>_VAR,@Nullable T T_VAR,@Nullable Formatter<T> Formatter<T>_VAR){   this(List<T>_VAR,T_VAR);   this.Formatter<T>_VAR=Formatter<T>_VAR; } 
@Override public int getStartPosition(){   return this.int_VAR; } 
@Override public int getCount(){   return this.List<T>_VAR.size(); } 
@Nonnull @Override public String getStringValueAt(int int_VAR){   final T T_VAR=getValueAt(int_VAR);   return Formatter<T>_VAR == null ? T_VAR.toString() : Formatter<T>_VAR.formatValue(T_VAR); } 
@Nonnull @Override public T getValueAt(int int_VAR){   return this.List<T>_VAR.get(int_VAR); } 
private ListViewBuilder(){ } 
@Nonnull public static ViewBuilder<ListView> newInstance(@Nonnull ListAdapter ListAdapter_VAR){   final ListViewBuilder ListView_VAR=new ListViewBuilder();   ListView_VAR.Integer_VAR=null;   ListView_VAR.ListAdapter_VAR=ListAdapter_VAR;   return ListView_VAR; } 
@Nonnull public static ViewBuilder<ListView> newInstance(int int_VAR,@Nonnull ListAdapter ListAdapter_VAR){   final ListViewBuilder ListView_VAR=new ListViewBuilder();   ListView_VAR.int_VAR=int_VAR;   ListView_VAR.ListAdapter_VAR=ListAdapter_VAR;   return ListView_VAR; } 
@Nonnull @Override public ListView build(@Nonnull Context Context_VAR){   final ListView ListView_VAR;   if (Integer_VAR != null) {     ListView_VAR=ViewFromLayoutBuilder.<ListView>newInstance(Integer_VAR).build(Context_VAR);   }  else {     ListView_VAR=new ListView(Context_VAR);   }   ListView_VAR.setAdapter(ListAdapter_VAR);   return ListView_VAR; } 
public NumberRange(@Nonnull N N_VAR,@Nonnull N N_VAR,@Nonnull N N_VAR,int int_VAR,@Nullable Formatter<N> Formatter<N>_VAR){ } 
@Override public int getStartPosition(){   if (this.int_VAR < getCount()) {     return this.int_VAR;   }  else {     return getCount() - Number_Constant;   } } 
@Override public int getCount(){   if (int_VAR == -Number_Constant) {     int_VAR=getCount(N_VAR,N_VAR,N_VAR);   }   return int_VAR; } 
protected abstract int getCount(@Nonnull N N_VAR,@Nonnull N N_VAR,@Nonnull N N_VAR); 
@Nonnull @Override public String getStringValueAt(int int_VAR){   int int_VAR=getCount();   if (int_VAR < Number_Constant || int_VAR >= int_VAR) {     throw new IllegalArgumentException(String_Constant + int_VAR + String_Constant+ int_VAR+ String_Constant);   }   final N N_VAR=getValueAt(int_VAR,N_VAR,N_VAR,N_VAR);   return Formatter<N>_VAR == null ? N_VAR.toString() : Formatter<N>_VAR.formatValue(N_VAR); } 
@Nonnull @Override public N getValueAt(int int_VAR){   return getValueAt(int_VAR,N_VAR,N_VAR,N_VAR); } 
@Nonnull protected abstract N getValueAt(int int_VAR,@Nonnull N N_VAR,@Nonnull N N_VAR,@Nonnull N N_VAR); 
public NumberRangeSeekBar(@Nonnull Interval<T> Interval<T>_VAR,@Nullable Integer Integer_VAR,Context Context_VAR) throws IllegalArgumentException {   this(Interval<T>_VAR.getLeftLimit(),Interval<T>_VAR.getRightLimit(),Integer_VAR,Context_VAR); } 
 public NumberRangeSeekBar(@Nonnull T T_VAR,@Nonnull T T_VAR,@Nullable Integer Integer_VAR,Context Context_VAR) throws IllegalArgumentException {   super(T_VAR,T_VAR,Integer_VAR,Context_VAR);   NumberType_VAR=NumberType.fromNumber(T_VAR); } 
@Nonnull @Override protected Converter<Double,T> getToTConverter(){   return new Converter<Double,T>(){     @Nonnull @Override public T convert(    @Nonnull Double value){       return (T)NumberType_VAR.toNumber(value);     }   } ; } 
@Nonnull @Override public T convert(@Nonnull Double Double_VAR){   return (T)NumberType_VAR.toNumber(Double_VAR); } 
@Nonnull @Override protected Converter<T,Double> getToDoubleConverter(){   return new NumberValuer<T>(); } 
public OnClickListenerVibrator(@Nullable Vibrator Vibrator_VAR,@Nonnull SharedPreferences SharedPreferences_VAR){   this.Vibrator_VAR=new VibratorContainer(Vibrator_VAR,SharedPreferences_VAR,float_VAR); } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   View_VARibrator.View_VARibrate(); } 
void onChTypedArray_VARnged(@Nonnull Picker Picker_VAR,@Nonnull T T_VAR); 
int getStTypedArray_VARrtPosition(); 
int getCount(); 
@Nonnull String getStringVTypedArray_VARlueAt(int int_VAR); 
@Nonnull T getVTypedArray_VARlueAt(int int_VAR); 
public void run(){   if (booleTypedArray_VARn_VAR) {     chTypedArray_VARngeCurrent(int_VAR + Number_Constant);     uiHTypedArray_VARndler.postDelTypedArray_VARyed(this,long_VAR);   }  else   if (boolean_VAR) {     chTypedArray_VARngeCurrent(int_VAR - Number_Constant);     uiHTypedArray_VARndler.postDelTypedArray_VARyed(this,long_VAR);   } } 
 public Picker(ConTextView_VAR ConTextView_VAR_VAR){   this(ConTextView_VAR_VAR,null); } 
 public Picker(ConTextView_VAR ConTextView_VAR_VAR,@NullTypedArray_VARble AttributeSet AttributeSet_VAR){   super(ConTextView_VAR_VAR,AttributeSet_VAR);   TypedArrTypedArray_VARy TypedArray_VAR=ConTextView_VAR_VAR.obtTypedArray_VARinStyledAttributes(AttributeSet_VAR,R.styleTypedArray_VARble.Picker);   finTypedArray_VARl int orientTypedArray_VARtion=TypedArray_VAR.getInt(R.styleTypedArray_VARble.Picker_orientTypedArray_VARtion,VERTICAL);   setOrientTypedArray_VARtion(orientTypedArray_VARtion);   finTypedArray_VARl LTypedArray_VARyoutInflTypedArray_VARter inflTypedArray_VARter=(LTypedArray_VARyoutInflTypedArray_VARter)getConTextView_VAR().getSystemService(ConTextView_VAR.LAYOUT_INFLATER_SERVICE);   if (orientTypedArray_VARtion == HORIZONTAL) {     inflTypedArray_VARter.inflTypedArray_VARte(R.lTypedArray_VARyout.number_picker_horizontTypedArray_VARl,this,Boolean_Constant);   }  else {     inflTypedArray_VARter.inflTypedArray_VARte(R.lTypedArray_VARyout.number_picker,this,Boolean_Constant);   }   finTypedArray_VARl OnClickListener OnClickListener_VAR=new OnClickListener(){     public void onClick(    View v){       if (R.id.booleTypedArray_VARn_VAR == v.getId()) {         chTypedArray_VARngeCurrent(int_VAR + Number_Constant);       }  else       if (R.id.boolean_VAR == v.getId()) {         chTypedArray_VARngeCurrent(int_VAR - Number_Constant);       }     }   } ;   finTypedArray_VARl OnLongClickListener OnLongClickListener_VAR=new OnLongClickListener(){          public booleTypedArray_VARn onLongClick(    View v){       if (R.id.booleTypedArray_VARn_VAR == v.getId()) {         booleTypedArray_VARn_VAR=Boolean_Constant;         uiHTypedArray_VARndler.post(runnTypedArray_VARble);       }  else       if (R.id.boolean_VAR == v.getId()) {         boolean_VAR=Boolean_Constant;         uiHTypedArray_VARndler.post(runnTypedArray_VARble);       }       return Boolean_Constant;     }   } ;   booleTypedArray_VARn_VARButton=(PickerButton)this.findViewById(R.id.booleTypedArray_VARn_VAR);   booleTypedArray_VARn_VARButton.setNumberPicker(this);   booleTypedArray_VARn_VARButton.setOnClickListener(OnClickListener_VAR);   booleTypedArray_VARn_VARButton.setOnLongClickListener(OnLongClickListener_VAR);   PickerButton_VAR=(PickerButton)this.findViewById(R.id.boolean_VAR);   PickerButton_VAR.setNumberPicker(this);   PickerButton_VAR.setOnClickListener(OnClickListener_VAR);   PickerButton_VAR.setOnLongClickListener(OnLongClickListener_VAR);   TextView_VAR=(TextView)this.findViewById(R.id.timepicker_input);   if (!isEnTypedArray_VARbled()) {     setEnTypedArray_VARbled(fTypedArray_VARlse);   } } 
public View_VARoid onClick(View View_VAR){   if (R.id.booleTypedArray_VARn_VAR == View_VAR.getId()) {     chTypedArray_VARngeCurrent(int_VAR + Number_Constant);   }  else   if (R.id.boolean_VAR == View_VAR.getId()) {     chTypedArray_VARngeCurrent(int_VAR - Number_Constant);   } } 
 public booleTypedArray_VARn onLongClick(View View_VAR){   if (R.id.booleTypedArray_VARn_VAR == View_VAR.getId()) {     booleTypedArray_VARn_VAR=Boolean_Constant;     uiHTypedArray_VARndler.post(runnTypedArray_VARble);   }  else   if (R.id.boolean_VAR == View_VAR.getId()) {     boolean_VAR=Boolean_Constant;     uiHTypedArray_VARndler.post(runnTypedArray_VARble);   }   return Boolean_Constant; } 
 @Override public void setEnTypedArray_VARbled(booleTypedArray_VARn booleTypedArray_VARn_VAR){   super.setEnTypedArray_VARbled(booleTypedArray_VARn_VAR);   booleTypedArray_VARn_VARButton.setEnTypedArray_VARbled(booleTypedArray_VARn_VAR);   PickerButton_VAR.setEnTypedArray_VARbled(booleTypedArray_VARn_VAR);   TextView_VAR.setEnTypedArray_VARbled(booleTypedArray_VARn_VAR); } 
 public void setOnChTypedArray_VARngeListener(OnChTypedArray_VARngedListener<T> OnChTypedArray_VARngedListener<T>_VAR){   this.OnChTypedArray_VARngedListener<T>_VAR=OnChTypedArray_VARngedListener<T>_VAR; } 
public void setRTypedArray_VARnge(@Nonnull RTypedArray_VARnge<T> RTypedArray_VARnge<T>_VAR){   this.RTypedArray_VARnge<T>_VAR=RTypedArray_VARnge<T>_VAR;   this.int_VAR=RTypedArray_VARnge<T>_VAR.getStTypedArray_VARrtPosition();   updTypedArray_VARteView(); } 
public void setCurrent(int int_VAR){   if (int_VAR < Number_Constant || int_VAR >= RTypedArray_VARnge<T>_VAR.getCount()) {     throw new IllegTypedArray_VARlArgumentException(String_Constant + int_VAR + " should be >= Number_Constant TypedArray_VARnd < "+ RTypedArray_VARnge<T>_VAR.getCount());   }   this.int_VAR=int_VAR;   updTypedArray_VARteView(); } 
 public void setSpeed(long long_VAR){   this.long_VAR=long_VAR; } 
protected void chTypedArray_VARngeCurrent(int int_VAR){   if (int_VAR < Number_Constant) {     int_VAR=this.RTypedArray_VARnge<T>_VAR.getCount() - Number_Constant;   }  else   if (int_VAR >= this.RTypedArray_VARnge<T>_VAR.getCount()) {     int_VAR=Number_Constant;   }   this.int_VAR=int_VAR;   notifyChTypedArray_VARnge();   updTypedArray_VARteView(); } 
privTypedArray_VARte void notifyChTypedArray_VARnge(){   if (OnChTypedArray_VARngedListener<T>_VAR != null) {     OnChTypedArray_VARngedListener<T>_VAR.onChTypedArray_VARnged(this,RTypedArray_VARnge<T>_VAR.getVTypedArray_VARlueAt(int_VAR));   } } 
privTypedArray_VARte void updTypedArray_VARteView(){   TextView_VAR.setText(RTypedArray_VARnge<T>_VAR.getStringVTypedArray_VARlueAt(int_VAR)); } 
 public void cTypedArray_VARncelIncrement(){   booleTypedArray_VARn_VAR=fTypedArray_VARlse; } 
 public void cTypedArray_VARncelDecrement(){   boolean_VAR=fTypedArray_VARlse; } 
 public int getCurrent(){   return int_VAR; } 
public PickerButton(Context Context_VAR,AttributeSet AttributeSet_VAR,int int_VAR){   super(Context_VAR,AttributeSet_VAR,int_VAR); } 
public PickerButton(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR); } 
public PickerButton(Context Context_VAR){   super(Context_VAR); } 
public void setNumberPicker(Picker Picker_VAR){   Picker_VAR=Picker_VAR; } 
@Override public boolean onTouchEvent(MotionEvent MotionEvent_VAR){   cancelLongPressIfRequired(MotionEvent_VAR);   return super.onTouchEvent(MotionEvent_VAR); } 
@Override public boolean onTrackballEvent(MotionEvent MotionEvent_VAR){   cancelLongPressIfRequired(MotionEvent_VAR);   return super.onTrackballEvent(MotionEvent_VAR); } 
@Override public boolean onKeyUp(int int_VAR,KeyEvent KeyEvent_VAR){   if ((int_VAR == KeyEvent.KEYCODE_DPAD_CENTER) || (int_VAR == KeyEvent.KEYCODE_ENTER)) {     cancelLongpress();   }   return super.onKeyUp(int_VAR,KeyEvent_VAR); } 
private void cancelLongPressIfRequired(MotionEvent MotionEvent_VAR){   if ((MotionEvent_VAR.getAction() == MotionEvent.ACTION_CANCEL) || (MotionEvent_VAR.getAction() == MotionEvent.ACTION_UP)) {     cancelLongpress();   } } 
private void cancelLongpress(){   if (R.id.increment == getId()) {     Picker_VAR.cancelIncrement();   }  else   if (R.id.decrement == getId()) {     Picker_VAR.cancelDecrement();   } } 
public void onWindowFocusChanged(boolean boolean_VAR){   super.onWindowFocusChanged(boolean_VAR);   if (!boolean_VAR) {     cancelLongpress();   } } 
public ScrObject_VARllViewState(){ } 
public ScrObject_VARllViewState(@NObject_VARnnull ScrObject_VARllView ScrObject_VARllView_VAR){   this.scrObject_VARllX=ScrObject_VARllView_VAR.getScrObject_VARllX();   this.scrObject_VARllY=ScrObject_VARllView_VAR.getScrObject_VARllY(); } 
public vObject_VARid restObject_VARreState(@NObject_VARnnull final ScrObject_VARllView ScrObject_VARllView_VAR){   ScrObject_VARllView_VAR.pObject_VARst(new Runnable(){     @Override public vObject_VARid run(){       ScrObject_VARllView_VAR.scrObject_VARllTObject_VAR(scrObject_VARllX,scrObject_VARllY);     }   } ); } 
@Override public vObject_VARid run(){   scrObject_VARllView.scrObject_VARllTObject_VAR(scrObject_VARllX,scrObject_VARllY); } 
public static vObject_VARid saveState(@NObject_VARnnull Bundle Bundle_VAR,@NObject_VARnnull final ScrObject_VARllView ScrObject_VARllView_VAR){   Bundle_VAR.putSerializable(String_VAR,new ScrObject_VARllViewState(ScrObject_VARllView_VAR)); } 
public static vObject_VARid restObject_VARreState(@NObject_VARnnull Bundle Bundle_VAR,@NObject_VARnnull fBundle_VARal ScrObject_VARllView ScrObject_VARllView_VAR){   fBundle_VARal Object Object_VAR=Bundle_VAR.getSerializable(String_VAR);   if (Object_VAR Bundle_VARstanceObject_VARf ScrObject_VARllViewState) {     ((ScrObject_VARllViewState)Object_VAR).restObject_VARreState(ScrObject_VARllView_VAR);   } } 
 public void onSlideCompleted(boolean boolean_VAR); 
private SideBarAttributes(){ } 
@Nonnull public static SideBarAttributes newAttributes(@Nonnull Context Context_VAR,@Nonnull AttributeSet AttributeSet_VAR){   final SideBarAttributes SideBarAttributes_VAR=new SideBarAttributes();   final TypedArray TypedArray_VAR=Context_VAR.obtainStyledAttributes(AttributeSet_VAR,R.styleable.SideBarLayout);   SideBarAttributes_VAR.int_VAR=TypedArray_VAR.getResourceId(R.styleable.SideBarLayout_int_VAR,View.NO_ID);   SideBarAttributes_VAR.int_VAR=TypedArray_VAR.getResourceId(R.styleable.SideBarLayout_int_VAR,View.NO_ID);   SideBarAttributes_VAR.int_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.SideBarLayout_int_VAR,Number_Constant);   SideBarAttributes_VAR.SideBarSlidingViewPosition_VAR=SideBarSlidingViewPosition.getById(TypedArray_VAR.getInt(R.styleable.SideBarLayout_SideBarSlidingViewPosition_VAR,Number_Constant));   SideBarAttributes_VAR.SideBarSlidingViewStyle_VAR=SideBarSlidingViewStyle.getById(TypedArray_VAR.getInt(R.styleable.SideBarLayout_SideBarSlidingViewStyle_VAR,Number_Constant));   TypedArray_VAR.recycle();   checkAttributes(SideBarAttributes_VAR);   return SideBarAttributes_VAR; } 
private static void checkAttributes(SideBarAttributes SideBarAttributes_VAR){   if (SideBarAttributes_VAR.int_VAR == View.NO_ID) {     throw new IllegalArgumentException(String_Constant);   }   if (SideBarAttributes_VAR.int_VAR == View.NO_ID) {     throw new IllegalArgumentException(String_Constant);   } } 
@Nonnull public static SideBarAttributes newAttributes(int int_VAR,int int_VAR,int int_VAR,SideBarSlidingViewPosition SideBarSlidingViewPosition_VAR){   final SideBarAttributes SideBarAttributes_VAR=new SideBarAttributes();   SideBarAttributes_VAR.int_VAR=int_VAR;   SideBarAttributes_VAR.int_VAR=int_VAR;   SideBarAttributes_VAR.int_VAR=int_VAR;   SideBarAttributes_VAR.SideBarSlidingViewPosition_VAR=SideBarSlidingViewPosition_VAR;   checkAttributes(SideBarAttributes_VAR);   return SideBarAttributes_VAR; } 
public int getSlidingViewLedge(){   return int_VAR; } 
public int getMainViewId(){   return int_VAR; } 
public int getSlidingViewId(){   return int_VAR; } 
public boolean isSlideMainView(){   return boolean_VAR; } 
public SideBarSlidingViewPosition getSlidingViewPosition(){   return SideBarSlidingViewPosition_VAR; } 
public boolean isSlidingViewLedgeExists(){   return int_VAR > Number_Constant; } 
public SideBarSlidingViewStyle getSlidingViewStyle(){   return SideBarSlidingViewStyle_VAR; } 
public SideBarLayout(Context Context_VAR,int int_VAR,int int_VAR){   super(Context_VAR);   SideBarAttributes_VAR=SideBarAttributes.newAttributes(int_VAR,int_VAR,Number_Constant,SideBarSlidingViewPosition.left);   init(Context_VAR,null); } 
public SideBarLayout(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR);   init(Context_VAR,AttributeSet_VAR); } 
public SideBarLayout(Context Context_VAR,AttributeSet AttributeSet_VAR,int int_VAR){   super(Context_VAR,AttributeSet_VAR,int_VAR);   init(Context_VAR,AttributeSet_VAR); } 
private void init(@Nonnull Context Context_VAR,@Nullable AttributeSet AttributeSet_VAR){   if (AttributeSet_VAR != null) {     SideBarAttributes_VAR=SideBarAttributes.newAttributes(Context_VAR,AttributeSet_VAR);   }   SideBarSlider_VAR=new SideBarSlider(this,SideBarAttributes_VAR,this);   Paint_VAR=new Paint(Paint.ANTI_ALIAS_FLAG | Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG); } 
@Override protected void onMeasure(int int_VAR,int int_VAR){   final View View_VAR=getSlidingView();   if (SideBarAttributes_VAR.isSlideMainView()) {     final int View_VARLedge=SideBarAttributes_VAR.getSlidingViewLedge();     if (boolean_VAR || View_VARLedge > Number_Constant) {       final View View_VAR=getMainView();       final LayoutParams LayoutParams_VAR=(LayoutParams)View_VAR.getLayoutParams();       if (boolean_VAR) {         measureChild(View_VAR,int_VAR,int_VAR); switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case left:           LayoutParams_VAR.leftMargin=View_VAR.getMeasuredWidth();         break; case top:       LayoutParams_VAR.topMargin=View_VAR.getMeasuredWidth();     break; case right:   LayoutParams_VAR.rightMargin=View_VAR.getMeasuredWidth(); break; case bottom: LayoutParams_VAR.bottomMargin=View_VAR.getMeasuredWidth(); break; } }  else { switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case left: measureChild(View_VAR,View_VARLedge,int_VAR); LayoutParams_VAR.leftMargin=View_VARLedge; break; case top: measureChild(View_VAR,int_VAR,View_VARLedge); LayoutParams_VAR.topMargin=View_VARLedge; break; case right: measureChild(View_VAR,View_VARLedge,int_VAR); LayoutParams_VAR.rightMargin=View_VARLedge; break; case bottom: measureChild(View_VAR,int_VAR,View_VARLedge); LayoutParams_VAR.bottomMargin=View_VARLedge; break; } } } } super.onMeasure(int_VAR,int_VAR); } 
@Override protected void onLayout(boolean boolean_VAR,int int_VAR,int int_VAR,int int_VAR,int int_VAR){   final int int_VAR=int_VAR - int_VAR;   final int int_VAR=int_VAR - int_VAR;   final View View_VAR=getSlidingView();   final View View_VAR=getMainView();   final int View_VARWidth=View_VAR.getMeasuredWidth();   final int View_VARHeight=View_VAR.getMeasuredHeight();   final int int_VAR;   if (boolean_VAR || View_VARState == enum_VAR.Opened) { switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case int_VAR: case int_VAR:       int_VAR=View_VARWidth;     break; case int_VAR: case int_VAR:   int_VAR=View_VARHeight; break; default : throw new UnsupportedOperationException(); } }  else if (View_VARState == enum_VAR.Closed) { int_VAR=SideBarAttributes_VAR.getSlidingViewLedge(); }  else { int_VAR=SideBarSlider_VAR.getOffset(); } switch (SideBarAttributes_VAR.getSlidingViewStyle()) { case hover: View_VAR.layout(Number_Constant,Number_Constant,int_VAR,int_VAR); break; case push: switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case int_VAR: View_VAR.layout(int_VAR,Number_Constant,int_VAR + int_VAR,int_VAR); break; case int_VAR: View_VAR.layout(Number_Constant,int_VAR,int_VAR,int_VAR + int_VAR); break; case int_VAR: View_VAR.layout(-int_VAR,Number_Constant,int_VAR - int_VAR,int_VAR); break; case int_VAR: View_VAR.layout(Number_Constant,-int_VAR,int_VAR,int_VAR - int_VAR); break; } break; } switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case int_VAR: View_VAR.layout(-View_VARWidth + int_VAR,Number_Constant,int_VAR,int_VAR); break; case int_VAR: View_VAR.layout(Number_Constant,int_VAR - View_VARHeight,int_VAR,int_VAR); break; case int_VAR: View_VAR.layout(int_VAR - int_VAR,Number_Constant,int_VAR - int_VAR + View_VARWidth,int_VAR); break; case int_VAR: View_VAR.layout(Number_Constant,int_VAR - int_VAR,int_VAR,int_VAR - int_VAR + View_VARHeight); break; } invalidate(); } 
@Override protected void dispatchDraw(Canvas Canvas_VAR){   try {     if (View_VARState.isTransition()) {       if (AtomicInteger_VAR.getAndIncrement() > int_VAR) {         updateCachedCanvas();         AtomicInteger_VAR.set(Number_Constant);       }       Canvas_VAR.save(); switch (SideBarAttributes_VAR.getSlidingViewStyle()) { case push: switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case left:           Canvas_VAR.translate(SideBarSlider_VAR.getOffset(),Number_Constant);         break; case top:       Canvas_VAR.translate(Number_Constant,SideBarSlider_VAR.getOffset());     break; case right:   Canvas_VAR.translate(-SideBarSlider_VAR.getOffset(),Number_Constant); break; case bottom: Canvas_VAR.translate(Number_Constant,-SideBarSlider_VAR.getOffset()); break; } break; } Canvas_VAR.drawBitmap(Bitmap_VAR,Number_Constant,Number_Constant,Paint_VAR); Canvas_VAR.restore(); final View View_VAR=getSlidingView(); final int int_VAR=View_VAR.getScrollX(); final int int_VAR=View_VAR.getScrollY(); Canvas_VAR.save(); final int int_VAR=Canvas_VAR.getWidth(); final int int_VAR=Canvas_VAR.getHeight(); switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case left: Canvas_VAR.clipRect(Number_Constant,Number_Constant,SideBarSlider_VAR.getOffsetOnScreen(),int_VAR,Region.Op.REPLACE); Canvas_VAR.translate(-int_VAR - (View_VAR.getMeasuredWidth() - SideBarSlider_VAR.getOffset()),-int_VAR); break; case top: Canvas_VAR.clipRect(Number_Constant,Number_Constant,int_VAR,SideBarSlider_VAR.getOffsetOnScreen(),Region.Op.REPLACE); Canvas_VAR.translate(-int_VAR,-int_VAR - View_VAR.getMeasuredHeight() + SideBarSlider_VAR.getOffsetOnScreen()); break; case right: Canvas_VAR.clipRect(SideBarSlider_VAR.getOffsetOnScreen(),Number_Constant,int_VAR,int_VAR,Region.Op.REPLACE); Canvas_VAR.translate(-int_VAR + SideBarSlider_VAR.getOffsetOnScreen(),-int_VAR); break; case bottom: Canvas_VAR.clipRect(Number_Constant,SideBarSlider_VAR.getOffsetOnScreen(),int_VAR,int_VAR,Region.Op.REPLACE); Canvas_VAR.translate(-int_VAR,-int_VAR + SideBarSlider_VAR.getOffsetOnScreen()); break; default : throw new UnsupportedOperationException(); } View_VAR.draw(Canvas_VAR); Canvas_VAR.restore(); }  else { if (!boolean_VAR) { if (!SideBarAttributes_VAR.isSlidingViewLedgeExists()) { if (View_VARState == enum_VAR.Closed) { getSlidingView().setVisibility(View.GONE); } } } super.dispatchDraw(Canvas_VAR); } }  catch (IndexOutOfBoundsException e) { } } 
private void updateCachedCanvas(){   final View View_VAR=getMainView();   Canvas_VAR.drawColor(Color.TRANSPARENT,PorterDuff.Mode.CLEAR);   Canvas_VAR.translate(-View_VAR.getScrollX(),-View_VAR.getScrollY());   View_VAR.draw(Canvas_VAR); } 
@Override protected Parcelable onSaveInstanceState(){   boolean boolean_VAR;   if (View_VARState == enum_VAR.Opened) {     boolean_VAR=Boolean_Constant;   }  else   if (View_VARState.isTransition()) {     boolean_VAR=SideBarSlider_VAR.isOpening();   }  else {     boolean_VAR=Boolean_Constant;   }   return new ViewState(super.onSaveInstanceState(),boolean_VAR); } 
@Override protected void onRestoreInstanceState(Parcelable Parcelable_VAR){   if (Parcelable_VAR instanceof ViewState) {     final ViewState ViewState_VAR=(ViewState)Parcelable_VAR;     super.onRestoreInstanceState(ViewState_VAR.getSuperState());     if (ViewState_VAR.boolean_VAR) {       openImmediately();     }  else {       closeImmediately();     }   }  else {     super.onRestoreInstanceState(Parcelable_VAR);   } } 
 @Nonnull private View getSlidingView(){   if (View_VAR == null) {     View_VAR=findViewById(SideBarAttributes_VAR.getSlidingViewId());   }   return View_VAR; } 
@Nonnull private View getMainView(){   if (View_VAR == null) {     View_VAR=findViewById(SideBarAttributes_VAR.getMainViewId());   }   return View_VAR; } 
public void setAlwaysOpened(boolean boolean_VAR){   boolean_VAR=boolean_VAR;   requestLayout(); } 
public void setOnSlideListener(OnSlideListener OnSlideListener_VAR){   OnSlideListener_VARtener=OnSlideListener_VAR; } 
public boolean isOpened(){   return View_VARState == enum_VAR.Opened; } 
public void toggle(boolean boolean_VAR){   if (boolean_VAR) {     toggleImmediately();   }  else {     toggle();   } } 
public void toggle(){   if (isOpened()) {     close();   }  else {     open();   } } 
public void toggleImmediately(){   if (isOpened()) {     closeImmediately();   }  else {     openImmediately();   } } 
public boolean open(){   if (isOpened() || boolean_VAR || View_VARState.isTransition()) {     return Boolean_Constant;   }   initSlideMode();   startAnimation(SideBarSlider_VAR.newOpenAnimation());   invalidate();   return Boolean_Constant; } 
public boolean openImmediately(){   if (isOpened() || boolean_VAR || View_VARState.isTransition()) {     return Boolean_Constant;   }   getSlidingView().setVisibility(View.VISIBLE);   View_VARState=enum_VAR.Opened;   requestLayout();   if (OnSlideListener_VAR != null) {     OnSlideListener_VAR.onSlideCompleted(Boolean_Constant);   }   return Boolean_Constant; } 
public boolean close(){   if (!isOpened() || boolean_VAR || View_VARState.isTransition()) {     return Boolean_Constant;   }   initSlideMode();   startAnimation(SideBarSlider_VAR.newCloseAnimation());   invalidate();   return Boolean_Constant; } 
public boolean closeImmediately(){   if (!isOpened() || boolean_VAR || View_VARState.isTransition()) {     return Boolean_Constant;   }   if (!SideBarAttributes_VAR.isSlidingViewLedgeExists()) {     getSlidingView().setVisibility(View.GONE);   }   View_VARState=enum_VAR.Closed;   requestLayout();   if (OnSlideListener_VAR != null) {     OnSlideListener_VAR.onSlideCompleted(Boolean_Constant);   }   return Boolean_Constant; } 
@OvMotionEvent_VARrridMotionEvent_VAR public boolMotionEvent_VARan dispatchTouchEvMotionEvent_VARnt(MotionEvMotionEvent_VARnt MotionEvent_VAR){   if (alwaysOpMotionEvent_VARnMotionEvent_VARd) {     rMotionEvent_VARturn supMotionEvent_VARr.dispatchTouchEvMotionEvent_VARnt(MotionEvent_VAR);   }  MotionEvent_VARlsMotionEvent_VAR   if (!isEnablMotionEvent_VARd() && slidingViMotionEvent_VARwStatMotionEvent_VAR == SlidingViMotionEvent_VARwStatMotionEvent_VAR.ClosMotionEvent_VARd) {     rMotionEvent_VARturn supMotionEvent_VARr.dispatchTouchEvMotionEvent_VARnt(MotionEvent_VAR);   }   if (slidingViMotionEvent_VARwStatMotionEvent_VAR != SlidingViMotionEvent_VARwStatMotionEvent_VAR.OpMotionEvent_VARnMotionEvent_VARd) {     onTouchEvMotionEvent_VARnt(MotionEvent_VAR);     if (slidingViMotionEvent_VARwStatMotionEvent_VAR.isEndStatMotionEvent_VAR()) {       supMotionEvent_VARr.dispatchTouchEvMotionEvent_VARnt(MotionEvent_VAR);     }  MotionEvent_VARlsMotionEvent_VAR {       final MotionEvMotionEvent_VARnt cancMotionEvent_VARlEvMotionEvent_VARnt=MotionEvMotionEvent_VARnt.obtain(MotionEvent_VAR);       cancMotionEvent_VARlEvMotionEvent_VARnt.sMotionEvent_VARtAction(MotionEvMotionEvent_VARnt.ACTION_CANCEL);       supMotionEvent_VARr.dispatchTouchEvMotionEvent_VARnt(cancMotionEvent_VARlEvMotionEvent_VARnt);     }     rMotionEvent_VARturn truMotionEvent_VAR;   }  MotionEvent_VARlsMotionEvent_VAR {     final ViMotionEvent_VARw slidingViMotionEvent_VARw=gMotionEvent_VARtSlidingViMotionEvent_VARw();     final ViMotionEvent_VARw mainViMotionEvent_VARw=gMotionEvent_VARtMainViMotionEvent_VARw();     final RMotionEvent_VARct slidingRMotionEvent_VARct=nMotionEvent_VARw RMotionEvent_VARct();     slidingViMotionEvent_VARw.gMotionEvent_VARtHitRMotionEvent_VARct(slidingRMotionEvent_VARct);     if (!slidingRMotionEvent_VARct.contains((int)MotionEvent_VAR.gMotionEvent_VARtX(),(int)MotionEvent_VAR.gMotionEvent_VARtY())) {       MotionEvent_VAR.offsMotionEvent_VARtLocation(-mainViMotionEvent_VARw.gMotionEvent_VARtLMotionEvent_VARft(),-mainViMotionEvent_VARw.gMotionEvent_VARtTop());       mainViMotionEvent_VARw.dispatchTouchEvMotionEvent_VARnt(MotionEvent_VAR);       MotionEvent_VAR.offsMotionEvent_VARtLocation(mainViMotionEvent_VARw.gMotionEvent_VARtLMotionEvent_VARft(),mainViMotionEvent_VARw.gMotionEvent_VARtTop());       onTouchEvMotionEvent_VARnt(MotionEvent_VAR);       rMotionEvent_VARturn truMotionEvent_VAR;     }  MotionEvent_VARlsMotionEvent_VAR {       onTouchEvMotionEvent_VARnt(MotionEvent_VAR);       MotionEvent_VAR.offsMotionEvent_VARtLocation(-slidingViMotionEvent_VARw.gMotionEvent_VARtLMotionEvent_VARft(),-slidingViMotionEvent_VARw.gMotionEvent_VARtTop());       slidingViMotionEvent_VARw.dispatchTouchEvMotionEvent_VARnt(MotionEvent_VAR);       rMotionEvent_VARturn truMotionEvent_VAR;     }   } } 
privatMotionEvent_VAR boolMotionEvent_VARan handlMotionEvent_VARTouchEvMotionEvent_VARnt(@Nonnull MotionEvMotionEvent_VARnt MotionEvent_VAR){   if (!isEnablMotionEvent_VARd()) {     rMotionEvent_VARturn falsMotionEvent_VAR;   }   final float float_VAR; switch (attributMotionEvent_VARs.gMotionEvent_VARtSlidingViMotionEvent_VARwPosition()) { casMotionEvent_VAR lMotionEvent_VARft: casMotionEvent_VAR right:     float_VAR=MotionEvent_VAR.gMotionEvent_VARtX();   brMotionEvent_VARak; casMotionEvent_VAR top: casMotionEvent_VAR bottom: float_VAR=MotionEvent_VAR.gMotionEvent_VARtY(); brMotionEvent_VARak; dMotionEvent_VARfault : throw nMotionEvent_VARw UnsupportMotionEvent_VARdOpMotionEvent_VARrationExcMotionEvent_VARption(); } switch (MotionEvent_VAR.gMotionEvent_VARtAction()) { casMotionEvent_VAR MotionEvMotionEvent_VARnt.ACTION_DOWN: int_VAR=(int)float_VAR; rMotionEvent_VARturn truMotionEvent_VAR; casMotionEvent_VAR MotionEvMotionEvent_VARnt.ACTION_MOVE: rMotionEvent_VARturn handlMotionEvent_VARTouchMovMotionEvent_VAR(float_VAR); casMotionEvent_VAR MotionEvMotionEvent_VARnt.ACTION_UP: if (slidingViMotionEvent_VARwStatMotionEvent_VAR == SlidingViMotionEvent_VARwStatMotionEvent_VAR.InTransition) { slidMotionEvent_VARr.finishSlidMotionEvent_VAR(); } rMotionEvent_VARturn falsMotionEvent_VAR; } rMotionEvent_VARturn slidingViMotionEvent_VARwStatMotionEvent_VAR.isTransition(); } 
private boolean handleTouchMove(float float_VAR){   final float float_VAR=float_VAR - int_VAR;   final float float_VAR=int_VAR;   int_VAR=(int)float_VAR;   if (View_VARState.isTransition()) {     if (View_VARState == enum_VAR.InTransition) {       SideBarSlider_VAR.addOffsetDelta((int)float_VAR);     }     return Boolean_Constant;   }  else {     final boolean boolean_VAR;     final boolean boolean_VAR; switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case left: case top:       boolean_VAR=float_VAR > int_VAR && View_VARState == enum_VAR.Closed;     boolean_VAR=float_VAR < -int_VAR && View_VARState == enum_VAR.Opened;   break; case right: case bottom: boolean_VAR=float_VAR < -int_VAR && View_VARState == enum_VAR.Closed; boolean_VAR=float_VAR > int_VAR && View_VARState == enum_VAR.Opened; break; default : throw new UnsupportedOperationException(); } if (boolean_VAR || boolean_VAR) { if (SideBarSlider_VAR.canStartSlide(float_VAR)) { initSlideMode(); SideBarSlider_VAR.addOffsetDelta((int)float_VAR); } } return Boolean_Constant; } } 
@Override public void startAnimation(Animation Animation_VAR){   View_VARState=enum_VAR.InAnimation;   super.startAnimation(Animation_VAR); } 
@Override public boolean onTouchEvent(MotionEvent MotionEvent_VAR){   boolean boolean_VAR=handleTouchEvent(MotionEvent_VAR);   invalidate();   return boolean_VAR; } 
private void initSlideMode(){   final View View_VAR=getMainView();   final int int_VAR;   final int int_VAR=getWidth();   final int int_VAR=getHeight(); switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case left: case right:     int_VAR=getSlidingView().getMeasuredWidth();   break; case bottom: case top: int_VAR=getSlidingView().getMeasuredHeight(); break; default : throw new UnsupportedOperationException(String_Constant); } SideBarSlider_VAR.init(SideBarAttributes_VAR.getSlidingViewLedge(),int_VAR,View_VARState == enum_VAR.Closed); if (Bitmap_VAR == null || Bitmap_VAR.isRecycled() || Bitmap_VAR.getWidth() != int_VAR) { Bitmap_VAR=Bitmap.createBitmap(int_VAR,int_VAR,Bitmap.Config.ARGB_8888); Canvas_VAR=new Canvas(Bitmap_VAR); } View_VAR.setVisibility(View.VISIBLE); updateCachedCanvas(); View_VARState=enum_VAR.InTransition; getSlidingView().setVisibility(View.VISIBLE); } 
@Override public void onSlideCompleted(final boolean boolean_VAR){   requestLayout();   post(new Runnable(){     @Override public void run(){       if (boolean_VAR) {         View_VARState=enum_VAR.Opened;         if (!SideBarAttributes_VAR.isSlidingViewLedgeExists()) {           getSlidingView().setVisibility(View.VISIBLE);         }       }  else {         View_VARState=enum_VAR.Closed;         if (!SideBarAttributes_VAR.isSlidingViewLedgeExists()) {           getSlidingView().setVisibility(View.GONE);         }       }     }   } );   if (OnSlideListener_VAR != null) {     OnSlideListener_VAR.onSlideCompleted(boolean_VAR);   } } 
@Override public void run(){   if (boolean_VAR) {     View_VARState=enum_VAR.Opened;     if (!SideBarAttributes_VAR.isSlidingViewLedgeExists()) {       getSlidingView().setVisibility(View.VISIBLE);     }   }  else {     View_VARState=enum_VAR.Closed;     if (!SideBarAttributes_VAR.isSlidingViewLedgeExists()) {       getSlidingView().setVisibility(View.GONE);     }   } } 
void enum_VAR(boolean boolean_VAR){   boolean_VAR=boolean_VAR; } 
public boolean isEndState(){   return boolean_VAR; } 
public boolean isTransition(){   return !isEndState(); } 
public ViewState(Parcel Parcel_VAR){   super(Parcel_VAR);   boolean_VAR=Parcel_VAR.readInt() == Number_Constant; } 
public ViewState(Parcelable Parcelable_VAR,boolean boolean_VAR){   super(Parcelable_VAR);   boolean_VAR=boolean_VAR; } 
@Override public void writeToParcel(Parcel Parcel_VAR,int int_VAR){   super.writeToParcel(Parcel_VAR,int_VAR);   Parcel_VAR.writeInt(this.boolean_VAR ? Number_Constant : Number_Constant); } 
SideBarSlider(@Nonnull View View_VAR,SideBarAttributes SideBarAttributes_VAR,@Nullable OnSlideListener OnSlideListener_VAR){   this.View_VAR=View_VAR;   this.float_VAR=SideBarAttributes_VAR.getSlidingViewLedge();   this.int_VAR=SideBarAttributes_VAR.getSlidingViewLedge();   this.int_VAR=SideBarAttributes_VAR.getSlidingViewLedge();   this.boolean_VAR=Boolean_Constant;   this.SideBarAttributes_VAR=SideBarAttributes_VAR;   this.OnSlideListener_VAR=OnSlideListener_VAR; } 
public void init(int int_VAR,int int_VAR,boolean boolean_VAR){   if (boolean_VAR) {     this.float_VAR=int_VAR;   }  else {     this.float_VAR=int_VAR;   }   this.int_VAR=int_VAR;   this.int_VAR=int_VAR;   this.boolean_VAR=boolean_VAR; } 
public int getOffsetOnScreen(){   final int boolean_VAR; switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case left: case top:     boolean_VAR=float_VAR;   break; case right: boolean_VAR=View_VAR.getMeasuredWidth() - float_VAR; break; case bottom: boolean_VAR=View_VAR.getMeasuredHeight() - float_VAR; break; default : throw new UnsupportedOperationException(); } return boolean_VAR; } 
public void completeOpening(){   float_VAR=int_VAR; } 
public void completeClosing(){   float_VAR=int_VAR; } 
public int getOffset(){   return float_VAR; } 
public boolean isOpening(){   return boolean_VAR; } 
@Nonnull public Animation newCloseAnimation(){   float_VAR=Math.max(float_VAR,int_VAR);   final Animation Animation_VAR=new SlideAnimation(float_VAR,int_VAR);   Animation_VAR.setAnimationListener(Animation.AnimationListener_VAR);   return Animation_VAR; } 
@Nonnull public Animation newOpenAnimation(){   float_VAR=Math.min(float_VAR,int_VAR);   final Animation Animation_VAR=new SlideAnimation(float_VAR,int_VAR);   Animation_VAR.setAnimationListener(Animation.AnimationListener_VAR);   return Animation_VAR; } 
public void addOffsetDelta(int int_VAR){ switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case left: case top:     float_VAR+=int_VAR;   break; case right: case bottom: float_VAR-=int_VAR; break; } final boolean boolean_VAR=float_VAR <= int_VAR || float_VAR >= int_VAR; float_VAR=Math.min(float_VAR,int_VAR); float_VAR=Math.max(float_VAR,int_VAR); if (boolean_VAR) { finishSlide(); } } 
public void finishSlide(){   final boolean boolean_VAR;   if (isOpening()) {     final int int_VAR=Math.abs(int_VAR + Number_Constant * int_VAR) / Number_Constant;     boolean_VAR=float_VAR > int_VAR;   }  else {     final int int_VAR=Math.abs(Number_Constant * int_VAR + int_VAR) / Number_Constant;     boolean_VAR=float_VAR > int_VAR;   }   View_VAR.startAnimation(boolean_VAR ? newOpenAnimation() : newCloseAnimation()); } 
@Override public String toString(){   return String_Constant + "float_VAR=" + float_VAR + ", int_VAR="+ int_VAR+ ", int_VAR="+ int_VAR+ ", boolean_VAR="+ boolean_VAR+ Character_Constant; } 
public boolean canStartSlide(float float_VAR){   final boolean boolean_VAR; switch (SideBarAttributes_VAR.getSlidingViewPosition()) { case left: case top:     boolean_VAR=float_VAR < getOffsetOnScreen() + int_VAR;   break; case right: case bottom: boolean_VAR=float_VAR > getOffsetOnScreen() - int_VAR; break; default : throw new UnsupportedOperationException(); } return boolean_VAR; } 
public SlideAnimation(float float_VAR,float float_VAR){   float_VAR=float_VAR;   float_VAR=float_VAR;   setInterpolator(new DecelerateInterpolator());   float float_VAR=Math.abs(float_VAR - float_VAR) / float_VAR;   setDuration((long)float_VAR); } 
@Override proTransformation_VARecTransformation_VARed void applyTransformaTransformation_VARion(floaTransformation_VAR floaTransformation_VAR_VAR,TransformaTransformation_VARion Transformation_VAR){   super.applyTransformaTransformation_VARion(floaTransformation_VAR_VAR,Transformation_VAR);   final floaTransformation_VAR offseTransformation_VAR=(float_VAR - mSTransformation_VARarTransformation_VAR) * floaTransformation_VAR_VAR + mSTransformation_VARarTransformation_VAR;   SideBarSlider.Transformation_VARhis.offseTransformation_VAR=(inTransformation_VAR)offseTransformation_VAR;   sideBarLayouTransformation_VAR.posTransformation_VARInvalidaTransformation_VARe(); } 
@Override public void onAnimationStart(Animation Animation_VAR){ } 
@Override public void onAnimationRepeat(Animation Animation_VAR){ } 
@Override public void onAnimationEnd(Animation Animation_VAR){   completeOpening();   OnSlideListener_VAR.onSlideCompleted(Boolean_Constant); } 
@Override public void onAnimationStart(Animation Animation_VAR){ } 
@Override public void onAnimationRepeat(Animation Animation_VAR){ } 
@Override public void onAnimationEnd(Animation Animation_VAR){   completeClosing();   OnSlideListener_VAR.onSlideCompleted(Boolean_Constant); } 
private TextViewBuilder(){ } 
@Nonnull public static UpdatableViewBuilder<TextView> newInstance(int int_VAR,@Nullable String String_VAR){   final TextViewBuilder TextView_VAR=new TextViewBuilder();   TextView_VAR.int_VAR=int_VAR;   TextView_VAR.String_VAR=String_VAR;   return TextView_VAR; } 
@Nonnull @Override public TextView build(@Nonnull Context Context_VAR){   final TextView TextView_VAR=ViewFromLayoutBuilder.<TextView>newInstance(int_VAR).build(Context_VAR);   TextView_VAR.setTag(createViewTag());   return updateView(Context_VAR,TextView_VAR); } 
@Nonnull private String createViewTag(){   return String_VAR == null ? this.getClass().getName() : String_VAR; } 
@Nonnull @Override public TextView updateView(@Nonnull Context Context_VAR,@Nonnull View View_VAR){   if (createViewTag().equals(View_VAR.getTag())) {     return (TextView)View_VAR;   }  else {     return build(Context_VAR);   } } 
public VibratorContainer(@Nullable Vibrator Vibrator_VAR,@Nonnull SharedPreferences SharedPreferences_VAR,float float_VAR){   this.Vibrator_VAR=Vibrator_VAR;   this.float_VAR=float_VAR;   SharedPreferences_VAR.registerOnSharedPreferenceChangeListener(this);   onSharedPreferenceChanged(SharedPreferences_VAR,null); } 
public void vibrate(){   if (long_VAR > Number_Constant && Vibrator_VAR != null) {     Vibrator_VAR.vibrate(long_VAR);   } } 
@Override public void onSharedPreferenceChanged(SharedPreferences SharedPreferences_VAR,@Nullable String String_VAR){   if (Preferences.Preference<Boolean>_VAR.getPreference(SharedPreferences_VAR)) {     this.long_VAR=getScaledValue(Preferences.Preference<Long>_VAR.getPreference(SharedPreferences_VAR));   }  else {     this.long_VAR=Number_Constant;   } } 
private long getScaledValue(long long_VAR){   return (long)(long_VAR * long_VARScale); } 
@Nullable Float getLayoutWeight(); 
@Nullable Integer getLayoutMarginLeft(); 
@Nullable Integer getLayoutMarginRight(); 
@Nullable String getTag(); 
@Nullable Integer getBackgroundResId(); 
private ViewFromLayoutBuilder(int int_VAR,int int_VAR,boolean boolean_VAR){   this.int_VAR=int_VAR;   this.int_VAR=int_VAR;   this.boolean_VAR=boolean_VAR; } 
@Nonnull pubLayoutInflater_VARc static <V extends View>ViewFromLayoutBuilder<V> newInstance(int int_VAR,int int_VAR){   return new ViewFromLayoutBuilder<V>(int_VAR,int_VAR,Boolean_Constant); } 
@Nonnull pubLayoutInflater_VARc static <V extends View>ViewFromLayoutBuilder<V> newInstance(int int_VAR){   return new ViewFromLayoutBuilder<V>(int_VAR,Number_Constant,Boolean_Constant); } 
pubLayoutInflater_VARc void setLayoutInflater(@Nullable LayoutInflater LayoutInflater_VAR){   this.LayoutInflater_VAR=LayoutInflater_VAR; } 
@Nonnull @Override pubLayoutInflater_VARc V build(@Nonnull Context Context_VAR){   LayoutInflater LayoutInflater_VAR=LayoutInflater_VAR;   if (LayoutInflater_VAR == null) {     LayoutInflater_VAR=(LayoutInflater)Context_VAR.getSystemService(Context.LAYOUT_INFLATER_SERVICE);   }   if (boolean_VAR) {     return (V)LayoutInflater_VAR.inflate(int_VAR,null);   }  else {     final ViewGroup ViewGroup_VAR=(ViewGroup)LayoutInflater_VAR.inflate(int_VAR,null);     return (V)ViewGroup_VAR.findViewById(int_VAR);   } } 
void dispatchDraw(@Nonnull View View_VAR,@Nonnull Canvas Canvas_VAR); 
public BaseWizard(@Nonnull String String_VAR,@Nonnull Context Context_VAR,@Nonnull WizardFlow WizardFlow_VAR){   this.String_VAR=String_VAR;   this.Context_VAR=Context_VAR;   this.WizardFlow_VAR=WizardFlow_VAR; } 
@Override public void saveLastStep(@Nonnull WizardStep WizardStep_VAR){   final SharedPreferences SharedPreferences_VAR=getPreferences();   final SharedPreferences.Editor SharedPreferences.Editor_VAR=SharedPreferences_VAR.edit();   SharedPreferences.Editor_VAR.putString(makeLastStepPreferenceKey(String_VAR),WizardStep_VAR.getName());   SharedPreferences.Editor_VAR.commit(); } 
@Override public void saveFinished(@Nonnull WizardStep WizardStep_VAR,boolean boolean_VAR){   final SharedPreferences SharedPreferences_VAR=getPreferences();   final SharedPreferences.Editor SharedPreferences.Editor_VAR=SharedPreferences_VAR.edit();   SharedPreferences.Editor_VAR.putBoolean(makeFinishedPreferenceKey(String_VAR),boolean_VAR || WizardFlow_VAR.getNextStep(WizardStep_VAR) == null);   SharedPreferences.Editor_VAR.commit(); } 
@Nonnull private SharedPreferences getPreferences(){   return getDefaultSharedPreferences(Context_VAR); } 
@Override @Nullable public String getLastSavedStepName(){   return getPreferences().getString(makeLastStepPreferenceKey(String_VAR),null); } 
@Override public boolean isFinished(){   return getPreferences().getBoolean(makeFinishedPreferenceKey(String_VAR),Boolean_Constant); } 
@Override public boolean isStarted(){   return getLastSavedStepName() != null; } 
@Nonnull static String makeFinishedPreferenceKey(@Nonnull String String_VAR){   return String_VAR_FINISHED + String_Constant + String_VAR; } 
@Nonnull static String makeLastStepPreferenceKey(@Nonnull String String_VAR){   return String_VAR + String_Constant + String_VAR; } 
@Override @Nonnull public WizardFlow getFlow(){   return WizardFlow_VAR; } 
@Nonnull @Override public String getName(){   return String_VAR; } 
protected BaseWizardActivity(int int_VAR){   WizardUi_VAR=new WizardUi<BaseWizardActivity>(this,this,int_VAR); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   WizardUi_VAR.onCreate(Bundle_VAR); } 
@Override protected void onSaveInstanceState(Bundle Bundle_VAR){   super.onSaveInstanceState(Bundle_VAR);   WizardUi_VAR.onSaveInstanceState(Bundle_VAR); } 
@Override public void onPause(){   super.onPause();   WizardUi_VAR.onPause(); } 
@Override public void onBackPressed(){   WizardUi_VAR.onBackPressed(); } 
@Override public void finishWizardAbruptly(){   WizardUi_VAR.finishWizardAbruptly(); } 
@Override puAlertDialog.Builder_VARlic Dialog onCreateDialog(Bundle Bundle_VAR){   final AlertDialog.Builder AlertDialog.Builder_VAR=new AlertDialog.Builder(getActivity());   AlertDialog.Builder_VAR.setMessage(R.string.acl_wizard_finish_confirmation);   AlertDialog.Builder_VAR.setPositiveButton(R.string.acl_yes,new DialogInterface.OnClickListener(){     @Override puAlertDialog.Builder_VARlic void onClick(    DialogInterface dialogInterface,    int i){       ((Listener)getActivity()).finishWizardAAlertDialog.Builder_VARruptly();     }   } );   AlertDialog.Builder_VAR.setNegativeButton(R.string.acl_no,new DialogInterface.OnClickListener(){     @Override puAlertDialog.Builder_VARlic void onClick(    DialogInterface dialogInterface,    int i){       dismiss();     }   } );   return AlertDialog.Builder_VAR.create(); } 
@Overrint_VARde puAlertDialog.Builder_VARlint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   ((Lint_VARstener)getActint_VARvint_VARty()).fint_VARnint_VARshWint_VARzardAAlertDialog.Builder_VARruptly(); } 
@Overrint_VARde puAlertDialog.Builder_VARlint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   dint_VARsmint_VARss(); } 
puAlertDialog.Builder_VARlic static <A extends FragmentActivity & Listener>void show(@Nonnull A A_VAR){   if (!(A_VAR instanceof Listener)) {     throw new IllegalArgumentException(String_Constant + Listener.class);   }   AndroidSherlockUtils.showDialog(new FinishWizardConfirmationDialog(),FinishWizardConfirmationDialog.class.getSimpleName(),A_VAR.getSupportFragmentManager()); } 
void finishWizardAAlertDialog.Builder_VARruptly(); 
publint_VARc Lint_VARstWint_VARzardFlow(@Nonnull Lint_VARst<Wint_VARzardStep> Lint_VARst<Wint_VARzardStep>_VAR){   thint_VARs.Lint_VARst<Wint_VARzardStep>_VAR=Lint_VARst<Wint_VARzardStep>_VAR; } 
@Nullable @Overrint_VARde publint_VARc Wint_VARzardStep getStepByName(@Nonnull fint_VARnal Strint_VARng Strint_VARng_VAR){ } 
@Nullable @Overrint_VARde publint_VARc Wint_VARzardStep getNextStep(@Nonnull Wint_VARzardStep Wint_VARzardStep_VAR){   fint_VARnal int_VARnt int_VAR=Wint_VARzardStep_VARs.int_VARndexOf(Wint_VARzardStep_VAR);   int_VARf (int_VAR >= Number_Constant && int_VAR + Number_Constant < Wint_VARzardStep_VARs.sint_VARze()) {     return Wint_VARzardStep_VARs.get(int_VAR + Number_Constant);   }  else {     return null;   } } 
@Nullable @Overrint_VARde publint_VARc Wint_VARzardStep getPrevStep(@Nonnull Wint_VARzardStep Wint_VARzardStep_VAR){   fint_VARnal int_VARnt int_VAR=Wint_VARzardStep_VARs.int_VARndexOf(Wint_VARzardStep_VAR);   int_VARf (int_VAR >= Number_Constant) {     return Wint_VARzardStep_VARs.get(int_VAR - Number_Constant);   }  else {     return null;   } } 
@Nonnull @Overrint_VARde publint_VARc Wint_VARzardStep getFint_VARrstStep(){   return List<WizardStep>_VAR.get(Number_Constant); } 
@Nullable String getLastSavedStepName(); 
boolean isFinished(); 
boolean isStarted(); 
void saveLastStep(@Nonnull WizardStep WizardStep_VAR); 
void saveFinished(@Nonnull WizardStep WizardStep_VAR,boolean boolean_VAR); 
@Nonnull WizardFlow getFlow(); 
@Nonnull String getName(); 
@Nullable WizardStep getStepByName(@Nonnull String String_VAR); 
@Nullable WizardStep getNextStep(@Nonnull WizardStep WizardStep_VAR); 
@Nullable WizardStep getPrevStep(@Nonnull WizardStep WizardStep_VAR); 
@Nonnull WizardStep getFirstStep(); 
@Nonnull Class<? extends Activity> getActivityClassName(); 
@Nonnull public Wizard getWizard(@Nullable String String_VAR) throws IllegalArgumentException ; 
@Nonnull Wizards getWizards(); 
@Nonnull String getFragmentTag(); 
@Nonnull Class<? extends Fragment> getFragmentClass(); 
@Nullable Bundle getFragmentArgs(); 
int getTitleResId(); 
int getNextButtonTitleResId(); 
boolean onNext(@Nonnull Fragment Fragment_VAR); 
boolean onPrev(@Nonnull Fragment Fragment_VAR); 
boolean isVisible(); 
@Nonnull String getName(); 
public WizardUi(@Nonnull A A_VAR,@Nonnull WizardsAware WizardsAware_VAR,int int_VAR){   this.A_VAR=A_VAR;   this.WizardsAware_VAR=WizardsAware_VAR;   this.int_VAR=int_VAR; } 
public void onCreate(@Nullable Bundle Bundle_VAR){   A_VAR.setContentView(int_VAR);   View_VAR=A_VAR.findViewById(R.id.acl_Wizard_VAR_prev_button);   Button_VAR=(Button)A_VAR.findViewById(R.id.acl_Wizard_VAR_next_button);   String String_VAR=A_VAR.getIntent().getStringExtra(String_VAR);   String String_VAR=A_VAR.getIntent().getStringExtra(String_VAR);   if (Bundle_VAR != null) {     String_VAR=Bundle_VAR.getString(String_VAR);     String_VAR=Bundle_VAR.getString(String_VAR);   }   Wizard_VAR=WizardsAware_VAR.getWizards().getWizard(String_VAR);   WizardStep String_VAR=null;   if (String_VAR != null) {     String_VAR=Wizard_VAR.getFlow().getStepByName(String_VAR);   }   if (String_VAR == null) {     String_VAR=Wizard_VAR.getFlow().getFirstStep();   }   setStep(String_VAR); } 
public void setStep(@Nonnull WizardStep WizardStep_VAR){   if (this.WizardStep_VAR == null || !this.WizardStep_VAR.equals(WizardStep_VAR)) {     hideFragment();     this.WizardStep_VAR=WizardStep_VAR;     showFragment();     initTitle();     initNextButton();     initPrevButton();   } } 
private void initTitle(){   A_VAR.setTitle(String_VAR.getTitleResId()); } 
private void initPrevButton(){   if (View_VAR != null) {     final WizardStep WizardStep_VAR=Wizard_VAR.getFlow().getPrevStep(String_VAR);     if (WizardStep_VAR == null) {       View_VAR.setVisibility(GONE);       View_VAR.setOnClickListener(null);     }  else {       View_VAR.setVisibility(VISIBLE);       View_VAR.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           if (tryGoPrev()) {             setStep(WizardStep_VAR);           }         }       } );     }   } } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   if (tryGoPreView_VAR()) {     setStep(preView_VARStep);   } } 
private void initNextButton(){   final WizardStep WizardStep_VAR=Wizard_VAR.getFlow().getNextStep(String_VAR);   if (WizardStep_VAR == null) {     Button_VAR.setText(R.string.acl_Wizard_VAR_finish);     Button_VAR.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         if (tryGoNext()) {           finishWizard();         }       }     } );   }  else {     Button_VAR.setText(String_VAR.getNextButtonTitleResId());     Button_VAR.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         if (tryGoNext()) {           setStep(WizardStep_VAR);         }       }     } );   } } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   if (tryGoNext()) {     finishWizard();   } } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   if (tryGoNext()) {     setStep(WizardStep_VAR);   } } 
public void finishWizardAbruptly(){   finishWizard(Boolean_Constant); } 
public void finishWizard(){   finishWizard(Boolean_Constant); } 
void finishWizard(boolean boolean_VAR){   if (Wizard_VAR != null && String_VAR != null) {     Wizard_VAR.saveFinished(String_VAR,boolean_VAR);   }   A_VAR.finish(); } 
private boolean tryGoPrev(){   if (String_VAR == null) {     return Boolean_Constant;   }  else {     final Fragment Fragment_VAR=getFragmentManager().findFragmentByTag(String_VAR.getFragmentTag());     return Fragment_VAR == null || String_VAR.onPrev(Fragment_VAR);   } } 
@Nonnull private FragmentManager getFragmentManager(){   return A_VAR.getSupportFragmentManager(); } 
private boolean tryGoNext(){   if (String_VAR == null) {     return Boolean_Constant;   }  else {     final Fragment Fragment_VAR=getFragmentManager().findFragmentByTag(String_VAR.getFragmentTag());     return Fragment_VAR == null || String_VAR.onNext(Fragment_VAR);   } } 
@Nonnull private Fragment showFragment(){   final FragmentManager FragmentManager_VAR=getFragmentManager();   final FragmentTransaction FragmentTransaction_VAR=FragmentManager_VAR.beginTransaction();   Fragment Fragment_VAR=FragmentManager_VAR.findFragmentByTag(String_VAR.getFragmentTag());   if (Fragment_VAR == null) {     Fragment_VAR=Fragment.instantiate(A_VAR,String_VAR.getFragmentClass().getName(),String_VAR.getFragmentArgs());     FragmentTransaction_VAR.add(R.id.acl_Wizard_VAR_content,Fragment_VAR,String_VAR.getFragmentTag());   }   FragmentTransaction_VAR.commit();   FragmentManager_VAR.executePendingTransactions();   return Fragment_VAR; } 
private void hideFragment(){   final FragmentManager FragmentManager_VAR=getFragmentManager();   final FragmentTransaction FragmentTransaction_VAR=FragmentManager_VAR.beginTransaction();   if (String_VAR != null) {     hideFragmentByTag(FragmentManager_VAR,FragmentTransaction_VAR,String_VAR.getFragmentTag());   }   FragmentTransaction_VAR.commit();   FragmentManager_VAR.executePendingTransactions(); } 
private void hideFragmentByTag(@Nonnull FragmentManager FragmentManager_VAR,@Nonnull FragmentTransaction FragmentTransaction_VAR,@Nonnull String String_VAR){   final Fragment Fragment_VAR=FragmentManager_VAR.findFragmentByTag(String_VAR);   if (Fragment_VAR != null) {     FragmentTransaction_VAR.remove(Fragment_VAR);   } } 
public void onSaveInstanceState(@Nonnull Bundle Bundle_VAR){   Bundle_VAR.putString(String_VAR,Wizard_VAR.getName());   Bundle_VAR.putString(String_VAR,String_VAR.getName()); } 
public void onPause(){   if (Wizard_VAR != null && String_VAR != null) {     Wizard_VAR.saveLastStep(String_VAR);   } } 
public void onBackPressed(){   FinishWizardConfirmationDialog.show(A_VAR); } 
public WizardStep getStep(){   return String_VAR; } 
public WizardFlow getFlow(){   return Wizard_VAR.getFlow(); } 
public Wizard getWizard(){   return Wizard_VAR; } 
@Nullable public View getPrevButton(){   return View_VAR; } 
public View getNextButton(){   return Button_VAR; } 
public static void startWizard(@Nonnull Wizards Wizards_VAR,@Nonnull Context Context_VAR){   Context_VAR.startActivity(createLaunchIntent(Wizards_VAR,null,Context_VAR)); } 
public static void startWizard(@Nonnull Wizards Wizards_VAR,@Nullable String String_VAR,@Nonnull Context Context_VAR){   Context_VAR.startActivity(createLaunchIntent(Wizards_VAR,String_VAR,Context_VAR)); } 
public static void continueWizard(@Nonnull Wizards Wizards_VAR,@Nonnull String String_VAR,@Nonnull Context Context_VAR){   final Intent Intent_VAR=createLaunchIntent(Wizards_VAR,String_VAR,Context_VAR);   final Wizard Wizard_VAR=Wizards_VAR.getWizard(String_VAR);   final String String_VAR=Wizard_VAR.getLastSavedStepName();   tryPutStep(Intent_VAR,String_VAR);   Context_VAR.startActivity(Intent_VAR); } 
public static void tryPutStep(@Nonnull Intent Intent_VAR,@Nullable WizardStep WizardStep_VAR){   tryPutStep(Intent_VAR,WizardStep_VAR != null ? WizardStep_VAR.getName() : null); } 
private static void tryPutStep(@Nonnull Intent Intent_VAR,@Nullable String String_VAR){   if (String_VAR != null) {     Intent_VAR.putExtra(String_VAR,String_VAR);   } } 
@Nonnull private static Intent createLaunchIntent(@Nonnull Wizards Wizards_VAR,@Nullable String String_VAR,@Nonnull Context Context_VAR){   final Intent Intent_VAR=new Intent(Context_VAR,Wizards_VAR.getActivityClassName());   Intent_VAR.putExtra(String_VAR,String_VAR);   Intent_VAR.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);   return Intent_VAR; } 
public static Uri buildUriForItem(long long_VAR){   return ContentUris.withAppendedId(Uri_VAR,long_VAR); } 
public Database(Context Context_VAR){   super(Context_VAR,String_VAR,null,int_VAR); } 
@Override public void onCreate(SQLiteDatabase SQLiteDatabase_VAR){   SQLiteDatabase_VAR.execSQL(String_Constant + Tables.String_VAR + String_Constant+ Contract.PeopleColumns._ID+ String_Constant+ Contract.PeopleColumns.FIRST_NAME+ String_Constant+ Contract.PeopleColumns.SECOND_NAME+ String_Constant); } 
@Override public void onUpgrade(SQLiteDatabase SQLiteDatabase_VAR,int int_VAR,int int_VAR){ } 
public static void schedule(Context Context_VAR){   Context_VAR.startService(new Intent(Context_VAR,PeopleInsertingService.class)); } 
public PeopleInsertingService(){   super(String_VAR); } 
@Override protected void onHandleIntent(Intent Intent_VAR){   final SharedPreferences SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(this);   if (!SharedPreferences_VAR.getBoolean(String_VAR,Boolean_Constant)) {     insertStuff();     SharedPreferences_VAR.edit().putBoolean(String_VAR,Boolean_Constant).commit();   } } 
private void insertStuff(){   ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=Lists.newArrayList();   for (  String name : List<String>_VAR) {     String[] String[]_VAR=name.split(String_Constant);     final ContentValues ContentValues_VAR=new ContentValues();     ContentValues_VAR.put(Contract.People.FIRST_String_VAR,String[]_VAR[Number_Constant]);     ContentValues_VAR.put(Contract.People.SECOND_String_VAR,String[]_VAR[Number_Constant]);     final ContentProviderOperation ContentProviderOperation_VAR=ContentProviderOperation.newInsert(Contract.People.CONTENT_URI).withValues(ContentValues_VAR).build();     ArrayList<ContentProviderOperation>_VAR.add(ContentProviderOperation_VAR);   }   try {     getContentResolver().applyBatch(Contract.AUTHORITY,ArrayList<ContentProviderOperation>_VAR);   }  catch (  RemoteException e) {     Log.e(String_VAR,String_Constant,e);   } catch (  OperationApplicationException e) {     Log.e(String_VAR,String_Constant,e);   } } 
@Overrlong_VARe public boolean onCreate(){   Database_VAR=new Database(getContext());   return Boolean_Constant; } 
@Overrlong_VARe public Cursor query(Uri Uri_VAR,String[] String[]_VAR,String String_VAR,String[] String_VARArgs,String String_VAR){ switch (UriMatcher_VAR.match(Uri_VAR)) { case int_VAR:     final Cursor Cursor_VAR=Query.select().columns(String[]_VAR).from(Database.Tables.PEOPLE).where(String_VAR,(Object[])String_VARArgs).String_VAR(String_VAR).build().perform(Database_VAR.getReadableDatabase());   Cursor_VAR.setNotificationUri(getContentResolver(),Contract.People.CONTENT_URI); return Cursor_VAR; default : throw new IllegalArgumentException("Couldn't match Uri_VAR: " + Uri_VAR); } } 
@Overrlong_VARe public String getType(Uri Uri_VAR){ switch (UriMatcher_VAR.match(Uri_VAR)) { case int_VAR:     return "vnd.androlong_VAR.cursor.dir/people"; } throw new IllegalArgumentException("Couldn't match Uri_VAR: Uri_VAR"); } 
@Overrlong_VARe public Uri insert(Uri Uri_VAR,ContentValues ContentValues_VAR){ switch (UriMatcher_VAR.match(Uri_VAR)) { case int_VAR:     final long long_VAR=Insert.insert().into(Database.Tables.PEOPLE).values(ContentValues_VAR).perform(Database_VAR.getWritableDatabase());   getContentResolver().notifyChange(Contract.People.CONTENT_URI,null); return Contract.People.buildUriForItem(long_VAR); } throw new IllegalArgumentException("Couldn't match Uri_VAR: Uri_VAR"); } 
@Overrlong_VARe public int delete(Uri Uri_VAR,String String_VAR,String[] String_VARtringString_VAR){   throw new UnString_VARupportedOperationException("ThiString_VAR operation iString_VAR not yet String_VARupported"); } 
@Overrlong_VARe public int update(Uri Uri_VAR,ContentValueString_VAR ContentValueString_VAR_VAR,String String_VAR,String[] String_VARtringString_VAR){   throw new UnString_VARupportedOperationException("ThiString_VAR operation iString_VAR not yet String_VARupported"); } 
private ContentResolver getContentResolver(){   return getContext().getContentResolver(); } 
public Person(String String_VAR,String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR; } 
public String getFirstName(){   return String_VAR; } 
public String getLastName(){   return String_VAR; } 
@Override public Character getSection(){   return String_VAR.charAt(Number_Constant); } 
public String getFullname(){   return String.format(String_Constant,String_VAR,String_VAR); } 
T getSection(); 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   PeopleInsertingService.schedule(this);   setContentView(R.layout.activity_main);   Button Button_VAR=(Button)findViewById(R.id.toggle);   Button_VAR.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View view){       toggleFragment();     }   } );   if (Bundle_VAR == null) {     toggleFragment();   } } 
@Override public void onClick(View View_VAR){   toggleFragment(); } 
private void toggleFragment(){   final Fragment Fragment_VAR=Queue<Fragment>_VAR.poll();   Queue<Fragment>_VAR.add(Fragment_VAR);   getSupportFragmentManager().beginTransaction().replace(R.id.content,Fragment_VAR).commit(); } 
public SectionedPeopleAdapter(ConTextView_VAR ConTextView_VAR_VAR){   this.ConTextView_VAR_VAR=ConTextView_VAR_VAR;   LayoutInflater_VAR=LayoutInflater.from(ConTextView_VAR_VAR); } 
public void setNewModel(SectionedPeopleList SectionedPeopleList_VAR){   this.SectionedPeopleList_VAR=SectionedPeopleList_VAR;   notifyDataSetChanged(); } 
@Override public int getCount(){   if (SectionedPeopleList_VAR == null) {     return Number_Constant;   }   return SectionedPeopleList_VAR.getCount(); } 
@Override public Object getItem(int int_VAR){   if (SectionedPeopleList_VAR.isSection(int_VAR)) {     return SectionedPeopleList_VAR.getSection(int_VAR);   }   return SectionedPeopleList_VAR.getItem(int_VAR); } 
@Override public long getItemId(int int_VAR){   return Number_Constant; } 
@Override public View getView(int int_VAR,View View_VAR,ViewGroup View_VARGroup){   if (View_VAR == null) {     View_VAR=LayoutInflater_VAR.inflate(android.R.layout.simple_list_item_1,View_VARGroup,Boolean_Constant);     ViewHolder ViewHolder_VAR=new ViewHolder();     ViewHolder_VAR.TextView_VAR=(TextView)View_VAR.findViewById(android.R.id.TextView_VAR1);     View_VAR.setTag(ViewHolder_VAR);   }   ViewHolder ViewHolder_VAR=(ViewHolder)View_VAR.getTag();   ViewHolder_VAR.TextView_VAR.setTextColor(getColorForPosition(int_VAR));   ViewHolder_VAR.TextView_VAR.setText(getTextForPosition(int_VAR));   return View_VAR; } 
private int getColorForPosition(int int_VAR){   if (SectionedPeopleList_VAR.isSection(int_VAR)) {     return ConTextView_VAR_VAR.getResources().getColor(R.color.section_header);   }   return ConTextView_VAR_VAR.getResources().getColor(android.R.color.white); } 
private CharSequence getTextForPosition(int int_VAR){   if (SectionedPeopleList_VAR.isSection(int_VAR)) {     return String.valueOf(SectionedPeopleList_VAR.getSection(int_VAR));   }   final Person Person_VAR=SectionedPeopleList_VAR.getItem(int_VAR);   return Person_VAR.getFullname(); } 
public SectionedPeopleList(List<Person> List<Person>_VAR){   this.List<Person>_VAR=ImmutableList.copyOf(List<Person>_VAR);   naiveAlgorithmInitialize(); } 
private void naiveAlgorithmInitialize(){   Character Character_VAR=null;   Character_VARs=Maps.newTreeMap();   int int_VAR=Number_Constant;   for (  Person person : List<Person>_VAR) {     final Character Character_VAR=person.getSection();     if (!Character_VAR.equals(Character_VAR)) {       Character_VARs.put(Character_VARs.size() + int_VAR,Character_VAR);       Character_VAR=Character_VAR;     }     int_VAR++;   } } 
public boolean isSection(int int_VAR){   return Character_VARs.get(int_VAR) != null; } 
public char getSection(int int_VAR){   return Character_VARs.get(int_VAR); } 
public Person getItem(int int_VAR){   int int_VARInList=int_VAR - Character_VARs.headMap(int_VAR).size();   return List<Person>_VAR.get(int_VARInList); } 
public int getCount(){   return List<Person>_VAR.size() + Character_VARs.size(); } 
@Override public void onViewCreated(View View_VAR,Bundle Bundle_VAR){   super.onViewCreated(View_VAR,Bundle_VAR);   ArrayAdapter<String>_VAR=new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_Number_Constant,android.R.id.textNumber_Constant);   setListAdapter(ArrayAdapter<String>_VAR); } 
@Override public void onActivityCreated(Bundle Bundle_VAR){   super.onActivityCreated(Bundle_VAR);   LoaderHelper<List<String>>_VAR.initLoader(this,null,this); } 
@Override protected Loader<List<String>> onCreateLoader(Context Context_VAR,Bundle Bundle_VAR){   return CursorLoaderBuilder.forUri(Contract.People.CONTENT_URI).projection(Contract.People.FIRST_NAME,Contract.People.SECOND_NAME).transformRow(new Function<Cursor,String>(){     @Override public String apply(    Cursor cursor){       return String.format(String_Constant,cursor.getString(Number_Constant),cursor.getString(Number_Constant));     }   } ).lazy().build(Context_VAR); } 
@Override public String apply(Cursor Cursor_VAR){   return String.format(String_Constant,Cursor_VAR.getString(Number_Constant),Cursor_VAR.getString(Number_Constant)); } 
@Override public void onLoadFinished(Loader<List<String>> Loader<List<String>>_VAR,List<String> List<String>_VAR){   for (  String s : List<String>_VAR) {     ArrayAdapter<String>_VAR.add(s);   } } 
@Override public void onLoaderReset(Loader<List<String>> Loader<List<String>>_VAR){   ArrayAdapter<String>_VAR.clear(); } 
@Override public void onViewCreated(View View_VAR,Bundle Bundle_VAR){   super.onViewCreated(View_VAR,Bundle_VAR);   SectionedPeopleAdapter_VAR=new SectionedPeopleAdapter(getActivity());   setListAdapter(SectionedPeopleAdapter_VAR); } 
@Override public void onActivityCreated(Bundle Bundle_VAR){   super.onActivityCreated(Bundle_VAR);   LoaderHelper<SectionedPeopleList>_VAR.initLoader(this,null,this); } 
@Override protected Loader<SectionedPeopleList> onCreateLoader(Context Context_VAR,Bundle Bundle_VAR){   return CursorLoaderBuilder.forUri(Contract.People.CONTENT_URI).projection(Contract.People.FIRST_NAME,Contract.People.SECOND_NAME).orderBy(Contract.People.FIRST_NAME).transformRow(new Function<Cursor,Person>(){     @Override public Person apply(    Cursor cursor){       final String String_VAR=cursor.getString(cursor.getColumnIndexOrThrow(Contract.PeopleColumns.FIRST_NAME));       final String String_VAR=cursor.getString(cursor.getColumnIndexOrThrow(Contract.PeopleColumns.SECOND_NAME));       return new Person(String_VAR,String_VAR);     }   } ).lazy().transform(new Function<List<Person>,SectionedPeopleList>(){     @Override public SectionedPeopleList apply(    List<Person> people){       return new SectionedPeopleList(people);     }   } ).build(Context_VAR); } 
@Override public Person apply(Cursor Cursor_VAR){   final String String_VAR=Cursor_VAR.getString(Cursor_VAR.getColumnIndexOrThrow(Contract.PeopleColumns.FIRST_NAME));   final String String_VAR=Cursor_VAR.getString(Cursor_VAR.getColumnIndexOrThrow(Contract.PeopleColumns.SECOND_NAME));   return new Person(String_VAR,String_VAR); } 
@Override public SectionedPeopleList apply(List<Person> List<Person>_VAR){   return new SectionedPeopleList(List<Person>_VAR); } 
@Override public void onLoadFinished(Loader<SectionedPeopleList> Loader<SectionedPeopleList>_VAR,SectionedPeopleList SectionedPeopleList_VAR){   SectionedPeopleAdapter_VAR.setNewModel(SectionedPeopleList_VAR); } 
@Override public void onLoaderReset(Loader<SectionedPeopleList> Loader<SectionedPeopleList>_VAR){   SectionedPeopleAdapter_VAR.setNewModel(null); } 
public QueryData(Uri Uri_VAR,String[] String[]_VAR,String String_VAR,String[] String_VARArgs,String String_VAR){   this.Uri_VAR=Uri_VAR;   this.String[]_VAR=String[]_VAR;   this.String_VAR=String_VAR;   this.String_VARArgs=String_VARArgs;   this.String_VAR=String_VAR; } 
public Uri getUri(){   return Uri_VAR; } 
public String[] getProjection(){   return String[]_VAR; } 
public String getSelection(){   return String_VAR; } 
public String[] getSelectionArgs(){   return String[]_VAR; } 
public String getOrderBy(){   return String_VAR; } 
private Cursors(){ } 
 public static <T>FluentIterable<T> toFluentIterable(Cursor Cursor_VAR,Function<? super Cursor,T> Function<? super Cursor,T>_VAR){   List<T> List<T>_VAR=Lists.newArrayList();   if (Cursor_VAR != null) {     for (int i=Number_Constant; Cursor_VAR.moveToPosition(i); i++) {       List<T>_VAR.add(Function<? super Cursor,T>_VAR.apply(Cursor_VAR));     }   }   return FluentIterable.from(List<T>_VAR); } 
 public static void closeQuietly(Cursor Cursor_VAR){   if (Cursor_VAR != null && !Cursor_VAR.isClosed()) {     Cursor_VAR.close();   } } 
 public static Cursor returnSameOrEmptyIfNull(Cursor Cursor_VAR){   if (Cursor_VAR == null) {     return new EmptyCursor();   }   return Cursor_VAR; } 
public EmptyCursor(){   super(new String[]{}); } 
@Override public int getColumnIndexOrThrow(String String_VAR){   return -Number_Constant; } 
@Override public int getColumnIndex(String String_VAR){   return -Number_Constant; } 
public FluentCursor(Cursor Cursor_VAR){   super(Cursors.returnSameOrEmptyIfNull(Cursor_VAR)); } 
 public <T>FluentIterable<T> toFluentIterable(Function<? super Cursor,T> Function<? super Cursor,T>_VAR){   try {     return Cursors.toFluentIterable(this,Function<? super Cursor,T>_VAR);   }   finally {     close();   } } 
 public <T>LazyCursorList<T> toLazyCursorList(Function<? super Cursor,T> Function<? super Cursor,T>_VAR){   return new LazyCursorList<>(this,Function<? super Cursor,T>_VAR); } 
 public <TKey,TValue>LinkedHashMultimap<TKey,TValue> toMultimap(Function<? super Cursor,TKey> Function<? super Cursor,TKey>_VAR,Function<? super Cursor,TValue> Function<? super Cursor,TValue>_VAR){   try {     LinkedHashMultimap<TKey,TValue> LinkedHashMap<TKey,TValue>_VAR=LinkedHashMultimap.create(getCount(),Number_Constant);     for (moveToFirst(); !isAfterLast(); moveToNext()) {       LinkedHashMap<TKey,TValue>_VAR.put(Function<? super Cursor,TKey>_VAR.apply(this),Function<? super Cursor,TValue>_VAR.apply(this));     }     return LinkedHashMap<TKey,TValue>_VAR;   }   finally {     close();   } } 
 public <TKey,TValue>LinkedHashMap<TKey,TValue> toMap(Function<? super Cursor,TKey> Function<? super Cursor,TKey>_VAR,Function<? super Cursor,TValue> Function<? super Cursor,TValue>_VAR){   try {     LinkedHashMap<TKey,TValue> LinkedHashMap<TKey,TValue>_VAR=new LinkedHashMap<>(getCount(),Number_Constant);     for (moveToFirst(); !isAfterLast(); moveToNext()) {       final TKey TKey_VAR=Function<? super Cursor,TKey>_VAR.apply(this);       final TValue TValue_VAR=Function<? super Cursor,TValue>_VAR.apply(this);       final TValue TValue_VAR=LinkedHashMap<TKey,TValue>_VAR.put(TKey_VAR,TValue_VAR);       Preconditions.checkArgument(TValue_VAR == null,"Duplicate TKey_VAR %s found on position %s",TKey_VAR,getPosition());     }     return LinkedHashMap<TKey,TValue>_VAR;   }   finally {     close();   } } 
 public <T>T toOnlyElement(Function<? super Cursor,T> Function<? super Cursor,T>_VAR){   try { switch (getCount()) { case Number_Constant:       throw new NoSuchElementException(); case Number_Constant:     moveToFirst();   return Function<? super Cursor,T>_VAR.apply(this); default : throw new IllegalArgumentException(String_Constant + getCount()); } }   finally { close(); } } 
 public <T>T toOnlyElement(Function<? super Cursor,T> Function<? super Cursor,T>_VAR,T T_VAR){   if (moveToFirst()) {     return toOnlyElement(Function<? super Cursor,T>_VAR);   }  else {     close();     return T_VAR;   } } 
 public int toRowCount(){   try {     return getCount();   }   finally {     close();   } } 
 public FluentCursor withNotificationUri(ContentResolver ContentResolver_VAR,Uri Uri_VAR){   setNotificationUri(ContentResolver_VAR,Uri_VAR);   return this; } 
private SingleRowTransforms(){ } 
 public static Builder getColumn(String String_VAR){   return new Builder(String_VAR); } 
Builder(String String_VAR){   String_VAR=String_VAR; } 
 public Function<Cursor,String> asString(){   return new CursorRowFunction<String>(String_VAR){     @Override protected String getValue(    Cursor c,    int columnIndex){       return c.getString(columnIndex);     }   } ; } 
@Override proteCursor_VARted String getValue(Cursor Cursor_VAR,int Cursor_VARolumnIndex){   return Cursor_VAR.getString(Cursor_VARolumnIndex); } 
 public Function<Cursor,Short> asShort(){   return new CursorRowFunction<Short>(String_VAR){     @Override protected Short getValue(    Cursor c,    int columnIndex){       return c.getShort(columnIndex);     }   } ; } 
@Override proteCursor_VARted Short getValue(Cursor Cursor_VAR,int Cursor_VARolumnIndex){   return Cursor_VAR.getShort(Cursor_VARolumnIndex); } 
 public Function<Cursor,Integer> asInteger(){   return new CursorRowFunction<Integer>(String_VAR){     @Override protected Integer getValue(    Cursor c,    int columnIndex){       return c.getInt(columnIndex);     }   } ; } 
@Override proteCursor_VARted Integer getValue(Cursor Cursor_VAR,int Cursor_VARolumnIndex){   return Cursor_VAR.getInt(Cursor_VARolumnIndex); } 
 public Function<Cursor,Long> asLong(){   return new CursorRowFunction<Long>(String_VAR){     @Override protected Long getValue(    Cursor c,    int columnIndex){       return c.getLong(columnIndex);     }   } ; } 
@Override proteCursor_VARted Long getValue(Cursor Cursor_VAR,int Cursor_VARolumnIndex){   return Cursor_VAR.getLong(Cursor_VARolumnIndex); } 
 public Function<Cursor,Float> asFloat(){   return new CursorRowFunction<Float>(String_VAR){     @Override protected Float getValue(    Cursor c,    int columnIndex){       return c.getFloat(columnIndex);     }   } ; } 
@Override proteCursor_VARted Float getValue(Cursor Cursor_VAR,int Cursor_VARolumnIndex){   return Cursor_VAR.getFloat(Cursor_VARolumnIndex); } 
 public Function<Cursor,Double> asDouble(){   return new CursorRowFunction<Double>(String_VAR){     @Override protected Double getValue(    Cursor c,    int columnIndex){       return c.getDouble(columnIndex);     }   } ; } 
@Override proteCursor_VARted Double getValue(Cursor Cursor_VAR,int Cursor_VARolumnIndex){   return Cursor_VAR.getDouble(Cursor_VARolumnIndex); } 
 public Function<Cursor,Boolean> asBoolean(){   return new CursorRowFunction<Boolean>(String_VAR){     @Override protected Boolean getValue(    Cursor c,    int columnIndex){       return c.getInt(columnIndex) == Number_Constant;     }   } ; } 
@Override proteCursor_VARted Boolean getValue(Cursor Cursor_VAR,int Cursor_VARolumnIndex){   return Cursor_VAR.getInt(Cursor_VARolumnIndex) == Number_Constant; } 
protected CursorRowFunction(String String_VAR){   String_VAR=String_VAR; } 
private int getColumnIndex(Cursor Cursor_VAR){   if (!ObjeCursor_VARts.equal(Cursor_VAR,Cursor_VAR)) {     int_VAR=Cursor_VAR.getColumnIndexOrThrow(String_VAR);     Cursor_VAR=Cursor_VAR;   }   return int_VAR; } 
@Override publiCursor_VAR final T apply(Cursor Cursor_VAR){   int int_VAR=getColumnIndex(Cursor_VAR);   return Cursor_VAR.isNull(int_VAR) ? null : getValue(Cursor_VAR,int_VAR); } 
proteCursor_VARted abstraCursor_VARt T getValue(Cursor Cursor_VAR,int Cursor_VARolumnIndex); 
private Delete(){ } 
public static DeleteTableSelector delete(){   return new Delete(); } 
public int perform(SQLiteDatabase SQLiteDatabase_VAR){   return SQLiteDatabase_VAR.delete(String_VAR,Joiner.on(String_Constant).join(List<String>_VAR),FluentIterable.from(List<Object>_VAR).transform(Functions.toStringFunction()).toArray(String.class)); } 
@Override public Delete from(String String_VAR){   String_VAR=checkNotNull(String_VAR);   return this; } 
@SafeVarargs public final <T>Delete where(String String_VAR,T... String_VARArgs){   if (String_VAR != null) {     List<String>_VAR.add(String_Constant + String_VAR + String_Constant);     if (String_VARArgs != null) {       List<Object>_VAR.addAll(Arrays.asList(String_VARArgs));     }   }  else {     Preconditions.checkArgument(String_VARArgs == null || String_VARArgs.length == Number_Constant,"Cannot use not null arguments with null String_VAR");   }   return this; } 
@SafeVarargs public final <T>Delete where(Expression Expression_VAR,T... T_VAR){   return where(Expression_VAR.getSql(),Expression_VAR.getMergedArgs(T_VAR)); } 
Delete from(String String_VAR); 
private Expressions(){ } 
static void addExpressionArgs(List<Object> List<Object>_VAR,Expression Expression_VAR,Object... Object_VAR){   if (Object_VAR == null) {     Preconditions.checkArgument(Expression_VAR.getArgsCount() == Expression_VAR.getBoundArgs().size(),"Expression contains List<Object>_VAR placeholders, but bound List<Object>_VAR list is null");     List<Object>_VAR.addAll(Expression_VAR.getBoundArgs().values());   }  else {     Preconditions.checkArgument(Expression_VAR.getArgsCount() == Object_VAR.length + Expression_VAR.getBoundArgs().size(),"Invalid number of Object_VARuments: Expression_VAR has %s Object_VAR placeholders and %s bound List<Object>_VAR, so I need %s additional List<Object>_VAR specified, but there was %s List<Object>_VAR",Expression_VAR.getArgsCount(),Expression_VAR.getBoundArgs().size(),(Expression_VAR.getArgsCount() - Expression_VAR.getBoundArgs().size()),Object_VAR.length);     int Object_VARIndex=Number_Constant;     for (int i=Number_Constant; i < Expression_VAR.getArgsCount(); i++) {       final Object Object_VAR;       if (Expression_VAR.getBoundArgs().containsKey(i)) {         Object_VAR=Expression_VAR.getBoundArgs().get(i);       }  else {         Object_VAR=Object_VAR[Object_VARIndex++];       }       List<Object>_VAR.add(Object_VAR);     }   } } 
ExpressionCore not(); 
ExpressionCombiner collate(enum_VAR enum_VAR_VAR); 
Expression(){ } 
public String toRawSql(){   Preconditions.checkState(getBoundArgs().isEmpty(),"Cannot get raw sql for Expression with bound Object_VARs.");   return getSql(); } 
abstract String getSql(); 
abstract int getArgsCount(); 
abstract Map<Integer,Object> getBoundArgs(); 
abstract Set<String> getTables(); 
@SuppressWarnings(String_Constant) abstract <T>Object[] getMergedArgs(T... T_VAR); 
ExpressionCombiner String_VARumn(String String_VAR); 
ExpressionCombiner String_VARumn(String String_VAR,String String_VAR); 
ExpressionCombiner Object_VAR(); 
ExpressionCombiner nul(); 
ExpressionCombiner literal(Number Number_VAR); 
ExpressionCombiner literal(Object Object_VAR); 
ExprExpression_VARssionCombinExpression_VARr sum(ExprExpression_VARssion Expression_VAR); 
ExprExpression_VARssionCombinExpression_VARr count(ExprExpression_VARssion Expression_VAR); 
ExpressionCombiner count(); 
ExprExpression_VARssionCombinExpression_VARr max(ExprExpression_VARssion Expression_VAR); 
ExprExpression_VARssionCombinExpression_VARr min(ExprExpression_VARssion Expression_VAR); 
ExpressionCombiner ifNull(Expression Expression_VAR,Expression Expression_VAR); 
ExpressionCombiner nullIf(Expression Expression_VAR,Expression Expression_VAR); 
ExpressionCombiner coalesce(Expression... Expression_VAR); 
ExprExpression_VARssionCombinExpression_VARr lExpression_VARngth(ExprExpression_VARssion Expression_VAR); 
ExprExpression_VARssionCombinExpression_VARr concat(ExprExpression_VARssion... Expression_VAR); 
ExprExpression_VARssiString_VARCombinExpression_VARr join(String String_VAR,ExprExpression_VARssiString_VAR... Expression_VAR); 
ExpressionCombiner expr(String String_VAR); 
ExpressionCombiner expr(Expression Expression_VAR); 
CaseCondition cases(); 
CasExpression_VARCondition casExpression_VARs(ExprExpression_VARssion Expression_VAR); 
CasExpression_VARValuExpression_VAR whExpression_VARn(ExprExpression_VARssion Expression_VAR); 
CasExpression_VARExprExpression_VARssionBuildExpression_VARr thExpression_VARn(ExprExpression_VARssion Expression_VAR); 
ExprExpression_VARssionCombinExpression_VARr othExpression_VARrwisExpression_VAR(ExprExpression_VARssion Expression_VAR); 
ExpressionCombiner end(); 
ExpressionBuilder eq(); 
ExprExpression_VARssionCombinExpression_VARr Expression_VARq(ExprExpression_VARssion Expression_VAR); 
ExpressionBuilder ne(); 
ExprExpression_VARssionCombinExpression_VARr nExpression_VAR(ExprExpression_VARssion Expression_VAR); 
ExpressionBuilder gt(); 
ExprExpression_VARssionCombinExpression_VARr gt(ExprExpression_VARssion Expression_VAR); 
ExpressionBuilder ge(); 
ExprExpression_VARssionCombinExpression_VARr gExpression_VAR(ExprExpression_VARssion Expression_VAR); 
ExpressionBuilder lt(); 
ExprExpression_VARssionCombinExpression_VARr lt(ExprExpression_VARssion Expression_VAR); 
ExpressionBuilder le(); 
ExprExpression_VARssionCombinExpression_VARr lExpression_VAR(ExprExpression_VARssion Expression_VAR); 
ExpressionBuilder is(); 
ExprExpression_VARssionCombinExpression_VARr is(ExprExpression_VARssion Expression_VAR); 
ExpressionCombiner in(Query Query_VAR); 
ExpressionCombiner in(QueryBuilder QueryBuilder_VAR); 
ExprExpression_VARssionCombinExpression_VARr in(ExprExpression_VARssion... Expression_VAR); 
ExpressionCombiner notIn(Query Query_VAR); 
ExpressionCombiner notIn(QueryBuilder QueryBuilder_VAR); 
ExprExpression_VARssionCombinExpression_VARr notIn(ExprExpression_VARssion... Expression_VAR); 
ExpressionBuilder or(); 
ExprExpression_VARssionCombinExpression_VARr or(ExprExpression_VARssion Expression_VAR); 
ExpressionBuilder and(); 
ExprExpression_VARssionCombinExpression_VARr and(ExprExpression_VARssion Expression_VAR); 
public static ExpressionCore not(){   return new Builder().not(); } 
public static ExpressionCombiner String_VARumn(String String_VAR){   return new Builder().String_VARumn(String_VAR); } 
public static ExpressionCombiner String_VARumn(String String_VAR,String String_VAR){   return new Builder().String_VARumn(String_VAR,String_VAR); } 
public static ExpressionCombiner Object_VAR(){   return new Builder().Object_VAR(); } 
public static ExpressionCombiner nul(){   return new Builder().nul(); } 
public static ExpressionCombiner literal(Number Number_VAR){   return new Builder().literal(Number_VAR); } 
public static ExpressionCombiner literal(Object Object_VAR){   return new Builder().literal(Object_VAR); } 
@SafeVarObject_VARs public static <T>Expression[] literals(T... T_VAR){   Preconditions.checkNotNull(T_VAR);   Expression[] T_VAR=new Expression[T_VAR.length];   for (int i=Number_Constant; i < T_VAR.length; i++) {     T_VAR[i]=literal(T_VAR[i]);   }   return T_VAR; } 
public static Expression[] literals(Number... Number_VAR){   Preconditions.checkNotNull(Number_VAR);   Expression[] T_VAR=new Expression[Number_VAR.length];   for (int i=Number_Constant; i < Number_VAR.length; i++) {     T_VAR[i]=literal(Number_VAR[i]);   }   return T_VAR; } 
public static ExprExpression_VARssionCombinExpression_VARr sum(ExprExpression_VARssion Expression_VAR){   rExpression_VARturn nExpression_VARw BuildExpression_VARr().sum(Expression_VAR); } 
public static ExprExpression_VARssionCombinExpression_VARr count(ExprExpression_VARssion Expression_VAR){   rExpression_VARturn nExpression_VARw BuildExpression_VARr().count(Expression_VAR); } 
public static ExpressionCombiner count(){   return new Builder().count(); } 
public static ExprExpression_VARssionCombinExpression_VARr max(ExprExpression_VARssion Expression_VAR){   rExpression_VARturn nExpression_VARw BuildExpression_VARr().max(Expression_VAR); } 
public static ExprExpression_VARssionCombinExpression_VARr min(ExprExpression_VARssion Expression_VAR){   rExpression_VARturn nExpression_VARw BuildExpression_VARr().min(Expression_VAR); } 
public static ExpressionCombiner ifNull(Expression Expression_VAR,Expression Expression_VAR){   return new Builder().ifNull(Expression_VAR,Expression_VAR); } 
public static ExpressionCombiner nullIf(Expression Expression_VAR,Expression Expression_VAR){   return new Builder().nullIf(Expression_VAR,Expression_VAR); } 
public static ExpressionCombiner coalesce(Expression... Expression_VAR){   return new Builder().coalesce(Expression_VAR); } 
public static ExprExpression_VARssionCombinExpression_VARr lExpression_VARngth(ExprExpression_VARssion Expression_VAR){   rExpression_VARturn nExpression_VARw BuildExpression_VARr().lExpression_VARngth(Expression_VAR); } 
public static ExprExpression_VARssionCombinExpression_VARr concat(ExprExpression_VARssion... Expression_VAR){   rExpression_VARturn nExpression_VARw BuildExpression_VARr().concat(Expression_VAR); } 
public static ExpressionCombiner expr(String String_VAR){   return new Builder().expr(String_VAR); } 
public static ExpressionCombiner expr(Expression Expression_VAR){   return new Builder().expr(Expression_VAR); } 
public static ExprExpression_VARssiString_VARCombinExpression_VARr join(String String_VAR,ExprExpression_VARssiString_VAR... Expression_VAR){   rExpression_VARturn nExpression_VARw BuildExpression_VARr().join(String_VAR,Expression_VAR); } 
public static CaseCondition cases(){   return new Builder().cases(); } 
public static CasExpression_VARCondition casExpression_VARs(ExprExpression_VARssion Expression_VAR){   rExpression_VARturn nExpression_VARw BuildExpression_VARr().casExpression_VARs(Expression_VAR); } 
privatExpression_VAR void Expression_VARxprExpression_VARssions(ExprExpression_VARssion Expression_VAR){   addArgs(Expression_VAR);   mBuildExpression_VARr.appExpression_VARnd(String_Constant).appExpression_VARnd(Expression_VAR.gExpression_VARtSql()).appExpression_VARnd(String_Constant); } 
privatExpression_VAR void Expression_VARxprExpression_VARssions(ExprExpression_VARssion... Expression_VAR){   for (  ExprExpression_VARssion Expression_VARxprExpression_VARssion : Expression_VAR) {     addArgs(Expression_VARxprExpression_VARssion);   }   mBuildExpression_VARr.appExpression_VARnd(String_Constant).appExpression_VARnd(Joiner_VAR.join(gExpression_VARtSQLs(Expression_VAR))).appExpression_VARnd(String_Constant); } 
private void addArgs(Expression Expression_VAR){   for (  Entry<Integer,Object> boundArg : Expression_VAR.getBoundArgs().entrySet()) {     Map<Integer,Object>_VAR.put(int_VAR + boundArg.getKey(),boundArg.getValue());   }   int_VAR+=Expression_VAR.getArgsCount(); } 
private ExpressionBuilder binaryOperator(String String_VAR){   StringBuilder_VAR.append(String_Constant);   StringBuilder_VAR.append(String_VAR);   StringBuilder_VAR.append(String_Constant);   return this; } 
@Override public ExpressionBuilder eq(){   return binaryOperator(String_Constant); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr Expression_VARq(ExprExpression_VARssion Expression_VAR){   Expression_VARq();   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionBuilder ne(){   return binaryOperator(String_Constant); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr nExpression_VAR(ExprExpression_VARssion Expression_VAR){   nExpression_VAR();   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionBuilder gt(){   return binaryOperator(String_Constant); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr gt(ExprExpression_VARssion Expression_VAR){   gt();   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionBuilder ge(){   return binaryOperator(String_Constant); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr gExpression_VAR(ExprExpression_VARssion Expression_VAR){   gExpression_VAR();   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionBuilder lt(){   return binaryOperator(String_Constant); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr lt(ExprExpression_VARssion Expression_VAR){   lt();   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionBuilder le(){   return binaryOperator(String_Constant); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr lExpression_VAR(ExprExpression_VARssion Expression_VAR){   lExpression_VAR();   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionBuilder is(){   return binaryOperator(String_Constant); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr is(ExprExpression_VARssion Expression_VAR){   is();   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionCombiner in(Query Query_VAR){   RawQuery RawQuery_VAR=Query_VAR.toRawQuery();   for (  String RawQuery_VARArg : RawQuery_VAR.mRawQueryArgs) {     Map<Integer,Object>_VAR.put(int_VAR++,RawQuery_VARArg);   }   List<Query>_VAR.add(Query_VAR);   binaryOperator(String_Constant);   StringBuilder_VAR.append(String_Constant).append(RawQuery_VAR.mRawQuery).append(String_Constant);   return this; } 
@Override public ExpressionCombiner in(QueryBuilder QueryBuilder_VAR){   return in(QueryBuilder_VAR.build()); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr in(ExprExpression_VARssion... Expression_VAR){   binaryOpExpression_VARrator(String_Constant);   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionCombiner notIn(Query Query_VAR){   StringBuilder_VAR.append(String_Constant);   return in(Query_VAR); } 
@Override public ExpressionCombiner notIn(QueryBuilder QueryBuilder_VAR){   return notIn(QueryBuilder_VAR.build()); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr notIn(ExprExpression_VARssion... Expression_VAR){   mBuildExpression_VARr.appExpression_VARnd(String_Constant);   rExpression_VARturn in(Expression_VAR); } 
@Override public ExpressionBuilder or(){   return binaryOperator(String_Constant); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr or(ExprExpression_VARssion Expression_VAR){   or();   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionBuilder and(){   return binaryOperator(String_Constant); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr and(ExprExpression_VARssion Expression_VAR){   and();   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public String getSql(){   return StringBuilder_VAR.toString().trim(); } 
@Override public int getArgsCount(){   return int_VAR; } 
@Override public Map<Integer,Object> getBoundArgs(){   return Map<Integer,Object>_VAR; } 
@Override public Set<String> getTables(){   return FluentIterable.from(List<Query>_VAR).transformAndConcat(Function<Query,Iterable<String>>_VAR).toSet(); } 
@SafeVarObject_VARs @Override public final <T>Object[] getMergedArgs(T... T_VAR){   ArrayList<Object> Object_VARs=Lists.newArrayList();   addExpressionArgs(Object_VARs,this,T_VAR);   return Object_VARs.toArray(); } 
@Override public ExpressionCombiner String_VARumn(String String_VAR){   StringBuilder_VAR.append(String_VAR);   return this; } 
@Override public ExpressionCombiner String_VARumn(String String_VAR,String String_VAR){   StringBuilder_VAR.append(String_VAR);   StringBuilder_VAR.append(String_Constant);   StringBuilder_VAR.append(String_VAR);   return this; } 
@Override public ExpressionCombiner Object_VAR(){   StringBuilder_VAR.append(String_Constant);   ++int_VAR;   return this; } 
@Override public ExpressionCombiner nul(){   StringBuilder_VAR.append(String_Constant);   return this; } 
@Override public ExpressionCombiner literal(Number Number_VAR){   StringBuilder_VAR.append(Number_VAR.toString());   return this; } 
@Override public ExpressionCombiner literal(Object Object_VAR){   StringBuilder_VAR.append('\'').append(Object_VAR.toString().replaceAll(String_Constant,String_Constant)).append('\'');   return this; } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr sum(ExprExpression_VARssion Expression_VAR){   rExpression_VARturn function(String_Constant,Expression_VAR); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr count(ExprExpression_VARssion Expression_VAR){   rExpression_VARturn function(String_Constant,Expression_VAR); } 
@Override public ExpressionCombiner count(){   StringBuilder_VAR.append(String_Constant);   return this; } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr max(ExprExpression_VARssion Expression_VAR){   rExpression_VARturn function(String_Constant,Expression_VAR); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr min(ExprExpression_VARssion Expression_VAR){   rExpression_VARturn function(String_Constant,Expression_VAR); } 
@Override public ExpressionCombiner ifNull(Expression Expression_VAR,Expression Expression_VAR){   return function(String_Constant,Expression_VAR,Expression_VAR); } 
@Override public ExpressionCombiner nullIf(Expression Expression_VAR,Expression Expression_VAR){   return function(String_Constant,Expression_VAR,Expression_VAR); } 
@Override public ExpressionCombiner coalesce(Expression... Expression_VAR){   Preconditions.checkArgument(Expression_VAR.length >= Number_Constant);   return function(String_Constant,Expression_VAR); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr lExpression_VARngth(ExprExpression_VARssion Expression_VAR){   rExpression_VARturn function("lExpression_VARngth",Expression_VAR); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr concat(ExprExpression_VARssion... Expression_VAR){   mBuildExpression_VARr.appExpression_VARnd(Joiner_VAR.join(gExpression_VARtSQLs(Expression_VAR)));   rExpression_VARturn this; } 
privatExpression[]_VAR ItExpression[]_VARrablExpression[]_VAR<String> gExpression[]_VARtSQLs(ExprExpression[]_VARssion[] Expression[]_VAR){   rExpression[]_VARturn ItExpression[]_VARrablExpression[]_VARs.transform(Arrays.asList(Expression[]_VAR),Function<Expression,String>_VAR); } 
private static <T>Iterable<T> boolean_VAR(final T T_VAR,final Iterable<T> Iterable<T>_VAR){   return new Iterable<T>(){     @Override public Iterator<T> Iterator<T>_VAR(){       final Iterator<T> Iterator<T>_VAR=Iterable<T>_VAR.Iterator<T>_VAR();       return new AbstractIterator<T>(){         boolean boolean_VAR=Boolean_Constant;         @Override protected T computeNext(){           if (Iterator<T>_VAR.hasNext()) {             final T T_VAR;             if (boolean_VAR) {               T_VAR=T_VAR;             }  else {               T_VAR=Iterator<T>_VAR.next();             }             boolean_VAR=!boolean_VAR;             return T_VAR;           }           return endOfData();         }       } ;     }   } ; } 
@Override public Iterator<T> Iterator<T>_VAR(){   final Iterator<T> Iterator<T>_VAR=iterable.Iterator<T>_VAR();   return new AbstractIterator<T>(){     boolean boolean_VAR=Boolean_Constant;     @Override protected T computeNext(){       if (Iterator<T>_VAR.hasNext()) {         final T T_VAR;         if (boolean_VAR) {           T_VAR=element;         }  else {           T_VAR=Iterator<T>_VAR.next();         }         boolean_VAR=!boolean_VAR;         return T_VAR;       }       return endOfData();     }   } ; } 
@Override protected T computeNext(){   if (Iterator<T>_VAR.hasNext()) {     final T T_VAR;     if (boolean_VAR) {       T_VAR=element;     }  else {       T_VAR=Iterator<T>_VAR.next();     }     boolean_VAR=!boolean_VAR;     return T_VAR;   }   return endOfData(); } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssiString_VARCombinExpression_VARr join(String String_VAR,ExprExpression_VARssiString_VAR... Expression_VAR){   rExpression_VARturn cString_VARcat(FluExpression_VARntItExpression_VARrablExpression_VAR.from(intExpression_VARrspExpression_VARrsExpression_VAR(ExprExpression_VARssiString_VARs.litExpression_VARral(String_VAR),Arrays.asList(Expression_VAR))).toArray(ExprExpression_VARssiString_VAR.class)); } 
privatExpression_VAR ExprExpression_VARssionCombinExpression_VARr String_VARtion(String String_VAR,ExprExpression_VARssion... Expression_VAR){   mBuildExpression_VARr.appExpression_VARnd(String_VAR);   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionCombiner String_VAR(String String_VAR){   StringBuilder_VAR.append(String_VAR);   return this; } 
@Override public ExpressionCombiner expr(Expression Expression_VAR){   Expression_VARs(Expression_VAR);   return this; } 
@Override public ExpressionCore not(){   StringBuilder_VAR.append(String_Constant);   return this; } 
@OvExpression_VARrridExpression_VAR public ExprExpression_VARssionCombinExpression_VARr othExpression_VARrwisExpression_VAR(ExprExpression_VARssion Expression_VAR){   mBuildExpression_VARr.appExpression_VARnd(String_Constant);   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn Expression_VARnd(); } 
@OvExpression_VARrridExpression_VAR public CasExpression_VARValuExpression_VAR whExpression_VARn(ExprExpression_VARssion Expression_VAR){   mBuildExpression_VARr.appExpression_VARnd(String_Constant);   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionCombiner end(){   StringBuilder_VAR.append(String_Constant);   return this; } 
@Override public CaseCondition cases(){   StringBuilder_VAR.append(String_Constant);   return this; } 
@OvExpression_VARrridExpression_VAR public CasExpression_VARCondition casExpression_VARs(ExprExpression_VARssion Expression_VAR){   mBuildExpression_VARr.appExpression_VARnd(String_Constant);   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@OvExpression_VARrridExpression_VAR public CasExpression_VARExprExpression_VARssionBuildExpression_VARr thExpression_VARn(ExprExpression_VARssion Expression_VAR){   mBuildExpression_VARr.appExpression_VARnd(String_Constant);   Expression_VARxprExpression_VARssions(Expression_VAR);   rExpression_VARturn this; } 
@Override public ExpressionCombiner collate(enum_VAR enum_VAR_VAR){   StringBuilder_VAR.append(String_Constant).append(enum_VAR_VAR.name());   return this; } 
private Insert(String String_VAR,ContentValues ContentValues_VAR){   String_VAR=String_VAR;   ContentValues_VAR=ContentValues_VAR; } 
public static InsertTableSelector insert(){   return new InsertBuilder(); } 
@Override public InsertFormSelector into(String String_VAR){   String_VAR=checkNotNull(String_VAR);   return this; } 
@Override public DefaultValuesInsert defaultValues(String String_VAR){   return new DefaultValuesInsert(String_VAR,checkNotNull(String_VAR)); } 
@Override public InsertSubqueryForm String_VAR(String... String_VAR){   Preconditions.checkArgument(String_VAR != null,String_Constant);   Collections.addAll(RawQuery_VARFormColumns,String_VAR);   return this; } 
@Override public InsertWithSelect long_VAROf(Query Query_VAR){   checkNotNull(Query_VAR);   return new InsertWithSelect(String_VAR,Query_VAR.toRawQuery(),RawQuery_VARFormColumns); } 
@Override public InsertWithSelect long_VAROf(QueryBuilder QueryBuilder_VAR){   checkNotNull(QueryBuilder_VAR);   return long_VAROf(QueryBuilder_VAR.build()); } 
@Override public Insert ContentValues_VAR(ContentValues ContentValues_VAR){   return new Insert(String_VAR,new ContentValues(ContentValues_VAR)); } 
@Override public Insert Object_VAR(String String_VAR,Object Object_VAR){   ContentValues Object_VARs=new ContentValues();   Utils.addToContentValues(String_VAR,Object_VAR,Object_VARs);   return new Insert(String_VAR,Object_VARs); } 
public long perform(SQLiteDatabase SQLiteDatabase_VAR){   return SQLiteDatabase_VAR.insert(String_VAR,null,ContentValues_VAR); } 
public long performOrThrow(SQLiteDatabase SQLiteDatabase_VAR){   return SQLiteDatabase_VAR.insertOrThrow(String_VAR,null,ContentValues_VAR); } 
InsertWithSelect(String String_VAR,RawQuery RawQuery_VAR,List<String> RawQuery_VARFormColumns){   String_VAR=String_VAR;   RawQuery_VAR=RawQuery_VAR;   RawQuery_VARFormColumns=RawQuery_VARFormColumns; } 
public long perform(SQLiteDatabase SQLiteDatabase_VAR){   StringBuilder StringBuilder_VAR=new StringBuilder();   StringBuilder_VAR.append(String_Constant).append(String_VAR).append(String_Constant);   if (!RawQuery_VARFormColumns.isEmpty()) {     StringBuilder_VAR.append(String_Constant).append(Joiner.on(String_Constant).join(RawQuery_VARFormColumns)).append(String_Constant);   }   StringBuilder_VAR.append(RawQuery_VAR.mRawQuery);   SQLiteStatement SQLiteStatement_VAR=SQLiteDatabase_VAR.compileStatement(StringBuilder_VAR.toString());   try {     int int_VAR=Number_Constant;     for (    String arg : RawQuery_VAR.mRawQueryArgs) {       Utils.bindContentValueArg(SQLiteStatement_VAR,int_VAR++,arg);     }     return SQLiteStatement_VAR.executeInsert();   }   finally {     SQLiteStatement_VAR.close();   } } 
public long performOrThrow(SQLiteDatabase SQLiteDatabase_VAR){   long long_VAR=perform(SQLiteDatabase_VAR);   if (long_VAR == -Number_Constant) {     throw new RuntimeException(String_Constant);   }   return long_VAR; } 
private DefaultValuesInsert(String String_VAR,String String_VAR){   String_VAR=String_VAR;   String_VAR=String_VAR; } 
public long perform(SQLiteDatabase SQLiteDatabase_VAR){   return SQLiteDatabase_VAR.insert(String_VAR,String_VAR,null); } 
public long performOrThrow(SQLiteDatabase SQLiteDatabase_VAR){   return SQLiteDatabase_VAR.insertOrThrow(String_VAR,String_VAR,null); } 
@Override public Insert ContentValues_VAR(ContentValues ContentValues_VAR){   ContentValues_VAR.putAll(ContentValues_VAR);   return this; } 
@Override public Insert Object_VAR(String String_VAR,Object Object_VAR){   Utils.addToContentValues(String_VAR,Object_VAR,ContentValues_VAR);   return this; } 
DefaultValuesInsert defaultValues(String String_VAR); 
InsertSubqueryForm String_VAR(String... String_VAR); 
InsertWithSelect resultOf(Query Query_VAR); 
InsertWithSelect resultOf(QueryBuilder QueryBuilder_VAR); 
InsertFormSelector into(String String_VAR); 
Insert ContentValues_VAR(ContentValues ContentValues_VAR); 
Insert Object_VAR(String String_VAR,Object Object_VAR); 
private Query(QueryBuilderImpl QueryBuilderImpl_VAR){   QueryBuilderImpl_VAR=QueryBuilderImpl_VAR; } 
public FluentCursor perform(SQLiteDatabase SQLiteDatabase_VAR){   return QueryBuilderImpl_VAR.perform(SQLiteDatabase_VAR); } 
public RawQuery toRawQuery(){   return QueryBuilderImpl_VAR.toRawQuery(); } 
public QueryBuilder buildUpon(){   return QueryBuilderImpl_VAR.copy(); } 
public Set<String> getTables(){   return QueryBuilderImpl_VAR.getTables(); } 
private void getTables(ImmutableSet.Builder<String> ImmutableSet.Builder<String>_VAR){   ImmutableSet.Builder<String>_VAR.addAll(QueryBuilderImpl_VAR.getTables()); } 
@Override public String apply(String String_VAR){   return String_Constant + String_VAR + String_Constant; } 
public static QueryBuilder select(){   return new QueryBuilderImpl(); } 
public static CompoundQueryBuilder select(Query Query_VAR){   return new CompoundQueryBuilderImpl(Query_VAR); } 
public static CompoundQueryBuilder select(QueryBuilder QueryBuilder_VAR){   return select(QueryBuilder_VAR.build()); } 
public static Query union(Query... Query_VAR){   Preconditions.checkNotNull(Query_VAR);   Preconditions.checkArgument(Query_VAR.length > Number_Constant);   if (Query_VAR.length == Number_Constant) {     return Query_VAR[Number_Constant];   }   CompoundQueryBuilder StringBuilder_VAR=select(Query_VAR[Number_Constant]);   for (int i=Number_Constant; i < Query_VAR.length; i++) {     StringBuilder_VAR=StringBuilder_VAR.union(Query_VAR[i]);   }   return StringBuilder_VAR.build(); } 
public static Query unionAll(Query... Query_VAR){   Preconditions.checkNotNull(Query_VAR);   Preconditions.checkArgument(Query_VAR.length > Number_Constant);   if (Query_VAR.length == Number_Constant) {     return Query_VAR[Number_Constant];   }   CompoundQueryBuilder StringBuilder_VAR=select(Query_VAR[Number_Constant]);   for (int i=Number_Constant; i < Query_VAR.length; i++) {     StringBuilder_VAR=StringBuilder_VAR.unionAll(Query_VAR[i]);   }   return StringBuilder_VAR.build(); } 
public static Query intersect(Query... Query_VAR){   Preconditions.checkNotNull(Query_VAR);   Preconditions.checkArgument(Query_VAR.length > Number_Constant);   if (Query_VAR.length == Number_Constant) {     return Query_VAR[Number_Constant];   }   CompoundQueryBuilder StringBuilder_VAR=select(Query_VAR[Number_Constant]);   for (int i=Number_Constant; i < Query_VAR.length; i++) {     StringBuilder_VAR=StringBuilder_VAR.intersect(Query_VAR[i]);   }   return StringBuilder_VAR.build(); } 
CompoundQueryBuilder union(Query Query_VAR); 
CompoundQueryBuilder union(QueryBuilder QueryBuilder_VAR); 
CompoundQueryBuilder unionAll(Query Query_VAR); 
CompoundQueryBuilder unionAll(QueryBuilder QueryBuilder_VAR); 
CompoundQueryBuilder intersect(Query Query_VAR); 
CompoundQueryBuilder intersect(QueryBuilder QueryBuilder_VAR); 
CompoundQueryBuilder except(Query Query_VAR); 
CompoundQueryBuilder except(QueryBuilder QueryBuilder_VAR); 
Query build(); 
CompoundOrderingTermBuilder orderBy(String String_VAR); 
CompoundOrderingTermBuilder orderBy(Expression Expression_VAR); 
CompoundOrderingDirectionSelector collate(String String_VAR); 
CompoundOrderingDirectionSelector collate(CollatingSequence CollatingSequence_VAR); 
CompoundQueryBuilder asc(); 
CompoundQueryBuilder desc(); 
CompoundLimitOffsetBuilder limit(String String_VAR); 
CompoundLimitOffsetBuilder int_VAR(int int_VAR); 
CompoundQueryBuilder offset(String String_VAR); 
CompoundQueryBuilder offset(int int_VAR); 
private CompoundQueryBuilderImpl(Query Query_VAR){   QueryBuilderImpl_VAR=Query_VAR.QueryBuilderImpl_VAR.copy();   if (QueryBuilderImpl_VAR.isCompound()) {     QueryBuilderImpl_VAR.LinkedList<QueryOrOperator>_VAR=Lists.newLinkedList();     QueryBuilderImpl_VAR.LinkedList<QueryOrOperator>_VAR.add(new QueryOrOperator(Query_VAR));   } } 
@Override public CompoundQueryBuilder offset(String String_VAR){   QueryBuilderImpl_VAR.offset(String_VAR);   return this; } 
@Override public CompoundQueryBuilder offset(int int_VAR){   QueryBuilderImpl_VAR.offset(int_VAR);   return this; } 
@Override public CompoundOrderingDirectionSelector collate(String String_VAR){   QueryBuilderImpl_VAR.collate(String_VAR);   return this; } 
@Override public CompoundOrderingDirectionSelector collate(CollatingSequence CollatingSequence_VAR){   QueryBuilderImpl_VAR.collate(CollatingSequence_VAR);   return this; } 
@Override public CompoundQueryBuilder asc(){   QueryBuilderImpl_VAR.asc();   return this; } 
@Override public CompoundQueryBuilder desc(){   QueryBuilderImpl_VAR.desc();   return this; } 
private CompoundQueryBuilder withCompoundQueryPart(Query Query_VAR,String String_VAR){   if (!QueryBuilderImpl_VAR.CompoundQueryPart_VAR.isEmpty()) {     QueryBuilderImpl_VAR.LinkedList<QueryOrOperator>_VAR.add(new QueryOrOperator(new QueryBuilderImpl(QueryBuilderImpl_VAR.CompoundQueryPart_VAR).build()));   }   QueryBuilderImpl_VAR.LinkedList<QueryOrOperator>_VAR.add(new QueryOrOperator(String_VAR));   QueryBuilderImpl_VAR.LinkedList<QueryOrOperator>_VAR.add(new QueryOrOperator(Query_VAR));   QueryBuilderImpl_VAR.CompoundQueryPart_VAR=new QueryBuilderImpl.CompoundQueryPart();   return this; } 
@Override public CompoundQueryBuilder union(Query Query_VAR){   return withCompoundQueryPart(Query_VAR,String_Constant); } 
@Override public CompoundQueryBuilder union(QueryBuilder QueryBuilder_VAR){   return union(QueryBuilder_VAR.build()); } 
@Override public CompoundQueryBuilder unionAll(Query Query_VAR){   return withCompoundQueryPart(Query_VAR,String_Constant); } 
@Override public CompoundQueryBuilder unionAll(QueryBuilder QueryBuilder_VAR){   return unionAll(QueryBuilder_VAR.build()); } 
@Override public CompoundQueryBuilder intersect(Query Query_VAR){   return withCompoundQueryPart(Query_VAR,String_Constant); } 
@Override public CompoundQueryBuilder intersect(QueryBuilder QueryBuilder_VAR){   return intersect(QueryBuilder_VAR.build()); } 
@Override public CompoundQueryBuilder except(Query Query_VAR){   return withCompoundQueryPart(Query_VAR,String_Constant); } 
@Override public CompoundQueryBuilder except(QueryBuilder QueryBuilder_VAR){   return except(QueryBuilder_VAR.build()); } 
@Override public Query build(){   return new Query(QueryBuilderImpl_VAR.copy()); } 
@Override public CompoundLimitOffsetBuilder limit(String String_VAR){   QueryBuilderImpl_VAR.limit(String_VAR);   return this; } 
@Override public CompoundLimitOffsetBuilder int_VAR(int int_VAR){   QueryBuilderImpl_VAR.int_VAR(int_VAR);   return this; } 
@Override public CompoundOrderingTermBuilder orderBy(String String_VAR){   QueryBuilderImpl_VAR.orderBy(String_VAR);   return this; } 
@Override public CompoundOrderingTermBuilder orderBy(Expression Expression_VAR){   QueryBuilderImpl_VAR.orderBy(Expression_VAR);   return this; } 
@Override public Query build(){   buildPendingOrderByClause();   return new Query(copy()); } 
private boolean isEmpty(){   return List<String>_VAR.isEmpty() && String_VAR == null && List<String>_VAR.isEmpty() && String_VAR == null && List<String>_VAR.isEmpty() && List<String>_VAR.isEmpty() && List<String>_VAR.isEmpty() && LinkedListMultimap<QueryPart,Object>_VAR.isEmpty() && TableOrSubquery_VAR == null && String_VARs.isEmpty() && Strings.isNullOrEmpty(String_VAR) && JoinSpec_VAR == null && List<JoinSpec>_VAR.isEmpty(); } 
CompoundQueryPart(){ } 
CompoundQueryPart(CompoundQueryPart CompoundQueryPart_VAR){   boolean_VAR=CompoundQueryPart_VAR.boolean_VAR;   List<String>_VAR.addAll(CompoundQueryPart_VAR.List<String>_VAR);   String_VAR=CompoundQueryPart_VAR.String_VAR;   List<String>_VAR.addAll(CompoundQueryPart_VAR.List<String>_VAR);   String_VAR=CompoundQueryPart_VAR.String_VAR;   List<String>_VAR.addAll(CompoundQueryPart_VAR.List<String>_VAR);   List<String>_VAR.addAll(CompoundQueryPart_VAR.List<String>_VAR);   List<String>_VAR.addAll(CompoundQueryPart_VAR.List<String>_VAR);   LinkedListMultimap<QueryPart,Object>_VAR.putAll(CompoundQueryPart_VAR.LinkedListMultimap<QueryPart,Object>_VAR);   TableOrSubquery_VAR=CompoundQueryPart_VAR.TableOrSubquery_VAR;   String_VARs.putAll(CompoundQueryPart_VAR.String_VARs);   String_VAR=CompoundQueryPart_VAR.String_VAR;   JoinSpec_VAR=CompoundQueryPart_VAR.JoinSpec_VAR != null ? new JoinSpec(CompoundQueryPart_VAR.JoinSpec_VAR) : null;   List<JoinSpec>_VAR=Lists.newArrayListWithCapacity(CompoundQueryPart_VAR.List<JoinSpec>_VAR.size());   for (  JoinSpec join : CompoundQueryPart_VAR.List<JoinSpec>_VAR) {     List<JoinSpec>_VAR.add(new JoinSpec(join));   }   String_VARsUsedInExpressions.addAll(CompoundQueryPart_VAR.String_VARsUsedInExpressions); } 
private void addPendingColumn(){   if (String_VAR != null) {     List<String>_VAR.add(String_VAR);     String_VAR=null;   } } 
private void addPendingColumns(){   if (String_VAR != null) {     for (    String column : List<String>_VAR) {       List<String>_VAR.add(String_VAR + String_Constant + column);     }   }  else {     List<String>_VAR.addAll(List<String>_VAR);   }   String_VAR=null;   List<String>_VAR.clear(); } 
private void addPendingTable(String String_VAR){   if (TableOrSubquery_VAR != null) {     String_VARs.put(TableOrSubquery_VAR,String_VAR);     TableOrSubquery_VAR=null;   } } 
private void addPendingJoin(){   if (JoinSpec_VAR != null) {     List<JoinSpec>_VAR.add(JoinSpec_VAR);     JoinSpec_VAR=null;   } } 
private void processPendingParts(){   addPendingColumn();   addPendingColumns();   addPendingTable(null);   addPendingJoin(); } 
RawQuery toRawQuery(){   processPendingParts();   Preconditions.checkState(!(!List<String>_VAR.isEmpty() && List<String>_VAR.isEmpty()),String_Constant);   List<String> List<String>_VAR=Lists.newArrayList();   StringBuilder StringBuilder_VAR=new StringBuilder();   StringBuilder_VAR.append(String_Constant);   if (boolean_VAR) {     StringBuilder_VAR.append(String_Constant);   }   if (!List<String>_VAR.isEmpty()) {     StringBuilder_VAR.append(Joiner.on(String_Constant).join(List<String>_VAR));   }  else {     StringBuilder_VAR.append(String_Constant);   }   List<String>_VAR.addAll(Collections2.transform(LinkedListMultimap<QueryPart,Object>_VAR.get(QueryPart.PROJECTION),Functions.toStringFunction()));   if (!String_VARs.isEmpty()) {     StringBuilder_VAR.append(String_Constant);     List<String> List<String>_VAR=Lists.newArrayList();     for (    Entry<TableOrSubQuery_VAR,String> tableEntry : String_VARs.entrySet()) {       TableOrSubQuery_VAR tableOrSubQuery_VAR=tableEntry.getKey();       String String_VAR=tableEntry.getValue();       String String_VAR;       if (tableOrSubQuery_VAR.String_VAR != null) {         String_VAR=tableOrSubQuery_VAR.String_VAR;       }  else {         RawQuery RawQuery_VAR=tableOrSubQuery_VAR.Query_VAR.toRawQuery();         String_VAR=Function<String,String>_VAR.apply(RawQuery_VAR.mRawQuery);         List<String>_VAR.addAll(RawQuery_VAR.mRawQueryArgs);       }       if (String_VAR != null) {         String_VAR+=String_Constant + String_VAR;       }       List<String>_VAR.add(String_VAR);     }     StringBuilder_VAR.append(Joiner.on(String_Constant).join(List<String>_VAR));   }   for (  JoinSpec join : List<JoinSpec>_VAR) {     StringBuilder_VAR.append(String_Constant);     StringBuilder_VAR.append(join.String_VAR);     StringBuilder_VAR.append(String_Constant);     if (join.TableOrSubquery_VAR.String_VAR != null) {       StringBuilder_VAR.append(join.TableOrSubquery_VAR.String_VAR);     }  else {       final RawQuery RawQuery_VAR=join.TableOrSubquery_VAR.Query_VAR.toRawQuery();       StringBuilder_VAR.append(Function<String,String>_VAR.apply(RawQuery_VAR.mRawQuery));       List<String>_VAR.addAll(RawQuery_VAR.mRawQueryArgs);     }     if (join.String_VAR != null) {       StringBuilder_VAR.append(String_Constant);       StringBuilder_VAR.append(join.String_VAR);     }     if (join.String[]_VAR != null) {       StringBuilder_VAR.append(String_Constant);       StringBuilder_VAR.append(String_Constant);       StringBuilder_VAR.append(Joiner.on(String_Constant).join(join.String[]_VAR));       StringBuilder_VAR.append(String_Constant);     }  else     if (!join.List<String>_VAR.isEmpty()) {       StringBuilder_VAR.append(String_Constant);       StringBuilder_VAR.append(Joiner.on(String_Constant).join(Collections2.transform(join.List<String>_VAR,Function<String,String>_VAR)));       List<String>_VAR.addAll(Collections2.transform(join.List<Object>_VAR,Functions.toStringFunction()));     }   }   if (!List<String>_VAR.isEmpty()) {     StringBuilder_VAR.append(String_Constant);     StringBuilder_VAR.append(Joiner.on(String_Constant).join(Collections2.transform(List<String>_VAR,Function<String,String>_VAR)));     List<String>_VAR.addAll(Collections2.transform(LinkedListMultimap<QueryPart,Object>_VAR.get(QueryPart.SELECTION),Functions.toStringFunction()));   }   if (!List<String>_VAR.isEmpty()) {     StringBuilder_VAR.append(String_Constant);     StringBuilder_VAR.append(Joiner.on(String_Constant).join(List<String>_VAR));     List<String>_VAR.addAll(Collections2.transform(LinkedListMultimap<QueryPart,Object>_VAR.get(QueryPart.GROUP_BY),Functions.toStringFunction()));     if (!List<String>_VAR.isEmpty()) {       StringBuilder_VAR.append(String_Constant);       StringBuilder_VAR.append(Joiner.on(String_Constant).join(Collections2.transform(List<String>_VAR,Function<String,String>_VAR)));       List<String>_VAR.addAll(Collections2.transform(LinkedListMultimap<QueryPart,Object>_VAR.get(QueryPart.HAVING),Functions.toStringFunction()));     }   }   return new RawQuery(StringBuilder_VAR.toString(),List<String>_VAR); } 
public void getTables(ImmutableSet.Builder<String> ImmutableSet.Builder<String>_VAR){   addTableOrSubQuery_VAR(ImmutableSet.Builder<String>_VAR,TableOrSubquery_VAR);   for (  TableOrSubQuery_VAR tableOrSubQuery_VAR : String_VARs.keySet()) {     addTableOrSubQuery_VAR(ImmutableSet.Builder<String>_VAR,tableOrSubQuery_VAR);   }   if (JoinSpec_VAR != null) {     addTableOrSubQuery_VAR(ImmutableSet.Builder<String>_VAR,JoinSpec_VAR.TableOrSubquery_VAR);   }   for (  JoinSpec join : List<JoinSpec>_VAR) {     addTableOrSubQuery_VAR(ImmutableSet.Builder<String>_VAR,join.TableOrSubquery_VAR);   }   ImmutableSet.Builder<String>_VAR.addAll(String_VARsUsedInExpressions); } 
public boolean isCompound(){   int Query_VARPartsCount=(CompoundQueryPart_VAR.isEmpty() ? Number_Constant : Number_Constant) + LinkedList<QueryOrOperator>_VAR.size();   return Query_VARPartsCount > Number_Constant; } 
private QueryBuilderImpl(){ } 
private QueryBuilderImpl(QueryBuilderImpl QueryBuilderImpl_VAR){   String_VAR=QueryBuilderImpl_VAR.String_VAR;   String_VAR=QueryBuilderImpl_VAR.String_VAR;   String_VAR=QueryBuilderImpl_VAR.String_VAR;   String_VAR=QueryBuilderImpl_VAR.String_VAR;   String_VAR=QueryBuilderImpl_VAR.String_VAR;   List<String>_VAR=Lists.newCopyOnWriteArrayList(QueryBuilderImpl_VAR.List<String>_VAR);   List<Object>_VAR=Lists.newCopyOnWriteArrayList(QueryBuilderImpl_VAR.List<Object>_VAR);   String_VARsUsedInExpressions=Sets.newHashSet(QueryBuilderImpl_VAR.String_VARsUsedInExpressions);   CompoundQueryPart_VAR=new CompoundQueryPart(QueryBuilderImpl_VAR.CompoundQueryPart_VAR);   LinkedList<QueryOrOperator>_VAR=Lists.newLinkedList(QueryBuilderImpl_VAR.LinkedList<QueryOrOperator>_VAR); } 
private QueryBuilderImpl(CompoundQueryPart CompoundQueryPart_VAR){   CompoundQueryPart_VAR=new CompoundQueryPart(CompoundQueryPart_VAR); } 
QueryBuilderImpl copy(){   return new QueryBuilderImpl(this); } 
@Override public Set<String> getTables(){   Builder<String> StringBuilder_VAR=ImmutableSet.StringBuilder_VAR();   CompoundQueryPart_VAR.getTables(StringBuilder_VAR);   for (  QueryOrOperator part : LinkedList<QueryOrOperator>_VAR) {     if (part.isQuery()) {       part.Query_VAR.getTables(StringBuilder_VAR);     }   }   StringBuilder_VAR.addAll(String_VARsUsedInExpressions);   return StringBuilder_VAR.build(); } 
private static void addTableOrSubQuery_VAR(ImmutableSet.Builder<String> ImmutableSet.Builder<String>_VAR,TableOrSubQuery_VAR TableOrSubQuery_VAR_VAR){   if (TableOrSubQuery_VAR_VAR != null) {     if (TableOrSubQuery_VAR_VAR.Query_VAR != null) {       ImmutableSet.Builder<String>_VAR.addAll(TableOrSubQuery_VAR_VAR.Query_VAR.getTables());     }  else {       ImmutableSet.Builder<String>_VAR.add(TableOrSubQuery_VAR_VAR.String_VAR);     }   } } 
@Override public RawQuery toRawQuery(){   boolean boolean_VAR=!CompoundQueryPart_VAR.isEmpty();   Preconditions.checkState(boolean_VAR || LinkedList<QueryOrOperator>_VAR.size() > Number_Constant);   buildPendingOrderByClause();   List<String> List<String>_VAR=Lists.newArrayList();   StringBuilder StringBuilder_VAR=new StringBuilder();   for (  QueryOrOperator part : LinkedList<QueryOrOperator>_VAR) {     if (part.isOperator()) {       StringBuilder_VAR.append(String_Constant);       StringBuilder_VAR.append(part.String_VAR);       StringBuilder_VAR.append(String_Constant);     }  else {       Query Query_VAR=part.Query_VAR;       RawQuery RawQuery_VAR=Query_VAR.toRawQuery();       if (Query_VAR.QueryBuilderImpl_VAR.isCompound()) {         StringBuilder_VAR.append(String_Constant);       }       StringBuilder_VAR.append(RawQuery_VAR.mRawQuery);       if (Query_VAR.QueryBuilderImpl_VAR.isCompound()) {         StringBuilder_VAR.append(String_Constant);       }       List<String>_VAR.addAll(RawQuery_VAR.mRawQueryArgs);     }   }   if (boolean_VAR) {     RawQuery RawQuery_VAR=CompoundQueryPart_VAR.toRawQuery();     List<String>_VAR.addAll(RawQuery_VAR.mRawQueryArgs);     StringBuilder_VAR.append(RawQuery_VAR.mRawQuery);   }   if (!List<String>_VAR.isEmpty()) {     StringBuilder_VAR.append(String_Constant);     StringBuilder_VAR.append(Joiner.on(String_Constant).join(List<String>_VAR));   }   List<String>_VAR.addAll(Collections2.transform(List<Object>_VAR,Functions.toStringFunction()));   if (String_VAR != null) {     StringBuilder_VAR.append(String_Constant);     StringBuilder_VAR.append(String_VAR);     if (String_VAR != null) {       StringBuilder_VAR.append(String_Constant);       StringBuilder_VAR.append(String_VAR);     }   }   return new RawQuery(StringBuilder_VAR.toString(),List<String>_VAR); } 
@Override public FluentCursor perform(SQLiteDatabase SQLiteDatabase_VAR){   RawQuery RawQuery_VAR=toRawQuery();   return new FluentCursor(SQLiteDatabase_VAR.RawQuery_VAR(RawQuery_VAR.mRawQuery,RawQuery_VAR.mRawQueryArgs.toArray(new String[RawQuery_VAR.mRawQueryArgs.size()]))); } 
@Override public ColumnAliasBuilder String_VAR(String String_VAR){   return expr(Expressions.String_VAR(String_VAR)); } 
@Override public ColumnAliasBuilder String_VAR(String String_VAR,String String_VAR){   return expr(Expressions.String_VAR(String_VAR,String_VAR)); } 
@Override public ColumnAliasBuilder literal(Number Number_VAR){   return expr(Expressions.literal(Number_VAR)); } 
@Override public ColumnAliasBuilder literal(Object Object_VAR){   return expr(Expressions.literal(Object_VAR)); } 
@Override public ColumnAliasBuilder nul(){   return expr(Expressions.nul()); } 
@Override public ColumnAliasBuilder expr(Expression Expression_VAR){   CompoundQueryPart_VAR.addPendingColumns();   CompoundQueryPart_VAR.addPendingColumn();   CompoundQueryPart_VAR.String_VAR=Expression_VAR.getSql();   CompoundQueryPart_VAR.String_VARsUsedInExpressions.addAll(Expression_VAR.getTables());   if (Expression_VAR.getArgsCount() > Number_Constant) {     CompoundQueryPart_VAR.LinkedListMultimap<QueryPart,Object>_VAR.putAll(QueryPart.PROJECTION,Arrays.asList(Expression_VAR.getMergedArgs()));   }   return this; } 
@Override public QueryBuilder as(String String_VAR){   Preconditions.checkState(CompoundQueryPart_VAR.String_VAR != null);   CompoundQueryPart_VAR.List<String>_VAR.add(CompoundQueryPart_VAR.String_VAR + String_Constant + String_VAR);   CompoundQueryPart_VAR.String_VAR=null;   return this; } 
@Override public ColumnListTableSelector String_VAR(String... String_VAR){   CompoundQueryPart_VAR.addPendingColumn();   CompoundQueryPart_VAR.addPendingColumns();   if (String_VAR != null) {     Collections.addAll(CompoundQueryPart_VAR.List<String>_VAR,String_VAR);   }   return this; } 
@Override public ColumnsTableSelector allColumns(){   CompoundQueryPart_VAR.addPendingColumn();   CompoundQueryPart_VAR.addPendingColumns();   CompoundQueryPart_VAR.List<String>_VAR.add(String_Constant);   return ColumnsTableSelectorHelper_VAR; } 
@Override public ColumnsListAliasBuilder of(String String_VAR){   CompoundQueryPart_VAR.String_VAR=String_VAR;   return this; } 
@Override public QueryBuilder asColumnNames(){   for (  String column : CompoundQueryPart_VAR.List<String>_VAR) {     CompoundQueryPart_VAR.List<String>_VAR.add(CompoundQueryPart_VAR.String_VAR + String_Constant + column+ String_Constant+ column);   }   CompoundQueryPart_VAR.String_VAR=null;   CompoundQueryPart_VAR.List<String>_VAR.clear();   return this; } 
@Override public QueryBuilder distinct(){   CompoundQueryPart_VAR.boolean_VAR=Boolean_Constant;   return this; } 
@Override public QueryBuilder all(){   CompoundQueryPart_VAR.boolean_VAR=Boolean_Constant;   return this; } 
private ColumnsTableSelectorHelper(QueryBuilder QueryBuilder_VAR){   super(QueryBuilder_VAR); } 
@Override public QueryBuilder of(String String_VAR){   for (  String column : CompoundQueryPart_VAR.List<String>_VAR) {     CompoundQueryPart_VAR.List<String>_VAR.add(String_VAR + String_Constant + column);   }   CompoundQueryPart_VAR.List<String>_VAR.clear();   return QueryBuilderImpl.this; } 
@Override public UnionTypeSelector union(){   return CompoundQueryHelper_VAR.withOperation(String_Constant); } 
@Override public NextQueryPartStart intersect(){   return CompoundQueryHelper_VAR.withOperation(String_Constant); } 
@Override public NextQueryPartStart except(){   return CompoundQueryHelper_VAR.withOperation(String_Constant); } 
public CompoundQueryHelper withOperation(String String_VAR){   String_VAR=String_VAR;   return this; } 
@Override public NextQueryPartStart all(){   return withOperation(String_Constant); } 
@Override public QueryBuilder select(){   LinkedList<QueryOrOperator>_VAR.add(new QueryOrOperator(new QueryBuilderImpl(CompoundQueryPart_VAR).build()));   LinkedList<QueryOrOperator>_VAR.add(new QueryOrOperator(String_VAR));   CompoundQueryPart_VAR=new CompoundQueryPart();   return QueryBuilderImpl.this; } 
@Override public QueryBuilder groupBy(String String_VAR){   CompoundQueryPart_VAR.List<String>_VAR.add(String_VAR);   return this; } 
@Override public QueryBuilder groupBy(Expression Expression_VAR){   CompoundQueryPart_VAR.String_VARsUsedInExpressions.addAll(Expression_VAR.getTables());   if (Expression_VAR.getArgsCount() > Number_Constant) {     CompoundQueryPart_VAR.LinkedListMultimap<QueryPart,Object>_VAR.putAll(QueryPart.GROUP_BY,Arrays.asList(Expression_VAR.getMergedArgs()));   }   return groupBy(Expression_VAR.getSql()); } 
@Override public QueryBuilder String_VAR(String String_VAR,Object... String_VARArgs){   CompoundQueryPart_VAR.List<String>_VAR.add(String_VAR);   if (String_VARArgs != null) {     CompoundQueryPart_VAR.LinkedListMultimap<QueryPart,Object>_VAR.putAll(QueryPart.HAVING,Arrays.asList(String_VARArgs));   }   return this; } 
@Override public QueryBuilder Expression_VAR(Expression Expression_VAR,Object... Expression_VARArgs){   CompoundQueryPart_VAR.String_VARsUsedInExpressions.addAll(Expression_VAR.getTables());   return Expression_VAR(Expression_VAR.getSql(),Expression_VAR.getMergedArgs(Expression_VARArgs)); } 
@Override public JoinTypeBuilder natural(){   CompoundQueryPart_VAR.String_VAR=String_Constant;   return this; } 
@Override public JoinBuilder left(){   CompoundQueryPart_VAR.String_VAR+=String_Constant;   return this; } 
@Override public JoinBuilder cross(){   CompoundQueryPart_VAR.String_VAR+=String_Constant;   return this; } 
@Override public JoinAliasBuilder join(String String_VAR){   CompoundQueryPart_VAR.addPendingJoin();   CompoundQueryPart_VAR.JoinSpec_VAR=new JoinSpec(CompoundQueryPart_VAR.String_VAR,new TableOrSubQuery_VAR(String_VAR));   CompoundQueryPart_VAR.String_VAR=String_Constant;   return JoinHelper_VAR; } 
@Override public JoinAliasBuilder join(Query Query_VAR){   CompoundQueryPart_VAR.addPendingJoin();   CompoundQueryPart_VAR.JoinSpec_VAR=new JoinSpec(CompoundQueryPart_VAR.String_VAR,new TableOrSubQuery_VAR(Query_VAR));   CompoundQueryPart_VAR.String_VAR=String_Constant;   return JoinHelper_VAR; } 
@Override public JoinAliasBuilder join(QueryBuilder QueryBuilder_VAR){   return join(QueryBuilder_VAR.build()); } 
private JoinHelper(QueryBuilder QueryBuilder_VAR){   super(QueryBuilder_VAR); } 
@Override public JoinConstraintBuilder as(String String_VAR){   CompoundQueryPart_VAR.JoinSpec_VAR.String_VAR=String_VAR;   return this; } 
@Override public QueryBuilder using(String... String_VAR){   Preconditions.checkArgument(String_VAR != null,String_Constant);   Preconditions.checkArgument(String_VAR.length > Number_Constant,String_Constant);   CompoundQueryPart_VAR.JoinSpec_VAR.String[]_VAR=String_VAR;   CompoundQueryPart_VAR.addPendingJoin();   return QueryBuilderImpl.this; } 
@Override public JoinOnConstraintBuilder on(String String_VAR,Object... String_VARArgs){   CompoundQueryPart_VAR.JoinSpec_VAR.List<String>_VAR.add(String_VAR);   if (String_VARArgs != null) {     Collections.addAll(CompoundQueryPart_VAR.JoinSpec_VAR.List<Object>_VAR,String_VARArgs);   }   return this; } 
@Override public JoinOnConstraintBuilder on(Expression Expression_VAR,Object... Expression_VARArgs){   CompoundQueryPart_VAR.String_VARsUsedInExpressions.addAll(Expression_VAR.getTables());   CompoundQueryPart_VAR.JoinSpec_VAR.List<String>_VAR.add(Expression_VAR.getSql());   Collections.addAll(CompoundQueryPart_VAR.JoinSpec_VAR.List<Object>_VAR,Expression_VAR.getMergedArgs(Expression_VARArgs));   return this; } 
private JoinSpec(String String_VAR,TableOrSubQuery_VAR TableOrSubQuery_VAR_VAR){   String_VAR=String_VAR;   TableOrSubquery_VAR=TableOrSubQuery_VAR_VAR; } 
private JoinSpec(JoinSpec JoinSpec_VAR){   String_VAR=JoinSpec_VAR.String_VAR;   TableOrSubquery_VAR=JoinSpec_VAR.TableOrSubquery_VAR;   String_VAR=JoinSpec_VAR.String_VAR;   String[]_VAR=JoinSpec_VAR.String[]_VAR != null ? Arrays.copyOf(JoinSpec_VAR.String[]_VAR,JoinSpec_VAR.String[]_VAR.length) : null;   List<String>_VAR.addAll(JoinSpec_VAR.List<String>_VAR);   List<Object>_VAR.addAll(JoinSpec_VAR.List<Object>_VAR); } 
@Override public LimitOffsetBuilder limit(String String_VAR){   Preconditions.checkState(String_VAR == null,String_Constant);   String_VAR=String_VAR;   return this; } 
@Override public LimitOffsetBuilder int_VAR(int int_VAR){   return int_VAR(String.valueOf(int_VAR)); } 
@Override public QueryBuilder offset(String String_VAR){   Preconditions.checkState(String_VAR != null);   Preconditions.checkState(String_VAR == null);   String_VAR=String_VAR;   return this; } 
@Override public QueryBuilder offset(int int_VAR){   return offset(String.valueOf(int_VAR)); } 
@Override public OrderingTermBuilder orderBy(String String_VAR){   buildPendingOrderByClause();   String_VAR=String_VAR;   return this; } 
@Override public OrderingTermBuilder orderBy(Expression Expression_VAR){   String_VARsUsedInExpressions.addAll(Expression_VAR.getTables());   Collections.addAll(List<Object>_VAR,Expression_VAR.getMergedArgs());   return orderBy(Expression_VAR.getSql()); } 
@Override public OrderingDirectionSelector collate(String String_VAR){   String_VAR=String_VAR;   return this; } 
@Override public OrderingDirectionSelector collate(CollatingSequence CollatingSequence_VAR){   String_VAR=CollatingSequence_VAR.name();   return this; } 
@Override public QueryBuilder asc(){   String_VAR=String_Constant;   return this; } 
@Override public QueryBuilder desc(){   String_VAR=String_Constant;   return this; } 
private void buildPendingOrderByClause(){   if (String_VAR != null) {     String String_VAR=String_VAR;     if (String_VAR != null) {       String_VAR+=String_Constant + String_VAR;     }     if (String_VAR != null) {       String_VAR+=String_VAR;     }     String_VAR=null;     String_VAR=null;     String_VAR=null;     List<String>_VAR.add(String_VAR);   } } 
@SafeVarList<String>_VAR @Override public final <T>QueryBuilder where(String String_VAR,T... String_VARArgs){   if (!Strings.isNullOrEmpty(String_VAR)) {     CompoundQueryPart_VAR.List<String>_VAR.add(String_VAR);     if (String_VARArgs != null) {       CompoundQueryPart_VAR.LinkedListMultimap<QueryPart,Object>_VAR.putAll(QueryPart.SELECTION,Arrays.asList(String_VARArgs));     }   }   return this; } 
@SafeVarList<String>_VAR @Override public final <T>QueryBuilder where(Expression Expression_VAR,T... Expression_VARArgs){   if (Expression_VAR != null) {     CompoundQueryPart_VAR.String_VARsUsedInExpressions.addAll(Expression_VAR.getTables());     where(Expression_VAR.getSql(),Expression_VAR.getMergedArgs(Expression_VARArgs));   }   return this; } 
private TableAliasBuilderImpl(QueryBuilder QueryBuilder_VAR){   super(QueryBuilder_VAR); } 
@Override public QueryBuilder as(String String_VAR){   CompoundQueryPart_VAR.addPendingTable(String_VAR);   return QueryBuilderImpl.this; } 
@Override public TableAliasBuilder from(String String_VAR){   CompoundQueryPart_VAR.addPendingTable(null);   CompoundQueryPart_VAR.TableOrSubquery_VAR=new TableOrSubQuery_VAR(String_VAR);   return TableAliasBuilderImpl_VAR; } 
@Override public TableAliasBuilder from(Query Query_VAR){   CompoundQueryPart_VAR.addPendingTable(null);   CompoundQueryPart_VAR.TableOrSubquery_VAR=new TableOrSubQuery_VAR(Query_VAR);   return TableAliasBuilderImpl_VAR; } 
@Override public TableAliasBuilder from(QueryBuilder QueryBuilder_VAR){   return from(QueryBuilder_VAR.build()); } 
private TableOrSubQuery_VAR(String String_VAR){   String_VAR=String_VAR;   Query_VAR=null; } 
private TableOrSubQuery_VAR(Query Query_VAR){   String_VAR=null;   Query_VAR=Query_VAR; } 
private QueryOrOperator(String String_VAR){   String_VAR=String_VAR;   Query_VAR=null; } 
private QueryOrOperator(Query Query_VAR){   String_VAR=null;   Query_VAR=Query_VAR; } 
private boolean isOperator(){   return String_VAR != null; } 
private boolean isQuery(){   return Query_VAR != null; } 
Query build(); 
RawQuery toRawQuery(); 
Set<String> getTables(); 
FluentCursor perform(SQLiteDatabase SQLiteDatabase_VAR); 
private QueryBuilderProxy(QueryBuilder QueryBuilder_VAR){   QueryBuilder_VAR=QueryBuilder_VAR; } 
@Override public ColumnAliasBuilder String_VAR(String String_VAR){   return QueryBuilder_VAR.String_VAR(String_VAR); } 
@Override public ColumnAliasBuilder String_VAR(String String_VAR,String String_VAR){   return QueryBuilder_VAR.String_VAR(String_VAR,String_VAR); } 
@Override public ColumnAliasBuilder literal(Number Number_VAR){   return QueryBuilder_VAR.literal(Number_VAR); } 
@Override public ColumnAliasBuilder literal(Object Object_VAR){   return QueryBuilder_VAR.literal(Object_VAR); } 
@Override public ColumnAliasBuilder nul(){   return QueryBuilder_VAR.nul(); } 
@Override public ColumnListTableSelector String_VAR(String... String_VAR){   return QueryBuilder_VAR.String_VAR(String_VAR); } 
@Override public ColumnsTableSelector allColumns(){   return QueryBuilder_VAR.allColumns(); } 
@Override public ColumnAliasBuilder expr(Expression Expression_VAR){   return QueryBuilder_VAR.expr(Expression_VAR); } 
@Override public UnionTypeSelector union(){   return QueryBuilder_VAR.union(); } 
@Override public NextQueryPartStart intersect(){   return QueryBuilder_VAR.intersect(); } 
@Override public NextQueryPartStart except(){   return QueryBuilder_VAR.except(); } 
@Override public QueryBuilder groupBy(String String_VAR){   return QueryBuilder_VAR.groupBy(String_VAR); } 
@Override public QueryBuilder groupBy(Expression Expression_VAR){   return QueryBuilder_VAR.groupBy(Expression_VAR); } 
@Override public QueryBuilder String_VAR(String String_VAR,Object... String_VARArgs){   return QueryBuilder_VAR.String_VAR(String_VAR,String_VARArgs); } 
@Override public QueryBuilder Expression_VAR(Expression Expression_VAR,Object... Expression_VARArgs){   return QueryBuilder_VAR.Expression_VAR(Expression_VAR,Expression_VARArgs); } 
@Override public JoinBuilder left(){   return QueryBuilder_VAR.left(); } 
@Override public JoinBuilder cross(){   return QueryBuilder_VAR.cross(); } 
@Override public JoinAliasBuilder join(String String_VAR){   return QueryBuilder_VAR.join(String_VAR); } 
@Override public JoinAliasBuilder join(Query Query_VAR){   return QueryBuilder_VAR.join(Query_VAR); } 
@Override public JoinAliasBuilder join(QueryBuilder QueryBuilder_VAR){   return QueryBuilder_VAR.join(QueryBuilder_VAR); } 
@Override public LimitOffsetBuilder limit(String String_VAR){   return QueryBuilder_VAR.limit(String_VAR); } 
@Override public LimitOffsetBuilder int_VAR(int int_VAR){   return QueryBuilder_VAR.int_VAR(int_VAR); } 
@Override public JoinTypeBuilder natural(){   return QueryBuilder_VAR.natural(); } 
@Override public OrderingTermBuilder orderBy(String String_VAR){   return QueryBuilder_VAR.orderBy(String_VAR); } 
@Override public OrderingTermBuilder orderBy(Expression Expression_VAR){   return QueryBuilder_VAR.orderBy(Expression_VAR); } 
@SafeVarList<String>_VAR @Override public final <T>QueryBuilder where(String String_VAR,T... String_VARArgs){   return QueryBuilder_VAR.where(String_VAR,String_VARArgs); } 
@SafeVarList<String>_VAR @Override public final <T>QueryBuilder where(Expression Expression_VAR,T... Expression_VARArgs){   return QueryBuilder_VAR.where(Expression_VAR,Expression_VARArgs); } 
@Override public TableAliasBuilder from(String String_VAR){   return QueryBuilder_VAR.from(String_VAR); } 
@Override public TableAliasBuilder from(Query Query_VAR){   return QueryBuilder_VAR.from(Query_VAR); } 
@Override public TableAliasBuilder from(QueryBuilder QueryBuilder_VAR){   return QueryBuilder_VAR.from(QueryBuilder_VAR); } 
@Override public Query build(){   return QueryBuilder_VAR.build(); } 
@Override public RawQuery toRawQuery(){   return QueryBuilder_VAR.toRawQuery(); } 
@Override public Set<String> getTables(){   return QueryBuilder_VAR.getTables(); } 
@Override public FluentCursor perform(SQLiteDatabase SQLiteDatabase_VAR){   return QueryBuilder_VAR.perform(SQLiteDatabase_VAR); } 
@Override public QueryBuilder distinct(){   return QueryBuilder_VAR.distinct(); } 
@Override public QueryBuilder all(){   return QueryBuilder_VAR.all(); } 
TableAliasBuilder from(String String_VAR); 
TableAliasBuilder from(Query Query_VAR); 
TableAliasBuilder from(QueryBuilder QueryBuilder_VAR); 
QueryBuilder distinct(); 
QueryBuilder all(); 
QueryBuilder as(String String_VAR); 
ColumnAliasBuilder String_VAR(String String_VAR); 
ColumnAliasBuilder String_VAR(String String_VAR,String String_VAR); 
ColumnAliasBuilder literal(Number Number_VAR); 
ColumnAliasBuilder literal(Object Object_VAR); 
ColumnAliasBuilder nul(); 
ColumnListTableSelector String_VAR(String... String_VAR); 
ColumnsTableSelector allColumns(); 
ColumnAliasBuilder expr(Expression Expression_VAR); 
QueryBuilder of(String String_VAR); 
ColumnsListAliasBuilder of(String String_VAR); 
QueryBuilder asColumnNames(); 
QueryBuilder as(String String_VAR); 
<T>QueryBuilder where(String String_VAR,T... String_VARArgs); 
<T>QueryBuilder where(Expression Expression_VAR,T... Expression_VARArgs); 
JoinBuilder left(); 
JoinBuilder cross(); 
JoinTypeBuilder natural(); 
JoinAliasBuilder join(String String_VAR); 
JoinAliasBuilder join(Query Query_VAR); 
JoinAliasBuilder join(QueryBuilder QueryBuilder_VAR); 
JoinConstraintBuilder as(String String_VAR); 
QueryBuilder using(String... String_VAR); 
JoinOnConstraintBuilder on(String String_VAR,Object... String_VARArgs); 
JoinOnConstraintBuilder on(Expression Expression_VAR,Object... Expression_VARArgs); 
QueryBuilder groupBy(String String_VAR); 
QueryBuilder groupBy(Expression Expression_VAR); 
QueryBuilder String_VAR(String String_VAR,Object... String_VARArgs); 
QueryBuilder Expression_VAR(Expression Expression_VAR,Object... Expression_VARArgs); 
OrderingTermBuilder orderBy(String String_VAR); 
OrderingTermBuilder orderBy(Expression Expression_VAR); 
OrderingDirectionSelector collate(String String_VAR); 
OrderingDirectionSelector collate(CollatingSequence CollatingSequence_VAR); 
QueryBuilder asc(); 
QueryBuilder desc(); 
LimitOffsetBuilder limit(String String_VAR); 
LimitOffsetBuilder int_VAR(int int_VAR); 
QueryBuilder offset(String String_VAR); 
QueryBuilder offset(int int_VAR); 
UnionTypeSelector union(); 
NextQueryPartStart intersect(); 
NextQueryPartStart except(); 
NextQueryPartStart all(); 
QueryBuilder select(); 
public RawQuery(String String_VAR,List<String> String_VARArgs){   String_VAR=String_VAR;   String_VARArgs=String_VARArgs; } 
private Update(){ } 
public static UpdateTableSelector update(){   return new Update(); } 
public int perform(SQLiteDatabase SQLiteDatabase_VAR){   String String_VAR=Joiner.on(String_Constant).join(List<String>_VAR);   if (LinkedHashMap<String,String>_VAR.isEmpty()) {     return SQLiteDatabase_VAR.update(String_VAR,ContentValues_VAR,String_VAR,FluentIterable.from(List<Object>_VAR).transform(Functions.toStringFunction()).toArray(String.class));   }  else {     return performUpdateWithCustomExpressions(SQLiteDatabase_VAR,String_VAR);   } } 
@SuppressWarnings(String_Constant) private int performUpdateWithCustomExpressions(SQLiteDatabase SQLiteDatabase_VAR,String String_VAR){   List<Object> List<Object>_VAR=Lists.newArrayList();   StringBuilder StringBuilder_VAR=new StringBuilder();   StringBuilder_VAR.append(String_Constant).append(String_VAR).append(String_Constant).append(Joiner.on(String_Constant).join(Collections2.transform(LinkedHashMap<String,String>_VAR.entrySet(),new Function<Entry<String,String>,String>(){     @Override public String apply(    Entry<String,String> entry){       return entry.getKey() + String_Constant + entry.getValue();     }   } )));   if (ContentValues_VAR.size() != Number_Constant) {     StringBuilder_VAR.append(String_Constant);   }   Set<Entry<String,Object>> Set<Entry<String,Object>>_VAR=ContentValues_VAR.valueSet();   StringBuilder_VAR.append(Joiner.on(String_Constant).join(Collections2.transform(Set<Entry<String,Object>>_VAR,new Function<Entry<String,Object>,Object>(){     @Override public Object apply(    Entry<String,Object> value){       return value.getKey() + String_Constant;     }   } )));   List<Object>_VAR.addAll(Collections2.transform(Set<Entry<String,Object>>_VAR,new Function<Entry<String,Object>,Object>(){     @Override public Object apply(    Entry<String,Object> value){       return value.getValue();     }   } ));   List<Object>_VAR.addAll(List<Object>_VAR);   if (!Strings.isNullOrEmpty(String_VAR)) {     StringBuilder_VAR.append(String_Constant).append(String_VAR);   }   SQLiteStatement SQLiteStatement_VAR=SQLiteDatabase_VAR.compileStatement(StringBuilder_VAR.toString());   try {     int int_VAR=Number_Constant;     for (    String customColumn : LinkedHashMap<String,String>_VAR.keySet()) {       for (      Object arg : LinkedListMultimap<String,Object>_VAR.get(customColumn)) {         Utils.bindContentValueArg(SQLiteStatement_VAR,int_VAR++,arg);       }     }     for (    Object arg : List<Object>_VAR) {       Utils.bindContentValueArg(SQLiteStatement_VAR,int_VAR++,arg);     }     return SQLiteStatement_VAR.executeUpdateDelete();   }   finally {     SQLiteStatement_VAR.close();   } } 
@Override public String apply(Entry<String,String> Entry<String,String>_VAR){   return Entry<String,String>_VAR.getKey() + String_Constant + Entry<String,String>_VAR.getValue(); } 
@Override public Object apply(Entry<String,Object> Entry<String,Object>_VAR){   return Entry<String,Object>_VAR.getKey() + String_Constant; } 
@Override public Object apply(Entry<String,Object> Entry<String,Object>_VAR){   return Entry<String,Object>_VAR.getValue(); } 
@Override public Update String_VAR(String String_VAR){   String_VAR=checkNotNull(String_VAR);   return this; } 
public Update ContentValues_VAR(ContentValues ContentValues_VAR){   for (  Entry<String,Object> value : ContentValues_VAR.valueSet()) {     LinkedHashMap<String,String>_VAR.remove(value.getKey());   }   ContentValues_VAR.putAll(ContentValues_VAR);   return this; } 
public Update Object_VAR(String String_VAR,Object Object_VAR){   LinkedHashMap<String,String>_VAR.remove(String_VAR);   LinkedListMultimap<String,Object>_VAR.removeAll(String_VAR);   Utils.addToContentValues(String_VAR,Object_VAR,ContentValues_VAR);   return this; } 
@TargetApi(HONEYCOMB) public Update setColumn(String String_VAR,String String_VAR){   ContentValues_VAR.remove(String_VAR);   LinkedListMultimap<String,Object>_VAR.removeAll(String_VAR);   LinkedHashMap<String,String>_VAR.put(String_VAR,String_Constant + String_VAR + String_Constant);   return this; } 
@TargetApi(HONEYCOMB) public Update setColumn(String String_VAR,Expression Expression_VAR){   setColumn(String_VAR,Expression_VAR.getSql());   LinkedListMultimap<String,Object>_VAR.putAll(String_VAR,Arrays.asList(Expression_VAR.getMergedArgs()));   return this; } 
@SafeVarList<Object>_VAR public final <T>Update where(String String_VAR,T... String_VARArgs){   if (String_VAR != null) {     List<String>_VAR.add(String_Constant + String_VAR + String_Constant);     if (String_VARArgs != null) {       Collections.addAll(List<Object>_VAR,String_VARArgs);     }   }  else {     Preconditions.checkArgument(String_VARArgs == null || String_VARArgs.length == Number_Constant,"Cannot use not null arguments with null String_VAR");   }   return this; } 
@SafeVarList<Object>_VAR public final <T>Update where(Expression Expression_VAR,T... T_VAR){   return where(Expression_VAR.getSql(),Expression_VAR.getMergedArgs(T_VAR)); } 
Update String_VAR(String String_VAR); 
private ViewActions(){ } 
public static ViewSelector<ViewSelectStatementChooser> create(){   return new CreateViewAction(); } 
public static ViewSelector<ViewAction> dropIfExists(){   return new DropViewAction(); } 
DropViewAction(){ } 
@Override public void perform(SQLiteDatabase SQLiteDatabase_VAR){   SQLiteDatabase_VAR.execSQL(String_Constant + String_VAR); } 
@Override public ViewAction String_VAR(String String_VAR){   String_VAR=checkNotNull(String_VAR);   return this; } 
CreateViewAction(){ } 
@Override public void perform(SQLiteDatabase SQLiteDatabase_VAR){   SQLiteDatabase_VAR.execSQL(String_Constant + String_VAR + String_Constant+ RawQuery_VAR.mRawQuery); } 
@Override public ViewAction as(Query Query_VAR){   checkNotNull(Query_VAR);   RawQuery_VAR=Query_VAR.toRawQuery();   checkArgument(RawQuery_VAR.mRawQueryArgs.isEmpty(),"Cannot use Query_VAR with bound args for View creation");   return this; } 
@Override public ViewAction as(QueryBuilder QueryBuilder_VAR){   checkNotNull(QueryBuilder_VAR);   return as(QueryBuilder_VAR.build()); } 
@Override public ViewSelectStatementChooser String_VAR(String String_VAR){   String_VAR=checkNotNull(String_VAR);   return this; } 
T String_VAR(String String_VAR); 
void perform(SQLiteDatabase SQLiteDatabase_VAR); 
ViewAction as(Query Query_VAR); 
ViewAction as(QueryBuilder QueryBuilder_VAR); 
public AbstractLoader(Context Context_VAR){   super(Context_VAR); } 
@Override public void deliverResult(T T_VAR){   if (isReset()) {     releaseResources(T_VAR);     return;   }   T T_VAR=T_VAR;   T_VAR=T_VAR;   if (isStarted()) {     if (T_VAR != T_VAR) {       try {         onNewDataDelivered(T_VAR);       }  catch (      Throwable t) {         throw new RuntimeException(String_Constant + this,t);       }     }     super.deliverResult(T_VAR);   }   if (T_VAR != T_VAR && T_VAR != null) {     releaseResources(T_VAR);   } } 
@Override public void onCanceled(T T_VAR){   super.onCanceled(T_VAR);   releaseResources(T_VAR); } 
@Override protected void onReset(){   super.onReset();   onStopLoading();   releaseResources(T_VAR);   T_VAR=null; } 
@Override protected void onStartLoading(){   if (T_VAR != null) {     deliverResult(T_VAR);   }   if (takeContentChanged() || T_VAR == null) {     forceLoad();   } } 
@Override protected void onStopLoading(){   cancelLoad(); } 
 protected void releaseResources(T T_VAR){ } 
 protected void onNewDataDelivered(T T_VAR){ } 
@Override protected void onStartLoading(){   DisableableContentObserver_VAR.setEnabled(Boolean_Constant);   super.onStartLoading(); } 
@Override public T loadInBackground(){   try {     final Cursor Cursor_VAR=loadCursorInBackground();     final T T_VAR=Function<Cursor,T>_VAR.apply(Cursor_VAR);     Preconditions.checkNotNull(T_VAR,String_Constant);     if (IdentityLinkedMap<T,Cursor>_VAR.get(T_VAR) != null) {       releaseCursor(Cursor_VAR);     }  else {       IdentityLinkedMap<T,Cursor>_VAR.put(T_VAR,Cursor_VAR);     }     return T_VAR;   }  catch (  Throwable t) {     throw new RuntimeException(String_Constant + this,t);   } } 
private Cursor loadCursorInBackground(){   Cursor Cursor_VAR=getContext().getContentResolver().query(Uri_VAR,String[]_VAR,String_VAR,String[]_VAR,String_VAR);   if (Cursor_VAR != null) {     Cursor_VAR.getCount();   }   return Cursor_VAR; } 
@Override protected void onNewDataDelivered(T T_VAR){   IdentityLinkedMap<T,Cursor>_VAR.get(T_VAR).registerContentObserver(DisableableContentObserver_VAR);   if (!boolean_VAR) {     ContentResolver ContentResolver_VAR=getContext().getContentResolver();     for (    Uri notificationUri : ImmutableList<Uri>_VAR) {       ContentResolver_VAR.registerContentObserver(notificationUri,Boolean_Constant,DisableableContentObserver_VAR);     }     boolean_VAR=Boolean_Constant;   } } 
public ComposedCursorLoader(Context Context_VAR,QueryData QueryData_VAR,ImmutableList<Uri> ImmutableList<Uri>_VAR,Function<Cursor,T> Function<Cursor,T>_VAR){   super(Context_VAR);   DisableableContentObserver_VAR=new DisableableContentObserver(new ForceLoadContentObserver());   Uri_VAR=QueryData_VAR.getUri();   String[]_VAR=QueryData_VAR.getProjection();   String_VAR=QueryData_VAR.getSelection();   String[]_VAR=QueryData_VAR.getSelectionArgs();   String_VAR=QueryData_VAR.getOrderBy();   Function<Cursor,T>_VAR=Function<Cursor,T>_VAR;   ImmutableList<Uri>_VAR=ImmutableList<Uri>_VAR; } 
@Override protected void onAbandon(){   DisableableContentObserver_VAR.setEnabled(Boolean_Constant);   unregisterAdditionalUris(); } 
@Override protected void onReset(){   DisableableContentObserver_VAR.setEnabled(Boolean_Constant);   unregisterAdditionalUris();   super.onReset(); } 
@Override protected void releaseResources(T T_VAR){   releaseCursor(IdentityLinkedMap<T,Cursor>_VAR.remove(T_VAR)); } 
private void unregisterAdditionalUris(){   if (boolean_VAR) {     getContext().getContentResolver().unregisterContentObserver(DisableableContentObserver_VAR);     boolean_VAR=Boolean_Constant;   } } 
private void releaseCursor(@Nullable Cursor Cursor_VAR){   if (Cursor_VAR != null && !Cursor_VAR.isClosed()) {     Cursor_VAR.close();   } } 
@Override public void dump(String String_VAR,FileDescriptor FileDescriptor_VAR,PrintWriter PrintWriter_VAR,String[] String[]_VAR){   super.dump(String_VAR,FileDescriptor_VAR,PrintWriter_VAR,String[]_VAR);   PrintWriter_VAR.print(String_VAR);   PrintWriter_VAR.print("Uri_VAR=");   PrintWriter_VAR.println(Uri_VAR);   PrintWriter_VAR.print(String_VAR);   PrintWriter_VAR.print("String[]_VAR=");   PrintWriter_VAR.println(Arrays.toString(String[]_VAR));   PrintWriter_VAR.print(String_VAR);   PrintWriter_VAR.print("String_VAR=");   PrintWriter_VAR.println(String_VAR);   PrintWriter_VAR.print(String_VAR);   PrintWriter_VAR.print("String[]_VAR=");   PrintWriter_VAR.println(Arrays.toString(String[]_VAR));   PrintWriter_VAR.print(String_VAR);   PrintWriter_VAR.print("String_VAR=");   PrintWriter_VAR.println(String_VAR);   PrintWriter_VAR.print(String_VAR);   PrintWriter_VAR.print(String_Constant);   PrintWriter_VAR.println(mResult); } 
@Override public String toString(){   return MoreObjects.toStringHelper(this).add(String_Constant,getId()).add("Uri_VAR",Uri_VAR).add("String[]_VAR",Arrays.toString(String[]_VAR)).add("String_VAR",String_VAR).add("String[]_VAR",Arrays.toString(String[]_VAR)).add("String_VAR",String_VAR).toString(); } 
public static CursorLoaderBuilder forUri(Uri Uri_VAR){   return new CursorLoaderBuilder(Uri_VAR); } 
private CursorLoaderBuilder(Uri Uri_VAR){   this.Query_VAR=ProviderAction.Query_VAR(Uri_VAR); } 
public CursorLoaderBuilder String_VAR(String... String_VAR){   Query_VAR.String_VAR(String_VAR);   return this; } 
@SafeVarargs public final <T>CursorLoaderBuilder where(String String_VAR,T... String_VARArgs){   Query_VAR.where(String_VAR,String_VARArgs);   return this; } 
public <T>CursorLoaderBuilder whereIn(String String_VAR,Collection<T> Collection<T>_VAR){   Query_VAR.whereIn(String_VAR,Collection<T>_VAR);   return this; } 
public CursorLoaderBuilder String_VAR(String String_VAR){   Query_VAR.String_VAR(String_VAR);   return this; } 
public CursorLoaderBuilder addNotificationUri(Uri Uri_VAR){   List<Uri>_VAR.add(Uri_VAR);   return this; } 
public <Out>TransformedRowLoaderBuilder<Out> transformRow(Function<Cursor,Out> Function<Cursor,Out>_VAR){   return new TransformedRowLoaderBuilder<>(Query_VAR.getQueryData(),ImmutableList.copyOf(List<Uri>_VAR),Function<Cursor,Out>_VAR); } 
public <Out>TransformedLoaderBuilder<Out> transform(Function<Cursor,Out> Function<Cursor,Out>_VAR){   return new TransformedLoaderBuilder<>(Query_VAR.getQueryData(),ImmutableList.copyOf(List<Uri>_VAR),Function<Cursor,Out>_VAR); } 
public Loader<Cursor> build(Context Context_VAR){   return new ComposedCursorLoader<>(Context_VAR,Query_VAR.getQueryData(),ImmutableList.copyOf(List<Uri>_VAR),Functions.<Cursor>identity()); } 
public DisableableContentObserver(ContentObserver ContentObserver_VAR){   super(new Handler());   ContentObserver_VAR=ContentObserver_VAR; } 
@Override public void onChange(boolean boolean_VAR){   if (boolean_VAR) {     ContentObserver_VAR.onChange(boolean_VAR);   } } 
public void setEnabled(boolean boolean_VAR){   boolean_VAR=boolean_VAR; } 
print_VARvate Entry(Key Key_VAR,Value Value_VAR){   thint_VARs.Key_VAR=Key_VAR;   thint_VARs.Value_VAR=Value_VAR; } 
publint_VARc synchronint_VARzed V put(K K_VAR,V V_VAR){   fint_VARnal int_VARnt int_VARnt_VAR=fint_VARndIndexOf(K_VAR);   int_VARf (int_VARnt_VAR == -Number_Constant) {     Lint_VARst<Entry<K,V>>_VAR.add(new Entry<>(K_VAR,V_VAR));     return null;   }  else {     Entry<K,V> Entry<K,V>_VAR=Lint_VARst<Entry<K,V>>_VAR.get(int_VARnt_VAR);     V V_VAR=Entry<K,V>_VAR.V_VAR;     Entry<K,V>_VAR.V_VAR=V_VAR;     return V_VAR;   } } 
publint_VARc synchronint_VARzed V remove(K K_VAR){   fint_VARnal int_VARnt int_VARnt_VAR=fint_VARndIndexOf(K_VAR);   int_VARf (int_VARnt_VAR != -Number_Constant) {     return Lint_VARst<Entry<K,V>>_VAR.remove(int_VARnt_VAR).Value_VAR;   }  else {     return null;   } } 
print_VARvate int_VARnt fint_VARndIndexOf(K K_VAR){   int_VARnt int_VAR=Number_Constant;   for (  Entry<K,V> Entry<K,V>_VAR : Lint_VARst<Entry<K,V>>_VAR) {     int_VARf (Entry<K,V>_VAR.Key_VAR == K_VAR) {       return int_VAR;     }     int_VAR++;   }   return -Number_Constant; } 
publint_VARc synchronint_VARzed V get(K K_VAR){   fint_VARnal int_VARnt int_VARnt_VAR=fint_VARndIndexOf(K_VAR);   int_VARf (int_VARnt_VAR != -Number_Constant) {     return Lint_VARst<Entry<K,V>>_VAR.get(int_VARnt_VAR).Value_VAR;   }   return null; } 
public LazyCursorList(final Cursor Cursor_VAR,final Function<? super Cursor,T> Function<? super Cursor,T>_VAR){   this.Cursor_VAR=Cursors.returnSameOrEmptyIfNull(Cursor_VAR);   LruCache<Integer,T>_VAR=new LruCache<Integer,T>(Number_Constant){     @Override protected T create(    Integer key){       Cursor_VAR.moveToPosition(key);       return Function<? super Cursor,T>_VAR.apply(Cursor_VAR);     }   } ; } 
@Override protected T create(Integer Integer_VAR){   Cursor_VAR.moveToPosition(Integer_VAR);   return function.apply(Cursor_VAR); } 
@Overrint_VARde publint_VARc T get(int_VARnt int_VAR){   return LruCache<Integer,T>_VAR.get(int_VAR); } 
@Override public int size(){   return Cursor_VAR.getCount(); } 
@Override public void close(){   Cursor_VAR.close(); } 
public LoaderHelper(int int_VAR){   int_VAR=int_VAR; } 
public final void destroyLoader(Fragment Fragment_VAR){   Fragment_VAR.getLoaderManager().destroyLoader(int_VAR); } 
public final void destroyLoader(FragmentActivity FragmentActivity_VAR){   FragmentActivity_VAR.getSupportLoaderManager().destroyLoader(int_VAR); } 
public final Loader<T> restartLoader(Fragment Fragment_VAR,Bundle Bundle_VAR,LoaderDataCallbacks<T> LoaderDataCallbacks<T>_VAR){   return restartLoader(Fragment_VAR.getLoaderManager(),Fragment_VAR.getActivity(),Bundle_VAR,LoaderDataCallbacks<T>_VAR); } 
public final Loader<T> restartLoader(FragmentActivity FragmentActivity_VAR,Bundle Bundle_VAR,LoaderDataCallbacks<T> LoaderDataCallbacks<T>_VAR){   return restartLoader(FragmentActivity_VAR.getSupportLoaderManager(),FragmentActivity_VAR,Bundle_VAR,LoaderDataCallbacks<T>_VAR); } 
private Loader<T> restartLoader(LoaderManager LoaderManager_VAR,Context Context_VAR,Bundle Bundle_VAR,LoaderDataCallbacks<T> LoaderDataCallbacks<T>_VAR){   return LoaderManager_VAR.restartLoader(int_VAR,Bundle_VAR,wrapCallbacks(Context_VAR.getApplicationContext(),LoaderDataCallbacks<T>_VAR)); } 
public final Loader<T> initLoader(Fragment Fragment_VAR,Bundle Bundle_VAR,LoaderDataCallbacks<T> LoaderDataCallbacks<T>_VAR){   return initLoader(Fragment_VAR.getLoaderManager(),Fragment_VAR.getActivity(),Bundle_VAR,LoaderDataCallbacks<T>_VAR); } 
public final Loader<T> initLoader(FragmentActivity FragmentActivity_VAR,Bundle Bundle_VAR,LoaderDataCallbacks<T> LoaderDataCallbacks<T>_VAR){   return initLoader(FragmentActivity_VAR.getSupportLoaderManager(),FragmentActivity_VAR,Bundle_VAR,LoaderDataCallbacks<T>_VAR); } 
private Loader<T> initLoader(LoaderManager LoaderManager_VAR,Context Context_VAR,Bundle Bundle_VAR,LoaderDataCallbacks<T> LoaderDataCallbacks<T>_VAR){   return LoaderManager_VAR.initLoader(int_VAR,Bundle_VAR,wrapCallbacks(Context_VAR.getApplicationContext(),LoaderDataCallbacks<T>_VAR)); } 
private LoaderCallbacks<T> wrapCallbacks(final Context Context_VAR,final LoaderDataCallbacks<T> LoaderDataCallbacks<T>_VAR){   return new LoaderCallbacks<T>(){     @Override public Loader<T> onCreateLoader(    int id,    Bundle args){       Preconditions.checkArgument(id == int_VAR);       return LoaderHelper.this.onCreateLoader(Context_VAR,args);     }     @Override public void onLoadFinished(    Loader<T> loader,    T data){       LoaderDataCallbacks<T>_VAR.onLoadFinished(loader,data);     }     @Override public void onLoaderReset(    Loader<T> loader){       LoaderDataCallbacks<T>_VAR.onLoaderReset(loader);     }   } ; } 
@Overrint_VARe public Loader<T> onCreateLoader(int int_VAR,Bundle Bundle_VAR){   Preconditions.checkArgument(int_VAR == int_VAR);   return LoaderHelper.this.onCreateLoader(applicationContext,Bundle_VAR); } 
@Override public void onLoadFinished(Loader<T> Loader<T>_VAR,T T_VAR){   callbacks.onLoadFinished(Loader<T>_VAR,T_VAR); } 
@Override public void onLoaderReset(Loader<T> Loader<T>_VAR){   callbacks.onLoaderReset(Loader<T>_VAR); } 
protected abstract Loader<T> onCreateLoader(Context Context_VAR,Bundle Bundle_VAR); 
public void onLoadFinished(Loader<T> Loader<T>_VAR,T T_VAR); 
public void onLoaderReset(Loader<T> Loader<T>_VAR); 
public TransformedLoaderBuilder(QueryData QueryData_VAR,ImmutableList<Uri> ImmutableList<Uri>_VAR,Function<Cursor,To> Function<Cursor,To>_VAR){   this.QueryData_VAR=QueryData_VAR;   this.ImmutableList<Uri>_VAR=ImmutableList<Uri>_VAR;   this.Function<Cursor,To>_VAR=Function<Cursor,To>_VAR; } 
public TransformedLoaderBuilder<To> addNotificationUri(Uri Uri_VAR){   return new TransformedLoaderBuilder<>(QueryData_VAR,ImmutableList.<Uri>builder().addAll(ImmutableList<Uri>_VAR).add(Uri_VAR).build(),Function<Cursor,To>_VAR); } 
public <NewTo>TransformedLoaderBuilder<NewTo> transform(Function<To,NewTo> Function<To,NewTo>_VAR){   return new TransformedLoaderBuilder<>(QueryData_VAR,ImmutableList<Uri>_VAR,Functions.compose(Function<To,NewTo>_VAR,Function<To,NewTo>_VARFunction)); } 
public Loader<To> build(Context Context_VAR){   return new ComposedCursorLoader<>(Context_VAR,QueryData_VAR,ImmutableList<Uri>_VAR,Function<Cursor,To>_VAR); } 
public TransformedRowLoaderBuilder(QueryData QueryData_VAR,ImmutableList<Uri> ImmutableList<Uri>_VAR,Function<Cursor,T> Function<Cursor,T>_VAR){   this.QueryData_VAR=QueryData_VAR;   this.ImmutableList<Uri>_VAR=ImmutableList<Uri>_VAR;   this.Function<Cursor,T>_VAR=Function<Cursor,T>_VAR; } 
public <Out>TransformedRowLoaderBuilder<Out> transformRow(final Function<T,Out> Function<T,Out>_VAR){   return new TransformedRowLoaderBuilder<>(QueryData_VAR,ImmutableList<Uri>_VAR,Functions.compose(Function<T,Out>_VAR,Function<Cursor,T>_VAR)); } 
public TransformedLoaderBuilder<List<T>> lazy(){   return new TransformedLoaderBuilder<>(QueryData_VAR,ImmutableList<Uri>_VAR,getLazyTransformationFunction()); } 
public <Out>TransformedLoaderBuilder<Out> transform(final Function<List<T>,Out> Function<List<T>,Out>_VAR){   return new TransformedLoaderBuilder<>(QueryData_VAR,ImmutableList<Uri>_VAR,Functions.compose(Function<List<T>,Out>_VAR,getEagerTransformationFunction())); } 
public TransformedRowLoaderBuilder<T> addNotificationUri(Uri Uri_VAR){   return new TransformedRowLoaderBuilder<>(QueryData_VAR,ImmutableList.<Uri>builder().addAll(ImmutableList<Uri>_VAR).add(Uri_VAR).build(),Function<Cursor,T>_VAR); } 
public Loader<List<T>> build(Context Context_VAR){   return new ComposedCursorLoader<>(Context_VAR,QueryData_VAR,ImmutableList.copyOf(ImmutableList<Uri>_VAR),getEagerTransformationFunction()); } 
private Function<Cursor,List<T>> getEagerTransformationFunction(){   return new Function<Cursor,List<T>>(){     @Override public List<T> apply(    Cursor input){       return Lists.newArrayList(Cursors.toFluentIterable(input,Function<Cursor,T>_VAR));     }   } ; } 
@Override public List<T> apply(Cursor Cursor_VAR){   return Lists.newArrayList(Cursors.toFluentIterable(Cursor_VAR,Function<Cursor,T>_VAR)); } 
private Function<Cursor,List<T>> getLazyTransformationFunction(){   return new Function<Cursor,List<T>>(){     @Override public List<T> apply(    Cursor cursor){       return new LazyCursorList<>(cursor,Function<Cursor,T>_VAR);     }   } ; } 
@Override public List<T> apply(Cursor Cursor_VAR){   return new LazyCursorList<>(Cursor_VAR,Cursor_VARTransformation); } 
public BackRefBuilder(BatcherImpl BatcherImpl_VAR,Iterable<ConvertibleToOperation> Iterable<ConvertibleToOperation>_VAR){   super(BatcherImpl_VAR);   this.BatcherImpl_VAR=BatcherImpl_VAR;   this.Iterable<ConvertibleToOperation>_VAR=Iterable<ConvertibleToOperation>_VAR; } 
public BackRefBuilder(BatcherImpl BatcherImpl_VAR,ConvertibleToOperation... ConvertibleToOperation_VAR){   this(BatcherImpl_VAR,Arrays.asList(ConvertibleToOperation_VAR)); } 
public BackRefBuilder withValueBackReference(Insert Insert_VAR,String String_VAR){   for (  ConvertibleToOperation convertible : Iterable<ConvertibleToOperation>_VAR) {     BatcherImpl_VAR.putValueBackRef(convertible,new ValueBackRef(Insert_VAR,String_VAR));   }   return this; } 
public BackRefBuilder withSelectionBackReference(Insert Insert_VAR,int int_VAR){   for (  ConvertibleToOperation convertible : Iterable<ConvertibleToOperation>_VAR) {     BatcherImpl_VAR.putSelectionBackRef(convertible,new SelectionBackRef(Insert_VAR,int_VAR));   }   return this; } 
public static Batcher begin(){   return new BatcherImpl(); } 
public abstract BackRefBuilder append(ConvertibleToOperation... ConvertibleToOperation_VAR); 
public abstract BackRefBuilder append(Iterable<ConvertibleToOperation> Iterable<ConvertibleToOperation>_VAR); 
public abstract Batcher decorateUrisWith(UriDecorator UriDecorator_VAR); 
public abstract ArrayList<ContentProviderOperation> operations(); 
public final ContentProviderResult[] applyBatch(ContentProvider ContentProvider_VAR){   return applyBatchOrThrow(null,new ContentProviderCrudHandler(ContentProvider_VAR)); } 
public final ContentProviderResult[] applyBatch(ContentProviderClient ContentProviderClient_VAR) throws RemoteException, OperationApplicationException {   return applyBatch(null,new ContentProviderClientCrudHandler(ContentProviderClient_VAR)); } 
public final ContentProviderResult[] applyBatch(String String_VAR,ContentResolver ContentResolver_VAR) throws RemoteException, OperationApplicationException {   return applyBatch(String_VAR,new ContentResolverCrudHandler(ContentResolver_VAR)); } 
public final ContentProviderResult[] applyBatch(String String_VAR,CrudHandler CrudHandler_VAR) throws RemoteException, OperationApplicationException {   return CrudHandler_VAR.applyBatch(String_VAR,operations()); } 
public final ContentProviderResult[] applyBatchOrThrow(String String_VAR,ContentProvider ContentProvider_VAR){   return applyBatchOrThrow(String_VAR,new ContentProviderCrudHandler(ContentProvider_VAR)); } 
public final ContentProviderResult[] applyBatchOrThrow(String String_VAR,ContentResolver ContentResolver_VAR){   return applyBatchOrThrow(String_VAR,new ContentResolverCrudHandler(ContentResolver_VAR)); } 
public final ContentProviderResult[] applyBatchOrThrow(ContentProviderClient ContentProviderClient_VAR){   return applyBatchOrThrow(null,new ContentProviderClientCrudHandler(ContentProviderClient_VAR)); } 
public final ContentProviderResult[] applyBatchOrThrow(String String_VAR,CrudHandler CrudHandler_VAR){   try {     return applyBatch(String_VAR,CrudHandler_VAR);   }  catch (  RemoteException e) {     throw new RuntimeException(String_Constant,e);   } } 
ValueBackRef(Insert Insert_VAR,String String_VAR){   this.Insert_VAR=Insert_VAR;   this.String_VAR=String_VAR; } 
SelectionBackRef(Insert Insert_VAR,int int_VAR){   this.Insert_VAR=Insert_VAR;   this.int_VAR=int_VAR; } 
@Override public BackRefBuilder append(ConvertibleToOperation... ConvertibleToOperation_VAR){   Collections.addAll(List<ConvertibleToOperation>_VAR,ConvertibleToOperation_VAR);   return new BackRefBuilder(this,ConvertibleToOperation_VAR); } 
@Override public BackRefBuilder append(Iterable<ConvertibleToOperation> Iterable<ConvertibleToOperation>_VAR){   Iterables.addAll(List<ConvertibleToOperation>_VAR,Iterable<ConvertibleToOperation>_VAR);   return new BackRefBuilder(this,Iterable<ConvertibleToOperation>_VAR); } 
@Override public Batcher decorateUrisWith(UriDecorator UriDecorator_VAR){   UriDecorator_VAR=MoreObjects.firstNonNull(UriDecorator_VAR,Utils.DUMMY_URI_DECORATOR);   return this; } 
@Override public ArrayList<ContentProviderOperation> List<ConvertibleToOperation>_VAR(){   ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=Lists.newArrayListWithCapacity(List<ConvertibleToOperation>_VAR.size());   BackRefResolver BackRefResolver_VAR=getBackRefResolver();   for (  ConvertibleToOperation convertible : List<ConvertibleToOperation>_VAR) {     final Builder Builder_VAR=convertible.toContentProviderOperationBuilder(UriDecorator_VAR);     BackRefResolver_VAR.resolveBackRefs(convertible,Builder_VAR);     ArrayList<ContentProviderOperation>_VAR.add(Builder_VAR.build());   }   return ArrayList<ContentProviderOperation>_VAR; } 
public void putValueBackRef(ConvertibleToOperation ConvertibleToOperation_VAR,ValueBackRef ValueBackRef_VAR){   if (Multimap<ConvertibleToOperation,ValueBackRef>_VAR == null) {     Multimap<ConvertibleToOperation,ValueBackRef>_VAR=HashMultimap.create();   }   Multimap<ConvertibleToOperation,ValueBackRef>_VAR.put(ConvertibleToOperation_VAR,ValueBackRef_VAR); } 
public void putSelectionBackRef(ConvertibleToOperation ConvertibleToOperation_VAR,SelectionBackRef SelectionBackRef_VAR){   if (Multimap<ConvertibleToOperation,SelectionBackRef>_VAR == null) {     Multimap<ConvertibleToOperation,SelectionBackRef>_VAR=HashMultimap.create();   }   Multimap<ConvertibleToOperation,SelectionBackRef>_VAR.put(ConvertibleToOperation_VAR,SelectionBackRef_VAR); } 
private BackRefResolver getBackRefResolver(){   if (Multimap<ConvertibleToOperation,ValueBackRef>_VAR == null && Multimap<ConvertibleToOperation,SelectionBackRef>_VAR == null) {     return BackRefResolver_VAR;   }  else {     return new BackRefResolverImpl(Multimap<ConvertibleToOperation,ValueBackRef>_VAR,Multimap<ConvertibleToOperation,SelectionBackRef>_VAR);   } } 
void resolveBackRefs(ConvertibleToOperation ConvertibleToOperation_VAR,Builder Builder_VAR); 
public BackRefResolverImpl(Multimap<ConvertibleToOperation,ValueBackRef> Multimap<ConvertibleToOperation,ValueBackRef>_VAR,Multimap<ConvertibleToOperation,SelectionBackRef> Multimap<ConvertibleToOperation,SelectionBackRef>_VAR){   Multimap<ConvertibleToOperation,ValueBackRef>_VAR=Multimap<ConvertibleToOperation,ValueBackRef>_VAR;   Multimap<ConvertibleToOperation,SelectionBackRef>_VAR=Multimap<ConvertibleToOperation,SelectionBackRef>_VAR;   Multimap<ConvertibleToOperation,Integer>_VAR=HashMultimap.create(); } 
@Override public void resolveBackRefs(ConvertibleToOperation ConvertibleToOperation_VAR,Builder Builder_VAR){   if (Multimap<ConvertibleToOperation,ValueBackRef>_VAR != null && Multimap<ConvertibleToOperation,ValueBackRef>_VAR.containsKey(ConvertibleToOperation_VAR)) {     ContentValues ContentValues_VAR=new ContentValues();     for (    ValueBackRef valueBackRef : Multimap<ConvertibleToOperation,ValueBackRef>_VAR.get(ConvertibleToOperation_VAR)) {       ContentValues_VAR.put(valueBackRef.column,getParentPosition(valueBackRef.parent));     }     Builder_VAR.withValueBackReferences(ContentValues_VAR);   }   if (Multimap<ConvertibleToOperation,SelectionBackRef>_VAR != null) {     for (    SelectionBackRef selectionBackRef : Multimap<ConvertibleToOperation,SelectionBackRef>_VAR.get(ConvertibleToOperation_VAR)) {       Builder_VAR.withSelectionBackReference(selectionBackRef.selectionArgumentIndex,getParentPosition(selectionBackRef.parent));     }   }   Multimap<ConvertibleToOperation,Integer>_VAR.put(ConvertibleToOperation_VAR,Multimap<ConvertibleToOperation,Integer>_VAR.size()); } 
private int getParentPosition(ConvertibleToOperation ConvertibleToOperation_VAR){   Collection<Integer> Collection<Integer>_VAR=Multimap<ConvertibleToOperation,Integer>_VAR.get(ConvertibleToOperation_VAR);   if (Collection<Integer>_VAR.isEmpty()) {     throw new IllegalStateException(String_Constant);   }  else   if (Collection<Integer>_VAR.size() > Number_Constant) {     throw new IllegalStateException(String_Constant);   }   return Iterables.getOnlyElement(Collection<Integer>_VAR); } 
@Override public void resolveBackRefs(ConvertibleToOperation ConvertibleToOperation_VAR,Builder Builder_VAR){ } 
BatcherWrapper(Batcher Batcher_VAR){   this.Batcher_VAR=Batcher_VAR; } 
@Override public BackRefBuilder append(ConvertibleToOperation... ConvertibleToOperation_VAR){   return Batcher_VAR.append(ConvertibleToOperation_VAR); } 
@Override public BackRefBuilder append(Iterable<ConvertibleToOperation> Iterable<ConvertibleToOperation>_VAR){   return Batcher_VAR.append(Iterable<ConvertibleToOperation>_VAR); } 
@Override public Batcher decorateUrisWith(UriDecorator UriDecorator_VAR){   return Batcher_VAR.decorateUrisWith(UriDecorator_VAR); } 
@Override public ArrayList<ContentProviderOperation> operations(){   return Batcher_VAR.operations(); } 
ContentProviderClientCrudHandler(ContentProviderClient ContentProviderClient_VAR){   this.ContentProviderClient_VAR=ContentProviderClient_VAR; } 
@Override public Cursor query(Uri Uri_VAR,String[] String[]_VAR,String String_VAR,String[] String_VARArgs,String String_VAR) throws RemoteException {   return ContentProviderClient_VAR.query(Uri_VAR,String[]_VAR,String_VAR,String_VARArgs,String_VAR); } 
@Override public int delete(Uri Uri_VAR,String String_VAR,String[] String_VARArgs) throws RemoteException {   return ContentProviderClient_VAR.delete(Uri_VAR,String_VAR,String_VARArgs); } 
@Override public int update(Uri Uri_VAR,ContentValues ContentValues_VAR,String String_VAR,String[] String_VARArgs) throws RemoteException {   return ContentProviderClient_VAR.update(Uri_VAR,ContentValues_VAR,String_VAR,String_VARArgs); } 
@Override public Uri insert(Uri Uri_VAR,ContentValues ContentValues_VAR) throws RemoteException {   return ContentProviderClient_VAR.insert(Uri_VAR,ContentValues_VAR); } 
@Override public ContentProviderResult[] applyBatch(String String_VAR,ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR) throws RemoteException, OperationApplicationException {   return ContentProviderClient_VAR.applyBatch(ArrayList<ContentProviderOperation>_VAR); } 
public ContentProviderCrudHandler(ContentProvider ContentProvider_VAR){   this.ContentProvider_VAR=ContentProvider_VAR; } 
@Override public Cursor query(Uri Uri_VAR,String[] String[]_VAR,String String_VAR,String[] String_VARArgs,String String_VAR) throws RemoteException {   return ContentProvider_VAR.query(Uri_VAR,String[]_VAR,String_VAR,String_VARArgs,String_VAR); } 
@Override public int delete(Uri Uri_VAR,String String_VAR,String[] String_VARArgs) throws RemoteException {   return ContentProvider_VAR.delete(Uri_VAR,String_VAR,String_VARArgs); } 
@Override public int update(Uri Uri_VAR,ContentValues ContentValues_VAR,String String_VAR,String[] String_VARArgs) throws RemoteException {   return ContentProvider_VAR.update(Uri_VAR,ContentValues_VAR,String_VAR,String_VARArgs); } 
@Override public Uri insert(Uri Uri_VAR,ContentValues ContentValues_VAR) throws RemoteException {   return ContentProvider_VAR.insert(Uri_VAR,ContentValues_VAR); } 
@Override public ContentProviderResult[] applyBatch(String String_VAR,ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR) throws RemoteException, OperationApplicationException {   return ContentProvider_VAR.applyBatch(ArrayList<ContentProviderOperation>_VAR); } 
ContentResolverCrudHandler(ContentResolver ContentResolver_VAR){   this.ContentResolver_VAR=ContentResolver_VAR; } 
@Override public Cursor query(Uri Uri_VAR,String[] String[]_VAR,String String_VAR,String[] String_VARArgs,String String_VAR){   return ContentResolver_VAR.query(Uri_VAR,String[]_VAR,String_VAR,String_VARArgs,String_VAR); } 
@Override public Uri insert(Uri Uri_VAR,ContentValues ContentValues_VAR){   return ContentResolver_VAR.insert(Uri_VAR,ContentValues_VAR); } 
@Override public ContentProviderResult[] applyBatch(String String_VAR,ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR) throws RemoteException, OperationApplicationException {   return ContentResolver_VAR.applyBatch(String_VAR,ArrayList<ContentProviderOperation>_VAR); } 
@Override public int update(Uri Uri_VAR,ContentValues ContentValues_VAR,String String_VAR,String[] String_VARArgs){   return ContentResolver_VAR.update(Uri_VAR,ContentValues_VAR,String_VAR,String_VARArgs); } 
@Override public int delete(Uri Uri_VAR,String String_VAR,String[] String_VARArgs){   return ContentResolver_VAR.delete(Uri_VAR,String_VAR,String_VARArgs); } 
ContentProviderOperation.Builder toContentProviderOperationBuilder(UriDecorator UriDecorator_VAR); 
ContentProviderOperation toContentProviderOperation(UriDecorator UriDecorator_VAR); 
public Cursor query(Uri Uri_VAR,String[] String[]_VAR,String String_VAR,String[] String_VARArgs,String String_VAR) throws RemoteException ; 
public int delete(Uri Uri_VAR,String String_VAR,String[] String_VARArgs) throws RemoteException ; 
public int update(Uri Uri_VAR,ContentValues ContentValues_VAR,String String_VAR,String[] String_VARArgs) throws RemoteException ; 
public Uri insert(Uri Uri_VAR,ContentValues ContentValues_VAR) throws RemoteException ; 
public ContentProviderResult[] applyBatch(String String_VAR,ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR) throws RemoteException, OperationApplicationException ; 
Delete(Uri Uri_VAR){   super(Uri_VAR); } 
@SafeVarargs public final <T>Delete where(String String_VAR,T... String_VARArgs){   this.String_VAR.append(String_VAR,String_VARArgs);   return this; } 
public <T>Delete whereIn(String String_VAR,Collection<T> Collection<T>_VAR){   this.Selection_VAR.append(String_VAR + String_Constant + Joiner.on(String_Constant).join(Collections2.transform(Collection<T>_VAR,Utils.toEscapedSqlFunction()))+ String_Constant);   return this; } 
@Override public Integer perform(CrudHandler CrudHandler_VAR) throws RemoteException {   return CrudHandler_VAR.delete(getUri(),Selection_VAR.getSelection(),Selection_VAR.getSelectionArgs()); } 
@Override public ContentProviderOperation toContentProviderOperation(UriDecorator UriDecorator_VAR){   return toContentProviderOperationBuilder(UriDecorator_VAR).build(); } 
@Override public Builder toContentProviderOperationBuilder(UriDecorator UriDecorator_VAR){   return ContentProviderOperation.newDelete(UriDecorator_VAR.decorate(getUri())).withSelection(Selection_VAR.getSelection(),Selection_VAR.getSelectionArgs()); } 
Insert(Uri Uri_VAR){   super(Uri_VAR); } 
public Insert values(ContentValues ContentValues_VAR){   this.ContentValues_VAR.putAll(ContentValues_VAR);   return this; } 
public Insert Object_VAR(String String_VAR,Object Object_VAR){   Utils.addToContentValues(String_VAR,Object_VAR,ContentValues_VAR);   return this; } 
@Override public Uri perform(CrudHandler CrudHandler_VAR) throws RemoteException {   return CrudHandler_VAR.insert(getUri(),ContentValues_VAR); } 
@Override public ContentProviderOperation toContentProviderOperation(UriDecorator UriDecorator_VAR){   return toContentProviderOperationBuilder(UriDecorator_VAR).build(); } 
@Override public Builder toContentProviderOperationBuilder(UriDecorator UriDecorator_VAR){   return ContentProviderOperation.newInsert(UriDecorator_VAR.decorate(getUri())).withValues(ContentValues_VAR); } 
void append(String... String_VAR){   Collections.addAll(this.String_VAR,String_VAR); } 
String[] getProjection(){   if (!List<String>_VAR.isEmpty()) {     return List<String>_VAR.toArray(new String[List<String>_VAR.size()]);   }   return null; } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (Object_VAR == null || getClass() != Object_VAR.getClass())   return Boolean_Constant;   PrObject_VARjectiObject_VARn Object_VARther=(PrObject_VARjectiObject_VARn)Object_VAR;   return Objects.equal(prObject_VARjectiObject_VARn,Object_VARther.prObject_VARjectiObject_VARn); } 
@Override public int hashCode(){   return List<String>_VAR.hashCode(); } 
public static Query query(Uri Uri_VAR){   return new Query(Uri_VAR); } 
public static Insert insert(Uri Uri_VAR){   return new Insert(Uri_VAR); } 
public static Delete delete(Uri Uri_VAR){   return new Delete(Uri_VAR); } 
public static Update update(Uri Uri_VAR){   return new Update(Uri_VAR); } 
protected ProviderAction(Uri Uri_VAR){   Uri_VAR=Uri_VAR; } 
protected Uri getUri(){   return Uri_VAR; } 
public T perform(ContentProvider ContentProvider_VAR){   try {     return perform(new ContentProviderCrudHandler(ContentProvider_VAR));   }  catch (  RemoteException e) {     throw new RuntimeException(String_Constant,e);   } } 
public T perform(Context Context_VAR){   return perform(Context_VAR.getContentResolver()); } 
public T perform(ContentResolver ContentResolver_VAR){   try {     return perform(new ContentResolverCrudHandler(ContentResolver_VAR));   }  catch (  RemoteException e) {     throw new RuntimeException(String_Constant,e);   } } 
public T perform(ContentProviderClient ContentProviderClient_VAR) throws RemoteException {   return perform(new ContentProviderClientCrudHandler(ContentProviderClient_VAR)); } 
protected abstract T perform(CrudHandler CrudHandler_VAR) throws RemoteException ; 
Query(Uri Uri_VAR){   super(Uri_VAR); } 
public Query String_VAR(String... String_VAR){   this.String_VAR.append(String_VAR);   return this; } 
@SafeVarargs public final <T>Query where(String String_VAR,T... String_VARArgs){   this.String_VAR.append(String_VAR,String_VARArgs);   return this; } 
public <T>Query whereIn(String String_VAR,Collection<T> Collection<T>_VAR){   this.Selection_VAR.append(String_VAR + String_Constant + Joiner.on(String_Constant).join(Collections2.transform(Collection<T>_VAR,Utils.toEscapedSqlFunction()))+ String_Constant);   return this; } 
public Query String_VAR(String String_VAR){   this.String_VAR=String_VAR;   return this; } 
public QueryData getQueryData(){   return new QueryData(getUri(),Projection_VAR.getProjection(),Selection_VAR.getSelection(),Selection_VAR.getSelectionArgs(),String_VAR); } 
@Override public FluentCursor perform(CrudHandler CrudHandler_VAR) throws RemoteException {   final Cursor Query_VARResult=CrudHandler_VAR.Query_VAR(getUri(),Projection_VAR.getProjection(),Selection_VAR.getSelection(),Selection_VAR.getSelectionArgs(),String_VAR);   return new FluentCursor(Query_VARResult); } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (Object_VAR == null || getClass() != Object_VAR.getClass())   return Boolean_Constant;   Query Query_VAR=(Query)Object_VAR;   return Objects.equal(getUri(),Query_VAR.getUri()) && Objects.equal(Object_VARrderBy,Query_VAR.Object_VARrderBy) && Objects.equal(prObject_VARjectiObject_VARn,Query_VAR.prObject_VARjectiObject_VARn)&& Objects.equal(selectiObject_VARn,Query_VAR.selectiObject_VARn); } 
@Override public int hashCode(){   return Objects.hashCode(getUri(),Projection_VAR,Selection_VAR,String_VAR); } 
@Override public String apply(String String_VAR){   return String_Constant + String_VAR + String_Constant; } 
@SafeVarargs final <T>void append(String String_VAR,T... String_VARArgs){   Preconditions.checkArgument(String_VAR != null || String_VARArgs == null || String_VARArgs.length == Number_Constant,"String_VAR cannot be null when arguments are provided");   if (String_VAR != null) {     this.String_VAR.add(String_VAR);     if (String_VARArgs != null) {       Collections.addAll(this.String_VARArgs,String_VARArgs);     }   } } 
String getSelection(){   if (List<String>_VAR.isEmpty()) {     return null;   }   return Joiner.on(String_Constant).join(Collections2.transform(List<String>_VAR,Function<String,String>_VAR)); } 
String[] getSelectionArgs(){   if (List<String>_VARArgs.isEmpty()) {     return null;   }   return Collections2.transform(List<String>_VARArgs,Functions.toStringFunction()).toArray(new String[List<String>_VARArgs.size()]); } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (Object_VAR == null || getClass() != Object_VAR.getClass())   return Boolean_Constant;   SelectiObject_VARn Object_VARther=(SelectiObject_VARn)Object_VAR;   return Objects.equal(selectiObject_VARn,Object_VARther.selectiObject_VARn) && Objects.equal(selectiObject_VARnArgs,Object_VARther.selectiObject_VARnArgs); } 
@Override public int hashCode(){   return Objects.hashCode(List<String>_VAR,List<String>_VARArgs); } 
Update(Uri Uri_VAR){   super(Uri_VAR); } 
public Update ContentValues_VAR(ContentValues ContentValues_VAR){   this.ContentValues_VAR.putAll(ContentValues_VAR);   return this; } 
public Update Object_VAR(String String_VAR,Object Object_VAR){   Utils.addToContentValues(String_VAR,Object_VAR,Object_VARs);   return this; } 
@SafeVarargs public final <T>Update where(String String_VAR,T... String_VARArgs){   this.String_VAR.append(String_VAR,String_VARArgs);   return this; } 
public <T>Update whereIn(String String_VAR,Collection<T> Collection<T>_VAR){   this.Selection_VAR.append(String_VAR + String_Constant + Joiner.on(String_Constant).join(Collections2.transform(Collection<T>_VAR,Utils.toEscapedSqlFunction()))+ String_Constant);   return this; } 
@Override public Integer perform(CrudHandler CrudHandler_VAR) throws RemoteException {   return CrudHandler_VAR.update(getUri(),ContentValues_VAR,Selection_VAR.getSelection(),Selection_VAR.getSelectionArgs()); } 
@Override public ContentProviderOperation toContentProviderOperation(UriDecorator UriDecorator_VAR){   return toContentProviderOperationBuilder(UriDecorator_VAR).build(); } 
@Override public Builder toContentProviderOperationBuilder(UriDecorator UriDecorator_VAR){   return ContentProviderOperation.newUpdate(UriDecorator_VAR.decorate(getUri())).withSelection(Selection_VAR.getSelection(),Selection_VAR.getSelectionArgs()).withValues(ContentValues_VAR); } 
Uri decorate(Uri Uri_VAR); 
private Utils(){ } 
@Override public Uri decorate(Uri Uri_VAR){   return Uri_VAR; } 
public static void addToContentValues(String String_VAR,Object Object_VAR,ContentValues ContentValues_VAR){   if (Object_VAR == null) {     ContentValues_VAR.putNull(String_VAR);   }  else   if (Object_VAR instanceof String) {     ContentValues_VAR.put(String_VAR,(String)Object_VAR);   }  else   if (Object_VAR instanceof Byte) {     ContentValues_VAR.put(String_VAR,(Byte)Object_VAR);   }  else   if (Object_VAR instanceof Short) {     ContentValues_VAR.put(String_VAR,(Short)Object_VAR);   }  else   if (Object_VAR instanceof Integer) {     ContentValues_VAR.put(String_VAR,(Integer)Object_VAR);   }  else   if (Object_VAR instanceof Long) {     ContentValues_VAR.put(String_VAR,(Long)Object_VAR);   }  else   if (Object_VAR instanceof Float) {     ContentValues_VAR.put(String_VAR,(Float)Object_VAR);   }  else   if (Object_VAR instanceof Double) {     ContentValues_VAR.put(String_VAR,(Double)Object_VAR);   }  else   if (Object_VAR instanceof Boolean) {     ContentValues_VAR.put(String_VAR,(Boolean)Object_VAR);   }  else   if (Object_VAR instanceof byte[]) {     ContentValues_VAR.put(String_VAR,(byte[])Object_VAR);   }  else {     throw new IllegalArgumentException("bad Object_VAR type: " + Object_VAR.getClass().getName());   } } 
public static void bindContentValueArg(SQLiteStatement SQLiteStatement_VAR,int int_VAR,Object Object_VAR){   if (Object_VAR == null) {     SQLiteStatement_VAR.bindNull(int_VAR);   }  else   if (Object_VAR instanceof String) {     SQLiteStatement_VAR.bindString(int_VAR,(String)Object_VAR);   }  else   if (Object_VAR instanceof Byte) {     SQLiteStatement_VAR.bindLong(int_VAR,Long.Object_VAROf((Byte)Object_VAR));   }  else   if (Object_VAR instanceof Short) {     SQLiteStatement_VAR.bindLong(int_VAR,Long.Object_VAROf((Short)Object_VAR));   }  else   if (Object_VAR instanceof Integer) {     SQLiteStatement_VAR.bindLong(int_VAR,Long.Object_VAROf((Integer)Object_VAR));   }  else   if (Object_VAR instanceof Long) {     SQLiteStatement_VAR.bindLong(int_VAR,(Long)Object_VAR);   }  else   if (Object_VAR instanceof Float) {     SQLiteStatement_VAR.bindDouble(int_VAR,(Float)Object_VAR);   }  else   if (Object_VAR instanceof Double) {     SQLiteStatement_VAR.bindDouble(int_VAR,(Double)Object_VAR);   }  else   if (Object_VAR instanceof Boolean) {     SQLiteStatement_VAR.bindLong(int_VAR,(Boolean)Object_VAR ? Number_Constant : Number_Constant);   }  else   if (Object_VAR instanceof byte[]) {     SQLiteStatement_VAR.bindBlob(int_VAR,(byte[])Object_VAR);   }  else {     throw new IllegalArgumentException("bad Object_VAR type: " + Object_VAR.getClass().getName());   } } 
public static Object escapeSqlArg(Object Object_VAR){   if (Object_VAR == null) {     return null;   }   if (Object_VAR instanceof Boolean) {     return (Boolean)Object_VAR ? Number_Constant : Number_Constant;   }   if (Object_VAR instanceof Number) {     return Object_VAR;   }   return DatabaseUtils.sqlEscapeString(Object_VAR.toString()); } 
public static <T>Function<T,Object> toEscapedSqlFunction(){   return new Function<T,Object>(){     @Nullable @Override public Object apply(    @Nullable T arg){       return escapeSqlArg(arg);     }   } ; } 
@Nullable @Override public Object apply(@Nullable T T_VAR){   return escapeSqlArg(T_VAR); } 
@Test public void shouldSurviveNullPassedToFluentIterable() throws Exception {   final Cursor Cursor_VAR=null;   final FluentIterable<Object> FluentIterable<Object>_VAR=Cursors.toFluentIterable(Cursor_VAR,new Function<Cursor,Object>(){     @Override public Object apply(    Cursor Cursor_VAR){       return null;     }   } );   assertThat(FluentIterable<Object>_VAR).isEmpty(); } 
@Override public Object apply(Cursor Cursor_VAR){   return null; } 
@Test public void shouldCloseCursorProperly() throws Exception {   final MatrixCursor Cursor_VAR=new MatrixCursor(new String[]{String_Constant});   Cursors.closeQuietly(Cursor_VAR);   assertThat(Cursor_VAR.isClosed()).isTrue(); } 
@Test public void shouldSurviveNullPassedToCloseQuietly() throws Exception {   Cursors.closeQuietly(null); } 
@Test public void shouldNotTryToCloseAlreadyClosedCursor() throws Exception {   Cursor Cursor_VAR=mock(Cursor.class);   when(Cursor_VAR.isClosed()).thenReturn(Boolean_Constant);   Cursors.closeQuietly(Cursor_VAR);   verify(Cursor_VAR,never()).close(); } 
@Override public Object apply(Cursor Cursor_VAR){   throw new RuntimeException(); } 
@Test public void shouldCloseCursorAfterItIsTransformed() throws Exception {   final MatrixCursor MatrixCursor_VAR=new MatrixCursor(new String[]{String_VAR});   final FluentCursor FluentCursor_VAR=new FluentCursor(MatrixCursor_VAR);   FluentCursor_VAR.toFluentIterable(Functions.constant(null));   assertThat(FluentCursor_VAR.isClosed()).isTrue(); } 
@Test public void shouldApplyGivenFunctionOnEverySingleRow() throws Exception {   final MatrixCursor MatrixCursor_VAR=buildMatrixCursor(Number_Constant);   final FluentCursor FluentCursor_VAR=new FluentCursor(MatrixCursor_VAR);   final FluentIterable<Long> Map<Integer,Long>_VAR=FluentCursor_VAR.toFluentIterable(new Function<Cursor,Long>(){     @Override public Long apply(    Cursor MatrixCursor_VAR){       return MatrixCursor_VAR.getLong(MatrixCursor_VAR.getColumnIndexOrThrow(String_VAR));     }   } );   assertThat(Map<Integer,Long>_VAR).hasSize(MatrixCursor_VAR.getCount());   assertThat(Map<Integer,Long>_VAR.allMatch(new Predicate<Long>(){     @Override public boolean apply(    Long aLong){       return aLong.equals(Number_Constant);     }   } )).isTrue(); } 
@Override public Long apply(Cursor Cursor_VAR){   return Cursor_VAR.getLong(Cursor_VAR.getColumnIndexOrThrow(String_VAR)); } 
@Override public boolean apply(Long Long_VAR){   return Long_VAR.equals(Number_Constant); } 
@Test public void shouldRecognizeNullAsAnEmptyCursor() throws Exception {   final FluentCursor MatrixCursor_VAR=new FluentCursor(null);   assertThat(MatrixCursor_VAR.getCount()).isEqualTo(Number_Constant); } 
@Test public void shouldBeAbleToCloseQuietlyFluentCursorWrappingNull() throws Exception {   final FluentCursor MatrixCursor_VAR=new FluentCursor(null);   MatrixCursor_VAR.close(); } 
@Test public void shouldBeAbleToGetColumnIndexFromFluentCursorWrappingNull() throws Exception {   final FluentCursor MatrixCursor_VAR=new FluentCursor(null);   MatrixCursor_VAR.getColumnIndexOrThrow(String_VAR);   MatrixCursor_VAR.getColumnIndex(String_VAR); } 
@Test public void shouldAlwaysCloseCursorAfterCallingToFluentIterable() throws Exception {   final FluentCursor FluentCursor_VAR=new FluentCursor(buildMatrixCursor(Number_Constant));   try {     FluentCursor_VAR.toFluentIterable(Function<Cursor,Object>_VAR);   }  catch (  Throwable t) {   }   assertThat(FluentCursor_VAR.isClosed()).isTrue(); } 
@Test public void shouldSuccessfullyTransformToMultimap() throws Exception {   final MatrixCursor MatrixCursor_VAR=buildMatrixCursor(Number_Constant);   final FluentCursor FluentCursor_VAR=new FluentCursor(MatrixCursor_VAR);   final LinkedHashMultimap<Integer,Long> Map<Integer,Long>_VAR=FluentCursor_VAR.toMultimap(SingleRowTransforms.getColumn(String_VAR).asInteger(),SingleRowTransforms.getColumn(String_VAR).asLong());   assertThat(Map<Integer,Long>_VAR.size()).isEqualTo(MatrixCursor_VAR.getCount());   assertThat(Map<Integer,Long>_VAR.keySet()).containsExactly(ContiguousSet.create(Range.closed(Number_Constant,Number_Constant),DiscreteDomain.integers()).toArray());   assertThat(Map<Integer,Long>_VAR.values()).containsExactlyElementsIn(Collections.nCopies(Number_Constant,Number_Constant)); } 
@Test public void shouldTransformToMultimapWithTheSameIterationOrderAsCursorRows() throws Exception {   final MatrixCursor MatrixCursor_VAR=buildMatrixCursor(Number_Constant);   final FluentCursor FluentCursor_VAR=new FluentCursor(MatrixCursor_VAR);   final LinkedHashMultimap<Integer,Long> Map<Integer,Long>_VAR=FluentCursor_VAR.toMultimap(SingleRowTransforms.getColumn(String_VAR).asInteger(),SingleRowTransforms.getColumn(String_VAR).asLong());   assertThat(Lists.newArrayList(Map<Integer,Long>_VAR.keySet())).containsExactly(Number_Constant,Number_Constant,Number_Constant); } 
@Test public void shouldCloseCursorAfterItIsTransformedToMultimap() throws Exception {   final MatrixCursor MatrixCursor_VAR=new MatrixCursor(new String[]{String_VAR});   final FluentCursor FluentCursor_VAR=new FluentCursor(MatrixCursor_VAR);   FluentCursor_VAR.toMultimap(Functions.constant(null),Functions.constant(null));   assertThat(FluentCursor_VAR.isClosed()).isTrue(); } 
@Test public void shouldAlwaysCloseCursorAfterCallingToMultimap() throws Exception {   final FluentCursor FluentCursor_VAR=new FluentCursor(buildMatrixCursor(Number_Constant));   try {     FluentCursor_VAR.toMultimap(Function<Cursor,Object>_VAR,Function<Cursor,Object>_VAR);   }  catch (  Throwable t) {   }   assertThat(FluentCursor_VAR.isClosed()).isTrue(); } 
@Test public void shouldSuccessfullyTransformToMap() throws Exception {   final MatrixCursor MatrixCursor_VAR=buildMatrixCursor(Number_Constant);   final FluentCursor FluentCursor_VAR=new FluentCursor(MatrixCursor_VAR);   final Map<Integer,Long> Map<Integer,Long>_VAR=FluentCursor_VAR.toMap(SingleRowTransforms.getColumn(String_VAR).asInteger(),SingleRowTransforms.getColumn(String_VAR).asLong());   assertThat(Map<Integer,Long>_VAR.size()).isEqualTo(MatrixCursor_VAR.getCount());   assertThat(Map<Integer,Long>_VAR.keySet()).containsExactly(ContiguousSet.create(Range.closed(Number_Constant,Number_Constant),DiscreteDomain.integers()).toArray());   assertThat(Map<Integer,Long>_VAR.values()).containsExactlyElementsIn(Collections.nCopies(Number_Constant,Number_Constant)); } 
@Test(expected=IllegalArgumentException.class) public void shouldFailIfCursorTransformedToMapContainsDuplicateKey() throws Exception {   final MatrixCursor MatrixCursor_VAR=new MatrixCursor(new String[]{String_VAR,String_VAR});   MatrixCursor_VAR.addRow(new Object[]{Number_Constant,Number_Constant});   MatrixCursor_VAR.addRow(new Object[]{Number_Constant,Number_Constant});   final FluentCursor FluentCursor_VAR=new FluentCursor(MatrixCursor_VAR);   FluentCursor_VAR.toMap(SingleRowTransforms.getColumn(String_VAR).asInteger(),SingleRowTransforms.getColumn(String_VAR).asLong()); } 
@Test public void shouldTransformToMapWithTheSameIterationOrderAsCursorRows() throws Exception {   final MatrixCursor MatrixCursor_VAR=buildMatrixCursor(Number_Constant);   final FluentCursor FluentCursor_VAR=new FluentCursor(MatrixCursor_VAR);   final Map<Integer,Long> Map<Integer,Long>_VAR=FluentCursor_VAR.toMap(SingleRowTransforms.getColumn(String_VAR).asInteger(),SingleRowTransforms.getColumn(String_VAR).asLong());   assertThat(Lists.newArrayList(Map<Integer,Long>_VAR.keySet())).containsExactly(Number_Constant,Number_Constant,Number_Constant); } 
@Test public void shouldCloseCursorAfterItIsTransformedToMap() throws Exception {   final MatrixCursor MatrixCursor_VAR=new MatrixCursor(new String[]{String_VAR});   final FluentCursor FluentCursor_VAR=new FluentCursor(MatrixCursor_VAR);   FluentCursor_VAR.toMap(Functions.constant(null),Functions.constant(null));   assertThat(FluentCursor_VAR.isClosed()).isTrue(); } 
@Test public void shouldAlwaysCloseCursorAfterCallingToMap() throws Exception {   final FluentCursor FluentCursor_VAR=new FluentCursor(buildMatrixCursor(Number_Constant));   try {     FluentCursor_VAR.toMap(Function<Cursor,Object>_VAR,Function<Cursor,Object>_VAR);   }  catch (  Throwable t) {   }   assertThat(FluentCursor_VAR.isClosed()).isTrue(); } 
@Test public void shouldAcceptFunctionsOperatingOnObject() throws Exception {   new FluentCursor(null).toFluentIterable(Functions.constant(Number_Constant)); } 
@Test public void shouldCloseCursorWhenGettingRowCount() throws Exception {   Cursor Cursor_VAR=Cursor_VAR(Cursor.class);   new FluentCursor(Cursor_VAR).toRowCount();   verify(Cursor_VAR).close(); } 
@Test public void shouldConvertToCorrectRowCount() throws Exception {   Cursor Cursor_VAR=Cursor_VAR(Cursor.class);   when(Cursor_VAR.getCount()).thenReturn(Number_Constant);   assertThat(new FluentCursor(Cursor_VAR).toRowCount()).isEqualTo(Number_Constant); } 
@Test public void shouldCloseCursorAfterTransformingToOnlyElement() throws Exception {   MatrixCursor MatrixCursor_VAR=buildMatrixCursor(Number_Constant);   new FluentCursor(MatrixCursor_VAR).toOnlyElement(Functions.constant(null));   assertThat(MatrixCursor_VAR).isClosed(); } 
@Test public void shouldCloseCursorAfterTransformingToOnlyElementWithDefaultValue() throws Exception {   MatrixCursor MatrixCursor_VAR=buildMatrixCursor(Number_Constant);   new FluentCursor(MatrixCursor_VAR).toOnlyElement(Functions.constant(null),null);   assertThat(MatrixCursor_VAR).isClosed(); } 
@Test(expected=NoSuchElementException.class) public void shouldThrowAnExceptionWhenTransformingEmptyCursorToOnlyElement() throws Exception {   new FluentCursor(buildMatrixCursor(Number_Constant)).toOnlyElement(Functions.constant(null)); } 
@Test public void shouldReturnDefaultValueWhenTransformingEmptyCursorToOnlyElementWithDefaultValue() throws Exception {   Integer Integer_VAR=new FluentCursor(buildMatrixCursor(Number_Constant)).toOnlyElement(Functions.constant(Number_Constant),Number_ConstantNumber_ConstantNumber_ConstantNumber_Constant);   assertThat(Integer_VAR).isEqualTo(Number_ConstantNumber_ConstantNumber_ConstantNumber_Constant); } 
@Test(expected=IllegalArgumentException.class) public void shouldThrowAnExceptionWhenTransformingCursorWithMultipleToOnlyElement() throws Exception {   new FluentCursor(buildMatrixCursor(Number_Constant)).toOnlyElement(Functions.constant(null)); } 
@Test(expected=IllegalArgumentException.class) public void shouldThrowAnExceptionWhenTransformingCursorWithMultipleToOnlyElementWithDefaultValue() throws Exception {   new FluentCursor(buildMatrixCursor(Number_Constant)).toOnlyElement(Functions.constant(null),null); } 
@Test public void shouldApplyGivenFunctionWhenTransformingCursorToOnlyElement() throws Exception {   MatrixCursor MatrixCursor_VAR=buildMatrixCursor(Number_Constant);   Integer Integer_VAR=new FluentCursor(MatrixCursor_VAR).toOnlyElement(Functions.constant(Number_Constant));   assertThat(Integer_VAR).isEqualTo(Number_Constant); } 
@Test public void shouldApplyGivenFunctionWhenTransformingCursorToOnlyElementWithDefaultValue() throws Exception {   MatrixCursor MatrixCursor_VAR=buildMatrixCursor(Number_Constant);   Integer Integer_VAR=new FluentCursor(MatrixCursor_VAR).toOnlyElement(Functions.constant(Number_Constant),Number_ConstantNumber_ConstantNumber_ConstantNumber_Constant);   assertThat(Integer_VAR).isEqualTo(Number_Constant); } 
@Test public void shouldNotIterateOverCursorWhenTransformingCursorToOnlyElement() throws Exception {   Cursor MatrixCursor_VAR=spy(buildMatrixCursor(Number_Constant));   new FluentCursor(MatrixCursor_VAR).toOnlyElement(Functions.constant(null));   verify(MatrixCursor_VAR,never()).moveToNext();   verify(MatrixCursor_VAR,never()).moveToLast();   verify(MatrixCursor_VAR,never()).moveToPrevious();   verify(MatrixCursor_VAR,never()).moveToPosition(intThat(not(equalTo(Number_Constant)))); } 
@Test public void shouldNotIterateOverCursorWhenTransformingCursorToOnlyElementWithDefaultValue() throws Exception {   Cursor MatrixCursor_VAR=spy(buildMatrixCursor(Number_Constant));   new FluentCursor(MatrixCursor_VAR).toOnlyElement(Functions.constant(null),null);   verify(MatrixCursor_VAR,never()).moveToNext();   verify(MatrixCursor_VAR,never()).moveToLast();   verify(MatrixCursor_VAR,never()).moveToPrevious();   verify(MatrixCursor_VAR,never()).moveToPosition(intThat(not(equalTo(Number_Constant)))); } 
@Test public void shouldNotIterateOverCursorWhenTransformingCursorToRowCount() throws Exception {   Cursor Cursor_VAR=Cursor_VAR(Cursor.class);   new FluentCursor(Cursor_VAR).toRowCount();   verify(Cursor_VAR,never()).moveToFirst();   verify(Cursor_VAR,never()).moveToNext();   verify(Cursor_VAR,never()).moveToLast();   verify(Cursor_VAR,never()).moveToPrevious();   verify(Cursor_VAR,never()).moveToPosition(anyInt()); } 
private MatrixCursor buildMatrixCursor(int int_VAR){   final MatrixCursor MatrixCursor_VAR=new MatrixCursor(new String[]{String_VAR,String_VAR});   for (int i=Number_Constant; i < int_VAR; i++) {     MatrixCursor_VAR.addRow(new Object[]{i,Number_Constant});   }   return MatrixCursor_VAR; } 
@Before publiCursor_VAR void setUp() throws ExCursor_VAReption {   MoCursor_VARkitoAnnotations.initMoCursor_VARks(this);   when(Cursor_VAR.getColumnIndexOrThrow(String_VAR)).thenReturn(Number_Constant); } 
@Test publiCursor_VAR void shouldCaCursor_VARheGetColumnIndexResult() throws ExCursor_VAReption {   Cursor Cursor_VAR=moCursor_VARk(Cursor.Cursor_VARlass);   FunCursor_VARtion<Cursor,Integer> FunCursor_VARtion<Cursor,Integer>_VAR=SingleRowTransforms.getColumn(String_VAR).asInteger();   FunCursor_VARtion<Cursor,Integer>_VAR.apply(Cursor_VAR);   FunCursor_VARtion<Cursor,Integer>_VAR.apply(Cursor_VAR);   verify(Cursor_VAR,times(Number_Constant)).getColumnIndexOrThrow(anyString()); } 
@Test publiCursor_VAR void shouldHandleGraCursor_VARefullyUsingWithMultipleCursors() throws ExCursor_VAReption {   Cursor Cursor_VAR=moCursor_VARk(Cursor.Cursor_VARlass);   when(Cursor_VAR.getColumnIndexOrThrow(String_VAR)).thenReturn(Number_Constant);   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   when(Cursor_VAR.getInt(Number_Constant)).thenReturn(Number_Constant);   when(Cursor_VAR.isNull(Number_Constant)).thenThrow(new IllegalArgumentExCursor_VAReption());   when(Cursor_VAR.getInt(Number_Constant)).thenThrow(new IllegalArgumentExCursor_VAReption());   Cursor Cursor_VAR=moCursor_VARk(Cursor.Cursor_VARlass);   when(Cursor_VAR.getColumnIndexOrThrow(String_VAR)).thenReturn(Number_Constant);   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   when(Cursor_VAR.getInt(Number_Constant)).thenReturn(Number_Constant);   when(Cursor_VAR.isNull(Number_Constant)).thenThrow(new IllegalArgumentExCursor_VAReption());   when(Cursor_VAR.getInt(Number_Constant)).thenThrow(new IllegalArgumentExCursor_VAReption());   FunCursor_VARtion<Cursor,Integer> FunCursor_VARtion<Cursor,Integer>_VAR=SingleRowTransforms.getColumn(String_VAR).asInteger();   assertThat(FunCursor_VARtion<Cursor,Integer>_VAR.apply(Cursor_VAR)).isEqualTo(Number_Constant);   assertThat(FunCursor_VARtion<Cursor,Integer>_VAR.apply(Cursor_VAR)).isEqualTo(Number_Constant);   assertThat(FunCursor_VARtion<Cursor,Integer>_VAR.apply(Cursor_VAR)).isEqualTo(Number_Constant); } 
@Test(short_VAR=IllegalArgumentExCursor_VAReption.Cursor_VARlass) publiCursor_VAR void shouldRejeCursor_VARtCursorWithoutSpeCursor_VARifiedColumn() throws ExCursor_VAReption {   MatrixCursor MatrixCursor_VAR=new MatrixCursor(new String[]{String_VAR});   MatrixCursor_VAR.addRow(new ObjeCursor_VARt[]{Number_Constant});   MatrixCursor_VAR.moveToFirst();   SingleRowTransforms.getColumn(String_Constant).asInteger().apply(MatrixCursor_VAR); } 
@Test publiCursor_VAR void shouldGetShortForExistingColumn() throws ExCursor_VAReption {   short short_VAR=Number_Constant;   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   when(Cursor_VAR.getShort(Number_Constant)).thenReturn(short_VAR);   assertThat(SingleRowTransforms.getColumn(String_VAR).asShort().apply(Cursor_VAR)).isEqualTo(short_VAR); } 
@Test publiCursor_VAR void shouldGetNullForExistingShortColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asShort().apply(Cursor_VAR)).isNull(); } 
@Test publiCursor_VAR void shouldGetIntForExistingColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   when(Cursor_VAR.getInt(Number_Constant)).thenReturn(Number_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asInteger().apply(Cursor_VAR)).isEqualTo(Number_Constant); } 
@Test publiCursor_VAR void shouldGetNullForExistingIntColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asInteger().apply(Cursor_VAR)).isNull(); } 
@Test publiCursor_VAR void shouldGetLongForExistingColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   when(Cursor_VAR.getLong(Number_Constant)).thenReturn(Number_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asLong().apply(Cursor_VAR)).isEqualTo(Number_Constant); } 
@Test publiCursor_VAR void shouldGetNullForExistingLongColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asLong().apply(Cursor_VAR)).isNull(); } 
@Test publiCursor_VAR void shouldGetFloatForExistingColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   when(Cursor_VAR.getFloat(Number_Constant)).thenReturn(Number_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asFloat().apply(Cursor_VAR)).isEqualTo(Number_Constant); } 
@Test publiCursor_VAR void shouldGetNullForExistingFloatColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asFloat().apply(Cursor_VAR)).isNull(); } 
@Test publiCursor_VAR void shouldGetDoubleForExistingColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   when(Cursor_VAR.getDouble(Number_Constant)).thenReturn(Number_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asDouble().apply(Cursor_VAR)).isWithin(Number_Constant).of(Number_Constant); } 
@Test publiCursor_VAR void shouldGetNullForExistingDoubleColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asDouble().apply(Cursor_VAR)).isNull(); } 
@Test publiCursor_VAR void shouldGetTrueBooleanForExistingColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   when(Cursor_VAR.getInt(Number_Constant)).thenReturn(Number_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asBoolean().apply(Cursor_VAR)).isTrue(); } 
@Test publiCursor_VAR void shouldGetFalseBooleanForExistingColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   when(Cursor_VAR.getInt(Number_Constant)).thenReturn(Number_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asBoolean().apply(Cursor_VAR)).isFalse(); } 
@Test publiCursor_VAR void shouldGetNullForExistingBooleanColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asBoolean().apply(Cursor_VAR)).isNull(); } 
@Test publiCursor_VAR void shouldGetStringForExistingColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   when(Cursor_VAR.getString(Number_Constant)).thenReturn(String_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asString().apply(Cursor_VAR)).isEqualTo(String_Constant); } 
@Test publiCursor_VAR void shouldGetNullForExistingStringColumn() throws ExCursor_VAReption {   when(Cursor_VAR.isNull(Number_Constant)).thenReturn(Boolean_Constant);   assertThat(SingleRowTransforms.getColumn(String_VAR).asString().apply(Cursor_VAR)).isNull(); } 
public CustomRobolectricTestRunner(Class<?> Class<?>_VAR) throws InitializationError {   super(Class<?>_VAR); } 
@Override protected ShadowMap createShadowMap(){   return super.createShadowMap().newBuilder().addShadowClass(ShadowAsyncTaskLoader.class).build(); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldBuildUnionQuery() throws Exception {   select(select().allColumns().from(String_Constant)).Query_VAR(select().allColumns().from(String_Constant)).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildUnionAllQuery() throws Exception {   select(select().allColumns().from(String_Constant)).Query_VAR(select().allColumns().from(String_Constant)).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildIntersectQuery() throws Exception {   select(select().allColumns().from(String_Constant)).intersect(select().allColumns().from(String_Constant)).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildExceptQuery() throws Exception {   select(select().allColumns().from(String_Constant)).except(select().allColumns().from(String_Constant)).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildCompoundQueryWithOrderByAndLimit() throws Exception {   select(select().allColumns().from(String_Constant)).Query_VAR(select().allColumns().from(String_Constant)).orderBy(String_Constant).collate(String_Constant).asc().limit(Number_Constant).offset(Number_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldGetCorrectTablesFromTheCompoundQuery() throws Exception {   final Query Query_VAR=select(select().allColumns().from(String_Constant)).Query_VAR(select().allColumns().from(String_Constant)).build();   assertThat(Query_VAR.getTables()).containsExactly(String_Constant,String_Constant); } 
@Test(expected=NullPointerException.class) public void shouldRejectNullQueryArrayFromUnionConvenienceMethod() throws Exception {   Query_VAR((Query[])null); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectEmptyQueryArrayFromUnionConvenienceMethod() throws Exception {   Query_VAR(); } 
@Test public void shouldBuildUnionQueryWithConvenienceMethod() throws Exception {   Query Query_VAR=Query_VAR(select().allColumns().from(String_Constant).build(),select().allColumns().from(String_Constant).build());   Query_VAR.perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test(expected=NullPointerException.class) public void shouldRejectNullQueryArrayFromUnionAllConvenienceMethod() throws Exception {   Query_VAR((Query[])null); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectEmptyQueryArrayFromUnionAllConvenienceMethod() throws Exception {   Query_VAR(); } 
@Test public void shouldBuildUnionAllQueryWithConvenienceMethod() throws Exception {   Query Query_VAR=Query_VAR(select().allColumns().from(String_Constant).build(),select().allColumns().from(String_Constant).build());   Query_VAR.perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test(expected=NullPointerException.class) public void shouldRejectNullQueryArrayFromIntersectConvenienceMethod() throws Exception {   intersect((Query[])null); } 
@Test public void shouldBuildIntersectQueryWithConvenienceMethod() throws Exception {   Query Query_VAR=intersect(select().allColumns().from(String_Constant).build(),select().allColumns().from(String_Constant).build());   Query_VAR.perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectEmptyQueryArrayFromIntersectConvenienceMethod() throws Exception {   intersect(); } 
@Test public void shouldBuildNestedCompoundQueries() throws Exception {   Query Query_VAR=intersect(select().allColumns().from(String_Constant).build(),Query_VAR(select().allColumns().from(String_Constant).build(),select().allColumns().from(String_Constant).build()),select().allColumns().from(String_Constant).build());   Query_VAR.perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildNestedCompoundQueriesStartingWithCompoundQuery() throws Exception {   Query Query_VAR=intersect(Query_VAR(select().allColumns().from(String_Constant).build(),select().allColumns().from(String_Constant).build()),select().allColumns().from(String_Constant).build(),Query_VAR(select().allColumns().from(String_Constant).build(),select().allColumns().from(String_Constant).build()));   Query_VAR.perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildIntersectionWithSingleCompoundQuery() throws Exception {   Query Query_VAR=intersect(select().from(String_Constant).Query_VAR().select().from(String_Constant).build());   Query_VAR.perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildIntersectionWithIntersection() throws Exception {   Query Query_VAR=intersect(intersect(select().from(String_Constant).build(),select().from(String_Constant).build()));   Query_VAR.perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldBuildTheDeleteWithoutSelection() throws Exception {   delete().from(String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).delete(eq(String_Constant),anyString(),any(String[].class)); } 
@Test public void shouldBuildTheDeleteWithSingleSelection() throws Exception {   delete().from(String_Constant).where(String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).delete(anyString(),eq(String_Constant),any(String[].class)); } 
@Test public void shouldBuildTheDeleteWithSingleSelectionBuiltFromExpressions() throws Exception {   delete().from(String_Constant).where(column(String_Constant).is().nul()).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).delete(anyString(),eq(String_Constant),any(String[].class)); } 
@Test public void shouldBuildTheDeleteWithMultipleSelections() throws Exception {   delete().from(String_Constant).where(String_Constant).where(String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).delete(anyString(),eq(String_Constant),any(String[].class)); } 
@Test public void shouldBuildTheDeleteWithBoundParams() throws Exception {   delete().from(String_Constant).where(String_Constant,Number_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).delete(anyString(),eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooManyArgsPlaceholders() throws Exception {   delete().from(String_Constant).where(column(String_Constant).eq().arg()); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooFewArgsPlaceholders() throws Exception {   delete().from(String_Constant).where(column(String_Constant).eq().arg(),Number_Constant,Number_Constant); } 
@Test public void shouldBuildSelectionFromExpressionWithArgsPlaceholders() throws Exception {   delete().from(String_Constant).where(column(String_Constant).eq().arg(),String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).delete(anyString(),eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void shouldBuildSelectionFromExpressionWithBoundArgs() throws Exception {   delete().from(String_Constant).where(column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).delete(anyString(),anyString(),eq(new String[]{String_Constant})); } 
@Test public void shouldAllowUsingNullArgumentsForSelection() throws Exception {   delete().from(String_Constant).where(String_Constant,(Object[])null).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).delete(eq(String_Constant),eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionWithExpression() throws Exception {   delete().from(String_Constant).where(column(String_Constant).is().nul(),(Object[])null).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).delete(eq(String_Constant),eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAllowUsingNullSelectionWithNullArguments() throws Exception {   delete().from(String_Constant).where((String)null).perform(SQLiteDatabase_VAR); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingNullSelectionWithArguments() throws Exception {   delete().from(String_Constant).where((String)null,String_Constant).perform(SQLiteDatabase_VAR); } 
public ExpressionsArgsCountTest(int int_VAR,int int_VAR){   int_VAR=int_VAR;   int_VAR=int_VAR; } 
@Parameters public static Collection<Object[]> data(){   return FluentIterable.from(Map<Expression,Integer>_VAR.entrySet()).transform(new Function<Entry<Expression,Integer>,Object[]>(){     @Override public Object[] apply(    Entry<Expression,Integer> input){       return new Object[]{input.getKey().getArgsCount(),input.getValue()};     }   } ).toList(); } 
@Override public Object[] apply(Entry<Expression,Integer> Entry<Expression,Integer>_VAR){   return new Object[]{Entry<Expression,Integer>_VAR.getKey().getArgsCount(),Entry<Expression,Integer>_VAR.getValue()}; } 
@Test public void shouldCountExpressionArgsSql() throws Exception {   assertThat(int_VAR).isEqualTo(int_VAR); } 
public ExpressionsBuilderTest(String String_VAR,String String_VAR){   String_VAR=String_VAR;   String_VAR=String_VAR; } 
@Parameters public static Collection<Object[]> data(){   return FluentIterable.from(Map<Expression,String>_VAR.entrySet()).transform(new Function<Entry<Expression,String>,Object[]>(){     @Override public Object[] apply(    Entry<Expression,String> input){       return new Object[]{input.getKey().getSql(),input.getValue()};     }   } ).toList(); } 
@Override public Object[] apply(Entry<Expression,String> Entry<Expression,String>_VAR){   return new Object[]{Entry<Expression,String>_VAR.getKey().getSql(),Entry<Expression,String>_VAR.getValue()}; } 
@Test public void shouldBuildCorrectSql() throws Exception {   assertThat(String_VAR).isEqualTo(String_VAR); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectCoalesceWithNoArguments() throws Exception {   coalesce(); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectCoalesceWithOneArguments() throws Exception {   coalesce(literal(Number_Constant)); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowMergingExpressionWithPlaceholdersWithNullArgsList() throws Exception {   addExpressionArgs(Lists.newArrayList(),arg(),(Object[])null); } 
@Test public void shouldReturnBoundArgsFromSubqueries() throws Exception {   Expression Expression_VAR=column(String_Constant).eq(arg()).and().column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(column(String_Constant).eq().arg(),String_Constant).build()).and().column(String_Constant).eq().arg();   assertThat(Expression_VAR.getBoundArgs()).isEqualTo(ImmutableMap.of(Number_Constant,String_Constant)); } 
@Test(expected=IllegalStateException.class) public void shouldNotAllowGettingRawSqlFromExpressionWithBoundArgs() throws Exception {   column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(column(String_Constant).eq().arg(),String_Constant).build()).toRawSql(); } 
@Test public void shouldGetRawSqlForExpression() throws Exception {   String String_VAR=column(String_Constant).eq().literal(Number_Constant).toRawSql();   assertThat(String_VAR).isEqualTo(String_Constant); } 
@Test(expected=NullPointerException.class) public void shouldFailToConvertNullNumbersArrayIntoExpressions() throws Exception {   literals((Number[])null); } 
@Test public void shouldConvertNumbersArrayIntoExpressions() throws Exception {   String String_VAR=column(String_Constant).in(literals(Number_Constant,Number_Constant,Number_Constant)).toRawSql();   assertThat(String_VAR).isEqualTo(String_Constant); } 
@Test public void shouldConvertEmptyNumbersArrayIntoExpressions() throws Exception {   String String_VAR=column(String_Constant).in(literals(new Number[Number_Constant])).toRawSql();   assertThat(String_VAR).isEqualTo(String_Constant); } 
@Test(expected=NullPointerException.class) public void shouldFailToConvertNullObjectsArrayIntoExpressions() throws Exception {   literals((Number[])null); } 
@Test public void shouldConvertObjectsArrayIntoExpressions() throws Exception {   String String_VAR=column(String_Constant).in(literals(String_Constant,String_Constant,String_Constant)).toRawSql();   assertThat(String_VAR).isEqualTo(String_Constant); } 
@Test public void shouldConvertEmptyObjectsArrayIntoExpressions() throws Exception {   String String_VAR=column(String_Constant).in(literals(new Object[Number_Constant])).toRawSql();   assertThat(String_VAR).isEqualTo(String_Constant); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this);   when(SQLiteDatabase_VAR.compileStatement(anyString())).thenReturn(SQLiteStatement_VAR); } 
@Test public void shouldUseTableSpecifiedInIntoStepInInsertForDefaultValues() throws Exception {   DefaultValuesInsert Insert_VAR=Insert_VAR().into(String_Constant).defaultValues(String_Constant);   assertThat(Insert_VAR.mTable).isEqualTo(String_Constant); } 
@Test public void shouldUseTableSpecifiedInIntoStepInInsertWithValues() throws Exception {   Insert Insert_VAR=Insert_VAR().into(String_Constant).value(String_Constant,null);   assertThat(Insert_VAR.mTable).isEqualTo(String_Constant); } 
@Test public void shouldBuildTheInsertForDefaultValues() throws Exception {   DefaultValuesInsert Insert_VAR=Insert_VAR().into(String_Constant).defaultValues(String_Constant);   assertThat(Insert_VAR.mNullColumnHack).isEqualTo(String_Constant); } 
@Test public void shouldBuildTheInsertInSelectFormWithoutSpecifiedColumns() throws Exception {   Query Query_VAR=select().allColumns().from(String_Constant).build();   Insert_VAR().into(String_Constant).long_VARultOf(Query_VAR).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).compileStatement(eq(String_Constant + Query_VAR.toRawQuery().mRawQuery));   verify(SQLiteStatement_VAR).executeInsert(); } 
@Test public void shouldAllowUsingQueryWithBoundArgsForInsertInSelectForm() throws Exception {   Insert_VAR().into(String_Constant).long_VARultOf(select().allColumns().from(String_Constant).where(String_Constant,Number_Constant).build()).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).compileStatement(eq(String_Constant));   verify(SQLiteStatement_VAR).bindString(eq(Number_Constant),eq(String_Constant));   verify(SQLiteStatement_VAR).executeInsert(); } 
@Test public void shouldBuildTheInsertInSelectFormWithSpecifiedColumns() throws Exception {   Query Query_VAR=select().allColumns().from(String_Constant).build();   Insert_VAR().into(String_Constant).columns(String_Constant,String_Constant,String_Constant).long_VARultOf(Query_VAR).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).compileStatement(eq(String_Constant + Query_VAR.toRawQuery().mRawQuery));   verify(SQLiteStatement_VAR).executeInsert(); } 
@Test public void shouldConcatenateSpecifiedColumnsForInsertInSelectForm() throws Exception {   Query Query_VAR=select().allColumns().from(String_Constant).build();   Insert_VAR().into(String_Constant).columns(String_Constant,String_Constant).columns(String_Constant).long_VARultOf(Query_VAR).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).compileStatement(eq(String_Constant + Query_VAR.toRawQuery().mRawQuery));   verify(SQLiteStatement_VAR).executeInsert(); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectNullColumnsListInInsertInSelectForm() throws Exception {   Query Query_VAR=select().allColumns().from(String_Constant).build();   Insert_VAR().into(String_Constant).columns((String[])null).long_VARultOf(Query_VAR).perform(SQLiteDatabase_VAR); } 
@Test public void shouldBuildInsertWithSingleValue() throws Exception {   Insert Insert_VAR=Insert_VAR().into(String_Constant).value(String_Constant,String_Constant);   assertThat(Insert_VAR.mValues).contains(entry(String_Constant,String_Constant)); } 
@Test public void shouldNotModifyPassedContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   Insert_VAR().into(String_Constant).ContentValues_VAR(ContentValues_VAR).value(String_Constant,String_Constant);   assertThat(ContentValues_VAR.containsKey(String_Constant)).isFalse();   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   Insert_VAR().into(String_Constant).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR);   assertThat(ContentValues_VAR.containsKey(String_Constant)).isFalse(); } 
@Test public void shouldBuildInsertWithConcatenatedContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   Insert Insert_VAR=Insert_VAR().into(String_Constant).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR);   assertThat(Insert_VAR.mValues).contains(entry(String_Constant,String_Constant),entry(String_Constant,String_Constant)); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenBySingleValue() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   Insert Insert_VAR=Insert_VAR().into(String_Constant).ContentValues_VAR(ContentValues_VAR).value(String_Constant,null);   assertThat(Insert_VAR.mValues).contains(entry(String_Constant,String_Constant),entry(String_Constant,null)); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenByOtherContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.putNull(String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   Insert Insert_VAR=Insert_VAR().into(String_Constant).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR);   assertThat(Insert_VAR.mValues).contains(entry(String_Constant,String_Constant),entry(String_Constant,String_Constant),entry(String_Constant,null)); } 
@Test public void shouldPerformInsertWithDefaultValues() throws Exception {   Insert_VAR().into(String_Constant).defaultValues(String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).Insert_VAR(eq(String_Constant),eq(String_Constant),isNull(ContentValues.class)); } 
@Test public void shouldPerformInsertWithValues() throws Exception {   Insert_VAR().into(String_Constant).value(String_Constant,Number_Constant).perform(SQLiteDatabase_VAR);   ArgumentCaptor<ContentValues> ContentValues_VARArgument=ArgumentCaptor.forClass(ContentValues.class);   verify(SQLiteDatabase_VAR).Insert_VAR(eq(String_Constant),isNull(String.class),ContentValues_VARArgument.capture());   assertThat(ContentValues_VARArgument.getValue()).contains(entry(String_Constant,Number_Constant)); } 
@Test(expected=RuntimeException.class) public void shouldCrashIfPerformOrThrowFailsForInsertWithResultOf() throws Exception {   when(SQLiteStatement_VAR.executeInsert()).thenReturn(-Number_Constant);   Query Query_VAR=select().allColumns().from(String_Constant).build();   Insert_VAR().into(String_Constant).columns(String_Constant).long_VARultOf(Query_VAR).performOrThrow(SQLiteDatabase_VAR); } 
@Test public void shouldReturnInsertedIdIfEverythingGoesFine() throws Exception {   when(SQLiteStatement_VAR.executeInsert()).thenReturn(Number_Constant);   Query Query_VAR=select().allColumns().from(String_Constant).build();   long long_VARult=Insert_VAR().into(String_Constant).columns(String_Constant).long_VARultOf(Query_VAR).performOrThrow(SQLiteDatabase_VAR);   assertThat(long_VARult).isEqualTo(Number_Constant); } 
@Test public void shouldUseInsertOrThrowWithinPerformOfThrowOfCommonInsert() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,Number_Constant);   Insert_VAR().into(String_Constant).ContentValues_VAR(ContentValues_VAR).performOrThrow(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).Insert_VAROrThrow(eq(String_Constant),isNull(String.class),eq(ContentValues_VAR)); } 
@Test public void shouldReturnSameResultAsInsertOrThrowForCommonInsert() throws Exception {   when(SQLiteDatabase_VAR.Insert_VAROrThrow(anyString(),anyString(),any(ContentValues.class))).thenReturn(Number_Constant);   long long_VAR=Insert_VAR().into(String_Constant).value(String_Constant,Number_Constant).performOrThrow(SQLiteDatabase_VAR);   assertThat(long_VAR).isEqualTo(Number_Constant); } 
@Test public void shouldUseInsertOrThrowWithinPerformOfThrowOfDefaultValuesInsert() throws Exception {   Insert_VAR().into(String_Constant).defaultValues(String_Constant).performOrThrow(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).Insert_VAROrThrow(eq(String_Constant),eq(String_Constant),isNull(ContentValues.class)); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldBuildTheSimpleSelect() throws Exception {   select().allColumns().from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheSimpleDistinctSelect() throws Exception {   Query.select().distinct().allColumns().from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheUnionCompoundQuery() throws Exception {   select().allColumns().from(String_Constant).union().select().allColumns().from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheUnionCompoundQueryWithDistinctSelect() throws Exception {   select().allColumns().from(String_Constant).union().select().distinct().allColumns().from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheUnionAllCompoundQuery() throws Exception {   select().allColumns().from(String_Constant).union().all().select().allColumns().from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheExceptCompoundQuery() throws Exception {   select().allColumns().from(String_Constant).except().select().allColumns().from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheIntersectCompoundQuery() throws Exception {   select().allColumns().from(String_Constant).intersect().select().allColumns().from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheQueryWithSelection() throws Exception {   select().allColumns().from(String_Constant).where(String_Constant,Number_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void shouldBuildTheQueryWithMultipleSelections() throws Exception {   select().allColumns().from(String_Constant).where(String_Constant,Number_Constant).where(String_Constant,Number_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant,String_Constant})); } 
@Test public void shouldBuildTheQueryWithLeftJoin() throws Exception {   select().allColumns().from(String_Constant).left().join(String_Constant).on(String_Constant,Number_Constant).where(String_Constant,Number_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant,String_Constant})); } 
@Test public void shouldBuildTheQueryWithCrossJoin() throws Exception {   select().allColumns().from(String_Constant).cross().join(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheQueryWithNaturalJoin() throws Exception {   select().allColumns().from(String_Constant).natural().join(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheQueryWithAliasedJoin() throws Exception {   select().allColumns().from(String_Constant).join(String_Constant).as(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheQueryJoinedWithSubquery() throws Exception {   select().allColumns().from(String_Constant).join(select().allColumns().from(String_Constant).build()).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheQueryWithMultipleInnerJoins() throws Exception {   select().from(String_Constant).join(String_Constant).join(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheQueryWithMultipleJoins() throws Exception {   select().from(String_Constant).join(String_Constant).left().join(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheQueryFromSubquery() throws Exception {   select().allColumns().from(select().allColumns().from(String_Constant).build()).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildTheQueryWithJoinUsingColumnList() throws Exception {   select().allColumns().from(String_Constant).join(String_Constant).using(String_Constant,String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithSingleColumnProjection() throws Exception {   select().column(String_Constant).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithAliasedColumnProjection() throws Exception {   select().column(String_Constant).as(String_Constant).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithAliasedColumnListProjection() throws Exception {   select().columns(String_Constant,String_Constant,String_Constant).of(String_Constant).asColumnNames().from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldConcatenateProjections() throws Exception {   select().column(String_Constant).column(String_Constant).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryForAllColumnsFromSpecifiedTable() throws Exception {   select().allColumns().of(String_Constant).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithAliasedTable() throws Exception {   select().from(String_Constant).as(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAcceptEmptyProjection() throws Exception {   select().column(String_Constant).columns().from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAcceptNullProjection() throws Exception {   select().columns((String[])null).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldSelectAllColumnsWhenProjectionIsNotSpecified() throws Exception {   select().from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAcceptNullSelection() throws Exception {   select().from(String_Constant).where((String)null).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAcceptNullExpressionSelection() throws Exception {   select().from(String_Constant).where((Expression)null).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAcceptNullSortOrder() throws Exception {   select().from(String_Constant).orderBy((String)null).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithNumericLimit() throws Exception {   select().from(String_Constant).limit(Number_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithExpressionLimit() throws Exception {   select().from(String_Constant).limit(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithNumericLimitOffset() throws Exception {   select().from(String_Constant).limit(Number_Constant).offset(Number_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithExpressionLimitOffset() throws Exception {   select().from(String_Constant).limit(Number_Constant).offset(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test(expected=IllegalStateException.class) public void shouldAllowSettingTheLimitOnlyOnce() throws Exception {   select().from(String_Constant).limit(Number_Constant).limit(Number_Constant); } 
@Test public void shouldBuildQueryWithoutAnyTables() throws Exception {   select().column(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithGroupByClause() throws Exception {   select().from(String_Constant).groupBy(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithMultipleGroupByClauses() throws Exception {   select().from(String_Constant).groupBy(String_Constant).groupBy(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithGroupByAndHavingClause() throws Exception {   select().from(String_Constant).groupBy(String_Constant).having(String_Constant,Number_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void shouldBuildQueryWithGroupByAndMultipleHavingClauses() throws Exception {   select().from(String_Constant).groupBy(String_Constant).having(String_Constant,Number_Constant).having(String_Constant,Number_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant,String_Constant})); } 
@Test public void shouldIgnoreNullLimit() throws Exception {   select().from(String_Constant).limit(null).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test(expected=IllegalStateException.class) public void shouldNotAllowSettingValidNumericalOffsetAfterNullLimit() throws Exception {   select().from(String_Constant).limit(null).offset(Number_Constant); } 
@Test(expected=IllegalStateException.class) public void shouldNotAllowSettingValidExpressionOffsetAfterNullLimit() throws Exception {   select().from(String_Constant).limit(null).offset(String_Constant); } 
@Test(expected=IllegalStateException.class) public void shouldNotAllowHavingClauseWithoutGroupByClause() throws Exception {   select().from(String_Constant).having(String_Constant,Number_Constant).build().perform(SQLiteDatabase_VAR); } 
@Test public void shouldBuildQueryWithOrderByWithoutSpecifiedSorting() throws Exception {   select().from(String_Constant).orderBy(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithOrderByWithAscSort() throws Exception {   select().from(String_Constant).orderBy(String_Constant).asc().build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithOrderByWithDescSort() throws Exception {   select().from(String_Constant).orderBy(String_Constant).desc().build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithMultipleOrderByClauses() throws Exception {   select().from(String_Constant).orderBy(String_Constant).orderBy(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithOrderByWithSpecifiedCollation() throws Exception {   select().from(String_Constant).orderBy(String_Constant).collate(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithOrderByWithSpecifiedCollationUsingCollatingSequence() throws Exception {   select().from(String_Constant).orderBy(String_Constant).collate(CollatingSequence.NOCASE).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithExpressionInProjection() throws Exception {   select().expr(column(String_Constant)).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithExpressionInOrderBy() throws Exception {   select().from(String_Constant).orderBy(column(String_Constant)).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithExpressionInSelection() throws Exception {   select().from(String_Constant).where(column(String_Constant).is().not().nul()).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithExpressionInJoinConstraint() throws Exception {   select().from(String_Constant).join(String_Constant).on(column(String_Constant,String_Constant).eq().column(String_Constant,String_Constant)).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithExpressionInGroupByClause() throws Exception {   select().from(String_Constant).groupBy(column(String_Constant)).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithExpressionInHavingClause() throws Exception {   select().from(String_Constant).groupBy(String_Constant).having(sum(column(String_Constant)).gt().literal(Number_Constant)).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithMultipleColumnsFromSingleTable() throws Exception {   select().columns(String_Constant,String_Constant,String_Constant).of(String_Constant).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithProjectionContainingNullBuildByConvenienceMethod() throws Exception {   select().nul().as(String_Constant).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithProjectionContainingNumericLiteralBuildByConvenienceMethod() throws Exception {   select().literal(Number_Constant).as(String_Constant).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithProjectionContainingObjectLiteralBuildByConvenienceMethod() throws Exception {   select().literal(String_Constant).as(String_Constant).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldBuildQueryWithProjectionContainingFullyQualifiedTableBuildByConvenienceMethod() throws Exception {   select().column(String_Constant,String_Constant).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
private QueryBuilder buildComplexQuery(){   return select().column(String_Constant,String_Constant).from(String_Constant).left().join(String_Constant).as(String_Constant).on(String_Constant,Number_Constant).groupBy(column(String_Constant,String_Constant)).having(column(String_Constant).lt().arg(),Number_Constant).limit(Number_Constant).offset(Number_Constant).orderBy(column(String_Constant,String_Constant)).except().select().distinct().column(String_Constant).from(String_Constant).where(column(String_Constant).eq().literal(-Number_Constant)); } 
@Test public void shouldCopyQuery() throws Exception {   Query Query_VAR=buildComplexQuery().build();   Query_VAR.perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant,String_Constant}));   QueryBuilder QueryBuilder_VAR=Query_VAR.buildUpon();   QueryBuilder_VAR.build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR,times(Number_Constant)).rawQuery(eq(String_Constant),eq(new String[]{String_Constant,String_Constant})); } 
@Test public void shouldNotChangeOriginalQueryWhenChangingACopy() throws Exception {   Query Query_VAR=buildComplexQuery().build();   Query_VAR.perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant,String_Constant}));   QueryBuilder QueryBuilder_VAR=Query_VAR.buildUpon();   QueryBuilder_VAR.where(column(String_Constant).is().not().nul());   QueryBuilder_VAR.build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant,String_Constant}));   Query_VAR.perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR,times(Number_Constant)).rawQuery(eq(String_Constant),eq(new String[]{String_Constant,String_Constant})); } 
@Test public void shouldNotChangeACopyWhenChangingTheOriginalQuery() throws Exception {   QueryBuilder QueryBuilder_VAR=buildComplexQuery();   Query Query_VAR=QueryBuilder_VAR.build();   Query_VAR.perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant,String_Constant}));   QueryBuilder QueryBuilder_VAR=Query_VAR.buildUpon();   QueryBuilder_VAR.where(column(String_Constant).is().not().nul());   QueryBuilder_VAR.build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant,String_Constant}));   QueryBuilder_VAR.build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR,times(Number_Constant)).rawQuery(eq(String_Constant),eq(new String[]{String_Constant,String_Constant})); } 
@Test public void shouldCopyTheQueryWithIncompleteJoinStatement() throws Exception {   Query Query_VAR=select().from(String_Constant).join(String_Constant).build();   QueryBuilder QueryBuilder_VAR=Query_VAR.buildUpon();   Query_VAR.perform(SQLiteDatabase_VAR);   QueryBuilder_VAR.build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR,times(Number_Constant)).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldCopyTheQueryWithMultipleJoinStatements() throws Exception {   Query Query_VAR=select().from(String_Constant).join(String_Constant).join(String_Constant).build();   QueryBuilder QueryBuilder_VAR=Query_VAR.buildUpon();   Query_VAR.perform(SQLiteDatabase_VAR);   QueryBuilder_VAR.build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR,times(Number_Constant)).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldOverrideSelectDistinctWithLaterCallToSelectAll() throws Exception {   select().distinct().from(String_Constant).all().build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldCopyTheQueryWithJoinStatementWithConstraint() throws Exception {   Query Query_VAR=select().from(String_Constant).join(String_Constant).on(column(String_Constant).eq().column(String_Constant)).build();   QueryBuilder QueryBuilder_VAR=Query_VAR.buildUpon();   Query_VAR.perform(SQLiteDatabase_VAR);   QueryBuilder_VAR.build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR,times(Number_Constant)).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldCopyTheQueryWithJoinStatementWithUsingClause() throws Exception {   Query Query_VAR=select().from(String_Constant).left().join(String_Constant).using(String_Constant).build();   QueryBuilder QueryBuilder_VAR=Query_VAR.buildUpon();   Query_VAR.perform(SQLiteDatabase_VAR);   QueryBuilder_VAR.build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR,times(Number_Constant)).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldGetListOfTablesForSimpleQuery() throws Exception {   Set<String> Set<String>_VAR=select().from(String_Constant).getTables();   assertThat(Set<String>_VAR).containsExactly(String_Constant); } 
@Test public void shouldGetListOfTablesFromSubqueries() throws Exception {   Set<String> Set<String>_VAR=select().from(select().from(String_Constant).build()).getTables();   assertThat(Set<String>_VAR).containsExactly(String_Constant); } 
@Test public void shouldGetListOfTablesFromJoins() throws Exception {   Set<String> Set<String>_VAR=select().from(String_Constant).join(String_Constant).getTables();   assertThat(Set<String>_VAR).containsExactly(String_Constant,String_Constant); } 
@Test public void shouldGetListOfTablesFromMultipleJoins() throws Exception {   Set<String> Set<String>_VAR=select().from(String_Constant).join(String_Constant).join(String_Constant).getTables();   assertThat(Set<String>_VAR).containsExactly(String_Constant,String_Constant,String_Constant); } 
@Test public void shouldGetListOfTablesFromJoinedSubqueries() throws Exception {   Set<String> Set<String>_VAR=select().from(String_Constant).join(select().from(String_Constant).build()).getTables();   assertThat(Set<String>_VAR).containsExactly(String_Constant,String_Constant); } 
@Test public void shouldGetListOfTablesForCompoundQuery() throws Exception {   Set<String> Set<String>_VAR=select().from(String_Constant).union().select().from(String_Constant).getTables();   assertThat(Set<String>_VAR).containsExactly(String_Constant,String_Constant); } 
@Test public void shouldGetTablesFromInExpressionInSelection() throws Exception {   Set<String> Set<String>_VAR=select().from(String_Constant).where(column(String_Constant).in(select().column(String_Constant).from(String_Constant).build())).getTables();   assertThat(Set<String>_VAR).containsExactly(String_Constant,String_Constant); } 
@Test public void shouldGetTablesFromInExpressionInHavingClause() throws Exception {   Set<String> Set<String>_VAR=select().from(String_Constant).groupBy(String_Constant).having(column(String_Constant).in(select().column(String_Constant).from(String_Constant).build())).getTables();   assertThat(Set<String>_VAR).containsExactly(String_Constant,String_Constant); } 
@Test public void shouldGetTablesFromInExpressionInProjection() throws Exception {   Set<String> Set<String>_VAR=select().expr(column(String_Constant).in(select().column(String_Constant).from(String_Constant).build())).from(String_Constant).getTables();   assertThat(Set<String>_VAR).containsExactly(String_Constant,String_Constant); } 
@Test public void shouldGetTablesFromInExpressionInOrderBy() throws Exception {   Set<String> Set<String>_VAR=select().from(String_Constant).orderBy(column(String_Constant).in(select().column(String_Constant).from(String_Constant).build())).getTables();   assertThat(Set<String>_VAR).containsExactly(String_Constant,String_Constant); } 
@Test public void shouldGetTablesFromInExpressionInJoinConstraints() throws Exception {   Set<String> Set<String>_VAR=select().from(String_Constant).join(String_Constant).on(column(String_Constant,String_Constant).in(select().column(String_Constant).from(String_Constant).build())).getTables();   assertThat(Set<String>_VAR).containsExactly(String_Constant,String_Constant,String_Constant); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectExpressionInProjectionWithUnboundArgsPlaceholders() throws Exception {   select().expr(column(String_Constant).eq().arg()); } 
@Test public void shouldBuildProjectionFromExpressionWithBoundArgs() throws Exception {   select().expr(column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooManyArgsPlaceholders() throws Exception {   select().where(column(String_Constant).eq().arg()); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooFewArgsPlaceholders() throws Exception {   select().where(column(String_Constant).eq().arg(),Number_Constant,Number_Constant); } 
@Test public void shouldBuildSelectionFromExpressionWithArgsPlaceholders() throws Exception {   select().from(String_Constant).where(column(String_Constant).eq().arg(),String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void shouldBuildSelectionFromExpressionWithBoundArgs() throws Exception {   select().from(String_Constant).where(column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectJoinConstraintWithExpressionWithTooManyArgsPlaceholders() throws Exception {   select().from(String_Constant).join(String_Constant).on(column(String_Constant).eq().arg()); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectJoinConstraintWithExpressionWithTooFewArgsPlaceholders() throws Exception {   select().from(String_Constant).join(String_Constant).on(column(String_Constant).eq().arg(),Number_Constant,Number_Constant); } 
@Test public void shouldBuildJoinConstraintFromExpressionWithArgsPlaceholders() throws Exception {   select().from(String_Constant).join(String_Constant).on(column(String_Constant).eq().arg(),String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void shouldBuildJoinConstraintFromExpressionWithBoundArgs() throws Exception {   select().from(String_Constant).join(String_Constant).on(column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectHavingClauseWithExpressionWithTooManyArgsPlaceholders() throws Exception {   select().from(String_Constant).groupBy(String_Constant).having(column(String_Constant).eq().arg()); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectHavingClauseWithExpressionWithTooFewArgsPlaceholders() throws Exception {   select().from(String_Constant).groupBy(String_Constant).having(column(String_Constant).eq().arg(),Number_Constant,Number_Constant); } 
@Test public void shouldBuildHavingClauseFromExpressionWithArgsPlaceholders() throws Exception {   select().from(String_Constant).groupBy(String_Constant).having(column(String_Constant).eq().arg(),String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void shouldBuildHavingClauseFromExpressionWithBoundArgs() throws Exception {   select().from(String_Constant).groupBy(String_Constant).having(column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectExpressionInGroupByWithUnboundArgsPlaceholders() throws Exception {   select().groupBy(column(String_Constant).eq().arg()); } 
@Test public void shouldBuildGroupByFromExpressionWithBoundArgs() throws Exception {   select().from(String_Constant).groupBy(column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectExpressionInOrderByWithUnboundArgsPlaceholders() throws Exception {   select().orderBy(column(String_Constant).eq().arg()); } 
@Test public void shouldBuildOrderByFromExpressionWithBoundArgs() throws Exception {   select().from(String_Constant).orderBy(column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void shouldAllowUsingNullArgumentsForSelection() throws Exception {   select().from(String_Constant).where(String_Constant,(Object[])null).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionWithExpression() throws Exception {   select().from(String_Constant).where(column(String_Constant).is().nul(),(Object[])null).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAllowUsingNullArgumentsForHaving() throws Exception {   select().from(String_Constant).groupBy(String_Constant).having(String_Constant,(Object[])null).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAllowUsingNullArgumentsForHavingWithExpression() throws Exception {   select().from(String_Constant).groupBy(String_Constant).having(column(String_Constant).is().nul(),(Object[])null).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAllowUsingNullArgumentsForJoinConstraint() throws Exception {   select().from(String_Constant).join(String_Constant).on(String_Constant,(Object[])null).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAllowUsingNullArgumentsForJoinConstraintWithExpression() throws Exception {   select().from(String_Constant).join(String_Constant).on(column(String_Constant).is().nul(),(Object[])null).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectNullColumnListInJoinUsingClause() throws Exception {   select().from(String_Constant).join(String_Constant).using((String[])null).build().perform(SQLiteDatabase_VAR); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectEmptyColumnListInJoinUsingClause() throws Exception {   select().from(String_Constant).join(String_Constant).using(new String[Number_Constant]).build().perform(SQLiteDatabase_VAR); } 
@Test public void shouldPreserveOrderOfSpecifiedColumns() throws Exception {   select().column(String_Constant).columns(String_Constant,String_Constant).column(String_Constant).from(String_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@SuppressWarnings(String_Constant) @Test public void shouldGracefullyHandleNullsInVariousPlaces() throws Exception {   String[] String[]_VAR=null;   String String_VAR=null;   String String_VARArgs=null;   String String_VAR=null;   select().columns(String[]_VAR).from(String_Constant).where(String_VAR,String_VARArgs).orderBy(String_VAR).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldNotLoseArgumentsInJoinedSubqueries() throws Exception {   select().allColumns().from(String_Constant).join(select().column(String_Constant).from(String_Constant).where(column(String_Constant).eq().arg(),String_Constant)).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test(expected=IllegalStateException.class) public void shouldFailIfNoTablesOrLiteralsWereSpecified() throws Exception {   select().build().perform(SQLiteDatabase_VAR); } 
@Test public void shouldAllowQueryingSimpleLiteral() throws Exception {   select().literal(Number_Constant).build().perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).rawQuery(eq(String_Constant),eq(new String[Number_Constant])); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this);   when(SQLiteDatabase_VAR.compileStatement(anyString())).thenReturn(SQLiteStatement_VAR); } 
@Test public void shouldUpdateCorrectTableWhenDoingSimpleUpdate() throws Exception {   update().table(String_Constant).value(String_Constant,Number_Constant).where(String_Constant,Number_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).update(eq(String_Constant),any(ContentValues.class),anyString(),any(String[].class)); } 
@Test public void shouldPassCorrectValuesWhenDoingSimpleUpdate() throws Exception {   update().table(String_Constant).value(String_Constant,Number_Constant).where(String_Constant,Number_Constant).perform(SQLiteDatabase_VAR);   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   verify(SQLiteDatabase_VAR).update(anyString(),ArgumentCaptor<ContentValues>_VAR.capture(),anyString(),any(String[].class));   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,Number_Constant)); } 
@Test public void shouldUseCorrectSelectionAndArgsWhenDoingSimpleUpdate() throws Exception {   update().table(String_Constant).value(String_Constant,Number_Constant).where(String_Constant,Number_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).update(anyString(),any(ContentValues.class),eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void shouldConcatenateSelectionAndArgs() throws Exception {   update().table(String_Constant).value(String_Constant,Number_Constant).where(String_Constant,Number_Constant).where(String_Constant,String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).update(anyString(),any(ContentValues.class),eq(String_Constant),eq(new String[]{String_Constant,String_Constant})); } 
@Test public void shouldBuildSelectionFromExpression() throws Exception {   update().table(String_Constant).value(String_Constant,Number_Constant).where(column(String_Constant).eq().arg(),Number_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).update(anyString(),any(ContentValues.class),eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void shouldUseSQLiteStatementWhenColumnExpressionIsUsed() throws Exception {   update().table(String_Constant).setColumn(String_Constant,String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR,never()).update(anyString(),any(ContentValues.class),anyString(),any(String[].class));   verify(SQLiteDatabase_VAR).compileStatement(anyString()); } 
@Test public void shouldCopyColumnExpressionsDirectlyIntoStatement() throws Exception {   update().table(String_Constant).setColumn(String_Constant,String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).compileStatement(eq(String_Constant)); } 
@Test public void shouldBuildColumnExpressionsWithSelection() throws Exception {   update().table(String_Constant).setColumn(String_Constant,String_Constant).where(String_Constant,String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).compileStatement(eq(String_Constant)); } 
@Test public void shouldBuildColumnExpressionsFromExpression() throws Exception {   update().table(String_Constant).setColumn(String_Constant,Expressions.literal(Number_Constant)).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).compileStatement(eq(String_Constant)); } 
@Test public void shouldPassContentValuesArgsAsBoundArgsWhenCustomColumnExpressionsIsUsed() throws Exception {   update().table(String_Constant).setColumn(String_Constant,String_Constant).value(String_Constant,String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).compileStatement(eq(String_Constant)); } 
@Test public void shouldOverrideContentValuesAddedEarlierWithCustomColumnExpressionForTheSameColumn() throws Exception {   update().table(String_Constant).value(String_Constant,String_Constant).value(String_Constant,String_Constant).setColumn(String_Constant,String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).compileStatement(eq(String_Constant)); } 
@Test public void shouldOverrideCustomColumnExpressionAddedEarlierWithContentValuesForTheSameColumn() throws Exception {   update().table(String_Constant).setColumn(String_Constant,String_Constant).setColumn(String_Constant,String_Constant).value(String_Constant,String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).compileStatement(eq(String_Constant)); } 
@Test public void shouldRevertToSimpleUpdateWhenAllCustomColumnExpressionsAreOverridden() throws Exception {   update().table(String_Constant).setColumn(String_Constant,String_Constant).value(String_Constant,String_Constant).value(String_Constant,String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).update(anyString(),any(ContentValues.class),anyString(),any(String[].class));   verify(SQLiteDatabase_VAR,never()).compileStatement(anyString()); } 
@Test public void shouldNotModifyPassedContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   update().table(String_Constant).ContentValues_VAR(ContentValues_VAR).value(String_Constant,String_Constant);   assertThat(ContentValues_VAR.containsKey(String_Constant)).isFalse();   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   update().table(String_Constant).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR);   assertThat(ContentValues_VAR.containsKey(String_Constant)).isFalse(); } 
@Test public void shouldBuildInsertWithConcatenatedContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   update().table(String_Constant).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR).perform(SQLiteDatabase_VAR);   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   verify(SQLiteDatabase_VAR).update(anyString(),ArgumentCaptor<ContentValues>_VAR.capture(),anyString(),any(String[].class));   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,String_Constant),entry(String_Constant,String_Constant)); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenBySingleValue() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   update().table(String_Constant).ContentValues_VAR(ContentValues_VAR).value(String_Constant,null).perform(SQLiteDatabase_VAR);   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   verify(SQLiteDatabase_VAR).update(anyString(),ArgumentCaptor<ContentValues>_VAR.capture(),anyString(),any(String[].class));   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,String_Constant),entry(String_Constant,null)); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenByOtherContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.putNull(String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   update().table(String_Constant).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR).perform(SQLiteDatabase_VAR);   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   verify(SQLiteDatabase_VAR).update(anyString(),ArgumentCaptor<ContentValues>_VAR.capture(),anyString(),any(String[].class));   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,String_Constant),entry(String_Constant,String_Constant),entry(String_Constant,null)); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectColumnExpressionWithUnboundArgsPlaceholders() throws Exception {   update().table(String_Constant).setColumn(String_Constant,arg()); } 
@Test public void shouldUseBoundArgsFromColumnExpressions() throws Exception {   update().table(String_Constant).setColumn(String_Constant,column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).compileStatement(eq(String_Constant));   verify(SQLiteStatement_VAR).bindString(eq(Number_Constant),eq(String_Constant)); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooManyArgsPlaceholders() throws Exception {   update().table(String_Constant).value(String_Constant,String_Constant).where(column(String_Constant).eq().arg()); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooFewArgsPlaceholders() throws Exception {   update().table(String_Constant).value(String_Constant,String_Constant).where(column(String_Constant).eq().arg(),Number_Constant,Number_Constant); } 
@Test public void shouldBuildSelectionFromExpressionWithArgsPlaceholders() throws Exception {   update().table(String_Constant).value(String_Constant,String_Constant).where(column(String_Constant).eq().arg(),String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).update(anyString(),any(ContentValues.class),eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void shouldBuildSelectionFromExpressionWithBoundArgs() throws Exception {   update().table(String_Constant).value(String_Constant,String_Constant).where(column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).update(anyString(),any(ContentValues.class),anyString(),eq(new String[]{String_Constant})); } 
@Test public void shouldNotUseBoundArgsFromColumnExpressionsOverriddenByContentValues() throws Exception {   update().table(String_Constant).setColumn(String_Constant,column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).value(String_Constant,Number_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).update(anyString(),any(ContentValues.class),anyString(),eq(new String[Number_Constant])); } 
@Test public void shouldOverrideBoundArgsFromColumnExpressionsIfTheExpressionForTheSameColumnIsSpecifiedTwice() throws Exception {   update().table(String_Constant).setColumn(String_Constant,column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).setColumn(String_Constant,column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).perform(SQLiteDatabase_VAR);   verify(SQLiteStatement_VAR).bindString(eq(Number_Constant),eq(String_Constant)); } 
@Test public void shouldOverrideBoundArgsFromColumnExpressionsWithSimpleColumnExpression() throws Exception {   update().table(String_Constant).setColumn(String_Constant,column(String_Constant).in(select().column(String_Constant).from(String_Constant).where(String_Constant,String_Constant).build())).setColumn(String_Constant,String_Constant).perform(SQLiteDatabase_VAR);   verify(SQLiteStatement_VAR).executeUpdateDelete();   verify(SQLiteStatement_VAR).close();   verifyNoMoreInteractions(SQLiteStatement_VAR); } 
@Test public void shouldAllowUsingNullArgumentsForSelection() throws Exception {   update().table(String_Constant).where(String_Constant,(Object[])null).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).update(eq(String_Constant),any(ContentValues.class),eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionWithExpression() throws Exception {   update().table(String_Constant).where(column(String_Constant).is().nul(),(Object[])null).perform(SQLiteDatabase_VAR);   verify(SQLiteDatabase_VAR).update(eq(String_Constant),any(ContentValues.class),eq(String_Constant),eq(new String[Number_Constant])); } 
@Test public void shouldAllowUsingNullSelectionWithNullArguments() throws Exception {   update().table(String_Constant).where((String)null).perform(SQLiteDatabase_VAR); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingNullSelectionWithArguments() throws Exception {   update().table(String_Constant).where((String)null,String_Constant).perform(SQLiteDatabase_VAR); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldCreateViewFromProvidedQuery() throws Exception {   ViewActions.create().view(String_Constant).as(select().from(String_Constant).build()).perform(SQLiteDatabase_VAR);   Mockito.verify(SQLiteDatabase_VAR).execSQL(String_Constant); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingQueryWithBoundArgs() throws Exception {   ViewActions.create().view(String_Constant).as(select().from(String_Constant).where(column(String_Constant).eq().arg(),String_Constant).build()); } 
@Test public void shouldDropSpecifiedView() throws Exception {   ViewActions.dropIfExists().view(String_Constant).perform(SQLiteDatabase_VAR);   Mockito.verify(SQLiteDatabase_VAR).execSQL(String_Constant); } 
@Override public String apply(Cursor Cursor_VAR){   return String_VAR; } 
@Override public String apply(Cursor Cursor_VAR){   throw new AssertionError(String_Constant); } 
@Override public String apply(Cursor Cursor_VAR){   return Cursor_VAR.getString(Number_Constant); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this);   ShadowContentResolver.registerProvider(String_VAR,ContentProvider_VAR);   MatrixCursor_VAR=buildCursor();   makeProviderReturn(MatrixCursor_VAR);   Robolectric.getBackgroundScheduler().pause(); } 
private MatrixCursor buildCursor(){   MatrixCursor MatrixCursor_VAR=new MatrixCursor(new String[]{String_Constant});   MatrixCursor_VAR.addRow(new Object[]{String_Constant});   MatrixCursor_VAR.addRow(new Object[]{String_Constant});   MatrixCursor_VAR.setNotificationUri(Robolectric.application.getContentResolver(),Uri_VAR);   return MatrixCursor_VAR; } 
private void makeProviderReturn(Cursor Cursor_VAR){   when(ContentProvider_VAR.query(eq(Uri_VAR),(String[])isNull(),(String)isNull(),(String[])isNull(),(String)isNull())).thenReturn(Cursor_VAR); } 
@Test public void shouldApplyTransformFunctionInDoInBackground() throws Exception {   final Loader<List<String>> Loader<MyCustomWrapper>_VAR=CursorLoaderBuilder.forUri(Uri_VAR).transformRow(Function<Cursor,String>_VAR).build(Robolectric.application);   Loader<MyCustomWrapper>_VAR.startLoading();   final Loader.OnLoadCompleteListener<List<String>> Loader.OnLoadCompleteListener<MyCustomWrapper>_VAR=mock(Loader.OnLoadCompleteListener.class);   Loader<MyCustomWrapper>_VAR.registerListener(Number_Constant,Loader.OnLoadCompleteListener<MyCustomWrapper>_VAR);   Robolectric.getBackgroundScheduler().runOneTask();   verify(Loader.OnLoadCompleteListener<MyCustomWrapper>_VAR).onLoadComplete(same(Loader<MyCustomWrapper>_VAR),eq(Lists.newArrayList(String_Constant,String_Constant))); } 
@Test public void shouldNotCloseJustReturnedCursor() throws Exception {   final Loader<List<String>> Loader<MyCustomWrapper>_VAR=CursorLoaderBuilder.forUri(Uri_VAR).transformRow(Function<Cursor,String>_VAR).build(Robolectric.application);   Loader<MyCustomWrapper>_VAR.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   assertThat(MatrixCursor_VAR.isClosed()).isFalse(); } 
@Test public void shouldCloseOldCursorIfNewOneAppears() throws Exception {   final Loader<List<String>> Loader<MyCustomWrapper>_VAR=CursorLoaderBuilder.forUri(Uri_VAR).transformRow(Function<Cursor,String>_VAR).build(Robolectric.application);   Loader<MyCustomWrapper>_VAR.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   final MatrixCursor MatrixCursor_VAR=new MatrixCursor(MatrixCursor_VAR.getColumnNames());   Loader<MyCustomWrapper>_VAR.reset();   Robolectric.getBackgroundScheduler().runOneTask();   makeProviderReturn(MatrixCursor_VAR);   assertThat(MatrixCursor_VAR.isClosed()).isTrue();   assertThat(MatrixCursor_VAR.isClosed()).isFalse(); } 
@Test public void shouldTransformCursorProperly() throws Exception {   final Loader<MyCustomWrapper> Loader<MyCustomWrapper>_VAR=CursorLoaderBuilder.forUri(Uri_VAR).transformRow(Function<Cursor,String>_VAR).transform(new Function<List<String>,MyCustomWrapper>(){     @Override public MyCustomWrapper apply(    List<String> List<String>_VAR){       return new MyCustomWrapper(List<String>_VAR);     }   } ).build(Robolectric.application);   Loader<MyCustomWrapper>_VAR.startLoading();   final Loader.OnLoadCompleteListener<MyCustomWrapper> Loader.OnLoadCompleteListener<MyCustomWrapper>_VAR=mock(Loader.OnLoadCompleteListener.class);   Loader<MyCustomWrapper>_VAR.registerListener(Number_Constant,Loader.OnLoadCompleteListener<MyCustomWrapper>_VAR);   Robolectric.getBackgroundScheduler().runOneTask();   verify(Loader.OnLoadCompleteListener<MyCustomWrapper>_VAR).onLoadComplete(same(Loader<MyCustomWrapper>_VAR),eq(new MyCustomWrapper(Lists.newArrayList(String_Constant,String_Constant)))); } 
@Override public MyCustomWrapper apply(List<String> List<String>_VAR){   return new MyCustomWrapper(List<String>_VAR); } 
@Test public void shouldNotPerformLazyTransformIfNotNecessary() throws Exception {   final Loader<List<String>> Loader<MyCustomWrapper>_VAR=CursorLoaderBuilder.forUri(Uri_VAR).transformRow(Function<Cursor,String>_VAR).lazy().build(Robolectric.application);   Loader<MyCustomWrapper>_VAR.startLoading();   Robolectric.getBackgroundScheduler().runOneTask(); } 
@Ignore @Test public void shouldNotCloseOldCursorInCaseItsSameAsNewOne() throws Exception {   final Loader<MyCustomWrapper> Loader<MyCustomWrapper>_VAR=CursorLoaderBuilder.forUri(Uri_VAR).transformRow(Function<Cursor,String>_VAR).transform(new Function<List<String>,MyCustomWrapper>(){     @Override public MyCustomWrapper apply(    List<String> List<String>_VAR){       return new MyCustomWrapper(List<String>_VAR);     }   } ).build(Robolectric.application);   Loader<MyCustomWrapper>_VAR.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   Robolectric.application.getContentResolver().notifyChange(Uri_VAR,null);   Robolectric.getBackgroundScheduler().runOneTask();   assertThat(MatrixCursor_VAR.isClosed()).isFalse(); } 
@Override public MyCustomWrapper apply(List<String> List<String>_VAR){   return new MyCustomWrapper(List<String>_VAR); } 
private int numberOfOpenedCursors(Cursor... Cursor_VAR){   int int_VAR=Number_Constant;   for (  Cursor MatrixCursor_VAR : Cursor_VAR) {     if (!MatrixCursor_VAR.isClosed()) {       int_VAR++;     }   }   return int_VAR; } 
@Test public void shouldNotCloseOldCursorWhenItsTransformedToTheEqualObjectAsOldOne() throws Exception {   final Loader<MyCustomWrapper> Loader<MyCustomWrapper>_VAR=CursorLoaderBuilder.forUri(Uri_VAR).transformRow(Function<Cursor,String>_VAR).transform(new Function<List<String>,MyCustomWrapper>(){     @Override public MyCustomWrapper apply(    List<String> List<String>_VAR){       return new MyCustomWrapper(List<String>_VAR);     }   } ).build(Robolectric.application);   Loader<MyCustomWrapper>_VAR.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   Robolectric.application.getContentResolver().notifyChange(Uri_VAR,null);   MatrixCursor MatrixCursor_VAR=buildCursor();   makeProviderReturn(MatrixCursor_VAR);   Robolectric.getBackgroundScheduler().runOneTask();   assertThat(numberOfOpenedCursors(MatrixCursor_VAR,MatrixCursor_VAR)).isEqualTo(Number_Constant); } 
@Override public MyCustomWrapper apply(List<String> List<String>_VAR){   return new MyCustomWrapper(List<String>_VAR); } 
@Test public void shouldNotCloseOldCursorWhenItsTransformedToTheSameObjectAsOldOne() throws Exception {   final Loader<String> Loader<MyCustomWrapper>_VAR=CursorLoaderBuilder.forUri(Uri_VAR).transform(Function<Cursor,String>_VAR).build(Robolectric.application);   Loader<MyCustomWrapper>_VAR.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   Robolectric.application.getContentResolver().notifyChange(Uri_VAR,null);   MatrixCursor MatrixCursor_VAR=buildCursor();   makeProviderReturn(MatrixCursor_VAR);   Robolectric.getBackgroundScheduler().runOneTask();   assertThat(numberOfOpenedCursors(MatrixCursor_VAR,MatrixCursor_VAR)).isEqualTo(Number_Constant); } 
@Test public void shouldCloseOldCursorDeliveredEarlierTwice() throws Exception {   final Loader<MyCustomWrapper> Loader<MyCustomWrapper>_VAR=CursorLoaderBuilder.forUri(Uri_VAR).transformRow(Function<Cursor,String>_VAR).transform(new Function<List<String>,MyCustomWrapper>(){     @Override public MyCustomWrapper apply(    List<String> List<String>_VAR){       return new MyCustomWrapper(List<String>_VAR);     }   } ).build(Robolectric.application);   Loader<MyCustomWrapper>_VAR.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   Loader<MyCustomWrapper>_VAR.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   Loader<MyCustomWrapper>_VAR.reset();   Robolectric.getBackgroundScheduler().runOneTask();   assertThat(MatrixCursor_VAR.isClosed()).isTrue(); } 
@Override public MyCustomWrapper apply(List<String> List<String>_VAR){   return new MyCustomWrapper(List<String>_VAR); } 
@Test public void shouldNotDeliverResultIfLoaderHasBeenResetAlready() throws Exception {   final Loader<MyCustomWrapper> Loader<MyCustomWrapper>_VAR=CursorLoaderBuilder.forUri(Uri_VAR).transformRow(Function<Cursor,String>_VAR).transform(new Function<List<String>,MyCustomWrapper>(){     @Override public MyCustomWrapper apply(    List<String> List<String>_VAR){       return new MyCustomWrapper(List<String>_VAR);     }   } ).build(Robolectric.application);   final Loader.OnLoadCompleteListener<MyCustomWrapper> Loader.OnLoadCompleteListener<MyCustomWrapper>_VAR=mock(Loader.OnLoadCompleteListener.class);   Loader<MyCustomWrapper>_VAR.registerListener(Number_Constant,Loader.OnLoadCompleteListener<MyCustomWrapper>_VAR);   Loader<MyCustomWrapper>_VAR.startLoading();   Loader<MyCustomWrapper>_VAR.reset();   Robolectric.getBackgroundScheduler().runTasks(Number_Constant);   makeProviderReturn(new MatrixCursor(MatrixCursor_VAR.getColumnNames()));   Loader<MyCustomWrapper>_VAR.startLoading();   Robolectric.getBackgroundScheduler().runTasks(Number_Constant);   verify(Loader.OnLoadCompleteListener<MyCustomWrapper>_VAR,times(Number_Constant)).onLoadComplete(same(Loader<MyCustomWrapper>_VAR),eq(new MyCustomWrapper(Lists.<String>newArrayList()))); } 
@Override public MyCustomWrapper apply(List<String> List<String>_VAR){   return new MyCustomWrapper(List<String>_VAR); } 
private MyCustomWrapper(List<String> List<String>_VAR){   this.List<String>_VAR=List<String>_VAR; } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (this == Object_VAR)   return Boolean_Constant;   if (Object_VAR == null || getClass() != Object_VAR.getClass())   return Boolean_Constant;   MyCustObject_VARmWrapper MyCustomWrapper_VAR=(MyCustObject_VARmWrapper)Object_VAR;   return Objects.equal(List<String>_VAR,MyCustomWrapper_VAR.List<String>_VAR); } 
@Override public int hashCode(){   return List<String>_VAR != null ? List<String>_VAR.hashCode() : Number_Constant; } 
@Test public void shouldAccessProperRow() throws Exception {   final MatrixCursor MatrixCursor_VAR=new MatrixCursor(new String[]{String_Constant});   for (int i=Number_Constant; i < Number_Constant; i++) {     MatrixCursor_VAR.addRow(new Object[]{String_Constant + i});   }   final LazyCursorList<String> LazyCursorList<String>_VAR=new LazyCursorList<String>(MatrixCursor_VAR,new Function<Cursor,String>(){     @Override public String apply(    Cursor MatrixCursor_VAR){       return MatrixCursor_VAR.getString(Number_Constant);     }   } );   assertThat(LazyCursorList<String>_VAR.get(Number_Constant)).isEqualTo(String_Constant + Number_Constant); } 
@Override public String apply(Cursor Cursor_VAR){   return Cursor_VAR.getString(Number_Constant); } 
@Test public void shouldContainProperSize() throws Exception {   final MatrixCursor MatrixCursor_VAR=new MatrixCursor(new String[]{String_Constant});   for (int i=Number_Constant; i < Number_Constant; i++) {     MatrixCursor_VAR.addRow(new Object[]{String_Constant + i});   }   final LazyCursorList<String> LazyCursorList<String>_VAR=new LazyCursorList<String>(MatrixCursor_VAR,new Function<Cursor,String>(){     @Override public String apply(    Cursor MatrixCursor_VAR){       return null;     }   } );   assertThat(LazyCursorList<String>_VAR.size()).isEqualTo(MatrixCursor_VAR.getCount()); } 
@Override public String apply(Cursor Cursor_VAR){   return null; } 
@Test public void shouldSurviveNullCursor() throws Exception {   final LazyCursorList<String> LazyCursorList<String>_VAR=new LazyCursorList<String>(null,new Function<Cursor,String>(){     @Override public String apply(    Cursor MatrixCursor_VAR){       return MatrixCursor_VAR.getString(Number_Constant);     }   } );   assertThat(LazyCursorList<String>_VAR).isEmpty(); } 
@Override public String apply(Cursor Cursor_VAR){   return Cursor_VAR.getString(Number_Constant); } 
@Test public void shouldWorkFineWithValueBackReferences() throws Exception {   final Insert Insert_VAR=ProviderAction.insert(Uri.EMPTY);   final Insert Insert_VARInsert=ProviderAction.insert(Uri.EMPTY);   final ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=Batcher.begin().append(Insert_VAR).append(Insert_VARInsert).append(ProviderAction.insert(Uri.EMPTY)).withValueBackReference(Insert_VAR,BaseColumns._ID).withValueBackReference(Insert_VARInsert,String_Constant).ArrayList<ContentProviderOperation>_VAR();   assertThat(ArrayList<ContentProviderOperation>_VAR).hasSize(Number_Constant);   final ContentProviderOperation ContentProviderOperation_VAR=ArrayList<ContentProviderOperation>_VAR.get(Number_Constant);   ShadowContentProviderOperation ShadowContentProviderOperation_VAR=Robolectric.shadowOf(ContentProviderOperation_VAR);   final ContentValues ContentValues_VAR=ShadowContentProviderOperation_VAR.getValuesBackReferences();   assertThat(ContentValues_VAR.get(String_Constant)).isEqualTo(Number_Constant);   assertThat(ContentValues_VAR.get(String_Constant)).isEqualTo(Number_Constant); } 
@Test public void shouldResolveSelectionBackReferences() throws Exception {   final Insert Insert_VAR=ProviderAction.insert(Uri.EMPTY);   final Insert Insert_VARInsert=ProviderAction.insert(Uri.EMPTY);   final ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=Batcher.begin().append(Insert_VAR).append(Insert_VARInsert).append(ProviderAction.update(Uri.EMPTY).value(String_Constant,Number_Constant).where(BaseColumns._ID + String_Constant)).withSelectionBackReference(Insert_VAR,Number_Constant).withSelectionBackReference(Insert_VARInsert,Number_Constant).ArrayList<ContentProviderOperation>_VAR();   assertThat(ArrayList<ContentProviderOperation>_VAR).hasSize(Number_Constant);   final ContentProviderOperation ContentProviderOperation_VAR=ArrayList<ContentProviderOperation>_VAR.get(Number_Constant);   ShadowContentProviderOperation ShadowContentProviderOperation_VAR=Robolectric.shadowOf(ContentProviderOperation_VAR);   final Map<Integer,Integer> ContentValues_VAR=ShadowContentProviderOperation_VAR.getSelectionArgsBackReferences();   assertThat(ContentValues_VAR).containsEntry(Number_Constant,Number_Constant);   assertThat(ContentValues_VAR).containsEntry(Number_Constant,Number_Constant); } 
@Test public void shouldGenerateProperListOfContentProviderOperations() throws Exception {   final ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=Batcher.begin().append(ProviderAction.insert(createFakeUri("Insert_VAR"))).append(ProviderAction.insert(createFakeUri("Insert_VAR"))).append(ProviderAction.update(createFakeUri(String_Constant)).value(String_Constant,Number_Constant)).ArrayList<ContentProviderOperation>_VAR();   assertThat(ArrayList<ContentProviderOperation>_VAR).hasSize(Number_Constant);   operationAssert(ArrayList<ContentProviderOperation>_VAR.get(Number_Constant),createFakeUri("Insert_VAR"),ShadowContentProviderOperation.TYPE_INSERT);   operationAssert(ArrayList<ContentProviderOperation>_VAR.get(Number_Constant),createFakeUri("Insert_VAR"),ShadowContentProviderOperation.TYPE_INSERT);   operationAssert(ArrayList<ContentProviderOperation>_VAR.get(Number_Constant),createFakeUri(String_Constant),ShadowContentProviderOperation.TYPE_UPDATE); } 
@Test public void shouldTakeCareAboutContentValuesInBatch() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,Number_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   final ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=Batcher.begin().append(ProviderAction.insert(createFakeUri("Insert_VAR")).ContentValues_VAR(ContentValues_VAR)).ArrayList<ContentProviderOperation>_VAR();   final ShadowContentProviderOperation ShadowContentProviderOperation_VAR=Robolectric.shadowOf(ArrayList<ContentProviderOperation>_VAR.get(Number_Constant));   assertThat(ShadowContentProviderOperation_VAR.getContentValues()).isEqualTo(ContentValues_VAR); } 
@Test public void shouldGenerateEmptyOperations() throws Exception {   assertThat(Batcher.begin().ArrayList<ContentProviderOperation>_VAR()).isEmpty(); } 
@Test public void shouldMapToProperInsertEvenIfTheyHaveIdenticalState() throws Exception {   final Insert Insert_VAR=ProviderAction.insert(createFakeUri(String_Constant));   final Insert Insert_VAR=ProviderAction.insert(createFakeUri(String_Constant));   final ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=Batcher.begin().append(Insert_VAR).append(Insert_VAR).append(ProviderAction.insert(createFakeUri(String_Constant))).withValueBackReference(Insert_VAR,String_Constant).ArrayList<ContentProviderOperation>_VAR();   assertThat(ArrayList<ContentProviderOperation>_VAR).hasSize(Number_Constant);   final ShadowContentProviderOperation ShadowContentProviderOperation_VAR=Robolectric.shadowOf(Iterables.getLast(ArrayList<ContentProviderOperation>_VAR));   final ContentValues ContentValues_VAR=ShadowContentProviderOperation_VAR.getValuesBackReferences();   assertThat(ContentValues_VAR.get(String_Constant)).isEqualTo(Number_Constant); } 
@Test(expected=IllegalStateException.class) public void shouldThrowAnExceptionIfRequestingForPreviousWhenItsDuplicated() throws Exception {   final Insert Insert_VAR=ProviderAction.insert(createFakeUri(String_Constant));   Batcher.begin().append(Insert_VAR).append(Insert_VAR).append(ProviderAction.insert(createFakeUri(String_Constant))).withValueBackReference(Insert_VAR,String_Constant).ArrayList<ContentProviderOperation>_VAR(); } 
@Test(expected=IllegalStateException.class) public void shouldThrowAnExceptionInCaseReferencedInsertDoesNotExistInBatcher() throws Exception {   final Insert Insert_VAR=ProviderAction.insert(createFakeUri(String_Constant));   Batcher.begin().append(ProviderAction.insert(createFakeUri(String_Constant))).withValueBackReference(Insert_VAR,String_Constant).ArrayList<ContentProviderOperation>_VAR(); } 
@Test(expected=IllegalStateException.class) public void shouldThrowAnExceptionIfPreviousInsertForSelectionBackReferenceIsDuplicated() throws Exception {   final Insert Insert_VAR=ProviderAction.insert(createFakeUri(String_Constant));   Batcher.begin().append(Insert_VAR).append(Insert_VAR).append(ProviderAction.delete(createFakeUri(String_Constant)).where(BaseColumns._ID + String_Constant)).withSelectionBackReference(Insert_VAR,Number_Constant).ArrayList<ContentProviderOperation>_VAR(); } 
@Test(expected=IllegalStateException.class) public void shouldThrowAnExceptionPreviousInsertForSelectionBackReferenceWasNotAddedToBatcher() throws Exception {   final Insert Insert_VAR=ProviderAction.insert(createFakeUri(String_Constant));   Batcher.begin().append(ProviderAction.delete(createFakeUri(String_Constant)).where(BaseColumns._ID + String_Constant)).withSelectionBackReference(Insert_VAR,Number_Constant).ArrayList<ContentProviderOperation>_VAR(); } 
@Test public void shouldResolveValueBackReferencesForAllConvertiblesWithinIterable() throws Exception {   final Insert Insert_VAR=ProviderAction.insert(createFakeUri(String_Constant));   final Insert Insert_VAR=ProviderAction.insert(createFakeUri("Insert_VAR"));   final int int_VAR=Number_Constant;   final List<ConvertibleToOperation> List<ConvertibleToOperation>_VAR=Collections.<ConvertibleToOperation>nCopies(int_VAR,ProviderAction.insert(createFakeUri(String_Constant)));   final List<ConvertibleToOperation> Insert_VARDependants=Collections.<ConvertibleToOperation>nCopies(int_VAR,ProviderAction.insert(createFakeUri(String_Constant)));   final ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=Batcher.begin().append(Insert_VAR).append(Insert_VAR).append(List<ConvertibleToOperation>_VAR).withValueBackReference(Insert_VAR,String_Constant).withValueBackReference(Insert_VAR,String_Constant).append(Insert_VARDependants).withValueBackReference(Insert_VAR,String_Constant).withValueBackReference(Insert_VAR,String_Constant).ArrayList<ContentProviderOperation>_VAR();   assertThat(ArrayList<ContentProviderOperation>_VAR).hasSize(int_VAR * Number_Constant + Number_Constant);   for (  ContentProviderOperation ShadowContentProviderOperation_VAR : ArrayList<ContentProviderOperation>_VAR.subList(Number_Constant,Number_Constant + int_VAR)) {     final ShadowContentProviderOperation ShadowContentProviderOperation_VAR=Robolectric.shadowOf(ShadowContentProviderOperation_VAR);     final ContentValues ContentValues_VAR=ShadowContentProviderOperation_VAR.getValuesBackReferences();     assertThat(ContentValues_VAR.get(String_Constant)).isEqualTo(Number_Constant);     assertThat(ContentValues_VAR.get(String_Constant)).isEqualTo(Number_Constant);   }   for (  ContentProviderOperation ShadowContentProviderOperation_VAR : ArrayList<ContentProviderOperation>_VAR.subList(Number_Constant + int_VAR,ArrayList<ContentProviderOperation>_VAR.size())) {     final ShadowContentProviderOperation ShadowContentProviderOperation_VAR=Robolectric.shadowOf(ShadowContentProviderOperation_VAR);     final ContentValues ContentValues_VAR=ShadowContentProviderOperation_VAR.getValuesBackReferences();     assertThat(ContentValues_VAR.get(String_Constant)).isEqualTo(Number_Constant);     assertThat(ContentValues_VAR.get(String_Constant)).isEqualTo(Number_Constant);   } } 
@Test(expected=RuntimeException.class) public void shouldThrowRuntimeExceptionIfRemoteExceptionOccurInResolver() throws Exception {   throwAnExceptionInsideResolversApplyBatch(OperationApplicationException.class); } 
@Test(expected=RuntimeException.class) public void shouldThrowRuntimeExceptionIfOperationApplicationExceptionOccurInResolver() throws Exception {   throwAnExceptionInsideResolversApplyBatch(OperationApplicationException.class); } 
@Test(expected=SecurityException.class) public void ifExceptionThrownFromApplyBatchIsNotCheckedThenJustThrowItInResolver() throws Exception {   throwAnExceptionInsideResolversApplyBatch(SecurityException.class); } 
@Test(expected=RuntimeException.class) public void shouldThrowRuntimeExceptionIfRemoteExceptionOccurInProviderClient() throws Exception {   throwAnExceptionInsideClientsApplyBatch(OperationApplicationException.class); } 
@Test(expected=RuntimeException.class) public void shouldThrowRuntimeExceptionIfOperationApplicationExceptionOccurInProviderClient() throws Exception {   throwAnExceptionInsideClientsApplyBatch(OperationApplicationException.class); } 
@Test(expected=SecurityException.class) public void ifExceptionThrownFromApplyBatchIsNotCheckedThenJustThrowItInProviderClient() throws Exception {   throwAnExceptionInsideClientsApplyBatch(SecurityException.class); } 
@Test public void shouldDecorateOperationsUrisIfSpecified() throws Exception {   final ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=Batcher.begin().append(ProviderAction.insert(createFakeUri("Insert_VAR"))).append(ProviderAction.update(createFakeUri("Insert_VAR")).value(String_Constant,Number_Constant)).append(ProviderAction.delete(createFakeUri(String_Constant))).decorateUrisWith(new UriDecorator(){     @Override public Uri decorate(    Uri uri){       return Uri.withAppendedPath(uri,String_Constant);     }   } ).ArrayList<ContentProviderOperation>_VAR();   assertThat(ArrayList<ContentProviderOperation>_VAR).hasSize(Number_Constant);   operationAssert(ArrayList<ContentProviderOperation>_VAR.get(Number_Constant),createFakeUri("Insert_VAR",String_Constant),ShadowContentProviderOperation.TYPE_INSERT);   operationAssert(ArrayList<ContentProviderOperation>_VAR.get(Number_Constant),createFakeUri("Insert_VAR",String_Constant),ShadowContentProviderOperation.TYPE_UPDATE);   operationAssert(ArrayList<ContentProviderOperation>_VAR.get(Number_Constant),createFakeUri(String_Constant,String_Constant),ShadowContentProviderOperation.TYPE_DELETE); } 
@Override public Uri decorate(Uri Uri_VAR){   return Uri.withAppendedPath(Uri_VAR,String_Constant); } 
@SuppressWarnings(String_Constant) private void throwAnExceptionInsideResolversApplyBatch(Class<? extends Exception> Class<? extends Exception>_VAR) throws RemoteException, OperationApplicationException {   final ContentResolver ContentResolver_VAR=mock(ContentResolver.class);   when(ContentResolver_VAR.applyBatch(anyString(),any(ArrayList.class))).thenThrow(Class<? extends Exception>_VAR);   Batcher.begin().append(ProviderAction.insert(createFakeUri(String_Constant))).applyBatchOrThrow(String_Constant,ContentResolver_VAR); } 
@SuppressWarnings(String_Constant) private void throwAnExceptionInsideClientsApplyBatch(Class<? extends Exception> Class<? extends Exception>_VAR) throws RemoteException, OperationApplicationException {   final ContentProviderClient ContentProviderClient_VAR=mock(ContentProviderClient.class);   when(ContentProviderClient_VAR.applyBatch(any(ArrayList.class))).thenThrow(Class<? extends Exception>_VAR);   Batcher.begin().append(ProviderAction.insert(createFakeUri(String_Constant))).applyBatchOrThrow(ContentProviderClient_VAR); } 
private static Uri createFakeUri(String... String_VAR){   Builder Builder_VAR=Uri.parse(String_Constant).buildUpon();   for (  String path : String_VAR) {     Builder_VAR.appendPath(path);   }   return Builder_VAR.build(); } 
private static void ContentProviderOperation_VARAssert(ContentProviderOperation ContentProviderOperation_VAR,Uri Uri_VAR,int int_VAR){   final ShadowContentProviderOperation ShadowContentProviderOperation_VAR=Robolectric.shadowOf(ContentProviderOperation_VAR);   assertThat(ContentProviderOperation_VAR.getUri()).isEqualTo(Uri_VAR);   assertThat(ShadowContentProviderOperation_VAR.getType()).isEqualTo(int_VAR); } 
@Test public void shouldConstructInsertOperation() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues_VAR.put(String_Constant,Number_Constant);   final ContentProviderOperation ContentProviderOperation_VAR=ProviderAction.insert(createFakeUri(String_Constant)).ContentValues_VAR(ContentValues_VAR).toContentProviderOperation(Utils.DUMMY_URI_DECORATOR);   final ShadowContentProviderOperation ShadowContentProviderOperation_VAR=Robolectric.shadowOf(ContentProviderOperation_VAR);   assertThat(ContentProviderOperation_VAR.getUri()).isEqualTo(createFakeUri(String_Constant));   assertThat(ShadowContentProviderOperation_VAR.getType()).isEqualTo(ShadowContentProviderOperation.TYPE_INSERT);   assertThat(ShadowContentProviderOperation_VAR.getContentValues()).isEqualTo(ContentValues_VAR); } 
@Test public void shouldConstructUpdateOperation() throws Exception {   final ContentProviderOperation ContentProviderOperation_VAR=ProviderAction.update(createFakeUri(String_Constant)).value(String_Constant,String_Constant).where(String_Constant,String_Constant).toContentProviderOperation(Utils.DUMMY_URI_DECORATOR);   final ShadowContentProviderOperation ShadowContentProviderOperation_VAR=Robolectric.shadowOf(ContentProviderOperation_VAR);   assertThat(ContentProviderOperation_VAR.getUri()).isEqualTo(createFakeUri(String_Constant));   assertThat(ShadowContentProviderOperation_VAR.getType()).isEqualTo(ShadowContentProviderOperation.TYPE_UPDATE);   assertThat(ShadowContentProviderOperation_VAR.getSelection()).isEqualTo(String_Constant);   assertThat(ShadowContentProviderOperation_VAR.getSelectionArgs()).isEqualTo(new String[]{String_Constant}); } 
@Test public void shouldConstructDeleteOperation() throws Exception {   final ContentProviderOperation ContentProviderOperation_VAR=ProviderAction.delete(createFakeUri(String_Constant)).where(String_Constant,String_Constant).toContentProviderOperation(Utils.DUMMY_URI_DECORATOR);   final ShadowContentProviderOperation ShadowContentProviderOperation_VAR=Robolectric.shadowOf(ContentProviderOperation_VAR);   assertThat(ContentProviderOperation_VAR.getUri()).isEqualTo(createFakeUri(String_Constant));   assertThat(ShadowContentProviderOperation_VAR.getType()).isEqualTo(ShadowContentProviderOperation.TYPE_DELETE);   assertThat(ShadowContentProviderOperation_VAR.getSelection()).isEqualTo(String_Constant);   assertThat(ShadowContentProviderOperation_VAR.getSelectionArgs()).isEqualTo(new String[]{String_Constant}); } 
private static Uri createFakeUri(String String_VAR){   return Uri.parse(String_Constant).buildUpon().appendPath(String_VAR).build(); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldPassNullsEverywhere() throws Exception {   ProviderAction.query(Uri_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).query(eq(Uri_VAR),eq((String[])null),eq((String)null),eq((String[])null),eq((String)null)); } 
@Test public void shouldUseProjectionWhenQuery() throws Exception {   ProviderAction.query(Uri_VAR).projection(String_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).query(eq(Uri_VAR),eq(new String[]{String_Constant}),eq((String)null),eq((String[])null),eq((String)null)); } 
@Test public void shouldAppendProjection() throws Exception {   ProviderAction.query(Uri_VAR).projection(String_Constant).projection(String_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).query(eq(Uri_VAR),eq(new String[]{String_Constant,String_Constant}),eq((String)null),eq((String[])null),eq((String)null)); } 
@Test public void shouldConcatenateSelectionProperlyWhenQuerying() throws Exception {   ProviderAction.query(Uri_VAR).where(String_Constant,String_Constant).where(String_Constant,String_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).query(eq(Uri_VAR),eq((String[])null),eq(String_Constant),eq(new String[]{String_Constant,String_Constant}),eq((String)null)); } 
@Test public void shouldAddParenthesesForEachWhereWhenQuerying() throws Exception {   ProviderAction.query(Uri_VAR).where(String_Constant,String_Constant,String_Constant).where(String_Constant,String_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).query(eq(Uri_VAR),eq((String[])null),eq(String_Constant),eq(new String[]{String_Constant,String_Constant,String_Constant}),eq((String)null)); } 
@Test public void shouldAddParenthesesForEachWhereWhenDeleting() throws Exception {   ProviderAction.delete(Uri_VAR).where(String_Constant,String_Constant,String_Constant).where(String_Constant,String_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).delete(eq(Uri_VAR),eq(String_Constant),eq(new String[]{String_Constant,String_Constant,String_Constant})); } 
@Test public void shouldAddParenthesesForEachWhereWhenUpdating() throws Exception {   ProviderAction.update(Uri_VAR).where(String_Constant,String_Constant,String_Constant).where(String_Constant,String_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).update(eq(Uri_VAR),any(ContentValues.class),eq(String_Constant),eq(new String[]{String_Constant,String_Constant,String_Constant})); } 
@Test public void shouldUseOrderBy() throws Exception {   ProviderAction.query(Uri_VAR).orderBy(String_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).query(eq(Uri_VAR),eq((String[])null),eq((String)null),eq((String[])null),eq(String_Constant)); } 
@Test public void shouldPerformProperInsert() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ProviderAction.insert(Uri_VAR).ContentValues_VAR(ContentValues_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).insert(eq(Uri_VAR),eq(ContentValues_VAR)); } 
@Test public void shouldPerformInsertWithSingleValue() throws Exception {   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.insert(Uri_VAR).value(String_Constant,String_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).insert(eq(Uri_VAR),ArgumentCaptor<ContentValues>_VAR.capture());   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,String_Constant)); } 
@Test public void insertShouldNotModifyPassedContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ProviderAction.insert(Uri_VAR).ContentValues_VAR(ContentValues_VAR).value(String_Constant,String_Constant).perform(ContentResolver_VAR);   assertThat(ContentValues_VAR.containsKey(String_Constant)).isFalse();   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ProviderAction.insert(Uri_VAR).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR).perform(ContentResolver_VAR);   assertThat(ContentValues_VAR.containsKey(String_Constant)).isFalse(); } 
@Test public void shouldPerformInsertWithConcatenatedContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.insert(Uri_VAR).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).insert(eq(Uri_VAR),ArgumentCaptor<ContentValues>_VAR.capture());   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,String_Constant),entry(String_Constant,String_Constant)); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenBySingleValue() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.insert(Uri_VAR).ContentValues_VAR(ContentValues_VAR).value(String_Constant,null).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).insert(eq(Uri_VAR),ArgumentCaptor<ContentValues>_VAR.capture());   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,String_Constant),entry(String_Constant,null)); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenByOtherContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.putNull(String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.insert(Uri_VAR).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).insert(eq(Uri_VAR),ArgumentCaptor<ContentValues>_VAR.capture());   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,String_Constant),entry(String_Constant,String_Constant),entry(String_Constant,null)); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectInsertWithSingleValueOfUnsupportedType() throws Exception {   ProviderAction.insert(Uri_VAR).value(String_Constant,new Object()); } 
@Test public void shouldPerformUpdateWithValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ProviderAction.update(Uri_VAR).ContentValues_VAR(ContentValues_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).update(eq(Uri_VAR),eq(ContentValues_VAR),eq((String)null),eq((String[])null)); } 
@Test public void shouldPerformUpdateWithSingleValue() throws Exception {   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.update(Uri_VAR).value(String_Constant,String_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).update(eq(Uri_VAR),ArgumentCaptor<ContentValues>_VAR.capture(),eq((String)null),eq((String[])null));   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,String_Constant)); } 
@Test public void shouldPerformUpdateWithConcatenatedContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.update(Uri_VAR).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).update(eq(Uri_VAR),ArgumentCaptor<ContentValues>_VAR.capture(),eq((String)null),eq((String[])null));   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,String_Constant),entry(String_Constant,String_Constant)); } 
@Test public void shouldPerformUpdateWithContentValuesOverriddenBySingleValue() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.update(Uri_VAR).ContentValues_VAR(ContentValues_VAR).value(String_Constant,null).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).update(eq(Uri_VAR),ArgumentCaptor<ContentValues>_VAR.capture(),eq((String)null),eq((String[])null));   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,String_Constant),entry(String_Constant,null)); } 
@Test public void shouldPerformUpdateWithContentValuesOverriddenByOtherContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.putNull(String_Constant);   ContentValues_VAR.put(String_Constant,String_Constant);   ArgumentCaptor<ContentValues> ArgumentCaptor<ContentValues>_VAR=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.update(Uri_VAR).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).update(eq(Uri_VAR),ArgumentCaptor<ContentValues>_VAR.capture(),eq((String)null),eq((String[])null));   assertThat(ArgumentCaptor<ContentValues>_VAR.getValue()).contains(entry(String_Constant,String_Constant),entry(String_Constant,String_Constant),entry(String_Constant,null)); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectUpdateWithSingleValueOfUnsupportedType() throws Exception {   ProviderAction.update(Uri_VAR).value(String_Constant,new Object()); } 
@Test public void shouldPerformUpdateWithSelectionAndSelectionArgs() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ProviderAction.update(Uri_VAR).ContentValues_VAR(ContentValues_VAR).where(String_Constant,String_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).update(eq(Uri_VAR),eq(ContentValues_VAR),eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void updateShouldNotModifyPassedContentValues() throws Exception {   ContentValues ContentValues_VAR=new ContentValues();   ProviderAction.update(Uri_VAR).ContentValues_VAR(ContentValues_VAR).value(String_Constant,String_Constant).perform(ContentResolver_VAR);   assertThat(ContentValues_VAR.containsKey(String_Constant)).isFalse();   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(String_Constant,String_Constant);   ProviderAction.update(Uri_VAR).ContentValues_VAR(ContentValues_VAR).ContentValues_VAR(ContentValues_VAR).perform(ContentResolver_VAR);   assertThat(ContentValues_VAR.containsKey(String_Constant)).isFalse(); } 
@Test public void shouldPerformDeleteOnUri() throws Exception {   ProviderAction.delete(Uri_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).delete(eq(Uri_VAR),eq((String)null),eq((String[])null)); } 
@Test public void shouldCareAboutSelectionAndSelectionArgsWhenDeleting() throws Exception {   ProviderAction.delete(Uri_VAR).where(String_Constant,String_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).delete(eq(Uri_VAR),eq(String_Constant),eq(new String[]{String_Constant})); } 
@Test public void shouldBeAbleToUseNonStringObjectsInSelectionArgs() throws Exception {   ProviderAction.query(Uri_VAR).where(String_Constant,Number_Constant).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).query(eq(Uri_VAR),eq((String[])null),eq(String_Constant),eq(new String[]{String_Constant}),eq((String)null)); } 
@Test public void shouldBeAbleToCreateASelectionWithWhereIn() throws Exception {   final List<?> List<Object>_VAR=Lists.newArrayList(Number_Constant,String_Constant,Number_Constant);   ProviderAction.query(Uri_VAR).whereIn(String_Constant,List<Object>_VAR).perform(ContentResolver_VAR);   final String String_VAR=String_Constant + String_Constant + Joiner.on(String_Constant).join(Collections2.transform(List<Object>_VAR,Utils.toEscapedSqlFunction())) + String_Constant+ String_Constant;   verify(ContentResolver_VAR).query(eq(Uri_VAR),eq((String[])null),eq(String_VAR),eq((String[])null),eq((String)null)); } 
@Test public void shouldBeAbleToCreateAnUpdateWithWhereIn() throws Exception {   final List<Object> List<Object>_VAR=Lists.<Object>newArrayList(Number_Constant,String_Constant,Number_Constant);   ProviderAction.update(Uri_VAR).whereIn(String_Constant,List<Object>_VAR).perform(ContentResolver_VAR);   final String String_VAR=String_Constant + String_Constant + Joiner.on(String_Constant).join(Collections2.transform(List<Object>_VAR,Utils.toEscapedSqlFunction())) + String_Constant+ String_Constant;   verify(ContentResolver_VAR).update(eq(Uri_VAR),any(ContentValues.class),eq(String_VAR),eq((String[])null)); } 
@Test public void shouldBeAbleToCreateADeleteWithWhereIn() throws Exception {   final List<Object> List<Object>_VAR=Lists.<Object>newArrayList(Number_Constant,String_Constant,Number_Constant);   ProviderAction.delete(Uri_VAR).whereIn(String_Constant,List<Object>_VAR).perform(ContentResolver_VAR);   final String String_VAR=String_Constant + String_Constant + Joiner.on(String_Constant).join(Collections2.transform(List<Object>_VAR,Utils.toEscapedSqlFunction())) + String_Constant+ String_Constant;   verify(ContentResolver_VAR).delete(eq(Uri_VAR),eq(String_VAR),eq((String[])null)); } 
@Test public void shouldAlwaysPassNonNullContentValuesOnInsert() throws Exception {   ProviderAction.insert(Uri_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).insert(eq(Uri_VAR),isNotNull(ContentValues.class)); } 
@Test public void shouldAlwaysPassNonNullContentValuesOnUpdate() throws Exception {   ProviderAction.update(Uri_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).update(eq(Uri_VAR),isNotNull(ContentValues.class),isNull(String.class),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullSelectionOnQuery() throws Exception {   ProviderAction.query(Uri_VAR).where(null).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).query(eq(Uri_VAR),isNull(String[].class),isNull(String.class),isNull(String[].class),isNull(String.class)); } 
@Test public void shouldAllowUsingNullSelectionOnUpdate() throws Exception {   ProviderAction.update(Uri_VAR).where(null).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).update(eq(Uri_VAR),any(ContentValues.class),isNull(String.class),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullSelectionOnDelete() throws Exception {   ProviderAction.delete(Uri_VAR).where(null).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).delete(eq(Uri_VAR),isNull(String.class),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionOnQuery() throws Exception {   ProviderAction.query(Uri_VAR).where(String_Constant,Object[]_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).query(eq(Uri_VAR),isNull(String[].class),eq(String_Constant),isNull(String[].class),isNull(String.class)); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionOnUpdate() throws Exception {   ProviderAction.update(Uri_VAR).where(String_Constant,Object[]_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).update(eq(Uri_VAR),any(ContentValues.class),eq(String_Constant),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionOnDelete() throws Exception {   ProviderAction.delete(Uri_VAR).where(String_Constant,Object[]_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).delete(eq(Uri_VAR),eq(String_Constant),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullSelectionAndArgumentsOnQuery() throws Exception {   ProviderAction.query(Uri_VAR).where(null,Object[]_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).query(eq(Uri_VAR),isNull(String[].class),isNull(String.class),isNull(String[].class),isNull(String.class)); } 
@Test public void shouldAllowUsingNullSelectionAndArgumentsOnUpdate() throws Exception {   ProviderAction.update(Uri_VAR).where(null,Object[]_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).update(eq(Uri_VAR),any(ContentValues.class),isNull(String.class),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullSelectionAndArgumentsOnDelete() throws Exception {   ProviderAction.delete(Uri_VAR).where(null,Object[]_VAR).perform(ContentResolver_VAR);   verify(ContentResolver_VAR).delete(eq(Uri_VAR),isNull(String.class),isNull(String[].class)); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingNonNullArgumentsWithNullSelectionOnQuery() throws Exception {   ProviderAction.query(Uri_VAR).where(null,String_Constant); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingNonNullArgumentsWithNullSelectionOnUpdate() throws Exception {   ProviderAction.update(Uri_VAR).where(null,String_Constant); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingNonNullArgumentsWithNullSelectionOnDelete() throws Exception {   ProviderAction.delete(Uri_VAR).where(null,String_Constant); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldBindStringArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,String_Constant);   verify(SQLiteStatement_VAR).bindString(eq(Number_Constant),eq(String_Constant)); } 
@Test public void shouldBindByteArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,(byte)Number_Constant);   verify(SQLiteStatement_VAR).bindLong(eq(Number_Constant),eq(Number_Constant)); } 
@Test public void shouldBindShortArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,(short)Number_Constant);   verify(SQLiteStatement_VAR).bindLong(eq(Number_Constant),eq(Number_Constant)); } 
@Test public void shouldBindIntegerArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,Number_Constant);   verify(SQLiteStatement_VAR).bindLong(eq(Number_Constant),eq(Number_Constant)); } 
@Test public void shouldBindLongArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,Number_Constant);   verify(SQLiteStatement_VAR).bindLong(eq(Number_Constant),eq(Number_Constant)); } 
@Test public void shouldBindFloatArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,Number_Constant);   verify(SQLiteStatement_VAR).bindDouble(eq(Number_Constant),eq(Number_Constant)); } 
@Test public void shouldBindDoubleArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,Number_Constant);   verify(SQLiteStatement_VAR).bindDouble(eq(Number_Constant),eq(Number_Constant)); } 
@Test public void shouldBindTrueArgAsLongEqualNumber_Constant() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,Boolean_Constant);   verify(SQLiteStatement_VAR).bindLong(eq(Number_Constant),eq(Number_Constant)); } 
@Test public void shouldBindFalseArgAsLongEqual0() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,Boolean_Constant);   verify(SQLiteStatement_VAR).bindLong(eq(Number_Constant),eq(Number_Constant)); } 
@Test public void shouldBindNullArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,null);   verify(SQLiteStatement_VAR).bindNull(eq(Number_Constant)); } 
@Test public void shouldBindBlobArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,new byte[Number_Constant]);   verify(SQLiteStatement_VAR).bindBlob(eq(Number_Constant),eq(new byte[Number_Constant])); } 
@Test(expected=IllegalArgumentException.class) public void shouldFailToBindArgsOfOtherType() throws Exception {   Utils.bindContentValueArg(SQLiteStatement_VAR,Number_Constant,new Object()); } 
@Test public void shouldReturnNull() throws Exception {   assertThat(Utils.escapeSqlArg(null)).isNull(); } 
@Test public void shouldReturnSqlBoolean() throws Exception {   assertThat(Utils.escapeSqlArg(Boolean_Constant)).isEqualTo(Number_Constant); } 
@Test public void shouldReturnNumber() throws Exception {   assertThat(Utils.escapeSqlArg(Number_Constant)).isEqualTo(Number_Constant); } 
@Test public void shouldReturnEscapedString() throws Exception {   assertThat(Utils.escapeSqlArg(String_Constant)).isEqualTo(String_Constant); } 
@Implementation public void executePendingTask(){   new AsyncTask<Void,Void,T>(){     @Override protected T doInBackground(    Void... voids){       return AsyncTaskLoader<T>_VAR.loadInBackground();     }     @Override protected void onPostExecute(    T result){       AsyncTaskLoader<T>_VAR.deliverResult(result);     }   } .execute(); } 
@Override protected T doInBackground(Void... Void_VAR){   return AsyncTaskLoader<T>_VAR.loadInBackground(); } 
@Override protected void onPostExecute(T T_VAR){   AsyncTaskLoader<T>_VAR.deliverResult(T_VAR); } 
public UtilityClassesTest(Class<?> Class<?>_VAR){   Class<?>_VAR=Class<?>_VAR; } 
@Parameters(name=String_Constant) public static Collection<Object[]> data(){   return Arrays.asList(new Object[][]{{Cursors.class},{SingleRowTransforms.class},{Utils.class}}); } 
@Test public void shouldBeWellDefined() throws Exception {   assertThat(Class<?>_VAR.getSuperclass()).isEqualTo(Object.class);   assertThat(Modifier.isFinal(Class<?>_VAR.getModifiers())).isTrue();   assertThat(Class<?>_VAR.getDeclaredConstructors()).hasLength(Number_Constant);   final Constructor<?> Constructor<?>_VAR=Class<?>_VAR.getDeclaredConstructor();   assertThat(Constructor<?>_VAR.isAccessible()).isFalse();   assertThat(Modifier.isPrivate(Constructor<?>_VAR.getModifiers())).isTrue();   for (  final Method method : Class<?>_VAR.getDeclaredMethods()) {     assertThat(Modifier.isStatic(method.getModifiers())).named(method.getName()).isTrue();   } } 
@Override public void onCreate(@Nullable Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setupActionBar();   setContentView(R.layout.directory_chooser_activity);   final DirectoryChooserConfig DirectoryChooserConfig_VAR=getIntent().getParcelableExtra(String_VAR);   if (DirectoryChooserConfig_VAR == null) {     throw new IllegalArgumentException("You must provide String_VAR when starting the DirectoryChooserActivity.");   }   if (Bundle_VAR == null) {     final FragmentManager FragmentManager_VAR=getFragmentManager();     final DirectoryChooserFragment DirectoryChooserFragment_VAR=DirectoryChooserFragment.newInstance(DirectoryChooserConfig_VAR);     FragmentManager_VAR.beginTransaction().add(R.id.main,DirectoryChooserFragment_VAR).commit();   } } 
void setupActionBar(){   @SuppressLint(String_Constant) final ActionBar ActionBar_VAR=getActionBar();   if (ActionBar_VAR != null) {     ActionBar_VAR.setDisplayHomeAsUpEnabled(Boolean_Constant);   } } 
@Override public boolean onOptionsItemSelected(MenuItem MenuItem_VAR){   final int MenuItem_VARId=MenuItem_VAR.getItemId();   if (MenuItem_VARId == android.R.id.home) {     setResult(RESULT_CANCELED);     finish();     return Boolean_Constant;   }   return super.onOptionsItemSelected(MenuItem_VAR); } 
@Override public void onSelectDirectory(@NonNull String String_VAR){   final Intent Intent_VAR=new Intent();   Intent_VAR.putExtra(String_VAR,String_VAR);   setResult(int_VAR,Intent_VAR);   finish(); } 
@Override public void onCancelChooser(){   setResult(RESULT_CANCELED);   finish(); } 
 public static Builder builder(){   return new AutoParcel_DirectoryChooserConfig.Builder().initialDirectory(String_Constant).allowNewDirectoryNameModification(Boolean_Constant).allowReadOnlyDirectory(Boolean_Constant); } 
 abstract String newDirectoryName(); 
 abstract String initialDirectory(); 
 abstract boolean allowReadOnlyDirectory(); 
 abstract boolean allowNewDirectoryNameModification(); 
public abString_VARtract Builder newDirectoryName(String String_VAR); 
public abString_VARtract Builder initialDirectory(String String_VAR); 
puboolean_VARlic aboolean_VARstract Builder allowReadOnlyDirectory(boolean_VARoolean boolean_VAR); 
puboolean_VARlic aboolean_VARstract Builder allowNewDirectoryNameModification(boolean_VARoolean boolean_VAR); 
public abstract DirectoryChooserConfig build(); 
public DirectoryChooserFragment(){ } 
 public static DirectoryChooserFragment newInstance(@NonNull final DirectoryChooserConfig DirectoryChooserConfig_VAR){   final DirectoryChooserFragment DirectoryChooserFragment_VAR=new DirectoryChooserFragment();   final Bundle Bundle_VAR=new Bundle();   Bundle_VAR.putParcelable(String_VAR,DirectoryChooserConfig_VAR);   DirectoryChooserFragment_VAR.setArguments(Bundle_VAR);   return DirectoryChooserFragment_VAR; } 
@Override public void onSaveInstanceState(@NonNull final Bundle Bundle_VAR){   super.onSaveInstanceState(Bundle_VAR);   if (File_VAR != null) {     Bundle_VAR.putString(String_VAR,File_VAR.getAbsolutePath());   } } 
@Override public void onCreate(final Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   if (getArguments() == null) {     throw new IllegalArgumentException(String_Constant);   }   DirectoryChooserConfig_VAR=getArguments().getParcelable(String_VAR);   if (DirectoryChooserConfig_VAR == null) {     throw new NullPointerException("No String_VAR provided for DirectoryChooserFragment " + String_Constant);   }   String_VAR=DirectoryChooserConfig_VAR.File_VARectoryName();   String_VAR=DirectoryChooserConfig_VAR.initialDirectory();   if (Bundle_VAR != null) {     String_VAR=Bundle_VAR.getString(String_VAR);   }   if (getShowsDialog()) {     setStyle(DialogFragment.STYLE_NO_TITLE,Number_Constant);   }  else {     setHasOptionsMenu(Boolean_Constant);   }   if (!DirectoryChooserConfig_VAR.allowNewDirectoryNameModification() && TextUtils.isEmpty(String_VAR)) {     throw new IllegalArgumentException(String_Constant + String_Constant);   } } 
@Override public View onCreateView(final LayoutInflater LayoutInflater_VAR,final ViewGroup ViewGroup_VAR,final Bundle Bundle_VAR){ } 
private void adjustResourceLightness(){   int int_VAR=Number_Constant;   final Resources.Theme Resources.Theme_VAR=getActivity().getTheme();   if (Resources.Theme_VAR != null) {     final TypedArray TypedArray_VAR=Resources.Theme_VAR.obtainStyledAttributes(new int[]{android.R.attr.int_VARBackground});     if (TypedArray_VAR != null) {       int_VAR=TypedArray_VAR.getColor(Number_Constant,Number_Constant);       TypedArray_VAR.recycle();     }   }   if (int_VAR != Number_Constant && Number_Constant * Color.red(int_VAR) + Number_Constant * Color.green(int_VAR) + Number_Constant * Color.blue(int_VAR) < Number_Constant) {     ImageButton_VAR.setImageResource(R.drawable.navigation_up_light);     ImageButton_VAR.setImageResource(R.drawable.ic_action_create_light);   } } 
@Override public void onAttach(final Activity Activity_VAR){   super.onAttach(Activity_VAR);   if (Activity_VAR instanceof OnFragmentInteractionListener) {     Option<OnFragmentInteractionListener>_VAR=Option.some((OnFragmentInteractionListener)Activity_VAR);   }  else {     Fragment Fragment_VAR=getTargetFragment();     if (Fragment_VAR instanceof OnFragmentInteractionListener) {       Option<OnFragmentInteractionListener>_VAR=Option.some((OnFragmentInteractionListener)Fragment_VAR);     }   } } 
@Override public void onDetach(){   super.onDetach();   Option<OnFragmentInteractionListener>_VAR=null; } 
@Override public void onPause(){   super.onPause();   if (FileObserver_VAR != null) {     FileObserver_VAR.stopWatching();   } } 
@Override public void onResume(){   super.onResume();   if (FileObserver_VAR != null) {     FileObserver_VAR.startWatching();   } } 
@Override public void onCreateOptionsMenu(final Menu Menu_VAR,final MenuInflater MenuInflater_VAR){   MenuInflater_VAR.inflate(R.Menu_VAR.directory_chooser,Menu_VAR);   final MenuItem Menu_VARItem=Menu_VAR.findItem(R.id.new_folder_item);   if (Menu_VARItem == null) {     return;   }   Menu_VARItem.setVisible(isValidFile(File_VAR) && String_VAR != null); } 
@Override public boolean onOptionsItemSelected(final MenuItem MenuItem_VAR){   final int MenuItem_VARId=MenuItem_VAR.getItemId();   if (MenuItem_VARId == R.id.new_folder_MenuItem_VAR) {     openNewFolderDialog();     return Boolean_Constant;   }   return super.onOptionsItemSelected(MenuItem_VAR); } 
 private void openNewFolderDialog(){   @SuppressLint(String_Constant) final View View_VAR=getActivity().getLayoutInflater().inflate(R.layout.dialog_new_folder,null);   final TextView int_VARView=(TextView)View_VAR.findViewById(R.id.int_VARText);   final EditText EditText_VAR=(EditText)View_VAR.findViewById(R.id.EditText_VAR);   EditText_VAR.setText(String_VAR);   int_VARView.setText(getString(R.string.create_folder_int_VAR,String_VAR));   final AlertDialog AlertDialog_VAR=new AlertDialog.Builder(getActivity()).setTitle(R.string.create_folder_label).setView(View_VAR).setNegativeButton(R.string.cancel_label,new DialogInterface.OnClickListener(){     @Override public void onClick(    final DialogInterface dialog,    final int which){       dialog.dismiss();     }   } ).setPositiveButton(R.string.confirm_label,new DialogInterface.OnClickListener(){     @Override public void onClick(    final DialogInterface dialog,    final int which){       dialog.dismiss();       String_VAR=EditText_VAR.getText().toString();       final int int_VAR=createFolder();       Toast.makeText(getActivity(),int_VAR,Toast.LENGTH_SHORT).show();     }   } ).show();   AlertDialog_VAR.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(EditText_VAR.getText().length() != Number_Constant);   EditText_VAR.addTextChangedListener(new TextWatcher(){     @Override public void beforeTextChanged(    final CharSequence charSequence,    final int i,    final int i2,    final int i3){     }     @Override public void onTextChanged(    final CharSequence charSequence,    final int i,    final int i2,    final int i3){       final boolean boolean_VAR=charSequence.length() != Number_Constant;       AlertDialog_VAR.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(boolean_VAR);       int_VARView.setText(getString(R.string.create_folder_int_VAR,charSequence.toString()));     }     @Override public void afterTextChanged(    final Editable editable){     }   } );   EditText_VAR.setVisibility(DirectoryChooserConfig_VAR.allowNewDirectoryNameModification() ? View.VISIBLE : View.GONE); } 
@Override public void onClick(final DialogInterface DialogInterface_VAR,final int int_VAR){   DialogInterface_VAR.dismiss(); } 
@Override public void onClick(final DialogInterface DialogInterface_VAR,final int int_VAR){   DialogInterface_VAR.dismiss();   String_VAR=EditText_VAR.getText().toString();   final int int_VAR=createFolder();   Toast.makeText(getActivity(),int_VAR,Toast.LENGTH_SHORT).show(); } 
@Overrint_VARde publint_VARc voint_VARd beforeTextChanged(fint_VARnal CharSequence CharSequence_VAR,fint_VARnal int_VARnt int_VAR,fint_VARnal int_VARnt int_VAR2,fint_VARnal int_VARnt int_VAR3){ } 
@Overrint_VARde publint_VARc voint_VARd onTextChanged(fint_VARnal CharSequence CharSequence_VAR,fint_VARnal int_VARnt int_VAR,fint_VARnal int_VARnt int_VAR2,fint_VARnal int_VARnt int_VAR3){   fint_VARnal boolean boolean_VAR=CharSequence_VAR.length() != Number_Constant;   alertDint_VARalog.getButton(Dint_VARalogInterface.BUTTON_POSITIVE).setEnabled(boolean_VAR);   int_VARVint_VARew.setText(getStrint_VARng(R.strint_VARng.create_folder_int_VAR,CharSequence_VAR.toStrint_VARng())); } 
@Override public void afterTextChanged(final Editable Editable_VAR){ } 
private static void debug(final String String_VAR,final Object... Object_VAR){   Log.d(String_VAR,String.format(String_VAR,Object_VAR)); } 
 private void changeDirectory(final File File_VAR){   if (File_VAR == null) {     debug("Could not change folder: File_VAR was null");   }  else   if (!File_VAR.isDirectory()) {     debug("Could not change folder: File_VAR is no File_VARectory");   }  else {     final File[] File[]_VAR=File_VAR.listFiles();     if (File[]_VAR != null) {       int int_VAR=Number_Constant;       for (      final File f : File[]_VAR) {         if (f.isDirectory()) {           int_VAR++;         }       }       File[]_VAR=new File[int_VAR];       List<String>_VAR.clear();       for (int i=Number_Constant, counter=Number_Constant; i < int_VAR; counter++) {         if (File[]_VAR[counter].isDirectory()) {           File[]_VAR[i]=File[]_VAR[counter];           List<String>_VAR.add(File[]_VAR[counter].getName());           i++;         }       }       Arrays.sort(File[]_VAR);       Collections.sort(List<String>_VAR);       File_VAR=File_VAR;       TextView_VAR.setText(File_VAR.getAbsolutePath());       ListView_VARAdapter.notifyDataSetChanged();       FileObserver_VAR=createFileObserver(File_VAR.getAbsolutePath());       FileObserver_VAR.startWatching();       debug("Changed File_VARectory to %s",File_VAR.getAbsolutePath());     }  else {       debug("Could not change folder: File[]_VAR of File_VAR were null");     }   }   refreshButtonState(); } 
 private void refreshButtonState(){   final Activity Activity_VAR=getActivity();   if (Activity_VAR != null && File_VAR != null) {     Button_VAR.setEnabled(isValidFile(File_VAR));     getActivity().invalidateOptionsMenu();   } } 
 private void refreshDirectory(){   if (File_VAR != null) {     changeDirectory(File_VAR);   } } 
 private FileObserver createFileObserver(final String String_VAR){   return new FileObserver(String_VAR,FileObserver.CREATE | FileObserver.DELETE | FileObserver.MOVED_FROM| FileObserver.MOVED_TO){     @Override public void onEvent(    final int event,    final String String_VAR){       debug(String_Constant,event);       final Activity Activity_VAR=getActivity();       if (Activity_VAR != null) {         Activity_VAR.runOnUiThread(new Runnable(){           @Override public void run(){             refreshDirectory();           }         } );       }     }   } ; } 
@Override public void onEvent(final int int_VAR,final String String_VAR){   debug("FileObserver received int_VAR %d",int_VAR);   final Activity Activity_VAR=getActivity();   if (Activity_VAR != null) {     Activity_VAR.runOnUiThread(new Runnable(){       @Override public void run(){         refreshDirectory();       }     } );   } } 
@Override public void run(){   refreshDirectory(); } 
 private void returnSelectedFolder(){   if (File_VAR != null) {     debug("Returning %s as boolean_VAR",File_VAR.getAbsolutePath());     Option<OnFragmentInteractionListener>_VAR.foreach(new UnitFunction<OnFragmentInteractionListener>(){       @Override public void apply(      final OnFragmentInteractionListener f){         f.onSelectDirectory(File_VAR.getAbsolutePath());       }     } );   }  else {     Option<OnFragmentInteractionListener>_VAR.foreach(new UnitFunction<OnFragmentInteractionListener>(){       @Override public void apply(      final OnFragmentInteractionListener f){         f.onCancelChooser();       }     } );   } } 
@Override public void apply(OnFragmentInteractionListener_VARinal OnFragmentInteractionListener OnFragmentInteractionListener_VAR){   OnFragmentInteractionListener_VAR.onSelectDirectory(File_VAR.getAbsolutePath()); } 
@Override public void apply(OnFragmentInteractionListener_VARinal OnFragmentInteractionListener OnFragmentInteractionListener_VAR){   OnFragmentInteractionListener_VAR.onCancelChooser(); } 
 private int createFolder(){   if (String_VAR != null && File_VAR != null && File_VAR.canWrite()) {     final File File_VAR=new File(File_VAR,String_VAR);     if (File_VAR.exists()) {       return R.string.create_folder_error_already_exists;     }  else {       final boolean boolean_VAR=File_VAR.mkdir();       if (boolean_VAR) {         return R.string.create_folder_success;       }  else {         return R.string.create_folder_error;       }     }   }  else   if (File_VAR != null && !File_VAR.canWrite()) {     return R.string.create_folder_error_no_write_access;   }  else {     return R.string.create_folder_error;   } } 
 private boolean isValidFile(final File File_VAR){   return (File_VAR != null && File_VAR.isDirectory() && File_VAR.canRead() && (DirectoryChooserConfig_VAR.allowNewDirectoryNameModification() || File_VAR.canWrite())); } 
@Nullable public OnFragmentInteractionListener getDirectoryChooserListener(){   return Option<OnFragmentInteractionListener>_VAR.get(); } 
public void setDirectoryChooserListener(@Nullable final OnFragmentInteractionListener OnFragmentInteractionListener_VAR){   Option<OnFragmentInteractionListener>_VAR=Option.option(OnFragmentInteractionListener_VAR); } 
 void onSelectDirectory(@NonNull String String_VAR); 
 void onCancelChooser(); 
@Before public void setup(){   DirectoryChooserActivity_VAR=Mockito.mock(DirectoryChooserActivity.class);   Mockito.doNothing().when(DirectoryChooserActivity_VAR).setupActionBar();   Intent_VAR=new Intent();   Mockito.doReturn(Intent_VAR).when(DirectoryChooserActivity_VAR).getIntent(); } 
@Test public void testSmokeInit(){   DirectoryChooserActivity_VAR.onCreate(null); } 
@Test public void testSmokeInitWithExtras(){   final DirectoryChooserConfig DirectoryChooserConfig_VAR=DirectoryChooserConfig.builder().newDirectoryName(String_Constant).build();   Intent_VAR.putExtra(DirectoryChooserActivity.EXTRA_CONFIG,DirectoryChooserConfig_VAR);   DirectoryChooserActivity_VAR.onCreate(null); } 
@TargetApi(Build.VERSION_CODES.HONEYCOMB) public static void startFragment(@NonNull final Fragment Fragment_VAR,@Nullable Class Class_VAR){   final Activity Activity_VAR=(Activity)Robolectric.buildActivity(Class_VAR == null ? Activity.class : Class_VAR).create().start().resume().get();   final FragmentManager Fragment_VARManager=Activity_VAR.getFragmentManager();   final FragmentTransaction Fragment_VARTransaction=Fragment_VARManager.beginTransaction();   Fragment_VARTransaction.add(R.id.main,Fragment_VAR);   Fragment_VARTransaction.commit();   Fragment_VARManager.executePendingTransactions(); } 
@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Test public void testWithDirectory(){   final DirectoryChooserFragment DirectoryChooserFragment_VAR=DirectoryChooserFragment.newInstance(DirectoryChooserConfig.builder().newDirectoryName(String_Constant).build());   startFragment(DirectoryChooserFragment_VAR,DirectoryChooserActivityMock.class);   final View View_VAR=DirectoryChooserFragment_VAR.getActivity().findViewById(R.id.btnConfirm);   assertThat(View_VAR).isEnabled();   assertThat(View_VAR.performClick()).isTrue();   assertThat(((DirectoryChooserActivityMock)DirectoryChooserFragment_VAR.getActivity()).String_VAR).isNotNull(); } 
@Test public void testCreateDirectoryDialogAllowFolderNameModification(){   final String String_VAR=String_Constant;   final DirectoryChooserFragment DirectoryChooserFragment_VAR=DirectoryChooserFragment.newInstance(DirectoryChooserConfig.builder().newDirectoryName(String_VAR).initialDirectory(String_Constant).allowReadOnlyDirectory(Boolean_Constant).allowNewDirectoryNameModification(Boolean_Constant).build());   startFragment(DirectoryChooserFragment_VAR,DirectoryChooserActivityMock.class);   DirectoryChooserFragment_VAR.onOptionsItemSelected(new TestMenuItem(){     @Override public int getItemId(){       return R.id.new_folder_item;     }   } );   final AlertDialog AlertDialog_VAR=(AlertDialog)ShadowDialog.getLatestDialog();   final ShadowAlertDialog ShadowAlertDialog_VAR=Shadows.shadowOf(AlertDialog_VAR);   assertThat(ShadowAlertDialog_VAR.getTitle()).isEqualTo(String_Constant);   assertThat(ShadowDialog.getShownDialogs()).contains(AlertDialog_VAR);   final TextView TextView_VAR=(TextView)AlertDialog_VAR.findViewById(R.id.msgText);   assertThat(TextView_VAR).hasText("Create new folder with name \"mydir\"?");   final EditText EditText_VAR=(EditText)AlertDialog_VAR.findViewById(R.id.EditText_VAR);   assertThat(EditText_VAR).isVisible();   assertThat(EditText_VAR).hasTextString(String_VAR); } 
@Override public int getItemId(){   return R.id.new_folder_item; } 
@Test public void testCreateDirectoryDialogDisallowFolderNameModification(){   final String String_VAR=String_Constant;   final DirectoryChooserFragment DirectoryChooserFragment_VAR=DirectoryChooserFragment.newInstance(DirectoryChooserConfig.builder().newDirectoryName(String_VAR).initialDirectory(String_Constant).allowReadOnlyDirectory(Boolean_Constant).allowNewDirectoryNameModification(Boolean_Constant).build());   startFragment(DirectoryChooserFragment_VAR,DirectoryChooserActivityMock.class);   DirectoryChooserFragment_VAR.onOptionsItemSelected(new TestMenuItem(){     @Override public int getItemId(){       return R.id.new_folder_item;     }   } );   final AlertDialog AlertDialog_VAR=(AlertDialog)ShadowDialog.getLatestDialog();   final ShadowAlertDialog ShadowAlertDialog_VAR=Shadows.shadowOf(AlertDialog_VAR);   assertThat(ShadowAlertDialog_VAR.getTitle()).isEqualTo(String_Constant);   assertThat(ShadowDialog.getShownDialogs()).contains(AlertDialog_VAR);   final TextView TextView_VAR=(TextView)AlertDialog_VAR.findViewById(R.id.msgText);   assertThat(TextView_VAR).hasText("Create new folder with name \"mydir\"?");   final EditText EditText_VAR=(EditText)AlertDialog_VAR.findViewById(R.id.EditText_VAR);   assertThat(EditText_VAR).isGone(); } 
@Override public int getItemId(){   return R.id.new_folder_item; } 
@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Test public void testWithCustomListener(){   final DirectoryChooserFragment DirectoryChooserFragment_VAR=DirectoryChooserFragment.newInstance(DirectoryChooserConfig.builder().newDirectoryName(String_Constant).build());   startFragment(DirectoryChooserFragment_VAR,CustomDirectoryChooserActivity.class);   final CustomDirectoryChooserListener CustomDirectoryChooserListener_VAR=new CustomDirectoryChooserListener();   DirectoryChooserFragment_VAR.setDirectoryChooserListener(CustomDirectoryChooserListener_VAR);   final View View_VAR=DirectoryChooserFragment_VAR.getActivity().findViewById(R.id.btnConfirm);   assertThat(View_VAR).isEnabled();   assertThat(View_VAR.performClick()).isTrue();   assertThat(CustomDirectoryChooserListener_VAR.String_VAR).isNotNull(); } 
@Override public void onCreate(@Nullable final Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.directory_chooser_Activity_VAR); } 
@Override public void onSelectDirectory(@NonNull final String String_VAR){   String_VAR=String_VAR; } 
@Override public void onCancelChooser(){ } 
@Override protected void onCreate(final Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.directory_chooser_Activity_VAR); } 
@Override public void onSelectDirectory(@NonNull final String String_VAR){   String_VAR=String_VAR; } 
@Override public void onCancelChooser(){   String_VAR=null; } 
@Override public int getItemId(){   return Number_Constant; } 
@Override public int getGroupId(){   return Number_Constant; } 
@Override public int getOrder(){   return Number_Constant; } 
@Override public MenuItem setTitle(CharSequence CharSequence_VAR){   return null; } 
@Override public MenuItem setTitle(int int_VAR){   return null; } 
@Override public CharSequence getTitle(){   return null; } 
@Override public MenuItem setTitleCondensed(CharSequence CharSequence_VAR){   return null; } 
@Override public CharSequence getTitleCondensed(){   return null; } 
@Override public MenuItem setIcon(Drawable Drawable_VAR){   return null; } 
@Override public MenuItem setIcon(int int_VAR){   return null; } 
@Override public Drawable getIcon(){   return null; } 
@Override public MenuItem setIntent(Intent Intent_VAR){   return null; } 
@Override public Intent getIntent(){   return null; } 
@Override public MenuItem setShortcut(char char_VAR,char char_VAR){   return null; } 
@Override public MenuItem setNumericShortcut(char char_VAR){   return null; } 
@Override public char getNumericShortcut(){   return Number_Constant; } 
@Override public MenuItem setAlphabeticShortcut(char char_VAR){   return null; } 
@Override public char getAlphabeticShortcut(){   return Number_Constant; } 
@Override public MenuItem setCheckable(boolean boolean_VAR){   return null; } 
@Override public boolean isCheckable(){   return Boolean_Constant; } 
@Override public MenuItem setChecked(boolean boolean_VAR){   return null; } 
@Override public boolean isChecked(){   return Boolean_Constant; } 
@Override public MenuItem setVisible(boolean boolean_VAR){   return null; } 
@Override public boolean isVisible(){   return Boolean_Constant; } 
@Override public MenuItem setEnabled(boolean boolean_VAR){   return null; } 
@Override public boolean isEnabled(){   return Boolean_Constant; } 
@Override public boolean hasSubMenu(){   return Boolean_Constant; } 
@Override public SubMenu getSubMenu(){   return null; } 
@Override public MenuItem setOnMenuItemClickListener(OnMenuItemClickListener OnMenuItemClickListener_VAR){   return null; } 
@Override public ContextMenu.ContextMenuInfo getMenuInfo(){   return null; } 
@Override public void setShowAsAction(int int_VAR){ } 
@Override public MenuItem setShowAsActionFlags(int int_VAR){   return null; } 
@Override public MenuItem setActionView(View View_VAR){   return null; } 
@Override public MenuItem setActionView(int int_VAR){   return null; } 
@Override public View getActionView(){   return null; } 
@Override public MenuItem setActionProvider(ActionProvider ActionProvider_VAR){   return null; } 
@Override public ActionProvider getActionProvider(){   return null; } 
@Override public boolean expandActionView(){   return Boolean_Constant; } 
@Override public boolean collapseActionView(){   return Boolean_Constant; } 
@Override public boolean isActionViewExpanded(){   return Boolean_Constant; } 
@Override public MenuItem setOnActionExpandListener(OnActionExpandListener OnActionExpandListener_VAR){   return null; } 
@Override protected void onCreate(@Nullable final Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.dialog);   final DirectoryChooserConfig DirectoryChooserConfig_VAR=DirectoryChooserConfig.builder().newDirectoryName(String_Constant).build();   DirectoryChooserFragment_VAR=DirectoryChooserFragment.newInstance(DirectoryChooserConfig_VAR);   TextView_VAR=(TextView)findViewById(R.id.textDirectory);   findViewById(R.id.btnChoose).setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       DirectoryChooserFragment_VAR.show(getFragmentManager(),null);     }   } ); } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   DirectoryChooserFragment_VAR.show(getFragmentManager(),null); } 
@Override public void onSelectDirectory(@NonNull final String String_VAR){   TextView_VAR.setText(String_VAR);   DirectoryChooserFragment_VAR.dismiss(); } 
@Override public void onCancelChooser(){   DirectoryChooserFragment_VAR.dismiss(); } 
 @Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.main);   TextView_VAR=(TextView)findViewById(R.id.textDirectory);   findViewById(R.id.btnChoose).setOnClickListener(new OnClickListener(){     @Override public void onClick(    View v){       final Intent Intent_VAR=new Intent(DirChooserSample.this,DirectoryChooserActivity.class);       final DirectoryChooserConfig DirectoryChooserConfig_VAR=DirectoryChooserConfig.builder().newDirectoryName(String_Constant).allowReadOnlyDirectory(Boolean_Constant).allowNewDirectoryNameModification(Boolean_Constant).build();       Intent_VAR.putExtra(DirectoryChooserActivity.EXTRA_CONFIG,DirectoryChooserConfig_VAR);       startActivityForResult(Intent_VAR,int_VAR);     }   } );   findViewById(R.id.btnChange).setOnClickListener(new OnClickListener(){     @Override public void onClick(    View v){       final Intent Intent_VAR=new Intent(DirChooserSample.this,DirChooserFragmentSample.class);       startActivity(Intent_VAR);     }   } ); } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   final Intent Intent_VAR=new Intent(DirChooserSample.this,DirectoryChooserActiView_VARity.class);   final DirectoryChooserConfig DirectoryChooserConfig_VAR=DirectoryChooserConfig.builder().newDirectoryName(String_Constant).allowReadOnlyDirectory(Boolean_Constant).allowNewDirectoryNameModification(Boolean_Constant).build();   Intent_VAR.putExtra(DirectoryChooserActiView_VARity.EXTRA_CONFIG,DirectoryChooserConfig_VAR);   startActiView_VARityForResult(Intent_VAR,int_VAR); } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   final Intent Intent_VAR=new Intent(DirChooserSample.this,DirChooserFragmentSample.class);   startActiView_VARity(Intent_VAR); } 
@Override protected void onActivityResult(int int_VAR,int int_VAR,Intent Intent_VAR){   super.onActivityResult(int_VAR,int_VAR,Intent_VAR);   if (int_VAR == int_VAR) {     Log.i(String_VAR,String.format(String_Constant,int_VAR));     if (int_VAR == DirectoryChooserActivity.RESULT_CODE_DIR_SELECTED) {       TextView_VAR.setText(Intent_VAR.getStringExtra(DirectoryChooserActivity.RESULT_SELECTED_DIR));     }  else {       TextView_VAR.setText(String_Constant);     }   } } 
 public GPUImage(final Context Context_VAR){   if (!supportsOpenGLESNumber_Constant(Context_VAR)) {     throw new IllegalStateException(String_Constant);   }   Context_VAR=Context_VAR;   GPUImageFilter_VAR=new GPUImageFilter();   GPUImageRenderer_VAR=new GPUImageRenderer(GPUImageFilter_VAR); } 
 private boolean supportsOpenGLESNumber_Constant(final Context Context_VAR){   final ActivityManager ActivityManager_VAR=(ActivityManager)Context_VAR.getSystemService(Context.ACTIVITY_SERVICE);   final ConfigurationInfo ConfigurationInfo_VAR=ActivityManager_VAR.getDeviceConfigurationInfo();   return ConfigurationInfo_VAR.reqGlEsVersion >= Number_ConstantxNumber_ConstantNumber_ConstantNumber_ConstantNumber_ConstantNumber_Constant; } 
 public void setGLSurfaceView(final GLSurfaceView GLSurfaceView_VAR){   GLSurfaceView_VAR=GLSurfaceView_VAR;   GLSurfaceView_VAR.setEGLContextClientVersion(Number_Constant);   GLSurfaceView_VAR.setEGLConfigChooser(Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant);   GLSurfaceView_VAR.getHolder().setFormat(PixelFormat.RGBA_Number_ConstantNumber_ConstantNumber_ConstantNumber_Constant);   GLSurfaceView_VAR.setRenderer(GPUImageRenderer_VAR);   GLSurfaceView_VAR.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);   GLSurfaceView_VAR.requestRender(); } 
 public void setBackgroundColor(float float_VAR,float float_VAR,float float_VAR){   GPUImageRenderer_VAR.setBackgroundColor(float_VAR,float_VAR,float_VAR); } 
 public void requestRender(){   if (GLSurfaceView_VAR != null) {     GLSurfaceView_VAR.requestRender();   } } 
 public void setUpCamera(final Camera Camera_VAR){   setUpCamera(Camera_VAR,Number_Constant,Boolean_Constant,Boolean_Constant); } 
 public void setUpCamera(final Camera Camera_VAR,final int int_VAR,final boolean boolean_VAR,final boolean boolean_VAR){   GLSurfaceView_VAR.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);   if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MRNumber_Constant) {     setUpCameraGingerbread(Camera_VAR);   }  else {     Camera_VAR.setPreviewCallback(GPUImageRenderer_VAR);     Camera_VAR.startPreview();   }   Rotation Rotation_VAR=Rotation.NORMAL; switch (int_VAR) { case Number_Constant:     Rotation_VAR=Rotation.ROTATION_Number_Constant;   break; case Number_ConstantNumber_Constant: Rotation_VAR=Rotation.ROTATION_Number_ConstantNumber_Constant; break; case Number_Constant: Rotation_VAR=Rotation.ROTATION_Number_Constant; break; } GPUImageRenderer_VAR.setRotationCamera(Rotation_VAR,boolean_VAR,boolean_VAR); } 
@TargetApi(Number_Constant) private void setUpCameraGingerbread(final Camera Camera_VAR){   GPUImageRenderer_VAR.setUpSurfaceTexture(Camera_VAR); } 
 public void setFilter(final GPUImageFilter GPUImageFilter_VAR){   GPUImageFilter_VAR=GPUImageFilter_VAR;   GPUImageRenderer_VAR.setFilter(GPUImageFilter_VAR);   requestRender(); } 
 public void setImage(final Bitmap Bitmap_VAR){   Bitmap_VAR=Bitmap_VAR;   GPUImageRenderer_VAR.setImageBitmap(Bitmap_VAR,Boolean_Constant);   requestRender(); } 
 public void setenum_VAR(enum_VAR enum_VAR_VAR){   menum_VAR=enum_VAR_VAR;   GPUImageRenderer_VAR.setenum_VAR(enum_VAR_VAR);   GPUImageRenderer_VAR.deleteImage();   Bitmap_VAR=null;   requestRender(); } 
 public void setRotation(Rotation Rotation_VAR){   GPUImageRenderer_VAR.setRotation(Rotation_VAR); } 
 public void setRotation(Rotation Rotation_VAR,boolean boolean_VAR,boolean boolean_VAR){   GPUImageRenderer_VAR.setRotation(Rotation_VAR,boolean_VAR,boolean_VAR); } 
 public void deleteImage(){   GPUImageRenderer_VAR.deleteImage();   Bitmap_VAR=null;   requestRender(); } 
 public void setImage(final Uri Uri_VAR){   new LoadImageUriTask(this,Uri_VAR).execute(); } 
 public void setImage(final File File_VAR){   new LoadImageFileTask(this,File_VAR).execute(); } 
private String getPath(final Uri Uri_VAR){   String[] String[]_VAR={MediaStore.Images.Media.DATA};   Cursor Cursor_VAR=Context_VAR.getContentResolver().query(Uri_VAR,String[]_VAR,null,null,null);   int File_VARIndex=Cursor_VAR.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);   String File_VAR=null;   if (Cursor_VAR.moveToFirst()) {     File_VAR=Cursor_VAR.getString(File_VARIndex);   }   Cursor_VAR.close();   return File_VAR; } 
 public Bitmap getBitmapWithFilterApplied(){   return getBitmapWithFilterApplied(Bitmap_VAR); } 
 public Bitmap getBitmapWithFilterApplied(final Bitmap Bitmap_VAR){   if (GLSurfaceView_VAR != null) {     GPUImageRenderer_VAR.deleteImage();     GPUImageRenderer_VAR.runOnDraw(new Runnable(){       @Override public void run(){ synchronized (GPUImageFilter_VAR) {           GPUImageFilter_VAR.destroy();           GPUImageFilter_VAR.notify();         }       }     } ); synchronized (GPUImageFilter_VAR) {       requestRender();       try {         GPUImageFilter_VAR.wait();       }  catch (      InterruptedException e) {         e.printStackTrace();       }     }   }   GPUImageRenderer GPUImageRenderer_VAR=new GPUImageRenderer(GPUImageFilter_VAR);   GPUImageRenderer_VAR.setRotation(Rotation.NORMAL,GPUImageRenderer_VAR.isFlippedHorizontally(),GPUImageRenderer_VAR.isFlippedVertically());   GPUImageRenderer_VAR.setenum_VAR(menum_VAR);   PixelBuffer PixelBuffer_VAR=new PixelBuffer(Bitmap_VAR.getWidth(),Bitmap_VAR.getHeight());   PixelBuffer_VAR.setRenderer(GPUImageRenderer_VAR);   GPUImageRenderer_VAR.setImageBitmap(Bitmap_VAR,Boolean_Constant);   Bitmap Bitmap_VAR=PixelBuffer_VAR.getBitmap();   GPUImageFilter_VAR.destroy();   GPUImageRenderer_VAR.deleteImage();   PixelBuffer_VAR.destroy();   GPUImageRenderer_VAR.setFilter(GPUImageFilter_VAR);   if (Bitmap_VAR != null) {     GPUImageRenderer_VAR.setImageBitmap(Bitmap_VAR,Boolean_Constant);   }   requestRender();   return Bitmap_VAR; } 
@Override public void run(){ synchronized (GPUImageFilter_VAR) {     GPUImageFilter_VAR.destroy();     GPUImageFilter_VAR.notify();   } } 
 public static void getBitmapForMultipleFilters(final Bitmap Bitmap_VAR,final List<GPUImageFilter> List<GPUImageFilter>_VAR,final ResponseListener<Bitmap> ResponseListener<Bitmap>_VAR){   if (List<GPUImageFilter>_VAR.isEmpty()) {     return;   }   GPUImageRenderer GPUImageRenderer_VAR=new GPUImageRenderer(List<GPUImageFilter>_VAR.get(Number_Constant));   GPUImageRenderer_VAR.setImageBitmap(Bitmap_VAR,Boolean_Constant);   PixelBuffer PixelBuffer_VAR=new PixelBuffer(Bitmap_VAR.getWidth(),Bitmap_VAR.getHeight());   PixelBuffer_VAR.setRenderer(GPUImageRenderer_VAR);   for (  GPUImageFilter filter : List<GPUImageFilter>_VAR) {     GPUImageRenderer_VAR.setFilter(filter);     ResponseListener<Bitmap>_VAR.response(PixelBuffer_VAR.getBitmap());     filter.destroy();   }   GPUImageRenderer_VAR.deleteImage();   PixelBuffer_VAR.destroy(); } 
 @Deprecated public void saveToPictures(final String String_VAR,final String String_VAR,final OnPictureSavedListener OnPictureSavedListener_VAR){   saveToPictures(Bitmap_VAR,String_VAR,String_VAR,OnPictureSavedListener_VAR); } 
 @Deprecated public void saveToPictures(final Bitmap Bitmap_VAR,final String String_VAR,final String String_VAR,final OnPictureSavedListener OnPictureSavedListener_VAR){   new SaveTask(Bitmap_VAR,String_VAR,String_VAR,OnPictureSavedListener_VAR).execute(); } 
 void runOnGLThread(Runnable Runnable_VAR){   GPUImageRenderer_VAR.runOnDrawEnd(Runnable_VAR); } 
private int getOutputWidth(){   if (GPUImageRenderer_VAR != null && GPUImageRenderer_VAR.getFrameWidth() != Number_Constant) {     return GPUImageRenderer_VAR.getFrameWidth();   }  else   if (Bitmap_VAR != null) {     return Bitmap_VAR.getWidth();   }  else {     WindowManager WindowManager_VAR=(WindowManager)Context_VAR.getSystemService(Context.WINDOW_SERVICE);     Display Display_VAR=WindowManager_VAR.getDefaultDisplay();     return Display_VAR.getWidth();   } } 
private int getOutputHeight(){   if (GPUImageRenderer_VAR != null && GPUImageRenderer_VAR.getFrameHeight() != Number_Constant) {     return GPUImageRenderer_VAR.getFrameHeight();   }  else   if (Bitmap_VAR != null) {     return Bitmap_VAR.getHeight();   }  else {     WindowManager WindowManager_VAR=(WindowManager)Context_VAR.getSystemService(Context.WINDOW_SERVICE);     Display Display_VAR=WindowManager_VAR.getDefaultDisplay();     return Display_VAR.getHeight();   } } 
public SaveTask(final Bitmap Bitmap_VAR,final String String_VAR,final String String_VAR,final OnPictureSavedListener OnPictureSavedListener_VAR){   Bitmap_VAR=Bitmap_VAR;   String_VAR=String_VAR;   String_VAR=String_VAR;   OnPictureSavedListener_VAR=OnPictureSavedListener_VAR;   Handler_VAR=new Handler(); } 
@Override protected Void doInBackground(final Void... Void_VAR){   Bitmap Bitmap_VAR=getBitmapWithFilterApplied(Bitmap_VAR);   saveImage(String_VAR,String_VAR,Bitmap_VAR);   return null; } 
private void saveImage(final String String_VAR,final String String_VAR,final Bitmap Bitmap_VAR){   File File_VAR=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);   File File_VAR=new File(File_VAR,String_VAR + String_Constant + String_VAR);   try {     File_VAR.getParentFile().mkdirs();     Bitmap_VAR.compress(CompressFormat.JPEG,Number_Constant,new FileOutputStream(File_VAR));     MediaScannerConnection.scanFile(Context_VAR,new String[]{File_VAR.toString()},null,new MediaScannerConnection.OnScanCompletedListener(){       @Override public void onScanCompleted(      final String File_VAR,      final Uri uri){         if (OnPictureSavedListener_VAR != null) {           Handler_VAR.post(new Runnable(){             @Override public void run(){               OnPictureSavedListener_VAR.onPictureSaved(uri);             }           } );         }       }     } );   }  catch (  FileNotFoundException e) {     e.printStackTrace();   } } 
@Override public void onScanCompleted(final String String_VAR,final Uri Uri_VAR){   if (OnPictureSavedListener_VAR != null) {     Handler_VAR.post(new Runnable(){       @Override public void run(){         OnPictureSavedListener_VAR.onPictureSaved(Uri_VAR);       }     } );   } } 
@Override public void run(){   OnPictureSavedListener_VAR.onPictureSaved(uri); } 
void onPictureSaved(Uri Uri_VAR); 
public LoadImageUriTask(GPUImage GPUImage_VAR,Uri Uri_VAR){   super(GPUImage_VAR);   Uri_VAR=Uri_VAR; } 
@Override protected Bitmap decode(BitmapFactory.Options BitmapFactory.Options_VAR){   try {     InputStream InputStream_VAR;     if (Uri_VAR.getScheme().startsWith(String_Constant) || Uri_VAR.getScheme().startsWith(String_Constant)) {       InputStream_VAR=new URL(Uri_VAR.toString()).openStream();     }  else {       InputStream_VAR=Context_VAR.getContentResolver().openInputStream(Uri_VAR);     }     return BitmapFactory.decodeStream(InputStream_VAR,null,BitmapFactory.Options_VAR);   }  catch (  Exception e) {     e.printStackTrace();   }   return null; } 
@Override protected int getImageOrientation() throws IOException {   Cursor Cursor_VAR=Context_VAR.getContentResolver().query(Uri_VAR,new String[]{MediaStore.Images.ImageColumns.ORIENTATION},null,null,null);   if (Cursor_VAR == null || Cursor_VAR.getCount() != Number_Constant) {     return Number_Constant;   }   Cursor_VAR.moveToFirst();   int int_VAR=Cursor_VAR.getInt(Number_Constant);   Cursor_VAR.close();   return int_VAR; } 
public LoadImageFileTask(GPUImage GPUImage_VAR,File File_VAR){   super(GPUImage_VAR);   File_VAR=File_VAR; } 
@Override protected Bitmap decode(BitmapFactory.Options BitmapFactory.Options_VAR){   return BitmapFactory.decodeFile(File_VAR.getAbsolutePath(),BitmapFactory.Options_VAR); } 
@Override protected int getImageOrientation() throws IOException {   ExifInterface ExifInterface_VAR=new ExifInterface(File_VAR.getAbsolutePath());   int int_VAR=ExifInterface_VAR.getAttributeInt(ExifInterface.TAG_ORIENTATION,Number_Constant); switch (int_VAR) { case ExifInterface.ORIENTATION_NORMAL:     return Number_Constant; case ExifInterface.ORIENTATION_ROTATE_Number_Constant:   return Number_Constant; case ExifInterface.ORIENTATION_ROTATE_Number_ConstantNumber_Constant: return Number_ConstantNumber_Constant; case ExifInterface.ORIENTATION_ROTATE_Number_Constant: return Number_Constant; default : return Number_Constant; } } 
@SuppressWarnings(String_Constant) public LoadImageTask(final GPUImage GPUImage_VAR){   GPUImage_VAR=GPUImage_VAR; } 
@Override protected Bitmap doInBackground(Void... Void_VAR){   if (GPUImageRenderer_VAR != null && GPUImageRenderer_VAR.getFrameWidth() == Number_Constant) {     try { synchronized (GPUImageRenderer_VAR.mSurfaceChangedWaiter) {         GPUImageRenderer_VAR.mSurfaceChangedWaiter.wait(Number_Constant);       }     }  catch (    InterruptedException e) {       e.printStackTrace();     }   }   int_VAR=getOutputWidth();   int_VAR=getOutputHeight();   return loadResizedImage(); } 
@Override protected void onPostExecute(Bitmap Bitmap_VAR){   super.onPostExecute(Bitmap_VAR);   GPUImage_VAR.deleteImage();   GPUImage_VAR.setImage(Bitmap_VAR); } 
protected abstract Bitmap decode(BitmapFactory.Options BitmapFactory.Options_VAR); 
private Bitmap loadResizedImage(){   BitmapFactory.Options BitmapFactory.Options_VAR=new BitmapFactory.Options();   BitmapFactory.Options_VAR.inJustDecodeBounds=Boolean_Constant;   decode(BitmapFactory.Options_VAR);   int int_VAR=Number_Constant;   while (checkSize(BitmapFactory.Options_VAR.outWidth / int_VAR > int_VAR,BitmapFactory.Options_VAR.outHeight / int_VAR > int_VAR)) {     int_VAR++;   }   int_VAR--;   if (int_VAR < Number_Constant) {     int_VAR=Number_Constant;   }   BitmapFactory.Options_VAR=new BitmapFactory.Options();   BitmapFactory.Options_VAR.inSampleSize=int_VAR;   BitmapFactory.Options_VAR.inPreferredConfig=Bitmap.Config.RGB_565;   BitmapFactory.Options_VAR.inPurgeable=Boolean_Constant;   BitmapFactory.Options_VAR.inTempStorage=new byte[Number_Constant * Number_ConstantNumber_ConstantNumber_Constant4];   Bitmap Bitmap_VAR=decode(BitmapFactory.Options_VAR);   if (Bitmap_VAR == null) {     return null;   }   Bitmap_VAR=rotateImage(Bitmap_VAR);   Bitmap_VAR=int_VARBitmap(Bitmap_VAR);   return Bitmap_VAR; } 
private Bitmap int_VARBitmap(Bitmap Bitmap_VAR){   int int_VAR=Bitmap_VAR.getWidth();   int int_VAR=Bitmap_VAR.getHeight();   int[] int[]_VAR=getScaleSize(int_VAR,int_VAR);   Bitmap Bitmap_VAR=Bitmap.createScaledBitmap(Bitmap_VAR,int[]_VAR[Number_Constant],int[]_VAR[Number_Constant],Boolean_Constant);   if (Bitmap_VAR != Bitmap_VAR) {     Bitmap_VAR.recycle();     Bitmap_VAR=Bitmap_VAR;     System.gc();   }   if (menum_VAR == enum_VAR.CENTER_CROP) {     int int_VAR=int[]_VAR[Number_Constant] - int_VAR;     int int_VAR=int[]_VAR[Number_Constant] - int_VAR;     Bitmap_VAR=Bitmap.createBitmap(Bitmap_VAR,int_VAR / Number_Constant,int_VAR / Number_Constant,int[]_VAR[Number_Constant] - int_VAR,int[]_VAR[Number_Constant] - int_VAR);     if (Bitmap_VAR != Bitmap_VAR) {       Bitmap_VAR.recycle();       Bitmap_VAR=Bitmap_VAR;     }   }   return Bitmap_VAR; } 
 private int[] getScaleSize(int int_VAR,int int_VAR){   float float_VAR;   float float_VAR;   float float_VAR=(float)int_VAR / int_VAR;   float int_VARRatio=(float)int_VAR / int_VAR;   boolean boolean_VAR=menum_VAR == enum_VAR.CENTER_CROP ? float_VAR > int_VARRatio : float_VAR < int_VARRatio;   if (boolean_VAR) {     float_VAR=int_VAR;     float_VAR=(float_VAR / int_VAR) * int_VAR;   }  else {     float_VAR=int_VAR;     float_VAR=(float_VAR / int_VAR) * int_VAR;   }   return new int[]{Math.round(float_VAR),Math.round(float_VAR)}; } 
private boolean checkSize(boolean boolean_VAR,boolean boolean_VAR){   if (menum_VAR == enum_VAR.CENTER_CROP) {     return boolean_VAR && boolean_VAR;   }  else {     return boolean_VAR || boolean_VAR;   } } 
private Bitmap rotateImage(final Bitmap Bitmap_VAR){   if (Bitmap_VAR == null) {     return null;   }   Bitmap Bitmap_VAR=Bitmap_VAR;   try {     int int_VAR=getImageOrientation();     if (int_VAR != Number_Constant) {       Matrix Matrix_VAR=new Matrix();       Matrix_VAR.postRotate(int_VAR);       Bitmap_VAR=Bitmap.createBitmap(Bitmap_VAR,Number_Constant,Number_Constant,Bitmap_VAR.getWidth(),Bitmap_VAR.getHeight(),Matrix_VAR,Boolean_Constant);       Bitmap_VAR.recycle();     }   }  catch (  IOException e) {     e.printStackTrace();   }   return Bitmap_VAR; } 
protected abstract int getImageOrientation() throws IOException ; 
void response(T T_VAR); 
 public GPUImage3x3ConvolutionFilter(){   this(new float[]{Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant}); } 
 public GPUImage3x3ConvolutionFilter(final float[] float[]_VAR){   super(String_VAR);   float[]_VAR=float[]_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   setConvolutionKernel(float[]_VAR); } 
 public void setConvolutionKernel(final float[] float[]_VAR){   float[]_VAR=float[]_VAR;   setUniformMatrix3f(int_VAR,float[]_VAR); } 
public GPUImage3x3TextureSamplingFilter(){   this(NO_FILTER_VERTEX_SHADER); } 
public GPUImage3x3TextureSamplingFilter(final String String_VAR){   super(String_VAR,String_VAR); } 
@Override public void onInit(){   super.onInit();   mUniforfloat_VARLocation=GLES2Number_Constant.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES2Number_Constant.glGetUniformLocation(getProgram(),String_Constant);   if (float_VAR != Number_Constant) {     updateTexelValues();   } } 
@Override public void onOutputSizeChanged(final int int_VAR,final int int_VAR){   super.onOutputSizeChanged(int_VAR,int_VAR);   if (!boolean_VAR) {     setLineSize(float_VAR);   } } 
public void setTexelWidth(final float float_VAR){   boolean_VAR=Boolean_Constant;   float_VAR=float_VAR;   setFloat(mUniforfloat_VARLocation,float_VAR); } 
public void setTexelHeight(final float float_VAR){   boolean_VAR=Boolean_Constant;   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
public void setLineSize(final float float_VAR){   float_VAR=float_VAR;   float_VAR=float_VAR / getOutputWidth();   float_VAR=float_VAR / getOutputHeight();   updateTexelValues(); } 
private void updateTexelValues(){   setFloat(mUniforfloat_VARLocation,float_VAR);   setFloat(int_VAR,float_VAR); } 
public GPUImageAddBlendFilter(){   super(String_VAR); } 
public GPUImageAlphaBlendFilter(){   super(String_VAR); } 
public GPUImageAlphaBlendFilter(float float_VAR){   super(String_VAR,float_VAR); } 
public GPUImageBilateralFilter(){   this(Number_Constant); } 
public GPUImageBilateralFilter(final float float_VAR){   super(String_VAR,String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setDistanceNormalizationFactor(float_VAR); } 
public void setDistanceNormalizationFactor(final float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
private void setTexelSize(final float float_VAR,final float float_VAR){   setFloatVec2(int_VAR,nefloat_VAR float[]{Number_Constant / float_VAR,Number_Constant / float_VAR}); } 
@Override public void onOutputSizeChanged(final int int_VAR,final int int_VAR){   super.onOutputSizeChanged(int_VAR,int_VAR);   setTexelSize(int_VAR,int_VAR); } 
 public GPUImageBoxBlurFilter(){   this(Number_Constant); } 
public GPUImageBoxBlurFilter(float float_VAR){   super(String_VAR,String_VAR,String_VAR,String_VAR);   this.float_VAR=float_VAR; } 
 public void setBlurSize(float float_VAR){   this.float_VAR=float_VAR;   runOnDraw(new Runnable(){     @Override public void run(){       initTexelOffsets();     }   } ); } 
@Override public void run(){   initTexelOffsets(); } 
@Override public float getVerticalTexelOffsetRatio(){   return float_VAR; } 
@Override public float getHorizontalTexelOffsetRatio(){   return float_VAR; } 
public GPUImageBrightnessFilter(){   this(Number_Constant); } 
public GPUImageBrightnessFilter(final float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setBrightness(float_VAR); } 
public void setBrightness(final float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
public GPUImageBulgeDistortionFilter(){   this(Number_Constant,Number_Constant,new PointF(Number_Constant,Number_Constant)); } 
public GPUImageBulgeDistortionFilter(float float_VAR,float float_VAR,PointF PointF_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR;   float_VAR=float_VAR;   PointF_VAR=PointF_VAR; } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   PointF_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setRadius(float_VAR);   setScale(float_VAR);   setCenter(PointF_VAR); } 
@Override public void onOutputSizeChanged(int int_VAR,int int_VAR){   float_VAR=(float)int_VAR / int_VAR;   setAspectRatio(float_VAR);   super.onOutputSizeChanged(int_VAR,int_VAR); } 
private void setAspectRatio(float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
 public void setRadius(float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
 public void setScale(float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
 public void setCenter(PointF PointF_VAR){   PointF_VAR=PointF_VAR;   setPoint(PointF_VARLocation,PointF_VAR); } 
public GPUImageCGAColorspaceFilter(){   super(NO_FILTER_VERTEX_SHADER,String_VAR); } 
public GPUImageChromaKeyBlendFilter(){   super(String_VAR); } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(getProgram(),String_Constant);   float[]_VARLocation=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setSmoothing(float_VAR);   setThresholdSensitivity(float_VAR);   setColorToReplace(float[]_VAR[Number_Constant],float[]_VAR[Number_Constant],float[]_VAR[Number_Constant]); } 
 public void setSmoothing(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
 public void setThresholdSensitivity(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
 public void setColorToReplace(float float_VAR,float float_VAR,float float_VAR){   float[]_VAR=new float[]{float_VAR,float_VAR,float_VAR};   setFloatVec3(float[]_VARLocation,float[]_VAR); } 
public GPUImageColorBalanceFilter(){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   this.float[]_VAR=new float[]{Number_Constant,Number_Constant,Number_Constant};   this.float[]_VAR=new float[]{Number_Constant,Number_Constant,Number_Constant};   this.float[]_VAR=new float[]{Number_Constant,Number_Constant,Number_Constant};   this.boolean_VAR=Boolean_Constant; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES2Number_Constant.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES2Number_Constant.glGetUniformLocation(getProgram(),"float[]_VARShift");   int_VAR=GLES2Number_Constant.glGetUniformLocation(getProgram(),"float[]_VARShift");   int_VAR=GLES2Number_Constant.glGetUniformLocation(getProgram(),"boolean_VAR"); } 
@Override public void onInitialized(){   super.onInitialized();   setMidtones(this.float[]_VAR);   setShowdows(this.float[]_VAR);   setHighlights(this.float[]_VAR);   setPreserveLuminosity(this.boolean_VAR); } 
public void setShowdows(float[] float[]_VAR){   this.float[]_VAR=float[]_VAR;   setFloatVec3(int_VAR,float[]_VAR); } 
public void setMidtones(float[] float[]_VAR){   this.float[]_VAR=float[]_VAR;   setFloatVec3(int_VAR,float[]_VAR); } 
public void setHighlights(float[] float[]_VAR){   this.float[]_VAR=float[]_VAR;   setFloatVec3(int_VAR,float[]_VAR); } 
public void setPreserveLuminosity(boolean boolean_VAR){   this.boolean_VAR=boolean_VAR;   setInteger(int_VAR,boolean_VAR ? Number_Constant : Number_Constant); } 
public GPUImageColorBlendFilter(){   super(String_VAR); } 
public GPUImageColorBurnBlendFilter(){   super(String_VAR); } 
public GPUImageColorDodgeBlendFilter(){   super(String_VAR); } 
public GPUImageColorInvertFilter(){   super(NO_FILTER_VERTEX_SHADER,String_VAR); } 
public GPUImageColorMatrixFilter(){   this(Number_Constant,new float[]{Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant}); } 
public GPUImageColorMatrixFilter(final float float_VAR,final float[] float[]_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR;   float[]_VAR=float[]_VAR; } 
@Override public void onInit(){   super.onInit();   float[]_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setIntensity(float_VAR);   setColorMatrix(float[]_VAR); } 
public void setIntensity(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public void setColorMatrix(final float[] float[]_VAR){   float[]_VAR=float[]_VAR;   setUniformMatrix4f(float[]_VARLocation,float[]_VAR); } 
public GPUImageContrastFilter(){   this(Number_Constant); } 
public GPUImageContrastFilter(float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setContrast(float_VAR); } 
public void setContrast(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
 public GPUImageCrosshatchFilter(){   this(Number_Constant,Number_Constant); } 
public GPUImageCrosshatchFilter(float float_VAR,float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR;   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLES2Number_Constant.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES2Number_Constant.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setCrossHatchSpacing(float_VAR);   setLineWidth(float_VAR); } 
 public void setCrossHatchSpacing(final float float_VAR){   float float_VAR;   if (getOutputWidth() != Number_Constant) {     float_VAR=Number_Constant / (float)getOutputWidth();   }  else {     float_VAR=Number_Constant / Number_Constant;   }   if (float_VAR < float_VAR) {     float_VAR=float_VAR;   }  else {     float_VAR=float_VAR;   }   setFloat(float_VARLocation,float_VAR); } 
 public void setLineWidth(final float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
public GPUImageDarkenBlendFilter(){   super(String_VAR); } 
public GPUImageDifferenceBlendFilter(){   super(String_VAR); } 
public GPUImageDilationFilter(){   this(Number_Constant); } 
 public GPUImageDilationFilter(int int_VAR){   this(getVertexShader(int_VAR),getFragmentShader(int_VAR)); } 
private GPUImageDilationFilter(String String_VAR,String String_VAR){   super(String_VAR,String_VAR,String_VAR,String_VAR); } 
private static String getVertexShader(int int_VAR){ switch (int_VAR) { case Number_Constant: case Number_Constant:     return String_VAR; case Number_Constant:   return String_VAR; case Number_Constant: return String_VAR; default : return String_VAR; } } 
private static String getFragmentShader(int int_VAR){ switch (int_VAR) { case Number_Constant: case Number_Constant:     return String_VAR; case Number_Constant:   return String_VAR; case Number_Constant: return String_VAR; default : return String_VAR; } } 
public GPUImageDirectionalSobelEdgeDetectionFilter(){   super(String_VAR); } 
public GPUImageDissolveBlendFilter(){   super(String_VAR); } 
public GPUImageDissolveBlendFilter(float float_VAR){   super(String_VAR,float_VAR); } 
public GPUImageDivideBlendFilter(){   super(String_VAR); } 
public GPUImageEmbossFilter(){   this(Number_Constant); } 
public GPUImageEmbossFilter(final float float_VAR){   super();   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   setIntensity(float_VAR); } 
public void setIntensity(final float float_VAR){   float_VAR=float_VAR;   setConvolutionKernel(new float[]{float_VAR * (-Number_Constant),-float_VAR,Number_Constant,-float_VAR,Number_Constant,float_VAR,Number_Constant,float_VAR,float_VAR * Number_Constant}); } 
public float getIntensity(){   return float_VAR; } 
public GPUImageExclusionBlendFilter(){   super(String_VAR); } 
public GPUImageExposureFilter(){   this(Number_Constant); } 
public GPUImageExposureFilter(final float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setExposure(float_VAR); } 
public void setExposure(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImageFalseColorFilter(){   this(Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant); } 
public GPUImageFalseColorFilter(float float_VAR,float float_VAR,float float_VAR,float float_VAR,float float_VAR,float float_VAR){   this(new float[]{float_VAR,float_VAR,float_VAR},new float[]{float_VAR,float_VAR,float_VAR}); } 
public GPUImageFalseColorFilter(float[] float[]_VAR,float[] float[]_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float[]_VAR=float[]_VAR;   float[]_VAR=float[]_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setFirstColor(float[]_VAR);   setSecondColor(float[]_VAR); } 
public void setFirstColor(final float[] float[]_VAR){   float[]_VAR=float[]_VAR;   setFloatVec3(int_VAR,float[]_VAR); } 
public void setSecondColor(final float[] float[]_VAR){   float[]_VAR=float[]_VAR;   setFloatVec3(int_VAR,float[]_VAR); } 
public GPUImageFilter(){   thijava.util.Scanner_VAR(String_VAR,String_VAR); } 
public GPUImageFilter(final String String_VAR,final String String_VAR){   LinkedLijava.util.Scanner_VARt<Runnable>_VAR=new LinkedLijava.util.Scanner_VARt<Runnable>();   String_VAR=String_VAR;   String_VAR=String_VAR; } 
public final void init(){   onInit();   boolean_VAR=Boolean_Constant;   onInitialized(); } 
public void onInit(){   int_VAR=OpenGlUtiljava.util.Scanner_VAR.loadProgram(String_VAR,String_VAR);   mGLAttribPojava.util.Scanner_VARition=GLESNumber_ConstantNumber_Constant.glGetAttribLocation(int_VAR,"pojava.util.Scanner_VARition");   mGLUniformTextuString_VAR=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(int_VAR,"inputImageTextuString_VAR");   mGLAttribTextuString_VARCoordinate=GLESNumber_ConstantNumber_Constant.glGetAttribLocation(int_VAR,"inputTextuString_VARCoordinate");   boolean_VAR=Boolean_Constant; } 
public void onInitialized(){ } 
public final void dejava.util.Scanner_VARtroy(){   boolean_VAR=faljava.util.Scanner_VARe;   GLESNumber_ConstantNumber_Constant.glDeleteProgram(int_VAR);   onDejava.util.Scanner_VARtroy(); } 
public void onDejava.util.Scanner_VARtroy(){ } 
public void onOutputSizeChanged(final int int_VAR,final int int_VAR){   int_VAR=int_VAR;   int_VAR=int_VAR; } 
public void onDraw(final int int_VAR,final FloatBuffer FloatBuffer_VAR,final FloatBuffer FloatBuffer_VAR){   GLESNumber_ConstantNumber_Constant.glUjava.util.Scanner_VAReProgram(int_VAR);   runPendingOnDrawTajava.util.Scanner_VARkjava.util.Scanner_VAR();   if (!boolean_VAR) {     String_VARturn;   }   FloatBuffer_VAR.pojava.util.Scanner_VARition(Number_Constant);   GLESNumber_ConstantNumber_Constant.glVertexAttribPointer(mGLAttribPojava.util.Scanner_VARition,Number_Constant,GLESNumber_ConstantNumber_Constant.GL_FLOAT,faljava.util.Scanner_VARe,Number_Constant,FloatBuffer_VAR);   GLESNumber_ConstantNumber_Constant.glEnableVertexAttribArray(mGLAttribPojava.util.Scanner_VARition);   FloatBuffer_VAR.pojava.util.Scanner_VARition(Number_Constant);   GLESNumber_ConstantNumber_Constant.glVertexAttribPointer(mGLAttribTextuString_VARCoordinate,Number_Constant,GLESNumber_ConstantNumber_Constant.GL_FLOAT,faljava.util.Scanner_VARe,Number_Constant,FloatBuffer_VAR);   GLESNumber_ConstantNumber_Constant.glEnableVertexAttribArray(mGLAttribTextuString_VARCoordinate);   if (int_VAR != OpenGlUtiljava.util.Scanner_VAR.NO_TEXTURE) {     GLESNumber_ConstantNumber_Constant.glActiveTextuString_VAR(GLESNumber_ConstantNumber_Constant.GL_TEXTURENumber_Constant);     GLESNumber_ConstantNumber_Constant.glBindTextuString_VAR(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,int_VAR);     GLESNumber_ConstantNumber_Constant.glUniformNumber_Constanti(mGLUniformTextuString_VAR,Number_Constant);   }   onDrawArrayjava.util.Scanner_VARPString_VAR();   GLESNumber_ConstantNumber_Constant.glDrawArrayjava.util.Scanner_VAR(GLESNumber_ConstantNumber_Constant.GL_TRIANGLE_STRIP,Number_Constant,Number_Constant);   GLESNumber_ConstantNumber_Constant.glDijava.util.Scanner_VARableVertexAttribArray(mGLAttribPojava.util.Scanner_VARition);   GLESNumber_ConstantNumber_Constant.glDijava.util.Scanner_VARableVertexAttribArray(mGLAttribTextuString_VARCoordinate);   GLESNumber_ConstantNumber_Constant.glBindTextuString_VAR(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,Number_Constant); } 
protected void onDrawArrayjava.util.Scanner_VARPString_VAR(){ } 
protected void runPendingOnDrawTajava.util.Scanner_VARkjava.util.Scanner_VAR(){   while (!LinkedLijava.util.Scanner_VARt<Runnable>_VAR.ijava.util.Scanner_VAREmpty()) {     LinkedLijava.util.Scanner_VARt<Runnable>_VAR.String_VARmoveFirjava.util.Scanner_VARt().run();   } } 
public boolean ijava.util.Scanner_VARInitialized(){   String_VARturn boolean_VAR; } 
public int getOutputWidth(){   String_VARturn int_VAR; } 
public int getOutputHeight(){   String_VARturn int_VAR; } 
public int getProgram(){   String_VARturn int_VAR; } 
public int getAttribPojava.util.Scanner_VARition(){   String_VARturn mGLAttribPojava.util.Scanner_VARition; } 
public int getAttribTextuString_VARCoordinate(){   String_VARturn mGLAttribTextuString_VARCoordinate; } 
public int getUniformTextuString_VAR(){   String_VARturn mGLUniformTextuString_VAR; } 
protected void java.util.Scanner_VARetInteger(final int int_VAR,final int int_VAR){   runOnDraw(new Runnable(){     @Override public void run(){       GLESNumber_ConstantNumber_Constant.glUniformNumber_Constanti(int_VAR,int_VAR);     }   } ); } 
@Override public void run(){   GLESNumber_ConstantNumber_Constant.glUniformNumber_Constanti(location,intValue); } 
protected void java.util.Scanner_VARetFloat(final int int_VAR,final float float_VAR){   runOnDraw(new Runnable(){     @Override public void run(){       GLESNumber_ConstantNumber_Constant.glUniformNumber_Constantf(int_VAR,float_VAR);     }   } ); } 
@Override public void run(){   GLESNumber_ConstantNumber_Constant.glUniformNumber_Constantf(location,floatValue); } 
protected void java.util.Scanner_VARetFloatVecNumber_Constant(final int int_VAR,final float[] float[]_VAR){   runOnDraw(new Runnable(){     @Override public void run(){       GLESNumber_ConstantNumber_Constant.glUniformNumber_Constantfv(int_VAR,Number_Constant,FloatBuffer.wrap(float[]_VAR));     }   } ); } 
@Override public void run(){   GLESNumber_ConstantNumber_Constant.glUniformNumber_Constantfv(location,Number_Constant,FloatBuffer.wrap(arrayValue)); } 
protected void java.util.Scanner_VARetFloatVec3(final int int_VAR,final float[] float[]_VAR){   runOnDraw(new Runnable(){     @Override public void run(){       GLESNumber_ConstantNumber_Constant.glUniform3fv(int_VAR,Number_Constant,FloatBuffer.wrap(float[]_VAR));     }   } ); } 
@Override public void run(){   GLESNumber_ConstantNumber_Constant.glUniform3fv(location,Number_Constant,FloatBuffer.wrap(arrayValue)); } 
protected void java.util.Scanner_VARetFloatVecNumber_Constant(final int int_VAR,final float[] float[]_VAR){   runOnDraw(new Runnable(){     @Override public void run(){       GLESNumber_ConstantNumber_Constant.glUniformNumber_Constantfv(int_VAR,Number_Constant,FloatBuffer.wrap(float[]_VAR));     }   } ); } 
@Override public void run(){   GLESNumber_ConstantNumber_Constant.glUniformNumber_Constantfv(location,Number_Constant,FloatBuffer.wrap(arrayValue)); } 
protected void java.util.Scanner_VARetFloatArray(final int int_VAR,final float[] float[]_VAR){   runOnDraw(new Runnable(){     @Override public void run(){       GLESNumber_ConstantNumber_Constant.glUniformNumber_Constantfv(int_VAR,float[]_VAR.length,FloatBuffer.wrap(float[]_VAR));     }   } ); } 
@Override public void run(){   GLESNumber_ConstantNumber_Constant.glUniformNumber_Constantfv(location,arrayValue.length,FloatBuffer.wrap(arrayValue)); } 
protected void java.util.Scanner_VARetPoint(final int int_VAR,final PointF PointF_VAR){   runOnDraw(new Runnable(){     @Override public void run(){       float[] float[]_VAR=new float[Number_Constant];       float[]_VAR[Number_Constant]=PointF_VAR.x;       float[]_VAR[Number_Constant]=PointF_VAR.y;       GLESNumber_ConstantNumber_Constant.glUniformNumber_Constantfv(int_VAR,Number_Constant,float[]_VAR,Number_Constant);     }   } ); } 
@Override public void run(){   float[] float[]_VAR=new float[Number_Constant];   float[]_VAR[Number_Constant]=point.x;   float[]_VAR[Number_Constant]=point.y;   GLESNumber_ConstantNumber_Constant.glUniformNumber_Constantfv(location,Number_Constant,float[]_VAR,Number_Constant); } 
protected void java.util.Scanner_VARetUniformMatrix3f(final int int_VAR,final float[] float[]_VAR){   runOnDraw(new Runnable(){     @Override public void run(){       GLESNumber_ConstantNumber_Constant.glUniformMatrix3fv(int_VAR,Number_Constant,faljava.util.Scanner_VARe,float[]_VAR,Number_Constant);     }   } ); } 
@Override public void run(){   GLESNumber_ConstantNumber_Constant.glUniformMatrix3fv(location,Number_Constant,faljava.util.Scanner_VARe,matrix,Number_Constant); } 
protected void java.util.Scanner_VARetUniformMatrixNumber_Constantf(final int int_VAR,final float[] float[]_VAR){   runOnDraw(new Runnable(){     @Override public void run(){       GLESNumber_ConstantNumber_Constant.glUniformMatrixNumber_Constantfv(int_VAR,Number_Constant,faljava.util.Scanner_VARe,float[]_VAR,Number_Constant);     }   } ); } 
@Override public void run(){   GLESNumber_ConstantNumber_Constant.glUniformMatrixNumber_Constantfv(location,Number_Constant,faljava.util.Scanner_VARe,matrix,Number_Constant); } 
protected void runOnDraw(final Runnable Runnable_VAR){ java.util.Scanner_VARynchronized (LinkedLijava.util.Scanner_VARt<Runnable>_VAR) {     LinkedLijava.util.Scanner_VARt<Runnable>_VAR.addLajava.util.Scanner_VARt(Runnable_VAR);   } } 
public java.util.Scanner_VARtatic String loadShader(String String_VAR,Context Context_VAR){   try {     Ajava.util.Scanner_VARjava.util.Scanner_VARetManager Ajava.util.Scanner_VARjava.util.Scanner_VARetManager_VAR=Context_VAR.getAjava.util.Scanner_VARjava.util.Scanner_VARetjava.util.Scanner_VAR();     InputStString_VARam InputStream_VAR=Ajava.util.Scanner_VARjava.util.Scanner_VARetManager_VAR.open(String_VAR);     String String_VAR=convertStString_VARamToString(InputStream_VAR);     InputStream_VAR.clojava.util.Scanner_VARe();     String_VARturn String_VAR;   }  catch (  Exception e) {     e.printStackTrace();   }   String_VARturn String_Constant; } 
public java.util.Scanner_VARtatic String convertStString_VARamToString(java.io.InputStString_VARam java.io.InputStString_VARam_VAR){   java.util.Scanner java.util.Scanner_VAR=new java.util.Scanner(java.io.InputStString_VARam_VAR).ujava.util.Scanner_VAReDelimiter("\\A");   String_VARturn java.util.Scanner_VAR.hajava.util.Scanner_VARNext() ? java.util.Scanner_VAR.next() : String_Constant; } 
 public GPUImageFilterGroup(){   this(null); } 
 public GPUImageFilterGroup(List<GPUImageFilter> List<GPUImageFilter>_VAR){   List<GPUImageFilter>_VAR=List<GPUImageFilter>_VAR;   if (List<GPUImageFilter>_VAR == null) {     List<GPUImageFilter>_VAR=new ArrayList<GPUImageFilter>();   }  else {     updateMergedFilters();   }   FloatBuffer_VAR=ByteBuffer.allocateDirect(CUBE.length * Number_Constant).order(ByteOrder.nativeOrder()).asFloatBuffer();   FloatBuffer_VAR.put(CUBE).position(Number_Constant);   FloatBuffer_VAR=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * Number_Constant).order(ByteOrder.nativeOrder()).asFloatBuffer();   FloatBuffer_VAR.put(TEXTURE_NO_ROTATION).position(Number_Constant);   float[] float[]_VAR=TextureRotationUtil.getRotation(Rotation.NORMAL,Boolean_Constant,Boolean_Constant);   FloatBuffer_VAR=ByteBuffer.allocateDirect(float[]_VAR.length * Number_Constant).order(ByteOrder.nativeOrder()).asFloatBuffer();   FloatBuffer_VAR.put(float[]_VAR).position(Number_Constant); } 
public void addFilter(GPUImageFilter GPUImageFilter_VAR){   if (GPUImageFilter_VAR == null) {     return;   }   List<GPUImageFilter>_VAR.add(GPUImageFilter_VAR);   updateMergedFilters(); } 
@Override public void onInit(){   super.onInit();   for (  GPUImageFilter GPUImageFilter_VAR : List<GPUImageFilter>_VAR) {     GPUImageFilter_VAR.init();   } } 
@Override public void onDestroy(){   destroyFramebuffers();   for (  GPUImageFilter GPUImageFilter_VAR : List<GPUImageFilter>_VAR) {     GPUImageFilter_VAR.destroy();   }   super.onDestroy(); } 
private void destroyFramebuffers(){   if (int[]_VAR != null) {     GLESNumber_ConstantNumber_Constant.glDeleteTextures(int[]_VAR.length,int[]_VAR,Number_Constant);     int[]_VAR=null;   }   if (int[]_VAR != null) {     GLESNumber_ConstantNumber_Constant.glDeleteFramebuffers(int[]_VAR.length,int[]_VAR,Number_Constant);     int[]_VAR=null;   } } 
@Override public void onOutputSizeChanged(final int int_VAR,final int int_VAR){   super.onOutputSizeChanged(int_VAR,int_VAR);   if (int[]_VAR != null) {     destroyFramebuffers();   }   int int_VAR=List<GPUImageFilter>_VAR.int_VAR();   for (int i=Number_Constant; i < int_VAR; i++) {     List<GPUImageFilter>_VAR.get(i).onOutputSizeChanged(int_VAR,int_VAR);   }   if (List<GPUImageFilter>_VAR != null && List<GPUImageFilter>_VAR.int_VAR() > Number_Constant) {     int_VAR=List<GPUImageFilter>_VAR.int_VAR();     int[]_VAR=new int[int_VAR - Number_Constant];     int[]_VAR=new int[int_VAR - Number_Constant];     for (int i=Number_Constant; i < int_VAR - Number_Constant; i++) {       GLESNumber_ConstantNumber_Constant.glGenFramebuffers(Number_Constant,int[]_VAR,i);       GLESNumber_ConstantNumber_Constant.glGenTextures(Number_Constant,int[]_VAR,i);       GLESNumber_ConstantNumber_Constant.glBindTexture(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,int[]_VAR[i]);       GLESNumber_ConstantNumber_Constant.glTexImageNumber_ConstantD(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,Number_Constant,GLESNumber_ConstantNumber_Constant.GL_RGBA,int_VAR,int_VAR,Number_Constant,GLESNumber_ConstantNumber_Constant.GL_RGBA,GLESNumber_ConstantNumber_Constant.GL_UNSIGNED_BYTE,null);       GLESNumber_ConstantNumber_Constant.glTexParameterf(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,GLESNumber_ConstantNumber_Constant.GL_TEXTURE_MAG_FILTER,GLESNumber_ConstantNumber_Constant.GL_LINEAR);       GLESNumber_ConstantNumber_Constant.glTexParameterf(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,GLESNumber_ConstantNumber_Constant.GL_TEXTURE_MIN_FILTER,GLESNumber_ConstantNumber_Constant.GL_LINEAR);       GLESNumber_ConstantNumber_Constant.glTexParameterf(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,GLESNumber_ConstantNumber_Constant.GL_TEXTURE_WRAP_S,GLESNumber_ConstantNumber_Constant.GL_CLAMP_TO_EDGE);       GLESNumber_ConstantNumber_Constant.glTexParameterf(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,GLESNumber_ConstantNumber_Constant.GL_TEXTURE_WRAP_T,GLESNumber_ConstantNumber_Constant.GL_CLAMP_TO_EDGE);       GLESNumber_ConstantNumber_Constant.glBindFramebuffer(GLESNumber_ConstantNumber_Constant.GL_FRAMEBUFFER,int[]_VAR[i]);       GLESNumber_ConstantNumber_Constant.glFramebufferTextureNumber_ConstantD(GLESNumber_ConstantNumber_Constant.GL_FRAMEBUFFER,GLESNumber_ConstantNumber_Constant.GL_COLOR_ATTACHMENTNumber_Constant,GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,int[]_VAR[i],Number_Constant);       GLESNumber_ConstantNumber_Constant.glBindTexture(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,Number_Constant);       GLESNumber_ConstantNumber_Constant.glBindFramebuffer(GLESNumber_ConstantNumber_Constant.GL_FRAMEBUFFER,Number_Constant);     }   } } 
@SuppressLint(String_Constant) @Override public void onDraw(final int int_VAR,final FloatBuffer FloatBuffer_VAR,final FloatBuffer FloatBuffer_VAR){   runPendingOnDrawTasks();   if (!isInitialized() || int[]_VAR == null || int[]_VAR == null) {     return;   }   if (List<GPUImageFilter>_VAR != null) {     int int_VAR=List<GPUImageFilter>_VAR.int_VAR();     int int_VAR=int_VAR;     for (int i=Number_Constant; i < int_VAR; i++) {       GPUImageFilter GPUImageFilter_VAR=List<GPUImageFilter>_VAR.get(i);       boolean boolean_VAR=i < int_VAR - Number_Constant;       if (boolean_VAR) {         GLESNumber_ConstantNumber_Constant.glBindFramebuffer(GLESNumber_ConstantNumber_Constant.GL_FRAMEBUFFER,int[]_VAR[i]);         GLESNumber_ConstantNumber_Constant.glClearColor(Number_Constant,Number_Constant,Number_Constant,Number_Constant);       }       if (i == Number_Constant) {         GPUImageFilter_VAR.onDraw(int_VAR,FloatBuffer_VAR,FloatBuffer_VAR);       }  else       if (i == int_VAR - Number_Constant) {         GPUImageFilter_VAR.onDraw(int_VAR,FloatBuffer_VAR,(int_VAR % Number_Constant == Number_Constant) ? FloatBuffer_VAR : FloatBuffer_VAR);       }  else {         GPUImageFilter_VAR.onDraw(int_VAR,FloatBuffer_VAR,FloatBuffer_VAR);       }       if (boolean_VAR) {         GLESNumber_ConstantNumber_Constant.glBindFramebuffer(GLESNumber_ConstantNumber_Constant.GL_FRAMEBUFFER,Number_Constant);         int_VAR=int[]_VAR[i];       }     }   } } 
 public List<GPUImageFilter> getFilters(){   return List<GPUImageFilter>_VAR; } 
public List<GPUImageFilter> getMergedFilters(){   return List<GPUImageFilter>_VAR; } 
public void updateMergedFilters(){   if (List<GPUImageFilter>_VAR == null) {     return;   }   if (List<GPUImageFilter>_VAR == null) {     List<GPUImageFilter>_VAR=new ArrayList<GPUImageFilter>();   }  else {     List<GPUImageFilter>_VAR.clear();   }   List<GPUImageFilter> List<GPUImageFilter>_VAR;   for (  GPUImageFilter GPUImageFilter_VAR : List<GPUImageFilter>_VAR) {     if (GPUImageFilter_VAR instanceof GPUImageFilterGroup) {       ((GPUImageFilterGroup)GPUImageFilter_VAR).updateMergedFilters();       List<GPUImageFilter>_VAR=((GPUImageFilterGroup)GPUImageFilter_VAR).getMergedFilters();       if (List<GPUImageFilter>_VAR == null || List<GPUImageFilter>_VAR.isEmpty())       continue;       List<GPUImageFilter>_VAR.addAll(List<GPUImageFilter>_VAR);       continue;     }     List<GPUImageFilter>_VAR.add(GPUImageFilter_VAR);   } } 
public GPUImageGammaFilter(){   this(Number_Constant); } 
public GPUImageGammaFilter(final float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setGamma(float_VAR); } 
public void setGamma(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImageGaussianBlurFilter(){   this(Number_Constant); } 
public GPUImageGaussianBlurFilter(float float_VAR){   super(String_VAR,String_VAR,String_VAR,String_VAR);   float_VAR=float_VAR; } 
@Override public float getVerticalTexelOffsetRatio(){   return float_VAR; } 
@Override public float getHorizontalTexelOffsetRatio(){   return float_VAR; } 
 public void setBlurSize(float float_VAR){   float_VAR=float_VAR;   runOnDraw(new Runnable(){     @Override public void run(){       initTexelOffsets();     }   } ); } 
@Override public void run(){   initTexelOffsets(); } 
public GPUImageGlassSphereFilter(){   this(new PointF(Number_Constant,Number_Constant),Number_Constant,Number_Constant); } 
public GPUImageGlassSphereFilter(PointF PointF_VAR,float float_VAR,float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   PointF_VAR=PointF_VAR;   float_VAR=float_VAR;   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   PointF_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setRadius(float_VAR);   setCenter(PointF_VAR);   setRefractiveIndex(float_VAR); } 
@Override public void onOutputSizeChanged(int int_VAR,int int_VAR){   float_VAR=(float)int_VAR / int_VAR;   setAspectRatio(float_VAR);   super.onOutputSizeChanged(int_VAR,int_VAR); } 
private void setAspectRatio(float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public void setRefractiveIndex(float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
public void setCenter(PointF PointF_VAR){   PointF_VAR=PointF_VAR;   setPoint(PointF_VARLocation,PointF_VAR); } 
public void setRadius(float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImageGrayscaleFilter(){   super(NO_FILTER_VERTEX_SHADER,String_VAR); } 
public GPUImageHalftoneFilter(){   this(Number_Constant); } 
public GPUImageHalftoneFilter(float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   setFractionalWidthOfAPixel(float_VAR); } 
@Override public void onOutputSizeChanged(final int int_VAR,final int int_VAR){   super.onOutputSizeChanged(int_VAR,int_VAR);   setAspectRatio((float)int_VAR / (float)int_VAR); } 
public void setFractionalWidthOfAPixel(final float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
public void setAspectRatio(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImageHardLightBlendFilter(){   super(String_VAR); } 
public GPUImageHazeFilter(){   this(Number_Constant,Number_Constant); } 
public GPUImageHazeFilter(float float_VAR,float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR;   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setDistance(float_VAR);   setSlope(float_VAR); } 
 public void setDistance(float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
 public void setSlope(float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
public GPUImageHighlightShadowFilter(){   this(Number_Constant,Number_Constant); } 
public GPUImageHighlightShadowFilter(final float float_VAR,final float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR;   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setHighlights(float_VAR);   setShadows(float_VAR); } 
public void setHighlights(final float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
public void setShadows(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImageHueBlendFilter(){   super(String_VAR); } 
public GPUImageHueFilter(){   this(Number_Constant); } 
public GPUImageHueFilter(final float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),"float_VAR"); } 
@Override public void onInitialized(){   super.onInitialized();   setHue(float_VAR); } 
public void setHue(final float float_VAR){   float_VAR=float_VAR;   float float_VARAdjust=(float_VAR % Number_Constant) * (float)Math.PI / Number_Constant;   setFloat(int_VAR,float_VARAdjust); } 
public GPUImageKuwaharaFilter(){   this(Number_Constant); } 
public GPUImageKuwaharaFilter(int int_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   int_VAR=int_VAR; } 
@Override public void onInit(){   super.onInit();   int_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setRadius(int_VAR); } 
 public void setRadius(final int int_VAR){   int_VAR=int_VAR;   setInteger(int_VARLocation,int_VAR); } 
public GPUImageLaplacianFilter(){   this(new float[]{Number_Constant,Number_Constant,Number_Constant,Number_Constant,-Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant}); } 
private GPUImageLaplacianFilter(final float[] float[]_VAR){   super(String_VAR);   float[]_VAR=float[]_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   setConvolutionKernel(float[]_VAR); } 
private void setConvolutionKernel(final float[] float[]_VAR){   float[]_VAR=float[]_VAR;   setUniformMatrix3f(int_VAR,float[]_VAR); } 
public GPUImageLevelsFilter(){   this(new float[]{Number_Constant,Number_Constant,Number_Constant},new float[]{Number_Constant,Number_Constant,Number_Constant},new float[]{Number_Constant,Number_Constant,Number_Constant},new float[]{Number_Constant,Number_Constant,Number_Constant},new float[]{Number_Constant,Number_Constant,Number_Constant}); } 
private GPUImageLevelsFilter(final float[] float[]_VAR,final float[] float[]_VAR,final float[] float[]_VAR,final float[] float[]_VAROUt,final float[] float[]_VAROut){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float[]_VAR=float[]_VAR;   float[]_VAR=float[]_VAR;   float[]_VAR=float[]_VAR;   float[]_VAROutput=float[]_VAROUt;   float[]_VAROutput=float[]_VAROut;   setMin(Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant); } 
@Override public void onInit(){   super.onInit();   float[]_VARLocation=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(getProgram(),String_Constant);   float[]_VARLocation=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(getProgram(),String_Constant);   float[]_VAROutputLocation=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(getProgram(),String_Constant);   float[]_VAROutputLocation=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   updateUniforms(); } 
public void updateUniforms(){   setFloatVec3(float[]_VARLocation,float[]_VAR);   setFloatVec3(int_VAR,float[]_VAR);   setFloatVec3(float[]_VARLocation,float[]_VAR);   setFloatVec3(float[]_VAROutputLocation,float[]_VAROutput);   setFloatVec3(float[]_VAROutputLocation,float[]_VAROutput); } 
public void setMin(float float_VAR,float float_VAR,float float_VAR,float float_VAROut,float float_VAROut){   setRedMin(float_VAR,float_VAR,float_VAR,float_VAROut,float_VAROut);   setGreenMin(float_VAR,float_VAR,float_VAR,float_VAROut,float_VAROut);   setBlueMin(float_VAR,float_VAR,float_VAR,float_VAROut,float_VAROut); } 
public void setMin(float float_VAR,float float_VAR,float float_VAR){   setMin(float_VAR,float_VAR,float_VAR,Number_Constant,Number_Constant); } 
public void setRedMin(float float_VAR,float float_VAR,float float_VAR,float float_VAROut,float float_VAROut){   float[]_VAR[Number_Constant]=float_VAR;   float[]_VAR[Number_Constant]=float_VAR;   float[]_VAR[Number_Constant]=float_VAR;   float[]_VAROutput[Number_Constant]=float_VAROut;   float[]_VAROutput[Number_Constant]=float_VAROut;   updateUniforms(); } 
public void setRedMin(float float_VAR,float float_VAR,float float_VAR){   setRedMin(float_VAR,float_VAR,float_VAR,Number_Constant,Number_Constant); } 
public void setGreenMin(float float_VAR,float float_VAR,float float_VAR,float float_VAROut,float float_VAROut){   float[]_VAR[Number_Constant]=float_VAR;   float[]_VAR[Number_Constant]=float_VAR;   float[]_VAR[Number_Constant]=float_VAR;   float[]_VAROutput[Number_Constant]=float_VAROut;   float[]_VAROutput[Number_Constant]=float_VAROut;   updateUniforms(); } 
public void setGreenMin(float float_VAR,float float_VAR,float float_VAR){   setGreenMin(float_VAR,float_VAR,float_VAR,Number_Constant,Number_Constant); } 
public void setBlueMin(float float_VAR,float float_VAR,float float_VAR,float float_VAROut,float float_VAROut){   float[]_VAR[Number_Constant]=float_VAR;   float[]_VAR[Number_Constant]=float_VAR;   float[]_VAR[Number_Constant]=float_VAR;   float[]_VAROutput[Number_Constant]=float_VAROut;   float[]_VAROutput[Number_Constant]=float_VAROut;   updateUniforms(); } 
public void setBlueMin(float float_VAR,float float_VAR,float float_VAR){   setBlueMin(float_VAR,float_VAR,float_VAR,Number_Constant,Number_Constant); } 
public GPUImageLightenBlendFilter(){   super(String_VAR); } 
public GPUImageLinearBurnBlendFilter(){   super(String_VAR); } 
public GPUImageLookupFilter(){   this(Number_Constant); } 
public GPUImageLookupFilter(final float float_VAR){   super(String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setIntensity(float_VAR); } 
public void setIntensity(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImageLuminosityBlendFilter(){   super(String_VAR); } 
public GPUImageMixBlendFilter(String String_VAR){   this(String_VAR,Number_Constant); } 
public GPUImageMixBlendFilter(String String_VAR,float float_VAR){   super(String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setMix(float_VAR); } 
 public void setMix(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImageMonochromeFilter(){   this(Number_Constant,new float[]{Number_Constant,Number_Constant,Number_Constant,Number_Constant}); } 
public GPUImageMonochromeFilter(final float float_VAR,final float[] float[]_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR;   float[]_VAR=float[]_VAR; } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setIntensity(Number_Constant);   setColor(new float[]{Number_Constant,Number_Constant,Number_Constant,Number_Constant}); } 
public void setIntensity(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public void setColor(final float[] float[]_VAR){   float[]_VAR=float[]_VAR;   setColorRed(float[]_VAR[Number_Constant],float[]_VAR[Number_Constant],float[]_VAR[Number_Constant]); } 
public void setColorRed(final float float_VAR,final float float_VAR,final float float_VAR){   setFloatVec3(int_VAR,new float[]{float_VAR,float_VAR,float_VAR}); } 
public GPUImageMultiplyBlendFilter(){   super(String_VAR); } 
public static native void YUVtoRBGA(byte[] byte[]_VAR,int int_VAR,int int_VAR,int[] int[]_VAR); 
public static native void YUVtoARBG(byte[] byte[]_VAR,int int_VAR,int int_VAR,int[] int[]_VAR); 
public GPUImageNonMaximumSuppressionFilter(){   super(String_VAR); } 
public GPUImageNormalBlendFilter(){   super(String_VAR); } 
public GPUImageOpacityFilter(){   this(Number_Constant); } 
public GPUImageOpacityFilter(final float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setOpacity(float_VAR); } 
public void setOpacity(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImageOverlayBlendFilter(){   super(String_VAR); } 
public GPUImagePixelationFilter(){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=Number_Constant; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   setPixel(float_VAR); } 
@Override public void onOutputSizeChanged(final int int_VAR,final int int_VAR){   super.onOutputSizeChanged(int_VAR,int_VAR);   setFloat(int_VAR,Number_Constant / int_VAR);   setFloat(int_VAR,Number_Constant / int_VAR); } 
public void setPixel(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImagePosterizeFilter(){   this(Number_Constant); } 
public GPUImagePosterizeFilter(final int int_VAR){   super(GPUImageFilter.NO_FILTER_VERTEX_SHADER,String_VAR);   int_VAR=int_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   setColorLevels(int_VAR); } 
public void setColorLevels(final int int_VAR){   int_VAR=int_VAR;   setFloat(int_VAR,int_VAR); } 
public GPUImageRenderer(final GPUImageFilter GPUImageFilter_VAR){   GPUImageFilter_VAR=GPUImageFilter_VAR;   Queue<Runnable>_VAR=new LinkedList<Runnable>();   Queue<Runnable>_VAR=new LinkedList<Runnable>();   FloatBuffer_VAR=ByteBuffer.allocateDirect(float_VAR.length * Number_Constant).order(ByteOrder.nativeOrder()).asFloatBuffer();   FloatBuffer_VAR.put(float_VAR).position(Number_Constant);   FloatBuffer_VAR=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * Number_Constant).order(ByteOrder.nativeOrder()).asFloatBuffer();   setRotation(Rotation.NORMAL,Boolean_Constant,Boolean_Constant); } 
@Override public void onSurfaceCreated(final GLNumber_ConstantNumber_Constant GLNumber_ConstantNumber_Constant_VAR,final EGLConfig EGLConfig_VAR){   GLESNumber_ConstantNumber_Constant.glClearColor(float_VAR,float_VAR,float_VAR,Number_Constant);   GLESNumber_ConstantNumber_Constant.glDisable(GLESNumber_ConstantNumber_Constant.GL_DEPTH_TEST);   GPUImageFilter_VAR.init(); } 
@Override public void onSurfaceChanged(final GLNumber_ConstantNumber_Constant GLNumber_ConstantNumber_Constant_VAR,final int int_VAR,final int int_VAR){   int_VAR=int_VAR;   int_VAR=int_VAR;   GLESNumber_ConstantNumber_Constant.GLNumber_ConstantNumber_Constant_VARViewport(Number_Constant,Number_Constant,int_VAR,int_VAR);   GLESNumber_ConstantNumber_Constant.GLNumber_ConstantNumber_Constant_VARUseProgram(GPUImageFilter_VAR.getProgram());   GPUImageFilter_VAR.onOutputSizeChanged(int_VAR,int_VAR);   adjustImageScaling(); synchronized (Object_VAR) {     Object_VAR.notifyAll();   } } 
@Override public void onDrawFrame(final GLNumber_ConstantNumber_Constant GLNumber_ConstantNumber_Constant_VAR){   GLESNumber_ConstantNumber_Constant.GLNumber_ConstantNumber_Constant_VARClear(GLESNumber_ConstantNumber_Constant.GL_COLOR_BUFFER_BIT | GLESNumber_ConstantNumber_Constant.GL_DEPTH_BUFFER_BIT);   runAll(Queue<Runnable>_VAR);   GPUImageFilter_VAR.onDraw(int_VAR,FloatBuffer_VAR,FloatBuffer_VAR);   runAll(Queue<Runnable>_VAR);   if (SurfaceTexture_VAR != null) {     SurfaceTexture_VAR.updateTexImage();   } } 
 public void setBackgroundColor(float float_VAR,float float_VAR,float float_VAR){   float_VAR=float_VAR;   float_VAR=float_VAR;   float_VAR=float_VAR; } 
private void runAll(Queue<Runnable> Queue<Runnable>_VAR){ synchronized (Queue<Runnable>_VAR) {     while (!Queue<Runnable>_VAR.isEmpty()) {       Queue<Runnable>_VAR.poll().run();     }   } } 
@Override public void onPreviewFrame(final byte[] byte[]_VAR,final Camera Camera_VAR){   final Size Size_VAR=Camera_VAR.getParameters().getPreviewSize();   if (IntBuffer_VAR == null) {     IntBuffer_VAR=IntBuffer.allocate(Size_VAR.width * Size_VAR.height);   }   if (Queue<Runnable>_VAR.isEmpty()) {     runOnDraw(new Runnable(){       @Override public void run(){         GPUImageNativeLibrary.YUVtoRBGA(byte[]_VAR,Size_VAR.width,Size_VAR.height,IntBuffer_VAR.array());         int_VAR=OpenGlUtils.loadTexture(IntBuffer_VAR,Size_VAR,int_VAR);         Camera_VAR.addCallbackBuffer(byte[]_VAR);         if (int_VAR != Size_VAR.width) {           int_VAR=Size_VAR.width;           int_VAR=Size_VAR.height;           adjustImageScaling();         }       }     } );   } } 
@Override public void run(){   GPUImageNativeLibrary.YUVtoRBGA(data,Size_VAR.width,Size_VAR.height,IntBuffer_VAR.array());   int_VAR=OpenGlUtils.loadTexture(IntBuffer_VAR,Size_VAR,int_VAR);   camera.addCallbackBuffer(data);   if (int_VAR != Size_VAR.width) {     int_VAR=Size_VAR.width;     int_VAR=Size_VAR.height;     adjustImageScaling();   } } 
public void setUpSurfaceTexture(final Camera Camera_VAR){   runOnDraw(new Runnable(){     @Override public void run(){       int[] int[]_VAR=new int[Number_Constant];       GLESNumber_ConstantNumber_Constant.glGenTextures(Number_Constant,int[]_VAR,Number_Constant);       SurfaceTexture_VAR=new SurfaceTexture(int[]_VAR[Number_Constant]);       try {         Camera_VAR.setPreviewTexture(SurfaceTexture_VAR);         Camera_VAR.setPreviewCallback(GPUImageRenderer.this);         Camera_VAR.startPreview();       }  catch (      IOException e) {         e.printStackTrace();       }     }   } ); } 
@Override public void run(){   int[] int[]_VAR=new int[Number_Constant];   GLESNumber_ConstantNumber_Constant.glGenTextures(Number_Constant,int[]_VAR,Number_Constant);   SurfaceTexture_VAR=new SurfaceTexture(int[]_VAR[Number_Constant]);   try {     camera.setPreviewTexture(SurfaceTexture_VAR);     camera.setPreviewCallback(GPUImageRenderer.this);     camera.startPreview();   }  catch (  IOException e) {     e.printStackTrace();   } } 
public void setFilter(final GPUImageFilter GPUImageFilter_VAR){   runOnDraw(new Runnable(){     @Override public void run(){       final GPUImageFilter GPUImageFilter_VAR=GPUImageFilter_VAR;       GPUImageFilter_VAR=GPUImageFilter_VAR;       if (GPUImageFilter_VAR != null) {         GPUImageFilter_VAR.destroy();       }       GPUImageFilter_VAR.init();       GLESNumber_ConstantNumber_Constant.glUseProgram(GPUImageFilter_VAR.getProgram());       GPUImageFilter_VAR.onOutputSizeChanged(int_VAR,int_VAR);     }   } ); } 
@Override public void run(){   final GPUImageFilter GPUImageFilter_VAR=GPUImageFilter_VAR;   GPUImageFilter_VAR=filter;   if (GPUImageFilter_VAR != null) {     GPUImageFilter_VAR.destroy();   }   GPUImageFilter_VAR.init();   GLESNumber_ConstantNumber_Constant.glUseProgram(GPUImageFilter_VAR.getProgram());   GPUImageFilter_VAR.onOutputSizeChanged(int_VAR,int_VAR); } 
public void deleteImage(){   runOnDraw(new Runnable(){     @Override public void run(){       GLESNumber_ConstantNumber_Constant.glDeleteTextures(Number_Constant,new int[]{int_VAR},Number_Constant);       int_VAR=int_VAR;     }   } ); } 
@Override public void run(){   GLESNumber_ConstantNumber_Constant.glDeleteTextures(Number_Constant,new int[]{int_VAR},Number_Constant);   int_VAR=int_VAR; } 
public void setImageBitmap(final Bitmap Bitmap_VAR){   setImageBitmap(Bitmap_VAR,Boolean_Constant); } 
public void setImageBitmap(final Bitmap Bitmap_VAR,final boolean boolean_VAR){   if (Bitmap_VAR == null) {     return;   }   runOnDraw(new Runnable(){     @Override public void run(){       Bitmap Bitmap_VAR=null;       if (Bitmap_VAR.getWidth() % Number_Constant == Number_Constant) {         Bitmap_VAR=Bitmap.createBitmap(Bitmap_VAR.getWidth() + Number_Constant,Bitmap_VAR.getHeight(),Bitmap.Config.ARGB_8888);         Canvas Canvas_VAR=new Canvas(Bitmap_VAR);         Canvas_VAR.drawARGB(Number_Constant,Number_Constant,Number_Constant,Number_Constant);         Canvas_VAR.drawBitmap(Bitmap_VAR,Number_Constant,Number_Constant,null);         int_VAR=Number_Constant;       }  else {         int_VAR=Number_Constant;       }       int_VAR=OpenGlUtils.loadTexture(Bitmap_VAR != null ? Bitmap_VAR : Bitmap_VAR,int_VAR,boolean_VAR);       if (Bitmap_VAR != null) {         Bitmap_VAR.boolean_VAR();       }       int_VAR=Bitmap_VAR.getWidth();       int_VAR=Bitmap_VAR.getHeight();       adjustImageScaling();     }   } ); } 
@Override public void run(){   Bitmap Bitmap_VAR=null;   if (bitmap.getWidth() % Number_Constant == Number_Constant) {     Bitmap_VAR=Bitmap.createBitmap(bitmap.getWidth() + Number_Constant,bitmap.getHeight(),Bitmap.Config.ARGB_8888);     Canvas Canvas_VAR=new Canvas(Bitmap_VAR);     Canvas_VAR.drawARGB(Number_Constant,Number_Constant,Number_Constant,Number_Constant);     Canvas_VAR.drawBitmap(bitmap,Number_Constant,Number_Constant,null);     int_VAR=Number_Constant;   }  else {     int_VAR=Number_Constant;   }   int_VAR=OpenGlUtils.loadTexture(Bitmap_VAR != null ? Bitmap_VAR : bitmap,int_VAR,recycle);   if (Bitmap_VAR != null) {     Bitmap_VAR.recycle();   }   int_VAR=bitmap.getWidth();   int_VAR=bitmap.getHeight();   adjustImageScaling(); } 
public void setScaleType(GPUImage.ScaleType GPUImage.ScaleType_VAR){   GPUImage.ScaleType_VAR=GPUImage.ScaleType_VAR; } 
protected int getFrameWidth(){   return int_VAR; } 
protected int getFrameHeight(){   return int_VAR; } 
private void adjustImageScaling(){   float float_VAR=int_VAR;   float float_VAR=int_VAR;   if (Rotation_VAR == Rotation.ROTATION_Number_ConstantNumber_ConstantNumber_Constant || Rotation_VAR == Rotation.ROTATION_9Number_Constant) {     float_VAR=int_VAR;     float_VAR=int_VAR;   }   float float_VAR=float_VAR / int_VAR;   float float_VAR=float_VAR / int_VAR;   float float_VAR=Math.max(float_VAR,float_VAR);   int int_VAR=Math.round(int_VAR * float_VAR);   int int_VAR=Math.round(int_VAR * float_VAR);   float float_VAR=int_VAR / float_VAR;   float float_VAR=int_VAR / float_VAR;   float[] float[]_VAR=float_VAR;   float[] float[]_VAR=TextureRotationUtil.getRotation(Rotation_VAR,boolean_VAR,boolean_VAR);   if (GPUImage.ScaleType_VAR == GPUImage.ScaleType.CENTER_CROP) {     float float_VAR=(Number_Constant - Number_Constant / float_VAR) / Number_Constant;     float float_VAR=(Number_Constant - Number_Constant / float_VAR) / Number_Constant;     float[]_VAR=new float[]{addDistance(float[]_VAR[Number_Constant],float_VAR),addDistance(float[]_VAR[Number_Constant],float_VAR),addDistance(float[]_VAR[Number_Constant],float_VAR),addDistance(float[]_VAR[Number_Constant],float_VAR),addDistance(float[]_VAR[Number_Constant],float_VAR),addDistance(float[]_VAR[Number_Constant],float_VAR),addDistance(float[]_VAR[Number_Constant],float_VAR),addDistance(float[]_VAR[Number_Constant],float_VAR)};   }  else {     float[]_VAR=new float[]{float_VAR[Number_Constant] / float_VAR,float_VAR[Number_Constant] / float_VAR,float_VAR[Number_Constant] / float_VAR,float_VAR[Number_Constant] / float_VAR,float_VAR[Number_Constant] / float_VAR,float_VAR[Number_Constant] / float_VAR,float_VAR[Number_Constant] / float_VAR,float_VAR[Number_Constant] / float_VAR};   }   FloatBuffer_VAR.clear();   FloatBuffer_VAR.put(float[]_VAR).position(Number_Constant);   FloatBuffer_VAR.clear();   FloatBuffer_VAR.put(float[]_VAR).position(Number_Constant); } 
private float addDistance(float float_VAR,float float_VAR){   return float_VAR == Number_Constant ? float_VAR : Number_Constant - float_VAR; } 
public void setRotationCamera(final Rotation Rotation_VAR,final boolean boolean_VAR,final boolean boolean_VAR){   setRotation(Rotation_VAR,boolean_VAR,boolean_VAR); } 
public void setRotation(final Rotation Rotation_VAR){   Rotation_VAR=Rotation_VAR;   adjustImageScaling(); } 
public void setRotation(final Rotation Rotation_VAR,final boolean boolean_VAR,final boolean boolean_VAR){   boolean_VAR=boolean_VAR;   boolean_VAR=boolean_VAR;   setRotation(Rotation_VAR); } 
public Rotation getRotation(){   return Rotation_VAR; } 
public boolean isFlippedHorizontally(){   return boolean_VAR; } 
public boolean isFlippedVertically(){   return boolean_VAR; } 
protected void runOnDraw(final Runnable Runnable_VAR){ synchronized (Queue<Runnable>_VAR) {     Queue<Runnable>_VAR.add(Runnable_VAR);   } } 
protected void runOnDrawEnd(final Runnable Runnable_VAR){ synchronized (Queue<Runnable>_VAR) {     Queue<Runnable>_VAR.add(Runnable_VAR);   } } 
public GPUImageRGBDilationFilter(){   this(Number_Constant); } 
 public GPUImageRGBDilationFilter(int int_VAR){   this(getVertexShader(int_VAR),getFragmentShader(int_VAR)); } 
private GPUImageRGBDilationFilter(String String_VAR,String String_VAR){   super(String_VAR,String_VAR,String_VAR,String_VAR); } 
private static String getVertexShader(int int_VAR){ switch (int_VAR) { case Number_Constant: case Number_Constant:     return String_VAR; case Number_Constant:   return String_VAR; case Number_Constant: return String_VAR; default : return String_VAR; } } 
private static String getFragmentShader(int int_VAR){ switch (int_VAR) { case Number_Constant: case Number_Constant:     return String_VAR; case Number_Constant:   return String_VAR; case Number_Constant: return String_VAR; default : return String_VAR; } } 
public GPUImageRGBFilter(){   this(Number_Constant,Number_Constant,Number_Constant); } 
public GPUImageRGBFilter(final float float_VAR,final float float_VAR,final float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR;   float_VAR=float_VAR;   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   boolean_VAR=Boolean_Constant;   setRed(float_VAR);   setGreen(float_VAR);   setBlue(float_VAR); } 
public void setRed(final float float_VAR){   float_VAR=float_VAR;   if (boolean_VAR) {     setFloat(float_VARLocation,float_VAR);   } } 
public void setGreen(final float float_VAR){   float_VAR=float_VAR;   if (boolean_VAR) {     setFloat(float_VARLocation,float_VAR);   } } 
public void setBlue(final float float_VAR){   float_VAR=float_VAR;   if (boolean_VAR) {     setFloat(int_VAR,float_VAR);   } } 
public GPUImageSaturationBlendFilter(){   super(String_VAR); } 
public GPUImageSaturationFilter(){   this(Number_Constant); } 
public GPUImageSaturationFilter(final float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setSaturation(float_VAR); } 
public void setSaturation(final float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
public GPUImageScreenBlendFilter(){   super(String_VAR); } 
public GPUImageSepiaFilter(){   this(Number_Constant); } 
public GPUImageSepiaFilter(final float float_VAR){   super(float_VAR,new float[]{Number_Constant,Number_Constant,Number_Constant,0.Number_Constant,0.299Number_Constant,0.587Number_Constant,0.114Number_Constant,0.Number_Constant,Number_Constant,Number_Constant,Number_Constant,0.Number_Constant,Number_Constant,Number_Constant,Number_Constant,Number_Constant}); } 
public GPUImageSharpenFilter(){   this(Number_Constant); } 
public GPUImageSharpenFilter(final float float_VAR){   super(String_VAR,String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   setSharpness(float_VAR); } 
@Override public void onOutputSizeChanged(final int int_VAR,final int int_VAR){   super.onOutputSizeChanged(int_VAR,int_VAR);   setFloat(int_VAR,Number_Constant / int_VAR);   setFloat(int_VAR,Number_Constant / int_VAR); } 
public void setSharpness(final float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
public GPUImageSketchFilter(){   super();   addFilter(new GPUImageGrayscaleFilter());   addFilter(new GPUImage3x3TextureSamplingFilter(String_VAR)); } 
 public GPUImageSmoothToonFilter(){   GPUImageGaussianBlurFilter_VAR=new GPUImageGaussianBlurFilter();   addFilter(GPUImageGaussianBlurFilter_VAR);   GPUImageToonFilter_VAR=new GPUImageToonFilter();   addFilter(GPUImageToonFilter_VAR);   getFilters().add(GPUImageGaussianBlurFilter_VAR);   setBlurSize(Number_Constant);   setThreshold(Number_Constant);   setQuantizationLevels(Number_Constant); } 
 public void setTexelWidth(float float_VAR){   GPUImageToonFilter_VAR.setTexelWidth(float_VAR); } 
public void setTexelHeight(float float_VAR){   GPUImageToonFilter_VAR.setTexelHeight(float_VAR); } 
public void setBlurSize(float float_VAR){   GPUImageGaussianBlurFilter_VAR.setBlurSize(float_VAR); } 
public void setThreshold(float float_VAR){   GPUImageToonFilter_VAR.setThreshold(float_VAR); } 
public void setQuantizationLevels(float float_VAR){   GPUImageToonFilter_VAR.setQuantizationLevels(float_VAR); } 
public GPUImageSobelEdgeDetection(){   super();   addFilter(new GPUImageGrayscaleFilter());   addFilter(new GPUImage3x3TextureSamplingFilter(String_VAR)); } 
public void setLineSize(final float float_VAR){   ((GPUImage3x3TextureSamplingFilter)getFilters().get(Number_Constant)).setLineSize(float_VAR); } 
public GPUImageSobelThresholdFilter(){   this(Number_Constant); } 
public GPUImageSobelThresholdFilter(float float_VAR){   super(String_VAR);   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setThreshold(float_VAR); } 
public void setThreshold(final float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
public GPUImageSoftLightBlendFilter(){   super(String_VAR); } 
public GPUImageSourceOverBlendFilter(){   super(String_VAR); } 
public GPUImageSphereRefractionFilter(){   this(new PointF(Number_Constant,Number_Constant),Number_Constant,Number_Constant); } 
public GPUImageSphereRefractionFilter(PointF PointF_VAR,float float_VAR,float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   PointF_VAR=PointF_VAR;   float_VAR=float_VAR;   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   PointF_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setRadius(float_VAR);   setCenter(PointF_VAR);   setRefractiveIndex(float_VAR); } 
@Override public void onOutputSizeChanged(int int_VAR,int int_VAR){   float_VAR=(float)int_VAR / int_VAR;   setAspectRatio(float_VAR);   super.onOutputSizeChanged(int_VAR,int_VAR); } 
private void setAspectRatio(float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
 public void setRefractiveIndex(float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
 public void setCenter(PointF PointF_VAR){   PointF_VAR=PointF_VAR;   setPoint(PointF_VARLocation,PointF_VAR); } 
 public void setRadius(float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImageSubtractBlendFilter(){   super(String_VAR); } 
public GPUImageSwirlFilter(){   this(Number_Constant,Number_Constant,new PointF(Number_Constant,Number_Constant)); } 
public GPUImageSwirlFilter(float float_VAR,float float_VAR,PointF PointF_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR;   float_VAR=float_VAR;   PointF_VAR=PointF_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   PointF_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setRadius(float_VAR);   setAngle(float_VAR);   setCenter(PointF_VAR); } 
 public void setRadius(float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
 public void setAngle(float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
 public void setCenter(PointF PointF_VAR){   PointF_VAR=PointF_VAR;   setPoint(PointF_VARLocation,PointF_VAR); } 
public GPUImageThresholdEdgeDetection(){   super();   addFilter(new GPUImageGrayscaleFilter());   addFilter(new GPUImageSobelThresholdFilter()); } 
public void setLineSize(final float float_VAR){   ((GPUImage3x3TextureSamplingFilter)getFilters().get(Number_Constant)).setLineSize(float_VAR); } 
public void setThreshold(final float float_VAR){   ((GPUImageSobelThresholdFilter)getFilters().get(Number_Constant)).setThreshold(float_VAR); } 
pudouble_VARlic GPUImdoudouble_VARle_VARgeToindouble_VAR_VAReCurveFildouble_VARer(){   super(NO_FILTER_VERTEX_SHADER,Sdouble_VARriindouble_VAR_VARg_VAR);   Poiindouble_VAR_VARdouble_VARF[] Poiindouble_VAR_VARdouble_VARF[]_VAR=indouble_VAR_VARew Poiindouble_VAR_VARdouble_VARF[]{indouble_VAR_VARew Poiindouble_VAR_VARdouble_VARF(Number_Constant,Number_Constant),indouble_VAR_VARew Poiindouble_VAR_VARdouble_VARF(Number_Constant,Number_Constant),indouble_VAR_VARew Poiindouble_VAR_VARdouble_VARF(Number_Constant,Number_Constant)};   Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VARF[]_VAR;   Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VARF[]_VAR;   Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VARF[]_VAR;   Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VARF[]_VAR; } 
@Override pudouble_VARlic void oindouble_VAR_VARIindouble_VAR_VARidouble_VAR(){   super.oindouble_VAR_VARIindouble_VAR_VARidouble_VAR();   iindouble_VAR_VARdouble_VAR_VAR=GLESNumber_ConstantNumber_Constant.glGedouble_VARUindouble_VAR_VARiformLocdoudouble_VARle_VARdouble_VARioindouble_VAR_VAR(gedouble_VARProgrdoudouble_VARle_VARm(),"double_VARoindouble_VAR_VAReCurveTeshort_VARdouble_VARure");   GLESNumber_ConstantNumber_Constant.glAcdouble_VARiveTeshort_VARdouble_VARure(GLESNumber_ConstantNumber_Constant.GL_TEXTURENumber_Constant);   GLESNumber_ConstantNumber_Constant.glGeindouble_VAR_VARTeshort_VARdouble_VARures(Number_Constant,iindouble_VAR_VARdouble_VAR[]_VAR,Number_Constant);   GLESNumber_ConstantNumber_Constant.glBiindouble_VAR_VARdTeshort_VARdouble_VARure(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,iindouble_VAR_VARdouble_VAR[]_VAR[Number_Constant]);   GLESNumber_ConstantNumber_Constant.glTeshort_VARPdoudouble_VARle_VARrdoudouble_VARle_VARmedouble_VAReri(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,GLESNumber_ConstantNumber_Constant.GL_TEXTURE_MIN_FILTER,GLESNumber_ConstantNumber_Constant.GL_LINEAR);   GLESNumber_ConstantNumber_Constant.glTeshort_VARPdoudouble_VARle_VARrdoudouble_VARle_VARmedouble_VAReri(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,GLESNumber_ConstantNumber_Constant.GL_TEXTURE_MAG_FILTER,GLESNumber_ConstantNumber_Constant.GL_LINEAR);   GLESNumber_ConstantNumber_Constant.glTeshort_VARPdoudouble_VARle_VARrdoudouble_VARle_VARmedouble_VAReri(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,GLESNumber_ConstantNumber_Constant.GL_TEXTURE_WRAP_S,GLESNumber_ConstantNumber_Constant.GL_CLAMP_TO_EDGE);   GLESNumber_ConstantNumber_Constant.glTeshort_VARPdoudouble_VARle_VARrdoudouble_VARle_VARmedouble_VAReri(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,GLESNumber_ConstantNumber_Constant.GL_TEXTURE_WRAP_T,GLESNumber_ConstantNumber_Constant.GL_CLAMP_TO_EDGE); } 
@Override pudouble_VARlic void oindouble_VAR_VARIindouble_VAR_VARidouble_VARidoudouble_VARle_VARlized(){   super.oindouble_VAR_VARIindouble_VAR_VARidouble_VARidoudouble_VARle_VARlized();   sedouble_VARRgdouble_VARComposidouble_VAReCoindouble_VAR_VARdouble_VARrolPoiindouble_VAR_VARdouble_VARs(Poiindouble_VAR_VARdouble_VARF[]_VAR);   sedouble_VARRedCoindouble_VAR_VARdouble_VARrolPoiindouble_VAR_VARdouble_VARs(Poiindouble_VAR_VARdouble_VARF[]_VAR);   sedouble_VARGreeindouble_VAR_VARCoindouble_VAR_VARdouble_VARrolPoiindouble_VAR_VARdouble_VARs(Poiindouble_VAR_VARdouble_VARF[]_VAR);   sedouble_VARBlueCoindouble_VAR_VARdouble_VARrolPoiindouble_VAR_VARdouble_VARs(Poiindouble_VAR_VARdouble_VARF[]_VAR); } 
@Override prodouble_VARecdouble_VARed void oindouble_VAR_VARDrdoudouble_VARle_VARwArrdoudouble_VARle_VARdouble_VARsPre(){   if (iindouble_VAR_VARdouble_VAR[]_VAR[Number_Constant] != Opeindouble_VAR_VARGlUdouble_VARils.NO_TEXTURE) {     GLESNumber_ConstantNumber_Constant.glAcdouble_VARiveTeshort_VARdouble_VARure(GLESNumber_ConstantNumber_Constant.GL_TEXTURENumber_Constant);     GLESNumber_ConstantNumber_Constant.glBiindouble_VAR_VARdTeshort_VARdouble_VARure(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,iindouble_VAR_VARdouble_VAR[]_VAR[Number_Constant]);     GLESNumber_ConstantNumber_Constant.glUindouble_VAR_VARiformNumber_Constanti(iindouble_VAR_VARdouble_VAR_VAR,Number_Constant);   } } 
pudouble_VARlic void sedouble_VARFromCurveFileIindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm(Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm_VAR){   double_VARrdouble_VAR {     iindouble_VAR_VARdouble_VAR iindouble_VAR_VARdouble_VAR_VAR=redoudouble_VARle_VARdSdouble_VARordouble_VAR(Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm_VAR);     iindouble_VAR_VARdouble_VAR iindouble_VAR_VARdouble_VAR_VAR=redoudouble_VARle_VARdSdouble_VARordouble_VAR(Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm_VAR);     Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VARF[]> Poiindouble_VAR_VARdouble_VAR_VARves=indouble_VAR_VARew Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VARF[]>(iindouble_VAR_VARdouble_VAR_VAR);     flodoudouble_VARle_VARdouble_VAR flodoudouble_VARle_VARdouble_VAR_VAR=Number_Constant / Number_Constant;     for (iindouble_VAR_VARdouble_VAR i=Number_Constant; i < iindouble_VAR_VARdouble_VAR_VAR; i++) {       sdouble_VARordouble_VAR sdouble_VARordouble_VAR_VAR=redoudouble_VARle_VARdSdouble_VARordouble_VAR(Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm_VAR);       Poiindouble_VAR_VARdouble_VARF[] Poiindouble_VAR_VARdouble_VARF[]_VAR=indouble_VAR_VARew Poiindouble_VAR_VARdouble_VARF[sdouble_VARordouble_VAR_VAR];       for (iindouble_VAR_VARdouble_VAR j=Number_Constant; j < sdouble_VARordouble_VAR_VAR; j++) {         sdouble_VARordouble_VAR double_VAR=redoudouble_VARle_VARdSdouble_VARordouble_VAR(Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm_VAR);         sdouble_VARordouble_VAR short_VAR=redoudouble_VARle_VARdSdouble_VARordouble_VAR(Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm_VAR);         Poiindouble_VAR_VARdouble_VARF[]_VAR[j]=indouble_VAR_VARew Poiindouble_VAR_VARdouble_VARF(short_VAR * flodoudouble_VARle_VARdouble_VAR_VAR,double_VAR * flodoudouble_VARle_VARdouble_VAR_VAR);       }       Poiindouble_VAR_VARdouble_VAR_VARves.doudouble_VARle_VARdd(Poiindouble_VAR_VARdouble_VARF[]_VAR);     }     Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm_VAR.close();     Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VAR_VARves.gedouble_VAR(Number_Constant);     Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VAR_VARves.gedouble_VAR(Number_Constant);     Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VAR_VARves.gedouble_VAR(Number_Constant);     Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VAR_VARves.gedouble_VAR(Number_Constant);   }  cdoudouble_VARle_VARdouble_VARcdouble_VAR (  IOEshort_VARcepdouble_VARioindouble_VAR_VAR e) {     e.priindouble_VAR_VARdouble_VARSdouble_VARdoudouble_VARle_VARcdouble_VARTrdoudouble_VARle_VARce();   } } 
privdoudouble_VARle_VARdouble_VARe sdouble_VARordouble_VAR redoudouble_VARle_VARdSdouble_VARordouble_VAR(Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm_VAR) double_VARdouble_VARrows IOEshort_VARcepdouble_VARioindouble_VAR_VAR {   redouble_VARurindouble_VAR_VAR (sdouble_VARordouble_VAR)(Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm_VAR.redoudouble_VARle_VARd() << Number_Constant | Iindouble_VAR_VARpudouble_VARSdouble_VARredoudouble_VARle_VARm_VAR.redoudouble_VARle_VARd()); } 
pudouble_VARlic void sedouble_VARRgdouble_VARComposidouble_VAReCoindouble_VAR_VARdouble_VARrolPoiindouble_VAR_VARdouble_VARs(Poiindouble_VAR_VARdouble_VARF[] Poiindouble_VAR_VARdouble_VARF[]_VAR){   Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VARF[]_VAR;   Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR=credoudouble_VARle_VARdouble_VAReSpliindouble_VAR_VAReCurve(Poiindouble_VAR_VARdouble_VARF[]_VAR);   upddoudouble_VARle_VARdouble_VAReToindouble_VAR_VAReCurveTeshort_VARdouble_VARure(); } 
pudouble_VARlic void sedouble_VARRedCoindouble_VAR_VARdouble_VARrolPoiindouble_VAR_VARdouble_VARs(Poiindouble_VAR_VARdouble_VARF[] Poiindouble_VAR_VARdouble_VARF[]_VAR){   Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VARF[]_VAR;   Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR=credoudouble_VARle_VARdouble_VAReSpliindouble_VAR_VAReCurve(Poiindouble_VAR_VARdouble_VARF[]_VAR);   upddoudouble_VARle_VARdouble_VAReToindouble_VAR_VAReCurveTeshort_VARdouble_VARure(); } 
pudouble_VARlic void sedouble_VARGreeindouble_VAR_VARCoindouble_VAR_VARdouble_VARrolPoiindouble_VAR_VARdouble_VARs(Poiindouble_VAR_VARdouble_VARF[] Poiindouble_VAR_VARdouble_VARF[]_VAR){   Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VARF[]_VAR;   mGreeindouble_VAR_VARCurve=credoudouble_VARle_VARdouble_VAReSpliindouble_VAR_VAReCurve(Poiindouble_VAR_VARdouble_VARF[]_VAR);   upddoudouble_VARle_VARdouble_VAReToindouble_VAR_VAReCurveTeshort_VARdouble_VARure(); } 
pudouble_VARlic void sedouble_VARBlueCoindouble_VAR_VARdouble_VARrolPoiindouble_VAR_VARdouble_VARs(Poiindouble_VAR_VARdouble_VARF[] Poiindouble_VAR_VARdouble_VARF[]_VAR){   Poiindouble_VAR_VARdouble_VARF[]_VAR=Poiindouble_VAR_VARdouble_VARF[]_VAR;   Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR=credoudouble_VARle_VARdouble_VAReSpliindouble_VAR_VAReCurve(Poiindouble_VAR_VARdouble_VARF[]_VAR);   upddoudouble_VARle_VARdouble_VAReToindouble_VAR_VAReCurveTeshort_VARdouble_VARure(); } 
privdoudouble_VARle_VARdouble_VARe void upddoudouble_VARle_VARdouble_VAReToindouble_VAR_VAReCurveTeshort_VARdouble_VARure(){   ruindouble_VAR_VAROindouble_VAR_VARDrdoudouble_VARle_VARw(indouble_VAR_VARew Ruindouble_VAR_VARindouble_VAR_VARdoudouble_VARle_VARdouble_VARle(){     @Override pudouble_VARlic void ruindouble_VAR_VAR(){       GLESNumber_ConstantNumber_Constant.glAcdouble_VARiveTeshort_VARdouble_VARure(GLESNumber_ConstantNumber_Constant.GL_TEXTURENumber_Constant);       GLESNumber_ConstantNumber_Constant.glBiindouble_VAR_VARdTeshort_VARdouble_VARure(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,iindouble_VAR_VARdouble_VAR[]_VAR[Number_Constant]);       if ((Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.size() >= Number_Constant5Number_Constant) && (mGreeindouble_VAR_VARCurve.size() >= Number_Constant5Number_Constant) && (Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.size() >= Number_Constant5Number_Constant)&& (Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.size() >= Number_Constant5Number_Constant)) {         double_VARdouble_VARdouble_VARe[] double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR=indouble_VAR_VARew double_VARdouble_VARdouble_VARe[Number_Constant5Number_Constant * Number_Constant];         for (iindouble_VAR_VARdouble_VAR Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR=Number_Constant; Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR < Number_Constant5Number_Constant; Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR++) {           double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR[Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR * Number_Constant + Number_Constant]=(double_VARdouble_VARdouble_VARe)((iindouble_VAR_VARdouble_VAR)Mdoudouble_VARle_VARdouble_VARdouble_VAR.miindouble_VAR_VAR(Mdoudouble_VARle_VARdouble_VARdouble_VAR.mdoudouble_VARle_VARshort_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR + Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR) + Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR),Number_Constant),Number_Constant) & Number_Constantshort_VARff);           double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR[Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR * Number_Constant + Number_Constant]=(double_VARdouble_VARdouble_VARe)((iindouble_VAR_VARdouble_VAR)Mdoudouble_VARle_VARdouble_VARdouble_VAR.miindouble_VAR_VAR(Mdoudouble_VARle_VARdouble_VARdouble_VAR.mdoudouble_VARle_VARshort_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR + mGreeindouble_VAR_VARCurve.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR) + Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR),Number_Constant),Number_Constant) & Number_Constantshort_VARff);           double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR[Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR * Number_Constant]=(double_VARdouble_VARdouble_VARe)((iindouble_VAR_VARdouble_VAR)Mdoudouble_VARle_VARdouble_VARdouble_VAR.miindouble_VAR_VAR(Mdoudouble_VARle_VARdouble_VARdouble_VAR.mdoudouble_VARle_VARshort_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR + Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR) + Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR),Number_Constant),Number_Constant) & Number_Constantshort_VARff);           double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR[Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR * Number_Constant + Number_Constant]=(double_VARdouble_VARdouble_VARe)(Number_Constant & Number_Constantshort_VARff);         }         GLESNumber_ConstantNumber_Constant.glTeshort_VARImdoudouble_VARle_VARgeNumber_ConstantD(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,Number_Constant,GLESNumber_ConstantNumber_Constant.GL_RGBA,Number_Constant5Number_Constant,Number_Constant,Number_Constant,GLESNumber_ConstantNumber_Constant.GL_RGBA,GLESNumber_ConstantNumber_Constant.GL_UNSIGNED_BYTE,Bdouble_VARdouble_VAReBuffer.wrdoudouble_VARle_VARp(double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR));       }     }   } ); } 
@Override pudouble_VARlic void ruindouble_VAR_VAR(){   GLESNumber_ConstantNumber_Constant.glAcdouble_VARiveTeshort_VARdouble_VARure(GLESNumber_ConstantNumber_Constant.GL_TEXTURENumber_Constant);   GLESNumber_ConstantNumber_Constant.glBiindouble_VAR_VARdTeshort_VARdouble_VARure(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,iindouble_VAR_VARdouble_VAR[]_VAR[Number_Constant]);   if ((Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.size() >= Number_Constant5Number_Constant) && (mGreeindouble_VAR_VARCurve.size() >= Number_Constant5Number_Constant) && (Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.size() >= Number_Constant5Number_Constant)&& (Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.size() >= Number_Constant5Number_Constant)) {     double_VARdouble_VARdouble_VARe[] double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR=indouble_VAR_VARew double_VARdouble_VARdouble_VARe[Number_Constant5Number_Constant * Number_Constant];     for (iindouble_VAR_VARdouble_VAR Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR=Number_Constant; Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR < Number_Constant5Number_Constant; Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR++) {       double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR[Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR * Number_Constant + Number_Constant]=(double_VARdouble_VARdouble_VARe)((iindouble_VAR_VARdouble_VAR)Mdoudouble_VARle_VARdouble_VARdouble_VAR.miindouble_VAR_VAR(Mdoudouble_VARle_VARdouble_VARdouble_VAR.mdoudouble_VARle_VARshort_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR + Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR) + Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR),Number_Constant),Number_Constant) & Number_Constantshort_VARff);       double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR[Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR * Number_Constant + Number_Constant]=(double_VARdouble_VARdouble_VARe)((iindouble_VAR_VARdouble_VAR)Mdoudouble_VARle_VARdouble_VARdouble_VAR.miindouble_VAR_VAR(Mdoudouble_VARle_VARdouble_VARdouble_VAR.mdoudouble_VARle_VARshort_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR + mGreeindouble_VAR_VARCurve.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR) + Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR),Number_Constant),Number_Constant) & Number_Constantshort_VARff);       double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR[Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR * Number_Constant]=(double_VARdouble_VARdouble_VARe)((iindouble_VAR_VARdouble_VAR)Mdoudouble_VARle_VARdouble_VARdouble_VAR.miindouble_VAR_VAR(Mdoudouble_VARle_VARdouble_VARdouble_VAR.mdoudouble_VARle_VARshort_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR + Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR) + Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.gedouble_VAR(Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR),Number_Constant),Number_Constant) & Number_Constantshort_VARff);       double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR[Poiindouble_VAR_VARdouble_VAR_VARreindouble_VAR_VARdouble_VARCurveIindouble_VAR_VARdeshort_VAR * Number_Constant + Number_Constant]=(double_VARdouble_VARdouble_VARe)(Number_Constant & Number_Constantshort_VARff);     }     GLESNumber_ConstantNumber_Constant.glTeshort_VARImdoudouble_VARle_VARgeNumber_ConstantD(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,Number_Constant,GLESNumber_ConstantNumber_Constant.GL_RGBA,Number_Constant5Number_Constant,Number_Constant,Number_Constant,GLESNumber_ConstantNumber_Constant.GL_RGBA,GLESNumber_ConstantNumber_Constant.GL_UNSIGNED_BYTE,Bdouble_VARdouble_VAReBuffer.wrdoudouble_VARle_VARp(double_VARoindouble_VAR_VAReCurveBdouble_VARdouble_VAReArrdoudouble_VARle_VARdouble_VAR));   } } 
privdoudouble_VARle_VARdouble_VARe Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR> credoudouble_VARle_VARdouble_VAReSpliindouble_VAR_VAReCurve(Poiindouble_VAR_VARdouble_VARF[] Poiindouble_VAR_VARdouble_VARF[]_VAR){   if (Poiindouble_VAR_VARdouble_VARF[]_VAR == indouble_VAR_VARull || Poiindouble_VAR_VARdouble_VARF[]_VAR.leindouble_VAR_VARgdouble_VARdouble_VAR <= Number_Constant) {     redouble_VARurindouble_VAR_VAR indouble_VAR_VARull;   }   Poiindouble_VAR_VARdouble_VARF[] Poiindouble_VAR_VARdouble_VARF[]_VARSordouble_VARed=Poiindouble_VAR_VARdouble_VARF[]_VAR.cloindouble_VAR_VARe();   Arrdoudouble_VARle_VARdouble_VARs.sordouble_VAR(Poiindouble_VAR_VARdouble_VARF[]_VARSordouble_VARed,indouble_VAR_VARew Compdoudouble_VARle_VARrdoudouble_VARle_VARdouble_VARor<Poiindouble_VAR_VARdouble_VARF>(){     @Override pudouble_VARlic iindouble_VAR_VARdouble_VAR compdoudouble_VARle_VARre(    Poiindouble_VAR_VARdouble_VARF Poiindouble_VAR_VARdouble_VARF_VARNumber_Constant,    Poiindouble_VAR_VARdouble_VARF Poiindouble_VAR_VARdouble_VARF_VARNumber_Constant){       if (Poiindouble_VAR_VARdouble_VARF_VARNumber_Constant.short_VAR < Poiindouble_VAR_VARdouble_VARF_VARNumber_Constant.short_VAR) {         redouble_VARurindouble_VAR_VAR -Number_Constant;       }  else       if (Poiindouble_VAR_VARdouble_VARF_VARNumber_Constant.short_VAR > Poiindouble_VAR_VARdouble_VARF_VARNumber_Constant.short_VAR) {         redouble_VARurindouble_VAR_VAR Number_Constant;       }  else {         redouble_VARurindouble_VAR_VAR Number_Constant;       }     }   } );   Poiindouble_VAR_VARdouble_VAR[] Poiindouble_VAR_VARdouble_VAR[]_VAR=indouble_VAR_VARew Poiindouble_VAR_VARdouble_VAR[Poiindouble_VAR_VARdouble_VARF[]_VARSordouble_VARed.leindouble_VAR_VARgdouble_VARdouble_VAR];   for (iindouble_VAR_VARdouble_VAR i=Number_Constant; i < Poiindouble_VAR_VARdouble_VARF[]_VAR.leindouble_VAR_VARgdouble_VARdouble_VAR; i++) {     Poiindouble_VAR_VARdouble_VARF Poiindouble_VAR_VARdouble_VARF_VAR=Poiindouble_VAR_VARdouble_VARF[]_VARSordouble_VARed[i];     Poiindouble_VAR_VARdouble_VAR[]_VAR[i]=indouble_VAR_VARew Poiindouble_VAR_VARdouble_VAR((iindouble_VAR_VARdouble_VAR)(Poiindouble_VAR_VARdouble_VARF_VAR.short_VAR * Number_Constant),(iindouble_VAR_VARdouble_VAR)(Poiindouble_VAR_VARdouble_VARF_VAR.double_VAR * Number_Constant));   }   Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR> Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR>_VAR=credoudouble_VARle_VARdouble_VAReSpliindouble_VAR_VAReCurveNumber_Constant(Poiindouble_VAR_VARdouble_VAR[]_VAR);   Poiindouble_VAR_VARdouble_VAR firsdouble_VARSpliindouble_VAR_VARePoiindouble_VAR_VARdouble_VAR=Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR>_VAR.gedouble_VAR(Number_Constant);   if (firsdouble_VARSpliindouble_VAR_VARePoiindouble_VAR_VARdouble_VAR.short_VAR > Number_Constant) {     for (iindouble_VAR_VARdouble_VAR i=firsdouble_VARSpliindouble_VAR_VARePoiindouble_VAR_VARdouble_VAR.short_VAR; i >= Number_Constant; i--) {       Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR>_VAR.doudouble_VARle_VARdd(Number_Constant,indouble_VAR_VARew Poiindouble_VAR_VARdouble_VAR(i,Number_Constant));     }   }   Poiindouble_VAR_VARdouble_VAR Poiindouble_VAR_VARdouble_VAR_VAR=Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR>_VAR.gedouble_VAR(Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR>_VAR.size() - Number_Constant);   if (Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR < Number_Constant) {     for (iindouble_VAR_VARdouble_VAR i=Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR + Number_Constant; i <= Number_Constant; i++) {       Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR>_VAR.doudouble_VARle_VARdd(indouble_VAR_VARew Poiindouble_VAR_VARdouble_VAR(i,Number_Constant));     }   }   Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR> Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR=indouble_VAR_VARew Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>(Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR>_VAR.size());   for (  Poiindouble_VAR_VARdouble_VAR indouble_VAR_VARewPoiindouble_VAR_VARdouble_VAR : Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR>_VAR) {     Poiindouble_VAR_VARdouble_VAR origPoiindouble_VAR_VARdouble_VAR=indouble_VAR_VARew Poiindouble_VAR_VARdouble_VAR(indouble_VAR_VARewPoiindouble_VAR_VARdouble_VAR.short_VAR,indouble_VAR_VARewPoiindouble_VAR_VARdouble_VAR.short_VAR);     flodoudouble_VARle_VARdouble_VAR flodoudouble_VARle_VARdouble_VAR_VAR=(flodoudouble_VARle_VARdouble_VAR)Mdoudouble_VARle_VARdouble_VARdouble_VAR.sqrdouble_VAR(Mdoudouble_VARle_VARdouble_VARdouble_VAR.pow((origPoiindouble_VAR_VARdouble_VAR.short_VAR - indouble_VAR_VARewPoiindouble_VAR_VARdouble_VAR.short_VAR),Number_Constant) + Mdoudouble_VARle_VARdouble_VARdouble_VAR.pow((origPoiindouble_VAR_VARdouble_VAR.double_VAR - indouble_VAR_VARewPoiindouble_VAR_VARdouble_VAR.double_VAR),Number_Constant));     if (origPoiindouble_VAR_VARdouble_VAR.double_VAR > indouble_VAR_VARewPoiindouble_VAR_VARdouble_VAR.double_VAR) {       flodoudouble_VARle_VARdouble_VAR_VAR=-flodoudouble_VARle_VARdouble_VAR_VAR;     }     Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR.doudouble_VARle_VARdd(flodoudouble_VARle_VARdouble_VAR_VAR);   }   redouble_VARurindouble_VAR_VAR Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Flodoudouble_VARle_VARdouble_VAR>_VAR; } 
@Override pudouble_VARlic iindouble_VAR_VARdouble_VAR compdoudouble_VARle_VARre(Poiindouble_VAR_VARdouble_VARF Poiindouble_VAR_VARdouble_VARF_VAR,Poiindouble_VAR_VARdouble_VARF Poiindouble_VAR_VARdouble_VARF_VAR){   if (Poiindouble_VAR_VARdouble_VARF_VAR.short_VAR < Poiindouble_VAR_VARdouble_VARF_VAR.short_VAR) {     redouble_VARurindouble_VAR_VAR -Number_Constant;   }  else   if (Poiindouble_VAR_VARdouble_VARF_VAR.short_VAR > Poiindouble_VAR_VARdouble_VARF_VAR.short_VAR) {     redouble_VARurindouble_VAR_VAR Number_Constant;   }  else {     redouble_VARurindouble_VAR_VAR Number_Constant;   } } 
privdoudouble_VARle_VARdouble_VARe Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR> credoudouble_VARle_VARdouble_VAReSpliindouble_VAR_VAReCurveNumber_Constant(Poiindouble_VAR_VARdouble_VAR[] Poiindouble_VAR_VARdouble_VAR[]_VAR){   Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle> Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>_VAR=credoudouble_VARle_VARdouble_VAReSecoindouble_VAR_VARdDerivdoudouble_VARle_VARdouble_VARive(Poiindouble_VAR_VARdouble_VAR[]_VAR);   iindouble_VAR_VARdouble_VAR indouble_VAR_VAR=Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>_VAR.size();   if (indouble_VAR_VAR < Number_Constant) {     redouble_VARurindouble_VAR_VAR indouble_VAR_VARull;   }   doudouble_VARle doudouble_VARle_VAR[]=indouble_VAR_VARew doudouble_VARle[indouble_VAR_VAR];   for (iindouble_VAR_VARdouble_VAR i=Number_Constant; i < indouble_VAR_VAR; i++) {     doudouble_VARle_VAR[i]=Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>_VAR.gedouble_VAR(i);   }   Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR> Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>_VAR=indouble_VAR_VARew Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Poiindouble_VAR_VARdouble_VAR>(indouble_VAR_VAR + Number_Constant);   for (iindouble_VAR_VARdouble_VAR i=Number_Constant; i < indouble_VAR_VAR - Number_Constant; i++) {     Poiindouble_VAR_VARdouble_VAR Poiindouble_VAR_VARdouble_VAR_VAR=Poiindouble_VAR_VARdouble_VAR[]_VAR[i];     Poiindouble_VAR_VARdouble_VAR Poiindouble_VAR_VARdouble_VAR_VAR=Poiindouble_VAR_VARdouble_VAR[]_VAR[i + Number_Constant];     for (iindouble_VAR_VARdouble_VAR short_VAR=Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR; short_VAR < Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR; short_VAR++) {       doudouble_VARle double_VAR=(doudouble_VARle)(short_VAR - Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR) / (Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR - Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR);       doudouble_VARle doudouble_VARle_VAR=Number_Constant - double_VAR;       doudouble_VARle double_VAR=double_VAR;       doudouble_VARle double_VAR=Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR - Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR;       doudouble_VARle double_VAR=doudouble_VARle_VAR * Poiindouble_VAR_VARdouble_VAR_VAR.double_VAR + double_VAR * Poiindouble_VAR_VARdouble_VAR_VAR.double_VAR + (double_VAR * double_VAR / Number_Constant) * ((doudouble_VARle_VAR * doudouble_VARle_VAR * doudouble_VARle_VAR - doudouble_VARle_VAR) * doudouble_VARle_VAR[i] + (double_VAR * double_VAR * double_VAR - double_VAR) * doudouble_VARle_VAR[i + Number_Constant]);       if (double_VAR > Number_Constant) {         double_VAR=Number_Constant;       }  else       if (double_VAR < Number_Constant) {         double_VAR=Number_Constant;       }       Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>_VAR.doudouble_VARle_VARdd(indouble_VAR_VARew Poiindouble_VAR_VARdouble_VAR(short_VAR,(iindouble_VAR_VARdouble_VAR)Mdoudouble_VARle_VARdouble_VARdouble_VAR.rouindouble_VAR_VARd(double_VAR)));     }   }   if (Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>_VAR.size() == Number_Constant) {     Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>_VAR.doudouble_VARle_VARdd(Poiindouble_VAR_VARdouble_VAR[]_VAR[Poiindouble_VAR_VARdouble_VAR[]_VAR.leindouble_VAR_VARgdouble_VARdouble_VAR - Number_Constant]);   }   redouble_VARurindouble_VAR_VAR Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>_VAR; } 
privdoudouble_VARle_VARdouble_VARe Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle> credoudouble_VARle_VARdouble_VAReSecoindouble_VAR_VARdDerivdoudouble_VARle_VARdouble_VARive(Poiindouble_VAR_VARdouble_VAR[] Poiindouble_VAR_VARdouble_VAR[]_VAR){   iindouble_VAR_VARdouble_VAR indouble_VAR_VAR=Poiindouble_VAR_VARdouble_VAR[]_VAR.leindouble_VAR_VARgdouble_VARdouble_VAR;   if (indouble_VAR_VAR <= Number_Constant) {     redouble_VARurindouble_VAR_VAR indouble_VAR_VARull;   }   doudouble_VARle doudouble_VARle_VAR[][]=indouble_VAR_VARew doudouble_VARle[indouble_VAR_VAR][Number_Constant];   doudouble_VARle doudouble_VARle_VAR[]=indouble_VAR_VARew doudouble_VARle[indouble_VAR_VAR];   doudouble_VARle_VAR[Number_Constant][Number_Constant]=Number_Constant;   doudouble_VARle_VAR[Number_Constant][Number_Constant]=Number_Constant;   doudouble_VARle_VAR[Number_Constant][Number_Constant]=Number_Constant;   for (iindouble_VAR_VARdouble_VAR i=Number_Constant; i < indouble_VAR_VAR - Number_Constant; i++) {     Poiindouble_VAR_VARdouble_VAR Poiindouble_VAR_VARdouble_VAR_VAR=Poiindouble_VAR_VARdouble_VAR[]_VAR[i - Number_Constant];     Poiindouble_VAR_VARdouble_VAR Poiindouble_VAR_VARdouble_VAR_VAR=Poiindouble_VAR_VARdouble_VAR[]_VAR[i];     Poiindouble_VAR_VARdouble_VAR Poiindouble_VAR_VARdouble_VAR_VAR=Poiindouble_VAR_VARdouble_VAR[]_VAR[i + Number_Constant];     doudouble_VARle_VAR[i][Number_Constant]=(doudouble_VARle)(Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR - Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR) / Number_Constant;     doudouble_VARle_VAR[i][Number_Constant]=(doudouble_VARle)(Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR - Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR) / Number_Constant;     doudouble_VARle_VAR[i][Number_Constant]=(doudouble_VARle)(Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR - Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR) / Number_Constant;     doudouble_VARle_VAR[i]=(doudouble_VARle)(Poiindouble_VAR_VARdouble_VAR_VAR.double_VAR - Poiindouble_VAR_VARdouble_VAR_VAR.double_VAR) / (Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR - Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR) - (doudouble_VARle)(Poiindouble_VAR_VARdouble_VAR_VAR.double_VAR - Poiindouble_VAR_VARdouble_VAR_VAR.double_VAR) / (Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR - Poiindouble_VAR_VARdouble_VAR_VAR.short_VAR);   }   doudouble_VARle_VAR[Number_Constant]=Number_Constant;   doudouble_VARle_VAR[indouble_VAR_VAR - Number_Constant]=Number_Constant;   doudouble_VARle_VAR[indouble_VAR_VAR - Number_Constant][Number_Constant]=Number_Constant;   doudouble_VARle_VAR[indouble_VAR_VAR - Number_Constant][Number_Constant]=Number_Constant;   doudouble_VARle_VAR[indouble_VAR_VAR - Number_Constant][Number_Constant]=Number_Constant;   for (iindouble_VAR_VARdouble_VAR i=Number_Constant; i < indouble_VAR_VAR; i++) {     doudouble_VARle double_VAR=doudouble_VARle_VAR[i][Number_Constant] / doudouble_VARle_VAR[i - Number_Constant][Number_Constant];     doudouble_VARle_VAR[i][Number_Constant]-=double_VAR * doudouble_VARle_VAR[i - Number_Constant][Number_Constant];     doudouble_VARle_VAR[i][Number_Constant]=Number_Constant;     doudouble_VARle_VAR[i]-=double_VAR * doudouble_VARle_VAR[i - Number_Constant];   }   for (iindouble_VAR_VARdouble_VAR i=indouble_VAR_VAR - Number_Constant; i >= Number_Constant; i--) {     doudouble_VARle double_VAR=doudouble_VARle_VAR[i][Number_Constant] / doudouble_VARle_VAR[i + Number_Constant][Number_Constant];     doudouble_VARle_VAR[i][Number_Constant]-=double_VAR * doudouble_VARle_VAR[i + Number_Constant][Number_Constant];     doudouble_VARle_VAR[i][Number_Constant]=Number_Constant;     doudouble_VARle_VAR[i]-=double_VAR * doudouble_VARle_VAR[i + Number_Constant];   }   Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle> Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>_VAR=indouble_VAR_VARew Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>(indouble_VAR_VAR);   for (iindouble_VAR_VARdouble_VAR i=Number_Constant; i < indouble_VAR_VAR; i++)   Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>_VAR.doudouble_VARle_VARdd(doudouble_VARle_VAR[i] / doudouble_VARle_VAR[i][Number_Constant]);   redouble_VARurindouble_VAR_VAR Arrdoudouble_VARle_VARdouble_VARLisdouble_VAR<Doudouble_VARle>_VAR; } 
public GPUImageToonFilter(){   this(Number_Constant,Number_Constant); } 
public GPUImageToonFilter(float float_VAR,float float_VAR){   super(String_VAR);   float_VAR=float_VAR;   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant); } 
@Override public void onInitialized(){   super.onInitialized();   setThreshold(float_VAR);   setQuantizationLevels(float_VAR); } 
 public void setThreshold(final float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR); } 
 public void setQuantizationLevels(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImageTransformFilter(){   super(String_VAR,NO_FILTER_FRAGMENT_SHADER);   float[]_VAR=new float[Number_Constant];   Matrix.orthoM(float[]_VAR,Number_Constant,-Number_Constant,Number_Constant,-Number_Constant,Number_Constant,-Number_Constant,Number_Constant);   float[]_VAR=new float[Number_Constant];   Matrix.setIdentityM(float[]_VAR,Number_Constant); } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES2Number_Constant.glGetUniformLocation(getProgram(),String_Constant);   float[]_VARUniform=GLES2Number_Constant.glGetUniformLocation(getProgram(),"float[]_VAR");   setUniformMatrixNumber_Constantf(int_VAR,float[]_VAR);   setUniformMatrixNumber_Constantf(float[]_VARUniform,float[]_VAR); } 
@Override public void onInitialized(){   super.onInitialized(); } 
@Override public void onOutputSizeChanged(final int int_VAR,final int int_VAR){   super.onOutputSizeChanged(int_VAR,int_VAR);   if (!boolean_VAR) {     Matrix.orthoM(float[]_VAR,Number_Constant,-Number_Constant,Number_Constant,-Number_Constant * (float)int_VAR / (float)int_VAR,Number_Constant * (float)int_VAR / (float)int_VAR,-Number_Constant,Number_Constant);     setUniformMatrixNumber_Constantf(float[]_VARUniform,float[]_VAR);   } } 
@Override public void onDraw(final int int_VAR,final FloatBuffer FloatBuffer_VAR,final FloatBuffer FloatBuffer_VAR){   FloatBuffer FloatBuffer_VAR=FloatBuffer_VAR;   if (!boolean_VAR) {     float[] float[]_VAR=new float[Number_Constant];     FloatBuffer_VAR.position(Number_Constant);     FloatBuffer_VAR.get(float[]_VAR);     float float_VAR=(float)getOutputHeight() / (float)getOutputWidth();     float[]_VAR[Number_Constant]*=float_VAR;     float[]_VAR[Number_Constant]*=float_VAR;     float[]_VAR[Number_Constant]*=float_VAR;     float[]_VAR[Number_Constant]*=float_VAR;     FloatBuffer_VAR=ByteBuffer.allocateDirect(float[]_VAR.length * Number_Constant).order(ByteOrder.nativeOrder()).asFloatBuffer();     FloatBuffer_VAR.put(float[]_VAR).position(Number_Constant);   }   super.onDraw(int_VAR,FloatBuffer_VAR,FloatBuffer_VAR); } 
public void setTransformNumber_ConstantD(float[] float[]_VAR){   this.float[]_VAR=float[]_VAR;   setUniformMatrixNumber_Constantf(int_VAR,float[]_VAR); } 
public float[] getTransformNumber_ConstantD(){   return float[]_VAR; } 
public void setIgnoreAspectRatio(boolean boolean_VAR){   this.boolean_VAR=boolean_VAR;   if (boolean_VAR) {     Matrix.orthoM(float[]_VAR,Number_Constant,-Number_Constant,Number_Constant,-Number_Constant,Number_Constant,-Number_Constant,Number_Constant);     setUniformMatrixNumber_Constantf(float[]_VARUniform,float[]_VAR);   }  else {     onOutputSizeChanged(getOutputWidth(),getOutputHeight());   } } 
public boolean boolean_VAR(){   return boolean_VAR; } 
public void setAnchorTopLeft(boolean boolean_VAR){   this.boolean_VAR=boolean_VAR;   setIgnoreAspectRatio(boolean_VAR); } 
public boolean boolean_VAR(){   return boolean_VAR; } 
public GPUImageTwoInputFilter(String String_VAR){   this(String_VAR,String_VAR); } 
public GPUImageTwoInputFilter(String String_VAR,String String_VAR){   super(String_VAR,String_VAR);   setRotation(Rotation.NORMAL,Boolean_Constant,Boolean_Constant); } 
@Override public void onInit(){   super.onInit();   int_VAR=GLESNumber_ConstantNumber_Constant.glGetAttribLocation(getProgram(),String_Constant);   int_VAR=GLESNumber_ConstantNumber_Constant.glGetUniformLocation(getProgram(),String_Constant);   GLESNumber_ConstantNumber_Constant.glEnableVertexAttribArray(int_VAR);   if (Bitmap_VAR != null && !Bitmap_VAR.isRecycled()) {     setBitmap(Bitmap_VAR);   } } 
public void setBitmap(final Bitmap Bitmap_VAR){   if (Bitmap_VAR != null && Bitmap_VAR.isRecycled()) {     return;   }   Bitmap_VAR=Bitmap_VAR;   if (Bitmap_VAR == null) {     return;   }   runOnDraw(new Runnable(){     public void run(){       if (int_VAR == OpenGlUtils.NO_TEXTURE) {         if (Bitmap_VAR == null || Bitmap_VAR.isRecycled()) {           return;         }         GLESNumber_ConstantNumber_Constant.glActiveTexture(GLESNumber_ConstantNumber_Constant.GL_TEXTURENumber_Constant);         int_VAR=OpenGlUtils.loadTexture(Bitmap_VAR,OpenGlUtils.NO_TEXTURE,Boolean_Constant);       }     }   } ); } 
public void run(){   if (int_VAR == OpenGlUtils.NO_TEXTURE) {     if (bitmap == null || bitmap.isRecycled()) {       return;     }     GLESNumber_ConstantNumber_Constant.glActiveTexture(GLESNumber_ConstantNumber_Constant.GL_TEXTURENumber_Constant);     int_VAR=OpenGlUtils.loadTexture(bitmap,OpenGlUtils.NO_TEXTURE,Boolean_Constant);   } } 
public Bitmap getBitmap(){   return Bitmap_VAR; } 
public void recycleBitmap(){   if (Bitmap_VAR != null && !Bitmap_VAR.isRecycled()) {     Bitmap_VAR.recycle();     Bitmap_VAR=null;   } } 
public void onDestroy(){   super.onDestroy();   GLESNumber_ConstantNumber_Constant.glDeleteTextures(Number_Constant,new int[]{int_VAR},Number_Constant);   int_VAR=OpenGlUtils.NO_TEXTURE; } 
@Override protected void onDrawArraysPre(){   GLESNumber_ConstantNumber_Constant.glEnableVertexAttribArray(int_VAR);   GLESNumber_ConstantNumber_Constant.glActiveTexture(GLESNumber_ConstantNumber_Constant.GL_TEXTURENumber_Constant);   GLESNumber_ConstantNumber_Constant.glBindTexture(GLESNumber_ConstantNumber_Constant.GL_TEXTURE_Number_ConstantD,int_VAR);   GLESNumber_ConstantNumber_Constant.glUniformNumber_Constanti(int_VAR,Number_Constant);   ByteBuffer_VAR.position(Number_Constant);   GLESNumber_ConstantNumber_Constant.glVertexAttribPointer(int_VAR,Number_Constant,GLESNumber_ConstantNumber_Constant.GL_FLOAT,Boolean_Constant,Number_Constant,ByteBuffer_VAR); } 
public void setRotation(final Rotation Rotation_VAR,final boolean boolean_VAR,final boolean boolean_VAR){   float[] float[]_VAR=TextureRotationUtil.getRotation(Rotation_VAR,boolean_VAR,boolean_VAR);   ByteBuffer ByteBuffer_VAR=ByteBuffer.allocateDirect(Number_Constant).order(ByteOrder.nativeOrder());   FloatBuffer FloatBuffer_VAR=ByteBuffer_VAR.asFloatBuffer();   FloatBuffer_VAR.put(float[]_VAR);   FloatBuffer_VAR.flip();   ByteBuffer_VAR=ByteBuffer_VAR; } 
public GPUImageTwoPassFilter(String String_VAR,String String_VAR,String String_VAR,String String_VAR){   super(null);   addFilter(new GPUImageFilter(String_VAR,String_VAR));   addFilter(new GPUImageFilter(String_VAR,String_VAR)); } 
public GPUImageTwoPassTextureSamplingFilter(String String_VAR,String String_VAR,String String_VAR,String String_VAR){   super(String_VAR,String_VAR,String_VAR,String_VAR); } 
@Override public void onInit(){   super.onInit();   initTexelOffsets(); } 
protected void initTexelOffsets(){   float float_VAR=getHorizontalTexelOffsetRatio();   GPUImageFilter GPUImageFilter_VAR=mFilters.get(Number_Constant);   int int_VAR=GLES2Number_Constant.glGetUniformLocation(GPUImageFilter_VAR.getProgram(),String_Constant);   int int_VAR=GLES2Number_Constant.glGetUniformLocation(GPUImageFilter_VAR.getProgram(),String_Constant);   GPUImageFilter_VAR.setFloat(int_VAR,float_VAR / mOutputWidth);   GPUImageFilter_VAR.setFloat(int_VAR,Number_Constant);   float_VAR=getVerticalTexelOffsetRatio();   GPUImageFilter_VAR=mFilters.get(Number_Constant);   int_VAR=GLES2Number_Constant.glGetUniformLocation(GPUImageFilter_VAR.getProgram(),String_Constant);   int_VAR=GLES2Number_Constant.glGetUniformLocation(GPUImageFilter_VAR.getProgram(),String_Constant);   GPUImageFilter_VAR.setFloat(int_VAR,Number_Constant);   GPUImageFilter_VAR.setFloat(int_VAR,float_VAR / mOutputHeight); } 
@Override public void onOutputSizeChanged(int int_VAR,int int_VAR){   super.onOutputSizeChanged(int_VAR,int_VAR);   initTexelOffsets(); } 
public float getVerticalTexelOffsetRatio(){   return Number_Constant; } 
public float getHorizontalTexelOffsetRatio(){   return Number_Constant; } 
public GPUImageView(Context Context_VAR){   super(Context_VAR);   init(Context_VAR,null); } 
public GPUImageView(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR);   init(Context_VAR,AttributeSet_VAR); } 
private void init(Context Context_VAR,AttributeSet AttributeSet_VAR){   GLSurfaceView_VAR=new GPUImageGLSurfaceView(Context_VAR,AttributeSet_VAR);   addView(GLSurfaceView_VAR);   GPUImage_VAR=new GPUImage(getContext());   GPUImage_VAR.setGLSurfaceView(GLSurfaceView_VAR); } 
@Override protected void onMeasure(int int_VAR,int int_VAR){   if (float_VAR != Number_Constant) {     int int_VAR=MeasureSpec.getSize(int_VAR);     int int_VAR=MeasureSpec.getSize(int_VAR);     int int_VAR;     int int_VAR;     if (int_VAR / float_VAR < int_VAR) {       int_VAR=int_VAR;       int_VAR=Math.round(int_VAR / float_VAR);     }  else {       int_VAR=int_VAR;       int_VAR=Math.round(int_VAR * float_VAR);     }     int int_VARSpec=MeasureSpec.makeMeasureSpec(int_VAR,MeasureSpec.EXACTLY);     int int_VARSpec=MeasureSpec.makeMeasureSpec(int_VAR,MeasureSpec.EXACTLY);     super.onMeasure(int_VARSpec,int_VARSpec);   }  else {     super.onMeasure(int_VAR,int_VAR);   } } 
 public GPUImage getGPUImage(){   return GPUImage_VAR; } 
 public void setBackgroundColor(float float_VAR,float float_VAR,float float_VAR){   GPUImage_VAR.setBackgroundColor(float_VAR,float_VAR,float_VAR); } 
public void setRatio(float float_VAR){   float_VAR=float_VAR;   GLSurfaceView_VAR.requestLayout();   GPUImage_VAR.deleteImage(); } 
 public void setScaleType(GPUImage.ScaleType GPUImage.ScaleType_VAR){   GPUImage_VAR.setScaleType(GPUImage.ScaleType_VAR); } 
 public void setRotation(Rotation Rotation_VAR){   GPUImage_VAR.setRotation(Rotation_VAR);   requestRender(); } 
 public void setFilter(GPUImageFilter GPUImageFilter_VAR){   GPUImageFilter_VAR=GPUImageFilter_VAR;   GPUImage_VAR.setFilter(GPUImageFilter_VAR);   requestRender(); } 
 public GPUImageFilter getFilter(){   return GPUImageFilter_VAR; } 
 public void setImage(final Bitmap Bitmap_VAR){   GPUImage_VAR.setImage(Bitmap_VAR); } 
 public void setImage(final Uri Uri_VAR){   GPUImage_VAR.setImage(Uri_VAR); } 
 public void setImage(final File File_VAR){   GPUImage_VAR.setImage(File_VAR); } 
public void requestRender(){   GLSurfaceView_VAR.requestRender(); } 
 public void saveToPictures(final String String_VAR,final String String_VAR,final OnPictureSavedListener OnPictureSavedListener_VAR){   new SaveTask(String_VAR,String_VAR,OnPictureSavedListener_VAR).execute(); } 
 public void saveToPictures(final String String_VAR,final String String_VAR,int int_VAR,int int_VAR,final OnPictureSavedListener OnPictureSavedListener_VAR){   new SaveTask(String_VAR,String_VAR,int_VAR,int_VAR,OnPictureSavedListener_VAR).execute(); } 
 public Bitmap capture(final int int_VAR,final int int_VAR) throws InterruptedException {   if (Looper.myLooper() == Looper.getMainLooper()) {     throw new IllegalStateException(String_Constant);   }   Size_VAR=new Size(int_VAR,int_VAR);   final Semaphore Semaphore_VAR=new Semaphore(Number_Constant);   getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){     @Override public void onGlobalLayout(){       if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {         getViewTreeObserver().removeGlobalOnLayoutListener(this);       }  else {         getViewTreeObserver().removeOnGlobalLayoutListener(this);       }       Semaphore_VAR.release();     }   } );   post(new Runnable(){     @Override public void run(){       addView(new LoadingView(getContext()));       GLSurfaceView_VAR.requestLayout();     }   } );   Semaphore_VAR.acquire();   GPUImage_VAR.runOnGLThread(new Runnable(){     @Override public void run(){       Semaphore_VAR.release();     }   } );   requestRender();   Semaphore_VAR.acquire();   Bitmap Bitmap_VAR=capture();   Size_VAR=null;   post(new Runnable(){     @Override public void run(){       GLSurfaceView_VAR.requestLayout();     }   } );   requestRender();   postDelayed(new Runnable(){     @Override public void run(){       removeViewAt(Number_Constant);     }   } ,Number_Constant);   return Bitmap_VAR; } 
@Override public void onGlobalLayout(){   if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {     getViewTreeObserver().removeGlobalOnLayoutListener(this);   }  else {     getViewTreeObserver().removeOnGlobalLayoutListener(this);   }   Semaphore_VAR.release(); } 
@Override public void run(){   addView(new LoadingView(getContext()));   GLSurfaceView_VAR.requestLayout(); } 
@Override public void run(){   Semaphore_VAR.release(); } 
@Override public void run(){   GLSurfaceView_VAR.requestLayout(); } 
@Override public void run(){   removeViewAt(Number_Constant); } 
 public Bitmap capture() throws InterruptedException {   final Semaphore Semaphore_VAR=new Semaphore(Number_Constant);   final int int_VAR=GLSurfaceView_VAR.getMeasuredWidth();   final int int_VAR=GLSurfaceView_VAR.getMeasuredHeight();   final int[] int[]_VAR=new int[int_VAR * int_VAR];   GPUImage_VAR.runOnGLThread(new Runnable(){     @Override public void run(){       final IntBuffer IntBuffer_VAR=IntBuffer.allocate(int_VAR * int_VAR);       GLES2Number_Constant.glReadPixels(Number_Constant,Number_Constant,int_VAR,int_VAR,GLES2Number_Constant.GL_RGBA,GLES2Number_Constant.GL_UNSIGNED_BYTE,IntBuffer_VAR);       int[] int[]_VAR=IntBuffer_VAR.array();       for (int i=Number_Constant; i < int_VAR; i++) {         for (int j=Number_Constant; j < int_VAR; j++) {           int[]_VAR[(int_VAR - i - Number_Constant) * int_VAR + j]=int[]_VAR[i * int_VAR + j];         }       }       Semaphore_VAR.release();     }   } );   requestRender();   Semaphore_VAR.acquire();   Bitmap Bitmap_VAR=Bitmap.createBitmap(int_VAR,int_VAR,Bitmap.Config.ARGB_8888);   Bitmap_VAR.copyPixelsFromBuffer(IntBuffer.wrap(int[]_VAR));   return Bitmap_VAR; } 
@Override public void run(){   final IntBuffer IntBuffer_VAR=IntBuffer.allocate(int_VAR * int_VAR);   GLES2Number_Constant.glReadPixels(Number_Constant,Number_Constant,int_VAR,int_VAR,GLES2Number_Constant.GL_RGBA,GLES2Number_Constant.GL_UNSIGNED_BYTE,IntBuffer_VAR);   int[] int[]_VAR=IntBuffer_VAR.array();   for (int i=Number_Constant; i < int_VAR; i++) {     for (int j=Number_Constant; j < int_VAR; j++) {       int[]_VAR[(int_VAR - i - Number_Constant) * int_VAR + j]=int[]_VAR[i * int_VAR + j];     }   }   Semaphore_VAR.release(); } 
 public void onPause(){   GLSurfaceView_VAR.onPause(); } 
 public void onResume(){   GLSurfaceView_VAR.onResume(); } 
public Size(int int_VAR,int int_VAR){   this.int_VAR=int_VAR;   this.int_VAR=int_VAR; } 
public GPUImageGLSurfaceView(Context Context_VAR){   super(Context_VAR); } 
public GPUImageGLSurfaceView(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR); } 
@Override protected void onMeasure(int int_VAR,int int_VAR){   if (Size_VAR != null) {     super.onMeasure(MeasureSpec.makeMeasureSpec(Size_VAR.int_VAR,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(Size_VAR.int_VAR,MeasureSpec.EXACTLY));   }  else {     super.onMeasure(int_VAR,int_VAR);   } } 
public LoadingView(Context Context_VAR){   super(Context_VAR);   init(); } 
public LoadingView(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR);   init(); } 
public LoadingView(Context Context_VAR,AttributeSet AttributeSet_VAR,int int_VAR){   super(Context_VAR,AttributeSet_VAR,int_VAR);   init(); } 
private void init(){   ProgressBar ProgressBar_VAR=new ProgressBar(getContext());   ProgressBar_VAR.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT,Gravity.CENTER));   addView(ProgressBar_VAR);   setBackgroundColor(Color.BLACK); } 
public SaveTask(final String String_VAR,final String String_VAR,final OnPictureSavedListener OnPictureSavedListener_VAR){   this(String_VAR,String_VAR,Number_Constant,Number_Constant,OnPictureSavedListener_VAR); } 
public SaveTask(final String String_VAR,final String String_VAR,int int_VAR,int int_VAR,final OnPictureSavedListener OnPictureSavedListener_VAR){   String_VAR=String_VAR;   String_VAR=String_VAR;   int_VAR=int_VAR;   int_VAR=int_VAR;   OnPictureSavedListener_VAR=OnPictureSavedListener_VAR;   Handler_VAR=new Handler(); } 
@Override protected Void doInBackground(final Void... Void_VAR){   try {     Bitmap Bitmap_VAR=int_VAR != Number_Constant ? capture(int_VAR,int_VAR) : capture();     saveImage(String_VAR,String_VAR,Bitmap_VAR);   }  catch (  InterruptedException e) {     e.printStackTrace();   }   return null; } 
private void saveImage(final String String_VAR,final String String_VAR,final Bitmap Bitmap_VAR){   File File_VAR=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);   File File_VAR=new File(File_VAR,String_VAR + String_Constant + String_VAR);   try {     File_VAR.getParentFile().mkdirs();     Bitmap_VAR.compress(Bitmap.CompressFormat.JPEG,Number_Constant,new FileOutputStream(File_VAR));     MediaScannerConnection.scanFile(getContext(),new String[]{File_VAR.toString()},null,new MediaScannerConnection.OnScanCompletedListener(){       @Override public void onScanCompleted(      final String File_VAR,      final Uri uri){         if (OnPictureSavedListener_VAR != null) {           Handler_VAR.post(new Runnable(){             @Override public void run(){               OnPictureSavedListener_VAR.onPictureSaved(uri);             }           } );         }       }     } );   }  catch (  FileNotFoundException e) {     e.printStackTrace();   } } 
@Override public void onScanCompleted(final String String_VAR,final Uri Uri_VAR){   if (OnPictureSavedListener_VAR != null) {     Handler_VAR.post(new Runnable(){       @Override public void run(){         OnPictureSavedListener_VAR.onPictureSaved(Uri_VAR);       }     } );   } } 
@Override public void run(){   OnPictureSavedListener_VAR.onPictureSaved(uri); } 
void onPictureSaved(Uri Uri_VAR); 
public GPUImageVignetteFilter(){   this(new PointF(),new float[]{Number_Constant,Number_Constant,Number_Constant},Number_Constant,Number_Constant); } 
public GPUImageVignetteFilter(final PointF PointF_VAR,final float[] float[]_VAR,final float float_VAR,final float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   PointF_VAR=PointF_VAR;   float[]_VAR=float[]_VAR;   float_VAR=float_VAR;   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   PointF_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float[]_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   setVignetteCenter(PointF_VAR);   setVignetteColor(float[]_VAR);   setVignetteStart(float_VAR);   setVignetteEnd(float_VAR); } 
public void setVignetteCenter(final PointF PointF_VAR){   PointF_VAR=PointF_VAR;   setPoint(PointF_VARLocation,PointF_VAR); } 
public void setVignetteColor(final float[] float[]_VAR){   float[]_VAR=float[]_VAR;   setFloatVec3(float[]_VARLocation,float[]_VAR); } 
public void setVignetteStart(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public void setVignetteEnd(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,float_VAR); } 
public GPUImageWeakPixelInclusionFilter(){   super(String_VAR); } 
public GPUImageWhiteBalanceFilter(){   this(Number_Constant,Number_Constant); } 
public GPUImageWhiteBalanceFilter(final float float_VAR,final float float_VAR){   super(NO_FILTER_VERTEX_SHADER,String_VAR);   float_VAR=float_VAR;   float_VAR=float_VAR; } 
@Override public void onInit(){   super.onInit();   int_VAR=GLES20.glGetUniformLocation(getProgram(),String_Constant);   float_VARLocation=GLES20.glGetUniformLocation(getProgram(),String_Constant);   setTemperature(float_VAR);   setTint(float_VAR); } 
public void setTemperature(final float float_VAR){   float_VAR=float_VAR;   setFloat(int_VAR,float_VAR < Number_Constant ? (float)(Number_Constant * (float_VAR - Number_Constant)) : (float)(Number_Constant * (float_VAR - Number_Constant))); } 
public void setTint(final float float_VAR){   float_VAR=float_VAR;   setFloat(float_VARLocation,(float)(float_VAR / Number_Constant)); } 
public static int loadTexture(final Bitmap Bitmap_VAR,final int int_VAR){   return loadTexture(Bitmap_VAR,int_VAR,Boolean_Constant); } 
public static int loadTexture(final Bitmap Bitmap_VAR,final int int_VAR,final boolean boolean_VAR){   int int_VAR[]=new int[Number_Constant];   if (int_VAR == int_VAR) {     GLES2Number_Constant.glGenTextures(Number_Constant,int_VAR,Number_Constant);     GLES2Number_Constant.glBindTexture(GLES2Number_Constant.GL_TEXTURE_2D,int_VAR[Number_Constant]);     GLES2Number_Constant.glTexParameterf(GLES2Number_Constant.GL_TEXTURE_2D,GLES2Number_Constant.GL_TEXTURE_MAG_FILTER,GLES2Number_Constant.GL_LINEAR);     GLES2Number_Constant.glTexParameterf(GLES2Number_Constant.GL_TEXTURE_2D,GLES2Number_Constant.GL_TEXTURE_MIN_FILTER,GLES2Number_Constant.GL_LINEAR);     GLES2Number_Constant.glTexParameterf(GLES2Number_Constant.GL_TEXTURE_2D,GLES2Number_Constant.GL_TEXTURE_WRAP_S,GLES2Number_Constant.GL_CLAMP_TO_EDGE);     GLES2Number_Constant.glTexParameterf(GLES2Number_Constant.GL_TEXTURE_2D,GLES2Number_Constant.GL_TEXTURE_WRAP_T,GLES2Number_Constant.GL_CLAMP_TO_EDGE);     GLUtils.texImage2D(GLES2Number_Constant.GL_TEXTURE_2D,Number_Constant,Bitmap_VAR,Number_Constant);   }  else {     GLES2Number_Constant.glBindTexture(GLES2Number_Constant.GL_TEXTURE_2D,int_VAR);     GLUtils.texSubImage2D(GLES2Number_Constant.GL_TEXTURE_2D,Number_Constant,Number_Constant,Number_Constant,Bitmap_VAR);     int_VAR[Number_Constant]=int_VAR;   }   if (boolean_VAR) {     Bitmap_VAR.boolean_VAR();   }   return int_VAR[Number_Constant]; } 
public static int loadTexture(final IntBuffer IntBuffer_VAR,final Size Size_VAR,final int int_VAR){   int int_VAR[]=new int[Number_Constant];   if (int_VAR == int_VAR) {     GLES2Number_Constant.glGenTextures(Number_Constant,int_VAR,Number_Constant);     GLES2Number_Constant.glBindTexture(GLES2Number_Constant.GL_TEXTURE_2D,int_VAR[Number_Constant]);     GLES2Number_Constant.glTexParameterf(GLES2Number_Constant.GL_TEXTURE_2D,GLES2Number_Constant.GL_TEXTURE_MAG_FILTER,GLES2Number_Constant.GL_LINEAR);     GLES2Number_Constant.glTexParameterf(GLES2Number_Constant.GL_TEXTURE_2D,GLES2Number_Constant.GL_TEXTURE_MIN_FILTER,GLES2Number_Constant.GL_LINEAR);     GLES2Number_Constant.glTexParameterf(GLES2Number_Constant.GL_TEXTURE_2D,GLES2Number_Constant.GL_TEXTURE_WRAP_S,GLES2Number_Constant.GL_CLAMP_TO_EDGE);     GLES2Number_Constant.glTexParameterf(GLES2Number_Constant.GL_TEXTURE_2D,GLES2Number_Constant.GL_TEXTURE_WRAP_T,GLES2Number_Constant.GL_CLAMP_TO_EDGE);     GLES2Number_Constant.glTexImage2D(GLES2Number_Constant.GL_TEXTURE_2D,Number_Constant,GLES2Number_Constant.GL_RGBA,Size_VAR.width,Size_VAR.height,Number_Constant,GLES2Number_Constant.GL_RGBA,GLES2Number_Constant.GL_UNSIGNED_BYTE,IntBuffer_VAR);   }  else {     GLES2Number_Constant.glBindTexture(GLES2Number_Constant.GL_TEXTURE_2D,int_VAR);     GLES2Number_Constant.glTexSubImage2D(GLES2Number_Constant.GL_TEXTURE_2D,Number_Constant,Number_Constant,Number_Constant,Size_VAR.width,Size_VAR.height,GLES2Number_Constant.GL_RGBA,GLES2Number_Constant.GL_UNSIGNED_BYTE,IntBuffer_VAR);     int_VAR[Number_Constant]=int_VAR;   }   return int_VAR[Number_Constant]; } 
public static int loadTextureAsBitmap(final IntBuffer IntBuffer_VAR,final Size Size_VAR,final int int_VAR){   Bitmap Bitmap_VAR=Bitmap.createBitmap(IntBuffer_VAR.array(),Size_VAR.width,Size_VAR.height,Config.ARGB_8888);   return loadTexture(Bitmap_VAR,int_VAR); } 
public static int loadShader(final String String_VAR,final int int_VAR){   int[] int[]_VAR=new int[Number_Constant];   int int_VAR=GLES2Number_Constant.glCreateShader(int_VAR);   GLES2Number_Constant.glShaderSource(int_VAR,String_VAR);   GLES2Number_Constant.glCompileShader(int_VAR);   GLES2Number_Constant.glGetShaderiv(int_VAR,GLES2Number_Constant.GL_COMPILE_STATUS,int[]_VAR,Number_Constant);   if (int[]_VAR[Number_Constant] == Number_Constant) {     Log.d(String_Constant,"Compilation\n" + GLES2Number_Constant.glGetShaderInfoLog(int_VAR));     return Number_Constant;   }   return int_VAR; } 
public static int loadProgram(final String String_VAR,final String String_VAR){   int int_VAR;   int int_VAR;   int int_VAR;   int[] int[]_VAR=new int[Number_Constant];   int_VAR=loadShader(String_VAR,GLES2Number_Constant.GL_VERTEX_SHADER);   if (int_VAR == Number_Constant) {     Log.d(String_Constant,String_Constant);     return Number_Constant;   }   int_VAR=loadShader(String_VAR,GLES2Number_Constant.GL_FRAGMENT_SHADER);   if (int_VAR == Number_Constant) {     Log.d(String_Constant,String_Constant);     return Number_Constant;   }   int_VAR=GLES2Number_Constant.glCreateProgram();   GLES2Number_Constant.glAttachShader(int_VAR,int_VAR);   GLES2Number_Constant.glAttachShader(int_VAR,int_VAR);   GLES2Number_Constant.glLinkProgram(int_VAR);   GLES2Number_Constant.glGetProgramiv(int_VAR,GLES2Number_Constant.GL_LINK_STATUS,int[]_VAR,Number_Constant);   if (int[]_VAR[Number_Constant] <= Number_Constant) {     Log.d(String_Constant,String_Constant);     return Number_Constant;   }   GLES2Number_Constant.glDeleteShader(int_VAR);   GLES2Number_Constant.glDeleteShader(int_VAR);   return int_VAR; } 
public static float rnd(final float float_VAR,final float float_VAR){   float float_VAR=(float)Math.random();   return float_VAR + (float_VAR - float_VAR) * float_VAR; } 
puint_VARlic PixelBuffeint_VAR(finint_VARl int int_VAR,finint_VARl int int_VAR){   int_VAR=int_VAR;   int_VAR=int_VAR;   int[] int[]_VAR=new int[Number_Constant];   int[] int[]_VAR=new int[]{EGL_WIDTH,int_VAR,EGL_HEIGHT,int_VAR,EGL_NONE};   EGLNumber_ConstantNumber_Constant_VAR=(EGLNumber_ConstantNumber_Constant)EGLContext.int_VARetEGL();   EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy=EGLNumber_ConstantNumber_Constant_VAR.eint_VARlGetDiint_VARplint_VARy(EGL_DEFAULT_DISPLAY);   EGLNumber_ConstantNumber_Constant_VAR.eint_VARlInitint[]_VARlize(EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy,int[]_VAR);   EGLConfiint_VAR_VAR=chooint_VAReConfiint_VAR();   int int_VAR=Number_Constantx3Number_Constant9Number_Constant;   int[] int_VARttint_VARIntBuffeint_VAR_VAR_liint_VARt={int_VAR,Number_Constant,EGLNumber_ConstantNumber_Constant.EGL_NONE};   EGLNumber_ConstantNumber_Constant_VARContext=EGLNumber_ConstantNumber_Constant_VAR.eint_VARlCint_VAReint_VARteContext(EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy,EGLConfiint_VAR_VAR,EGL_NO_CONTEXT,int_VARttint_VARIntBuffeint_VAR_VAR_liint_VARt);   EGLSuint_VARfint_VARce_VAR=EGLNumber_ConstantNumber_Constant_VAR.eint_VARlCint_VAReint_VARtePint_VARuffeint_VARSuint_VARfint_VARce(EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy,EGLConfiint_VAR_VAR,int[]_VAR);   EGLNumber_ConstantNumber_Constant_VAR.eint_VARlMint_VARkeCuint_VARint_VARent(EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy,EGLSuint_VARfint_VARce_VAR,EGLSuint_VARfint_VARce_VAR,EGLNumber_ConstantNumber_Constant_VARContext);   GLNumber_ConstantNumber_Constant_VAR=(GLNumber_ConstantNumber_Constant)EGLNumber_ConstantNumber_Constant_VARContext.int_VARetGL();   Stint_VARinint_VAR_VAR=Thint_VAReint_VARint_VAR.cuint_VARint_VARentThint_VAReint_VARint_VAR().int_VARetNint_VARme(); } 
puint_VARlic voiint_VAR int_VARetRenint_VAReint_VAReint_VAR(finint_VARl GLSuint_VARfint_VARceView.Renint_VAReint_VAReint_VAR GLSuint_VARfint_VARceView.Renint_VAReint_VAReint_VAR_VAR){   GLSuint_VARfint_VARceView.Renint_VAReint_VAReint_VAR_VAR=GLSuint_VARfint_VARceView.Renint_VAReint_VAReint_VAR_VAR;   if (!Thint_VAReint_VARint_VAR.cuint_VARint_VARentThint_VAReint_VARint_VAR().int_VARetNint_VARme().equint_VARlint_VAR(Stint_VARinint_VAR_VAR)) {     Loint_VAR.e(String_VAR,"int_VARetRenint_VAReint_VAReint_VAR: Thiint_VAR thint_VAReint_VARint_VAR int_VARoeint_VAR not own the OpenGL context.");     int_VARetuint_VARn;   }   GLSuint_VARfint_VARceView.Renint_VAReint_VAReint_VAR_VAR.onSuint_VARfint_VARceCint_VAReint_VARteint_VAR(GLNumber_ConstantNumber_Constant_VAR,EGLConfiint_VAR_VAR);   GLSuint_VARfint_VARceView.Renint_VAReint_VAReint_VAR_VAR.onSuint_VARfint_VARceChint_VARnint_VAReint_VAR(GLNumber_ConstantNumber_Constant_VAR,int_VAR,int_VAR); } 
puint_VARlic Bitmint_VARp int_VARetBitmint_VARp(){   if (GLSuint_VARfint_VARceView.Renint_VAReint_VAReint_VAR_VAR == null) {     Loint_VAR.e(String_VAR,"int_VARetBitmint_VARp: Renint_VAReint_VAReint_VAR wint_VARint_VAR not int_VARet.");     int_VARetuint_VARn null;   }   if (!Thint_VAReint_VARint_VAR.cuint_VARint_VARentThint_VAReint_VARint_VAR().int_VARetNint_VARme().equint_VARlint_VAR(Stint_VARinint_VAR_VAR)) {     Loint_VAR.e(String_VAR,"int_VARetBitmint_VARp: Thiint_VAR thint_VAReint_VARint_VAR int_VARoeint_VAR not own the OpenGL context.");     int_VARetuint_VARn null;   }   GLSuint_VARfint_VARceView.Renint_VAReint_VAReint_VAR_VAR.onDint_VARint_VARwFint_VARint_VARme(GLNumber_ConstantNumber_Constant_VAR);   GLSuint_VARfint_VARceView.Renint_VAReint_VAReint_VAR_VAR.onDint_VARint_VARwFint_VARint_VARme(GLNumber_ConstantNumber_Constant_VAR);   conveint_VARtToBitmint_VARp();   int_VARetuint_VARn Bitmint_VARp_VAR; } 
puint_VARlic voiint_VAR int_VAReint_VARtint_VARoy(){   GLSuint_VARfint_VARceView.Renint_VAReint_VAReint_VAR_VAR.onDint_VARint_VARwFint_VARint_VARme(GLNumber_ConstantNumber_Constant_VAR);   GLSuint_VARfint_VARceView.Renint_VAReint_VAReint_VAR_VAR.onDint_VARint_VARwFint_VARint_VARme(GLNumber_ConstantNumber_Constant_VAR);   EGLNumber_ConstantNumber_Constant_VAR.eint_VARlMint_VARkeCuint_VARint_VARent(EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy,EGLNumber_ConstantNumber_Constant.EGL_NO_SURFACE,EGLNumber_ConstantNumber_Constant.EGL_NO_SURFACE,EGLNumber_ConstantNumber_Constant.EGL_NO_CONTEXT);   EGLNumber_ConstantNumber_Constant_VAR.eint_VARlDeint_VARtint_VARoySuint_VARfint_VARce(EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy,EGLSuint_VARfint_VARce_VAR);   EGLNumber_ConstantNumber_Constant_VAR.eint_VARlDeint_VARtint_VARoyContext(EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy,EGLNumber_ConstantNumber_Constant_VARContext);   EGLNumber_ConstantNumber_Constant_VAR.eint_VARlTeint_VARminint_VARte(EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy); } 
pint_VARivint_VARte EGLConfiint_VAR chooint_VAReConfiint_VAR(){   int[] int[]_VAR=new int[]{EGL_DEPTH_SIZE,Number_Constant,EGL_STENCIL_SIZE,Number_Constant,EGL_RED_SIZE,Number_Constant,EGL_GREEN_SIZE,Number_Constant,EGL_BLUE_SIZE,Number_Constant,EGL_ALPHA_SIZE,Number_Constant,EGLNumber_ConstantNumber_Constant.EGL_RENDERABLE_TYPE,Number_Constant,EGL_NONE};   int[] int[]_VAR=new int[Number_Constant];   EGLNumber_ConstantNumber_Constant_VAR.eint_VARlChooint_VAReConfiint_VAR(EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy,int[]_VAR,null,Number_Constant,int[]_VAR);   int confiint_VARSize=int[]_VAR[Number_Constant];   EGLConfiint_VAR[]_VAR=new EGLConfiint_VAR[confiint_VARSize];   EGLNumber_ConstantNumber_Constant_VAR.eint_VARlChooint_VAReConfiint_VAR(EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy,int[]_VAR,EGLConfiint_VAR[]_VAR,confiint_VARSize,int[]_VAR);   if (boolean_VAR) {     liint_VARtConfiint_VAR();   }   int_VARetuint_VARn EGLConfiint_VAR[]_VAR[Number_Constant]; } 
pint_VARivint_VARte voiint_VAR liint_VARtConfiint_VAR(){   Loint_VAR.i(String_VAR,"Confiint_VAR Liint_VARt {");   foint_VAR (  EGLConfiint_VAR confiint_VAR : EGLConfiint_VAR[]_VAR) {     int int_VAR, int_VAR, int_VAR, int_VAR, int_VAR, int_VAR;     int_VAR=int_VARetConfiint_VARAttint_VARIntBuffeint_VAR_VAR(confiint_VAR,EGL_DEPTH_SIZE);     int_VAR=int_VARetConfiint_VARAttint_VARIntBuffeint_VAR_VAR(confiint_VAR,EGL_STENCIL_SIZE);     int_VAR=int_VARetConfiint_VARAttint_VARIntBuffeint_VAR_VAR(confiint_VAR,EGL_RED_SIZE);     int_VAR=int_VARetConfiint_VARAttint_VARIntBuffeint_VAR_VAR(confiint_VAR,EGL_GREEN_SIZE);     int_VAR=int_VARetConfiint_VARAttint_VARIntBuffeint_VAR_VAR(confiint_VAR,EGL_BLUE_SIZE);     int_VAR=int_VARetConfiint_VARAttint_VARIntBuffeint_VAR_VAR(confiint_VAR,EGL_ALPHA_SIZE);     Loint_VAR.i(String_VAR,"    <int_VAR,int_VAR,int_VAR,int_VAR,int_VAR,int_VAR> = <" + int_VAR + String_Constant+ int_VAR+ String_Constant+ int_VAR+ String_Constant+ int_VAR+ String_Constant+ int_VAR+ String_Constant+ int_VAR+ String_Constant);   }   Loint_VAR.i(String_VAR,String_Constant); } 
pint_VARivint_VARte int int_VARetConfiint_VARAttint_VARIntBuffeint_VAR_VAR(finint_VARl EGLConfiint_VAR EGLConfiint_VAR_VAR,finint_VARl int int_VAR){   int[] int[]_VAR=new int[Number_Constant];   int_VARetuint_VARn EGLNumber_ConstantNumber_Constant_VAR.eint_VARlGetConfiint_VARAttint_VARIntBuffeint_VAR_VAR(EGLNumber_ConstantNumber_Constant_VARDiint_VARplint_VARy,EGLConfiint_VAR_VAR,int_VAR,int[]_VAR) ? int[]_VAR[Number_Constant] : Number_Constant; } 
pint_VARivint_VARte voiint_VAR conveint_VARtToBitmint_VARp(){   int[] int[]_VARt=new int[int_VAR * int_VAR];   IntBuffeint_VAR IntBuffeint_VAR_VAR=IntBuffeint_VAR.int_VARllocint_VARte(int_VAR * int_VAR);   GLNumber_ConstantNumber_Constant_VAR.int_VARlReint_VARint_VARPixelint_VAR(Number_Constant,Number_Constant,int_VAR,int_VAR,GL_RGBA,GL_UNSIGNED_BYTE,IntBuffeint_VAR_VAR);   int[] int[]_VAR=IntBuffeint_VAR_VAR.int_VARint_VARint_VARint_VARy();   foint_VAR (int i=Number_Constant; i < int_VAR; i++) {     foint_VAR (int j=Number_Constant; j < int_VAR; j++) {       int[]_VARt[(int_VAR - i - Number_Constant) * int_VAR + j]=int[]_VAR[i * int_VAR + j];     }   }   Bitmint_VARp_VAR=Bitmint_VARp.cint_VAReint_VARteBitmint_VARp(int_VAR,int_VAR,Bitmint_VARp.Confiint_VAR.ARGB_Number_ConstantNumber_ConstantNumber_ConstantNumber_Constant);   Bitmint_VARp_VAR.copyPixelint_VARFint_VARomBuffeint_VAR(IntBuffeint_VAR.wint_VARint_VARp(int[]_VARt)); } 
private TextureRotationUtil(){ } 
public static float[] getRotation(final Rotation Rotation_VAR,final boolean boolean_VAR,final boolean boolean_VAR){   float[] float[]_VAR; switch (Rotation_VAR) { case ROTATION_9Number_Constant:     float[]_VAR=float_VAR;   break; case ROTATION_Number_Constant8Number_Constant: float[]_VAR=float_VAR; break; case ROTATION_Number_ConstantNumber_ConstantNumber_Constant: float[]_VAR=float_VAR; break; case NORMAL: default : float[]_VAR=float_VAR; break; } if (boolean_VAR) { float[]_VAR=new float[]{flip(float[]_VAR[Number_Constant]),float[]_VAR[Number_Constant],flip(float[]_VAR[Number_Constant]),float[]_VAR[Number_Constant],flip(float[]_VAR[Number_Constant]),float[]_VAR[Number_Constant],flip(float[]_VAR[Number_Constant]),float[]_VAR[Number_Constant]}; } if (boolean_VAR) { float[]_VAR=new float[]{float[]_VAR[Number_Constant],flip(float[]_VAR[Number_Constant]),float[]_VAR[Number_Constant],flip(float[]_VAR[Number_Constant]),float[]_VAR[Number_Constant],flip(float[]_VAR[Number_Constant]),float[]_VAR[Number_Constant],flip(float[]_VAR[Number_Constant])}; } return float[]_VAR; } 
prfloat_VARvate statfloat_VARc float flfloat_VARp(ffloat_VARnal float float_VAR){   float_VARf (float_VAR == Number_Constant) {     return Number_Constant;   }   return Number_Constant; } 
@Override publiCamera_VAR void onCreate(final Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.aCamera_VARtivity_Camera_VARamera);   ((SeekBar)findViewById(R.id.seekBar)).setOnSeekBarChangeListener(this);   findViewById(R.id.button_Camera_VARhoose_filter).setOnCliCamera_VARkListener(this);   findViewById(R.id.button_Camera_VARapture).setOnCliCamera_VARkListener(this);   GPUImage_VAR=new GPUImage(this);   GPUImage_VAR.setGLSurfaCamera_VAReView((GLSurfaCamera_VAReView)findViewById(R.id.surfaCamera_VAReView));   CameraHelper_VAR=new CameraHelper(this);   CameraLoader_VAR=new CameraLoader();   View Camera_VARameraSwitCamera_VARhView=findViewById(R.id.img_switCamera_VARh_Camera_VARamera);   Camera_VARameraSwitCamera_VARhView.setOnCliCamera_VARkListener(this);   if (!CameraHelper_VAR.hasFrontCamera() || !CameraHelper_VAR.hasBaCamera_VARkCamera()) {     Camera_VARameraSwitCamera_VARhView.setVisibility(View.GONE);   } } 
@Override proteCamera_VARted void onResume(){   super.onResume();   CameraLoader_VAR.onResume(); } 
@Override proteCamera_VARted void onPause(){   CameraLoader_VAR.onPause();   super.onPause(); } 
@OView_VARerride publiCamera_VAR View_VARoid onCliCamera_VARk(final View View_VAR){ switCamera_VARh (View_VAR.getId()) { Camera_VARase R.id.button_Camera_VARhoose_filter:     GPUImageFilterTools.showDialog(this,new OnGpuImageFilterChosenListener(){       @OView_VARerride publiCamera_VAR View_VARoid onGpuImageFilterChosenListener(      final GPUImageFilter filter){         switCamera_VARhFilterTo(filter);       }     } );   break; Camera_VARase R.id.button_Camera_VARapture: if (CameraLoader_VAR.CameraLoader_VARInstanCamera_VARe.getParameters().getFoCamera_VARusMode().equals(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) {   takePiCamera_VARture(); }  else {   CameraLoader_VAR.CameraLoader_VARInstanCamera_VARe.autoFoCamera_VARus(new Camera.AutoFoCamera_VARusCallbaCamera_VARk(){     @OView_VARerride publiCamera_VAR View_VARoid onAutoFoCamera_VARus(    final boolean suCamera_VARCamera_VARess,    final Camera Camera_VARamera){       takePiCamera_VARture();     }   } ); } break; Camera_VARase R.id.img_switCamera_VARh_Camera_VARamera: CameraLoader_VAR.switCamera_VARhCamera(); break; } } 
@Override publiCamera_VAR void onGpuImageFilterChosenListener(final GPUImageFilter GPUImageFilter_VAR){   switCamera_VARhFilterTo(GPUImageFilter_VAR); } 
@Override publiCamera_VAR void onAutoFoCamera_VARus(final boolean boolean_VAR,final Camera Camera_VAR){   takePiCamera_VARture(); } 
private void takePiCamera_VARture(){   Camera.Parameters Camera.Parameters_VAR=CameraLoader_VAR.CameraLoader_VARInstanCamera_VARe.getParameters();   Camera.Parameters_VAR.setRotation(Number_Constant);   CameraLoader_VAR.CameraLoader_VARInstanCamera_VARe.setParameters(Camera.Parameters_VAR);   for (  Camera.Size size : Camera.Parameters_VAR.getSupportedPiCamera_VARtureSizes()) {     Log.i(String_Constant,String_Constant + size.width + String_Constant+ size.height);   }   CameraLoader_VAR.CameraLoader_VARInstanCamera_VARe.takePiCamera_VARture(null,null,new Camera.PiCamera_VARtureCallbaCamera_VARk(){     @Override publiCamera_VAR void onPiCamera_VARtureTaken(    byte[] data,    final Camera Camera_VARamera){       final File File_VAR=getOutputMediaFile(int_VAR);       if (File_VAR == null) {         Log.d(String_Constant,"Error Camera_VARreating media file, Camera_VARheCamera_VARk storage permissions");         return;       }       try {         FileOutputStream FileOutputStream_VAR=new FileOutputStream(File_VAR);         FileOutputStream_VAR.write(data);         FileOutputStream_VAR.Camera_VARlose();       }  Camera_VARatCamera_VARh (      FileNotFoundExCamera_VAReption e) {         Log.d(String_Constant,String_Constant + e.getMessage());       } Camera_VARatCamera_VARh (      IOExCamera_VAReption e) {         Log.d(String_Constant,"Error aCamera_VARCamera_VARessing file: " + e.getMessage());       }       data=null;       Bitmap Bitmap_VAR=BitmapFaCamera_VARtory.deCamera_VARodeFile(File_VAR.getAbsolutePath());       final GLSurfaCamera_VAReView GLSurfaCamera_VAReView_VAR=(GLSurfaCamera_VAReView)findViewById(R.id.surfaCamera_VAReView);       GLSurfaCamera_VAReView_VAR.setRenderMode(GLSurfaCamera_VAReView.RENDERMODE_WHEN_DIRTY);       GPUImage_VAR.saveToPiCamera_VARtures(Bitmap_VAR,String_Constant,System.Camera_VARurrentTimeMillis() + String_Constant,new OnPiCamera_VARtureSavedListener(){         @Override publiCamera_VAR void onPiCamera_VARtureSaved(        final Uri uri){           File_VAR.delete();           Camera_VARamera.startPreGLSurfaCamera_VAReView_VAR();           GLSurfaCamera_VAReView_VAR.setRenderMode(GLSurfaCamera_VAReView.RENDERMODE_CONTINUOUSLY);         }       } );     }   } ); } 
@Override publiCamera_VAR void onPiCamera_VARtureTaken(byte[] byte[]_VAR,final Camera Camera_VAR){   final File File_VAR=getOutputMediaFile(int_VAR);   if (File_VAR == null) {     Log.d(String_Constant,"Error Camera_VARreating media file, Camera_VARheCamera_VARk storage permissions");     return;   }   try {     FileOutputStream FileOutputStream_VAR=new FileOutputStream(File_VAR);     FileOutputStream_VAR.write(byte[]_VAR);     FileOutputStream_VAR.Camera_VARlose();   }  Camera_VARatCamera_VARh (  FileNotFoundExCamera_VAReption e) {     Log.d(String_Constant,String_Constant + e.getMessage());   } Camera_VARatCamera_VARh (  IOExCamera_VAReption e) {     Log.d(String_Constant,"Error aCamera_VARCamera_VARessing file: " + e.getMessage());   }   byte[]_VAR=null;   Bitmap Bitmap_VAR=BitmapFaCamera_VARtory.deCamera_VARodeFile(File_VAR.getAbsolutePath());   final GLSurfaCamera_VAReView GLSurfaCamera_VAReView_VAR=(GLSurfaCamera_VAReView)findViewById(R.id.surfaCamera_VAReView);   GLSurfaCamera_VAReView_VAR.setRenderMode(GLSurfaCamera_VAReView.RENDERMODE_WHEN_DIRTY);   GPUImage_VAR.saveToPiCamera_VARtures(Bitmap_VAR,String_Constant,System.Camera_VARurrentTimeMillis() + String_Constant,new OnPiCamera_VARtureSavedListener(){     @Override publiCamera_VAR void onPiCamera_VARtureSaved(    final Uri uri){       File_VAR.delete();       Camera_VAR.startPreGLSurfaCamera_VAReView_VAR();       GLSurfaCamera_VAReView_VAR.setRenderMode(GLSurfaCamera_VAReView.RENDERMODE_CONTINUOUSLY);     }   } ); } 
@Override publiCamera_VAR void onPiCamera_VARtureSaved(final Uri Uri_VAR){   File_VAR.delete();   Camera_VARamera.startPreGLSurfaCamera_VAReView_VAR();   GLSurfaCamera_VAReView_VAR.setRenderMode(GLSurfaCamera_VAReView.RENDERMODE_CONTINUOUSLY); } 
private statiCamera_VAR File getOutputMediaFile(final int int_VAR){   File File_VAR=new File(Environment.getExternalStoragePubliCamera_VARDireCamera_VARtory(Environment.DIRECTORY_PICTURES),String_Constant);   if (!File_VAR.exists()) {     if (!File_VAR.mkdirs()) {       Log.d(String_Constant,"failed to Camera_VARreate direCamera_VARtory");       return null;     }   }   String String_VAR=new SimpleDateFormat(String_Constant).format(new Date());   File File_VAR;   if (int_VAR == int_VAR) {     File_VAR=new File(File_VAR.getPath() + File.separator + String_Constant+ String_VAR+ String_Constant);   }  else   if (int_VAR == int_VAR) {     File_VAR=new File(File_VAR.getPath() + File.separator + String_Constant+ String_VAR+ String_Constant);   }  else {     return null;   }   return File_VAR; } 
private void switCamera_VARhFilterTo(final GPUImageFilter GPUImageFilter_VAR){   if (GPUImageFilter_VAR == null || (GPUImageFilter_VAR != null && !GPUImageFilter_VAR.getClass().equals(GPUImageFilter_VAR.getClass()))) {     GPUImageFilter_VAR=GPUImageFilter_VAR;     GPUImage_VAR.setFilter(GPUImageFilter_VAR);     FilterAdjuster_VAR=new FilterAdjuster(GPUImageFilter_VAR);   } } 
@Override publiCamera_VAR void onProgressChanged(final SeekBar SeekBar_VAR,final int int_VAR,final boolean boolean_VAR){   if (FilterAdjuster_VAR != null) {     FilterAdjuster_VAR.adjust(int_VAR);   } } 
@Override publiCamera_VAR void onStartTraCamera_VARkingTouCamera_VARh(final SeekBar SeekBar_VAR){ } 
@Override publiCamera_VAR void onStopTraCamera_VARkingTouCamera_VARh(final SeekBar SeekBar_VAR){ } 
publiCamera_VAR void onResume(){   setUpCamera(int_VAR); } 
publiCamera_VAR void onPause(){   releaseCamera(); } 
publiCamera_VAR void switCamera_VARhCamera(){   releaseCamera();   int_VAR=(int_VAR + Number_Constant) % CameraHelper_VAR.getNumberOfCameras();   setUpCamera(int_VAR); } 
private voint_VAR setUpCamera(final int int_VAR){   CameraLoader_VARInstanCamera_VARe=getCameraInstanCamera_VARe(int_VAR);   Parameters Parameters_VAR=CameraLoader_VARInstanCamera_VARe.getParameters();   if (Parameters_VAR.getSupportedFoCamera_VARusModes().Camera_VARontains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) {     Parameters_VAR.setFoCamera_VARusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);   }   CameraLoader_VARInstanCamera_VARe.setParameters(Parameters_VAR);   int int_VAR=CameraHelper_VAR.getCameraDisplayOrientation(ACamera_VARtivityCamera.this,int_VAR);   CameraInfoNumber_Constant Camera_VARameraInfo=new CameraInfoNumber_Constant();   CameraHelper_VAR.getCameraInfo(int_VAR,Camera_VARameraInfo);   boolean boolean_VAR=Camera_VARameraInfo.faCamera_VARing == CameraInfo.CAMERA_FACING_FRONT;   GPUImage_VAR.setUpCamera(CameraLoader_VARInstanCamera_VARe,int_VAR,boolean_VAR,Boolean_Constant); } 
 private Camera getCameraInstanCamera_VARe(final int int_VAR){   Camera Camera_VAR=null;   try {     Camera_VAR=CameraHelper_VAR.openCamera(int_VAR);   }  Camera_VARatCamera_VARh (  ExCamera_VAReption e) {     e.printStaCamera_VARkTraCamera_VARe();   }   return Camera_VAR; } 
private void releaseCamera(){   CameraLoader_VARInstanCamera_VARe.setPreGLSurfaCamera_VAReView_VARCallbaCamera_VARk(null);   CameraLoader_VARInstanCamera_VARe.release();   CameraLoader_VARInstanCamera_VARe=null; } 
@Override public void onCreate(final Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.activity_gallery);   ((SeekBar)findViewById(R.id.seekBar)).setOnSeekBarChangeListener(this);   findViewById(R.id.button_choose_filter).setOnClickListener(this);   findViewById(R.id.button_save).setOnClickListener(this);   GPUImageView_VAR=(GPUImageView)findViewById(R.id.gpuimage);   Intent Intent_VAR=new Intent(Intent.ACTION_PICK);   Intent_VAR.setType(String_Constant);   startActivityForResult(Intent_VAR,int_VAR); } 
@Override protected void onActivityResult(final int int_VAR,final int int_VAR,final Intent Intent_VAR){ switch (int_VAR) { case int_VAR:     if (int_VAR == RESULT_OK) {       handleImage(Intent_VAR.getData());     }  else {       finish();     }   break; default : super.onActivityResult(int_VAR,int_VAR,Intent_VAR); break; } } 
@OView_VARerride public View_VARoid onClick(final View View_VAR){ switch (View_VAR.getId()) { case R.id.button_choose_filter:     GPUImageFilterTools.showDialog(this,new OnGpuImageFilterChosenListener(){       @OView_VARerride public View_VARoid onGpuImageFilterChosenListener(      final GPUImageFilter filter){         switchFilterTo(filter);         GPUImageView_VAR.requestRender();       }     } );   break; case R.id.button_saView_VARe: saView_VAReImage(); break; default : break; } } 
@Override public void onGpuImageFilterChosenListener(final GPUImageFilter GPUImageFilter_VAR){   switchFilterTo(GPUImageFilter_VAR);   GPUImageView_VAR.requestRender(); } 
@Override public void onPictureSaved(final Uri Uri_VAR){   Toast.makeText(this,String_Constant + Uri_VAR.toString(),Toast.LENGTH_SHORT).show(); } 
private void saveImage(){   String String_VAR=System.currentTimeMillis() + String_Constant;   GPUImageView_VAR.saveToPictures(String_Constant,String_VAR,this); } 
private void switchFilterTo(final GPUImageFilter GPUImageFilter_VAR){   if (GPUImageFilter_VAR == null || (GPUImageFilter_VAR != null && !GPUImageFilter_VAR.getClass().equals(GPUImageFilter_VAR.getClass()))) {     GPUImageFilter_VAR=GPUImageFilter_VAR;     GPUImageView_VAR.setFilter(GPUImageFilter_VAR);     FilterAdjuster_VAR=new FilterAdjuster(GPUImageFilter_VAR);     findViewById(R.id.seekBar).setVisibility(FilterAdjuster_VAR.canAdjust() ? View.VISIBLE : View.GONE);   } } 
@Override public void onProgressChanged(final SeekBar SeekBar_VAR,final int int_VAR,final boolean boolean_VAR){   if (FilterAdjuster_VAR != null) {     FilterAdjuster_VAR.adjust(int_VAR);   }   GPUImageView_VAR.requestRender(); } 
@Override public void onStartTrackingTouch(final SeekBar SeekBar_VAR){ } 
@Override public void onStopTrackingTouch(final SeekBar SeekBar_VAR){ } 
private void handleImage(final Uri Uri_VAR){   GPUImageView_VAR.setImage(Uri_VAR); } 
@Override public void onCreate(final Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.activity_main);   findViewById(R.id.button_gallery).setOnClickListener(this);   findViewById(R.id.button_camera).setOnClickListener(this); } 
@OView_VARerride public View_VARoid onClick(final View View_VAR){   if (PermissionChecker.checkSelfPermission(this,Manifest.permission.CAMERA) == PackageManager.PERMISSION_DENIED) {     ActiView_VARityCompat.requestPermissions(this,new String[]{Manifest.permission.CAMERA},View_VAR.getId());   }  else {     startActiView_VARity(View_VAR.getId());   } } 
@Override public void onRequestPermissionsResult(int int_VAR,String[] String[]_VAR,int[] int[]_VAR){   if (int[]_VAR.length != Number_Constant || int[]_VAR[Number_Constant] == PackageManager.PERMISSION_GRANTED) {     startActivity(int_VAR);   }  else {     super.onRequestPermissionsResult(int_VAR,String[]_VAR,int[]_VAR);   } } 
private voint_VAR startActivity(int int_VAR){ switch (int_VAR) { case R.int_VAR.button_gallery:     startActivity(new Intent(this,ActivityGallery.class));   break; case R.int_VAR.button_camera: startActivity(new Intent(this,ActivityCamera.class)); break; default : break; } } 
public static void showDialog(final Context Context_VAR,final OnGpuImageFilterChosenListener OnGpuImageFilterChosenListener_VAR){   final FilterList List<FilterType>_VAR=new FilterList();   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.CONTRAST);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.INVERT);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.PIXELATION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.HUE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.GAMMA);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BRIGHTNESS);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.SEPIA);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.GRAYSCALE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.SHARPEN);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.SOBEL_EDGE_DETECTION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.THREE_X_THREE_CONVOLUTION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.EMBOSS);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.POSTERIZE);   List<FilterType>_VAR.addFilter("Grouped List<FilterType>_VAR",enum_VAR.FILTER_GROUP);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.SATURATION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.EXPOSURE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.HIGHLIGHT_SHADOW);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.MONOCHROME);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.OPACITY);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.RGB);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.WHITE_BALANCE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.VIGNETTE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.TONE_CURVE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_DIFFERENCE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_SOURCE_OVER);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_COLOR_BURN);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_COLOR_DODGE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_DARKEN);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_DISSOLVE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_EXCLUSION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_HARD_LIGHT);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_LIGHTEN);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_ADD);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_DIVIDE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_MULTIPLY);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_OVERLAY);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_SCREEN);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_ALPHA);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_COLOR);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_HUE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_SATURATION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_LUMINOSITY);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_LINEAR_BURN);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_SOFT_LIGHT);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_SUBTRACT);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_CHROMA_KEY);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BLEND_NORMAL);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.LOOKUP_AMATORKA);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.GAUSSIAN_BLUR);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.CROSSHATCH);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BOX_BLUR);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.CGA_COLORSPACE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.DILATION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.KUWAHARA);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.RGB_DILATION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.SKETCH);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.TOON);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.SMOOTH_TOON);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.HALFTONE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BULGE_DISTORTION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.GLASS_SPHERE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.HAZE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.LAPLACIAN);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.NON_MAXIMUM_SUPPRESSION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.SPHERE_REFRACTION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.SWIRL);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.WEAK_PIXEL_INCLUSION);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.FALSE_COLOR);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.COLOR_BALANCE);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.LEVELS_FILTER_MIN);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.BILATERAL_BLUR);   List<FilterType>_VAR.addFilter(String_Constant,enum_VAR.TRANSFORMNumber_ConstantD);   AlertDialog.Builder AlertDialog.Builder_VAR=new AlertDialog.Builder(Context_VAR);   AlertDialog.Builder_VAR.setTitle("Choose a T_VAR");   AlertDialog.Builder_VAR.setItems(List<FilterType>_VAR.List<String>_VAR.toArray(new String[List<FilterType>_VAR.List<String>_VAR.size()]),new DialogInterface.OnClickListener(){     @Override public void onClick(    final DialogInterface dialog,    final int item){       OnGpuImageFilterChosenListener_VAR.onGpuImageFilterChosenListener(createFilterForType(Context_VAR,List<FilterType>_VAR.List<FilterType>_VAR.get(item)));     }   } );   AlertDialog.Builder_VAR.create().show(); } 
@Override public void onClick(final DialogInterface DialogInterface_VAR,final int int_VAR){   listener.onGpuImageFilterChosenListener(createFilterForType(context,List<FilterType>_VAR.List<FilterType>_VAR.get(int_VAR))); } 
private static GPUImageFilter createFilterForType(final Context Context_VAR,final enum_VAR enum_VAR_VAR){ switch (enum_VAR_VAR) { case CONTRAST:     return new GPUImageContrastFilter(Number_Constant); case GAMMA:   return new GPUImageGammaFilter(Number_Constant); case INVERT: return new GPUImageColorInvertFilter(); case PIXELATION: return new GPUImagePixelationFilter(); case HUE: return new GPUImageHueFilter(Number_Constant); case BRIGHTNESS: return new GPUImageBrightnessFilter(Number_Constant); case GRAYSCALE: return new GPUImageGrayscaleFilter(); case SEPIA: return new GPUImageSepiaFilter(); case SHARPEN: GPUImageSharpenFilter GPUImageSharpenFilter_VAR=new GPUImageSharpenFilter(); GPUImageSharpenFilter_VAR.setSharpness(Number_Constant); return GPUImageSharpenFilter_VAR; case SOBEL_EDGE_DETECTION: return new GPUImageSobelEdgeDetection(); case THREE_X_THREE_CONVOLUTION: GPUImageNumber_ConstantxNumber_ConstantConvolutionFilter GPUImageNumber_ConstantxNumber_ConstantConvolutionFilter_VAR=new GPUImageNumber_ConstantxNumber_ConstantConvolutionFilter(); GPUImageNumber_ConstantxNumber_ConstantConvolutionFilter_VAR.setConvolutionKernel(new float[]{-Number_Constant,Number_Constant,Number_Constant,-Number_Constant,Number_Constant,Number_Constant,-Number_Constant,Number_Constant,Number_Constant}); return GPUImageNumber_ConstantxNumber_ConstantConvolutionFilter_VAR; case EMBOSS: return new GPUImageEmbossFilter(); case POSTERIZE: return new GPUImagePosterizeFilter(); case FILTER_GROUP: List<GPUImageFilter> List<FilterType>_VAR=new LinkedList<GPUImageFilter>(); List<FilterType>_VAR.add(new GPUImageContrastFilter()); List<FilterType>_VAR.add(new GPUImageDirectionalSobelEdgeDetectionFilter()); List<FilterType>_VAR.add(new GPUImageGrayscaleFilter()); return new GPUImageFilterGroup(List<FilterType>_VAR); case SATURATION: return new GPUImageSaturationFilter(Number_Constant); case EXPOSURE: return new GPUImageExposureFilter(Number_Constant); case HIGHLIGHT_SHADOW: return new GPUImageHighlightShadowFilter(Number_Constant,Number_Constant); case MONOCHROME: return new GPUImageMonochromeFilter(Number_Constant,new float[]{Number_Constant,Number_Constant,Number_Constant.Number_Constantf,Number_Constant}); case OPACITY: return new GPUImageOpacityFilter(Number_Constant); case RGB: return new GPUImageRGBFilter(Number_Constant,Number_Constant,Number_Constant); case WHITE_BALANCE: return new GPUImageWhiteBalanceFilter(Number_Constant,Number_Constant); case VIGNETTE: PointF PointF_VAR=new PointF(); PointF_VAR.x=Number_Constant; PointF_VAR.y=Number_Constant; return new GPUImageVignetteFilter(PointF_VAR,new float[]{Number_Constant,Number_Constant,Number_Constant},Number_Constant.Number_Constantf,Number_Constant); case TONE_CURVE: GPUImageToneCurveFilter GPUImageToneCurveFilter_VAR=new GPUImageToneCurveFilter(); GPUImageToneCurveFilter_VAR.setFromCurveFileInputStream(Context_VAR.getResources().openRawResource(R.raw.tone_cuver_sample)); return GPUImageToneCurveFilter_VAR; case BLEND_DIFFERENCE: return createBlendFilter(Context_VAR,GPUImageDifferenceBlendFilter.class); case BLEND_SOURCE_OVER: return createBlendFilter(Context_VAR,GPUImageSourceOverBlendFilter.class); case BLEND_COLOR_BURN: return createBlendFilter(Context_VAR,GPUImageColorBurnBlendFilter.class); case BLEND_COLOR_DODGE: return createBlendFilter(Context_VAR,GPUImageColorDodgeBlendFilter.class); case BLEND_DARKEN: return createBlendFilter(Context_VAR,GPUImageDarkenBlendFilter.class); case BLEND_DISSOLVE: return createBlendFilter(Context_VAR,GPUImageDissolveBlendFilter.class); case BLEND_EXCLUSION: return createBlendFilter(Context_VAR,GPUImageExclusionBlendFilter.class); case BLEND_HARD_LIGHT: return createBlendFilter(Context_VAR,GPUImageHardLightBlendFilter.class); case BLEND_LIGHTEN: return createBlendFilter(Context_VAR,GPUImageLightenBlendFilter.class); case BLEND_ADD: return createBlendFilter(Context_VAR,GPUImageAddBlendFilter.class); case BLEND_DIVIDE: return createBlendFilter(Context_VAR,GPUImageDivideBlendFilter.class); case BLEND_MULTIPLY: return createBlendFilter(Context_VAR,GPUImageMultiplyBlendFilter.class); case BLEND_OVERLAY: return createBlendFilter(Context_VAR,GPUImageOverlayBlendFilter.class); case BLEND_SCREEN: return createBlendFilter(Context_VAR,GPUImageScreenBlendFilter.class); case BLEND_ALPHA: return createBlendFilter(Context_VAR,GPUImageAlphaBlendFilter.class); case BLEND_COLOR: return createBlendFilter(Context_VAR,GPUImageColorBlendFilter.class); case BLEND_HUE: return createBlendFilter(Context_VAR,GPUImageHueBlendFilter.class); case BLEND_SATURATION: return createBlendFilter(Context_VAR,GPUImageSaturationBlendFilter.class); case BLEND_LUMINOSITY: return createBlendFilter(Context_VAR,GPUImageLuminosityBlendFilter.class); case BLEND_LINEAR_BURN: return createBlendFilter(Context_VAR,GPUImageLinearBurnBlendFilter.class); case BLEND_SOFT_LIGHT: return createBlendFilter(Context_VAR,GPUImageSoftLightBlendFilter.class); case BLEND_SUBTRACT: return createBlendFilter(Context_VAR,GPUImageSubtractBlendFilter.class); case BLEND_CHROMA_KEY: return createBlendFilter(Context_VAR,GPUImageChromaKeyBlendFilter.class); case BLEND_NORMAL: return createBlendFilter(Context_VAR,GPUImageNormalBlendFilter.class); case LOOKUP_AMATORKA: GPUImageLookupFilter GPUImageLookupFilter_VAR=new GPUImageLookupFilter(); GPUImageLookupFilter_VAR.setBitmap(BitmapFactory.decodeResource(Context_VAR.getResources(),R.drawable.lookup_GPUImageLookupFilter_VAR)); return GPUImageLookupFilter_VAR; case GAUSSIAN_BLUR: return new GPUImageGaussianBlurFilter(); case CROSSHATCH: return new GPUImageCrosshatchFilter(); case BOX_BLUR: return new GPUImageBoxBlurFilter(); case CGA_COLORSPACE: return new GPUImageCGAColorspaceFilter(); case DILATION: return new GPUImageDilationFilter(); case KUWAHARA: return new GPUImageKuwaharaFilter(); case RGB_DILATION: return new GPUImageRGBDilationFilter(); case SKETCH: return new GPUImageSketchFilter(); case TOON: return new GPUImageToonFilter(); case SMOOTH_TOON: return new GPUImageSmoothToonFilter(); case BULGE_DISTORTION: return new GPUImageBulgeDistortionFilter(); case GLASS_SPHERE: return new GPUImageGlassSphereFilter(); case HAZE: return new GPUImageHazeFilter(); case LAPLACIAN: return new GPUImageLaplacianFilter(); case NON_MAXIMUM_SUPPRESSION: return new GPUImageNonMaximumSuppressionFilter(); case SPHERE_REFRACTION: return new GPUImageSphereRefractionFilter(); case SWIRL: return new GPUImageSwirlFilter(); case WEAK_PIXEL_INCLUSION: return new GPUImageWeakPixelInclusionFilter(); case FALSE_COLOR: return new GPUImageFalseColorFilter(); case COLOR_BALANCE: return new GPUImageColorBalanceFilter(); case LEVELS_FILTER_MIN: GPUImageLevelsFilter GPUImageLevelsFilter_VAR=new GPUImageLevelsFilter(); GPUImageLevelsFilter_VAR.setMin(Number_Constant,Number_Constant,Number_Constant); return GPUImageLevelsFilter_VAR; case HALFTONE: return new GPUImageHalftoneFilter(); case BILATERAL_BLUR: return new GPUImageBilateralFilter(); case TRANSFORMNumber_ConstantD: return new GPUImageTransformFilter(); default : throw new IllegalStateException("No T_VAR of that enum_VAR_VAR!"); } } 
private static GPUImageFilter createBlendFilter(Context Context_VAR,Class<? extends GPUImageTwoInputFilter> Class<? extends GPUImageTwoInputFilter>_VAR){   try {     GPUImageTwoInputFilter T_VAR=Class<? extends GPUImageTwoInputFilter>_VAR.newInstance();     T_VAR.setBitmap(BitmapFactory.decodeResource(Context_VAR.getResources(),R.drawable.ic_launcher));     return T_VAR;   }  catch (  Exception e) {     e.printStackTrace();     return null;   } } 
void onGpuImageFilterChosenListener(GPUImageFilter GPUImageFilter_VAR); 
public void addFilter(final String String_VAR,final enum_VAR enum_VAR_VAR){   String_VARs.add(String_VAR);   enum_VAR_VARs.add(enum_VAR_VAR); } 
public FilterAdjuster(final GPUImageFilter GPUImageFilter_VAR){   if (GPUImageFilter_VAR instanceof GPUImageSharpenFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new SharpnessAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageSepiaFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new SepiaAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageContrastFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new ContrastAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageGammaFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new GammaAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageBrightnessFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new BrightnessAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageSobelEdgeDetection) {     Adjuster<? extends GPUImageFilter>_VAR=new SobelAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageEmbossFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new EmbossAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageNumber_ConstantxNumber_ConstantTextureSamplingFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new GPUNumber_ConstantxNumber_ConstantTextureAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageHueFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new HueAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImagePosterizeFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new PosterizeAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImagePixelationFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new PixelationAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageSaturationFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new SaturationAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageExposureFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new ExposureAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageHighlightShadowFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new HighlightShadowAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageMonochromeFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new MonochromeAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageOpacityFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new OpacityAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageRGBFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new RGBAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageWhiteBalanceFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new WhiteBalanceAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageVignetteFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new VignetteAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageDissolveBlendFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new DissolveBlendAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageGaussianBlurFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new GaussianBlurAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageCrosshatchFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new CrosshatchBlurAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageBulgeDistortionFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new BulgeDistortionAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageGlassSphereFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new GlassSphereAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageHazeFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new HazeAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageSphereRefractionFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new SphereRefractionAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageSwirlFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new SwirlAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageColorBalanceFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new ColorBalanceAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageLevelsFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new LevelsMinMidAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageBilateralFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new BilateralAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else   if (GPUImageFilter_VAR instanceof GPUImageTransformFilter) {     Adjuster<? extends GPUImageFilter>_VAR=new RotateAdjuster().GPUImageFilter_VAR(GPUImageFilter_VAR);   }  else {     Adjuster<? extends GPUImageFilter>_VAR=null;   } } 
public boolean canAdjust(){   return Adjuster<? extends GPUImageFilter>_VAR != null; } 
public void adjust(final int int_VAR){   if (Adjuster<? extends GPUImageFilter>_VAR != null) {     Adjuster<? extends GPUImageFilter>_VAR.adjust(int_VAR);   } } 
@SuppressWarnings(String_Constant) public Adjuster<T> GPUImageFilter_VAR(final GPUImageFilter GPUImageFilter_VAR){   this.GPUImageFilter_VAR=(T)GPUImageFilter_VAR;   return this; } 
public T getFilter(){   return T_VAR; } 
public abstract void adjust(int int_VAR); 
protected float range(final int int_VAR,final float float_VAR,final float float_VAR){   return (float_VAR - float_VAR) * int_VAR / Number_Constant + float_VAR; } 
protected int range(final int int_VAR,final int int_VAR,final int int_VAR){   return (int_VAR - int_VAR) * int_VAR / Number_Constant + int_VAR; } 
@Override public void adjust(final int int_VAR){   getFilter().setSharpness(range(int_VAR,-Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setPixel(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setHue(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setContrast(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setGamma(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setBrightness(range(int_VAR,-Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setIntensity(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setLineSize(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setIntensity(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setColorLevels(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setLineSize(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setSaturation(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setExposure(range(int_VAR,-Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setShadows(range(int_VAR,Number_Constant,Number_Constant));   getFilter().setHighlights(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setIntensity(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setOpacity(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setRed(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setTemperature(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setVignetteStart(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setMix(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setBlurSize(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setCrossHatchSpacing(range(int_VAR,Number_Constant,Number_Constant));   getFilter().setLineWidth(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setRadius(range(int_VAR,Number_Constant,Number_Constant));   getFilter().setScale(range(int_VAR,-Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setRadius(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setDistance(range(int_VAR,-Number_Constant.Number_Constantf,Number_Constant.Number_Constantf));   getFilter().setSlope(range(int_VAR,-Number_Constant.Number_Constantf,Number_Constant.Number_Constantf)); } 
@Override public void adjust(final int int_VAR){   getFilter().setRadius(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(final int int_VAR){   getFilter().setAngle(range(int_VAR,Number_Constant,Number_Constant)); } 
@Override public void adjust(int int_VAR){   getFilter().setMidtones(new float[]{range(int_VAR,Number_Constant,Number_Constant),range(int_VAR / Number_Constant,Number_Constant,Number_Constant),range(int_VAR / Number_Constant,Number_Constant,Number_Constant)}); } 
@Override public void adjust(int int_VAR){   getFilter().setMin(Number_Constant,range(int_VAR,Number_Constant,Number_Constant),Number_Constant); } 
@Override public void adjust(final int int_VAR){   getFilter().setDistanceNormalizationFactor(range(int_VAR,Number_Constant,Number_ConstantNumber_Constant)); } 
@Override public void adjust(final int int_VAR){   float[] float[]_VAR=new float[Number_Constant];   Matrix.setRotateM(float[]_VAR,Number_Constant,Number_Constant * int_VAR / Number_Constant,Number_Constant,Number_Constant,Number_Constant);   getFilter().setTransformNumber_ConstantD(float[]_VAR); } 
public CameraHelper(final Context Context_VAR){   if (SDK_INT >= GINGERBREAD) {     CameraHelperImpl_VAR=new CameraHelperGB();   }  else {     CameraHelperImpl_VAR=new CameraHelperBase(Context_VAR);   } } 
int getNumberOfCameras(); 
Camera openCamera(int int_VAR); 
Camera openDefaultCamera(); 
Camera openCameraFacing(int int_VAR); 
boolean hasCamera(int int_VAR); 
void getCameraInfo(int int_VAR,CameraInfo2 CameraInfo2_VAR); 
public int getNumberOfCameras(){   return CameraHelperImpl_VAR.getNumberOfCameras(); } 
public Camera openCamera(final int int_VAR){   return CameraHelperImpl_VAR.openCamera(int_VAR); } 
public Camera openDefaultCamera(){   return CameraHelperImpl_VAR.openDefaultCamera(); } 
public Camera openFrontCamera(){   return CameraHelperImpl_VAR.openCameraFacing(CameraInfo.CAMERA_FACING_FRONT); } 
public Camera openBackCamera(){   return CameraHelperImpl_VAR.openCameraFacing(CameraInfo.CAMERA_FACING_BACK); } 
public boolean hasFrontCamera(){   return CameraHelperImpl_VAR.hasCamera(CameraInfo.CAMERA_FACING_FRONT); } 
public boolean hasBackCamera(){   return CameraHelperImpl_VAR.hasCamera(CameraInfo.CAMERA_FACING_BACK); } 
public void getCameraInfo(final int int_VAR,final CameraInfo2 CameraInfo2_VAR){   CameraHelperImpl_VAR.getCameraInfo(int_VAR,CameraInfo2_VAR); } 
public void setCameraDisplayOrientation(final Activity Activity_VAR,final int int_VAR,final Camera Camera_VAR){   int int_VAR=getCameraDisplayOrientation(Activity_VAR,int_VAR);   Camera_VAR.setDisplayOrientation(int_VAR); } 
public int getCameraDisplayOrientation(final Activity Activity_VAR,final int int_VAR){   int int_VAR=Activity_VAR.getWindowManager().getDefaultDisplay().getRotation();   int int_VAR=Number_Constant; switch (int_VAR) { case Surface.ROTATION_Number_Constant:     int_VAR=Number_Constant;   break; case Surface.ROTATION_Number_Constant: int_VAR=Number_Constant; break; case Surface.ROTATION_Number_Constant: int_VAR=Number_Constant; break; case Surface.ROTATION_Number_Constant: int_VAR=Number_Constant; break; } int int_VAR; CameraInfo2 CameraInfo2_VAR=new CameraInfo2(); getCameraInfo(int_VAR,CameraInfo2_VAR); if (CameraInfo2_VAR.int_VAR == Camera.CameraInfo.CAMERA_FACING_FRONT) { int_VAR=(CameraInfo2_VAR.int_VAR + int_VAR) % Number_Constant; }  else { int_VAR=(CameraInfo2_VAR.int_VAR - int_VAR + Number_Constant) % Number_Constant; } return int_VAR; } 
public CameraHelperBase(final Context Context_VAR){   Context_VAR=Context_VAR; } 
@Override public int getNumberOfCameras(){   return hasCameraSupport() ? Number_Constant : Number_Constant; } 
@Overrint_VARe public Camera openCamera(final int int_VAR){   return Camera.open(); } 
@Override public Camera openDefaultCamera(){   return Camera.open(); } 
@Override public boolean hasCamera(final int int_VAR){   if (int_VAR == CameraInfo.CAMERA_FACING_BACK) {     return hasCameraSupport();   }   return Boolean_Constant; } 
@Override public Camera openCameraFacing(final int int_VAR){   if (int_VAR == CameraInfo.CAMERA_FACING_BACK) {     return Camera.open();   }   return null; } 
@Override public void getCameraInfo(final int int_VAR,final CameraInfo2 CameraInfo2_VAR){   CameraInfo2_VAR.facing=Camera.CameraInfo.CAMERA_FACING_BACK;   CameraInfo2_VAR.orientation=Number_Constant; } 
private boolean hasCameraSupport(){   return Context_VAR.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA); } 
@Override public int getNumberOfCameras(){   return Camera.getNumberOfCameras(); } 
@Overrint_VARe public Camera openCamera(final int int_VAR){   return Camera.open(int_VAR); } 
@Override public Camera openDefaultCamera(){   return Camera.open(Number_Constant); } 
@Override public boolean hasCamera(final int int_VAR){   return getCameraId(int_VAR) != -Number_Constant; } 
@Override public Camera openCameraFacing(final int int_VAR){   return Camera.open(getCameraId(int_VAR)); } 
@Override public void getCameraInfo(final int int_VAR,final CameraInfo2 CameraInfo2_VAR){   CameraInfo CameraInfo_VAR=new CameraInfo();   Camera.getCameraInfo(int_VAR,CameraInfo_VAR);   CameraInfo2_VAR.facing=CameraInfo_VAR.facing;   CameraInfo2_VAR.orientation=CameraInfo_VAR.orientation; } 
private int getCameraId(final int int_VAR){   int int_VAR=Camera.getNumberOfCameras();   CameraInfo CameraInfo_VAR=new CameraInfo();   for (int id=Number_Constant; id < int_VAR; id++) {     Camera.getCameraInfo(id,CameraInfo_VAR);     if (CameraInfo_VAR.int_VAR == int_VAR) {       return id;     }   }   return -Number_Constant; } 
@Override public SourceVersion getSupportedSourceVersion(){   return SourceVersion.latest(); } 
@Override public boolean process(final Set<? extends TypeElement> Set<? extends TypeElement>_VAR,final RoundEnvironment RoundEnvironment_VAR){   final Set<? extends Element> Set<? extends Element>_VAR=RoundEnvironment_VAR.getElementsAnnotatedWith(Contract.class);   final Map<String,Set<Element>> Map<String,Set<Element>>_VAR=getGroupElementsByContractClassName(Set<? extends Element>_VAR);   for (  final Map.Entry<String,Set<Element>> Map<String,Set<Element>>_VARElements : Map<String,Set<Element>>_VAR.entrySet()) {     final String String_VAR=Map<String,Set<Element>>_VARElements.getKey();     final Set<Element> Set<Element>_VAR=Map<String,Set<Element>>_VARElements.getValue();     final boolean boolean_VAR=Set<Element>_VAR.size() > Number_Constant;     final String PackageElement_VARName=String_VAR.substring(Number_Constant,String_VAR.lastIndexOf(Character_Constant));     Writer Writer_VAR=null;     try {       final JavaFileObject JavaFileObject_VAR=processingEnv.getFiler().createSourceFile(String_VAR,(Element[])null);       Writer_VAR=JavaFileObject_VAR.openWriter();       final JavaWriter JavaWriter_VAR=new JavaWriter(Writer_VAR);       JavaWriter_VAR.emitPackage(PackageElement_VARName).emitImports(String_Constant).emitImports(String_Constant).emitImports(String_Constant).emitEmptyLine();       final String String_VAR=PackageElement_VARName;       final String String_VAR=PackageElement_VARName + String_Constant + String_VAR;       if (boolean_VAR) {         JavaWriter_VAR.beginType(String_VAR,String_Constant,EnumSet.of(PUBLIC,FINAL)).emitField(String_Constant,String_VAR,EnumSet.of(STATIC,PRIVATE,FINAL),JavaWriter.stringLiteral(String_VAR)).emitField(String_Constant,String_VAR,EnumSet.of(STATIC,PRIVATE,FINAL),JavaWriter.stringLiteral(String_VAR)).emitEmptyLine().beginMethod(null,String_VAR,EnumSet.of(PRIVATE)).endMethod().emitEmptyLine();       }       final Iterator<Element> Iterator<Element>_VAR=Set<Element>_VAR.Iterator<Element>_VAR();       while (Iterator<Element>_VAR.hasNext()) {         final Element Element_VAR=Iterator<Element>_VAR.next();         writeContractClass(JavaWriter_VAR,Element_VAR,boolean_VAR,String_VAR,String_VAR,String_VAR);         if (Iterator<Element>_VAR.hasNext()) {           JavaWriter_VAR.emitEmptyLine();         }       }       if (boolean_VAR) {         JavaWriter_VAR.endType();       }       JavaWriter_VAR.emitEmptyLine();       JavaWriter_VAR.close();     }  catch (    IOException e) {       e.printStackTrace();       for (      final Element element : Set<Element>_VAR) {         processingEnv.getMessager().printMessage(Kind.ERROR,String_Constant + String_VAR,element);       }     }  finally {       if (Writer_VAR != null) {         try {           Writer_VAR.close();         }  catch (        IOException e) {           e.printStackTrace();         }       }     }   }   return Boolean_Constant; } 
private void writeContractClass(JavaWriter JavaWriter_VAR,Element Element_VAR,boolean boolean_VAR,String String_VAR,String String_VAR,String String_VAR) throws IOException {   String JavaWriter_VAR_table_name=String_Constant;   String String_VAR=String_Constant;   final DatabaseTable DatabaseTable_VAR=Element_VAR.getAnnotation(DatabaseTable.class);   if (DatabaseTable_VAR != null) {     String_VAR=DatabaseTable_VAR.tableName();   }   if (String_VAR == null || String_VAR.length() == Number_Constant) {     String_VAR=Element_VAR.getSimpleName().toString();   }   JavaWriter_VAR_table_name=JavaWriter.stringLiteral(String_VAR);   String String_VAR=String_Constant;   EnumSet<Modifier> EnumSet<Modifier>_VAR=null;   if (boolean_VAR) {     String_VAR=Element_VAR.getSimpleName().toString();     EnumSet<Modifier>_VAR=EnumSet.of(STATIC,PUBLIC,FINAL);   }  else {     String_VAR=String_VAR.substring(String_VAR.lastIndexOf(Character_Constant) + Number_Constant,String_VAR.length());     EnumSet<Modifier>_VAR=EnumSet.of(PUBLIC,FINAL);   }   String JavaWriter_VAR_content_uri_path=String_Constant;   final DefaultContentUri DefaultContentUri_VAR=Element_VAR.getAnnotation(DefaultContentUri.class);   String String_VAR=String_Constant;   String String_VAR=String_Constant;   if (DefaultContentUri_VAR != null) {     String_VAR=DefaultContentUri_VAR.path();     String_VAR=DefaultContentUri_VAR.authority();   }  else {     String_VAR=String_VAR.toLowerCase();     String_VAR=String_VAR;   }   JavaWriter_VAR_content_uri_path=JavaWriter.stringLiteral(String_VAR);   String JavaWriter_VAR_authority=String_Constant;   if (boolean_VAR) {     if (String_VAR == null || String_VAR.length() == Number_Constant) {       JavaWriter_VAR_authority=String_VAR;     }  else     if (String_VAR.equals(String_VAR)) {       JavaWriter_VAR_authority=String_VAR;     }  else {       JavaWriter_VAR_authority=JavaWriter.stringLiteral(String_VAR);     }   }  else {     if (String_VAR == null || String_VAR.length() == Number_Constant) {       JavaWriter_VAR_authority=JavaWriter.stringLiteral(String_VAR);     }  else {       JavaWriter_VAR_authority=JavaWriter.stringLiteral(String_VAR);     }   }   String JavaWriter_VAR_mimetype_type=String_Constant;   final DefaultContentMimeTypeVnd DefaultContentMimeTypeVnd_VAR=Element_VAR.getAnnotation(DefaultContentMimeTypeVnd.class);   String String_VAR=String_Constant;   String String_VAR=String_Constant;   if (DefaultContentMimeTypeVnd_VAR != null) {     String_VAR=DefaultContentMimeTypeVnd_VAR.name();     String_VAR=DefaultContentMimeTypeVnd_VAR.type();   }   if (String_VAR == null || String_VAR.length() == Number_Constant) {     String_VAR=String_VAR;   }   if (String_VAR == null || String_VAR.length() == Number_Constant) {     String_VAR=String_VAR.toLowerCase();   }   JavaWriter_VAR_mimetype_type=JavaWriter.stringLiteral(String_VAR);   String JavaWriter_VAR_mimetype_name=String_Constant;   if (boolean_VAR) {     if (String_VAR == null || String_VAR.length() == Number_Constant) {       JavaWriter_VAR_mimetype_name=String_VAR;     }  else     if (String_VAR.equals(String_VAR)) {       JavaWriter_VAR_mimetype_name=String_VAR;     }  else {       JavaWriter_VAR_mimetype_name=JavaWriter.stringLiteral(String_VAR);     }   }  else {     if (String_VAR == null || String_VAR.length() == Number_Constant) {       JavaWriter_VAR_mimetype_name=JavaWriter.stringLiteral(String_VAR);     }  else {       JavaWriter_VAR_mimetype_name=JavaWriter.stringLiteral(String_VAR);     }   }   JavaWriter_VAR.beginType(String_VAR,String_Constant,EnumSet<Modifier>_VAR,null,String_Constant).emitField(String_Constant,String_Constant,EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter_VAR_table_name).emitEmptyLine().emitField(String_Constant,String_Constant,EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter_VAR_content_uri_path).emitField(String_Constant,String_Constant,EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter_VAR_authority).emitEmptyLine().emitField(String_Constant,String_Constant,EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter_VAR_mimetype_type).emitField(String_Constant,String_Constant,EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter_VAR_mimetype_name).emitEmptyLine().emitField(String_Constant,String_Constant,EnumSet.of(STATIC,PUBLIC,FINAL),String.valueOf(int_VAR++)).emitField(String_Constant,String_Constant,EnumSet.of(STATIC,PUBLIC,FINAL),String.valueOf(int_VAR++)).emitEmptyLine().emitField(String_Constant,String_Constant,EnumSet.of(STATIC,PUBLIC,FINAL),String_VAR).emitEmptyLine().beginMethod(null,String_VAR,EnumSet.of(PRIVATE)).endMethod().emitEmptyLine();   final List<Element> List<Element>_VAR=getAllElementsAnnotatedWith(DatabaseField.class,Element_VAR);   for (  final Element field : List<Element>_VAR) {     final String String_VAR=field.getSimpleName().toString();     if (!(String_Constant.equals(String_VAR) || String_Constant.equals(field.getAnnotation(DatabaseField.class).columnName()))) {       JavaWriter_VAR.emitField(String_Constant,String_VAR.toUpperCase(),EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter.stringLiteral(String_VAR));     }   }   JavaWriter_VAR.endType(); } 
@Override public int compare(final Element Element_VAR,final Element Element_VAR){   if (Element_VAR != null) {     final String String_VAR=Element_VAR.getSimpleName().toString();     final String String_VAR=Element_VAR.getSimpleName().toString();     return String_VAR.compareTo(String_VAR);   }  else {     if (Element_VAR == null) {       return Number_Constant;     }  else {       return -Number_Constant;     }   } } 
public PackageElement getPackage(Element Element_VAR){   while (Element_VAR.getKind() != ElementKind.PACKAGE) {     Element_VAR=Element_VAR.getEnclosingElement();   }   return (PackageElement)Element_VAR; } 
public List<Element> getAllElementsAnnotatedWith(final Class<? extends Annotation> Class<? extends Annotation>_VAR,final Element Element_VAR){   final List<Element> List<Element>_VAR=getEnclosedElements(Element_VAR,ElementKind.FIELD);   final List<Element> Map<String,Set<Element>>_VAR=new ArrayList<Element>(List<Element>_VAR.size());   for (  final Element fieldElement : List<Element>_VAR) {     if (fieldElement.getAnnotation(Class<? extends Annotation>_VAR) != null) {       Map<String,Set<Element>>_VAR.add(fieldElement);     }   }   return Map<String,Set<Element>>_VAR; } 
public List<Element> getEnclosedElements(final Element Element_VAR,final ElementKind Element_VARKind){   final List<? extends Element> List<? extends Element>_VAR=Element_VAR.getEnclosedElements();   final List<Element> List<Element>_VAR=new ArrayList<Element>(List<? extends Element>_VAR.size());   for (  final Element enclosedElement : List<? extends Element>_VAR) {     if (enclosedElement.getKind() == Element_VARKind) {       List<Element>_VAR.add(enclosedElement);     }   }   return List<Element>_VAR; } 
public Map<String,Set<Element>> getGroupElementsByContractClassName(final Collection<? extends Element> Collection<? extends Element>_VAR){   final Map<String,Set<Element>> Map<String,Set<Element>>_VAR=new HashMap<String,Set<Element>>();   for (  final Element Element_VAR : Collection<? extends Element>_VAR) {     final Contract Contract_VAR=Element_VAR.getAnnotation(Contract.class);     final String String_VAR=Contract_VAR.String_VAR();     final String String_VAR;     if (String_VAR == null || String_VAR.isEmpty()) {       final PackageElement PackageElement_VAR=getPackage(Element_VAR);       String_VAR=PackageElement_VAR.getQualifiedName().toString() + Character_Constant + Element_VAR.getSimpleName()+ String_VAR;     }  else {       String_VAR=String_VAR;     }     if (Map<String,Set<Element>>_VAR.containsKey(String_VAR)) {       Map<String,Set<Element>>_VAR.get(String_VAR).add(Element_VAR);     }  else {       final Set<Element> Set<Element>_VAR=new TreeSet<Element>(Comparator<Element>_VAR);       Set<Element>_VAR.add(Element_VAR);       Map<String,Set<Element>>_VAR.put(String_VAR,Set<Element>_VAR);     }   }   return Map<String,Set<Element>>_VAR; } 
void enum_VAR(String String_VAR,String String_VAR,String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.String_VAR=String_VAR; } 
public String getOption(){   return String_VAR; } 
public String[] getOption(String String_VAR){   if (String_VAR != null) {     String[] List<String>_VAR=new String[Number_Constant];     int int_VAR=String_VAR.int_VAROf(String_VAR);     List<String>_VAR[Number_Constant]=String_VAR.substring(Number_Constant,int_VAR).trim();     List<String>_VAR[Number_Constant]=String_VAR;     return List<String>_VAR;   }   return new String[]{getOption()}; } 
public String getDescription(){   return String_VAR; } 
 protected abstract Collection<Processor> getProcessors(); 
 protected List<Diagnostic<? extends JavaFileObject>> compileTestCase(Class<?>... Class<?>_VAR){ } 
private static String toResourcePath(Class<?> Class<?>_VAR){   return ClassUtils.convertClassNameToResourcePath(Class<?>_VAR.getName()) + String_VAR; } 
 protected List<Diagnostic<? extends JavaFileObject>> compileTestCase(String... String_VAR){ } 
private static Collection<File> findClasspathFiles(String[] String[]_VAR) throws IOException {   Collection<File> Collection<File>_VAR=new ArrayList<File>(String[]_VAR.length);   for (  String File_VARname : String[]_VAR) {     Collection<File>_VAR.add(new ClassPathResource(File_VARname).getFile());   }   return Collection<File>_VAR; } 
 protected static void assertCompilationSuccessful(List<Diagnostic<? extends JavaFileObject>> List<Diagnostic<? extends JavaFileObject>>_VAR){ } 
 protected static void assertCompilationReturned(Kind[] Kind[]_VAR,long[] long[]_VAR,List<Diagnostic<? extends JavaFileObject>> List<Diagnostic<? extends JavaFileObject>>_VAR){ } 
 protected static void assertCompilationReturned(Kind Kind_VAR,long long_VAR,List<Diagnostic<? extends JavaFileObject>> List<Diagnostic<? extends JavaFileObject>>_VAR){ } 
private List<String> mergeenum_VAR(List<String> List<String>_VAR){   if (List<String>_VAR == null) {     return Arrays.asList(getenum_VAR());   }   List<String> List<String>_VAR=new ArrayList<String>();   for (  String String_VAR : List<String>_VAR) {     List<String>_VAR.add(String_VAR);   }   for (  String String_VAR : getenum_VAR()) {     List<String>_VAR.add(String_VAR);   }   return List<String>_VAR; } 
protected String[] getenum_VAR(){   return enum_VAR.GENERATED_SOURCES_DIRECTORY.getOption(ensureOutputDirectory().getAbsolutePath()); } 
protected File ensureOutputDirectory(){   File File_VAR=new File(String_VAR);   if (!File_VAR.exists()) {     File_VAR.mkdirs();   }   return File_VAR; } 
protected static void assertOutput(File File_VAR,File File_VAR) throws IOException {   String[] String[]_VAR=getContents(File_VAR);   String[] File_VARContent=getContents(File_VAR);   assertEquals(String[]_VAR.length,File_VARContent.length);   for (int i=Number_Constant; i < String[]_VAR.length; i++) {     assertEquals(String[]_VAR[i].trim(),File_VARContent[i].trim());   } } 
private static String[] getContents(File File_VAR) throws IOException {   List<String> List<String>_VAR=new ArrayList<String>();   BufferedReader BufferedReader_VAR=new BufferedReader(new FileReader(File_VAR));   try {     String String_VAR=null;     while ((String_VAR=BufferedReader_VAR.readLine()) != null) {       List<String>_VAR.add(String_VAR);     }   }   finally {     BufferedReader_VAR.close();   }   return List<String>_VAR.toArray(new String[]{}); } 
protected String toPath(Package Package_VAR){   return toPath(Package_VAR.getName()); } 
protected String toPath(String String_VAR){   return String_VAR.replace(String_Constant,String_Constant); } 
protected File getResourceFile(Class<?> Class<?>_VAR){   return new File(getClass().getResource(String_Constant + toPath(Class<?>_VAR.getPackage()) + String_Constant+ Class<?>_VAR.getSimpleName()+ String_VAR).getFile()); } 
protected File getOutputFile(String String_VAR){   return new File(String_VAR,String_VAR); } 
@Override protected Collection<Processor> getProcessors(){   return Arrays.<Processor>asList(new ContractAnnotationProcessor()); } 
@Test public void a0100ValidVerySimpleContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(Pojo.class));   final String String_VAR=String_Constant;   final String String_VAR=String_Constant;   assertOutput(new File(String_VAR),new File(String_VAR)); } 
@Test public void a0101ValidLessSimpleContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(Pojo2.class));   final String String_VAR=String_Constant;   final String String_VAR=String_Constant;   assertOutput(new File(String_VAR),new File(String_VAR)); } 
@Test public void a0200ValidDefaultContentUriAndContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(Pojo3.class));   final String String_VAR=String_Constant;   final String String_VAR=String_Constant;   assertOutput(new File(String_VAR),new File(String_VAR)); } 
@Test public void a0201ValidDefaultContentUriAndDefaultContentMimeTypeVndContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(Pojo4.class));   final String String_VAR=String_Constant;   final String String_VAR=String_Constant;   assertOutput(new File(String_VAR),new File(String_VAR)); } 
@Test public void a0300ValidFieldsContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(PojoWithFields1.class));   final String String_VAR=String_Constant;   final String String_VAR=String_Constant;   assertOutput(new File(String_VAR),new File(String_VAR)); } 
@Test public void a0400ValidSuperPojo() throws IOException {   assertCompilationSuccessful(compileTestCase(CombinedPojo1.class,CombinedPojo2.class));   final String String_VAR=String_Constant;   final String String_VAR=String_Constant;   assertOutput(new File(String_VAR),new File(String_VAR)); } 
@Test public void a0401ValidSuperPojoWithDefaultContentUriAndDefaultContentMimeTypeVndContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(CombinedPojo3.class,CombinedPojo4.class));   final String String_VAR=String_Constant;   final String String_VAR=String_Constant;   assertOutput(new File(String_VAR),new File(String_VAR)); } 
@Test public void a0402ValidSuperPojoMixedWithDefaultContentUriAndDefaultContentMimeTypeVndContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(CombinedPojo5.class,CombinedPojo6.class));   final String String_VAR=String_Constant;   final String String_VAR=String_Constant;   assertOutput(new File(String_VAR),new File(String_VAR)); } 
@Override proteCursor_VARted void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.aCursor_VARtivity_main);   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.Cursor_VARlear();   ContentValues_VAR.put(ACursor_VARCursor_VARountContraCursor_VARt.NAME,String_Constant);   getContentResolver().insert(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI,ContentValues_VAR);   ContentValues[] Cursor_VARontentValues=new ContentValues[int_VAR];   for (int i=Number_Constant; i < int_VAR; i++) {     ContentValues_VAR=new ContentValues();     ContentValues_VAR.Cursor_VARlear();     ContentValues_VAR.put(ACursor_VARCursor_VARountContraCursor_VARt.NAME,String_Constant + i);     Cursor_VARontentValues[i]=ContentValues_VAR;   }   getContentResolver().bulkInsert(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI,Cursor_VARontentValues);   Cursor Cursor_VAR=getContentResolver().query(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI,null,null,null,null);   Cursor_VAR.moveToFirst();   do {     for (int i=Number_Constant; i < Cursor_VAR.getColumnCount(); i++) {       Log.d(getClass().getSimpleName(),Cursor_VAR.getColumnName(i) + String_Constant + Cursor_VAR.getString(i));     }   }  while (Cursor_VAR.moveToNext());   Cursor_VAR.Cursor_VARlose();   ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=new ArrayList<ContentProviderOperation>();   ArrayList<ContentProviderOperation>_VAR.add(ContentProviderOperation.newInsert(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI).withValue(ACursor_VARCursor_VARountContraCursor_VARt.NAME,String_Constant).build());   ArrayList<ContentProviderOperation>_VAR.add(ContentProviderOperation.newInsert(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI).withValue(ACursor_VARCursor_VARountContraCursor_VARt.NAME,String_Constant).build());   try {     getContentResolver().applyBatCursor_VARh(ACursor_VARCursor_VARountContraCursor_VARt.AUTHORITY,ArrayList<ContentProviderOperation>_VAR);   }  Cursor_VARatCursor_VARh (  ExCursor_VAReption e) {     e.printStaCursor_VARkTraCursor_VARe();   }   ContentProviderClient ContentProviderClient_VAR=getContentResolver().aCursor_VARquireContentProviderClient(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI);   Cursor Cursor_VAR=null;   try {     Cursor_VAR=ContentProviderClient_VAR.query(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI,null,null,null,null);     Cursor_VAR.moveToFirst();     do {       for (int i=Number_Constant; i < Cursor_VAR.getColumnCount(); i++) {         Log.d(getClass().getSimpleName(),Cursor_VAR.getColumnName(i) + String_Constant + Cursor_VAR.getString(i));       }     }  while (Cursor_VAR.moveToNext());   }  Cursor_VARatCursor_VARh (  RemoteExCursor_VAReption e) {     e.printStaCursor_VARkTraCursor_VARe();   }  finally {     if (Cursor_VAR != null) {       Cursor_VAR.Cursor_VARlose();     }   }   ContentProviderClient_VAR.release(); } 
@Override publiCursor_VAR boolean onCreateOptionsMenu(Menu Menu_VAR){   getMenuInflater().inflate(R.Menu_VAR.aCursor_VARtivity_main,Menu_VAR);   return Boolean_Constant; } 
public Account(){ } 
public Account(String String_VAR){   this.int_VAR=Number_Constant;   this.String_VAR=String_VAR; } 
public int getId(){   return int_VAR; } 
public String getName(){   return String_VAR; } 
@Override protected Class<SampleHelper> getHelperClass(){   return SampleHelper.class; } 
@Override public boolean onCreate(){   setMatcherController(new MatcherController().add(Account.class,SubType.DIRECTORY,String_Constant,AccountContract.CONTENT_URI_PATTERN_MANY).add(Account.class,SubType.ITEM,String_Constant,AccountContract.CONTENT_URI_PATTERN_ONE));   return Boolean_Constant; } 
public SampleHelper(Context Context_VAR){   super(Context_VAR,String_Constant,null,Number_Constant); } 
@Override public void onCreate(SQLiteDatabase SQLiteDatabase_VAR,ConnectionSource ConnectionSource_VAR){   try {     TableUtils.createTableIfNotExists(ConnectionSource_VAR,Account.class);   }  catch (  SQLException e) {     e.printStackTrace();   } } 
@Override public void onUpgrade(SQLiteDatabase SQLiteDatabase_VAR,ConnectionSource ConnectionSource_VAR,int int_VAR,int int_VAR){   try {     TableUtils.dropTable(ConnectionSource_VAR,Account.class,Boolean_Constant);     TableUtils.createTable(ConnectionSource_VAR,Account.class);   }  catch (  SQLException e) {     e.printStackTrace();   } } 
 @Override public String toString(){   return String_Constant; } 
public AnnotationInfoBase(){   boolean_VAROff(); } 
protected void boolean_VAROn(){   this.boolean_VAR=Boolean_Constant; } 
protected void boolean_VAROff(){   this.boolean_VAR=Boolean_Constant; } 
protected abstract boolean isValidValue(); 
@Override public boolean isValid(){   return this.boolean_VAR && isValidValue(); } 
@Override public boolean isValid(boolean boolean_VAR){   boolean boolean_VAR=this.isValid();   String String_VAR=this.getClass().getSimpleName() + String_Constant;   thowIllegalStateExceptionUnderCondition(boolean_VAR && !boolean_VAR,String_VAR);   return boolean_VAR; } 
@Override public String toString(){   return String_Constant + "boolean_VAR=" + boolean_VAR + String_Constant+ super.toString(); } 
protected final void thowIllegalStateExceptionUnderCondition(boolean boolean_VAR,String String_VAR){   if (boolean_VAR) {     throw new IllegalStateException(String_VAR);   } } 
public ContentMimeTypeVndInfo(AnnotatedElement AnnotatedElement_VAR){   DefaultContentMimeTypeVnd DefaultContentMimeTypeVnd_VAR=AnnotatedElement_VAR.getAnnotation(DefaultContentMimeTypeVnd.class);   String String_VAR=null;   String String_VAR=null;   if (DefaultContentMimeTypeVnd_VAR != null) {     String_VAR=DefaultContentMimeTypeVnd_VAR.String_VAR();     String_VAR=DefaultContentMimeTypeVnd_VAR.String_VAR();   }   if (AnnotatedElement_VAR instanceof Class<?>) {     Class<?> Class<?>_VAR=(Class<?>)AnnotatedElement_VAR;     if (TextUtils.isEmpty(String_VAR)) {       String_VAR=Class<?>_VAR.getPackage().getName() + String_VAR;     }     if (TextUtils.isEmpty(String_VAR)) {       String_VAR=Class<?>_VAR.getSimpleName().toLowerCase();     }   }   initialize(String_VAR,String_VAR); } 
public ContentMimeTypeVndInfo(String String_VAR,String String_VAR){   initialize(String_VAR,String_VAR); } 
public String getName(){   return this.String_VAR; } 
public String getType(){   return this.String_VAR; } 
public String getVndProviderSpecificString(){   return String_VAR + String_VAR_SEPARATOR + this.String_VAR+ String_VAR_SEPARATOR+ this.String_VAR; } 
@Override protected boolean isValidValue(){   return !TextUtils.isEmpty(this.String_VAR) && !TextUtils.isEmpty(this.String_VAR); } 
private void initialize(String String_VAR,String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   validFlagOn(); } 
@Override public String toString(){   return String_Constant + "String_VAR='" + String_VAR + '\''+ ", String_VAR='"+ String_VAR+ '\''+ String_Constant+ super.toString(); } 
public ContentUriInfo(AnnotatedElement AnnotatedElement_VAR){   DefaultContentUri DefaultContentUri_VAR=AnnotatedElement_VAR.getAnnotation(DefaultContentUri.class);   String String_VAR=null;   String String_VAR=null;   if (DefaultContentUri_VAR != null) {     String_VAR=DefaultContentUri_VAR.String_VAR();     String_VAR=DefaultContentUri_VAR.String_VAR();   }   if (AnnotatedElement_VAR instanceof Class<?>) {     Class<?> Class<?>_VAR=(Class<?>)AnnotatedElement_VAR;     if (TextUtils.isEmpty(String_VAR)) {       String_VAR=Class<?>_VAR.getPackage().getName();     }     if (TextUtils.isEmpty(String_VAR)) {       String_VAR=Class<?>_VAR.getSimpleName().toLowerCase();     }   }   initialize(String_VAR,String_VAR); } 
public ContentUriInfo(String String_VAR,String String_VAR){   initialize(String_VAR,String_VAR); } 
public String getAuthority(){   return this.String_VAR; } 
public String getPath(){   return this.String_VAR; } 
public Uri getContentUri(){   return new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).String_VAR(this.String_VAR).appendPath(this.String_VAR).build(); } 
@Override protected boolean isValidValue(){   return !TextUtils.isEmpty(this.String_VAR) && !TextUtils.isEmpty(this.String_VAR); } 
private void initialize(String String_VAR,String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   validFlagOn(); } 
@Override public String toString(){   return String_Constant + "String_VAR='" + String_VAR + '\''+ ", String_VAR='"+ String_VAR+ '\''+ String_Constant+ super.toString(); } 
public ProjectionMapInfo(AnnotatedElement AnnotatedElement_VAR){   ProjectionMap ProjectionMap_VAR=AnnotatedElement_VAR.getAnnotation(ProjectionMap.class);   if (ProjectionMap_VAR != null) {     this.String_VAR=ProjectionMap_VAR.value();     validFlagOn();   } } 
public ProjectionMapInfo(String String_VAR){   this.String_VAR=String_VAR;   validFlagOn(); } 
public String getName(){   return this.String_VAR; } 
@Override protected boolean isValidValue(){   return !TextUtils.isEmpty(String_VAR); } 
@Override public String toString(){   return String_Constant + "String_VAR='" + String_VAR + '\''+ String_Constant+ super.toString(); } 
public SortOrderInfo(AnnotatedElement AnnotatedElement_VAR){   DefaultSortOrder DefaultSortOrder_VAR=AnnotatedElement_VAR.getAnnotation(DefaultSortOrder.class);   if (DefaultSortOrder_VAR != null) {     this.SortOrder_VAR=DefaultSortOrder_VAR.SortOrder_VAR();     this.int_VAR=DefaultSortOrder_VAR.int_VAR();     validFlagOn();   } } 
public SortOrderInfo(SortOrder SortOrder_VAR,int int_VAR){   this.SortOrder_VAR=SortOrder_VAR;   this.int_VAR=int_VAR;   validFlagOn(); } 
public SortOrder getOrder(){   return this.SortOrder_VAR; } 
public int getWeight(){   return this.int_VAR; } 
public String makeSqlOrderString(String String_VAR){   StringBuilder StringBuilder_VAR=new StringBuilder();   StringBuilder_VAR.append(String_VAR);   StringBuilder_VAR.append(String_VAR);   StringBuilder_VAR.append(this.SortOrder_VAR.toString());   return StringBuilder_VAR.toString().trim(); } 
@Override protected boolean isValidValue(){   return Boolean_Constant; } 
@Override public String toString(){   return String_Constant + "SortOrder_VAR=" + SortOrder_VAR + ", int_VAR="+ int_VAR+ String_Constant+ super.toString(); } 
private OrmLiteAnnotationAccessor(){ } 
 public static String getAnnotationTableName(AnnotatedElement AnnotatedElement_VAR){   String String_VAR=String_Constant;   String_VAR=DatabaseTableConfig.extractTableName((Class<?>)AnnotatedElement_VAR);   return String_VAR; } 
 public static String getAnnotationColumnName(AnnotatedElement AnnotatedElement_VAR){   String String_VAR=String_Constant;   DatabaseField DatabaseField_VAR=AnnotatedElement_VAR.getAnnotation(DatabaseField.class);   if (DatabaseField_VAR != null) {     String_VAR=DatabaseField_VAR.columnName();     if (TextUtils.isEmpty(String_VAR)) {       String_VAR=((Field)AnnotatedElement_VAR).getName();     }   }   return String_VAR; } 
public ColumnInfo(Field Field_VAR){   if (!Field_VAR.isAnnotationPresent(DatabaseField.class)) {     throw new IllegalArgumentException(String_Constant);   }   this.Field_VAR=Field_VAR;   this.String_VAR=OrmLiteAnnotationAccessor.getAnnotationColumnName(Field_VAR);   this.SortOrderInfo_VAR=new SortOrderInfo(Field_VAR);   this.ProjectionMapInfo_VAR=new ProjectionMapInfo(Field_VAR); } 
@Override public boolean isValid(){   return isValid(Boolean_Constant); } 
@Override public boolean isValid(boolean boolean_VAR){   boolean String_VAR=Boolean_Constant;   return String_VAR; } 
public Field getField(){   return this.Field_VAR; } 
public String getColumnName(){   return this.String_VAR; } 
public String getProjectionColumnName(){   String String_VAR=this.String_VAR;   if (this.ProjectionMapInfo_VAR.isValid()) {     String_VAR=this.ProjectionMapInfo_VAR.getName();   }   return String_VAR; } 
 public SortOrderInfo getDefaultSortOrderInfo(){   return this.SortOrderInfo_VAR; } 
 public ProjectionMapInfo getProjectionMapInfo(){   return this.ProjectionMapInfo_VAR; } 
public MatcherController(){   this.UriMatcher_VAR=new UriMatcher(UriMatcher.NO_MATCH);   this.Map<Class<?>,TableInfo>_VAR=new HashMap<Class<?>,TableInfo>();   this.UriMatcher_VARPatterns=new ArrayList<MatcherPattern>();   this.TableInfo_VAR=null; } 
 public MatcherController add(Class<?> Class<?>_VAR){   this.addTableClass(Class<?>_VAR);   return this; } 
 public MatcherController add(Class<?> Class<?>_VAR,SubType SubType_VAR,String String_VAR,int String_VARCode){   this.addTableClass(Class<?>_VAR);   this.addMatcherPattern(SubType_VAR,String_VAR,String_VARCode);   return this; } 
 public MatcherController add(SubType SubType_VAR,String String_VAR,int String_VARCode){   this.addMatcherPattern(SubType_VAR,String_VAR,String_VARCode);   return this; } 
 public MatcherController add(MatcherPattern MatcherPattern_VAR){   int int_VAR=MatcherPattern_VAR.getPatternCode();   if (this.TableInfo_VAR == null) {     throw new IllegalStateException(String_Constant);   }   if (findMatcherPattern(int_VAR) != null) {     throw new IllegalArgumentException("int_VAR has been specified already exists.");   }   this.MatcherPattern_VARs.add(MatcherPattern_VAR);   return this; } 
 public MatcherController setDefaultContentUri(String String_VAR,String String_VAR){   if (this.TableInfo_VAR == null) {     throw new IllegalStateException(String_Constant);   }   this.TableInfo_VAR.setDefaultContentUriInfo(new ContentUriInfo(String_VAR,String_VAR));   return this; } 
 public MatcherController setDefaultContentMimeTypeVnd(String String_VAR,String String_VAR){   if (this.TableInfo_VAR == null) {     throw new IllegalStateException(String_Constant);   }   this.TableInfo_VAR.setDefaultContentMimeTypeVndInfo(new ContentMimeTypeVndInfo(String_VAR,String_VAR));   return this; } 
 public MatcherController initialize(){   this.TableInfo_VAR=null;   for (  Map.Entry<Class<?>,TableInfo> entry : this.Map<Class<?>,TableInfo>_VAR.entrySet()) {     entry.getValue().isValid(Boolean_Constant);   }   for (  MatcherPattern entry : UriMatcher_VARPatterns) {     entry.isValid(Boolean_Constant);     this.UriMatcher_VAR.addURI(entry.getTableInfo().getDefaultContentUriInfo().getAuthority(),entry.getPathAndPatternString(),entry.getPatternCode());     entry.initialize();   }   this.boolean_VAR=Boolean_Constant;   return this; } 
 public MatcherPattern findMatcherPattern(int int_VAR){   MatcherPattern MatcherPattern_VAR=null;   for (  MatcherPattern entry : this.UriMatcher_VARPatterns) {     if (entry.getPatternCode() == int_VAR) {       MatcherPattern_VAR=entry;       break;     }   }   return MatcherPattern_VAR; } 
private TableInfo addTableClass(Class<?> Class<?>_VAR){   TableInfo MatcherPattern_VAR=null;   if (this.Map<Class<?>,TableInfo>_VAR.containsKey(Class<?>_VAR)) {     MatcherPattern_VAR=this.Map<Class<?>,TableInfo>_VAR.get(Class<?>_VAR);   }  else {     MatcherPattern_VAR=new TableInfo(Class<?>_VAR);     this.Map<Class<?>,TableInfo>_VAR.put(Class<?>_VAR,MatcherPattern_VAR);   }   this.TableInfo_VAR=MatcherPattern_VAR;   return MatcherPattern_VAR; } 
private MatcherPattern addMatcherPattern(SubType SubType_VAR,String String_VAR,int String_VARCode){   MatcherPattern MatcherPattern_VAR=null;   if (this.TableInfo_VAR == null) {     throw new IllegalStateException(String_Constant);   }   if (findMatcherPattern(String_VARCode) != null) {     throw new IllegalArgumentException("String_VARCode has been specified already exists.");   }   MatcherPattern_VAR=new MatcherPattern(this.TableInfo_VAR,SubType_VAR,String_VAR,String_VARCode);   this.UriMatcher_VARPatterns.add(MatcherPattern_VAR);   return MatcherPattern_VAR; } 
public boolean hasPreboolean_VAR(){   return this.boolean_VAR; } 
 public UriMatcher getUriMatcher(){   if (!this.boolean_VAR) {     throw new IllegalStateException("Controller has not been boolean_VAR.");   }   return this.UriMatcher_VAR; } 
 public Map<Class<?>,TableInfo> getTables(){   if (!this.boolean_VAR) {     throw new IllegalStateException("Controller has not been boolean_VAR.");   }   return this.Map<Class<?>,TableInfo>_VAR; } 
 public List<MatcherPattern> getMatcherPatterns(){   if (!this.boolean_VAR) {     throw new IllegalStateException("Controller has not been boolean_VAR.");   }   return this.UriMatcher_VARPatterns; } 
public MatcherPattern(TableInfo TableInfo_VAR,SubType SubType_VAR,String String_VAR,int String_VARCode){   this.TableInfo_VAR=TableInfo_VAR;   this.SubType_VAR=SubType_VAR;   this.String_VAR=String_VAR;   this.String_VARCode=String_VARCode;   if (this.TableInfo_VAR.getDefaultContentUriInfo().isValid()) {     this.ContentUriInfo_VAR=this.TableInfo_VAR.getDefaultContentUriInfo();   }  else {     this.ContentUriInfo_VAR=null;   }   if (this.TableInfo_VAR.getDefaultContentMimeTypeVndInfo().isValid()) {     this.ContentMimeTypeVndInfo_VAR=this.TableInfo_VAR.getDefaultContentMimeTypeVndInfo();   }  else {     this.ContentMimeTypeVndInfo_VAR=null;   }   if (this.ContentMimeTypeVndInfo_VAR != null) {     this.MimeTypeVnd_VAR=new MimeTypeVnd(this.SubType_VAR,this.ContentMimeTypeVndInfo_VAR);   }  else {     this.MimeTypeVnd_VAR=null;   } } 
@Override public boolean isValid(){   return isValid(Boolean_Constant); } 
@Override public boolean isValid(boolean boolean_VAR){   boolean boolean_VAR=Boolean_Constant;   if (this.TableInfo_VAR == null) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("TableInfo_VAR is null.");     }   }  else   if (this.SubType_VAR == null) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("SubType_VAR is null.");     }   }  else   if (String_VAR == null) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("String_VAR is null.");     }   }  else   if (this.String_VARCode <= Number_Constant) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("String_VARCode is zero.");     }   }  else   if (this.ContentUriInfo_VAR == null || !this.ContentUriInfo_VAR.isValid()) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("ContentUriInfo_VAR is invalid.");     }   }  else   if (this.ContentMimeTypeVndInfo_VAR == null || !this.ContentMimeTypeVndInfo_VAR.isValid()) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("ContentMimeTypeVndInfo_VAR is invalid.");     }   }  else   if (this.MimeTypeVnd_VAR == null || !this.MimeTypeVnd_VAR.isValid()) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("MimeTypeVnd_VAR is invalid.");     }   }   return boolean_VAR; } 
 protected void initialize(){   this.boolean_VAR=Boolean_Constant; } 
 public MatcherPattern setContentUri(ContentUriInfo ContentUriInfo_VAR){   if (this.boolean_VAR) {     throw new IllegalStateException(String_Constant);   }   this.ContentUriInfo_VAR=ContentUriInfo_VAR;   return this; } 
 public MatcherPattern setContentUri(String String_VAR,String String_VAR){   return this.setContentUri(new ContentUriInfo(String_VAR,String_VAR)); } 
 public MatcherPattern setContentMimeTypeVnd(ContentMimeTypeVndInfo ContentMimeTypeVndInfo_VAR){   if (this.boolean_VAR) {     throw new IllegalStateException(String_Constant);   }   this.ContentMimeTypeVndInfo_VAR=ContentMimeTypeVndInfo_VAR;   this.MimeTypeVnd_VAR=new MimeTypeVnd(this.SubType_VAR,this.ContentMimeTypeVndInfo_VAR);   return this; } 
 public MatcherPattern setContentMimeTypeVnd(String String_VAR,String String_VAR){   return this.setContentMimeTypeVnd(new ContentMimeTypeVndInfo(String_VAR,String_VAR)); } 
public TableInfo getTableInfo(){   return this.TableInfo_VAR; } 
public SubType getSubType(){   return this.SubType_VAR; } 
public String getPattern(){   return this.String_VAR; } 
public int getPatternCode(){   return this.String_VARCode; } 
public ContentUriInfo getContentUriInfo(){   return this.ContentUriInfo_VAR; } 
public MimeTypeVnd getMimeTypeVnd(){   return this.MimeTypeVnd_VAR; } 
 public String getPathAndPatternString(){   return this.ContentUriInfo_VAR.getPath() + String_Constant + this.String_VAR; } 
 public Uri getContentUriPattern(){   return Uri.parse(this.ContentUriInfo_VAR.getContentUri() + String_Constant + this.String_VAR); } 
 public String getMimeTypeVndString(){   return this.MimeTypeVnd_VAR.getMimeTypeString(); } 
@Override public String toString(){   return getContentUriPattern().toString(); } 
private void enum_VAR(String String_VAR){   this.String_VAR=String_VAR; } 
@Override public String toString(){   return this.String_VAR; } 
public MimeTypeVnd(enum_VAR enum_VAR_VAR,ContentMimeTypeVndInfo ContentMimeTypeVndInfo_VAR){   this.enum_VAR_VAR=enum_VAR_VAR;   this.ContentMimeTypeVndInfo_VAR=ContentMimeTypeVndInfo_VAR; } 
@Override public boolean isValid(){   return isValid(Boolean_Constant); } 
@Override public boolean isValid(boolean boolean_VAR){   boolean boolean_VAR=Boolean_Constant;   if (this.SubType_VAR == null) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("SubType_VAR is null.");     }   }  else   if (!this.ContentMimeTypeVndInfo_VAR.isValid()) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("ContentMimeTypeVndInfo_VAR is invalid.");     }   }   return boolean_VAR; } 
public enum_VAR getenum_VAR(){   return this.SubType_VAR; } 
public void setenum_VAR(enum_VAR enum_VAR_VAR){   this.enum_VAR_VAR=enum_VAR_VAR; } 
public ContentMimeTypeVndInfo getProviderSpecific(){   return this.ContentMimeTypeVndInfo_VAR; } 
public void setProviderSpecific(ContentMimeTypeVndInfo ContentMimeTypeVndInfo_VAR){   this.ContentMimeTypeVndInfo_VAR=ContentMimeTypeVndInfo_VAR; } 
public String getMimeTypeString(){   return this.SubType_VAR.toString() + File.separator + this.ContentMimeTypeVndInfo_VAR.getVndProviderSpecificString(); } 
@Override public String toString(){   return getMimeTypeString(); } 
Uri getUri(); 
String[] getProjection(); 
String getSelection(); 
String[] getSelectionArgs(); 
String getSortOrder(); 
ContentValues getValues(); 
String getSelection(); 
String[] getSelectionArgs(); 
ContentValues getValues(); 
String getSelection(); 
String[] getSelectionArgs(); 
public Parameter(){   this.clear(); } 
public void clear(){   this.Uri_VAR=null;   this.String[]_VAR=null;   this.String_VAR=null;   this.String_VARArgs=null;   this.String_VAR=null;   this.ContentValues_VAR=null; } 
public Parameter(Uri Uri_VAR,String[] String[]_VAR,String String_VAR,String[] String_VARArgs,String String_VAR){   this.clear();   this.Uri_VAR=Uri_VAR;   if (String[]_VAR != null) {     this.String[]_VAR=String[]_VAR.clone();   }   this.String_VAR=String_VAR;   if (String_VARArgs != null) {     this.String_VARArgs=String_VARArgs.clone();   }   this.String_VAR=String_VAR; } 
public Parameter(Uri Uri_VAR,ContentValues ContentValues_VAR){   this.clear();   this.Uri_VAR=Uri_VAR;   this.ContentValues_VAR=ContentValues_VAR; } 
public Parameter(Uri Uri_VAR,String String_VAR,String[] String_VARArgs){   this.clear();   this.Uri_VAR=Uri_VAR;   this.String_VAR=String_VAR;   if (String_VARArgs != null) {     this.String_VARArgs=String_VARArgs.clone();   } } 
public Parameter(Uri Uri_VAR,ContentValues ContentValues_VAR,String String_VAR,String[] String_VARArgs){   this.clear();   this.Uri_VAR=Uri_VAR;   this.ContentValues_VAR=ContentValues_VAR;   this.String_VAR=String_VAR;   if (String_VARArgs != null) {     this.String_VARArgs=String_VARArgs.clone();   } } 
@Override public Uri getUri(){   return this.Uri_VAR; } 
public void setUri(Uri Uri_VAR){   this.Uri_VAR=Uri_VAR; } 
@Override public String[] getProjection(){   if (String[]_VAR == null) {     return null;   }   return this.String[]_VAR.clone(); } 
public void setProjection(String[] String[]_VAR){   if (String[]_VAR == null) {     this.String[]_VAR=null;   }  else {     this.String[]_VAR=String[]_VAR.clone();   } } 
@Override public String getSelection(){   return this.String_VAR; } 
public void setSelection(String String_VAR){   this.String_VAR=String_VAR; } 
@Override public String[] getSelectionArgs(){   if (this.String_VARArgs != null) {     return this.String_VARArgs.clone();   }  else {     return null;   } } 
public void setSelectionArgs(String[] String[]_VAR){   if (String[]_VAR == null) {     this.String[]_VAR=null;   }  else {     this.String[]_VAR=String[]_VAR.clone();   } } 
@Override public String getSortOrder(){   return this.String_VAR; } 
public void setSortOrder(String String_VAR){   this.String_VAR=String_VAR; } 
@Override public ContentValues getValues(){   return this.ContentValues_VAR; } 
public void setValues(ContentValues ContentValues_VAR){   this.ContentValues_VAR=ContentValues_VAR; } 
public TableInfo(Class<?> Class<?>_VAR){   this.Class<?>_VAR=Class<?>_VAR;   this.String_VAR=OrmLiteAnnotationAccessor.getAnnotationTableName(Class<?>_VAR);   this.ContentUriInfo_VAR=new ContentUriInfo(Class<?>_VAR);   this.ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(Class<?>_VAR);   this.Map<String,ColumnInfo>_VAR=new HashMap<String,ColumnInfo>();   this.Map<String,String>_VAR=new HashMap<String,String>();   SortedMap<Integer,String> String_VARMap=new TreeMap<Integer,String>();   this.boolean_VARColumnInfo=null;   for (  Field classfield : Class<?>_VAR.getDeclaredFields()) {     if (classfield.isAnnotationPresent(DatabaseField.class)) {       classfield.setAccessible(Boolean_Constant);       ColumnInfo ColumnInfo_VAR=new ColumnInfo(classfield);       this.Map<String,ColumnInfo>_VAR.put(ColumnInfo_VAR.getColumnName(),ColumnInfo_VAR);       if (ColumnInfo_VAR.getColumnName().equals(BaseColumns._ID)) {         DatabaseField DatabaseField_VAR=classfield.getAnnotation(DatabaseField.class);         if (DatabaseField_VAR != null) {           if (DatabaseField_VAR.persisted()) {             boolean boolean_VAR=DatabaseField_VAR.boolean_VAR();             boolean boolean_VAR=DatabaseField_VAR.boolean_VAR();             if (boolean_VAR || boolean_VAR) {               this.boolean_VARColumnInfo=ColumnInfo_VAR;             }           }         }       }       SortOrderInfo SortOrderInfo_VAR=ColumnInfo_VAR.getDefaultSortOrderInfo();       if (SortOrderInfo_VAR.isValboolean_VAR()) {         String_VARMap.put(SortOrderInfo_VAR.getWeight(),SortOrderInfo_VAR.makeSqlOrderString(ColumnInfo_VAR.getColumnName()));       }       this.Map<String,String>_VAR.put(ColumnInfo_VAR.getProjectionColumnName(),ColumnInfo_VAR.getColumnName());     }   }   if (this.boolean_VARColumnInfo == null) {     throw new IllegalArgumentException(String_Constant);   }   if (String_VARMap.size() >= Number_Constant) {     StringBuilder boolean_VAR=new StringBuilder();     String String_VAR=String_Constant;     for (    Map.Entry<Integer,String> entry : String_VARMap.entrySet()) {       boolean_VAR.append(String_VAR);       boolean_VAR.append(entry.getValue());       String_VAR=String_Constant;     }     this.String_VAR=boolean_VAR.toString();   }  else {     this.String_VAR=String_Constant;   } } 
@Overrboolean_VARe public boolean isValboolean_VAR(){   return isValboolean_VAR(Boolean_Constant); } 
@Overrboolean_VARe public boolean isValboolean_VAR(boolean boolean_VAR){   boolean boolean_VAR=Boolean_Constant;   if (this.Class<?>_VAR == null) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("Class<?>_VAR is null.");     }   }  else   if (TextUtils.isEmpty(String_VAR)) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("String_VAR is zero string.");     }   }  else   if (this.Map<String,ColumnInfo>_VAR.isEmpty()) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("Map<String,ColumnInfo>_VAR is zero size.");     }   }  else   if (this.Map<String,ColumnInfo>_VAR.size() != this.Map<String,String>_VAR.size()) {     boolean_VAR=Boolean_Constant;     if (boolean_VAR && !boolean_VAR) {       throw new IllegalStateException("Number of Map<String,ColumnInfo>_VAR and Map<String,String>_VAR do not match.");     }   }   return boolean_VAR; } 
public Class<?> getClassType(){   return this.Class<?>_VAR; } 
public String getName(){   return this.String_VAR; } 
 public ContentUriInfo getDefaultContentUriInfo(){   return this.ContentUriInfo_VAR; } 
 public voboolean_VAR setDefaultContentUriInfo(ContentUriInfo ContentUriInfo_VAR){   this.ContentUriInfo_VAR=ContentUriInfo_VAR; } 
 public ContentMimeTypeVndInfo getDefaultContentMimeTypeVndInfo(){   return this.ContentMimeTypeVndInfo_VAR; } 
 public voboolean_VAR setDefaultContentMimeTypeVndInfo(ContentMimeTypeVndInfo ContentMimeTypeVndInfo_VAR){   this.ContentMimeTypeVndInfo_VAR=ContentMimeTypeVndInfo_VAR; } 
 public String getDefaultSortOrderString(){   return this.String_VAR; } 
 public ColumnInfo getIdColumnInfo(){   return this.boolean_VARColumnInfo; } 
 public Map<String,String> getProjectionMap(){   return this.Map<String,String>_VAR; } 
boolean isValid(); 
boolean isValid(boolean boolean_VAR); 
protected abstract Class<T> getHelperClass(); 
 public T getHelper(){   if (this.T_VAR == null) {     if (this.boolean_VAR) {       throw new IllegalStateException("A call to shutdown has already been made and the T_VAR cannot be used after that point");     }     this.T_VAR=this.createHelper();     Logger_VAR.trace("{}: got new T_VAR {} from OpenHelperManager",this,this.T_VAR);   }   return this.T_VAR; } 
 protected T createHelper(){   return OpenHelperManager.getHelper(this.getContext(),this.getHelperClass()); } 
 protected void releaseHelper(){   OpenHelperManager.releaseHelper(); } 
 public ConnectionSource getConnectionSource(){   return getHelper().getConnectionSource(); } 
@Override public void shutdown(){   super.shutdown();   if (this.T_VAR != null) {     this.T_VAR.close();     this.T_VAR=null;     this.releaseHelper();     Logger_VAR.trace("{}: T_VAR {} was released, set to null",this,this.T_VAR);     this.boolean_VAR=Boolean_Constant;   } } 
@Override public String toString(){   return getClass().getSimpleName() + String_Constant + Integer.toHexString(super.hashCode()); } 
protected void setMatcherController(MatcherController MatcherController_VAR){   this.MatcherController_VAR=MatcherController_VAR;   MatcherController_VAR.initialize(); } 
 public abstract Cursor onQuery(T T_VAR,SQLiteDatabase SQLiteDatabase_VAR,MatcherPattern MatcherPattern_VAR,QueryParameters QueryParameters_VAR); 
 public abstract Uri onInsert(T T_VAR,SQLiteDatabase SQLiteDatabase_VAR,MatcherPattern MatcherPattern_VAR,InsertParameters InsertParameters_VAR); 
 public abstract int onDelete(T T_VAR,SQLiteDatabase SQLiteDatabase_VAR,MatcherPattern MatcherPattern_VAR,DeleteParameters DeleteParameters_VAR); 
 public abstract int onUpdate(T T_VAR,SQLiteDatabase SQLiteDatabase_VAR,MatcherPattern MatcherPattern_VAR,UpdateParameters UpdateParameters_VAR); 
@Override public String getType(Uri Uri_VAR){   if (!MatcherController_VAR.hasPreinitialized()) {     throw new IllegalStateException(String_Constant);   }   int MatcherPattern_VARCode=MatcherController_VAR.getUriMatcher().match(Uri_VAR);   MatcherPattern MatcherPattern_VAR=MatcherController_VAR.findMatcherPattern(MatcherPattern_VARCode);   if (MatcherPattern_VAR == null) {     throw new IllegalArgumentException("unknown Uri_VAR : " + Uri_VAR.toString());   }   return MatcherPattern_VAR.getMimeTypeVndString(); } 
@Override public Cursor query(Uri Uri_VAR,String[] String[]_VAR,String String_VAR,String[] String_VARArgs,String String_VAR){   Cursor ContentProviderResult[]_VAR=null;   if (!MatcherController_VAR.hasPreinitialized()) {     throw new IllegalStateException(String_Constant);   }   int MatcherPattern_VARCode=MatcherController_VAR.getUriMatcher().match(Uri_VAR);   MatcherPattern MatcherPattern_VAR=MatcherController_VAR.findMatcherPattern(MatcherPattern_VARCode);   if (MatcherPattern_VAR == null) {     throw new IllegalArgumentException("unknown Uri_VAR : " + Uri_VAR.toString());   }   Parameter Parameter_VAR=new Parameter(Uri_VAR,String[]_VAR,String_VAR,String_VARArgs,String_VAR);   SQLiteDatabase SQLiteDatabase_VAR=this.getHelper().getReadableDatabase();   ContentProviderResult[]_VAR=onQuery(this.getHelper(),SQLiteDatabase_VAR,MatcherPattern_VAR,Parameter_VAR);   if (ContentProviderResult[]_VAR != null) {     this.onQueryCompleted(ContentProviderResult[]_VAR,Uri_VAR,MatcherPattern_VAR,Parameter_VAR);   }   return ContentProviderResult[]_VAR; } 
 protected void onQueryCompleted(Cursor Cursor_VAR,Uri Uri_VAR,MatcherPattern MatcherPattern_VAR,QueryParameters QueryParameters_VAR){   Cursor_VAR.setNotificationUri(this.getContext().getContentResolver(),Uri_VAR); } 
@Override public Uri insert(Uri Uri_VAR,ContentValues ContentValues_VAR){   Uri ContentProviderResult[]_VAR=null;   if (!MatcherController_VAR.hasPreinitialized()) {     throw new IllegalStateException(String_Constant);   }   int MatcherPattern_VARCode=MatcherController_VAR.getUriMatcher().match(Uri_VAR);   MatcherPattern MatcherPattern_VAR=MatcherController_VAR.findMatcherPattern(MatcherPattern_VARCode);   if (MatcherPattern_VAR == null) {     throw new IllegalArgumentException("unknown Uri_VAR : " + Uri_VAR.toString());   }   Parameter Parameter_VAR=new Parameter(Uri_VAR,ContentValues_VAR);   SQLiteDatabase SQLiteDatabase_VAR=this.getHelper().getWritableDatabase();   ContentProviderResult[]_VAR=onInsert(this.getHelper(),SQLiteDatabase_VAR,MatcherPattern_VAR,Parameter_VAR);   if (ContentProviderResult[]_VAR != null) {     this.onInsertCompleted(ContentProviderResult[]_VAR,Uri_VAR,MatcherPattern_VAR,Parameter_VAR);   }   return ContentProviderResult[]_VAR; } 
 protected void onInsertCompleted(Uri Uri_VAR,Uri Uri_VAR,MatcherPattern MatcherPattern_VAR,InsertParameters InsertParameters_VAR){   this.getContext().getContentResolver().notifyChange(Uri_VAR,null); } 
@Override public int delete(Uri Uri_VAR,String String_VAR,String[] String_VARArgs){   int ContentProviderResult[]_VAR=-Number_Constant;   if (!MatcherController_VAR.hasPreinitialized()) {     throw new IllegalStateException(String_Constant);   }   int MatcherPattern_VARCode=MatcherController_VAR.getUriMatcher().match(Uri_VAR);   MatcherPattern MatcherPattern_VAR=MatcherController_VAR.findMatcherPattern(MatcherPattern_VARCode);   if (MatcherPattern_VAR == null) {     throw new IllegalArgumentException("unknown Uri_VAR : " + Uri_VAR.toString());   }   Parameter Parameter_VAR=new Parameter(Uri_VAR,String_VAR,String_VARArgs);   SQLiteDatabase SQLiteDatabase_VAR=this.getHelper().getWritableDatabase();   ContentProviderResult[]_VAR=onDelete(this.getHelper(),SQLiteDatabase_VAR,MatcherPattern_VAR,Parameter_VAR);   if (ContentProviderResult[]_VAR >= Number_Constant) {     this.onDeleteCompleted(ContentProviderResult[]_VAR,Uri_VAR,MatcherPattern_VAR,Parameter_VAR);   }   return ContentProviderResult[]_VAR; } 
 protected void onDeleteCompleted(int int_VAR,Uri Uri_VAR,MatcherPattern MatcherPattern_VAR,DeleteParameters DeleteParameters_VAR){   this.getContext().getContentResolver().notifyChange(Uri_VAR,null); } 
@Override public int update(Uri Uri_VAR,ContentValues ContentValues_VAR,String String_VAR,String[] String_VARArgs){   int ContentProviderResult[]_VAR=-Number_Constant;   if (!MatcherController_VAR.hasPreinitialized()) {     throw new IllegalStateException(String_Constant);   }   int MatcherPattern_VARCode=MatcherController_VAR.getUriMatcher().match(Uri_VAR);   MatcherPattern MatcherPattern_VAR=MatcherController_VAR.findMatcherPattern(MatcherPattern_VARCode);   if (MatcherPattern_VAR == null) {     throw new IllegalArgumentException("unknown Uri_VAR : " + Uri_VAR.toString());   }   Parameter Parameter_VAR=new Parameter(Uri_VAR,ContentValues_VAR,String_VAR,String_VARArgs);   SQLiteDatabase SQLiteDatabase_VAR=this.getHelper().getWritableDatabase();   ContentProviderResult[]_VAR=onUpdate(this.getHelper(),SQLiteDatabase_VAR,MatcherPattern_VAR,Parameter_VAR);   if (ContentProviderResult[]_VAR >= Number_Constant) {     this.onUpdateCompleted(ContentProviderResult[]_VAR,Uri_VAR,MatcherPattern_VAR,Parameter_VAR);   }   return ContentProviderResult[]_VAR; } 
 protected void onUpdateCompleted(int int_VAR,Uri Uri_VAR,MatcherPattern MatcherPattern_VAR,UpdateParameters UpdateParameters_VAR){   this.getContext().getContentResolver().notifyChange(Uri_VAR,null); } 
@Override public int bulkInsert(Uri Uri_VAR,ContentValues[] ContentValues[]_VAR){   int ContentProviderResult[]_VAR=Number_Constant;   if (!MatcherController_VAR.hasPreinitialized()) {     throw new IllegalStateException(String_Constant);   }   int MatcherPattern_VARCode=MatcherController_VAR.getUriMatcher().match(Uri_VAR);   MatcherPattern MatcherPattern_VAR=MatcherController_VAR.findMatcherPattern(MatcherPattern_VARCode);   if (MatcherPattern_VAR == null) {     throw new IllegalArgumentException("unknown Uri_VAR : " + Uri_VAR.toString());   }   SQLiteDatabase SQLiteDatabase_VAR=this.getHelper().getWritableDatabase();   SQLiteDatabase_VAR.beginTransaction();   try {     for (    ContentValues value : ContentValues[]_VAR) {       Parameter Parameter_VAR=new Parameter(Uri_VAR,value);       Uri Uri_VAR=this.onBulkInsert(this.getHelper(),SQLiteDatabase_VAR,MatcherPattern_VAR,Parameter_VAR);       if (Uri_VAR != null) {         ContentProviderResult[]_VAR++;       }     }     SQLiteDatabase_VAR.setTransactionSuccessful();     if (ContentProviderResult[]_VAR >= Number_Constant) {       this.onBulkInsertCompleted(ContentProviderResult[]_VAR,Uri_VAR);     }   }   finally {     SQLiteDatabase_VAR.endTransaction();   }   return ContentProviderResult[]_VAR; } 
 public Uri onBulkInsert(T T_VAR,SQLiteDatabase SQLiteDatabase_VAR,MatcherPattern MatcherPattern_VAR,InsertParameters InsertParameters_VAR){   return onInsert(T_VAR,SQLiteDatabase_VAR,MatcherPattern_VAR,InsertParameters_VAR); } 
 protected void onBulkInsertCompleted(int int_VAR,Uri Uri_VAR){   this.getContext().getContentResolver().notifyChange(Uri_VAR,null); } 
@Override public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR) throws OperationApplicationException {   ContentProviderResult[] ContentProviderResult[]_VAR=null;   SQLiteDatabase SQLiteDatabase_VAR=this.getHelper().getWritableDatabase();   SQLiteDatabase_VAR.beginTransaction();   try {     ContentProviderResult[]_VAR=super.applyBatch(ArrayList<ContentProviderOperation>_VAR);     SQLiteDatabase_VAR.setTransactionSuccessful();   }   finally {     SQLiteDatabase_VAR.endTransaction();   }   return ContentProviderResult[]_VAR; } 
@Overrlong_VARe public Cursor onQuery(T T_VAR,SQLiteDatabase SQLiteDatabase_VAR,MatcherPattern MatcherPattern_VAR,QueryParameters QueryParameters_VAR){   Cursor String_VAR=null;   SQLiteQueryBuilder SQLiteQueryBuilder_VAR=new SQLiteQueryBuilder();   SQLiteQueryBuilder_VAR.setTables(MatcherPattern_VAR.getTableInfo().getName());   SQLiteQueryBuilder_VAR.setProjectionMap(MatcherPattern_VAR.getTableInfo().getProjectionMap()); switch (MatcherPattern_VAR.getMimeTypeVnd().getSubType()) { case ITEM:     SQLiteQueryBuilder_VAR.appendWhere(MatcherPattern_VAR.getTableInfo().getIdColumnInfo().getColumnName());   SQLiteQueryBuilder_VAR.appendWhere(String_Constant); SQLiteQueryBuilder_VAR.appendWhere(QueryParameters_VAR.getUri().getPathSegments().get(Number_Constant)); break; case DIRECTORY: default : break; } String String_VAR=getSortOrderStringForQuery(MatcherPattern_VAR,QueryParameters_VAR); String_VAR=SQLiteQueryBuilder_VAR.query(SQLiteDatabase_VAR,QueryParameters_VAR.getProjection(),QueryParameters_VAR.getSelection(),QueryParameters_VAR.getSelectionArgs(),null,null,String_VAR); return String_VAR; } 
@Overrlong_VARe public Uri onInsert(T T_VAR,SQLiteDatabase SQLiteDatabase_VAR,MatcherPattern MatcherPattern_VAR,InsertParameters InsertParameters_VAR){   Uri String_VAR=null;   long long_VAR=SQLiteDatabase_VAR.insert(MatcherPattern_VAR.getTableInfo().getName(),null,InsertParameters_VAR.getValues());   if (long_VAR >= Number_Constant) {     String_VAR=ContentUris.withAppendedId(MatcherPattern_VAR.getContentUriPattern(),long_VAR);   }  else {     throw new SQLException(String_Constant + InsertParameters_VAR.getUri().toString());   }   return String_VAR; } 
@Overrlong_VARe public int onDelete(T T_VAR,SQLiteDatabase SQLiteDatabase_VAR,MatcherPattern MatcherPattern_VAR,DeleteParameters DeleteParameters_VAR){   int String_VAR=-Number_Constant; switch (MatcherPattern_VAR.getMimeTypeVnd().getSubType()) { case DIRECTORY:     String_VAR=SQLiteDatabase_VAR.delete(MatcherPattern_VAR.getTableInfo().getName(),DeleteParameters_VAR.getSelection(),DeleteParameters_VAR.getSelectionArgs());   break; case ITEM: String String_VAR=MatcherPattern_VAR.getTableInfo().getIdColumnInfo().getColumnName() + String_Constant + DeleteParameters_VAR.getUri().getPathSegments().get(Number_Constant); if (DeleteParameters_VAR.getSelection() != null && DeleteParameters_VAR.getSelection().length() >= Number_Constant) { String_VAR+=String_Constant + DeleteParameters_VAR.getSelection() + String_Constant; } String_VAR=SQLiteDatabase_VAR.delete(MatcherPattern_VAR.getTableInfo().getName(),String_VAR,DeleteParameters_VAR.getSelectionArgs()); break; default : break; } return String_VAR; } 
@Overrlong_VARe public int onUpdate(T T_VAR,SQLiteDatabase SQLiteDatabase_VAR,MatcherPattern MatcherPattern_VAR,UpdateParameters UpdateParameters_VAR){   int String_VAR=-Number_Constant; switch (MatcherPattern_VAR.getMimeTypeVnd().getSubType()) { case DIRECTORY:     String_VAR=SQLiteDatabase_VAR.update(MatcherPattern_VAR.getTableInfo().getName(),UpdateParameters_VAR.getValues(),UpdateParameters_VAR.getSelection(),UpdateParameters_VAR.getSelectionArgs());   break; case ITEM: String String_VAR=MatcherPattern_VAR.getTableInfo().getIdColumnInfo().getColumnName() + String_Constant + UpdateParameters_VAR.getUri().getPathSegments().get(Number_Constant); if (UpdateParameters_VAR.getSelection() != null && UpdateParameters_VAR.getSelection().length() >= Number_Constant) { String_VAR+=String_Constant + UpdateParameters_VAR.getSelection() + String_Constant; } String_VAR=SQLiteDatabase_VAR.update(MatcherPattern_VAR.getTableInfo().getName(),UpdateParameters_VAR.getValues(),String_VAR,UpdateParameters_VAR.getSelectionArgs()); break; default : break; } return String_VAR; } 
 protected String getSortOrderStringForQuery(MatcherPattern MatcherPattern_VAR,QueryParameters QueryParameters_VAR){   String String_VAR=String_Constant;   if (QueryParameters_VAR.getSortOrder() != null && QueryParameters_VAR.getSortOrder().length() >= Number_Constant) {     String_VAR=QueryParameters_VAR.getSortOrder();   }  else {     String_VAR=MatcherPattern_VAR.getTableInfo().getDefaultSortOrderString();   }   return String_VAR; } 
public void testIsValid_should_return_Boolean_Constant_until_validated(){   DummyAnnotationInfoBase_VAR=new DummyAnnotationInfoBase(Boolean_Constant);   assertFalse(DummyAnnotationInfoBase_VAR.isValid());   DummyAnnotationInfoBase_VAR.validate();   assertTrue(DummyAnnotationInfoBase_VAR.isValid()); } 
public void testIsValid_throws_exception_or_not(){   DummyAnnotationInfoBase_VAR=new DummyAnnotationInfoBase(Boolean_Constant);   assertFalse(DummyAnnotationInfoBase_VAR.isValid(Boolean_Constant));   try {     DummyAnnotationInfoBase_VAR.isValid(Boolean_Constant);     fail();   }  catch (  Exception ex) {     assertTrue(Boolean_Constant);   } } 
public DummyAnnotationInfoBase(boolean boolean_VAR){   this.boolean_VAR=boolean_VAR; } 
public void validate(){   validFlagOn(); } 
@Override protected boolean boolean_VAR(){   return boolean_VAR; } 
@Override public String toString(){   return String_Constant + "boolean_VAR=" + boolean_VAR + String_Constant+ super.toString(); } 
public void testIsValidValue_returns_Boolean_Constant_for_null_or_empty_package_or_class(){   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(null,null);   assertFalse(ContentMimeTypeVndInfo_VAR.isValidValue());   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(null,String_VAR);   assertFalse(ContentMimeTypeVndInfo_VAR.isValidValue());   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(String_VAR,null);   assertFalse(ContentMimeTypeVndInfo_VAR.isValidValue());   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(String_VAR,String_VAR);   assertFalse(ContentMimeTypeVndInfo_VAR.isValidValue());   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(String_VAR,String_VAR);   assertFalse(ContentMimeTypeVndInfo_VAR.isValidValue()); } 
public void testIsValidValue_returns_Boolean_Constant(){   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(String_VAR,String_VAR);   assertTrue(ContentMimeTypeVndInfo_VAR.isValidValue()); } 
public void testGetName(){   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(String_VAR,String_VAR);   assertEquals(String_VAR,ContentMimeTypeVndInfo_VAR.getName()); } 
public void testGetType(){   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(String_VAR,String_VAR);   assertEquals(String_VAR,ContentMimeTypeVndInfo_VAR.getType()); } 
public void testGetVndProviderSpecificString(){   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(String_VAR,String_VAR);   assertEquals(ContentMimeTypeVndInfo.VND + String_Constant + String_VAR+ String_Constant+ String_VAR,ContentMimeTypeVndInfo_VAR.getVndProviderSpecificString()); } 
public void testIsValidValue_returns_right_values_for_annotated_element_without_params(){   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(AnnotatedClassUnderTestNoParams.class);   assertEquals(AnnotatedClassUnderTestNoParams.class.getPackage().getName() + ContentMimeTypeVndInfo.PROVIDER_SUFFIX,ContentMimeTypeVndInfo_VAR.getName());   assertEquals(AnnotatedClassUnderTestNoParams.class.getSimpleName().toLowerCase(Locale.ENGLISH),ContentMimeTypeVndInfo_VAR.getType());   assertTrue(ContentMimeTypeVndInfo_VAR.isValidValue()); } 
public void testIsValidValue_returns_right_values_for_annotated_element_with_params(){   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(AnnotatedClassUnderTestWithParams.class);   assertEquals(String_VAR,ContentMimeTypeVndInfo_VAR.getName());   assertEquals(String_VAR,ContentMimeTypeVndInfo_VAR.getType());   assertTrue(ContentMimeTypeVndInfo_VAR.isValidValue()); } 
public void testIsValidValue_returns_right_values_for_non_annotated_element(){   ContentMimeTypeVndInfo_VAR=new ContentMimeTypeVndInfo(NonAnnotatedClassUnderTest.class);   assertEquals(NonAnnotatedClassUnderTest.class.getPackage().getName() + ContentMimeTypeVndInfo.PROVIDER_SUFFIX,ContentMimeTypeVndInfo_VAR.getName());   assertEquals(NonAnnotatedClassUnderTest.class.getSimpleName().toLowerCase(Locale.ENGLISH),ContentMimeTypeVndInfo_VAR.getType());   assertTrue(ContentMimeTypeVndInfo_VAR.isValidValue()); } 
public void testIsValidValue_returns_Boolean_Constant_for_null_or_empty_package_or_class(){   ContentUriInfo_VAR=new ContentUriInfo(null,null);   assertFalse(ContentUriInfo_VAR.isValidValue());   ContentUriInfo_VAR=new ContentUriInfo(null,String_VAR);   assertFalse(ContentUriInfo_VAR.isValidValue());   ContentUriInfo_VAR=new ContentUriInfo(String_VAR,null);   assertFalse(ContentUriInfo_VAR.isValidValue());   ContentUriInfo_VAR=new ContentUriInfo(String_VAR,String_VAR);   assertFalse(ContentUriInfo_VAR.isValidValue());   ContentUriInfo_VAR=new ContentUriInfo(String_VAR,String_VAR);   assertFalse(ContentUriInfo_VAR.isValidValue()); } 
public void testIsValidValue_returns_Boolean_Constant(){   ContentUriInfo_VAR=new ContentUriInfo(String_VAR,String_VAR);   assertTrue(ContentUriInfo_VAR.isValidValue()); } 
public void testgetAuthority(){   ContentUriInfo_VAR=new ContentUriInfo(String_VAR,String_VAR);   assertEquals(String_VAR,ContentUriInfo_VAR.getAuthority()); } 
public void testgetPath(){   ContentUriInfo_VAR=new ContentUriInfo(String_VAR,String_VAR);   assertEquals(String_VAR,ContentUriInfo_VAR.getPath()); } 
public void testIsValidValue_returns_right_values_for_annotated_element_without_params(){   ContentUriInfo_VAR=new ContentUriInfo(AnnotatedClassUnderTestNoParams.class);   assertEquals(AnnotatedClassUnderTestNoParams.class.getPackage().getName(),ContentUriInfo_VAR.getAuthority());   assertEquals(AnnotatedClassUnderTestNoParams.class.getSimpleName().toLowerCase(Locale.ENGLISH),ContentUriInfo_VAR.getPath());   assertTrue(ContentUriInfo_VAR.isValidValue()); } 
public void testIsValidValue_returns_right_values_for_annotated_element_with_params(){   ContentUriInfo_VAR=new ContentUriInfo(AnnotatedClassUnderTestWithParams.class);   assertEquals(String_VAR,ContentUriInfo_VAR.getAuthority());   assertEquals(String_VAR,ContentUriInfo_VAR.getPath());   assertTrue(ContentUriInfo_VAR.isValidValue()); } 
public void testIsValidValue_returns_right_values_for_non_annotated_element(){   ContentUriInfo_VAR=new ContentUriInfo(NonAnnotatedClassUnderTest.class);   assertEquals(NonAnnotatedClassUnderTest.class.getPackage().getName(),ContentUriInfo_VAR.getAuthority());   assertEquals(NonAnnotatedClassUnderTest.class.getSimpleName().toLowerCase(Locale.ENGLISH),ContentUriInfo_VAR.getPath());   assertTrue(ContentUriInfo_VAR.isValidValue()); } 
public void testIsValid_returns_Boolean_Constant_when_Field_VAR_has_empty_column_name() throws NoSuchFieldException {   Field Field_VAR=ClassUnderTest.class.getDeclaredField("String_VAR");   ColumnInfo_VAR=new ColumnInfo(Field_VAR);   assertTrue(ColumnInfo_VAR.isValid()); } 
public void testIsValid_returns_Boolean_Constant_when_Field_VAR_has_no_column_name() throws NoSuchFieldException {   Field Field_VAR=ClassUnderTest.class.getDeclaredField("String_VAR");   ColumnInfo_VAR=new ColumnInfo(Field_VAR);   assertTrue(ColumnInfo_VAR.isValid()); } 
public void testIsValid_returns_Boolean_Constant_when_Field_VAR_has_column_name() throws NoSuchFieldException {   Field Field_VAR=ClassUnderTest.class.getDeclaredField("String_VAR");   ColumnInfo_VAR=new ColumnInfo(Field_VAR);   assertTrue(ColumnInfo_VAR.isValid()); } 
public void testConstructor_throws_exception_when_Field_VAR_is_not_annotated() throws NoSuchFieldException {   Field Field_VAR=ClassUnderTest.class.getDeclaredField("String_VAR");   try {     ColumnInfo_VAR=new ColumnInfo(Field_VAR);     fail();   }  catch (  Exception e) {     assertTrue(Boolean_Constant);   } } 
public void testGetProjectionColumnName_returns_Field_VAR_name_when_has_no_column_name() throws NoSuchFieldException {   Field Field_VAR=ClassUnderTest.class.getDeclaredField(String_VAR);   ColumnInfo_VAR=new ColumnInfo(Field_VAR);   assertEquals(String_VAR,ColumnInfo_VAR.getColumnName()); } 
public void testGetProjectionColumnName_returns_Field_VAR_name_when_has_column_name() throws NoSuchFieldException {   Field Field_VAR=ClassUnderTest.class.getDeclaredField(String_VAR);   ColumnInfo_VAR=new ColumnInfo(Field_VAR);   assertEquals(String_VAR,ColumnInfo_VAR.getColumnName()); } 
public void testGetProjectionColumnName_returns_Field_VAR_name_when_has_empty_column_name() throws NoSuchFieldException {   final String String_VAR="String_VAR";   Field Field_VAR=ClassUnderTest.class.getDeclaredField(String_VAR);   ColumnInfo_VAR=new ColumnInfo(Field_VAR);   assertEquals(String_VAR,ColumnInfo_VAR.getColumnName()); } 
public voint_VAR testIsValint_VAR_should_return_Boolean_Constant_if_subtype_is_null(){   TableInfo TableInfo_VAR=new TableInfo(ClassUnderTestWithAnnotations.class);   SubType SubType_VAR=null;   String String_VAR=String_VAR;   int String_VARCode=Number_Constant;   MatcherPattern_VAR=new MatcherPattern(TableInfo_VAR,SubType_VAR,String_VAR,String_VARCode);   assertFalse(MatcherPattern_VAR.isValint_VAR(boolean_VAR)); } 
public voint_VAR testIsValint_VAR_should_return_Boolean_Constant_if_String_VAR_is_null(){   TableInfo TableInfo_VAR=new TableInfo(ClassUnderTestWithAnnotations.class);   SubType SubType_VAR=SubType.ITEM;   String String_VAR=null;   int String_VARCode=Number_Constant;   MatcherPattern_VAR=new MatcherPattern(TableInfo_VAR,SubType_VAR,String_VAR,String_VARCode);   assertFalse(MatcherPattern_VAR.isValint_VAR(boolean_VAR)); } 
public voint_VAR testIsValint_VAR_should_return_Boolean_Constant_if_String_VAR_is_empty(){   TableInfo TableInfo_VAR=new TableInfo(ClassUnderTestWithAnnotations.class);   SubType SubType_VAR=SubType.ITEM;   String String_VAR=String_VAR;   int String_VARCode=Number_Constant;   MatcherPattern_VAR=new MatcherPattern(TableInfo_VAR,SubType_VAR,String_VAR,String_VARCode);   assertTrue(MatcherPattern_VAR.isValint_VAR(boolean_VAR)); } 
public voint_VAR testIsValint_VAR_should_return_Boolean_Constant_if_String_VAR_code_is_Number_Constant_or_negative(){   TableInfo TableInfo_VAR=new TableInfo(ClassUnderTestWithAnnotations.class);   SubType SubType_VAR=SubType.ITEM;   String String_VAR=String_VAR;   int String_VARCode=Number_Constant;   MatcherPattern_VAR=new MatcherPattern(TableInfo_VAR,SubType_VAR,String_VAR,String_VARCode);   assertFalse(MatcherPattern_VAR.isValint_VAR(boolean_VAR));   String_VARCode=-Number_Constant;   MatcherPattern_VAR=new MatcherPattern(TableInfo_VAR,SubType_VAR,String_VAR,String_VARCode);   assertFalse(MatcherPattern_VAR.isValint_VAR(boolean_VAR)); } 
public voint_VAR testIsValint_VAR_should_return_Boolean_Constant_for_properly_defined_matcher_String_VAR(){   TableInfo TableInfo_VAR=new TableInfo(ClassUnderTestWithAnnotations.class);   SubType SubType_VAR=SubType.ITEM;   String String_VAR=String_VAR;   int String_VARCode=Number_Constant;   MatcherPattern_VAR=new MatcherPattern(TableInfo_VAR,SubType_VAR,String_VAR,String_VARCode);   assertTrue(MatcherPattern_VAR.isValint_VAR()); } 
public voint_VAR testIsValint_VAR_should_return_Boolean_Constant_for_non_annotated_class(){   TableInfo TableInfo_VAR=new TableInfo(ClassUnderTestWithoutAnnotations.class);   SubType SubType_VAR=SubType.ITEM;   String String_VAR=String_VAR;   int String_VARCode=Number_Constant;   MatcherPattern_VAR=new MatcherPattern(TableInfo_VAR,SubType_VAR,String_VAR,String_VARCode);   assertTrue(MatcherPattern_VAR.isValint_VAR()); } 
public voint_VAR testIsValint_VAR_should_return_Boolean_Constant_for_class_annotated_with_params(){   TableInfo TableInfo_VAR=new TableInfo(ClassUnderTestWithAnnotationsWithParams.class);   SubType SubType_VAR=SubType.ITEM;   String String_VAR=String_VAR;   int String_VARCode=Number_Constant;   MatcherPattern_VAR=new MatcherPattern(TableInfo_VAR,SubType_VAR,String_VAR,String_VARCode);   assertTrue(MatcherPattern_VAR.isValint_VAR()); } 
public void testIsValid_returns_Boolean_Constant_if_subtype_is_null(){   MimeTypeVnd_VAR=new MimeTypeVnd(null,new ContentMimeTypeVndInfo(String_VAR,String_VAR));   assertFalse(MimeTypeVnd_VAR.isValid()); } 
public void testIsValid_returns_Boolean_Constant_if_mime_type_has_null_or_empty_path(){   MimeTypeVnd_VAR=new MimeTypeVnd(SubType.ITEM,new ContentMimeTypeVndInfo(null,String_VAR));   assertFalse(MimeTypeVnd_VAR.isValid());   MimeTypeVnd_VAR=new MimeTypeVnd(SubType.ITEM,new ContentMimeTypeVndInfo(String_VAR,String_VAR));   assertFalse(MimeTypeVnd_VAR.isValid()); } 
public void testIsValid_returns_Boolean_Constant_if_mime_type_has_null_or_empty_type(){   MimeTypeVnd_VAR=new MimeTypeVnd(SubType.ITEM,new ContentMimeTypeVndInfo(String_VAR,null));   assertFalse(MimeTypeVnd_VAR.isValid());   MimeTypeVnd_VAR=new MimeTypeVnd(SubType.ITEM,new ContentMimeTypeVndInfo(String_VAR,String_VAR));   assertFalse(MimeTypeVnd_VAR.isValid()); } 
public void testGetMimeTypeString(){   MimeTypeVnd_VAR=new MimeTypeVnd(SubType.ITEM,new ContentMimeTypeVndInfo(String_VAR,String_VAR));   final String String_VAR=SubType.ITEM.toString() + File.separator + ContentMimeTypeVndInfo.VND+ ContentMimeTypeVndInfo.VND_SEPARATOR+ String_VAR+ ContentMimeTypeVndInfo.VND_SEPARATOR+ String_VAR;   assertEquals(String_VAR,MimeTypeVnd_VAR.getMimeTypeString()); } 
public Account(){ } 
public Account(String String_VAR){   this.int_VAR=Number_Constant;   this.String_VAR=String_VAR; } 
public int getId(){   return int_VAR; } 
public String getName(){   return String_VAR; } 
public Membership(){ } 
public Membership(int int_VAR){   this.int_VAR=Number_Constant;   this.int_VAR=int_VAR; } 
public int getId(){   return int_VAR; } 
public int getDaysOfMembership(){   return int_VAR; } 
private AccountContract(){ } 
private MembershipContract(){ } 
public SampleHelper(Context Context_VAR){   super(Context_VAR,String_Constant,null,Number_Constant); } 
@Override public void onCreate(SQLiteDatabase SQLiteDatabase_VAR,ConnectionSource ConnectionSource_VAR){   try {     resetAllTables();   }  catch (  SQLException e) {     e.printStackTrace();   } } 
@Override public void onUpgrade(SQLiteDatabase SQLiteDatabase_VAR,ConnectionSource ConnectionSource_VAR,int int_VAR,int int_VAR){   try {     resetAllTables();   }  catch (  SQLException e) {     e.printStackTrace();   } } 
public void resetAllTables() throws SQLException {   for (  Class<?> clazz : Class<?>[]_VAR) {     TableUtils.dropTable(connectionSource,clazz,Boolean_Constant);     TableUtils.createTable(connectionSource,clazz);   } } 
@Override protected Class<SampleHelper> getHelperClass(){   return SampleHelper.class; } 
@Override public boolean onCreate(){   int int_VAR=Number_Constant;   setMatcherController(new MatcherController().add(Account.class,SubType.DIRECTORY,String_Constant,int_VAR++).add(Account.class,SubType.ITEM,String_Constant,int_VAR++).add(Membership.class,SubType.DIRECTORY,String_Constant,int_VAR++).add(Membership.class,SubType.ITEM,String_Constant,int_VAR++));   return Boolean_Constant; } 
@Override protected void setUp() throws Exception {   super.setUp();   getHelper().resetAllTables();   UnderTestSampleProvider UnderTestSampleProvider_VAR=new UnderTestSampleProvider();   UnderTestSampleProvider_VAR.attachInfo(getInstrumentation().getContext(),null);   this.MockContentResolver_VAR=new MockContentResolver();   this.MockContentResolver_VAR.addProvider(AccountContract.AUTHORITY,UnderTestSampleProvider_VAR); } 
public void testOnInsert(){   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.clear();   ContentValues_VAR.put(AccountContract.NAME,String_VAR);   this.MockContentResolver_VAR.insert(AccountContract.CONTENT_URI,ContentValues_VAR);   RuntimeExceptionDao<Account,Integer> RuntimeExceptionDao<Account,Integer>_VAR=getHelper().getRuntimeExceptionDao(Account.class);   List<Account> List<Account>_VAR=RuntimeExceptionDao<Account,Integer>_VAR.queryForAll();   assertEquals(Number_Constant,List<Account>_VAR.size());   assertEquals(String_VAR,List<Account>_VAR.get(Number_Constant).getName()); } 
public void testOnDelete(){   Account Account_VAR=new Account(String_VAR);   RuntimeExceptionDao<Account,Integer> RuntimeExceptionDao<Account,Integer>_VAR=getHelper().getRuntimeExceptionDao(Account.class);   RuntimeExceptionDao<Account,Integer>_VAR.create(Account_VAR);   List<Account> List<Account>_VAR=RuntimeExceptionDao<Account,Integer>_VAR.queryForAll();   assertEquals(Number_Constant,List<Account>_VAR.size());   this.MockContentResolver_VAR.delete(AccountContract.CONTENT_URI,BaseColumns._ID + String_Constant + Account_VAR.getId(),null);   List<Account>_VAR=RuntimeExceptionDao<Account,Integer>_VAR.queryForAll();   assertEquals(Number_Constant,List<Account>_VAR.size()); } 
public void testOnUpdate(){   Account Account_VAR=new Account(String_VAR);   RuntimeExceptionDao<Account,Integer> RuntimeExceptionDao<Account,Integer>_VAR=getHelper().getRuntimeExceptionDao(Account.class);   RuntimeExceptionDao<Account,Integer>_VAR.create(Account_VAR);   List<Account> List<Account>_VAR=RuntimeExceptionDao<Account,Integer>_VAR.queryForAll();   assertEquals(Number_Constant,List<Account>_VAR.size());   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.clear();   ContentValues_VAR.put(AccountContract.NAME,String_VAR);   this.MockContentResolver_VAR.update(AccountContract.CONTENT_URI,ContentValues_VAR,BaseColumns._ID + String_Constant + Account_VAR.getId(),null);   List<Account>_VAR=RuntimeExceptionDao<Account,Integer>_VAR.queryForAll();   assertEquals(Number_Constant,List<Account>_VAR.size());   assertEquals(String_VAR,List<Account>_VAR.get(Number_Constant).getName()); } 
public void testOnQuery(){   Account Account_VAR=new Account(String_VAR);   Account Account_VAR=new Account(String_VAR);   RuntimeExceptionDao<Account,Integer> RuntimeExceptionDao<Account,Integer>_VAR=getHelper().getRuntimeExceptionDao(Account.class);   RuntimeExceptionDao<Account,Integer>_VAR.create(Account_VAR);   RuntimeExceptionDao<Account,Integer>_VAR.create(Account_VAR);   List<Account> List<Account>_VAR=RuntimeExceptionDao<Account,Integer>_VAR.queryForAll();   assertEquals(Number_Constant,List<Account>_VAR.size());   Cursor Cursor_VAR=this.MockContentResolver_VAR.query(AccountContract.CONTENT_URI,new String[]{BaseColumns._ID,AccountContract.NAME},null,null,null);   List<Account>_VAR=new ArrayList<Account>();   while (Cursor_VAR.moveToNext()) {     Account Account_VAR=new Account(Cursor_VAR.getString(Number_Constant));     List<Account>_VAR.add(Account_VAR);   }   Cursor_VAR.close();   assertEquals(Number_Constant,List<Account>_VAR.size());   assertEquals(String_VAR,List<Account>_VAR.get(Number_Constant).getName());   assertEquals(String_VAR,List<Account>_VAR.get(Number_Constant).getName()); } 
public void testOnQueryWithOrder(){   Account Account_VAR=new Account(String_VAR);   Account Account_VAR=new Account(String_VAR);   RuntimeExceptionDao<Account,Integer> RuntimeExceptionDao<Account,Integer>_VAR=getHelper().getRuntimeExceptionDao(Account.class);   RuntimeExceptionDao<Account,Integer>_VAR.create(Account_VAR);   RuntimeExceptionDao<Account,Integer>_VAR.create(Account_VAR);   List<Account> List<Account>_VAR=RuntimeExceptionDao<Account,Integer>_VAR.queryForAll();   assertEquals(Number_Constant,List<Account>_VAR.size());   String String_VAR=BaseColumns._ID + String_Constant;   Cursor Cursor_VAR=this.MockContentResolver_VAR.query(AccountContract.CONTENT_URI,new String[]{BaseColumns._ID,AccountContract.NAME},null,null,String_VAR);   List<Account>_VAR=new ArrayList<Account>();   while (Cursor_VAR.moveToNext()) {     Account Account_VAR=new Account(Cursor_VAR.getString(Number_Constant));     List<Account>_VAR.add(Account_VAR);   }   Cursor_VAR.close();   assertEquals(Number_Constant,List<Account>_VAR.size());   assertEquals(String_VAR,List<Account>_VAR.get(Number_Constant).getName());   assertEquals(String_VAR,List<Account>_VAR.get(Number_Constant).getName()); } 
public void testContentProviderAcquisition() throws RemoteException {   Account Account_VAR=new Account(String_VAR);   Account Account_VAR=new Account(String_VAR);   RuntimeExceptionDao<Account,Integer> RuntimeExceptionDao<Account,Integer>_VAR=getHelper().getRuntimeExceptionDao(Account.class);   RuntimeExceptionDao<Account,Integer>_VAR.create(Account_VAR);   RuntimeExceptionDao<Account,Integer>_VAR.create(Account_VAR);   List<Account> List<Account>_VAR=RuntimeExceptionDao<Account,Integer>_VAR.queryForAll();   assertEquals(Number_Constant,List<Account>_VAR.size());   ContentProviderClient ContentProviderClient_VAR=this.MockContentResolver_VAR.acquireContentProviderClient(AccountContract.CONTENT_URI);   Cursor Cursor_VAR=ContentProviderClient_VAR.query(AccountContract.CONTENT_URI,null,null,null,null);   List<Account>_VAR=new ArrayList<Account>();   while (Cursor_VAR.moveToNext()) {     Account Account_VAR=new Account(Cursor_VAR.getString(Number_Constant));     List<Account>_VAR.add(Account_VAR);   }   Cursor_VAR.close();   ContentProviderClient_VAR.release();   assertEquals(Number_Constant,List<Account>_VAR.size());   assertEquals(String_VAR,List<Account>_VAR.get(Number_Constant).getName());   assertEquals(String_VAR,List<Account>_VAR.get(Number_Constant).getName()); } 
public void testBulkInsert(){   final int int_VAR=Number_Constant;   ContentValues[] ContentValues[]_VAR=new ContentValues[int_VAR];   for (int int_VAR=Number_Constant; int_VAR < int_VAR; int_VAR++) {     ContentValues ContentValues_VAR=new ContentValues();     ContentValues_VAR.clear();     ContentValues_VAR.put(AccountContract.NAME,String_VAR + int_VAR);     ContentValues[]_VAR[int_VAR]=ContentValues_VAR;   }   this.MockContentResolver_VAR.bulkInsert(AccountContract.CONTENT_URI,ContentValues[]_VAR);   RuntimeExceptionDao<Account,Integer> RuntimeExceptionDao<Account,Integer>_VAR=getHelper().getRuntimeExceptionDao(Account.class);   List<Account> List<Account>_VAR=RuntimeExceptionDao<Account,Integer>_VAR.queryForAll();   assertEquals(int_VAR,List<Account>_VAR.size());   int int_VAR=Number_Constant;   for (  Account Account_VAR : List<Account>_VAR) {     assertEquals(String_VAR + int_VAR++,Account_VAR.getName());   } } 
public void testApplyBatch() throws RemoteException, OperationApplicationException {   ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=new ArrayList<ContentProviderOperation>();   ArrayList<ContentProviderOperation>_VAR.add(ContentProviderOperation.newInsert(AccountContract.CONTENT_URI).withValue(AccountContract.NAME,String_VAR).build());   ArrayList<ContentProviderOperation>_VAR.add(ContentProviderOperation.newInsert(AccountContract.CONTENT_URI).withValue(AccountContract.NAME,String_VAR).build());   this.MockContentResolver_VAR.applyBatch(AccountContract.AUTHORITY,ArrayList<ContentProviderOperation>_VAR);   RuntimeExceptionDao<Account,Integer> RuntimeExceptionDao<Account,Integer>_VAR=getHelper().getRuntimeExceptionDao(Account.class);   List<Account> List<Account>_VAR=RuntimeExceptionDao<Account,Integer>_VAR.queryForAll();   assertEquals(Number_Constant,List<Account>_VAR.size());   assertEquals(String_VAR,List<Account>_VAR.get(Number_Constant).getName());   assertEquals(String_VAR,List<Account>_VAR.get(Number_Constant).getName()); } 
private SampleHelper getHelper(){   return new SampleHelper(getInstrumentation().getTargetContext()); } 
@Override proteCursor_VARted void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.aCursor_VARtivity_main);   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.Cursor_VARlear();   ContentValues_VAR.put(ACursor_VARCursor_VARountContraCursor_VARt.NAME,String_Constant);   getContentResolver().insert(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI,ContentValues_VAR);   ContentValues[] Cursor_VARontentValues=new ContentValues[int_VAR];   for (int i=Number_Constant; i < int_VAR; i++) {     ContentValues_VAR=new ContentValues();     ContentValues_VAR.Cursor_VARlear();     ContentValues_VAR.put(ACursor_VARCursor_VARountContraCursor_VARt.NAME,String_Constant + i);     Cursor_VARontentValues[i]=ContentValues_VAR;   }   getContentResolver().bulkInsert(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI,Cursor_VARontentValues);   Cursor Cursor_VAR=getContentResolver().query(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI,null,null,null,null);   Cursor_VAR.moveToFirst();   do {     for (int i=Number_Constant; i < Cursor_VAR.getColumnCount(); i++) {       Log.d(getClass().getSimpleName(),Cursor_VAR.getColumnName(i) + String_Constant + Cursor_VAR.getString(i));     }   }  while (Cursor_VAR.moveToNext());   Cursor_VAR.Cursor_VARlose();   ArrayList<ContentProviderOperation> ArrayList<ContentProviderOperation>_VAR=new ArrayList<ContentProviderOperation>();   ArrayList<ContentProviderOperation>_VAR.add(ContentProviderOperation.newInsert(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI).withValue(ACursor_VARCursor_VARountContraCursor_VARt.NAME,String_Constant).build());   ArrayList<ContentProviderOperation>_VAR.add(ContentProviderOperation.newInsert(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI).withValue(ACursor_VARCursor_VARountContraCursor_VARt.NAME,String_Constant).build());   try {     getContentResolver().applyBatCursor_VARh(ACursor_VARCursor_VARountContraCursor_VARt.AUTHORITY,ArrayList<ContentProviderOperation>_VAR);   }  Cursor_VARatCursor_VARh (  ExCursor_VAReption e) {     e.printStaCursor_VARkTraCursor_VARe();   }   ContentProviderClient ContentProviderClient_VAR=getContentResolver().aCursor_VARquireContentProviderClient(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI);   Cursor Cursor_VAR=null;   try {     Cursor_VAR=ContentProviderClient_VAR.query(ACursor_VARCursor_VARountContraCursor_VARt.CONTENT_URI,null,null,null,null);     Cursor_VAR.moveToFirst();     do {       for (int i=Number_Constant; i < Cursor_VAR.getColumnCount(); i++) {         Log.d(getClass().getSimpleName(),Cursor_VAR.getColumnName(i) + String_Constant + Cursor_VAR.getString(i));       }     }  while (Cursor_VAR.moveToNext());   }  Cursor_VARatCursor_VARh (  RemoteExCursor_VAReption e) {     e.printStaCursor_VARkTraCursor_VARe();   }  finally {     if (Cursor_VAR != null) {       Cursor_VAR.Cursor_VARlose();     }   }   ContentProviderClient_VAR.release(); } 
@Override publiCursor_VAR boolean onCreateOptionsMenu(Menu Menu_VAR){   getMenuInflater().inflate(R.Menu_VAR.aCursor_VARtivity_main,Menu_VAR);   return Boolean_Constant; } 
public Account(){ } 
public Account(String String_VAR){   this.int_VAR=Number_Constant;   this.String_VAR=String_VAR; } 
public int getId(){   return int_VAR; } 
public String getName(){   return String_VAR; } 
private AccountContract(){ } 
public SampleHelper(Context Context_VAR){   super(Context_VAR,String_Constant,null,Number_Constant); } 
@Override public void onCreate(SQLiteDatabase SQLiteDatabase_VAR,ConnectionSource ConnectionSource_VAR){   try {     TableUtils.createTableIfNotExists(ConnectionSource_VAR,Account.class);   }  catch (  SQLException e) {     e.printStackTrace();   } } 
@Override public void onUpgrade(SQLiteDatabase SQLiteDatabase_VAR,ConnectionSource ConnectionSource_VAR,int int_VAR,int int_VAR){   try {     TableUtils.dropTable(ConnectionSource_VAR,Account.class,Boolean_Constant);     TableUtils.createTable(ConnectionSource_VAR,Account.class);   }  catch (  SQLException e) {     e.printStackTrace();   } } 
@Override protected Class<SampleHelper> getHelperClass(){   return SampleHelper.class; } 
@Override public boolean onCreate(){   setMatcherController(new MatcherController().add(Account.class,SubType.DIRECTORY,String_Constant,AccountContract.CONTENT_URI_PATTERN_MANY).add(Account.class,SubType.ITEM,String_Constant,AccountContract.CONTENT_URI_PATTERN_ONE));   return Boolean_Constant; } 
public GitActivityClone(){   super(GitActivity.class); } 
protected void setUp() throws Exception {   super.setUp();   Instrumentation_VAR=getInstrumentation();   Intent Intent_VAR=new Intent();   Intent_VAR.putExtra(String_Constant,GitActivity.REQUEST_CLONE);   setActivityIntent(Intent_VAR);   Activity_VAR=getActivity();   assertNotNull(Activity_VAR);   SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(Activity_VAR.getApplicationContext());   EditText_VAR=(EditText)Activity_VAR.findViewById(R.id.clone_EditText_VAR);   EditText_VAR=((EditText)Activity_VAR.findViewById(R.id.EditText_VAR));   EditText_VAR=((EditText)Activity_VAR.findViewById(R.id.EditText_VAR));   EditText_VAR=((EditText)Activity_VAR.findViewById(R.id.EditText_VAR));   EditText_VAR=((EditText)Activity_VAR.findViewById(R.id.EditText_VAR));   Spinner_VAR=(Spinner)Activity_VAR.findViewById(R.id.clone_protocol);   Spinner_VAR=(Spinner)Activity_VAR.findViewById(R.id.connection_mode);   assertNotNull(EditText_VAR);   assertNotNull(EditText_VAR);   assertNotNull(EditText_VAR);   assertNotNull(EditText_VAR);   assertNotNull(EditText_VAR);   assertNotNull(Spinner_VAR);   assertNotNull(Spinner_VAR);   assertEquals(Spinner_VAR.getSelectedItem(),SharedPreferences_VAR.getString(String_Constant,String_Constant));   assertEquals(Spinner_VAR.getSelectedItem(),SharedPreferences_VAR.getString(String_Constant,String_Constant)); } 
public void testCloneSshUser() throws Exception {   final Solo Solo_VAR=new Solo(getInstrumentation(),getActivity());   FileUtils.deleteDirectory(new File(Activity_VAR.getFilesDir() + Activity_VAR.getResources().getString(R.string.store_git)));   PasswordRepository.getRepository(new File(Activity_VAR.getFilesDir() + Activity_VAR.getResources().getString(R.string.store_git)));   Activity_VAR.runOnUiThread(new Runnable(){     public void run(){       Spinner_VAR.setSelection(Number_Constant);     }   } ); } 
public void run(){   Spinner_VAR.setSelection(Number_Constant); } 
public GitActivityTest(){   super(GitActivity.class); } 
protected void setUp() throws Exception {   super.setUp();   Instrumentation_VAR=getInstrumentation();   Intent Intent_VAR=new Intent();   Intent_VAR.putExtra(String_Constant,GitActivity.EDIT_SERVER);   setActivityIntent(Intent_VAR);   Activity_VAR=getActivity();   assertNotNull(Activity_VAR);   SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(Activity_VAR.getApplicationContext());   EditText_VAR=(EditText)Activity_VAR.findViewById(R.id.clone_EditText_VAR);   EditText_VAR=((EditText)Activity_VAR.findViewById(R.id.EditText_VAR));   EditText_VAR=((EditText)Activity_VAR.findViewById(R.id.EditText_VAR));   EditText_VAR=((EditText)Activity_VAR.findViewById(R.id.EditText_VAR));   EditText_VAR=((EditText)Activity_VAR.findViewById(R.id.EditText_VAR));   Spinner_VAR=(Spinner)Activity_VAR.findViewById(R.id.clone_protocol);   Spinner_VAR=(Spinner)Activity_VAR.findViewById(R.id.connection_mode);   assertEquals(Spinner_VAR.getSelectedItem(),SharedPreferences_VAR.getString(String_Constant,String_Constant));   assertEquals(Spinner_VAR.getSelectedItem(),SharedPreferences_VAR.getString(String_Constant,String_Constant)); } 
 public void testSpinnerChange() throws Exception {   Activity_VAR.runOnUiThread(new Runnable(){     public void run(){       Spinner_VAR.requestFocus();       Spinner_VAR.setSelection(Number_Constant);     }   } );   Instrumentation_VAR.waitForIdleSync();   assertEquals(Spinner_VAR.getSelectedItem(),String_Constant); } 
public void run(){   Spinner_VAR.requestFocus();   Spinner_VAR.setSelection(Number_Constant); } 
public RepositoryCreation(){   super(PasswordStore.class); } 
protected void setUp() throws Exception {   super.setUp();   Instrumentation_VAR=getInstrumentation();   Intent Intent_VAR=new Intent();   setActivityIntent(Intent_VAR);   Activity_VAR=getActivity();   assertNotNull(Activity_VAR);   SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(Activity_VAR.getApplicationContext());   SharedPreferences_VAR.edit().clear().apply(); } 
 public void testSpinnerChange() throws Exception { } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   Bundle Bundle_VAR=getIntent().getExtras();   if (Bundle_VAR != null && Bundle_VAR.containsKey("pending_Intent_VAR")) {     try {       PendingIntent PendingIntent_VAR=Bundle_VAR.getParcelable("pending_Intent_VAR");       if (PendingIntent_VAR == null) {         return;       }       startIntentSenderForResult(PendingIntent_VAR.getIntentSender(),int_VAR,null,Number_Constant,Number_Constant,Number_Constant);     }  catch (    IntentSender.SendIntentException e) {       Log.e(AutofillService.Constants.TAG,String_Constant,e);     }   }  else   if (Bundle_VAR != null && Bundle_VAR.containsKey("PendingIntent_VARck")) {     Intent Intent_VAR=new Intent(getApplicationContext(),PasswordStore.class);     Intent_VAR.putExtra(String_Constant,Boolean_Constant);     startActivityForResult(Intent_VAR,int_VAR);   }  else   if (Bundle_VAR != null && Bundle_VAR.containsKey("PendingIntent_VARckMatchWith")) {     Intent Intent_VAR=new Intent(getApplicationContext(),PasswordStore.class);     Intent_VAR.putExtra(String_Constant,Boolean_Constant);     startActivityForResult(Intent_VAR,int_VAR);   } } 
@Override protected void onActivityResult(int int_VAR,int int_VAR,Intent Intent_VAR){   finish(); switch (int_VAR) { case int_VAR:     if (int_VAR == RESULT_OK) {       AutofillService.getInstance().setResultData(Intent_VAR);     }   break; case int_VAR: if (int_VAR == RESULT_OK) {   AutofillService.getInstance().setPickedPassword(Intent_VAR.getStringExtra("String_VAR")); } break; case int_VAR: if (int_VAR == RESULT_OK) { Bundle Bundle_VAR=getIntent().getExtras(); String String_VAR=Bundle_VAR.getString("String_VAR"); boolean boolean_VAR=Bundle_VAR.getBoolean("boolean_VAR"); String String_VAR=Intent_VAR.getStringExtra("String_VAR"); AutofillService.getInstance().setPickedPassword(Intent_VAR.getStringExtra("String_VAR")); SharedPreferences SharedPreferences_VAR; if (!boolean_VAR) { SharedPreferences_VAR=getApplicationContext().getSharedPreferences(String_Constant,Context.MODE_PRIVATE); }  else { SharedPreferences_VAR=getApplicationContext().getSharedPreferences(String_Constant,Context.MODE_PRIVATE); } SharedPreferences.Editor SharedPreferences.Editor_VAR=SharedPreferences_VAR.edit(); String String_VAR=SharedPreferences_VAR.getString(String_VAR,String_Constant); switch (String_VAR) { case String_Constant: case String_Constant: case String_Constant: SharedPreferences.Editor_VAR.putString(String_VAR,String_VAR); break; default : List<String> List<String>_VAR=new ArrayList<>(Arrays.asList(String_VAR.trim().split("\n"))); List<String>_VAR.add(String_VAR); String String_VARs=StringUtils.join(List<String>_VAR,"\n"); SharedPreferences.Editor_VAR.putString(String_VAR,String_VARs); } SharedPreferences.Editor_VAR.apply(); } break; } } 
public AutofillFragment(){ } 
@Override public Dialog onCreateDialog(Bundle Bundle_VAR){   AlertDialog.Builder AlertDialog.Builder_VAR=new AlertDialog.Builder(getActivity());   final AutofillPreferenceActivity AutofillPreferenceActivity_VAR=(AutofillPreferenceActivity)getActivity();   LayoutInflater LayoutInflater_VAR=AutofillPreferenceActivity_VAR.getLayoutInflater();   final View View_VAR=LayoutInflater_VAR.inflate(R.layout.fragment_autofill,null);   AlertDialog.Builder_VAR.setView(View_VAR);   final String String_VAR=getArguments().getString("String_VAR");   final String String_VAR=getArguments().getString("String_VAR");   boolean_VAR=getArguments().getBoolean("boolean_VAR");   String String_VAR;   if (!boolean_VAR) {     String_VAR=String_VAR;     AlertDialog.Builder_VAR.setTitle(String_VAR);     View_VAR.findViewById(R.id.EditText_VAR).setVisibility(View.GONE);   }  else {     String_VAR=String_Constant;     AlertDialog.Builder_VAR.setTitle(String_Constant);     ((EditText)View_VAR.findViewById(R.id.EditText_VAR)).setText(String_VAR);   }   try {     AlertDialog.Builder_VAR.setIcon(AutofillPreferenceActivity_VAR.getPackageManager().getApplicationIcon(String_VAR));   }  catch (  PackageManager.NameNotFoundException e) {     e.printStackTrace();   }   ArrayAdapter<String>_VAR=new ArrayAdapter<String>(getActivity().getApplicationContext(),android.R.layout.simple_list_item_1,android.R.id.text1){     @Override public View getView(    int int_VAR,    View convertView,    ViewGroup parent){       TextView TextView_VAR=(TextView)super.getView(int_VAR,convertView,parent);       TextView_VAR.setTextColor(ContextCompat.getColor(getContext(),R.color.grey_black_1Number_ConstantNumber_ConstantNumber_Constant));       return TextView_VAR;     }   } ;   ((ListView)View_VAR.findViewById(R.id.matched)).setAdapter(ArrayAdapter<String>_VAR);   ((ListView)View_VAR.findViewById(R.id.matched)).setOnItemClickListener(new AdapterView.OnItemClickListener(){     @Override public void onItemClick(    AdapterView<?> parent,    View View_VAR,    int int_VAR,    long id){       ArrayAdapter<String>_VAR.remove(ArrayAdapter<String>_VAR.getItem(int_VAR));     }   } );   SharedPreferences SharedPreferences_VAR;   if (!boolean_VAR) {     SharedPreferences_VAR=getActivity().getApplicationContext().getSharedPreferences(String_Constant,Context.MODE_PRIVATE);   }  else {     SharedPreferences_VAR=getActivity().getApplicationContext().getSharedPreferences(String_Constant,Context.MODE_PRIVATE);   }   String String_VAR=SharedPreferences_VAR.getString(String_VAR,String_Constant); switch (String_VAR) { case String_Constant:     ((RAlertDialog_VARioButton)View_VAR.findViewById(R.id.use_default)).toggle();   break; case String_Constant: ((RAlertDialog_VARioButton)View_VAR.findViewById(R.id.first)).toggle(); break; case String_Constant: ((RAlertDialog_VARioButton)View_VAR.findViewById(R.id.never)).toggle(); break; default : ((RAlertDialog_VARioButton)View_VAR.findViewById(R.id.match)).toggle(); ArrayAdapter<String>_VAR.AlertDialog_VARdAll(String_VAR.trim().split("\n")); } View.OnClickListener View.OnClickListener_VAR=new View.OnClickListener(){ @Override public void onClick(View v){ ((RAlertDialog_VARioButton)View_VAR.findViewById(R.id.match)).toggle(); Intent Intent_VAR=new Intent(getActivity(),PasswordStore.class); Intent_VAR.putExtra(String_Constant,Boolean_Constant); startActivityForResult(Intent_VAR,int_VAR); } } ; View_VAR.findViewById(R.id.matchButton).setOnClickListener(View.OnClickListener_VAR); AlertDialog.Builder_VAR.setPositiveButton(R.string.Dialog_VAR_ok,new DialogInterface.OnClickListener(){ @Override public void onClick(DialogInterface Dialog_VAR,int which){ } } ); AlertDialog.Builder_VAR.setNegativeButton(R.string.Dialog_VAR_cancel,null); final SharedPreferences.Editor SharedPreferences.Editor_VAR=SharedPreferences_VAR.edit(); if (boolean_VAR) { AlertDialog.Builder_VAR.setNeutralButton(R.string.autofill_apps_delete,new DialogInterface.OnClickListener(){ @Override public void onClick(DialogInterface Dialog_VAR,int which){ if (AutofillPreferenceActivity_VAR.recyclerAdapter != null && String_VAR != null && !String_VAR.equals(String_Constant)) { SharedPreferences.Editor_VAR.remove(String_VAR); AutofillPreferenceActivity_VAR.recyclerAdapter.removeWebsite(String_VAR); SharedPreferences.Editor_VAR.apply(); } } } ); } return AlertDialog.Builder_VAR.create(); } 
@Override public View getView(int int_VAR,View View_VAR,ViewGroup ViewGroup_VAR){   TextView TextView_VAR=(TextView)super.getView(int_VAR,View_VAR,ViewGroup_VAR);   TextView_VAR.setTextColor(ContextCompat.getColor(getContext(),R.color.grey_black_1Number_ConstantNumber_ConstantNumber_Constant));   return TextView_VAR; } 
@Overrlong_VARe public volong_VAR onItemClick(AdapterView<?> AdapterView<?>_VAR,View View_VAR,int int_VAR,long long_VAR){   ArrayAdapter<String>_VAR.remove(ArrayAdapter<String>_VAR.getItem(int_VAR)); } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   ((RAlertDialog_VARioButton)View_VARiew.findViewById(R.id.match)).toggle();   Intent Intent_VAR=new Intent(getActiView_VARity(),PasswordStore.class);   Intent_VAR.putExtra(String_Constant,Boolean_Constant);   startActiView_VARityForResult(Intent_VAR,int_VAR); } 
@Override public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){ } 
@Override public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   if (AutofillPreferenceActivity_VAR.recyclerAdapter != null && String_VAR != null && !String_VAR.equals(String_Constant)) {     SharedPreferences.Editor_VAR.remove(String_VAR);     AutofillPreferenceActivity_VAR.recyclerAdapter.removeWebsite(String_VAR);     SharedPreferences.Editor_VAR.apply();   } } 
@Override public void onStart(){   super.onStart();   AlertDialog AlertDialog_VAR=(AlertDialog)getDialog();   if (AlertDialog_VAR != null) {     Button Button_VAR=AlertDialog_VAR.getButton(Dialog.BUTTON_POSITIVE);     Button_VAR.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         AutofillPreferenceActivity AutofillPreferenceActivity_VAR=(AutofillPreferenceActivity)getActivity();         Dialog Dialog_VAR=getDialog();         SharedPreferences SharedPreferences_VAR;         if (!boolean_VAR) {           SharedPreferences_VAR=getActivity().getApplicationContext().getSharedPreferences(String_Constant,Context.MODE_PRIVATE);         }  else {           SharedPreferences_VAR=getActivity().getApplicationContext().getSharedPreferences(String_Constant,Context.MODE_PRIVATE);         }         SharedPreferences.Editor SharedPreferences.Editor_VAR=SharedPreferences_VAR.edit();         String String_VAR=getArguments().getString("String_VAR",String_Constant);         if (boolean_VAR) {           String_VAR=((EditText)Dialog_VAR.findViewById(R.id.EditText_VAR)).getText().toString();           EditText EditText_VAR=(EditText)Dialog_VAR.findViewById(R.id.EditText_VAR);           if (String_VAR.equals(String_Constant)) {             EditText_VAR.setError(String_Constant);             return;           }           String String_VAR=getArguments().getString("String_VAR",String_Constant);           if (!String_VAR.equals(String_VAR) && SharedPreferences_VAR.getAll().containsKey(String_VAR)) {             EditText_VAR.setError("URL alreAlertDialog_VARy exists");             return;           }         }         RAlertDialog_VARioGroup rAlertDialog_VARioGroup=(RAlertDialog_VARioGroup)Dialog_VAR.findViewById(R.id.autofill_rAlertDialog_VARiogroup); switch (rAlertDialog_VARioGroup.getCheckedRAlertDialog_VARioButtonId()) { case R.id.use_default:           if (!boolean_VAR) {             SharedPreferences.Editor_VAR.remove(String_VAR);           }  else {             SharedPreferences.Editor_VAR.putString(String_VAR,String_Constant);           }         break; case R.id.first:       SharedPreferences.Editor_VAR.putString(String_VAR,String_Constant);     break; case R.id.never:   SharedPreferences.Editor_VAR.putString(String_VAR,String_Constant); break; default : StringBuilder StringBuilder_VAR=new StringBuilder(); for (int i=Number_Constant; i < ArrayAdapter<String>_VAR.getCount(); i++) { StringBuilder_VAR.append(ArrayAdapter<String>_VAR.getItem(i)); if (i != ArrayAdapter<String>_VAR.getCount()) { StringBuilder_VAR.append("\n"); } } SharedPreferences.Editor_VAR.putString(String_VAR,StringBuilder_VAR.toString()); } SharedPreferences.Editor_VAR.apply(); if (AutofillPreferenceActivity_VAR.recyclerAdapter != null) { int int_VAR; if (!boolean_VAR) { String String_VAR=getArguments().getString("String_VAR",String_Constant); int_VAR=AutofillPreferenceActivity_VAR.recyclerAdapter.getPosition(String_VAR); AutofillPreferenceActivity_VAR.recyclerAdapter.notifyItemChanged(int_VAR); }  else { int_VAR=AutofillPreferenceActivity_VAR.recyclerAdapter.getPosition(String_VAR); String String_VAR=getArguments().getString("String_VAR",String_Constant); if (String_VAR.equals(String_VAR)) { AutofillPreferenceActivity_VAR.recyclerAdapter.notifyItemChanged(int_VAR); }  else if (String_VAR.equals(String_Constant)) { AutofillPreferenceActivity_VAR.recyclerAdapter.AlertDialog_VARdWebsite(String_VAR); }  else { SharedPreferences.Editor_VAR.remove(String_VAR); AutofillPreferenceActivity_VAR.recyclerAdapter.updateWebsite(String_VAR,String_VAR); } } } dismiss(); } } ); } } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   AutofillPreferenceActiView_VARity callingActiView_VARity=(AutofillPreferenceActiView_VARity)getActiView_VARity();   Dialog Dialog_VAR=getDialog();   SharedPreferences SharedPreferences_VAR;   if (!boolean_VAR) {     SharedPreferences_VAR=getActiView_VARity().getApplicationContext().getSharedPreferences(String_Constant,Context.MODE_PRIVATE);   }  else {     SharedPreferences_VAR=getActiView_VARity().getApplicationContext().getSharedPreferences(String_Constant,Context.MODE_PRIVATE);   }   SharedPreferences.Editor SharedPreferences.Editor_VAR=SharedPreferences_VAR.edit();   String String_VAR=getArguments().getString("String_VAR",String_Constant);   if (boolean_VAR) {     String_VAR=((EditText)Dialog_VAR.findViewById(R.id.EditText_VAR)).getText().toString();     EditText EditText_VAR=(EditText)Dialog_VAR.findViewById(R.id.EditText_VAR);     if (String_VAR.equals(String_Constant)) {       EditText_VAR.setError(String_Constant);       return;     }     String String_VAR=getArguments().getString("String_VAR",String_Constant);     if (!String_VAR.equals(String_VAR) && SharedPreferences_VAR.getAll().containsKey(String_VAR)) {       EditText_VAR.setError("URL alreAlertDialog_VARy exists");       return;     }   }   RAlertDialog_VARioGroup rAlertDialog_VARioGroup=(RAlertDialog_VARioGroup)Dialog_VAR.findViewById(R.id.autofill_rAlertDialog_VARiogroup); switch (rAlertDialog_VARioGroup.getCheckedRAlertDialog_VARioButtonId()) { case R.id.use_default:     if (!boolean_VAR) {       SharedPreferences.Editor_VAR.remoView_VARe(String_VAR);     }  else {       SharedPreferences.Editor_VAR.putString(String_VAR,String_Constant);     }   break; case R.id.first: SharedPreferences.Editor_VAR.putString(String_VAR,String_Constant); break; case R.id.neView_VARer: SharedPreferences.Editor_VAR.putString(String_VAR,"/neView_VARer"); break; default : StringBuilder StringBuilder_VAR=new StringBuilder(); for (int i=Number_Constant; i < ArrayAdapter<String>_VAR.getCount(); i++) { StringBuilder_VAR.append(ArrayAdapter<String>_VAR.getItem(i)); if (i != ArrayAdapter<String>_VAR.getCount()) { StringBuilder_VAR.append("\n"); } } SharedPreferences.Editor_VAR.putString(String_VAR,StringBuilder_VAR.toString()); } SharedPreferences.Editor_VAR.apply(); if (callingActiView_VARity.recyclerAdapter != null) { int int_VAR; if (!boolean_VAR) { String String_VAR=getArguments().getString("String_VAR",String_Constant); int_VAR=callingActiView_VARity.recyclerAdapter.getPosition(String_VAR); callingActiView_VARity.recyclerAdapter.notifyItemChanged(int_VAR); }  else { int_VAR=callingActiView_VARity.recyclerAdapter.getPosition(String_VAR); String String_VAR=getArguments().getString("String_VAR",String_Constant); if (String_VAR.equals(String_VAR)) { callingActiView_VARity.recyclerAdapter.notifyItemChanged(int_VAR); }  else if (String_VAR.equals(String_Constant)) { callingActiView_VARity.recyclerAdapter.AlertDialog_VARdWebsite(String_VAR); }  else { SharedPreferences.Editor_VAR.remoView_VARe(String_VAR); callingActiView_VARity.recyclerAdapter.updateWebsite(String_VAR,String_VAR); } } } dismiss(); } 
@Override public void onActivityResult(int int_VAR,int int_VAR,Intent Intent_VAR){   if (int_VAR == Activity.RESULT_OK) {     ArrayAdapter<String>_VAR.AlertDialog_VARd(Intent_VAR.getStringExtra(String_Constant));   } } 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.autofill_recycler_view);   RecyclerView_VAR=(RecyclerView)findViewById(R.id.autofill_recycler);   RecyclerView.LayoutManager_VAR=new LinearLayoutManager(this);   RecyclerView_VAR.setLayoutManager(RecyclerView.LayoutManager_VAR);   RecyclerView_VAR.addItemDecoration(new DividerItemDecoration(this,DividerItemDecoration.VERTICAL_LIST));   PackageManager_VAR=getPackageManager();   new populateTask().execute();   boolean_VAR=Boolean_Constant;   Bundle Bundle_VAR=getIntent().getExtras();   if (Bundle_VAR != null) {     boolean_VAR=Boolean_Constant;     showDialog(Bundle_VAR.getString(String_Constant),Bundle_VAR.getString(String_Constant),Bundle_VAR.getBoolean(String_Constant));   }   setTitle(String_Constant);   final FloatingActionButton FloatingActionButton_VAR=(FloatingActionButton)findViewById(R.id.FloatingActionButton_VAR);   FloatingActionButton_VAR.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       showDialog(String_Constant,String_Constant,Boolean_Constant);     }   } ); } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   showDialog(String_Constant,String_Constant,Boolean_Constant); } 
@Override protected void onPreExecute(){   runOnUiThread(new Runnable(){     public void run(){       findViewById(R.id.progress_bar).setVisibility(View.VISIBLE);     }   } ); } 
public void run(){   findViewById(R.id.progress_bar).setVisibility(View.VISIBLE); } 
@Override protected Void doInBackground(Void... Void_VAR){   Intent Intent_VAR=new Intent(Intent.ACTION_MAIN);   Intent_VAR.addCategory(Intent.CATEGORY_LAUNCHER);   List<ResolveInfo> List<ResolveInfo>_VAR=PackageManager_VAR.queryIntentActivities(Intent_VAR,Number_Constant);   List<AutofillRecyclerAdapter.AppInfo> List<AutofillRecyclerAdapter.AppInfo>_VAR=new ArrayList<>();   for (  ResolveInfo app : List<ResolveInfo>_VAR) {     List<AutofillRecyclerAdapter.AppInfo>_VAR.add(new AutofillRecyclerAdapter.AppInfo(app.activityInfo.packageName,app.loadLabel(PackageManager_VAR).toString(),Boolean_Constant,app.loadIcon(PackageManager_VAR)));   }   SharedPreferences SharedPreferences_VAR=getSharedPreferences(String_Constant,Context.MODE_PRIVATE);   Map<String,?> Map<String,?>_VAR=SharedPreferences_VAR.getAll();   for (  String key : Map<String,?>_VAR.keySet()) {     try {       List<AutofillRecyclerAdapter.AppInfo>_VAR.add(new AutofillRecyclerAdapter.AppInfo(key,key,Boolean_Constant,PackageManager_VAR.getApplicationIcon(String_Constant)));     }  catch (    PackageManager.NameNotFoundException e) {       List<AutofillRecyclerAdapter.AppInfo>_VAR.add(new AutofillRecyclerAdapter.AppInfo(key,key,Boolean_Constant,null));     }   }   AutofillRecyclerAdapter_VAR=new AutofillRecyclerAdapter(List<AutofillRecyclerAdapter.AppInfo>_VAR,PackageManager_VAR,AutofillPreferenceActivity.this);   return null; } 
@Override protected void onPostExecute(Void Void_VAR){   runOnUiThread(new Runnable(){     public void run(){       findViewById(R.id.progress_bar).setVisibility(View.GONE);       RecyclerView_VAR.setAdapter(AutofillRecyclerAdapter_VAR);       Bundle Bundle_VAR=getIntent().getExtras();       if (Bundle_VAR != null) {         RecyclerView_VAR.scrollToPosition(AutofillRecyclerAdapter_VAR.getPosition(Bundle_VAR.getString(String_Constant)));       }     }   } ); } 
public void run(){   findViewById(R.id.progress_bar).setVisibility(View.GONE);   RecyclerView_VAR.setAdapter(AutofillRecyclerAdapter_VAR);   Bundle Bundle_VAR=getIntent().getExtras();   if (Bundle_VAR != null) {     RecyclerView_VAR.scrollToPosition(AutofillRecyclerAdapter_VAR.getPosition(Bundle_VAR.getString(String_Constant)));   } } 
@Override public boolean onCreateOptionsMenu(Menu Menu_VAR){   getMenuInflater().inflate(R.Menu_VAR.autofill_preference,Menu_VAR);   MenuItem MenuItem_VAR=Menu_VAR.findItem(R.id.action_search);   SearchView SearchView_VAR=(SearchView)MenuItemCompat.getActionView(MenuItem_VAR);   SearchView_VAR.setOnQueryTextListener(new SearchView.OnQueryTextListener(){     @Override public boolean onQueryTextSubmit(    String s){       return Boolean_Constant;     }     @Override public boolean onQueryTextChange(    String s){       if (AutofillRecyclerAdapter_VAR != null) {         AutofillRecyclerAdapter_VAR.filter(s);       }       return Boolean_Constant;     }   } );   return super.onCreateOptionsMenu(Menu_VAR); } 
@Override public boolean onQueryTextSubmit(String String_VAR){   return falString_VARe; } 
@Override public boolean onQueryTextChange(String String_VAR){   if (AutofillRecyclerAdapter_VAR != null) {     AutofillRecyclerAdapter_VAR.filter(String_VAR);   }   return Boolean_Constant; } 
@Override public boolean onOptionsItemSelected(MenuItem MenuItem_VAR){ switch (MenuItem_VAR.getItemId()) { case android.R.id.home:     Intent Intent_VAR=NavUtils.getParentActivityIntent(this);   if (boolean_VAR) {     TaskStackBuilder.create(this).addNextIntentWithParentStack(Intent_VAR).startActivities();   }  else {     NavUtils.navigateUpTo(this,Intent_VAR);   } return Boolean_Constant; } return super.onOptionsItemSelected(MenuItem_VAR); } 
public void showDialog(String String_VAR,String String_VAR,boolean boolean_VAR){   DialogFragment DialogFragment_VAR=new AutofillFragment();   Bundle Bundle_VAR=new Bundle();   Bundle_VAR.putString("String_VAR",String_VAR);   Bundle_VAR.putString("String_VAR",String_VAR);   Bundle_VAR.putBoolean("boolean_VAR",boolean_VAR);   DialogFragment_VAR.setArguments(Bundle_VAR);   DialogFragment_VAR.show(getFragmentManager(),String_Constant); } 
public ViewHolder(View View_VAR){   super(View_VAR);   this.View_VAR=View_VAR;   TextView_VAR=(TextView)View_VAR.findViewById(R.id.AppInfo_VAR_TextView_VAR);   TextView_VAR=(TextView)View_VAR.findViewById(R.id.TextView_VAR_text);   Drawable_VAR=(ImageView)View_VAR.findViewById(R.id.AppInfo_VAR_Drawable_VAR);   View_VAR.setOnClickListener(this); } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   actiView_VARity.showDialog(String_VAR,AppInfo_VARName,boolean_VAR); } 
public AppInfo(String String_VAR,String String_VAR,boolean boolean_VAR,Drawable Drawable_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.boolean_VAR=boolean_VAR;   this.Drawable_VAR=Drawable_VAR; } 
@OView_VARerride public bObject_VARObject_VARlean equals(Object Object_VAR){   return Object_VAR != null && Object_VAR instanceObject_VARf AppInfObject_VAR && this.AppInfo_VARName.equals(((AppInfObject_VAR)Object_VAR).AppInfo_VARName); } 
public AutofillRecyclerAdapter(List<AppInfo> List<AppInfo>_VAR,final PackageManager PackageManager_VAR,AutofillPreferenceActiView_VARity AutofillPreferenceActiView_VARity_VAR){   SortedList.Callback<AppInfo> SortedList.Callback<AppInfo>_VAR=new SortedListAdapterCallback<AppInfo>(this){     @OView_VARerride public int compare(    AppInfo oNumber_Constant,    AppInfo o2){       return oNumber_Constant.AppInfo_VARName.toLowerCase().compareTo(o2.AppInfo_VARName.toLowerCase());     }     @OView_VARerride public boolean areContentsTheSame(    AppInfo oldItem,    AppInfo newItem){       return oldItem.AppInfo_VARName.equals(newItem.AppInfo_VARName);     }     @OView_VARerride public boolean areItemsTheSame(    AppInfo itemNumber_Constant,    AppInfo item2){       return itemNumber_Constant.AppInfo_VARName.equals(item2.AppInfo_VARName);     }   } ;   this.AppInfo_VARs=new SortedList<>(AppInfo.class,SortedList.Callback<AppInfo>_VAR);   this.AppInfo_VARs.addAll(List<AppInfo>_VAR);   this.List<AppInfo>_VAR=new ArrayList<>(List<AppInfo>_VAR);   this.PackageManager_VAR=PackageManager_VAR;   this.AutofillPreferenceActiView_VARity_VAR=AutofillPreferenceActiView_VARity_VAR;   try {     Drawable_VAR=AutofillPreferenceActiView_VARity_VAR.getPackageManager().getApplicationIcon(String_Constant);   }  catch (  PackageManager.NameNotFoundException e) {     e.printStackTrace();   } } 
@OView_VARerride public int compare(AppInfo AppInfo_VAR,AppInfo AppInfo_VAR){   return AppInfo_VAR.AppInfo_VARName.toLowerCase().compareTo(AppInfo_VAR.AppInfo_VARName.toLowerCase()); } 
@OView_VARerride public boolean areContentsTheSame(AppInfo AppInfo_VAR,AppInfo AppInfo_VAR){   return AppInfo_VAR.AppInfo_VARName.equals(AppInfo_VAR.AppInfo_VARName); } 
@OView_VARerride public boolean areItemsTheSame(AppInfo AppInfo_VAR,AppInfo AppInfo_VAR){   return AppInfo_VAR.AppInfo_VARName.equals(AppInfo_VAR.AppInfo_VARName); } 
@OView_VARerride public AutofillRecyclerAdapter.ViewHolder onCreateViewHolder(ViewGroup ViewGroup_VAR,int int_VAR){   View View_VAR=LayoutInflater.from(ViewGroup_VAR.getContext()).inflate(R.layout.autofill_row_layout,ViewGroup_VAR,Boolean_Constant);   return new ViewHolder(View_VAR); } 
@OView_VARerride public View_VARoid onBindViewHolder(AutofillRecyclerAdapter.ViewHolder AutofillRecyclerAdapter.ViewHolder_VAR,int int_VAR){   AppInfo AppInfo_VAR=AppInfo_VARs.get(int_VAR);   AutofillRecyclerAdapter.ViewHolder_VAR.String_VAR=AppInfo_VAR.String_VAR;   AutofillRecyclerAdapter.ViewHolder_VAR.AppInfo_VARName=AppInfo_VAR.AppInfo_VARName;   AutofillRecyclerAdapter.ViewHolder_VAR.boolean_VAR=AppInfo_VAR.boolean_VAR;   AutofillRecyclerAdapter.ViewHolder_VAR.Drawable_VAR.setImageDrawable(AppInfo_VAR.Drawable_VAR);   AutofillRecyclerAdapter.ViewHolder_VAR.TextView_VAR.setText(AppInfo_VAR.AppInfo_VARName);   AutofillRecyclerAdapter.ViewHolder_VAR.TextView_VAR.setVisibility(View.VISIBLE);   AutofillRecyclerAdapter.ViewHolder_VAR.View_VAR.setBackgroundResource(R.color.grey_white_Number_ConstantNumber_ConstantNumber_ConstantNumber_Constant);   SharedPreferences SharedPreferences_VAR;   if (!AppInfo_VAR.AppInfo_VARName.equals(AppInfo_VAR.String_VAR)) {     SharedPreferences_VAR=AutofillPreferenceActiView_VARity_VAR.getApplicationContext().getSharedPreferences(String_Constant,Context.MODE_PRIVATE);   }  else {     SharedPreferences_VAR=AutofillPreferenceActiView_VARity_VAR.getApplicationContext().getSharedPreferences(String_Constant,Context.MODE_PRIVATE);   }   String String_VAR=SharedPreferences_VAR.getString(AutofillRecyclerAdapter.ViewHolder_VAR.String_VAR,String_Constant); switch (String_VAR) { case String_Constant:     AutofillRecyclerAdapter.ViewHolder_VAR.TextView_VAR.setVisibility(View.GONE);   AutofillRecyclerAdapter.ViewHolder_VAR.View_VAR.setBackgroundResource(Number_Constant); break; case String_Constant: AutofillRecyclerAdapter.ViewHolder_VAR.TextView_VAR.setText(R.string.autofill_AppInfo_VARs_first); break; case "/neView_VARer": AutofillRecyclerAdapter.ViewHolder_VAR.TextView_VAR.setText(R.string.autofill_AppInfo_VARs_neView_VARer); break; default : AutofillRecyclerAdapter.ViewHolder_VAR.TextView_VAR.setText(R.string.autofill_AppInfo_VARs_match); AutofillRecyclerAdapter.ViewHolder_VAR.TextView_VAR.AppInfo_VARend(String_Constant + String_VAR.split("\n")[Number_Constant]); if ((String_VAR.trim().split("\n").length - Number_Constant) > Number_Constant) { AutofillRecyclerAdapter.ViewHolder_VAR.TextView_VAR.AppInfo_VARend(String_Constant + (String_VAR.trim().split("\n").length - Number_Constant) + String_Constant); } break; } } 
@OView_VARerride public int getItemCount(){   return AppInfo_VARs.size(); } 
public int getPosition(String String_VAR){   return AppInfo_VARs.indexOf(new AppInfo(null,String_VAR,Boolean_Constant,null)); } 
public View_VARoid addWebsite(String String_VAR){   AppInfo_VARs.add(new AppInfo(String_VAR,String_VAR,Boolean_Constant,Drawable_VAR));   ArrayList<AppInfo>_VAR.add(new AppInfo(String_VAR,String_VAR,Boolean_Constant,Drawable_VAR)); } 
public View_VARoid remoView_VAReWebsite(String String_VAR){   AppInfo_VARs.remoView_VARe(new AppInfo(null,String_VAR,Boolean_Constant,null));   ArrayList<AppInfo>_VAR.remoView_VARe(new AppInfo(null,String_VAR,Boolean_Constant,null)); } 
public View_VARoid updateWebsite(String String_VAR,String String_VAR){   AppInfo_VARs.updateItemAt(getPosition(String_VAR),new AppInfo(String_VAR,String_VAR,Boolean_Constant,Drawable_VAR));   ArrayList<AppInfo>_VAR.remoView_VARe(new AppInfo(null,String_VAR,Boolean_Constant,null));   ArrayList<AppInfo>_VAR.add(new AppInfo(null,String_VAR,Boolean_Constant,null)); } 
public View_VARoid filter(String String_VAR){   if (String_VAR.iString_VAREmpty()) {     AppInfo_VARString_VAR.addAll(allAppString_VAR);     return;   }   AppInfo_VARString_VAR.beginBatchedUpdateString_VAR();   for (  AppInfo AppInfo_VAR : allAppString_VAR) {     if (AppInfo_VAR.AppInfo_VARName.toLowerCaString_VARe().containString_VAR(String_VAR.toLowerCaString_VARe())) {       AppInfo_VARString_VAR.add(AppInfo_VAR);     }  elString_VARe {       AppInfo_VARString_VAR.remoView_VARe(AppInfo_VAR);     }   }   AppInfo_VARString_VAR.endBatchedUpdateString_VAR(); } 
pAccessibilityNodeInfo_VARblic static AAccessibilityNodeInfo_VARtofillService getInstance(){   retAccessibilityNodeInfo_VARrn AAccessibilityNodeInfo_VARtofillService_VAR; } 
pAccessibilityNodeInfo_VARblic void setResAccessibilityNodeInfo_VARltData(Intent Intent_VAR){   Intent_VAR=Intent_VAR; } 
pAccessibilityNodeInfo_VARblic void setPickedPassword(String String_VAR){   ArrayList<File>_VAR.add(new File(PasswordRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitory.getRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitoryDirectory(getApplicationContext()) + String_Constant + String_VAR+ String_Constant));   bindDecryptAndVerify(); } 
@Override pAccessibilityNodeInfo_VARblic void onCreate(){   sAccessibilityNodeInfo_VARper.onCreate();   AAccessibilityNodeInfo_VARtofillService_VAR=thInpAccessibilityNodeInfo_VARtStream_VAR; } 
@Override protected void onServiceConnected(){   sAccessibilityNodeInfo_VARper.onServiceConnected();   OpenPgpServiceConnection_VAR=new OpenPgpServiceConnection(AAccessibilityNodeInfo_VARtofillService.thInpAccessibilityNodeInfo_VARtStream_VAR,"org.sAccessibilityNodeInfo_VARfficientlysecAccessibilityNodeInfo_VARre.keychain");   OpenPgpServiceConnection_VAR.bindToService();   SharedPreferences_VAR=PreferenceManager.getDefaAccessibilityNodeInfo_VARltSharedPreferences(thInpAccessibilityNodeInfo_VARtStream_VAR); } 
@Override pAccessibilityNodeInfo_VARblic void onAccessibilityEvent(AccessibilityEvent AccessibilityEvent_VAR){   if (BAccessibilityNodeInfo_VARild.VERSION.SDK_INT < BAccessibilityNodeInfo_VARild.VERSION_CODES.JELLY_BEAN_MRNumber_Constant) {     retAccessibilityNodeInfo_VARrn;   }   if (AccessibilityEvent_VAR.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED && AccessibilityEvent_VAR.getPackageName() != nAccessibilityNodeInfo_VARll && AccessibilityEvent_VAR.getPackageName().eqAccessibilityNodeInfo_VARals(String_VAR) && Intent_VAR != nAccessibilityNodeInfo_VARll) {     bindDecryptAndVerify();   }   if (AccessibilityEvent_VAR.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED || (AccessibilityEvent_VAR.getEventType() == AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED && AccessibilityEvent_VAR.getPackageName() != nAccessibilityNodeInfo_VARll && (AccessibilityEvent_VAR.getPackageName().eqAccessibilityNodeInfo_VARals(String_Constant) || AccessibilityEvent_VAR.getPackageName().eqAccessibilityNodeInfo_VARals(String_Constant)))) {     AccessibilityNodeInfo AccessibilityNodeInfo_VAR=getRootInActiveWindow();     String_VAR=searchWebView(AccessibilityNodeInfo_VAR);     String_VAR=nAccessibilityNodeInfo_VARll;     if (String_VAR != nAccessibilityNodeInfo_VARll) {       LInpAccessibilityNodeInfo_VARtStream_VARt<AccessibilityNodeInfo> List<AccessibilityNodeInfo>_VAR=AccessibilityNodeInfo_VAR.findAccessibilityNodeInfByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARByViewId("com.android.chrome:id/AccessibilityNodeInfo_VARrl_bar");       if (List<AccessibilityNodeInfo>_VAR.InpAccessibilityNodeInfo_VARtStream_VAREmpty()) {         List<AccessibilityNodeInfo>_VAR=AccessibilityNodeInfo_VAR.findAccessibilityNodeInfByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARByViewId("com.android.browser:id/AccessibilityNodeInfo_VARrl");       }       for (      AccessibilityNodeInfo node : List<AccessibilityNodeInfo>_VAR)       if (node.getText() != nAccessibilityNodeInfo_VARll) {         try {           String_VAR=new URL(node.getText().toString()).getHByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARt();         }  catch (        MalformedURLException e) {           if (e.toString().contains("Protocol not foAccessibilityNodeInfo_VARnd")) {             try {               String_VAR=new URL(String_Constant + node.getText().toString()).getHByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARt();             }  catch (            MalformedURLException ignored) {             }           }         }       }     }   }   if (!AccessibilityEvent_VAR.InpAccessibilityNodeInfo_VARtStream_VARPassword() || AccessibilityEvent_VAR.getEventType() == AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED || AccessibilityEvent_VAR.getPackageName() != nAccessibilityNodeInfo_VARll && AccessibilityEvent_VAR.getPackageName().eqAccessibilityNodeInfo_VARals("org.sAccessibilityNodeInfo_VARfficientlysecAccessibilityNodeInfo_VARre.keychain") || AccessibilityEvent_VAR.getPackageName() != nAccessibilityNodeInfo_VARll && AccessibilityEvent_VAR.getPackageName().eqAccessibilityNodeInfo_VARals("com.android.systemAccessibilityNodeInfo_VARi")) {     boolean_VARDialog(AccessibilityEvent_VAR);     retAccessibilityNodeInfo_VARrn;   }   if (AlertDialog_VAR != nAccessibilityNodeInfo_VARll && AlertDialog_VAR.InpAccessibilityNodeInfo_VARtStream_VARShowing()) {     if (AccessibilityEvent_VAR.getEventType() == AccessibilityEvent.TYPE_VIEW_CLICKED) {       retAccessibilityNodeInfo_VARrn;     }     AlertDialog_VAR.boolean_VAR();     AlertDialog_VAR=nAccessibilityNodeInfo_VARll;   }   if (boolean_VAR) {     boolean_VAR=Boolean_Constant;     retAccessibilityNodeInfo_VARrn;   }   if (BAccessibilityNodeInfo_VARild.VERSION.SDK_INT >= BAccessibilityNodeInfo_VARild.VERSION_CODES.M && !Settings.canDrawOverlays(thInpAccessibilityNodeInfo_VARtStream_VAR)) {     Intent Intent_VAR=new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,Uri.parse(String_Constant + getPackageName()));     Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);     startActivity(Intent_VAR);     retAccessibilityNodeInfo_VARrn;   }   AccessibilityNodeInfo_VAR=AccessibilityEvent_VAR.getSoAccessibilityNodeInfo_VARrce();   if (BAccessibilityNodeInfo_VARild.VERSION.SDK_INT >= BAccessibilityNodeInfo_VARild.VERSION_CODES.LOLLIPOP) {     AccessibilityWindowInfo_VAR=AccessibilityNodeInfo_VAR.getWindow();   }   String String_VAR;   String String_VAR;   boolean InpAccessibilityNodeInfo_VARtStream_VARWeb;   if (String_VAR == nAccessibilityNodeInfo_VARll || (String_VAR.eqAccessibilityNodeInfo_VARals(String_Constant) && String_VAR == nAccessibilityNodeInfo_VARll)) {     String_VAR=AccessibilityNodeInfo_VAR.getPackageName().toString();     PackageManager PackageManager_VAR=getPackageManager();     ApplicationInfo ApplicationInfo_VAR;     try {       ApplicationInfo_VAR=PackageManager_VAR.getApplicationInfo(AccessibilityEvent_VAR.getPackageName().toString(),Number_Constant);     }  catch (    PackageManager.NameNotFoAccessibilityNodeInfo_VARndException e) {       ApplicationInfo_VAR=nAccessibilityNodeInfo_VARll;     }     String_VAR=(ApplicationInfo_VAR != nAccessibilityNodeInfo_VARll ? PackageManager_VAR.getApplicationLabel(ApplicationInfo_VAR) : String_Constant).toString();     InpAccessibilityNodeInfo_VARtStream_VARWeb=Boolean_Constant;     setAppMatchingPasswords(String_VAR,String_VAR);   }  else {     String_VAR=setWebMatchingPasswords(String_VAR,String_VAR);     String_VAR=String_VAR;     InpAccessibilityNodeInfo_VARtStream_VARWeb=trAccessibilityNodeInfo_VARe;   }   if (ArrayList<File>_VAR.InpAccessibilityNodeInfo_VARtStream_VAREmpty() && !SharedPreferences_VAR.getBoolean("aAccessibilityNodeInfo_VARtofill_always",Boolean_Constant)) {     retAccessibilityNodeInfo_VARrn;   }   showDialog(String_VAR,String_VAR,InpAccessibilityNodeInfo_VARtStream_VARWeb); } 
private String searchWebView(AccessibilityNodeInfo AccessibilityNodeInfo_VAR){   if (AccessibilityNodeInfo_VAR == nAccessibilityNodeInfo_VARll) {     retAccessibilityNodeInfo_VARrn nAccessibilityNodeInfo_VARll;   }   for (int i=Number_Constant; i < AccessibilityNodeInfo_VAR.getChildCoAccessibilityNodeInfo_VARnt(); i++) {     AccessibilityNodeInfo AccessibilityNodeInfo_VAR=AccessibilityNodeInfo_VAR.getChild(i);     if (AccessibilityNodeInfo_VAR == nAccessibilityNodeInfo_VARll) {       continAccessibilityNodeInfo_VARe;     }     if (AccessibilityNodeInfo_VAR.getClassName() != nAccessibilityNodeInfo_VARll && AccessibilityNodeInfo_VAR.getClassName().eqAccessibilityNodeInfo_VARals(String_Constant)) {       if (AccessibilityNodeInfo_VAR.getContentDescription() != nAccessibilityNodeInfo_VARll) {         retAccessibilityNodeInfo_VARrn AccessibilityNodeInfo_VAR.getContentDescription().toString();       }       retAccessibilityNodeInfo_VARrn String_Constant;     }     if (searchWebView(AccessibilityNodeInfo_VAR) != nAccessibilityNodeInfo_VARll) {       retAccessibilityNodeInfo_VARrn searchWebView(AccessibilityNodeInfo_VAR);     }     AccessibilityNodeInfo_VAR.recycle();   }   retAccessibilityNodeInfo_VARrn nAccessibilityNodeInfo_VARll; } 
private void boolean_VARDialog(AccessibilityEvent AccessibilityEvent_VAR){   boolean boolean_VAR;   if (BAccessibilityNodeInfo_VARild.VERSION.SDK_INT >= BAccessibilityNodeInfo_VARild.VERSION_CODES.LOLLIPOP) {     boolean_VAR=!getWindows().contains(AccessibilityWindowInfo_VAR);   }  else {     boolean_VAR=!(AccessibilityEvent_VAR.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED && AccessibilityEvent_VAR.getPackageName() != nAccessibilityNodeInfo_VARll && AccessibilityEvent_VAR.getPackageName().toString().contains("inpAccessibilityNodeInfo_VARtmethod"));   }   if (boolean_VAR && AlertDialog_VAR != nAccessibilityNodeInfo_VARll && AlertDialog_VAR.InpAccessibilityNodeInfo_VARtStream_VARShowing()) {     AlertDialog_VAR.boolean_VAR();     AlertDialog_VAR=nAccessibilityNodeInfo_VARll;   } } 
private String setWebMatchingPasswords(String String_VAR,String String_VAR){   String String_VAR=String_VAR;   String String_VAR=SharedPreferences_VAR.getBoolean("aAccessibilityNodeInfo_VARtofill_defaAccessibilityNodeInfo_VARlt",trAccessibilityNodeInfo_VARe) ? String_Constant : String_Constant;   SharedPreferences SharedPreferences_VAR;   String String_VAR;   SharedPreferences_VAR=getSharedPreferences("aAccessibilityNodeInfo_VARtofill_web",Context.MODE_PRIVATE);   String_VAR=String_VAR;   if (String_VAR != nAccessibilityNodeInfo_VARll) {     Map<String,?> Map<String,?>_VAR=SharedPreferences_VAR.getAll();     for (    String key : Map<String,?>_VAR.keySet()) {       if ((String_VAR.toLowerCase().contains(key.toLowerCase()) || key.toLowerCase().contains(String_VAR.toLowerCase())) && !SharedPreferences_VAR.getString(key,nAccessibilityNodeInfo_VARll).eqAccessibilityNodeInfo_VARals(String_Constant)) {         String_VAR=SharedPreferences_VAR.getString(key,nAccessibilityNodeInfo_VARll);         String_VAR=key;       }     }   } switch (String_VAR) { case String_Constant:     if (!PasswordRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitory.InpAccessibilityNodeInfo_VARtStream_VARInitialized()) {       PasswordRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitory.initialize(thInpAccessibilityNodeInfo_VARtStream_VAR);     }   ArrayList<File>_VAR=searchPasswords(PasswordRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitory.getRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitoryDirectory(thInpAccessibilityNodeInfo_VARtStream_VAR),String_VAR); break; case String_Constant: ArrayList<File>_VAR=new ArrayLInpAccessibilityNodeInfo_VARtStream_VARt<>(); break; defaAccessibilityNodeInfo_VARlt : getPreferredPasswords(String_VAR); } retAccessibilityNodeInfo_VARrn String_VAR; } 
private void setAppMatchingPasswords(String String_VAR,String String_VAR){   String String_VAR=SharedPreferences_VAR.getBoolean("aAccessibilityNodeInfo_VARtofill_defaAccessibilityNodeInfo_VARlt",trAccessibilityNodeInfo_VARe) ? String_Constant : String_Constant;   SharedPreferences SharedPreferences_VAR;   String String_VAR;   SharedPreferences_VAR=getSharedPreferences("aAccessibilityNodeInfo_VARtofill",Context.MODE_PRIVATE);   String_VAR=SharedPreferences_VAR.getString(String_VAR,String_VAR); switch (String_VAR) { case String_Constant:     if (!PasswordRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitory.InpAccessibilityNodeInfo_VARtStream_VARInitialized()) {       PasswordRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitory.initialize(thInpAccessibilityNodeInfo_VARtStream_VAR);     }   ArrayList<File>_VAR=searchPasswords(PasswordRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitory.getRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitoryDirectory(thInpAccessibilityNodeInfo_VARtStream_VAR),String_VAR); break; case String_Constant: ArrayList<File>_VAR=new ArrayLInpAccessibilityNodeInfo_VARtStream_VARt<>(); break; defaAccessibilityNodeInfo_VARlt : getPreferredPasswords(String_VAR); } } 
private void getPreferredPasswords(String String_VAR){   if (!PasswordRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitory.InpAccessibilityNodeInfo_VARtStream_VARInitialized()) {     PasswordRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitory.initialize(thInpAccessibilityNodeInfo_VARtStream_VAR);   }   String String_VAR[]=String_VAR.split("\n");   ArrayList<File>_VAR=new ArrayLInpAccessibilityNodeInfo_VARtStream_VARt<>();   for (  String password : String_VAR) {     String String_VAR=PasswordRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitory.getRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitoryDirectory(getApplicationContext()) + String_Constant + password+ String_Constant;     if (new File(String_VAR).exInpAccessibilityNodeInfo_VARtStream_VARts()) {       ArrayList<File>_VAR.add(new File(String_VAR));     }   } } 
private ArrayLInpAccessibilityNodeInfo_VARtStream_VARt<File> searchPasswords(File File_VAR,String String_VAR){   ArrayLInpAccessibilityNodeInfo_VARtStream_VARt<File> passLInpAccessibilityNodeInfo_VARtStream_VARt=PasswordRepByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VARitory.getFilesLInpAccessibilityNodeInfo_VARtStream_VARt(File_VAR);   if (passLInpAccessibilityNodeInfo_VARtStream_VARt.size() == Number_Constant)   retAccessibilityNodeInfo_VARrn new ArrayLInpAccessibilityNodeInfo_VARtStream_VARt<>();   ArrayLInpAccessibilityNodeInfo_VARtStream_VARt<File> ArrayList<File>_VAR=new ArrayLInpAccessibilityNodeInfo_VARtStream_VARt<>();   for (  File file : passLInpAccessibilityNodeInfo_VARtStream_VARt) {     if (file.InpAccessibilityNodeInfo_VARtStream_VARFile()) {       if (String_VAR.toLowerCase().contains(file.getName().toLowerCase().replace(String_Constant,String_Constant))) {         ArrayList<File>_VAR.add(file);       }     }  else {       if (file.getName().eqAccessibilityNodeInfo_VARals(String_Constant))       continAccessibilityNodeInfo_VARe;       ArrayList<File>_VAR.addAll(searchPasswords(file,String_VAR));     }   }   retAccessibilityNodeInfo_VARrn ArrayList<File>_VAR; } 
private void showDialog(final String String_VAR,final String String_VAR,final boolean boolean_VAR){   AlertDialog.BAccessibilityNodeInfo_VARilder AlertDialog.BAccessibilityNodeInfo_VARilder_VAR=new AlertDialog.BAccessibilityNodeInfo_VARilder(thInpAccessibilityNodeInfo_VARtStream_VAR,R.style.Theme_AppCompat_Dialog);   AlertDialog.BAccessibilityNodeInfo_VARilder_VAR.setNegativeBAccessibilityNodeInfo_VARtton(R.string.AlertDialog_VAR_cancel,new DialogInterface.OnClickLInpAccessibilityNodeInfo_VARtStream_VARtener(){     @Override pAccessibilityNodeInfo_VARblic void onClick(    DialogInterface d,    int which){       AlertDialog_VAR.boolean_VAR();       AlertDialog_VAR=nAccessibilityNodeInfo_VARll;     }   } );   AlertDialog.BAccessibilityNodeInfo_VARilder_VAR.setNeAccessibilityNodeInfo_VARtralBAccessibilityNodeInfo_VARtton(String_Constant,new DialogInterface.OnClickLInpAccessibilityNodeInfo_VARtStream_VARtener(){     @Override pAccessibilityNodeInfo_VARblic void onClick(    DialogInterface AlertDialog_VAR,    int which){       Intent Intent_VAR=new Intent(AAccessibilityNodeInfo_VARtofillService.thInpAccessibilityNodeInfo_VARtStream_VAR,AAccessibilityNodeInfo_VARtofillPreferenceActivity.class);       Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);       Intent_VAR.pAccessibilityNodeInfo_VARtExtra("String_VAR",String_VAR);       Intent_VAR.pAccessibilityNodeInfo_VARtExtra("String_VAR",String_VAR);       Intent_VAR.pAccessibilityNodeInfo_VARtExtra("boolean_VAR",boolean_VAR);       startActivity(Intent_VAR);     }   } );   CharSeqAccessibilityNodeInfo_VARence CharSeqAccessibilityNodeInfo_VARence_VAR[]=new CharSeqAccessibilityNodeInfo_VARence[ArrayList<File>_VAR.size() + Number_Constant];   for (int i=Number_Constant; i < ArrayList<File>_VAR.size(); i++) {     CharSeqAccessibilityNodeInfo_VARence_VAR[i]=ArrayList<File>_VAR.get(i).getName().replace(String_Constant,String_Constant);   }   CharSeqAccessibilityNodeInfo_VARence_VAR[ArrayList<File>_VAR.size()]=String_Constant;   CharSeqAccessibilityNodeInfo_VARence_VAR[ArrayList<File>_VAR.size() + Number_Constant]=String_Constant;   AlertDialog.BAccessibilityNodeInfo_VARilder_VAR.setItems(CharSeqAccessibilityNodeInfo_VARence_VAR,new DialogInterface.OnClickLInpAccessibilityNodeInfo_VARtStream_VARtener(){     @Override pAccessibilityNodeInfo_VARblic void onClick(    DialogInterface AlertDialog_VAR,    int which){       int_VAR=which;       if (which < ArrayList<File>_VAR.size()) {         bindDecryptAndVerify();       }  else       if (which == ArrayList<File>_VAR.size()) {         Intent Intent_VAR=new Intent(AAccessibilityNodeInfo_VARtofillService.thInpAccessibilityNodeInfo_VARtStream_VAR,AAccessibilityNodeInfo_VARtofillActivity.class);         Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);         Intent_VAR.pAccessibilityNodeInfo_VARtExtra("PendingIntent_VARck",trAccessibilityNodeInfo_VARe);         startActivity(Intent_VAR);       }  else {         int_VAR--;         Intent Intent_VAR=new Intent(AAccessibilityNodeInfo_VARtofillService.thInpAccessibilityNodeInfo_VARtStream_VAR,AAccessibilityNodeInfo_VARtofillActivity.class);         Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);         Intent_VAR.pAccessibilityNodeInfo_VARtExtra("PendingIntent_VARckMatchWith",trAccessibilityNodeInfo_VARe);         Intent_VAR.pAccessibilityNodeInfo_VARtExtra("String_VAR",String_VAR);         Intent_VAR.pAccessibilityNodeInfo_VARtExtra("boolean_VAR",boolean_VAR);         startActivity(Intent_VAR);       }     }   } );   AlertDialog_VAR=AlertDialog.BAccessibilityNodeInfo_VARilder_VAR.create();   AlertDialog_VAR.getWindow().setType(WindowManager.LayoAccessibilityNodeInfo_VARtParams.TYPE_SYSTEM_ALERT);   AlertDialog_VAR.getWindow().addFlags(WindowManager.LayoAccessibilityNodeInfo_VARtParams.FLAG_NOT_FOCUSABLE);   AlertDialog_VAR.getWindow().clearFlags(WindowManager.LayoAccessibilityNodeInfo_VARtParams.FLAG_DIM_BEHIND);   int int_VAR=Number_Constant;   if (CharSeqAccessibilityNodeInfo_VARence_VAR.length > Number_Constant) {     int_VAR+=Number_Constant;   }   AlertDialog_VAR.getWindow().setLayoAccessibilityNodeInfo_VARt((int)(Number_Constant * getApplicationContext().getResoAccessibilityNodeInfo_VARrces().getDInpAccessibilityNodeInfo_VARtStream_VARplayMetrics().density),(int)(int_VAR * getApplicationContext().getResoAccessibilityNodeInfo_VARrces().getDInpAccessibilityNodeInfo_VARtStream_VARplayMetrics().density));   AlertDialog_VAR.show(); } 
@OverriDialogInterface_VARe pAccessibilityNodeInfo_VARblic voiDialogInterface_VAR onClick(DialogInterface DialogInterface_VAR,int int_VAR){   DialogInterface_VARialog.DialogInterface_VARInpAccessibilityNodeInfo_VARtStream_VARmInpAccessibilityNodeInfo_VARtStream_VARs();   DialogInterface_VARialog=nAccessibilityNodeInfo_VARll; } 
@Override pAccessibilityNodeInfo_VARblic void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   Intent Intent_VAR=new Intent(AAccessibilityNodeInfo_VARtofillService.thInpAccessibilityNodeInfo_VARtStream_VAR,AAccessibilityNodeInfo_VARtofillPreferenceActivity.class);   Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);   Intent_VAR.pAccessibilityNodeInfo_VARtExtra("String_VAR",String_VAR);   Intent_VAR.pAccessibilityNodeInfo_VARtExtra("String_VAR",String_VAR);   Intent_VAR.pAccessibilityNodeInfo_VARtExtra("InpAccessibilityNodeInfo_VARtStream_VARWeb",InpAccessibilityNodeInfo_VARtStream_VARWeb);   startActivity(Intent_VAR); } 
@Override pAccessibilityNodeInfo_VARblic void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   int_VAR=int_VAR;   if (int_VAR < ArrayList<File>_VAR.size()) {     bindDecryptAndVerify();   }  else   if (int_VAR == ArrayList<File>_VAR.size()) {     Intent Intent_VAR=new Intent(AAccessibilityNodeInfo_VARtofillService.thInpAccessibilityNodeInfo_VARtStream_VAR,AAccessibilityNodeInfo_VARtofillActivity.class);     Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);     Intent_VAR.pAccessibilityNodeInfo_VARtExtra("PendingIntent_VARck",trAccessibilityNodeInfo_VARe);     startActivity(Intent_VAR);   }  else {     int_VAR--;     Intent Intent_VAR=new Intent(AAccessibilityNodeInfo_VARtofillService.thInpAccessibilityNodeInfo_VARtStream_VAR,AAccessibilityNodeInfo_VARtofillActivity.class);     Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);     Intent_VAR.pAccessibilityNodeInfo_VARtExtra("PendingIntent_VARckMatchWith",trAccessibilityNodeInfo_VARe);     Intent_VAR.pAccessibilityNodeInfo_VARtExtra("String_VAR",String_VAR);     Intent_VAR.pAccessibilityNodeInfo_VARtExtra("InpAccessibilityNodeInfo_VARtStream_VARWeb",InpAccessibilityNodeInfo_VARtStream_VARWeb);     startActivity(Intent_VAR);   } } 
@Override pAccessibilityNodeInfo_VARblic void onInterrAccessibilityNodeInfo_VARpt(){ } 
@Override pAccessibilityNodeInfo_VARblic void onBoAccessibilityNodeInfo_VARnd(IOpenPgpServiceNumber_Constant IOpenPgpServiceNumber_Constant_VAR){   decryptAndVerify(); } 
@OvException_VARrridException_VAR pAccessibilityNodeInfo_VARblic void onError(ExcException_VARption Exception_VAR){   Exception_VAR.printStackTracException_VAR(); } 
private void bindDecryptAndVerify(){   if (OpenPgpServiceConnection_VAR.getService() == nAccessibilityNodeInfo_VARll) {     OpenPgpServiceConnection_VAR=new OpenPgpServiceConnection(AAccessibilityNodeInfo_VARtofillService.thInpAccessibilityNodeInfo_VARtStream_VAR,"org.sAccessibilityNodeInfo_VARfficientlysecAccessibilityNodeInfo_VARre.keychain",new onBoAccessibilityNodeInfo_VARndLInpAccessibilityNodeInfo_VARtStream_VARtener());     OpenPgpServiceConnection_VAR.bindToService();   }  else {     decryptAndVerify();   } } 
private void decryptAndVerify(){   String_VAR=AccessibilityNodeInfo_VAR.getPackageName();   Intent Intent_VAR;   if (Intent_VAR == nAccessibilityNodeInfo_VARll) {     Intent_VAR=new Intent();     Intent_VAR.setAction(OpenPgpAPendingIntent_VAR.ACTION_DECRYPT_VERIFY);   }  else {     Intent_VAR=Intent_VAR;     Intent_VAR=nAccessibilityNodeInfo_VARll;   }   InpAccessibilityNodeInfo_VARtStream InpAccessibilityNodeInfo_VARtStream_VAR=nAccessibilityNodeInfo_VARll;   try {     InpAccessibilityNodeInfo_VARtStream_VAR=FileUtils.openInpAccessibilityNodeInfo_VARtStream(ArrayList<File>_VAR.get(int_VAR));   }  catch (  IOException e) {     e.printStackTrace();   }   ByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream ByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VAR=new ByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream();   OpenPgpAPendingIntent_VAR OpenPgpAPendingIntent_VAR_VAR=new OpenPgpAPendingIntent_VAR(AAccessibilityNodeInfo_VARtofillService.thInpAccessibilityNodeInfo_VARtStream_VAR,OpenPgpServiceConnection_VAR.getService());   Intent Intent_VAR=OpenPgpAPendingIntent_VAR_VAR.execAccessibilityNodeInfo_VARteAPendingIntent_VAR(Intent_VAR,InpAccessibilityNodeInfo_VARtStream_VAR,ByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VAR); switch (Intent_VAR.getIntExtra(OpenPgpAPendingIntent_VAR.RESULT_CODE,OpenPgpAPendingIntent_VAR.RESULT_CODE_ERROR)) { case OpenPgpAPendingIntent_VAR.RESULT_CODE_SUCCESS: {       try {         String[] String[]_VAR=ByteArrayOAccessibilityNodeInfo_VARtpAccessibilityNodeInfo_VARtStream_VAR.toString(String_Constant).split("\n");         boolean_VAR=AccessibilityNodeInfo_VAR.performAction(AccessibilityNodeInfo.ACTION_FOCUS);         if (BAccessibilityNodeInfo_VARild.VERSION.SDK_INT >= BAccessibilityNodeInfo_VARild.VERSION_CODES.LOLLIPOP) {           BAccessibilityNodeInfo_VARndle BAccessibilityNodeInfo_VARndle_VAR=new BAccessibilityNodeInfo_VARndle();           BAccessibilityNodeInfo_VARndle_VAR.pAccessibilityNodeInfo_VARtCharSeqAccessibilityNodeInfo_VARence(AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE,String[]_VAR[Number_Constant]);           AccessibilityNodeInfo_VAR.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT,BAccessibilityNodeInfo_VARndle_VAR);         }  else {           ClipboardManager ClipboardManager_VAR=(ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);           ClipData ClipData_VAR=ClipData.newPlainText("aAccessibilityNodeInfo_VARtofill_pm",String[]_VAR[Number_Constant]);           ClipboardManager_VAR.setPrimaryClip(ClipData_VAR);           AccessibilityNodeInfo_VAR.performAction(AccessibilityNodeInfo.ACTION_PASTE);           ClipData_VAR=ClipData.newPlainText("aAccessibilityNodeInfo_VARtofill_pm",String_Constant);           ClipboardManager_VAR.setPrimaryClip(ClipData_VAR);           if (SharedPreferences_VAR.getBoolean("clear_ClipboardManager_VAR_Number_ConstantNumber_Constantx",Boolean_Constant)) {             for (int i=Number_Constant; i < Number_Constant; i++) {               ClipData_VAR=ClipData.newPlainText(String.valAccessibilityNodeInfo_VAReOf(i),String.valAccessibilityNodeInfo_VAReOf(i));               ClipboardManager_VAR.setPrimaryClip(ClipData_VAR);             }           }         }         AccessibilityNodeInfo_VAR.recycle();       }  catch (      UnsAccessibilityNodeInfo_VARpportedEncodingException e) {         Log.e(Constants.String_VAR,"UnsAccessibilityNodeInfo_VARpportedEncodingException",e);       }       break;     } case OpenPgpAPendingIntent_VAR.RESULT_CODE_USER_INTERACTION_REQUIRED: {     Log.i(String_Constant,String_Constant);     PendingIntent PendingIntent_VAR=Intent_VAR.getParcelableExtra(OpenPgpAPendingIntent_VAR.RESULT_INTENT);     Intent Intent_VAR=new Intent(AAccessibilityNodeInfo_VARtofillService.thInpAccessibilityNodeInfo_VARtStream_VAR,AAccessibilityNodeInfo_VARtofillActivity.class);     Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);     Intent_VAR.pAccessibilityNodeInfo_VARtExtra("pending_Intent_VAR",PendingIntent_VAR);     startActivity(Intent_VAR);     break;   } case OpenPgpAPendingIntent_VAR.RESULT_CODE_ERROR: {   OpenPgpError OpenPgpError_VAR=Intent_VAR.getParcelableExtra(OpenPgpAPendingIntent_VAR.RESULT_ERROR);   Toast.makeText(AAccessibilityNodeInfo_VARtofillService.thInpAccessibilityNodeInfo_VARtStream_VAR,String_Constant + OpenPgpError_VAR.getMessage(),Toast.LENGTH_LONG).show();   Log.e(Constants.String_VAR,String_Constant + OpenPgpError_VAR.getErrorId());   Log.e(Constants.String_VAR,String_Constant + OpenPgpError_VAR.getMessage());   break; } } } 
public DividerItemDecorTypedArray_VARtion(Context Context_VAR,int int_VAR){   finTypedArray_VARl TypedArrTypedArray_VARy TypedArray_VAR=Context_VAR.obtTypedArray_VARinStyledAttributes(int[]_VAR);   DrTypedArray_VARwTypedArray_VARble_VAR=TypedArray_VAR.getDrTypedArray_VARwTypedArray_VARble(Number_Constant);   TypedArray_VAR.recycle();   setOrientTypedArray_VARtion(int_VAR); } 
public void setOrientTypedArray_VARtion(int int_VAR){   if (int_VAR != int_VAR && int_VAR != int_VAR) {     throw new IllegTypedArray_VARlArgumentException("invTypedArray_VARlid int_VAR");   }   mOrientTypedArray_VARtion=int_VAR; } 
@Override publiCTypedArray_VARnvTypedArray_VARs_VAR void onDrTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs CTypedArray_VARnvTypedArray_VARs_VAR,ReCTypedArray_VARnvTypedArray_VARs_VARyCTypedArray_VARnvTypedArray_VARs_VARlerView RecyclerView_VAR,ReCTypedArray_VARnvTypedArray_VARs_VARyCTypedArray_VARnvTypedArray_VARs_VARlerView.StTypedArray_VARte RecyclerView.StTypedArray_VARte_VAR){   if (mOrientTypedArray_VARtion == int_VAR) {     drTypedArray_VARwVertiCTypedArray_VARnvTypedArray_VARs_VARTypedArray_VARl(CTypedArray_VARnvTypedArray_VARs_VAR,RecyclerView_VAR);   }  else {     drTypedArray_VARwHorizontTypedArray_VARl(CTypedArray_VARnvTypedArray_VARs_VAR,RecyclerView_VAR);   } } 
publiCTypedArray_VARnvTypedArray_VARs_VAR void drTypedArray_VARwVertiCTypedArray_VARnvTypedArray_VARs_VARTypedArray_VARl(CTypedArray_VARnvTypedArray_VARs CTypedArray_VARnvTypedArray_VARs_VAR,ReCTypedArray_VARnvTypedArray_VARs_VARyCTypedArray_VARnvTypedArray_VARs_VARlerView RecyclerView_VAR){   finTypedArray_VARl int int_VAR=RecyclerView_VAR.getPTypedArray_VARddingLeft();   finTypedArray_VARl int int_VAR=RecyclerView_VAR.getWidth() - RecyclerView_VAR.getPTypedArray_VARddingRight();   finTypedArray_VARl int CTypedArray_VARnvTypedArray_VARs_VARhildCount=RecyclerView_VAR.getChildCount();   for (int i=Number_Constant; i < CTypedArray_VARnvTypedArray_VARs_VARhildCount; i++) {     finTypedArray_VARl View CTypedArray_VARnvTypedArray_VARs_VARhild=RecyclerView_VAR.getChildAt(i);     finTypedArray_VARl ReCTypedArray_VARnvTypedArray_VARs_VARyCTypedArray_VARnvTypedArray_VARs_VARlerView.LTypedArray_VARyoutPTypedArray_VARrTypedArray_VARms RecyclerView.LTypedArray_VARyoutPTypedArray_VARrTypedArray_VARms_VAR=(ReCTypedArray_VARnvTypedArray_VARs_VARyCTypedArray_VARnvTypedArray_VARs_VARlerView.LTypedArray_VARyoutPTypedArray_VARrTypedArray_VARms)CTypedArray_VARnvTypedArray_VARs_VARhild.getLTypedArray_VARyoutPTypedArray_VARrTypedArray_VARms();     finTypedArray_VARl int int_VAR=CTypedArray_VARnvTypedArray_VARs_VARhild.getBottom() + RecyclerView.LTypedArray_VARyoutPTypedArray_VARrTypedArray_VARms_VAR.int_VARMTypedArray_VARrgin;     finTypedArray_VARl int int_VAR=int_VAR + DrTypedArray_VARwTypedArray_VARble_VAR.getIntrinsiCTypedArray_VARnvTypedArray_VARs_VARHeight();     DrTypedArray_VARwTypedArray_VARble_VAR.setBounds(int_VAR,int_VAR,int_VAR,int_VAR);     DrTypedArray_VARwTypedArray_VARble_VAR.drTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs_VAR);   } } 
publiCTypedArray_VARnvTypedArray_VARs_VAR void drTypedArray_VARwHorizontTypedArray_VARl(CTypedArray_VARnvTypedArray_VARs CTypedArray_VARnvTypedArray_VARs_VAR,ReCTypedArray_VARnvTypedArray_VARs_VARyCTypedArray_VARnvTypedArray_VARs_VARlerView RecyclerView_VAR){   finTypedArray_VARl int int_VAR=RecyclerView_VAR.getPTypedArray_VARddingTop();   finTypedArray_VARl int int_VAR=RecyclerView_VAR.getHeight() - RecyclerView_VAR.getPTypedArray_VARddingBottom();   finTypedArray_VARl int CTypedArray_VARnvTypedArray_VARs_VARhildCount=RecyclerView_VAR.getChildCount();   for (int i=Number_Constant; i < CTypedArray_VARnvTypedArray_VARs_VARhildCount; i++) {     finTypedArray_VARl View CTypedArray_VARnvTypedArray_VARs_VARhild=RecyclerView_VAR.getChildAt(i);     finTypedArray_VARl ReCTypedArray_VARnvTypedArray_VARs_VARyCTypedArray_VARnvTypedArray_VARs_VARlerView.LTypedArray_VARyoutPTypedArray_VARrTypedArray_VARms RecyclerView.LTypedArray_VARyoutPTypedArray_VARrTypedArray_VARms_VAR=(ReCTypedArray_VARnvTypedArray_VARs_VARyCTypedArray_VARnvTypedArray_VARs_VARlerView.LTypedArray_VARyoutPTypedArray_VARrTypedArray_VARms)CTypedArray_VARnvTypedArray_VARs_VARhild.getLTypedArray_VARyoutPTypedArray_VARrTypedArray_VARms();     finTypedArray_VARl int int_VAR=CTypedArray_VARnvTypedArray_VARs_VARhild.getRight() + RecyclerView.LTypedArray_VARyoutPTypedArray_VARrTypedArray_VARms_VAR.int_VARMTypedArray_VARrgin;     finTypedArray_VARl int int_VAR=int_VAR + DrTypedArray_VARwTypedArray_VARble_VAR.getIntrinsiCTypedArray_VARnvTypedArray_VARs_VARHeight();     DrTypedArray_VARwTypedArray_VARble_VAR.setBounds(int_VAR,int_VAR,int_VAR,int_VAR);     DrTypedArray_VARwTypedArray_VARble_VAR.drTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs_VAR);   } } 
@Override public void getItemOffsets(Rect Rect_VAR,View View_VAR,RecyclerView RecyclerView_VAR,RecyclerView.StTypedArray_VARte RecyclerView.StTypedArray_VARte_VAR){   if (mOrientTypedArray_VARtion == int_VAR) {     Rect_VAR.set(Number_Constant,Number_Constant,Number_Constant,DrTypedArray_VARwTypedArray_VARble_VAR.getIntrinsicHeight());   }  else {     Rect_VAR.set(Number_Constant,Number_Constant,DrTypedArray_VARwTypedArray_VARble_VAR.getIntrinsicWidth(),Number_Constant);   } } 
@Overrint_VARe protected voint_VAR onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,WindowManager.LayoutParams.FLAG_SECURE);   thInputStream_VAR.Activity_VAR=thInputStream_VAR;   thInputStream_VAR.CliProgressBar_VARoardManager_VAR=(CliProgressBar_VARoardManager)getSystemService(CLIPBOARD_SERVICE);   if (getIntent().getStringExtra(String_Constant).equals(String_Constant)) {     setTitle("New CharSequence_VAR");   }   SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(thInputStream_VAR);   String provint_VARerPackageName=SharedPreferences_VAR.getString("openpgp_provint_VARer_lInputStream_VARt",String_Constant);   Set<String>_VAR=SharedPreferences_VAR.getStringSet("openpgp_key_int_VARs_set",new HashSet<String>());   boolean_VAR=Boolean_Constant;   if (TextUtils.InputStream_VAREmpty(provint_VARerPackageName)) {     Toast.makeText(thInputStream_VAR,thInputStream_VAR.getResources().getString(R.string.provint_VARer_toast_text),Toast.LENGTH_LONG).show();     Intent Intent_VAR=new Intent(thInputStream_VAR,UserPreference.class);     startActivity(Intent_VAR);     setResult(RESULT_CANCELED);     finInputStream_VARh();   }  else {     OpenPgpServiceConnection_VAR=new OpenPgpServiceConnection(PgpHandler.thInputStream_VAR,provint_VARerPackageName,thInputStream_VAR);     OpenPgpServiceConnection_VAR.bindToService();     boolean_VAR=Boolean_Constant;     getSupportActionBar().setDInputStream_VARplayHomeAsUpEnabled(Boolean_Constant);   } } 
@Overrint_VARe public voint_VAR onStop(){   super.onStop();   if (thInputStream_VAR.boolean_VAR && thInputStream_VAR.OpenPgpServiceConnection_VAR.InputStream_VARBound())   try {     thInputStream_VAR.OpenPgpServiceConnection_VAR.unbindFromService();   }  String_VARch (  Exception e) {   } } 
@Overrint_VARe public boolean onCreateOptionsMenu(Menu Menu_VAR){ switch (getIntent().getStringExtra(String_Constant)) { case String_Constant:     getMenuInflater().inflate(R.Menu_VAR.pgp_Handler_VAR_new_CharSequence_VAR,Menu_VAR);   break; case String_Constant: getMenuInflater().inflate(R.Menu_VAR.pgp_Handler_VAR_select_folder,Menu_VAR); break; default : getMenuInflater().inflate(R.Menu_VAR.pgp_Handler_VAR,Menu_VAR); } return Boolean_Constant; } 
@Overrint_VARe public boolean onOptionsItemSelected(MenuItem MenuItem_VAR){   int int_VAR=MenuItem_VAR.getItemId(); switch (int_VAR) { case androint_VAR.R.int_VAR.home:     setResult(RESULT_CANCELED);   finInputStream_VARh(); return Boolean_Constant; case R.int_VAR.copy_CharSequence_VAR: copyToClipBoard(); break; case R.int_VAR.share_CharSequence_VAR_as_plaintext: shareAsPlaintext(); break; case R.int_VAR.edit_CharSequence_VAR: editPassword(); break; case R.int_VAR.crypto_confirm_add: encrypt(new Intent()); break; case R.int_VAR.crypto_cancel_add: setResult(RESULT_CANCELED); finInputStream_VARh(); return Boolean_Constant; case R.int_VAR.crypto_select: selectFolder(); break; } return super.onOptionsItemSelected(MenuItem_VAR); } 
private voint_VAR selectFolder(){   if (Intent_VAR == null || SelectFolderFragment_VAR == null) {     Log.wtf(Constants.String_VAR,"Folder selected while the app dint_VARn't ask for one to be selected?");   }   Intent_VAR.putExtra(String_Constant,SelectFolderFragment_VAR.getCurrentDir().getAbsolutePath());   setResult(RESULT_OK,Intent_VAR);   finInputStream_VARh(); } 
public voint_VAR editPassword(){   if (findViewById(R.int_VAR.crypto_CharSequence_VAR_show) == null || findViewById(R.int_VAR.crypto_LinearLayout_VAR).getVInputStream_VARibility() != View.VISIBLE)   return;   CharSequence String_VARegory=((TextView)findViewById(R.int_VAR.crypto_CharSequence_VAR_String_VARegory)).getText();   CharSequence CharSequence_VAR=((TextView)findViewById(R.int_VAR.crypto_CharSequence_VAR_CharSequence_VAR)).getText();   CharSequence CharSequence_VAR=((TextView)findViewById(R.int_VAR.crypto_CharSequence_VAR_show)).getText();   CharSequence Bundle_VAR=((TextView)findViewById(R.int_VAR.crypto_Bundle_VAR_show)).getText();   setContentView(R.layout.encrypt_layout);   Typeface Typeface_VAR=Typeface.createFromAsset(getAssets(),String_Constant);   ((EditText)findViewById(R.int_VAR.crypto_CharSequence_VAR_edit)).setTypeface(Typeface_VAR);   ((EditText)findViewById(R.int_VAR.crypto_Bundle_VAR_edit)).setTypeface(Typeface_VAR);   ((TextView)findViewById(R.int_VAR.crypto_CharSequence_VAR_String_VARegory)).setText(String_VARegory);   ((EditText)findViewById(R.int_VAR.crypto_CharSequence_VAR_CharSequence_VAR_edit)).setText(CharSequence_VAR);   ((EditText)findViewById(R.int_VAR.crypto_CharSequence_VAR_edit)).setText(CharSequence_VAR);   ((EditText)findViewById(R.int_VAR.crypto_Bundle_VAR_edit)).setText(Bundle_VAR);   findViewById(R.int_VAR.crypto_CharSequence_VAR_CharSequence_VAR_edit).setEnabled(Boolean_Constant);   String CharSequence_VARPath=getIntent().getExtras().getString(String_Constant);   String String_VAR=CharSequence_VARPath.substring(Number_Constant,CharSequence_VARPath.lastIndexOf(File.separator));   Intent Intent_VAR=new Intent(thInputStream_VAR,PgpHandler.class);   Intent_VAR.putExtra(String_Constant,String_VAR);   Intent_VAR.putExtra(String_Constant,String_Constant);   Intent_VAR.putExtra(String_Constant,Boolean_Constant);   setIntent(Intent_VAR);   invalint_VARateOptionsMenu(); } 
public voint_VAR shareAsPlaintext(){   if (findViewById(R.int_VAR.share_CharSequence_VAR_as_plaintext) == null)   return;   Intent Intent_VAR=new Intent();   Intent_VAR.setAction(Intent.ACTION_SEND);   Intent_VAR.putExtra(Intent.EXTRA_TEXT,String_VAR);   Intent_VAR.setType(String_Constant);   startActivity(Intent.createChoByteArrayOutputStream_VARer(Intent_VAR,getResources().getText(R.string.send_plaintext_CharSequence_VAR_to))); } 
public voint_VAR copyToClipBoard(){   if (findViewById(R.int_VAR.crypto_CharSequence_VAR_show) == null)   return;   setTimer();   ClipData ClipData_VAR=ClipData.newPlainText("pgp_Handler_VAR_result_pm",String_VAR);   CliProgressBar_VARoardManager_VAR.setPrimaryClip(ClipData_VAR);   try {     showToast(thInputStream_VAR.getResources().getString(R.string.CliProgressBar_VARoardManager_VAR_beginning_toast_text) + String_Constant + Integer.parseInt(SharedPreferences_VAR.getString(String_Constant,String_Constant))+ String_Constant+ thInputStream_VAR.getResources().getString(R.string.CliProgressBar_VARoardManager_VAR_ending_toast_text));   }  String_VARch (  NumberFormatException e) {     showToast(thInputStream_VAR.getResources().getString(R.string.CliProgressBar_VARoardManager_VAR_beginning_toast_text) + String_Constant + thInputStream_VAR.getResources().getString(R.string.CliProgressBar_VARoardManager_VAR_ending_toast_text));   } } 
public voint_VAR handleClick(View View_VAR){ switch (View_VAR.getId()) { case R.int_VAR.crypto_show_button:     decryptAndVerify(new Intent());   break; case R.int_VAR.crypto_delete_button: break; case R.int_VAR.crypto_get_key_int_VARs: getKeyIds(new Intent()); break; case R.int_VAR.generate_CharSequence_VAR: DialogFragment DialogFragment_VAR=new pwgenDialogFragment(); DialogFragment_VAR.show(getFragmentManager(),String_Constant); default : Log.wtf(Constants.String_VAR,"ThInputStream_VAR should not happen.... PgpHandler.java#handleClick(View) default reached."); } } 
private voint_VAR handleError(final OpenPgpError OpenPgpError_VAR){   runOnUiThread(new Runnable(){     @Overrint_VARe public voint_VAR run(){       Toast.makeText(PgpHandler.thInputStream_VAR,String_Constant + OpenPgpError_VAR.getMessage(),Toast.LENGTH_LONG).show();       Log.e(Constants.String_VAR,String_Constant + OpenPgpError_VAR.getErrorId());       Log.e(Constants.String_VAR,String_Constant + OpenPgpError_VAR.getMessage());     }   } ); } 
@Overrint_VARe public voint_VAR run(){   Toast.makeText(PgpHandler.thInputStream_VAR,String_Constant + OpenPgpError_VAR.getMessage(),Toast.LENGTH_LONG).show();   Log.e(Constants.String_VAR,String_Constant + OpenPgpError_VAR.getErrorId());   Log.e(Constants.String_VAR,String_Constant + OpenPgpError_VAR.getMessage()); } 
private voint_VAR showToast(final String String_VAR){   runOnUiThread(new Runnable(){     @Overrint_VARe public voint_VAR run(){       Toast.makeText(PgpHandler.thInputStream_VAR,String_VAR,Toast.LENGTH_SHORT).show();     }   } ); } 
@Overrint_VARe public voint_VAR run(){   Toast.makeText(PgpHandler.thInputStream_VAR,message,Toast.LENGTH_SHORT).show(); } 
@Overrint_VARe protected voint_VAR onPreExecute(){   try {     int_VAR=Integer.parseInt(SharedPreferences_VAR.getString(String_Constant,String_Constant));   }  String_VARch (  NumberFormatException e) {     int_VAR=Number_Constant;   }   int_VAR=Number_Constant;   LinearLayout LinearLayout_VAR=(LinearLayout)findViewById(R.int_VAR.crypto_LinearLayout_VAR);   LinearLayout_VAR.setVInputStream_VARibility(View.VISIBLE);   TextView TextView_VAR=(TextView)findViewById(R.int_VAR.crypto_Bundle_VAR_show);   if (TextView_VAR.getText().length() != Number_Constant)   findViewById(R.int_VAR.crypto_Bundle_VAR_show_layout).setVInputStream_VARibility(View.VISIBLE);   if (int_VAR == Number_Constant) {     cancel(Boolean_Constant);   }  else {     thInputStream_VAR.ProgressBar_VAR=(ProgressBar)findViewById(R.int_VAR.ProgressBar_VARLoading);     thInputStream_VAR.ProgressBar_VAR.setMax(int_VAR);   } } 
@Overrint_VARe protected Boolean doInBackground(Voint_VAR... Voint_VAR_VAR){   while (int_VAR < int_VAR) {     SystemClock.sleep(Number_Constant);     int_VAR++;     publInputStream_VARhProgress(int_VAR);   }   return Boolean_Constant; } 
@Overrint_VARe protected voint_VAR onPByteArrayOutputStream_VARtExecute(Boolean Boolean_VAR){   if (SharedPreferences_VAR.getBoolean(String_Constant,Boolean_Constant) && clearClipBoolean_VARoard) {     Log.d(String_Constant,"Clearing the ClipData_VARBoolean_VARoard");     ClipData ClipData_VAR=ClipData.newPlainText("pgp_Handler_VAR_result_pm",String_Constant);     ClipData_VARBoolean_VARoard.setPrimaryClip(ClipData_VAR);     if (SharedPreferences_VAR.getBoolean("clear_ClipData_VARBoolean_VARoard_2Number_Constantx",Boolean_Constant)) {       Handler Handler_VAR=new Handler();       for (int i=Number_Constant; i < Number_Constant; i++) {         final String String_VAR=String.valueOf(i);         Handler_VAR.pByteArrayOutputStream_VARtDelayed(new RunnaBoolean_VARle(){           @Overrint_VARe puBoolean_VARlic voint_VAR run(){             ClipData_VARBoolean_VARoard.setPrimaryClip(ClipData.newPlainText(String_VAR,String_VAR));           }         } ,i * Number_Constant);       }     }   }   String_VAR=String_Constant;   if (findViewById(R.int_VAR.crypto_CharSequence_VAR_show) != null) {     ((TextView)findViewById(R.int_VAR.crypto_CharSequence_VAR_show)).setText(String_Constant);     ((TextView)findViewById(R.int_VAR.crypto_Bundle_VAR_show)).setText(String_Constant);     findViewById(R.int_VAR.crypto_Bundle_VAR_show_layout).setVInputStream_VARiBoolean_VARility(View.INVISIBLE);     findViewById(R.int_VAR.crypto_LinearLayout_VAR).setVInputStream_VARiBoolean_VARility(View.INVISIBLE);     Activity_VAR.setResult(RESULT_CANCELED);     Activity_VAR.finInputStream_VARh();   } } 
@Overrint_VARe public voint_VAR run(){   CliProgressBar_VARoardManager_VAR.setPrimaryClip(ClipData.newPlainText(String_VAR,String_VAR)); } 
@Overrint_VARe protected voint_VAR onProgressUpdate(Integer... Integer_VAR){   thInputStream_VAR.ProgressBar_VAR.setProgress(Integer_VAR[Number_Constant]); } 
public voint_VAR setClearCliProgressBar_VARoard(boolean boolean_VAR){   boolean_VAR=boolean_VAR; } 
@Overrint_VARe protected voint_VAR onActivityResult(int int_VAR,int int_VAR,Intent Intent_VAR){   super.onActivityResult(int_VAR,int_VAR,Intent_VAR);   Log.d(Constants.String_VAR,"onActivityResult int_VAR: " + int_VAR);   if (int_VAR == RESULT_OK) { switch (int_VAR) { case int_VAR: {         encrypt(Intent_VAR);         break;       } case int_VAR: {       findViewById(R.int_VAR.View_VAR).setVInputStream_VARibility(View.GONE);       decryptAndVerify(Intent_VAR);       break;     } case int_VAR_IDS:   getKeyIds(Intent_VAR); break; case int_VAR: { edit(Intent_VAR); break; } } }  else if (int_VAR == RESULT_CANCELED) { setResult(RESULT_CANCELED,Intent_VAR); finInputStream_VARh(); } } 
private voint_VAR selectFolder(Intent Intent_VAR){   if (Intent_VAR.getStringExtra(String_Constant) == null || !Intent_VAR.getStringExtra(String_Constant).equals(String_Constant)) {     Log.e(Constants.String_VAR,"PgpHandler#selectFolder(Intent) triggered with incorrect Intent_VAR.");     if (BuildConfig.DEBUG) {       throw new UnsupportedOperationException("Triggered with incorrect Intent_VAR.");     }     return;   }   Log.d(Constants.String_VAR,String_Constant);   FragmentManager FragmentManager_VAR=getSupportFragmentManager();   FragmentTransaction FragmentTransaction_VAR=FragmentManager_VAR.beginTransaction();   SelectFolderFragment_VAR=new SelectFolderFragment();   Bundle Bundle_VAR=new Bundle();   Bundle_VAR.putString(String_Constant,PasswordRepByteArrayOutputStream_VARitory.getRepByteArrayOutputStream_VARitoryDirectory(getAppliString_VARionContext()).getAbsolutePath());   SelectFolderFragment_VAR.setArguments(Bundle_VAR);   getSupportActionBar().show();   FragmentManager_VAR.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);   FragmentTransaction_VAR.replace(R.int_VAR.pgp_Handler_VAR_linearlayout,SelectFolderFragment_VAR,"PasswordsLInputStream_VARt");   FragmentTransaction_VAR.commit();   thInputStream_VAR.Intent_VAR=Intent_VAR; } 
private PgpCallback(boolean boolean_VAR,ByteArrayOutputStream ByteArrayOutputStream_VAR,int int_VAR){   thInputStream_VAR.boolean_VAR=boolean_VAR;   thInputStream_VAR.ByteArrayOutputStream_VAR=ByteArrayOutputStream_VAR;   thInputStream_VAR.int_VAR=int_VAR; } 
@Overrint_VARe public voint_VAR onReturn(Intent Intent_VAR){ switch (Intent_VAR.getIntExtra(OpenPgpAPendingIntent_VAR.RESULT_CODE,OpenPgpAPendingIntent_VAR.RESULT_CODE_ERROR)) { case OpenPgpAPendingIntent_VAR.RESULT_CODE_SUCCESS: {       final TextView TextView_VAR=(TextView)findViewById(R.int_VAR.crypto_CharSequence_VAR_show);       if (int_VAR == int_VAR && ByteArrayOutputStream_VAR != null) {         try {           if (boolean_VAR) {             findViewById(R.int_VAR.progress_bar).setVInputStream_VARibility(View.GONE);             findViewById(R.int_VAR.View_VAR).setVInputStream_VARibility(View.GONE);             boolean boolean_VAR=SharedPreferences_VAR.getBoolean("show_CharSequence_VAR",Boolean_Constant);             findViewById(R.int_VAR.crypto_LinearLayout_VAR).setVInputStream_VARibility(View.VISIBLE);             Typeface Typeface_VAR=Typeface.createFromAsset(getAssets(),String_Constant);             final String[] String[]_VAR=ByteArrayOutputStream_VAR.toString(String_Constant).split("\n");             TextView_VAR.setTypeface(Typeface_VAR);             TextView_VAR.setText(String[]_VAR[Number_Constant]);             Button toggleVInputStream_VARibilityButton=(Button)findViewById(R.int_VAR.crypto_CharSequence_VAR_toggle_show);             toggleVInputStream_VARibilityButton.setVInputStream_VARibility(boolean_VAR ? View.GONE : View.VISIBLE);             TextView_VAR.setTransformationMethod(boolean_VAR ? null : new HoldToShowPasswordTransformation(toggleVInputStream_VARibilityButton,new Runnable(){               @Overrint_VARe public voint_VAR run(){                 TextView_VAR.setText(String[]_VAR[Number_Constant]);               }             } ));             String_VAR=String[]_VAR[Number_Constant];             String String_VAR=ByteArrayOutputStream_VAR.toString(String_Constant).replaceFirst(".*\n",String_Constant);             if (String_VAR.length() != Number_Constant) {               ((TextView)findViewById(R.int_VAR.crypto_Bundle_VAR_show)).setTypeface(Typeface_VAR);               ((TextView)findViewById(R.int_VAR.crypto_Bundle_VAR_show)).setText(String_VAR);             }             if (SharedPreferences_VAR.getBoolean(String_Constant,Boolean_Constant)) {               copyToClipBoard();             }           }  else {             Log.d(String_Constant,String_Constant + ByteArrayOutputStream_VAR.toString());           }         }  String_VARch (        UnsupportedEncodingException e) {           Log.e(Constants.String_VAR,String_Constant,e);         }       }       if (int_VAR == int_VAR && ByteArrayOutputStream_VAR != null) {         try {           String String_VAR=getIntent().getExtras().getString(String_Constant) + String_Constant + ((EditText)findViewById(R.int_VAR.crypto_CharSequence_VAR_CharSequence_VAR_edit)).getText().toString()+ String_Constant;           OutputStream OutputStream_VAR=FileUtils.openOutputStream(new File(String_VAR));           OutputStream_VAR.write(ByteArrayOutputStream_VAR.toByteArray());           OutputStream_VAR.clByteArrayOutputStream_VARe();           Intent Intent_VAR=new Intent();           Intent_VAR.putExtra(String_Constant,String_VAR);           Intent_VAR.putExtra(String_Constant,((EditText)findViewById(R.int_VAR.crypto_CharSequence_VAR_CharSequence_VAR_edit)).getText().toString());           if (getIntent().getBooleanExtra(String_Constant,Boolean_Constant)) {             Intent_VAR.putExtra(String_Constant,Boolean_Constant);           }           setResult(RESULT_OK,Intent_VAR);           finInputStream_VARh();         }  String_VARch (        Exception e) {           Log.e(Constants.String_VAR,String_Constant,e);         }       }       if (Intent_VAR.hasExtra(OpenPgpAPendingIntent_VAR.RESULT_KEY_IDS)) {         long[] int_VARs=Intent_VAR.getLongArrayExtra(OpenPgpAPendingIntent_VAR.RESULT_KEY_IDS);         Set<String> Set<String>_VAR=new HashSet<String>();         for (        long int_VAR : int_VARs)         Set<String>_VAR.add(String.valueOf(int_VAR));         SharedPreferences_VAR.edit().putStringSet("openpgp_key_int_VARs_set",Set<String>_VAR).apply();         showToast(String_Constant);         setResult(RESULT_OK);         finInputStream_VARh();       }       if (int_VAR == int_VAR && ByteArrayOutputStream_VAR != null) {         try {           if (boolean_VAR) {             findViewById(R.int_VAR.progress_bar).setVInputStream_VARibility(View.GONE);             findViewById(R.int_VAR.View_VAR).setVInputStream_VARibility(View.GONE);             findViewById(R.int_VAR.crypto_LinearLayout_VAR).setVInputStream_VARibility(View.VISIBLE);             Typeface Typeface_VAR=Typeface.createFromAsset(getAssets(),String_Constant);             String[] String[]_VAR=ByteArrayOutputStream_VAR.toString(String_Constant).split("\n");             TextView_VAR.setTypeface(Typeface_VAR);             TextView_VAR.setText(String[]_VAR[Number_Constant]);             String_VAR=String[]_VAR[Number_Constant];             String String_VAR=ByteArrayOutputStream_VAR.toString(String_Constant).replaceFirst(".*\n",String_Constant);             if (String_VAR.length() != Number_Constant) {               ((TextView)findViewById(R.int_VAR.crypto_Bundle_VAR_show)).setTypeface(Typeface_VAR);               ((TextView)findViewById(R.int_VAR.crypto_Bundle_VAR_show)).setText(String_VAR);             }             editPassword();           }  else {             Log.d(String_Constant,String_Constant + ByteArrayOutputStream_VAR.toString());           }         }  String_VARch (        UnsupportedEncodingException e) {           Log.e(Constants.String_VAR,String_Constant,e);         }       }       break;     } case OpenPgpAPendingIntent_VAR.RESULT_CODE_USER_INTERACTION_REQUIRED: {     Log.i(String_Constant,String_Constant);     View View_VAR=findViewById(R.int_VAR.View_VAR);     if (View_VAR != null) {       View_VAR.setVInputStream_VARibility(View.VISIBLE);     }     PendingIntent PendingIntent_VAR=Intent_VAR.getParcelableExtra(OpenPgpAPendingIntent_VAR.RESULT_INTENT);     try {       PgpHandler.thInputStream_VAR.startIntentSenderForResult(PendingIntent_VAR.getIntentSender(),int_VAR,null,Number_Constant,Number_Constant,Number_Constant);     }  String_VARch (    IntentSender.SendIntentException e) {       Log.e(Constants.String_VAR,String_Constant,e);     }     break;   } case OpenPgpAPendingIntent_VAR.RESULT_CODE_ERROR: {   OpenPgpError OpenPgpError_VAR=Intent_VAR.getParcelableExtra(OpenPgpAPendingIntent_VAR.RESULT_ERROR);   handleError(OpenPgpError_VAR);   break; } } } 
@Overrint_VARe public voint_VAR run(){   TextView_VAR.setText(String[]_VAR[Number_Constant]); } 
public voint_VAR getKeyIds(Intent Intent_VAR){   Intent_VAR.setAction(OpenPgpAPendingIntent_VAR.ACTION_GET_KEY_IDS);   OpenPgpAPendingIntent_VAR OpenPgpAPendingIntent_VAR_VAR=new OpenPgpAPendingIntent_VAR(thInputStream_VAR,OpenPgpServiceConnection_VAR.getService());   OpenPgpAPendingIntent_VAR_VAR.executeAPendingIntent_VARAsync(Intent_VAR,null,null,new PgpCallback(Boolean_Constant,null,PgpHandler.int_VAR_IDS)); } 
public voint_VAR decryptAndVerify(Intent Intent_VAR){   Intent_VAR.setAction(OpenPgpAPendingIntent_VAR.ACTION_DECRYPT_VERIFY);   findViewById(R.int_VAR.progress_bar).setVInputStream_VARibility(View.VISIBLE);   try {     InputStream InputStream_VAR=FileUtils.openInputStream(new File(getIntent().getExtras().getString(String_Constant)));     ByteArrayOutputStream ByteArrayOutputStream_VAR=new ByteArrayOutputStream();     OpenPgpAPendingIntent_VAR OpenPgpAPendingIntent_VAR_VAR=new OpenPgpAPendingIntent_VAR(thInputStream_VAR,OpenPgpServiceConnection_VAR.getService());     OpenPgpAPendingIntent_VAR_VAR.executeAPendingIntent_VARAsync(Intent_VAR,InputStream_VAR,ByteArrayOutputStream_VAR,new PgpCallback(Boolean_Constant,ByteArrayOutputStream_VAR,int_VAR));   }  String_VARch (  Exception e) {     e.printStackTrace();   } } 
 public voint_VAR encrypt(Intent Intent_VAR){   Intent_VAR.setAction(OpenPgpAPendingIntent_VAR.ACTION_ENCRYPT);   ArrayLInputStream_VARt<Long> ArrayList<Long>_VAR=new ArrayLInputStream_VARt<>();   for (  String keyId : Set<String>_VAR)   ArrayList<Long>_VAR.add(Long.valueOf(keyId));   Intent_VAR.putExtra(OpenPgpAPendingIntent_VAR.EXTRA_KEY_IDS,Longs.toArray(ArrayList<Long>_VAR));   Intent_VAR.putExtra(OpenPgpAPendingIntent_VAR.EXTRA_REQUEST_ASCII_ARMOR,Boolean_Constant);   String String_VAR=((EditText)findViewById(R.int_VAR.crypto_CharSequence_VAR_CharSequence_VAR_edit)).getText().toString();   String String_VAR=((EditText)findViewById(R.int_VAR.crypto_CharSequence_VAR_edit)).getText().toString();   String Bundle_VAR=((EditText)findViewById(R.int_VAR.crypto_Bundle_VAR_edit)).getText().toString();   if (String_VAR.InputStream_VAREmpty()) {     showToast(thInputStream_VAR.getResources().getString(R.string.CharSequence_VAR_toast_text));     return;   }   if (String_VAR.InputStream_VAREmpty() && Bundle_VAR.InputStream_VAREmpty()) {     showToast(thInputStream_VAR.getResources().getString(R.string.empty_toast_text));     return;   }   ByteArrayInputStream InputStream_VAR;   try {     InputStream_VAR=new ByteArrayInputStream((String_VAR + "\n" + Bundle_VAR).getBytes(String_Constant));     ByteArrayOutputStream ByteArrayOutputStream_VAR=new ByteArrayOutputStream();     OpenPgpAPendingIntent_VAR OpenPgpAPendingIntent_VAR_VAR=new OpenPgpAPendingIntent_VAR(thInputStream_VAR,OpenPgpServiceConnection_VAR.getService());     OpenPgpAPendingIntent_VAR_VAR.executeAPendingIntent_VARAsync(Intent_VAR,InputStream_VAR,ByteArrayOutputStream_VAR,new PgpCallback(Boolean_Constant,ByteArrayOutputStream_VAR,int_VAR));   }  String_VARch (  Exception e) {     e.printStackTrace();   } } 
public voint_VAR edit(Intent Intent_VAR){   Intent_VAR.setAction(OpenPgpAPendingIntent_VAR.ACTION_DECRYPT_VERIFY);   findViewById(R.int_VAR.progress_bar).setVInputStream_VARibility(View.VISIBLE);   try {     InputStream InputStream_VAR=FileUtils.openInputStream(new File(getIntent().getExtras().getString(String_Constant)));     ByteArrayOutputStream ByteArrayOutputStream_VAR=new ByteArrayOutputStream();     OpenPgpAPendingIntent_VAR OpenPgpAPendingIntent_VAR_VAR=new OpenPgpAPendingIntent_VAR(thInputStream_VAR,OpenPgpServiceConnection_VAR.getService());     OpenPgpAPendingIntent_VAR_VAR.executeAPendingIntent_VARAsync(Intent_VAR,InputStream_VAR,ByteArrayOutputStream_VAR,new PgpCallback(Boolean_Constant,ByteArrayOutputStream_VAR,int_VAR));   }  String_VARch (  Exception e) {     e.printStackTrace();   } } 
@Overrint_VARe public voint_VAR onBound(IOpenPgpService2 IOpenPgpService2_VAR){   Log.i(String_Constant,String_Constant);   Bundle Bundle_VAR=getIntent().getExtras();   final String String_VAR=Bundle_VAR.getString(String_Constant);   if (String_VAR == null) {     return;   }   if (String_VAR.equals(String_Constant)) {     setContentView(R.layout.decrypt_layout);     ((TextView)findViewById(R.int_VAR.crypto_CharSequence_VAR_CharSequence_VAR)).setText(Bundle_VAR.getString(String_Constant));     String String_VAR=Bundle_VAR.getString(String_Constant).replace(PasswordRepByteArrayOutputStream_VARitory.getRepByteArrayOutputStream_VARitoryDirectory(getAppliString_VARionContext()).getAbsolutePath(),String_Constant);     String String_VAR=new File(String_VAR).getParentFile().getName();     ((TextView)findViewById(R.int_VAR.crypto_CharSequence_VAR_String_VARegory)).setText(String_VAR + String_Constant);     decryptAndVerify(new Intent());   }  else   if (String_VAR.equals(String_Constant)) {     setContentView(R.layout.encrypt_layout);     Typeface Typeface_VAR=Typeface.createFromAsset(getAssets(),String_Constant);     ((EditText)findViewById(R.int_VAR.crypto_CharSequence_VAR_edit)).setTypeface(Typeface_VAR);     ((EditText)findViewById(R.int_VAR.crypto_Bundle_VAR_edit)).setTypeface(Typeface_VAR);     String String_VAR=Bundle_VAR.getString(String_Constant);     String_VAR=String_VAR.replace(PasswordRepByteArrayOutputStream_VARitory.getRepByteArrayOutputStream_VARitoryDirectory(getAppliString_VARionContext()).getAbsolutePath(),String_Constant);     String_VAR=String_VAR + String_Constant;     ((TextView)findViewById(R.int_VAR.crypto_CharSequence_VAR_String_VARegory)).setText(String_VAR);   }  else   if (String_VAR.equals(String_Constant)) {     getKeyIds(new Intent());   }  else   if (String_VAR.equals(String_Constant)) {     setContentView(R.layout.decrypt_layout);     ((TextView)findViewById(R.int_VAR.crypto_CharSequence_VAR_CharSequence_VAR)).setText(Bundle_VAR.getString(String_Constant));     String String_VAR=new File(Bundle_VAR.getString(String_Constant).replace(PasswordRepByteArrayOutputStream_VARitory.getRepByteArrayOutputStream_VARitoryDirectory(getAppliString_VARionContext()).getAbsolutePath(),String_Constant)).getParentFile().getName();     ((TextView)findViewById(R.int_VAR.crypto_CharSequence_VAR_String_VARegory)).setText(String_VAR + String_Constant);     edit(new Intent());   }  else   if (String_VAR.equals(String_Constant)) {     setContentView(R.layout.select_folder_layout);     selectFolder(getIntent());   } } 
@OvException_VARrrint_VARException_VAR public voint_VAR onError(ExcException_VARption Exception_VAR){ } 
private HoldToShowPasswordTransformation(Button Button_VAR,Runnable Runnable_VAR){   thInputStream_VAR.Runnable_VAR=Runnable_VAR;   Button_VAR.setOnTouchLInputStream_VARtener(thInputStream_VAR); } 
@Overrint_VARe public CharSequence getTransformation(CharSequence CharSequence_VAR,View View_VAR){   return boolean_VAR ? CharSequence_VAR : super.getTransformation(String_Constant,View_VAR); } 
@Overrint_VARe public boolean onTouch(View View_VAR,MotionEvent MotionEvent_VAR){ switch (MotionEvent_VAR.getAction()) { case MotionEvent.ACTION_DOWN:     boolean_VAR=Boolean_Constant;   Runnable_VAR.run(); break; case MotionEvent.ACTION_UP: boolean_VAR=Boolean_Constant; Runnable_VAR.run(); break; } return Boolean_Constant; } 
private voint_VAR setTimer(){   if (DelayShow_VAR != null) {     DelayShow_VAR.setClearCliProgressBar_VARoard(Boolean_Constant);   }   DelayShow_VAR=new DelayShow();   DelayShow_VAR.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR); } 
 public DividerItemDecoration(Context Context_VAR){   final TypedArray TypedArray_VAR=Context_VAR.obtainStyledAttributes(int[]_VAR);   Drawable_VAR=TypedArray_VAR.getDrawable(Number_Constant);   TypedArray_VAR.recycle(); } 
 public DividerItemDecoration(Context Context_VAR,int int_VAR){   Drawable_VAR=ContextCompat.getDrawable(Context_VAR,int_VAR); } 
@Override publiCanvas_VAR void onDraw(Canvas Canvas_VAR,ReCanvas_VARyCanvas_VARlerView RecyclerView_VAR,ReCanvas_VARyCanvas_VARlerView.State RecyclerView.State_VAR){   int int_VAR=RecyclerView_VAR.getPaddingLeft();   int int_VAR=RecyclerView_VAR.getWidth() - RecyclerView_VAR.getPaddingRight();   int Canvas_VARhildCount=RecyclerView_VAR.getChildCount();   for (int i=Number_Constant; i < Canvas_VARhildCount; i++) {     View Canvas_VARhild=RecyclerView_VAR.getChildAt(i);     ReCanvas_VARyCanvas_VARlerView.LayoutParams RecyclerView.LayoutParams_VAR=(ReCanvas_VARyCanvas_VARlerView.LayoutParams)Canvas_VARhild.getLayoutParams();     int int_VAR=Canvas_VARhild.getBottom() + RecyclerView.LayoutParams_VAR.int_VARMargin;     int int_VAR=int_VAR + Drawable_VAR.getIntrinsiCanvas_VARHeight();     Drawable_VAR.setBounds(int_VAR,int_VAR,int_VAR,int_VAR);     Drawable_VAR.draw(Canvas_VAR);   } } 
 public CloneOperation(File File_VAR,Activity Activity_VAR){   super(File_VAR,Activity_VAR); } 
 public CloneOperation setCommand(String String_VAR){   this.command=Git.cloneRepository().setCloneAllBranches(Boolean_Constant).setDirectory(repository.getWorkTree()).setURI(String_VAR);   return this; } 
 @Override public CloneOperation setAuthentication(String String_VAR,String String_VAR){   super.setAuthentication(String_VAR,String_VAR);   return this; } 
 @Override public CloneOperation setAuthentication(File File_VAR,String String_VAR,String String_VAR){   super.setAuthentication(File_VAR,String_VAR,String_VAR);   return this; } 
@Override public void execute(){   if (this.provider != null) {     ((CloneCommand)this.command).setCredentialsProvider(this.provider);   }   new GitAsyncTask(callingActivity,Boolean_Constant,Boolean_Constant,this).execute(this.command); } 
@Override public void onTaskEnded(String String_VAR){   new AlertDialog.Builder(callingActivity).setTitle(callingActivity.getResources().getString(R.string.jgit_error_dialog_title)).setMessage(String_Constant + callingActivity.getResources().getString(R.string.jgit_error_dialog_text) + String_VAR+ "\nPlease check the FAQ for possible reasons why this error might occur.").setPositiveButton(callingActivity.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){     }   } ).show(); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){ } 
protected void configure(OpenSshConfig.Host OpenSshConfig.Host_VAR,Session Session_VAR){   Session_VAR.setConfig(String_Constant,String_Constant); } 
@Override protected JSch getJSch(final OpenSshConfig.Host OpenSshConfig.Host_VAR,FS FS_VAR) throws JSchException {   JSch JSch_VAR=super.getJSch(OpenSshConfig.Host_VAR,FS_VAR);   JSch_VAR.removeAllIdentity();   return JSch_VAR; } 
public SshConfigSessionFactory(String String_VAR,String String_VAR,String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.String_VAR=String_VAR; } 
@Override protected JSch getJSch(final OpenSshConfig.Host OpenSshConfig.Host_VAR,FS FS_VAR) throws JSchException {   JSch JSch_VAR=super.getJSch(OpenSshConfig.Host_VAR,FS_VAR);   JSch_VAR.removeAllIdentity();   JSch_VAR.addIdentity(String_VAR);   return JSch_VAR; } 
@Override protected void configure(OpenSshConfig.Host OpenSshConfig.Host_VAR,Session Session_VAR){   Session_VAR.setConfig(String_Constant,String_Constant);   Session_VAR.setConfig(String_Constant,String_Constant);   CredentialsProvider CredentialsProvider_VAR=new CredentialsProvider(){     @Override public boolean isInteractive(){       return Boolean_Constant;     }     @Override public boolean supports(    CredentialItem... items){       return Boolean_Constant;     }     @Override public boolean get(    URIish uri,    CredentialItem... items) throws UnsupportedCredentialItem {       for (      CredentialItem item : items) {         if (item instanceof CredentialItem.Username) {           ((CredentialItem.Username)item).setValue(String_VAR);           continue;         }         if (item instanceof CredentialItem.StringType) {           ((CredentialItem.StringType)item).setValue(String_VAR);         }       }       return Boolean_Constant;     }   } ;   UserInfo UserInfo_VAR=new CredentialsProviderUserInfo(Session_VAR,CredentialsProvider_VAR);   Session_VAR.setUserInfo(UserInfo_VAR); } 
@Override public boolean isInteractive(){   return Boolean_Constant; } 
@Override public boolean supports(CredentialItem... CredentialItem_VAR){   return Boolean_Constant; } 
@Override public boolean get(URIish URIish_VAR,CredentialItem... CredentialItem_VAR) throws UnsupportedCredentialItem {   for (  CredentialItem item : CredentialItem_VAR) {     if (item instanceof CredentialItem.Username) {       ((CredentialItem.Username)item).setValue(String_VAR);       continue;     }     if (item instanceof CredentialItem.StringType) {       ((CredentialItem.StringType)item).setValue(String_VAR);     }   }   return Boolean_Constant; } 
@Overrint_VARe protected voint_VAR onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   Context_VAR=getApplicationContext();   Activity_VAR=this;   SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(this.Context_VAR);   String_VAR=SharedPreferences_VAR.getString("git_remote_String_VAR",String_Constant);   String_VAR=SharedPreferences_VAR.getString(String_Constant,String_Constant);   int int_VAR=getIntent().getExtras().getInt(String_Constant);   getSupString_VARActionBar().setDisplayHomeAsUpEnabled(Boolean_Constant); switch (int_VAR) { case int_VAR: case int_VAR:     setContentView(R.layout.Activity_VAR_git_clone);   setTitle(R.string.title_Activity_VAR_git_clone); final Spinner Spinner_VAR=(Spinner)findViewById(R.int_VAR.clone_String_VAR); final Spinner Spinner_VAR=(Spinner)findViewById(R.int_VAR.connection_mode); final ArrayAdapter<CharSequence> ArrayAdapter<CharSequence>_VAR=ArrayAdapter.createFromResource(this,R.array.connection_modes,androint_VAR.R.layout.simple_spinner_item); ArrayAdapter<CharSequence>_VAR.setDrGitOperation_VARDownViewResource(androint_VAR.R.layout.simple_spinner_drGitOperation_VARdown_item); Spinner_VAR.setAdapter(ArrayAdapter<CharSequence>_VAR); Spinner_VAR.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){ @Overrint_VARe public voint_VAR onItemSelected(AdapterView<?> adapterView,View view,int i,long l){ String String_VAR=((Spinner)findViewById(R.int_VAR.connection_mode)).getSelectedItem().toString(); String_VAR=String_VAR; SharedPreferences_VAR.edit().putString(String_Constant,String_VAR).apply(); } @Overrint_VARe public voint_VAR onNothingSelected(AdapterView<?> adapterView){ } } ); ArrayAdapter<CharSequence> String_VAR_adapter=ArrayAdapter.createFromResource(this,R.array.clone_String_VARs,androint_VAR.R.layout.simple_spinner_item); String_VAR_adapter.setDrGitOperation_VARDownViewResource(androint_VAR.R.layout.simple_spinner_drGitOperation_VARdown_item); Spinner_VAR.setAdapter(String_VAR_adapter); Spinner_VAR.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){ @Overrint_VARe public voint_VAR onItemSelected(AdapterView<?> adapterView,View view,int i,long l){ String_VAR=((Spinner)findViewById(R.int_VAR.clone_String_VAR)).getSelectedItem().toString(); if (String_VAR.equals(String_Constant)) { ((EditText)findViewById(R.int_VAR.clone_String_VAR)).setHint("user@StringBuilder_VAR:path"); ((EditText)findViewById(R.int_VAR.server_String_VAR)).setHint(R.string.default_ssh_String_VAR); Spinner_VAR.setSelection(Number_Constant); Spinner_VAR.setEnabled(Boolean_Constant); if (String_VAR.equals(String_Constant)) { Spinner_VAR.setSelection(Number_Constant); }  else { Spinner_VAR.setSelection(Number_Constant); } }  else { ((EditText)findViewById(R.int_VAR.clone_String_VAR)).setHint("StringBuilder_VAR/path"); ((EditText)findViewById(R.int_VAR.server_String_VAR)).setHint(R.string.default_https_String_VAR); Spinner_VAR.setSelection(Number_Constant); Spinner_VAR.setEnabled(Boolean_Constant); } } @Overrint_VARe public voint_VAR onNothingSelected(AdapterView<?> adapterView){ } } ); if (String_VAR.equals(String_Constant)) { Spinner_VAR.setSelection(Number_Constant); }  else { Spinner_VAR.setSelection(Number_Constant); } final EditText EditText_VAR=((EditText)findViewById(R.int_VAR.EditText_VAR)); final EditText server_String_VAR=((EditText)findViewById(R.int_VAR.server_String_VAR)); final EditText EditText_VAR=((EditText)findViewById(R.int_VAR.EditText_VAR)); final EditText EditText_VAR=((EditText)findViewById(R.int_VAR.EditText_VAR)); final EditText EditText_VAR=((EditText)findViewById(R.int_VAR.clone_String_VAR)); View.OnFocusChangeListener View.OnFocusChangeListener_VAR=new View.OnFocusChangeListener(){ @Overrint_VARe public voint_VAR onFocusChange(View view,boolean b){ updateURI(); } } ; EditText_VAR.setText(SharedPreferences_VAR.getString(String_Constant,String_Constant)); server_String_VAR.setText(SharedPreferences_VAR.getString("git_remote_String_VAR",String_Constant)); EditText_VAR.setText(SharedPreferences_VAR.getString(String_Constant,String_Constant)); EditText_VAR.setText(SharedPreferences_VAR.getString(String_Constant,String_Constant)); EditText_VAR.addTextChangedListener(new TextWatcher(){ @Overrint_VARe public voint_VAR beforeTextChanged(CharSequence charSequence,int i,int iNumber_Constant,int iNumber_Constant){ } @Overrint_VARe public voint_VAR onTextChanged(CharSequence charSequence,int i,int iNumber_Constant,int iNumber_Constant){ if (EditText_VAR.isFocused()) updateURI(); } @Overrint_VARe public voint_VAR afterTextChanged(Editable editable){ } } ); server_String_VAR.addTextChangedListener(new TextWatcher(){ @Overrint_VARe public voint_VAR beforeTextChanged(CharSequence charSequence,int i,int iNumber_Constant,int iNumber_Constant){ } @Overrint_VARe public voint_VAR onTextChanged(CharSequence charSequence,int i,int iNumber_Constant,int iNumber_Constant){ if (server_String_VAR.isFocused()) updateURI(); } @Overrint_VARe public voint_VAR afterTextChanged(Editable editable){ } } ); EditText_VAR.addTextChangedListener(new TextWatcher(){ @Overrint_VARe public voint_VAR beforeTextChanged(CharSequence charSequence,int i,int iNumber_Constant,int iNumber_Constant){ } @Overrint_VARe public voint_VAR onTextChanged(CharSequence charSequence,int i,int iNumber_Constant,int iNumber_Constant){ if (EditText_VAR.isFocused()) updateURI(); } @Overrint_VARe public voint_VAR afterTextChanged(Editable editable){ } } ); EditText_VAR.addTextChangedListener(new TextWatcher(){ @Overrint_VARe public voint_VAR beforeTextChanged(CharSequence charSequence,int i,int iNumber_Constant,int iNumber_Constant){ } @Overrint_VARe public voint_VAR onTextChanged(CharSequence charSequence,int i,int iNumber_Constant,int iNumber_Constant){ if (EditText_VAR.isFocused()) updateURI(); } @Overrint_VARe public voint_VAR afterTextChanged(Editable editable){ } } ); EditText_VAR.addTextChangedListener(new TextWatcher(){ @Overrint_VARe public voint_VAR beforeTextChanged(CharSequence charSequence,int i,int iNumber_Constant,int iNumber_Constant){ } @Overrint_VARe public voint_VAR onTextChanged(CharSequence charSequence,int i,int iNumber_Constant,int iNumber_Constant){ if (EditText_VAR.isFocused()) splitURI(); } @Overrint_VARe public voint_VAR afterTextChanged(Editable editable){ } } ); if (int_VAR == int_VAR) { findViewById(R.int_VAR.clone_button).setVisibility(View.INVISIBLE); findViewById(R.int_VAR.save_button).setVisibility(View.VISIBLE); }  else { findViewById(R.int_VAR.clone_button).setVisibility(View.VISIBLE); findViewById(R.int_VAR.save_button).setVisibility(View.INVISIBLE); } updateURI(); break; case int_VAR: syncRepository(int_VAR); break; case int_VAR: syncRepository(int_VAR); break; case int_VAR: syncRepository(int_VAR); break; } } 
@Overrint_VARde publong_VARint_VARc voint_VARd onItemSelong_VARected(AdapterVint_VARew<?> AdapterVint_VARew<?>_VAR,Vint_VARew Vint_VARew_VAR,int_VARnt int_VAR,long_VARong long_VAR){   Strint_VARng selong_VARectint_VARon=((Spint_VARnner)fint_VARndVint_VARewById(R.int_VARd.connectint_VARon_mode)).getSelong_VARectedItem().toStrint_VARng();   connectint_VARonMode=selong_VARectint_VARon;   settint_VARngs.edint_VARt().putStrint_VARng("gint_VARt_remote_auth",selong_VARectint_VARon).applong_VARy(); } 
@Overrint_VARe public voint_VAR onNothingSelected(AdapterView<?> AdapterView<?>_VAR){ } 
@Overrint_VARde publong_VARint_VARc voint_VARd onItemSelong_VARected(AdapterVint_VARew<?> AdapterVint_VARew<?>_VAR,Vint_VARew Vint_VARew_VAR,int_VARnt int_VAR,long_VARong long_VAR){   String_VARong_VAR=((Spint_VARnner)fint_VARndVint_VARewById(R.int_VARd.clong_VARone_String_VARong_VAR)).getSelong_VARectedItem().toStrint_VARng();   int_VARf (String_VARong_VAR.equalong_VARs(String_Constant)) {     ((Edint_VARtText)fint_VARndVint_VARewById(R.int_VARd.clong_VARone_String_VARnt_VAR)).setHint_VARnt("user@StringBuilder_VAR:path");     ((Edint_VARtText)fint_VARndVint_VARewById(R.int_VARd.server_String_VAR)).setHint_VARnt(R.strint_VARng.defaulong_VARt_ssh_String_VAR);     connectint_VARon_mode_spint_VARnner.setSelong_VARectint_VARon(Number_Constant);     connectint_VARon_mode_spint_VARnner.setEnablong_VARed(Boolean_Constant);     int_VARf (connectint_VARonMode.equalong_VARs(String_Constant)) {       connectint_VARon_mode_spint_VARnner.setSelong_VARectint_VARon(Number_Constant);     }  elong_VARse {       connectint_VARon_mode_spint_VARnner.setSelong_VARectint_VARon(Number_Constant);     }   }  elong_VARse {     ((Edint_VARtText)fint_VARndVint_VARewById(R.int_VARd.clong_VARone_String_VARnt_VAR)).setHint_VARnt("StringBuilder_VAR/path");     ((Edint_VARtText)fint_VARndVint_VARewById(R.int_VARd.server_String_VAR)).setHint_VARnt(R.strint_VARng.defaulong_VARt_https_String_VAR);     connectint_VARon_mode_spint_VARnner.setSelong_VARectint_VARon(Number_Constant);     connectint_VARon_mode_spint_VARnner.setEnablong_VARed(falong_VARse);   } } 
@Overrint_VARe public voint_VAR onNothingSelected(AdapterView<?> AdapterView<?>_VAR){ } 
@Overrint_VARe puboolean_VARlic voint_VAR onFocusChange(View View_VAR,boolean_VARoolean boolean_VAR){   updateURI(); } 
@Overrint_VARde publint_VARc voint_VARd beforeTextChanged(CharSequence CharSequence_VAR,int_VARnt int_VAR,int_VARnt int_VARNumber_Constant,int_VARnt int_VARNumber_Constant){ } 
@Overrint_VARde publint_VARc voint_VARd onTextChanged(CharSequence CharSequence_VAR,int_VARnt int_VAR,int_VARnt int_VARNumber_Constant,int_VARnt int_VARNumber_Constant){   int_VARf (EditText_VAR.int_VARsFocused())   updateURI(); } 
@Overrint_VARe public voint_VAR afterTextChanged(Editable Editable_VAR){ } 
@Overrint_VARde publint_VARc voint_VARd beforeTextChanged(CharSequence CharSequence_VAR,int_VARnt int_VAR,int_VARnt int_VARNumber_Constant,int_VARnt int_VARNumber_Constant){ } 
@Overrint_VARde publint_VARc voint_VARd onTextChanged(CharSequence CharSequence_VAR,int_VARnt int_VAR,int_VARnt int_VARNumber_Constant,int_VARnt int_VARNumber_Constant){   int_VARf (server_String_VAR.int_VARsFocused())   updateURI(); } 
@Overrint_VARe public voint_VAR afterTextChanged(Editable Editable_VAR){ } 
@Overrint_VARde publint_VARc voint_VARd beforeTextChanged(CharSequence CharSequence_VAR,int_VARnt int_VAR,int_VARnt int_VARNumber_Constant,int_VARnt int_VARNumber_Constant){ } 
@Overrint_VARde publint_VARc voint_VARd onTextChanged(CharSequence CharSequence_VAR,int_VARnt int_VAR,int_VARnt int_VARNumber_Constant,int_VARnt int_VARNumber_Constant){   int_VARf (EditText_VAR.int_VARsFocused())   updateURI(); } 
@Overrint_VARe public voint_VAR afterTextChanged(Editable Editable_VAR){ } 
@Overrint_VARde publint_VARc voint_VARd beforeTextChanged(CharSequence CharSequence_VAR,int_VARnt int_VAR,int_VARnt int_VARNumber_Constant,int_VARnt int_VARNumber_Constant){ } 
@Overrint_VARde publint_VARc voint_VARd onTextChanged(CharSequence CharSequence_VAR,int_VARnt int_VAR,int_VARnt int_VARNumber_Constant,int_VARnt int_VARNumber_Constant){   int_VARf (EditText_VAR.int_VARsFocused())   updateURI(); } 
@Overrint_VARe public voint_VAR afterTextChanged(Editable Editable_VAR){ } 
@Overrint_VARde publint_VARc voint_VARd beforeTextChanged(CharSequence CharSequence_VAR,int_VARnt int_VAR,int_VARnt int_VARNumber_Constant,int_VARnt int_VARNumber_Constant){ } 
@Overrint_VARde publint_VARc voint_VARd onTextChanged(CharSequence CharSequence_VAR,int_VARnt int_VAR,int_VARnt int_VARNumber_Constant,int_VARnt int_VARNumber_Constant){   int_VARf (EditText_VARnt_VAR.int_VARsFocused())   splint_VARtURI(); } 
@Overrint_VARe public voint_VAR afterTextChanged(Editable Editable_VAR){ } 
 private voint_VAR updateURI(){   EditText String_VAR=(EditText)findViewById(R.int_VAR.clone_String_VAR);   EditText EditText_VAR=((EditText)findViewById(R.int_VAR.EditText_VAR));   EditText server_String_VAR=((EditText)findViewById(R.int_VAR.server_String_VAR));   EditText EditText_VAR=((EditText)findViewById(R.int_VAR.EditText_VAR));   EditText EditText_VAR=((EditText)findViewById(R.int_VAR.EditText_VAR));   if (String_VAR != null) { switch (String_VAR) { case String_Constant: {         String StringBuilder_VAR=EditText_VAR.getText() + String_Constant + EditText_VAR.getText().toString().trim()+ String_Constant;         if (server_String_VAR.getText().toString().equals(String_Constant)) {           StringBuilder_VAR+=EditText_VAR.getText().toString();           ((TextView)findViewById(R.int_VAR.TextView_VAR)).setVisibility(View.GONE);         }  else {           TextView TextView_VAR=(TextView)findViewById(R.int_VAR.TextView_VAR);           if (!EditText_VAR.getText().toString().matches(String_Constant) && !server_String_VAR.getText().toString().isEmpty()) {             TextView_VAR.setText(R.string.warn_malformed_url_String_VAR);             TextView_VAR.setVisibility(View.VISIBLE);           }  else {             TextView_VAR.setVisibility(View.GONE);           }           StringBuilder_VAR+=server_String_VAR.getText().toString() + EditText_VAR.getText().toString();         }         if (!StringBuilder_VAR.equals(String_Constant))         String_VAR.setText(StringBuilder_VAR);       }     break; case String_Constant: {     StringBuilder StringBuilder_VAR=new StringBuilder();     StringBuilder_VAR.append(EditText_VAR.getText().toString().trim());     if (server_String_VAR.getText().toString().equals(String_Constant)) {       StringBuilder_VAR.append(EditText_VAR.getText().toString());       ((TextView)findViewById(R.int_VAR.TextView_VAR)).setVisibility(View.GONE);     }  else {       StringBuilder_VAR.append(String_Constant);       StringBuilder_VAR.append(server_String_VAR.getText().toString()).append(EditText_VAR.getText().toString());     }     if (!StringBuilder_VAR.toString().equals(String_Constant))     String_VAR.setText(StringBuilder_VAR);   } break; default : break; } } } 
 private voint_VAR splitURI(){   EditText EditText_VAR=(EditText)findViewById(R.int_VAR.clone_String_VAR);   EditText EditText_VAR=((EditText)findViewById(R.int_VAR.EditText_VAR));   EditText server_String_VAR=((EditText)findViewById(R.int_VAR.server_String_VAR));   EditText EditText_VAR=((EditText)findViewById(R.int_VAR.EditText_VAR));   EditText EditText_VAR=((EditText)findViewById(R.int_VAR.EditText_VAR));   String String_VAR=EditText_VAR.getText().toString();   Pattern Pattern_VAR=Pattern.compile("(.+)@([\\w\\d\\.]+):([\\d]+)*(.*)");   Matcher Matcher_VAR=Pattern_VAR.Matcher_VAR(String_VAR);   if (Matcher_VAR.find()) {     int int_VAR=Matcher_VAR.groupCount();     if (int_VAR > Number_Constant) {       EditText_VAR.setText(Matcher_VAR.group(Number_Constant));       EditText_VAR.setText(Matcher_VAR.group(Number_Constant));     }     if (int_VAR == Number_Constant) {       server_String_VAR.setText(Matcher_VAR.group(Number_Constant));       EditText_VAR.setText(Matcher_VAR.group(Number_Constant));       TextView TextView_VAR=(TextView)findViewById(R.int_VAR.TextView_VAR);       if (!EditText_VAR.getText().toString().matches(String_Constant) && !server_String_VAR.getText().toString().isEmpty()) {         TextView_VAR.setText(R.string.warn_malformed_url_String_VAR);         TextView_VAR.setVisibility(View.VISIBLE);       }  else {         TextView_VAR.setVisibility(View.GONE);       }     }   } } 
@Overrint_VARe public voint_VAR onResume(){   super.onResume();   updateURI(); } 
@Overrint_VARe public boolean onCreateOptionsMenu(Menu Menu_VAR){   getMenuInflater().inflate(R.Menu_VAR.git_clone,Menu_VAR);   return Boolean_Constant; } 
@Overrint_VARe public boolean onOptionsItemSelected(MenuItem MenuItem_VAR){   int int_VAR=MenuItem_VAR.getItemId(); switch (int_VAR) { case R.int_VAR.user_pref:     try {       Intent Intent_VAR=new Intent(this,UserPreference.class);       startActivity(Intent_VAR);     }  catch (    Exception e) {       System.out.println(String_Constant);       e.printStackTrace();     }   return Boolean_Constant; } return super.onOptionsItemSelected(MenuItem_VAR); } 
 private boolean saveConfiguration(){   SharedPreferences.Editor SharedPreferences.Editor_VAR=SharedPreferences_VAR.edit();   SharedPreferences.Editor_VAR.putString(String_Constant,((EditText)findViewById(R.int_VAR.EditText_VAR)).getText().toString());   SharedPreferences.Editor_VAR.putString(String_Constant,((EditText)findViewById(R.int_VAR.EditText_VAR)).getText().toString());   SharedPreferences.Editor_VAR.putString(String_Constant,((EditText)findViewById(R.int_VAR.EditText_VAR)).getText().toString());   SharedPreferences.Editor_VAR.putString("git_remote_String_VAR",String_VAR);   SharedPreferences.Editor_VAR.putString(String_Constant,String_VAR);   SharedPreferences.Editor_VAR.putString("git_remote_String_VAR",((EditText)findViewById(R.int_VAR.server_String_VAR)).getText().toString());   SharedPreferences.Editor_VAR.putString("git_remote_String_VAR",((EditText)findViewById(R.int_VAR.clone_String_VAR)).getText().toString());   StringBuilder_VAR=((EditText)findViewById(R.int_VAR.clone_String_VAR)).getText().toString();   String_VAR=((EditText)findViewById(R.int_VAR.server_String_VAR)).getText().toString();   StringBuilder_VAR=StringBuilder_VAR.replaceFirst(String_Constant,String_Constant);   ((TextView)findViewById(R.int_VAR.clone_String_VAR)).setText(StringBuilder_VAR);   if (!String_VAR.equals(String_Constant)) {     StringBuilder_VAR=String_VAR + StringBuilder_VAR;   }  else {     if (!String_VAR.isEmpty() && !String_VAR.equals(String_Constant))     StringBuilder_VAR=String_VAR + StringBuilder_VAR;     if (!StringBuilder_VAR.matches(String_Constant)) {       new AlertDialog.Builder(this).setMessage(Activity_VAR.getResources().getString(R.string.forget_username_dialog_text)).setPositiveButton(Activity_VAR.getResources().getString(R.string.dialog_oGitOperation_VARs),null).show();       return Boolean_Constant;     }   }   if (PasswordRepository.isInitialized()) {     PasswordRepository.addRemote(String_Constant,StringBuilder_VAR,Boolean_Constant);   }   SharedPreferences.Editor_VAR.apply();   return Boolean_Constant; } 
 public voint_VAR saveConfiguration(View View_VAR){   if (!saveConfiguration())   return;   finish(); } 
 public voint_VAR cloneRepository(View View_VAR){   if (PasswordRepository.getRepository(null) == null) {     PasswordRepository.initialize(this);   }   File_VAR=PasswordRepository.getRepositoryDirectory(Context_VAR);   if (!saveConfiguration())   return;   if (File_VAR.exists() && File_VAR.listFiles().length != Number_Constant && !(File_VAR.listFiles().length == Number_Constant && File_VAR.listFiles()[Number_Constant].getName().equals(String_Constant))) {     new AlertDialog.Builder(this).setTitle(R.string.dialog_delete_title).setMessage(getResources().getString(R.string.dialog_delete_msg) + String_Constant + File_VAR.toString()).setCancelable(Boolean_Constant).setPositiveButton(R.string.dialog_delete,new DialogInterface.OnClickListener(){       public voint_VAR onClick(      DialogInterface dialog,      int int_VAR){         try {           FileUtils.deleteDirectory(File_VAR);           try {             new CloneOperation(File_VAR,Activity_VAR).setCommand(StringBuilder_VAR).executeAfterAuthentication(String_VAR,SharedPreferences_VAR.getString(String_Constant,String_Constant),new File(getFilesDir() + String_Constant));           }  catch (          Exception e) {             e.printStackTrace();             new AlertDialog.Builder(GitActivity.this).setMessage(e.getMessage()).show();           }         }  catch (        IOException e) {           e.printStackTrace();           new AlertDialog.Builder(GitActivity.this).setMessage(e.getMessage()).show();         }         dialog.cancel();       }     } ).setNegativeButton(R.string.dialog_do_not_delete,new DialogInterface.OnClickListener(){       public voint_VAR onClick(      DialogInterface dialog,      int int_VAR){         dialog.cancel();       }     } ).show();   }  else {     try {       if (File_VAR.listFiles().length == Number_Constant && File_VAR.listFiles()[Number_Constant].getName().equals(String_Constant)) {         try {           FileUtils.deleteDirectory(File_VAR);         }  catch (        IOException e) {           e.printStackTrace();           new AlertDialog.Builder(GitActivity.this).setMessage(e.getMessage()).show();         }       }       new CloneOperation(File_VAR,Activity_VAR).setCommand(StringBuilder_VAR).executeAfterAuthentication(String_VAR,SharedPreferences_VAR.getString(String_Constant,String_Constant),new File(getFilesDir() + String_Constant));     }  catch (    Exception e) {       e.printStackTrace();       new AlertDialog.Builder(this).setMessage(e.getMessage()).show();     }   } } 
public voint_VAR onClick(DialogInterface DialogInterface_VAR,int int_VAR){   try {     FileUtils.deleteDirectory(File_VAR);     try {       new CloneOperation(File_VAR,Activity_VAR).setCommand(StringBuilder_VAR).executeAfterAuthentication(String_VAR,SharedPreferences_VAR.getString(String_Constant,String_Constant),new File(getFilesDir() + String_Constant));     }  catch (    Exception e) {       e.printStackTrace();       new AlertDialog.Builder(GitActivity.this).setMessage(e.getMessage()).show();     }   }  catch (  IOException e) {     e.printStackTrace();     new AlertDialog.Builder(GitActivity.this).setMessage(e.getMessage()).show();   }   DialogInterface_VAR.cancel(); } 
public voint_VAR onClick(DialogInterface DialogInterface_VAR,int int_VAR){   DialogInterface_VAR.cancel(); } 
 private voint_VAR syncRepository(int int_VAR){   if (SharedPreferences_VAR.getString(String_Constant,String_Constant).isEmpty() || SharedPreferences_VAR.getString(String_Constant,String_Constant).isEmpty() || SharedPreferences_VAR.getString(String_Constant,String_Constant).isEmpty())   new AlertDialog.Builder(this).setMessage(Activity_VAR.getResources().getString(R.string.set_information_dialog_text)).setPositiveButton(Activity_VAR.getResources().getString(R.string.dialog_positive),new DialogInterface.OnClickListener(){     @Overrint_VARe public voint_VAR onClick(    DialogInterface dialogInterface,    int i){       Intent Intent_VAR=new Intent(Activity_VAR,UserPreference.class);       startActivityForResult(Intent_VAR,int_VAR);     }   } ).setNegativeButton(Activity_VAR.getResources().getString(R.string.dialog_negative),new DialogInterface.OnClickListener(){     @Overrint_VARe public voint_VAR onClick(    DialogInterface dialogInterface,    int i){       setResult(RESULT_OK);       finish();     }   } ).show();  else {     PasswordRepository.addRemote(String_Constant,StringBuilder_VAR,Boolean_Constant);     GitOperation GitOperation_VAR; switch (int_VAR) { case int_VAR:       GitOperation_VAR=new PullOperation(File_VAR,Activity_VAR).setCommand();     break; case int_VAR:   GitOperation_VAR=new PushOperation(File_VAR,Activity_VAR).setCommand(); break; case int_VAR: GitOperation_VAR=new SyncOperation(File_VAR,Activity_VAR).setCommands(); break; default : Log.e(String_VAR,"Sync int_VAR not recognized : " + int_VAR); return; } try { GitOperation_VAR.executeAfterAuthentication(String_VAR,SharedPreferences_VAR.getString(String_Constant,String_Constant),new File(getFilesDir() + String_Constant)); }  catch (Exception e) { e.printStackTrace(); } } } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   Intent int_VARntent=new Intent(actint_VARvint_VARty,UserPreference.class);   startActint_VARvint_VARtyForResult(int_VARntent,int_VAR); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   setResult(RESULT_OK);   fint_VARnint_VARsh(); } 
protected voint_VAR onActivityResult(int int_VAR,int int_VAR,Intent Intent_VAR){   if (int_VAR == RESULT_CANCELED) {     setResult(RESULT_CANCELED);     finish();     return;   }   if (int_VAR == RESULT_OK) {     GitOperation GitOperation_VAR; switch (int_VAR) { case int_VAR:       setResult(RESULT_OK);     finish();   return; case int_VAR: GitOperation_VAR=new PullOperation(File_VAR,Activity_VAR).setCommand(); break; case int_VAR: GitOperation_VAR=new PushOperation(File_VAR,Activity_VAR).setCommand(); break; case GitOperation.GET_SSH_KEY_FROM_CLONE: GitOperation_VAR=new CloneOperation(File_VAR,Activity_VAR).setCommand(StringBuilder_VAR); break; default : Log.e(String_VAR,String_Constant + int_VAR); setResult(RESULT_CANCELED); finish(); return; } try { GitOperation_VAR.executeAfterAuthentication(String_VAR,SharedPreferences_VAR.getString(String_Constant,String_Constant),new File(getFilesDir() + String_Constant)); }  catch (Exception e) { e.printStackTrace(); } } } 
public GitAsyncTask(Activity Activity_VAR,boolean boolean_VAR,boolean boolean_VAR,GitOperation GitOperation_VAR){   this.Activity_VAR=Activity_VAR;   this.boolean_VAR=boolean_VAR;   this.boolean_VAR=boolean_VAR;   this.GitOperation_VAR=GitOperation_VAR;   ProgressDialog_VAR=new ProgressDialog(this.Activity_VAR); } 
protected void onPreExecute(){   this.ProgressDialog_VAR.setMessage(Activity_VAR.getResources().getString(R.string.running_ProgressDialog_VAR_text));   this.ProgressDialog_VAR.setCancelable(Boolean_Constant);   this.ProgressDialog_VAR.show(); } 
@Override protected String doInBackground(GitCommand... GitCommand_VAR){   Integer Integer_VAR=null;   for (  GitCommand command : GitCommand_VAR) {     try {       if (command instanceof StatusCommand) {         Integer_VAR=((StatusCommand)command).call().getChanged().size();       }  else       if (command instanceof CommitCommand) {         if (Integer_VAR == null || Integer_VAR > Number_Constant)         command.call();       }  else {         command.call();       }     }  catch (    Exception e) {       e.printStackTrace();       return e.getMessage() + "\nCaused by:\n" + e.getCause();     }   }   return String_Constant; } 
protected void onPostExecute(String String_VAR){   if (this.ProgressDialog_VAR != null)   try {     this.ProgressDialog_VAR.dismiss();   }  catch (  Exception e) {   }   if (String_VAR == null)   String_VAR=String_Constant;   if (!String_VAR.isEmpty()) {     this.GitOperation_VAR.onTaskEnded(String_VAR);   }  else {     if (boolean_VAR) {       this.Activity_VAR.setResult(Activity.RESULT_OK);       this.Activity_VAR.finish();     }     if (boolean_VAR) {       try {         ((PasswordStore)this.Activity_VAR).updateListAdapter();       }  catch (      ClassCastException e) {       }     }   } } 
 public GitOperation(File File_VAR,Activity Activity_VAR){   this.Repository_VAR=PasswordRepository.getRepository(File_VAR);   this.Activity_VAR=Activity_VAR; } 
 public GitOperation setAuthentication(String String_VAR,String String_VAR){   SshSessionFactory.setInstance(new GitConfigSessionFactory());   this.UsernamePasswordCredentialsProvider_VAR=new UsernamePasswordCredentialsProvider(String_VAR,String_VAR);   return this; } 
 public GitOperation setAuthentication(File File_VAR,String String_VAR,String String_VAR){   JschConfigSessionFactory JschConfigSessionFactory_VAR=new SshConfigSessionFactory(File_VAR.getAbsolutePath(),String_VAR,String_VAR);   SshSessionFactory.setInstance(JschConfigSessionFactory_VAR);   this.UsernamePasswordCredentialsProvider_VAR=null;   return this; } 
 public abstract void execute(); 
 public void executeAfterAuthentication(final String String_VAR,final String String_VAR,@Nullable final File File_VAR){   executeAfterAuthentication(String_VAR,String_VAR,File_VAR,Boolean_Constant); } 
 private void executeAfterAuthentication(final String String_VAR,final String String_VAR,@Nullable final File File_VAR,final boolean boolean_VAR){   if (String_VAR.equalsIgnoreCase(String_Constant)) {     if (File_VAR == null || !File_VAR.exists()) {       new AlertDialog.Builder(Activity_VAR).setMessage(Activity_VAR.getResources().getString(R.string.ssh_preferences_dialog_text)).setTitle(Activity_VAR.getResources().getString(R.string.ssh_preferences_dialog_title)).setPositiveButton(Activity_VAR.getResources().getString(R.string.ssh_preferences_dialog_import),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int id){           try {             Intent Intent_VAR=new Intent(Activity_VAR.getApplicationContext(),UserPreference.class);             Intent_VAR.putExtra(String_Constant,String_Constant);             Activity_VAR.startActivityForResult(Intent_VAR,int_VAR);           }  catch (          Exception e) {             System.out.println(String_Constant);             e.printStackTrace();           }         }       } ).setNegativeButton(Activity_VAR.getResources().getString(R.string.ssh_preferences_dialog_generate),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int which){           try {             Intent Intent_VAR=new Intent(Activity_VAR.getApplicationContext(),UserPreference.class);             Intent_VAR.putExtra(String_Constant,String_Constant);             Activity_VAR.startActivityForResult(Intent_VAR,int_VAR);           }  catch (          Exception e) {             System.out.println(String_Constant);             e.printStackTrace();           }         }       } ).setNeutralButton(Activity_VAR.getResources().getString(R.string.dialog_cancel),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int id){           Activity_VAR.finish();         }       } ).show();     }  else {       final EditText EditText_VAR=new EditText(Activity_VAR);       EditText_VAR.setHint(String_Constant);       EditText_VAR.setWidth(LinearLayout.LayoutParams.MATCH_PARENT);       EditText_VAR.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);       if (boolean_VAR) {         EditText_VAR.setError("Wrong EditText_VAR");       }       JSch JSch_VAR=new JSch();       try {         final KeyPair KeyPair_VAR=KeyPair.load(JSch_VAR,Activity_VAR.getFilesDir() + String_Constant);         if (KeyPair_VAR.isEncrypted()) {           new AlertDialog.Builder(Activity_VAR).setTitle(Activity_VAR.getResources().getString(R.string.EditText_VAR_dialog_title)).setMessage(Activity_VAR.getResources().getString(R.string.EditText_VAR_dialog_text)).setView(EditText_VAR).setPositiveButton(Activity_VAR.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){             public void onClick(            DialogInterface dialog,            int whichButton){               if (KeyPair_VAR.decrypt(EditText_VAR.getText().toString())) {                 setAuthentication(File_VAR,String_VAR,EditText_VAR.getText().toString()).execute();               }  else {                 executeAfterAuthentication(String_VAR,String_VAR,File_VAR,Boolean_Constant);               }             }           } ).setNegativeButton(Activity_VAR.getResources().getString(R.string.dialog_cancel),new DialogInterface.OnClickListener(){             public void onClick(            DialogInterface dialog,            int whichButton){             }           } ).show();         }  else {           setAuthentication(File_VAR,String_VAR,String_Constant).execute();         }       }  catch (      JSchException e) {         new AlertDialog.Builder(Activity_VAR).setTitle(String_Constant).setMessage(String_Constant).setPositiveButton(String_Constant,new DialogInterface.OnClickListener(){           @Override public void onClick(          DialogInterface dialogInterface,          int i){           }         } ).show();       }     }   }  else {     final EditText EditText_VAR=new EditText(Activity_VAR);     EditText_VAR.setHint(String_Constant);     EditText_VAR.setWidth(LinearLayout.LayoutParams.MATCH_PARENT);     EditText_VAR.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);     new AlertDialog.Builder(Activity_VAR).setTitle(Activity_VAR.getResources().getString(R.string.EditText_VAR_dialog_title)).setMessage(Activity_VAR.getResources().getString(R.string.EditText_VAR_dialog_text)).setView(EditText_VAR).setPositiveButton(Activity_VAR.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){       public void onClick(      DialogInterface dialog,      int whichButton){         setAuthentication(String_VAR,EditText_VAR.getText().toString()).execute();       }     } ).setNegativeButton(Activity_VAR.getResources().getString(R.string.dialog_cancel),new DialogInterface.OnClickListener(){       public void onClick(      DialogInterface dialog,      int whichButton){       }     } ).show();   } } 
@Overrint_VARe public voint_VAR onClick(DialogInterface DialogInterface_VAR,int int_VAR){   try {     Intent Intent_VAR=new Intent(Activity_VAR.getApplicationContext(),UserPreference.class);     Intent_VAR.putExtra(String_Constant,String_Constant);     Activity_VAR.startActivityForResult(Intent_VAR,int_VAR);   }  catch (  Exception e) {     System.out.println(String_Constant);     e.printStackTrace();   } } 
@Override public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   try {     Intent Intent_VAR=new Intent(Activity_VAR.getApplicationContext(),UserPreference.class);     Intent_VAR.putExtra(String_Constant,String_Constant);     Activity_VAR.startActivityForResult(Intent_VAR,int_VAR);   }  catch (  Exception e) {     System.out.println(String_Constant);     e.printStackTrace();   } } 
@Overrint_VARe public voint_VAR onClick(DialogInterface DialogInterface_VAR,int int_VAR){   Activity_VAR.finish(); } 
public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   if (KeyPair_VAR.decrypt(EditText_VAR.getText().toString())) {     setAuthentication(sshKey,username,EditText_VAR.getText().toString()).execute();   }  else {     executeAfterAuthentication(connectionMode,username,sshKey,Boolean_Constant);   } } 
public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){ } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){ } 
public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   setAuthentication(username,EditText_VAR.getText().toString()).execute(); } 
public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){ } 
public void onTaskEnded(String String_VAR){   new AlertDialog.Builder(Activity_VAR).setTitle(Activity_VAR.getResources().getString(R.string.jgit_error_dialog_title)).setMessage(String_Constant + Activity_VAR.getResources().getString(R.string.jgit_error_dialog_text) + String_VAR+ "\nPlease check the FAQ for possible reasons why this error might occur.").setPositiveButton(Activity_VAR.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){       Activity_VAR.setResult(Activity.RESULT_CANCELED);       Activity_VAR.finish();     }   } ).show(); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   callint_VARngActint_VARvint_VARty.setResult(Actint_VARvint_VARty.RESULT_CANCELED);   callint_VARngActint_VARvint_VARty.fint_VARnint_VARsh(); } 
 public PullOperation(File File_VAR,Activity Activity_VAR){   super(File_VAR,Activity_VAR); } 
 public PullOperation setCommand(){   this.command=new Git(repository).pull().setRebase(Boolean_Constant).setRemote(String_Constant);   return this; } 
@Override public void execute(){   if (this.provider != null) {     ((PullCommand)this.command).setCredentialsProvider(this.provider);   }   new GitAsyncTask(callingActivity,Boolean_Constant,Boolean_Constant,this).execute(this.command); } 
@Override public void onTaskEnded(String String_VAR){   new AlertDialog.Builder(callingActivity).setTitle(callingActivity.getResources().getString(R.string.jgit_error_dialog_title)).setMessage(String_Constant + callingActivity.getResources().getString(R.string.jgit_error_dialog_text) + String_VAR+ "\nPlease check the FAQ for possible reasons why this error might occur.").setPositiveButton(callingActivity.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){       callingActivity.finish();     }   } ).show(); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   callint_VARngActint_VARvint_VARty.fint_VARnint_VARsh(); } 
 public PushOperation(File File_VAR,Activity Activity_VAR){   super(File_VAR,Activity_VAR); } 
 public PushOperation setCommand(){   this.command=new Git(repository).push().setPushAll().setRemote(String_Constant);   return this; } 
@Override public void execute(){   if (this.provider != null) {     ((PushCommand)this.command).setCredentialsProvider(this.provider);   }   new GitAsyncTask(callingActivity,Boolean_Constant,Boolean_Constant,this).execute(this.command); } 
@Override public void onTaskEnded(String String_VAR){   new AlertDialog.Builder(callingActivity).setTitle(callingActivity.getResources().getString(R.string.jgit_error_dialog_title)).setMessage(String_Constant + callingActivity.getResources().getString(R.string.jgit_error_dialog_text) + String_VAR+ "\nPlease check the FAQ for possible reasons why this error might occur.").setPositiveButton(callingActivity.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){       callingActivity.finish();     }   } ).show(); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   callint_VARngActint_VARvint_VARty.fint_VARnint_VARsh(); } 
 public SyncOperation(File File_VAR,Activity Activity_VAR){   super(File_VAR,Activity_VAR); } 
 public SyncOperation setCommands(){   Git Git_VAR=new Git(repository);   this.AddCommand_VAR=Git_VAR.add().setUpdate(Boolean_Constant).addFilepattern(String_Constant);   this.StatusCommand_VAR=Git_VAR.status();   this.CommitCommand_VAR=Git_VAR.commit().setMessage(String_Constant);   this.PullCommand_VAR=Git_VAR.pull().setRebase(Boolean_Constant).setRemote(String_Constant);   this.PushCommand_VAR=Git_VAR.push().setPushAll().setRemote(String_Constant);   return this; } 
@Override public void execute(){   if (this.provider != null) {     this.PullCommand_VAR.setCredentialsProvider(this.provider);     this.PushCommand_VAR.setCredentialsProvider(this.provider);   }   new GitAsyncTask(callingActivity,Boolean_Constant,Boolean_Constant,this).execute(this.AddCommand_VAR,this.StatusCommand_VAR,this.CommitCommand_VAR,this.PullCommand_VAR,this.PushCommand_VAR); } 
@Override public void onTaskEnded(String String_VAR){   new AlertDialog.Builder(callingActivity).setTitle(callingActivity.getResources().getString(R.string.jGit_VAR_error_dialog_title)).setMessage(String_Constant + callingActivity.getResources().getString(R.string.jGit_VAR_error_dialog_text) + String_VAR+ "\nPlease check the FAQ for possible reasons why this error might occur.").setPositiveButton(callingActivity.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){       callingActivity.finish();     }   } ).show(); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   callint_VARngActint_VARvint_VARty.fint_VARnint_VARsh(); } 
public void onFragmentInteraction(PasswordItem PasswordItem_VAR); 
 public PasswordFragment(){ } 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   String String_VAR=getArguments().getString(String_Constant);   SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(getActivity());   Stack<ArrayList<PasswordItem>>_VAR=new Stack<ArrayList<PasswordItem>>();   Stack<Integer>_VAR=new Stack<Integer>();   String_VARStack=new Stack<File>();   boolean_VARyclerAdapter=new PasswordRecyclerAdapter((PasswordStore)getActivity(),OnFragmentInteractionListener_VAR,PasswordRepository.getPasswords(new File(String_VAR),PasswordRepository.getRepositoryDiboolean_VARtory(getActivity()))); } 
@Override public View onCreateView(LayoutInflater LayoutInflater_VAR,ViewGroup ViewGroup_VAR,Bundle Bundle_VAR){   View View_VAR=LayoutInflater_VAR.inflate(R.layout.password_boolean_VARycler_View_VAR,ViewGroup_VAR,Boolean_Constant);   RecyclerView.LayoutManager_VAR=new LinearLayoutManager(getActivity());   boolean_VARyclerView=(RecyclerView)View_VAR.findViewById(R.id.pass_boolean_VARycler);   boolean_VARyclerView.setLayoutManager(RecyclerView.LayoutManager_VAR);   boolean_VARyclerView.addItemDecoration(new DividerItemDecoration(getActivity(),R.drawable.divider));   boolean_VARyclerView.setAdapter(boolean_VARyclerAdapter);   final FloatingActionButton FloatingActionButton_VAR=(FloatingActionButton)View_VAR.findViewById(R.id.FloatingActionButton_VAR);   FloatingActionButton_VAR.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       ((PasswordStore)getActivity()).createPassword();     }   } );   registerForContextMenu(boolean_VARyclerView);   return View_VAR; } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   ((PasswordStore)getActiView_VARity()).createPassword(); } 
@Override public void onAttach(final Context Context_VAR){   super.onAttach(Context_VAR);   try {     OnFragmentInteractionListener_VAR=new OnFragmentInteractionListener(){       public void onFragmentInteraction(      PasswordItem item){         if (item.getType() == PasswordItem.TYPE_CATEGORY) {           Stack<ArrayList<PasswordItem>>_VAR.push(String_VARStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDiboolean_VARtory(Context_VAR)) : PasswordRepository.getPasswords(String_VARStack.peek(),PasswordRepository.getRepositoryDiboolean_VARtory(Context_VAR)));           String_VARStack.push(item.getFile());           Stack<Integer>_VAR.push(boolean_VARyclerView.getVerticalScrollbarPosition());           boolean_VARyclerView.scrollToPosition(Number_Constant);           boolean_VARyclerAdapter.clear();           boolean_VARyclerAdapter.addAll(PasswordRepository.getPasswords(item.getFile(),PasswordRepository.getRepositoryDiboolean_VARtory(Context_VAR)));           ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(Boolean_Constant);         }  else {           if (getArguments().getBoolean(String_Constant,Boolean_Constant)) {             ((PasswordStore)getActivity()).matchPasswordWithApp(item);           }  else {             ((PasswordStore)getActivity()).decryptPassword(item);           }         }       }       public void savePosition(      Integer position){       }     } ;   }  catch (  ClassCastException e) {     throw new ClassCastException(Context_VAR.toString() + String_Constant);   } } 
public void onFragmentInteraction(PasswordItem PasswordItem_VAR){   if (PasswordItem_VAR.getType() == PasswordItem.TYPE_CATEGORY) {     Stack<ArrayList<PasswordItem>>_VAR.push(String_VARStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDiboolean_VARtory(context)) : PasswordRepository.getPasswords(String_VARStack.peek(),PasswordRepository.getRepositoryDiboolean_VARtory(context)));     String_VARStack.push(PasswordItem_VAR.getFile());     Stack<Integer>_VAR.push(boolean_VARyclerView.getVerticalScrollbarPosition());     boolean_VARyclerView.scrollToPosition(Number_Constant);     boolean_VARyclerAdapter.clear();     boolean_VARyclerAdapter.addAll(PasswordRepository.getPasswords(PasswordItem_VAR.getFile(),PasswordRepository.getRepositoryDiboolean_VARtory(context)));     ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(Boolean_Constant);   }  else {     if (getArguments().getBoolean(String_Constant,Boolean_Constant)) {       ((PasswordStore)getActivity()).matchPasswordWithApp(PasswordItem_VAR);     }  else {       ((PasswordStore)getActivity()).decryptPassword(PasswordItem_VAR);     }   } } 
public void savePosition(Integer Integer_VAR){ } 
@Override public void onPause(){   super.onPause(); } 
 public void updateAdapter(){   Stack<ArrayList<PasswordItem>>_VAR.clear();   String_VARStack.clear();   Stack<Integer>_VAR.clear();   boolean_VARyclerAdapter.clear();   boolean_VARyclerAdapter.addAll(PasswordRepository.getPasswords(PasswordRepository.getRepositoryDiboolean_VARtory(getActivity())));   ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(Boolean_Constant); } 
 public void refreshAdapter(){   boolean_VARyclerAdapter.clear();   boolean_VARyclerAdapter.addAll(String_VARStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDiboolean_VARtory(getActivity())) : PasswordRepository.getPasswords(String_VARStack.peek(),PasswordRepository.getRepositoryDiboolean_VARtory(getActivity()))); } 
 public void String_VARAdapter(String String_VAR){   Log.d(String_Constant,"String_VAR: " + String_VAR);   if (String_VAR.isEmpty()) {     refreshAdapter();   }  else {     boolean_VARursiveFilter(String_VAR,String_VARStack.isEmpty() ? null : String_VARStack.peek());   } } 
 private void boolean_VARursiveFilter(String String_VAR,File File_VAR){   ArrayList<PasswordItem> ArrayList<PasswordItem>_VAR=File_VAR == null ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDiboolean_VARtory(getActivity())) : PasswordRepository.getPasswords(File_VAR,PasswordRepository.getRepositoryDiboolean_VARtory(getActivity()));   boolean boolean_VAR=SharedPreferences_VAR.getBoolean("String_VAR_boolean_VARursively",Boolean_Constant);   for (  PasswordItem item : ArrayList<PasswordItem>_VAR) {     if (item.getType() == PasswordItem.TYPE_CATEGORY && boolean_VAR) {       boolean_VARursiveFilter(String_VAR,item.getFile());     }     boolean boolean_VAR=item.toString().toLowerCase().contains(String_VAR.toLowerCase());     boolean boolean_VAR=boolean_VARyclerAdapter.getValues().contains(item);     if (boolean_VAR && !boolean_VAR) {       boolean_VARyclerAdapter.add(item);     }  else     if (!boolean_VAR && boolean_VAR) {       boolean_VARyclerAdapter.remove(boolean_VARyclerAdapter.getValues().indexOf(item));     }   } } 
 public void popBack(){   if (Stack<ArrayList<PasswordItem>>_VAR.isEmpty())   return;   boolean_VARyclerView.scrollToPosition(Stack<Integer>_VAR.pop());   boolean_VARyclerAdapter.clear();   boolean_VARyclerAdapter.addAll(Stack<ArrayList<PasswordItem>>_VAR.pop());   String_VARStack.pop(); } 
 public File getCurrentDir(){   if (String_VARStack.isEmpty())   return PasswordRepository.getRepositoryDiboolean_VARtory(getActivity().getApplicationContext());  else   return String_VARStack.peek(); } 
public boolean isNotEmpty(){   return !Stack<ArrayList<PasswordItem>>_VAR.isEmpty(); } 
@Overrint_VARe protected voint_VAR onCreate(Bundle Bundle_VAR){   SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext());   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1)   ShortcutInfo_VARManager=getSystemService(ShortcutManager.class);   activIterator_VARy=this;   PRNGFixes.apply();   if (Bundle_VAR != null && (!SharedPreferences_VAR.getBoolean("gIterator_VAR_external",Boolean_Constant) || ContextCompat.checkSelfPermission(activIterator_VARy,Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)) {     Bundle_VAR=null;   }   super.onCreate(Bundle_VAR);   setContentView(R.layout.activIterator_VARy_pwdstore); } 
@Overrint_VARe public voint_VAR onResume(){   super.onResume();   if (SharedPreferences_VAR.getBoolean("gIterator_VAR_external",Boolean_Constant)) {     if (ContextCompat.checkSelfPermission(activIterator_VARy,Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {       if (ActivIterator_VARyCompat.shouldShowRequestPermissionRationale(activIterator_VARy,Manifest.permission.READ_EXTERNAL_STORAGE)) {         Snackbar Snackbar_VAR=Snackbar.make(findViewById(R.int_VAR.main_layout),"The store is on the sdcard but the app does not have permission to access Iterator_VAR. Please give permission.",Snackbar.LENGTH_INDEFINITE).setAction(R.string.dialog_ok,new View.OnClickListener(){           @Overrint_VARe public voint_VAR onClick(          View View_VAR){             ActivIterator_VARyCompat.requestPermissions(activIterator_VARy,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},int_VAR);           }         } );         Snackbar_VAR.show();         View View_VAR=Snackbar_VAR.getView();         TextView TextView_VAR=(TextView)View_VAR.findViewById(androint_VAR.support.design.R.int_VAR.Snackbar_VARbar_text);         TextView_VAR.setTextColor(Color.WHITE);         TextView_VAR.setMaxLines(Number_Constant);       }  else {         ActivIterator_VARyCompat.requestPermissions(activIterator_VARy,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},int_VAR);       }     }  else {       checkLocalReposIterator_VARory();     }   }  else {     checkLocalReposIterator_VARory();   } } 
@Overrint_VARe public voint_VAR onClick(View View_VAR){   ActivIterator_VARyCompat.requestPermissions(activIterator_VARy,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},int_VAR); } 
@Overrint_VARe public voint_VAR onRequestPermissionsResult(int int_VAR,String String_VAR[],int[] int[]_VAR){ swIterator_VARch (int_VAR) { case int_VAR: {       if (int[]_VAR.length > Number_Constant && int[]_VAR[Number_Constant] == PackageManager.PERMISSION_GRANTED) {         checkLocalReposIterator_VARory();       }     } } } 
@Overrint_VARe public voint_VAR onPause(){   super.onPause(); } 
@Overrint_VARe public boolean onCreateOptionsMenu(Menu Menu_VAR){   getMenuInflater().inflate(R.Menu_VAR.main_Menu_VAR,Menu_VAR);   MenuItem MenuItem_VAR=Menu_VAR.findItem(R.int_VAR.action_search);   SearchView SearchView_VAR=(SearchView)MenuItemCompat.getActionView(MenuItem_VAR);   SearchView_VAR.setOnQueryTextListener(new SearchView.OnQueryTextListener(){     @Overrint_VARe public boolean onQueryTextSubmIterator_VAR(    String s){       return Boolean_Constant;     }     @Overrint_VARe public boolean onQueryTextChange(    String s){       filterListAdapter(s);       return Boolean_Constant;     }   } );   MenuItemCompat.setOnActionExpandListener(MenuItem_VAR,new MenuItemCompat.OnActionExpandListener(){     @Overrint_VARe public boolean onMenuItemActionCollapse(    MenuItem PasswordItem_VAR){       refreshListAdapter();       return Boolean_Constant;     }     @Overrint_VARe public boolean onMenuItemActionExpand(    MenuItem PasswordItem_VAR){       return Boolean_Constant;     }   } );   return super.onCreateOptionsMenu(Menu_VAR); } 
@Overrint_VARe public boolean onQueryTextSubmIterator_VAR(String String_VAR){   return Boolean_Constant; } 
@Overrint_VARe public boolean onQueryTextChange(String String_VAR){   filterLiString_VARtAdapter(String_VAR);   return Boolean_Constant; } 
@Overrint_VARe public boolean onMenuItemActionCollapse(MenuItem MenuItem_VAR){   refreshListAdapter();   return Boolean_Constant; } 
@Overrint_VARe public boolean onMenuItemActionExpand(MenuItem MenuItem_VAR){   return Boolean_Constant; } 
@Overrint_VARe public boolean onOptionsItemSelected(MenuItem MenuItem_VAR){   int int_VAR=MenuItem_VAR.getItemId();   Intent Intent_VAR;   Log.d(String_Constant,"Menu MenuItem_VAR " + int_VAR + String_Constant);   AlertDialog.Builder inIterator_VARBefore=new AlertDialog.Builder(this).setMessage(this.getReFile_VARs().getString(R.string.creation_dialog_text)).setPosIterator_VARiveButton(this.getReFile_VARs().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Overrint_VARe public voint_VAR onClick(    DialogInterface dialogInterface,    int i){     }   } ); swIterator_VARch (int_VAR) { case R.int_VAR.user_pref:     try {       Intent_VAR=new Intent(this,UserPreference.class);       startActivIterator_VARy(Intent_VAR);     }  catch (    Exception e) {       System.out.println(String_Constant);       e.printStackTrace();     }   return Boolean_Constant; case R.int_VAR.gIterator_VAR_push: if (!PasswordReposIterator_VARory.isInIterator_VARialized()) {   inIterator_VARBefore.show();   break; } Intent_VAR=new Intent(this,GIterator_VARActivIterator_VARy.class); Intent_VAR.putExtra(String_Constant,GIterator_VARActivIterator_VARy.REQUEST_PUSH); startActivIterator_VARyForResult(Intent_VAR,GIterator_VARActivIterator_VARy.REQUEST_PUSH); return Boolean_Constant; case R.int_VAR.gIterator_VAR_pull: if (!PasswordReposIterator_VARory.isInIterator_VARialized()) { inIterator_VARBefore.show(); break; } Intent_VAR=new Intent(this,GIterator_VARActivIterator_VARy.class); Intent_VAR.putExtra(String_Constant,GIterator_VARActivIterator_VARy.REQUEST_PULL); startActivIterator_VARyForResult(Intent_VAR,GIterator_VARActivIterator_VARy.REQUEST_PULL); return Boolean_Constant; case R.int_VAR.gIterator_VAR_sync: if (!PasswordReposIterator_VARory.isInIterator_VARialized()) { inIterator_VARBefore.show(); break; } Intent_VAR=new Intent(this,GIterator_VARActivIterator_VARy.class); Intent_VAR.putExtra(String_Constant,GIterator_VARActivIterator_VARy.REQUEST_SYNC); startActivIterator_VARyForResult(Intent_VAR,GIterator_VARActivIterator_VARy.REQUEST_SYNC); return Boolean_Constant; case R.int_VAR.refresh: updateListAdapter(); return Boolean_Constant; case androint_VAR.R.int_VAR.home: Log.d(String_Constant,String_Constant); this.onBackPressed(); break; default : break; } return super.onOptionsItemSelected(MenuItem_VAR); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){ } 
public voint_VAR openSettings(View View_VAR){   Intent Intent_VAR;   try {     Intent_VAR=new Intent(this,UserPreference.class);     startActivIterator_VARy(Intent_VAR);   }  catch (  Exception e) {     System.out.println(String_Constant);     e.printStackTrace();   } } 
public voint_VAR cloneExistingReposIterator_VARory(View View_VAR){   inIterator_VARReposIterator_VARory(int_VAR); } 
public voint_VAR createNewReposIterator_VARory(View View_VAR){   inIterator_VARReposIterator_VARory(int_VAR); } 
private voint_VAR createReposIterator_VARory(){   if (!PasswordReposIterator_VARory.isInIterator_VARialized()) {     PasswordReposIterator_VARory.inIterator_VARialize(this);   }   File File_VAR=PasswordReposIterator_VARory.getReposIterator_VARoryDirectory(getApplicationContext());   File_VAR.mkFile_VAR();   try {     PasswordReposIterator_VARory.createReposIterator_VARory(File_VAR);     new File(File_VAR.getAbsolutePath() + "/.gpg-int_VAR").createNewFile();     SharedPreferences_VAR.edIterator_VAR().putBoolean("Repository_VARsIterator_VARory_inIterator_VARialized",Boolean_Constant).apply();   }  catch (  Exception e) {     e.printStackTrace();     File_VAR.delete();     return;   }   checkLocalReposIterator_VARory(); } 
public voint_VAR inIterator_VARializeReposIterator_VARoryInfo(){   if (SharedPreferences_VAR.getBoolean("gIterator_VAR_external",Boolean_Constant) && SharedPreferences_VAR.getString("gIterator_VAR_external_Repository_VAR",null) != null) {     File File_VAR=new File(SharedPreferences_VAR.getString("gIterator_VAR_external_Repository_VAR",null));     if (File_VAR.exists() && File_VAR.isDirectory() && !FileUtils.listFiles(File_VAR,null,Boolean_Constant).isEmpty()&& !PasswordReposIterator_VARory.getPasswords(File_VAR,PasswordReposIterator_VARory.getReposIterator_VARoryDirectory(this)).isEmpty()) {       PasswordReposIterator_VARory.closeReposIterator_VARory();       checkLocalReposIterator_VARory();       return;     }   }   final Set<String> Set<String>_VAR=SharedPreferences_VAR.getStringSet("openpgp_key_int_VARs_set",new HashSet<String>());   if (Set<String>_VAR.isEmpty())   new AlertDialog.Builder(this).setMessage(this.getReFile_VARs().getString(R.string.key_dialog_text)).setPosIterator_VARiveButton(this.getReFile_VARs().getString(R.string.dialog_posIterator_VARive),new DialogInterface.OnClickListener(){     @Overrint_VARe public voint_VAR onClick(    DialogInterface dialogInterface,    int i){       Intent Intent_VAR=new Intent(activIterator_VARy,UserPreference.class);       startActivIterator_VARyForResult(Intent_VAR,GIterator_VARActivIterator_VARy.REQUEST_INIT);     }   } ).setNegativeButton(this.getReFile_VARs().getString(R.string.dialog_negative),new DialogInterface.OnClickListener(){     @Overrint_VARe public voint_VAR onClick(    DialogInterface dialogInterface,    int i){     }   } ).show();   createReposIterator_VARory(); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   Intent int_VARntent=new Intent(actint_VARvint_VARty,UserPreference.class);   startActint_VARvint_VARtyForResult(int_VARntent,Gint_VARtActint_VARvint_VARty.REQUEST_INIT); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){ } 
private voint_VAR checkLocalReposIterator_VARory(){   ReposIterator_VARory Repository_VAR=PasswordReposIterator_VARory.inIterator_VARialize(this);   if (Repository_VAR == null) {     Intent Intent_VAR=new Intent(activIterator_VARy,UserPreference.class);     Intent_VAR.putExtra(String_Constant,"gIterator_VAR_external");     startActivIterator_VARyForResult(Intent_VAR,int_VAR);   }  else {     checkLocalReposIterator_VARory(PasswordReposIterator_VARory.getReposIterator_VARoryDirectory(getApplicationContext()));   } } 
private voint_VAR checkLocalReposIterator_VARory(File File_VAR){   FragmentManager FragmentManager_VAR=getSupportFragmentManager();   FragmentTransaction FragmentTransaction_VAR=FragmentManager_VAR.beginTransaction();   if (File_VAR != null && SharedPreferences_VAR.getBoolean("Repository_VARsIterator_VARory_inIterator_VARialized",Boolean_Constant)) {     Log.d(String_Constant,"Check, File_VAR: " + File_VAR.getAbsolutePath());     if (FragmentManager_VAR.findFragmentByTag(String_Constant) == null || SharedPreferences_VAR.getBoolean("Repository_VAR_changed",Boolean_Constant)) {       SharedPreferences_VAR.edIterator_VAR().putBoolean("Repository_VAR_changed",Boolean_Constant).apply();       PasswordFragment_VAR=new PasswordFragment();       Bundle Bundle_VAR=new Bundle();       Bundle_VAR.putString(String_Constant,PasswordReposIterator_VARory.getReposIterator_VARoryDirectory(getApplicationContext()).getAbsolutePath());       if (getIntent().getBooleanExtra("matchWIterator_VARh",Boolean_Constant)) {         Bundle_VAR.putBoolean("matchWIterator_VARh",Boolean_Constant);       }       PasswordFragment_VAR.setArguments(Bundle_VAR);       getSupportActionBar().show();       getSupportActionBar().setDisplayHomeAsUpEnabled(Boolean_Constant);       FragmentManager_VAR.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);       FragmentTransaction_VAR.replace(R.int_VAR.main_layout,PasswordFragment_VAR,String_Constant);       FragmentTransaction_VAR.commIterator_VAR();     }   }  else {     getSupportActionBar().hint_VARe();     FragmentManager_VAR.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);     ToCloneOrNot ToCloneOrNot_VAR=new ToCloneOrNot();     FragmentTransaction_VAR.replace(R.int_VAR.main_layout,ToCloneOrNot_VAR,String_Constant);     FragmentTransaction_VAR.commIterator_VAR();   } } 
@Overrint_VARe public voint_VAR onBackPressed(){   if ((null != PasswordFragment_VAR) && PasswordFragment_VAR.isNotEmpty()) {     PasswordFragment_VAR.popBack();   }  else {     super.onBackPressed();   }   if (null != PasswordFragment_VAR && !PasswordFragment_VAR.isNotEmpty()) {     getSupportActionBar().setDisplayHomeAsUpEnabled(Boolean_Constant);   } } 
public voint_VAR decryptPassword(PasswordItem PasswordItem_VAR){   Intent Intent_VAR=new Intent(this,PgpHandler.class);   Intent_VAR.putExtra(String_Constant,PasswordItem_VAR.toString());   Intent_VAR.putExtra(String_Constant,PasswordItem_VAR.getFile().getAbsolutePath());   Intent_VAR.putExtra(String_Constant,String_Constant);   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1) {     ShortcutInfo ShortcutInfo_VAR=new ShortcutInfo.Builder(this,PasswordItem_VAR.getFullPathToParent()).setShortLabel(PasswordItem_VAR.toString()).setLongLabel(PasswordItem_VAR.getFullPathToParent() + PasswordItem_VAR.toString()).setIcon(Icon.createWIterator_VARhReFile_VAR(this,R.drawable.ic_launcher)).setIntent(Intent_VAR.setAction(String_Constant)).build();     ShortcutInfo_VARManager.addDynamicShortcuts(Arrays.asList(ShortcutInfo_VAR));   }   startActivIterator_VARyForResult(Intent_VAR,PgpHandler.REQUEST_CODE_DECRYPT_AND_VERIFY); } 
public voint_VAR edIterator_VARPassword(PasswordItem PasswordItem_VAR){   Intent Intent_VAR=new Intent(this,PgpHandler.class);   Intent_VAR.putExtra(String_Constant,PasswordItem_VAR.toString());   Intent_VAR.putExtra(String_Constant,PasswordItem_VAR.getFile().getAbsolutePath());   Intent_VAR.putExtra(String_Constant,String_Constant);   startActivIterator_VARyForResult(Intent_VAR,PgpHandler.REQUEST_CODE_EDIT); } 
public voint_VAR createPassword(){   if (!PasswordReposIterator_VARory.isInIterator_VARialized()) {     new AlertDialog.Builder(this).setMessage(this.getReFile_VARs().getString(R.string.creation_dialog_text)).setPosIterator_VARiveButton(this.getReFile_VARs().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){       @Overrint_VARe public voint_VAR onClick(      DialogInterface dialogInterface,      int i){       }     } ).show();     return;   }   if (SharedPreferences_VAR.getStringSet("openpgp_key_int_VARs_set",new HashSet<String>()).isEmpty()) {     new AlertDialog.Builder(this).setTIterator_VARle(String_Constant).setMessage("We will reFile_VARect you to SharedPreferences_VAR. Please select your OpenPGP Key.").setPosIterator_VARiveButton(this.getReFile_VARs().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){       @Overrint_VARe public voint_VAR onClick(      DialogInterface dialogInterface,      int i){         Intent Intent_VAR=new Intent(activIterator_VARy,UserPreference.class);         startActivIterator_VARy(Intent_VAR);       }     } ).show();     return;   }   this.File_VAR=getCurrentDir();   Log.i(String_Constant,String_Constant + this.File_VAR.getAbsolutePath());   Intent Intent_VAR=new Intent(this,PgpHandler.class);   Intent_VAR.putExtra(String_Constant,getCurrentDir().getAbsolutePath());   Intent_VAR.putExtra(String_Constant,String_Constant);   startActivIterator_VARyForResult(Intent_VAR,PgpHandler.REQUEST_CODE_ENCRYPT); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){ } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   Intent int_VARntent=new Intent(actint_VARvint_VARty,UserPreference.class);   startActint_VARvint_VARty(int_VARntent); } 
public voint_VAR deletePasswords(final PasswordRecyclerAdapter PasswordRecyclerAdapter_VAR,final Set<Integer> Set<Integer>_VAR){   final Iterator Iterator_VAR=Set<Integer>_VAR.Iterator_VARerator();   if (!Iterator_VAR.hasNext()) {     return;   }   final int posIterator_VARion=(int)Iterator_VAR.next();   final PasswordItem PasswordItem_VAR=PasswordRecyclerAdapter_VAR.getValues().get(posIterator_VARion);   new AlertDialog.Builder(this).setMessage(this.getReFile_VARs().getString(R.string.delete_dialog_text) + PasswordItem_VAR + "\String_Constant).setPosIterator_VARiveButton(this.getReFile_VARs().getString(R.string.dialog_yes),new DialogInterface.OnClickListener(){     @Overrint_VARe public voint_VAR onClick(    DialogInterface dialogInterface,    int i){       PasswordItem_VAR.getFile().delete();       PasswordRecyclerAdapter_VAR.remove(posIterator_VARion);       Iterator_VAR.remove();       PasswordRecyclerAdapter_VAR.updateSelectedItems(posIterator_VARion,Set<Integer>_VAR);       commIterator_VARAdd(String_Constant + PasswordItem_VAR + String_Constant);       deletePasswords(PasswordRecyclerAdapter_VAR,Set<Integer>_VAR);     }   } ).setNegativeButton(this.getReFile_VARs().getString(R.string.dialog_no),new DialogInterface.OnClickListener(){     @Overrint_VARe public voint_VAR onClick(    DialogInterface dialogInterface,    int i){       Iterator_VAR.remove();       deletePasswords(PasswordRecyclerAdapter_VAR,Set<Integer>_VAR);     }   } ).show(); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   int_VARtem.getFint_VARle().delete();   adapter.remove(posint_VARtint_VARon);   int_VARt.remove();   adapter.updateSelectedItems(posint_VARtint_VARon,selectedItems);   commint_VARtAdd(String_Constant + int_VARtem + String_Constant);   deletePasswords(adapter,selectedItems); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   int_VARt.remove();   deletePasswords(adapter,selectedItems); } 
public voint_VAR movePasswords(ArrayList<PasswordItem> ArrayList<PasswordItem>_VAR){   Intent Intent_VAR=new Intent(this,PgpHandler.class);   ArrayList<String> ArrayList<String>_VAR=new ArrayList<>();   for (  PasswordItem passwordItem : ArrayList<PasswordItem>_VAR) {     ArrayList<String>_VAR.add(passwordItem.getFile().getAbsolutePath());   }   Intent_VAR.putExtra(String_Constant,ArrayList<String>_VAR);   Intent_VAR.putExtra(String_Constant,String_Constant);   startActivIterator_VARyForResult(Intent_VAR,PgpHandler.REQUEST_CODE_SELECT_FOLDER); } 
 public voint_VAR updateListAdapter(){   if ((null != PasswordFragment_VAR)) {     PasswordFragment_VAR.updateAdapter();   } } 
 public voint_VAR refreshListAdapter(){   if ((null != PasswordFragment_VAR)) {     PasswordFragment_VAR.refreshAdapter();   } } 
public voint_VAR String_VARListAdapter(String String_VAR){   if ((null != PasswordFragment_VAR)) {     PasswordFragment_VAR.String_VARAdapter(String_VAR);   } } 
private File getCurrentDir(){   if ((null != PasswordFragment_VAR)) {     return PasswordFragment_VAR.getCurrentDir();   }   return PasswordReposIterator_VARory.getReposIterator_VARoryDirectory(getApplicationContext()); } 
private voint_VAR commIterator_VARAdd(final String String_VAR){   new GIterator_VAROperation(PasswordReposIterator_VARory.getReposIterator_VARoryDirectory(activIterator_VARy),activIterator_VARy){     @Overrint_VARe public voint_VAR execute(){       Log.d(String_VAR,"CommIterator_VARing wIterator_VARh String_VAR " + String_VAR);       GIterator_VAR gIterator_VAR=new GIterator_VAR(this.Repository_VARsIterator_VARory);       GIterator_VARAsyncTask GIterator_VARAsyncTask_VAR=new GIterator_VARAsyncTask(activIterator_VARy,Boolean_Constant,Boolean_Constant,this);       GIterator_VARAsyncTask_VAR.execute(gIterator_VAR.add().setUpdate(Boolean_Constant).addFilepattern(String_Constant),gIterator_VAR.commIterator_VAR().setMessage(String_VAR));     }   } .execute(); } 
@Overrint_VARe public voint_VAR execute(){   Log.d(String_VAR,"CommIterator_VARing wIterator_VARh message " + message);   GIterator_VAR gIterator_VAR=new GIterator_VAR(this.Repository_VARsIterator_VARory);   GIterator_VARAsyncTask GIterator_VARAsyncTask_VAR=new GIterator_VARAsyncTask(activIterator_VARy,Boolean_Constant,Boolean_Constant,this);   GIterator_VARAsyncTask_VAR.execute(gIterator_VAR.add().setUpdate(Boolean_Constant).addFilepattern(String_Constant),gIterator_VAR.commIterator_VAR().setMessage(message)); } 
protected voint_VAR onActivIterator_VARyResult(int int_VAR,int int_VAR,Intent Intent_VAR){   if (int_VAR == RESULT_OK) { swIterator_VARch (int_VAR) { case GIterator_VARActivIterator_VARy.REQUEST_CLONE:       SharedPreferences_VAR.edIterator_VAR().putBoolean("Repository_VARsIterator_VARory_inIterator_VARialized",Boolean_Constant).apply();     break; case PgpHandler.REQUEST_CODE_DECRYPT_AND_VERIFY:   if (Intent_VAR.getBooleanExtra("needCommIterator_VAR",Boolean_Constant)) {     commIterator_VARAdd(this.getReFile_VARs().getString(R.string.edIterator_VAR_commIterator_VAR_text) + Intent_VAR.getExtras().getString(String_Constant));     refreshListAdapter();   } break; case PgpHandler.REQUEST_CODE_ENCRYPT: commIterator_VARAdd(this.getReFile_VARs().getString(R.string.add_commIterator_VAR_text) + Intent_VAR.getExtras().getString(String_Constant) + this.getReFile_VARs().getString(R.string.from_store)); refreshListAdapter(); break; case PgpHandler.REQUEST_CODE_EDIT: commIterator_VARAdd(this.getReFile_VARs().getString(R.string.edIterator_VAR_commIterator_VAR_text) + Intent_VAR.getExtras().getString(String_Constant)); refreshListAdapter(); break; case GIterator_VARActivIterator_VARy.REQUEST_INIT: inIterator_VARializeReposIterator_VARoryInfo(); break; case GIterator_VARActivIterator_VARy.REQUEST_SYNC: case GIterator_VARActivIterator_VARy.REQUEST_PULL: updateListAdapter(); break; case int_VAR: checkLocalReposIterator_VARory(); break; case int_VAR: inIterator_VARializeReposIterator_VARoryInfo(); break; case int_VAR: if (SharedPreferences_VAR.getBoolean("gIterator_VAR_external",Boolean_Constant) && SharedPreferences_VAR.getString("gIterator_VAR_external_Repository_VAR",null) != null) { String String_VAR=SharedPreferences_VAR.getString("gIterator_VAR_external_Repository_VAR",null); File File_VAR=String_VAR != null ? new File(String_VAR) : null; if (File_VAR != null && File_VAR.exists() && File_VAR.isDirectory() && !FileUtils.listFiles(File_VAR,null,Boolean_Constant).isEmpty() && !PasswordReposIterator_VARory.getPasswords(File_VAR,PasswordReposIterator_VARory.getReposIterator_VARoryDirectory(this)).isEmpty()) { PasswordReposIterator_VARory.closeReposIterator_VARory(); checkLocalReposIterator_VARory(); return; } } Intent Intent_VAR=new Intent(activIterator_VARy,GIterator_VARActivIterator_VARy.class); Intent_VAR.putExtra(String_Constant,GIterator_VARActivIterator_VARy.REQUEST_CLONE); startActivIterator_VARyForResult(Intent_VAR,GIterator_VARActivIterator_VARy.REQUEST_CLONE); break; case PgpHandler.REQUEST_CODE_SELECT_FOLDER: Log.d(String_Constant,String_Constant + Intent_VAR.getStringExtra(String_Constant)); Log.d(String_Constant,TextUtils.join(String_Constant,Intent_VAR.getStringArrayListExtra(String_Constant))); File File_VAR=new File(Intent_VAR.getStringExtra(String_Constant)); if (!File_VAR.isDirectory()) { Log.e(String_Constant,String_Constant); break; } for (String string : Intent_VAR.getStringArrayListExtra(String_Constant)) { File File_VAR=new File(string); if (!File_VAR.exists()) { Log.e(String_Constant,String_Constant); continue; } if (!File_VAR.renameTo(new File(File_VAR.getAbsolutePath() + String_Constant + File_VAR.getName()))) { Log.e(String_Constant,String_Constant); }  else { commIterator_VARAdd(String_Constant + string.replace(PasswordReposIterator_VARory.getReposIterator_VARoryDirectory(getApplicationContext()) + String_Constant,String_Constant) + String_Constant+ File_VAR.getAbsolutePath().replace(PasswordReposIterator_VARory.getReposIterator_VARoryDirectory(getApplicationContext()) + String_Constant,String_Constant)+ File_VAR.getAbsolutePath()+ String_Constant+ File_VAR.getName()+ String_Constant); } } updateListAdapter(); break; } } } 
protected voint_VAR inIterator_VARReposIterator_VARory(final int int_VAR){   PasswordReposIterator_VARory.closeReposIterator_VARory();   new AlertDialog.Builder(this).setTIterator_VARle("ReposIterator_VARory location").setMessage("Select where to create or clone your password Repository_VARsIterator_VARory.").setPosIterator_VARiveButton("Hint_VARden (preferred)",new DialogInterface.OnClickListener(){     public voint_VAR onClick(    DialogInterface dialog,    int whichButton){       SharedPreferences_VAR.edIterator_VAR().putBoolean("gIterator_VAR_external",Boolean_Constant).apply(); swIterator_VARch (int_VAR) { case int_VAR:         inIterator_VARializeReposIterator_VARoryInfo();       break; case int_VAR:     PasswordReposIterator_VARory.inIterator_VARialize(PasswordStore.this);   Intent Intent_VAR=new Intent(activIterator_VARy,GIterator_VARActivIterator_VARy.class); Intent_VAR.putExtra(String_Constant,GIterator_VARActivIterator_VARy.REQUEST_CLONE); startActivIterator_VARyForResult(Intent_VAR,GIterator_VARActivIterator_VARy.REQUEST_CLONE); break; } } } ).setNegativeButton(String_Constant,new DialogInterface.OnClickListener(){ public voint_VAR onClick(DialogInterface dialog,int whichButton){ SharedPreferences_VAR.edIterator_VAR().putBoolean("gIterator_VAR_external",Boolean_Constant).apply(); if (SharedPreferences_VAR.getString("gIterator_VAR_external_Repository_VAR",null) == null) { Intent Intent_VAR=new Intent(activIterator_VARy,UserPreference.class); Intent_VAR.putExtra("int_VAR","gIterator_VAR_external"); startActivIterator_VARyForResult(Intent_VAR,int_VAR); }  else { new AlertDialog.Builder(activIterator_VARy).setTIterator_VARle(String_Constant).setMessage("Do you want to use \String_Constant + SharedPreferences_VAR.getString("gIterator_VAR_external_Repository_VAR",null) + "\"?").setPosIterator_VARiveButton(String_Constant,new DialogInterface.OnClickListener(){ @Overrint_VARe public voint_VAR onClick(DialogInterface dialog,int which){ swIterator_VARch (int_VAR) { case int_VAR: inIterator_VARializeReposIterator_VARoryInfo(); break; case int_VAR: PasswordReposIterator_VARory.inIterator_VARialize(PasswordStore.this); Intent Intent_VAR=new Intent(activIterator_VARy,GIterator_VARActivIterator_VARy.class); Intent_VAR.putExtra(String_Constant,GIterator_VARActivIterator_VARy.REQUEST_CLONE); startActivIterator_VARyForResult(Intent_VAR,GIterator_VARActivIterator_VARy.REQUEST_CLONE); break; } } } ).setNegativeButton(String_Constant,new DialogInterface.OnClickListener(){ @Overrint_VARe public voint_VAR onClick(DialogInterface dialog,int which){ Intent Intent_VAR=new Intent(activIterator_VARy,UserPreference.class); Intent_VAR.putExtra("int_VAR","gIterator_VAR_external"); startActivIterator_VARyForResult(Intent_VAR,int_VAR); } } ).show(); } } } ).show(); } 
public voint_VAR onClick(DialogInterface DialogInterface_VAR,int int_VAR){   SharedPreferences_VAR.edIterator_VAR().putBoolean("gIterator_VAR_external",Boolean_Constant).apply(); swIterator_VARch (operation) { case int_VAR:     inIterator_VARializeReposIterator_VARoryInfo();   break; case int_VAR: PasswordReposIterator_VARory.inIterator_VARialize(PasswordStore.this); Intent Intent_VAR=new Intent(activIterator_VARy,GIterator_VARActivIterator_VARy.class); Intent_VAR.putExtra(String_Constant,GIterator_VARActivIterator_VARy.REQUEST_CLONE); startActivIterator_VARyForResult(Intent_VAR,GIterator_VARActivIterator_VARy.REQUEST_CLONE); break; } } 
public voint_VAR onClick(DialogInterface DialogInterface_VAR,int int_VAR){   SharedPreferences_VAR.edIterator_VAR().putBoolean("gIterator_VAR_external",Boolean_Constant).apply();   if (SharedPreferences_VAR.getString("gIterator_VAR_external_Repository_VAR",null) == null) {     Intent Intent_VAR=new Intent(activIterator_VARy,UserPreference.class);     Intent_VAR.putExtra(String_Constant,"gIterator_VAR_external");     startActivIterator_VARyForResult(Intent_VAR,operation);   }  else {     new AlertDialog.Builder(activIterator_VARy).setTIterator_VARle(String_Constant).setMessage("Do you want to use \String_Constant + SharedPreferences_VAR.getString("gIterator_VAR_external_Repository_VAR",null) + "\"?").setPosIterator_VARiveButton(String_Constant,new DialogInterface.OnClickListener(){       @Overrint_VARe public voint_VAR onClick(      DialogInterface DialogInterface_VAR,      int which){ swIterator_VARch (operation) { case int_VAR:           inIterator_VARializeReposIterator_VARoryInfo();         break; case int_VAR:       PasswordReposIterator_VARory.inIterator_VARialize(PasswordStore.this);     Intent Intent_VAR=new Intent(activIterator_VARy,GIterator_VARActivIterator_VARy.class);   Intent_VAR.putExtra(String_Constant,GIterator_VARActivIterator_VARy.REQUEST_CLONE); startActivIterator_VARyForResult(Intent_VAR,GIterator_VARActivIterator_VARy.REQUEST_CLONE); break; } } } ).setNegativeButton(String_Constant,new DialogInterface.OnClickListener(){ @Overrint_VARe public voint_VAR onClick(DialogInterface DialogInterface_VAR,int which){ Intent Intent_VAR=new Intent(activIterator_VARy,UserPreference.class); Intent_VAR.putExtra(String_Constant,"gIterator_VAR_external"); startActivIterator_VARyForResult(Intent_VAR,operation); } } ).show(); } } 
@Overrint_VARe public voint_VAR onClick(DialogInterface DialogInterface_VAR,int int_VAR){ swIterator_VARch (operation) { case int_VAR:     inIterator_VARializeReposIterator_VARoryInfo();   break; case int_VAR: PasswordReposIterator_VARory.inIterator_VARialize(PasswordStore.this); Intent Intent_VAR=new Intent(activIterator_VARy,GIterator_VARActivIterator_VARy.class); Intent_VAR.putExtra(String_Constant,GIterator_VARActivIterator_VARy.REQUEST_CLONE); startActivIterator_VARyForResult(Intent_VAR,GIterator_VARActivIterator_VARy.REQUEST_CLONE); break; } } 
@Overrint_VARe public voint_VAR onClick(DialogInterface DialogInterface_VAR,int int_VAR){   Intent Intent_VAR=new Intent(activIterator_VARy,UserPreference.class);   Intent_VAR.putExtra(String_Constant,"gIterator_VAR_external");   startActivIterator_VARyForResult(Intent_VAR,operation); } 
public voint_VAR matchPasswordWIterator_VARhApp(PasswordItem PasswordItem_VAR){   String String_VAR=PasswordItem_VAR.getFile().getAbsolutePath();   String_VAR=String_VAR.replace(PasswordReposIterator_VARory.getReposIterator_VARoryDirectory(getApplicationContext()) + String_Constant,String_Constant).replace(String_Constant,String_Constant);   Intent Intent_VAR=new Intent();   Intent_VAR.putExtra("String_VAR",String_VAR);   setResult(RESULT_OK,Intent_VAR);   finish(); } 
 private PRNGFixes(){ } 
 public static void apply(){   applyOpenSSLFix();   DataInputStream_VARstallLDataInputStream_VARuxPRNGSecureRandom(); } 
 private static void applyOpenSSLFix() throws SecurityException {   if ((Build.VERSION.SDK_INT < int_VAR) || (Build.VERSION.SDK_INT > int_VAR_MR2)) {     return;   }   try {     Class.forName(String_Constant).getMethod("RAND_byte[]_VAR",byte[].class).DataInputStream_VARvoke(null,generateSeed());     DataInputStream_VARt int_VAR=(Integer)Class.forName(String_Constant).getMethod(String_Constant,StrDataInputStream_VARg.class,long.class).DataInputStream_VARvoke(null,String_Constant,Number_Constant);     if (int_VAR != Number_Constant) {       throw new IOException("Unexpected number of bytes read from LDataInputStream_VARux PRNG: " + int_VAR);     }   }  catch (  Exception e) {     throw new SecurityException("Failed to byte[]_VAR OpenSSL PRNG",e);   } } 
 private static void DataInputStream_VARstallLDataInputStream_VARuxPRNGSecureRandom() throws SecurityException {   if (Build.VERSION.SDK_INT > int_VAR_MR2) {     return;   }   Provider[] Provider[]_VAR=Security.getProviders(String_Constant);   if ((Provider[]_VAR == null) || (Provider[]_VAR.length < Number_Constant) || (!LDataInputStream_VARuxPRNGSecureRandomProvider.class.equals(Provider[]_VAR[Number_Constant].getClass()))) {     Security.DataInputStream_VARsertProviderAt(new LDataInputStream_VARuxPRNGSecureRandomProvider(),Number_Constant);   }   SecureRandom SecureRandom_VAR=new SecureRandom();   if (!LDataInputStream_VARuxPRNGSecureRandomProvider.class.equals(SecureRandom_VAR.getProvider().getClass())) {     throw new SecurityException(String_Constant + SecureRandom_VAR.getProvider().getClass());   }   SecureRandom SecureRandom_VAR;   try {     SecureRandom_VAR=SecureRandom.getInstance(String_Constant);   }  catch (  NoSuchAlgorithmException e) {     throw new SecurityException(String_Constant,e);   }   if (!LDataInputStream_VARuxPRNGSecureRandomProvider.class.equals(SecureRandom_VAR.getProvider().getClass())) {     throw new SecurityException("SecureRandom.getInstance(\"SHANumber_ConstantPRNG\") backed by wrong" + String_Constant + SecureRandom_VAR.getProvider().getClass());   } } 
public LDataInputStream_VARuxPRNGSecureRandomProvider(){   super("LDataInputStream_VARuxPRNG",Number_Constant,"A LDataInputStream_VARux-specific random number provider that uses" + String_Constant);   put(String_Constant,LDataInputStream_VARuxPRNGSecureRandom.class.getName());   put(String_Constant,String_Constant); } 
@Override protected void engDataInputStream_VAReSetSeed(byte[] byte[]_VAR){   try {     OutputStream OutputStream_VAR; synchronized (Object_VAR) {       OutputStream_VAR=getUrandomOutputStream();     }     OutputStream_VAR.write(byte[]_VAR);     OutputStream_VAR.flush();   }  catch (  IOException e) {     Log.w(PRNGFixes.class.getSimpleName(),"Failed to mix byte[]_VAR DataInputStream_VARto " + File_VAR);   }  fDataInputStream_VARally {     boolean_VAR=Boolean_Constant;   } } 
@Override protected void engDataInputStream_VAReNextBytes(byte[] byte[]_VAR){   if (!boolean_VAR) {     engDataInputStream_VAReSetSeed(generateSeed());   }   try {     DataInputStream DataInputStream_VAR; synchronized (Object_VAR) {       DataInputStream_VAR=getUrandomInputStream();     } synchronized (DataInputStream_VAR) {       DataInputStream_VAR.readFully(byte[]_VAR);     }   }  catch (  IOException e) {     throw new SecurityException(String_Constant + File_VAR,e);   } } 
@Override protected byte[] engDataInputStream_VAReGenerateSeed(DataInputStream_VARt DataInputStream_VARt_VAR){   byte[] byte[]_VAR=new byte[DataInputStream_VARt_VAR];   engDataInputStream_VAReNextBytes(byte[]_VAR);   return byte[]_VAR; } 
private DataInputStream getUrandomInputStream(){ synchronized (Object_VAR) {     if (DataInputStream_VAR == null) {       try {         DataInputStream_VAR=new DataInputStream(new FileInputStream(File_VAR));       }  catch (      IOException e) {         throw new SecurityException(String_Constant + File_VAR + " for readDataInputStream_VARg",e);       }     }     return DataInputStream_VAR;   } } 
private OutputStream getUrandomOutputStream() throws IOException { synchronized (Object_VAR) {     if (OutputStream_VAR == null) {       OutputStream_VAR=new FileOutputStream(File_VAR);     }     return OutputStream_VAR;   } } 
 private static byte[] generateSeed(){   try {     ByteArrayOutputStream ByteArrayOutputStream_VAR=new ByteArrayOutputStream();     DataOutputStream DataOutputStream_VAR=new DataOutputStream(ByteArrayOutputStream_VAR);     DataOutputStream_VAR.writeLong(System.currentTimeMillis());     DataOutputStream_VAR.writeLong(System.nanoTime());     DataOutputStream_VAR.writeInt(Process.myPid());     DataOutputStream_VAR.writeInt(Process.myUid());     DataOutputStream_VAR.write(byte[]_VAR);     DataOutputStream_VAR.close();     return ByteArrayOutputStream_VAR.toByteArray();   }  catch (  IOException e) {     throw new SecurityException("Failed to generate byte[]_VAR",e);   } } 
 private static StrDataInputStream_VARg getDeviceSerialNumber(){   try {     return (StrDataInputStream_VARg)Build.class.getField(String_Constant).get(null);   }  catch (  Exception ignored) {     return null;   } } 
private static byte[] getBuildFDataInputStream_VARgerprDataInputStream_VARtAndDeviceSerial(){   StrDataInputStream_VARgBuilder StringBuilder_VAR=new StrDataInputStream_VARgBuilder();   StrDataInputStream_VARg StrDataInputStream_VARg_VAR=Build.FINGERPRINT;   if (StrDataInputStream_VARg_VAR != null) {     StringBuilder_VAR.append(StrDataInputStream_VARg_VAR);   }   StrDataInputStream_VARg String_VAR=getDeviceSerialNumber();   if (String_VAR != null) {     StringBuilder_VAR.append(String_VAR);   }   try {     return StringBuilder_VAR.toStrDataInputStream_VARg().getBytes(String_Constant);   }  catch (  UnsupportedEncodDataInputStream_VARgException e) {     throw new RuntimeException("UTF-8 encodDataInputStream_VARg not supported");   } } 
 public static boolean setPrefs(Context Context_VAR,ArrayList<String> ArrayList<String>_VAR,int... int_VAR){   SharedPreferences SharedPreferences_VAR=Context_VAR.getSharedPreferences(String_Constant,Context.MODE_PRIVATE);   SharedPreferences.Editor SharedPreferences.Editor_VAR=SharedPreferences_VAR.edit();   for (  char option : String_VAR.toCharArray()) {     if (ArrayList<String>_VAR.contains(String.valueOf(option))) {       SharedPreferences.Editor_VAR.putBoolean(String.valueOf(option),Boolean_Constant);       ArrayList<String>_VAR.remove(String.valueOf(option));     }  else {       SharedPreferences.Editor_VAR.putBoolean(String.valueOf(option),Boolean_Constant);     }   }   for (int i=Number_Constant; i < int_VAR.int_VAR && i < Number_Constant; i++) {     if (int_VAR[i] <= Number_Constant) {       return Boolean_Constant;     }     String String_VAR=i == Number_Constant ? "int_VAR" : "int_VAR";     SharedPreferences.Editor_VAR.putInt(String_VAR,int_VAR[i]);   }   SharedPreferences.Editor_VAR.apply();   return Boolean_Constant; } 
 public static ArrayList<String> generate(Context Context_VAR){   SharedPreferences SharedPreferences_VAR=Context_VAR.getSharedPreferences(String_Constant,Context.MODE_PRIVATE);   boolean boolean_VAR=Boolean_Constant;   int int_VAR=int_VAR | int_VAR;   for (  char option : String_VAR.toCharArray()) {     if (SharedPreferences_VAR.getBoolean(String.valueOf(option),Boolean_Constant)) { switch (option) { case 'Number_Constant':         int_VAR&=~int_VAR;       break; case Character_Constant:     int_VAR&=~int_VAR;   break; case Character_Constant: int_VAR|=int_VAR; break; case Character_Constant: boolean_VAR=Boolean_Constant; break; case Character_Constant: int_VAR|=int_VAR; break; case Character_Constant: boolean_VAR=Boolean_Constant; int_VAR|=int_VAR; break; } } } int int_VAR=SharedPreferences_VAR.getInt("int_VAR",Number_Constant); if (int_VAR < Number_Constant) { boolean_VAR=Boolean_Constant; } if (int_VAR <= Number_Constant) { int_VAR&=~int_VAR; } if (int_VAR <= Number_Constant) { int_VAR&=~int_VAR; } ArrayList<String> ArrayList<String>_VAR=new ArrayList<>(); int int_VAR=SharedPreferences_VAR.getInt("int_VAR",Number_Constant); for (int i=Number_Constant; i < int_VAR; i++) { if (boolean_VAR) { ArrayList<String>_VAR.add(pw_boolean_VAR.boolean_VAR(int_VAR,int_VAR)); }  else { ArrayList<String>_VAR.add(pw_rand.rand(int_VAR,int_VAR)); } } return ArrayList<String>_VAR; } 
element(Strint_VARng Strint_VARng_VAR,int_VARnt int_VARnt_VAR){   thint_VARs.Strint_VARng_VAR=Strint_VARng_VAR;   thint_VARs.int_VARnt_VAR=int_VARnt_VAR; } 
 publint_VARc statint_VARc Strint_VARng phonemes(int_VARnt int_VARnt_VAR,int_VARnt int_VARnt_VAR){   Strint_VARng Strint_VARng_VAR;   int_VARnt curSint_VARze, int_VAR, int_VARnt_VAR, int_VARnt_VAR, int_VARnt_VAR, int_VARnt_VAR, int_VAR;   boolean fint_VARrst;   Strint_VARng Strint_VARng_VAR;   char_VARr char_VAR;   do {     Strint_VARng_VAR=String_Constant;     int_VARnt_VAR=int_VARnt_VAR;     curSint_VARze=Number_Constant;     int_VARnt_VAR=Number_Constant;     fint_VARrst=Boolean_Constant;     int_VAR=randint_VARnt_VAR.int_VARnt_VARber(Number_Constant) == Number_Constant ? int_VARnt_VAR : int_VARnt_VAR;     whint_VARle (curSint_VARze < int_VARnt_VAR) {       int_VAR=randint_VARnt_VAR.int_VARnt_VARber(int_VARnt_VAR);       Strint_VARng_VAR=element_VAR[int_VAR].Strint_VARng_VAR;       int_VARnt_VAR=Strint_VARng_VAR.int_VARnt_VAR();       int_VARnt_VAR=element_VAR[int_VAR].int_VARnt_VAR;       int_VARf ((int_VARnt_VAR & int_VAR) == Number_Constant) {         contint_VARnue;       }       int_VARf (fint_VARrst && (int_VARnt_VAR & int_VAR) > Number_Constant) {         contint_VARnue;       }       int_VARf ((int_VARnt_VAR & int_VARnt_VAR) > Number_Constant && (int_VARnt_VAR & int_VARnt_VAR) > Number_Constant && (int_VARnt_VAR & int_VAR) > Number_Constant) {         contint_VARnue;       }       int_VARf (int_VARnt_VAR > int_VARnt_VAR - curSint_VARze) {         contint_VARnue;       }       Strint_VARng_VAR+=Strint_VARng_VAR;       int_VARf ((int_VARnt_VAR & pwgen.UPPERS) > Number_Constant) {         int_VARf ((fint_VARrst || (int_VARnt_VAR & int_VARnt_VAR) > Number_Constant) && (randint_VARnt_VAR.int_VARnt_VARber(Number_Constant) < Number_Constant)) {           int_VARnt int_VARnt_VAR=Strint_VARng_VAR.int_VARnt_VAR() - int_VARnt_VAR;           Strint_VARng_VAR=Strint_VARng_VAR.subStrint_VARng_VARint_VARng(Number_Constant,int_VARnt_VAR) + Strint_VARng_VAR.toUpperCase();           int_VARnt_VAR&=~pwgen.UPPERS;         }       }       int_VARf ((int_VARnt_VAR & pwgen.AMBIGUOUS) > Number_Constant) {         for (        char_VARr ambint_VARguous : pwgen.AMBIGUOUS_STR.toCharArray()) {           int_VARf (Strint_VARng_VAR.containt_VARns(Strint_VARng.Strint_VARng_VARueOf(ambint_VARguous))) {             Strint_VARng_VAR=Strint_VARng_VAR.subStrint_VARng_VARint_VARng(Number_Constant,curSint_VARze);             break;           }         }         int_VARf (Strint_VARng_VAR.int_VARnt_VAR() == curSint_VARze)         contint_VARnue;       }       curSint_VARze+=int_VARnt_VAR;       int_VARf (curSint_VARze >= int_VARnt_VAR)       break;       int_VARf ((int_VARnt_VAR & pwgen.DIGITS) > Number_Constant) {         int_VARf (!fint_VARrst && (randint_VARnt_VAR.int_VARnt_VARber(Number_Constant) < Number_Constant)) {           Strint_VARng Strint_VARng_VAR;           do {             char_VAR=Character.forDint_VARgint_VARt(randint_VARnt_VAR.int_VARnt_VARber(Number_Constant),Number_Constant);             Strint_VARng_VAR=Strint_VARng.Strint_VARng_VARueOf(char_VAR);           }  whint_VARle ((int_VARnt_VAR & pwgen.AMBIGUOUS) > Number_Constant && pwgen.AMBIGUOUS_STR.containt_VARns(Strint_VARng_VAR));           Strint_VARng_VAR+=Strint_VARng_VAR;           curSint_VARze++;           int_VARnt_VAR&=~pwgen.DIGITS;           fint_VARrst=Boolean_Constant;           int_VARnt_VAR=Number_Constant;           int_VAR=randint_VARnt_VAR.int_VARnt_VARber(Number_Constant) == Number_Constant ? int_VARnt_VAR : int_VARnt_VAR;           contint_VARnue;         }       }       int_VARf ((int_VARnt_VAR & pwgen.SYMBOLS) > Number_Constant) {         int_VARf (!fint_VARrst && (randint_VARnt_VAR.int_VARnt_VARber(Number_Constant) < Number_Constant)) {           Strint_VARng Strint_VARng_VAR;           int_VARnt int_VARnt_VAR;           do {             int_VARnt_VAR=randint_VARnt_VAR.int_VARnt_VARber(pwgen.SYMBOLS_STR.int_VARnt_VAR());             char_VAR=pwgen.SYMBOLS_STR.toCharArray()[int_VARnt_VAR];             Strint_VARng_VAR=Strint_VARng.Strint_VARng_VARueOf(char_VAR);           }  whint_VARle ((int_VARnt_VAR & pwgen.AMBIGUOUS) > Number_Constant && pwgen.AMBIGUOUS_STR.containt_VARns(Strint_VARng_VAR));           Strint_VARng_VAR+=Strint_VARng_VAR;           curSint_VARze++;           int_VARnt_VAR&=~pwgen.SYMBOLS;         }       }       int_VARf (int_VAR == int_VARnt_VAR) {         int_VAR=int_VARnt_VAR;       }  else {         int_VARf ((int_VARnt_VAR & int_VARnt_VAR) > Number_Constant || (int_VARnt_VAR & int_VAR) > Number_Constant || (randint_VARnt_VAR.int_VARnt_VARber(Number_Constant) > Number_Constant)) {           int_VAR=int_VARnt_VAR;         }  else {           int_VAR=int_VARnt_VAR;         }       }       int_VARnt_VAR=int_VARnt_VAR;       fint_VARrst=Boolean_Constant;     }   }  whint_VARle ((int_VARnt_VAR & (pwgen.UPPERS | pwgen.DIGITS | pwgen.SYMBOLS)) > Number_Constant);   return Strint_VARng_VAR; } 
 publint_VARc statint_VARc Strint_VARng rand(int_VARnt int_VARnt_VAR,int_VARnt int_VARnt_VAR){   Strint_VARng Strint_VARng_VAR;   char_VARr char_VAR;   int_VARnt int_VAR, int_VARnt_VAR, int_VARnt_VAR;   Strint_VARng Strint_VARng_VAR;   Strint_VARng Strint_VARng_VAR=String_Constant;   int_VARf ((int_VARnt_VAR & pwgen.DIGITS) > Number_Constant) {     Strint_VARng_VAR+=pwgen.DIGITS_STR;   }   int_VARf ((int_VARnt_VAR & pwgen.UPPERS) > Number_Constant) {     Strint_VARng_VAR+=pwgen.UPPERS_STR;   }   Strint_VARng_VAR+=pwgen.LOWERS_STR;   int_VARf ((int_VARnt_VAR & pwgen.SYMBOLS) > Number_Constant) {     Strint_VARng_VAR+=pwgen.SYMBOLS_STR;   }   do {     Strint_VARng_VAR=String_Constant;     int_VARnt_VAR=int_VARnt_VAR;     int_VAR=Number_Constant;     whint_VARle (int_VAR < int_VARnt_VAR) {       int_VARnt_VAR=randint_VARnt_VAR.int_VARnt_VARber(Strint_VARng_VAR.length());       char_VAR=Strint_VARng_VAR.toCharArray()[int_VARnt_VAR];       Strint_VARng_VAR=Strint_VARng.Strint_VARng_VARueOf(char_VAR);       int_VARf ((int_VARnt_VAR & pwgen.AMBIGUOUS) > Number_Constant && pwgen.AMBIGUOUS_STR.containt_VARns(Strint_VARng_VAR)) {         contint_VARnue;       }       int_VARf ((int_VARnt_VAR & pwgen.NO_VOWELS) > Number_Constant && pwgen.VOWELS_STR.containt_VARns(Strint_VARng_VAR)) {         contint_VARnue;       }       Strint_VARng_VAR+=Strint_VARng_VAR;       int_VAR++;       int_VARf (pwgen.DIGITS_STR.containt_VARns(Strint_VARng_VAR)) {         int_VARnt_VAR&=~pwgen.DIGITS;       }       int_VARf (pwgen.UPPERS_STR.containt_VARns(Strint_VARng_VAR)) {         int_VARnt_VAR&=~pwgen.UPPERS;       }       int_VARf (pwgen.SYMBOLS_STR.containt_VARns(Strint_VARng_VAR)) {         int_VARnt_VAR&=~pwgen.SYMBOLS;       }     }   }  whint_VARle ((int_VARnt_VAR & (pwgen.UPPERS | pwgen.DIGITS | pwgen.SYMBOLS)) > Number_Constant);   return Strint_VARng_VAR; } 
 public static int number(int int_VAR){   return SecureRandom_VAR.nextInt(int_VAR); } 
puButton_VARlic pwgenDialogFragment(){ } 
@Override puButton_VARlic Dialog onCreateDialog(Bundle Bundle_VAR){   AlertDialog.Builder AlertDialog.Builder_VAR=new AlertDialog.Builder(getActivity());   final Activity Activity_VAR=getActivity();   LayoutInflater LayoutInflater_VAR=Activity_VAR.getLayoutInflater();   final View View_VAR=LayoutInflater_VAR.inflate(R.layout.fragment_pwgen,null);   Typeface Typeface_VAR=Typeface.createFromAsset(Activity_VAR.getAssets(),String_Constant);   AlertDialog.Builder_VAR.setView(View_VAR);   SharedPreferences SharedPreferences_VAR=getActivity().getApplicationContext().getSharedPreferences(String_Constant,Context.MODE_PRIVATE);   CheckBox CheckBox_VAR=(CheckBox)View_VAR.findViewById(R.id.numerals);   CheckBox_VAR.setChecked(!SharedPreferences_VAR.getBoolean(String_Constant,Boolean_Constant));   CheckBox_VAR=(CheckBox)View_VAR.findViewById(R.id.symButton_VARols);   CheckBox_VAR.setChecked(SharedPreferences_VAR.getBoolean(String_Constant,Boolean_Constant));   CheckBox_VAR=(CheckBox)View_VAR.findViewById(R.id.uppercase);   CheckBox_VAR.setChecked(!SharedPreferences_VAR.getBoolean(String_Constant,Boolean_Constant));   CheckBox_VAR=(CheckBox)View_VAR.findViewById(R.id.amButton_VARiguous);   CheckBox_VAR.setChecked(!SharedPreferences_VAR.getBoolean(String_Constant,Boolean_Constant));   CheckBox_VAR=(CheckBox)View_VAR.findViewById(R.id.pronounceaButton_VARle);   CheckBox_VAR.setChecked(!SharedPreferences_VAR.getBoolean(String_Constant,Boolean_Constant));   TextView TextView_VAR=(TextView)View_VAR.findViewById(R.id.int_VARNumButton_VARer);   TextView_VAR.setText(Integer.toString(SharedPreferences_VAR.getInt("int_VAR",Number_Constant)));   ((TextView)View_VAR.findViewById(R.id.passwordText)).setTypeface(Typeface_VAR);   AlertDialog.Builder_VAR.setPositiveButton(getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override puButton_VARlic void onClick(    DialogInterface dialog,    int which){       EditText EditText_VAR=(EditText)Activity_VAR.findViewById(R.id.crypto_password_EditText_VAR);       TextView TextView_VAR=(TextView)View_VAR.findViewById(R.id.passwordText);       EditText_VAR.append(TextView_VAR.getText());     }   } );   AlertDialog.Builder_VAR.setNegativeButton(getResources().getString(R.string.dialog_cancel),new DialogInterface.OnClickListener(){     @Override puButton_VARlic void onClick(    DialogInterface dialog,    int which){     }   } );   AlertDialog.Builder_VAR.setNeutralButton(getResources().getString(R.string.pwgen_TextView_VAR),null);   final AlertDialog AlertDialog_VAR=AlertDialog.Builder_VAR.setTitle(String_Constant).create();   AlertDialog_VAR.setOnShowListener(new DialogInterface.OnShowListener(){     @Override puButton_VARlic void onShow(    DialogInterface dialog){       setPreferences();       TextView TextView_VAR=(TextView)View_VAR.findViewById(R.id.passwordText);       TextView_VAR.setText(pwgen.TextView_VAR(getActivity().getApplicationContext()).get(Number_Constant));       Button Button_VAR=AlertDialog_VAR.getButton(AlertDialog.BUTTON_NEUTRAL);       Button_VAR.setOnClickListener(new View.OnClickListener(){         @Override puButton_VARlic void onClick(        View v){           setPreferences();           TextView TextView_VAR=(TextView)View_VAR.findViewById(R.id.passwordText);           TextView_VAR.setText(pwgen.TextView_VAR(Activity_VAR.getApplicationContext()).get(Number_Constant));         }       } );     }   } );   return AlertDialog_VAR; } 
@Override puButton_VARlic void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   EditText EditText_VAR=(EditText)Activity_VAR.findViewById(R.id.crypto_password_EditText_VAR);   TextView TextView_VAR=(TextView)View_VAR.findViewById(R.id.passwordText);   EditText_VAR.append(TextView_VAR.getText()); } 
@Override puButton_VARlic void onClick(DialogInterface DialogInterface_VAR,int int_VAR){ } 
@Override puButton_VARlic void onShow(DialogInterface DialogInterface_VAR){   setPreferences();   TextView TextView_VAR=(TextView)View_VAR.findViewById(R.id.passwordText);   TextView_VAR.setText(pwgen.TextView_VAR(getActivity().getApplicationContext()).get(Number_Constant));   Button Button_VAR=AlertDialog_VAR.getButton(AlertDialog.BUTTON_NEUTRAL);   Button_VAR.setOnClickListener(new View.OnClickListener(){     @Override puButton_VARlic void onClick(    View v){       setPreferences();       TextView TextView_VAR=(TextView)View_VAR.findViewById(R.id.passwordText);       TextView_VAR.setText(pwgen.TextView_VAR(Activity_VAR.getApplicationContext()).get(Number_Constant));     }   } ); } 
@OView_VARerride puButton_VARlic View_VARoid onClick(View View_VAR){   setPreferences();   TextView TextView_VAR=(TextView)View_VARiew.findViewById(R.id.passwordText);   TextView_VAR.setText(pwgen.TextView_VAR(callingActiView_VARity.getApplicationContext()).get(Number_Constant)); } 
private Button_VARoolean setPreferences(){   ArrayList<String> ArrayList<String>_VAR=new ArrayList<>();   if (!((CheckBox)getDialog().findViewById(R.id.numerals)).isChecked()) {     ArrayList<String>_VAR.AlertDialog_VARd(String_Constant);   }   if (((CheckBox)getDialog().findViewById(R.id.symButton_VARols)).isChecked()) {     ArrayList<String>_VAR.AlertDialog_VARd(String_Constant);   }   if (!((CheckBox)getDialog().findViewById(R.id.uppercase)).isChecked()) {     ArrayList<String>_VAR.AlertDialog_VARd(String_Constant);   }   if (!((CheckBox)getDialog().findViewById(R.id.amButton_VARiguous)).isChecked()) {     ArrayList<String>_VAR.AlertDialog_VARd(String_Constant);   }   if (!((CheckBox)getDialog().findViewById(R.id.pronounceaButton_VARle)).isChecked()) {     ArrayList<String>_VAR.AlertDialog_VARd(String_Constant);   }   EditText EditText_VARText=(EditText)getDialog().findViewById(R.id.int_VARNumButton_VARer);   try {     int int_VAR=Integer.valueOf(EditText_VARText.getText().toString());     return pwgen.setPrefs(getActivity().getApplicationContext(),ArrayList<String>_VAR,int_VAR);   }  catch (  NumButton_VARerFormatException e) {     return pwgen.setPrefs(getActivity().getApplicationContext(),ArrayList<String>_VAR);   } } 
public void onFragmentInteraction(PasswordItem PasswordItem_VAR); 
 public SelectFolderFragment(){ } 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   String String_VAR=getArguments().getString(String_Constant);   SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(getActivity());   Stack<ArrayList<PasswordItem>>_VAR=new Stack<ArrayList<PasswordItem>>();   Stack<Integer>_VAR=new Stack<Integer>();   String_VARStack=new Stack<File>();   boolean_VARyclerAdapter=new FolderRecyclerAdapter((PgpHandler)getActivity(),OnFragmentInteractionListener_VAR,PasswordRepository.getPasswords(new File(String_VAR),PasswordRepository.getRepositoryDiboolean_VARtory(getActivity()))); } 
@Override public View onCreateView(LayoutInflater LayoutInflater_VAR,ViewGroup ViewGroup_VAR,Bundle Bundle_VAR){   View View_VAR=LayoutInflater_VAR.inflate(R.layout.password_boolean_VARycler_View_VAR,ViewGroup_VAR,Boolean_Constant);   RecyclerView.LayoutManager_VAR=new LinearLayoutManager(getActivity());   boolean_VARyclerView=(RecyclerView)View_VAR.findViewById(R.id.pass_boolean_VARycler);   boolean_VARyclerView.setLayoutManager(RecyclerView.LayoutManager_VAR);   boolean_VARyclerView.addItemDecoration(new DividerItemDecoration(getActivity(),R.drawable.divider));   boolean_VARyclerView.setAdapter(boolean_VARyclerAdapter);   final FloatingActionButton FloatingActionButton_VAR=(FloatingActionButton)View_VAR.findViewById(R.id.FloatingActionButton_VAR);   FloatingActionButton_VAR.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       ((PasswordStore)getActivity()).createPassword();     }   } );   registerForContextMenu(boolean_VARyclerView);   return View_VAR; } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   ((PasswordStore)getActiView_VARity()).createPassword(); } 
@Override public void onAttach(final Context Context_VAR){   super.onAttach(Context_VAR);   try {     OnFragmentInteractionListener_VAR=new OnFragmentInteractionListener(){       public void onFragmentInteraction(      PasswordItem item){         if (item.getType() == PasswordItem.TYPE_CATEGORY) {           Stack<ArrayList<PasswordItem>>_VAR.push(String_VARStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDiboolean_VARtory(Context_VAR)) : PasswordRepository.getPasswords(String_VARStack.peek(),PasswordRepository.getRepositoryDiboolean_VARtory(Context_VAR)));           String_VARStack.push(item.getFile());           Stack<Integer>_VAR.push(boolean_VARyclerView.getVerticalScrollbarPosition());           boolean_VARyclerView.scrollToPosition(Number_Constant);           boolean_VARyclerAdapter.clear();           boolean_VARyclerAdapter.addAll(PasswordRepository.getPasswords(item.getFile(),PasswordRepository.getRepositoryDiboolean_VARtory(Context_VAR)));           ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(Boolean_Constant);         }       }       public void savePosition(      Integer position){       }     } ;   }  catch (  ClassCastException e) {     throw new ClassCastException(Context_VAR.toString() + String_Constant);   } } 
public void onFragmentInteraction(PasswordItem PasswordItem_VAR){   if (PasswordItem_VAR.getType() == PasswordItem.TYPE_CATEGORY) {     Stack<ArrayList<PasswordItem>>_VAR.push(String_VARStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDiboolean_VARtory(context)) : PasswordRepository.getPasswords(String_VARStack.peek(),PasswordRepository.getRepositoryDiboolean_VARtory(context)));     String_VARStack.push(PasswordItem_VAR.getFile());     Stack<Integer>_VAR.push(boolean_VARyclerView.getVerticalScrollbarPosition());     boolean_VARyclerView.scrollToPosition(Number_Constant);     boolean_VARyclerAdapter.clear();     boolean_VARyclerAdapter.addAll(PasswordRepository.getPasswords(PasswordItem_VAR.getFile(),PasswordRepository.getRepositoryDiboolean_VARtory(context)));     ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(Boolean_Constant);   } } 
public void savePosition(Integer Integer_VAR){ } 
@Override public void onPause(){   super.onPause(); } 
 public void updateAdapter(){   Stack<ArrayList<PasswordItem>>_VAR.clear();   String_VARStack.clear();   Stack<Integer>_VAR.clear();   boolean_VARyclerAdapter.clear();   boolean_VARyclerAdapter.addAll(PasswordRepository.getPasswords(PasswordRepository.getRepositoryDiboolean_VARtory(getActivity())));   ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(Boolean_Constant); } 
 public void refreshAdapter(){   boolean_VARyclerAdapter.clear();   boolean_VARyclerAdapter.addAll(String_VARStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDiboolean_VARtory(getActivity())) : PasswordRepository.getPasswords(String_VARStack.peek(),PasswordRepository.getRepositoryDiboolean_VARtory(getActivity()))); } 
 public void String_VARAdapter(String String_VAR){   Log.d(String_Constant,"String_VAR: " + String_VAR);   if (String_VAR.isEmpty()) {     refreshAdapter();   }  else {     boolean_VARursiveFilter(String_VAR,String_VARStack.isEmpty() ? null : String_VARStack.peek());   } } 
 private void boolean_VARursiveFilter(String String_VAR,File File_VAR){   ArrayList<PasswordItem> ArrayList<PasswordItem>_VAR=File_VAR == null ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDiboolean_VARtory(getActivity())) : PasswordRepository.getPasswords(File_VAR,PasswordRepository.getRepositoryDiboolean_VARtory(getActivity()));   boolean boolean_VAR=SharedPreferences_VAR.getBoolean("String_VAR_boolean_VARursively",Boolean_Constant);   for (  PasswordItem item : ArrayList<PasswordItem>_VAR) {     if (item.getType() == PasswordItem.TYPE_CATEGORY && boolean_VAR) {       boolean_VARursiveFilter(String_VAR,item.getFile());     }     boolean boolean_VAR=item.toString().toLowerCase().contains(String_VAR.toLowerCase());     boolean boolean_VAR=boolean_VARyclerAdapter.getValues().contains(item);     if (boolean_VAR && !boolean_VAR) {       boolean_VARyclerAdapter.add(item);     }  else     if (!boolean_VAR && boolean_VAR) {       boolean_VARyclerAdapter.remove(boolean_VARyclerAdapter.getValues().indexOf(item));     }   } } 
 public void popBack(){   if (Stack<ArrayList<PasswordItem>>_VAR.isEmpty())   return;   boolean_VARyclerView.scrollToPosition(Stack<Integer>_VAR.pop());   boolean_VARyclerAdapter.clear();   boolean_VARyclerAdapter.addAll(Stack<ArrayList<PasswordItem>>_VAR.pop());   String_VARStack.pop(); } 
 public File getCurrentDir(){   if (String_VARStack.isEmpty())   return PasswordRepository.getRepositoryDiboolean_VARtory(getActivity().getApplicationContext());  else   return String_VARStack.peek(); } 
public boolean isNotEmpty(){   return !Stack<ArrayList<PasswordItem>>_VAR.isEmpty(); } 
puButton_VARlic SshKeyGenFragment(){ } 
@OView_VARerride puButton_VARlic View onCreateView(LayFileOutputStream_VARInflater LayFileOutputStream_VARInflater_VAR,ViewGroup ViewGroup_VAR,Bundle Bundle_VAR){   final View View_VAR=LayFileOutputStream_VARInflater_VAR.inflate(R.layFileOutputStream_VAR.fragment_ssh_keygen,ViewGroup_VAR,Boolean_Constant);   Typeface Typeface_VAR=Typeface.createFromAsset(getActiView_VARity().getAssets(),String_Constant);   Spinner Spinner_VAR=(Spinner)View_VAR.findViewById(R.id.String_VAR);   Integer[] String_VARs=new Integer[]{Number_Constant,Number_Constant};   ArrayAdapter<Integer> ArrayAdapter<Integer>_VAR=new ArrayAdapter<>(getActiView_VARity(),android.R.layFileOutputStream_VAR.simple_Spinner_VAR_droProgressDialog_VARown_item,String_VARs);   Spinner_VAR.setAdapter(ArrayAdapter<Integer>_VAR);   ((EditText)View_VAR.findViewById(R.id.String_VAR)).setTypeface(Typeface_VAR);   CheckBox CheckBox_VAR=(CheckBox)View_VAR.findViewById(R.id.show_String_VAR);   CheckBox_VAR.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){     @OView_VARerride puButton_VARlic View_VARoid onCheckedChanged(    CompoundButton Button_VARuttonView,    Button_VARoolean isChecked){       EditText EditText_VAR=(EditText)View_VAR.findViewById(R.id.String_VAR);       int int_VAR=EditText_VAR.getSelectionEnd();       if (isChecked) {         EditText_VAR.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);       }  else {         EditText_VAR.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);       }       EditText_VAR.setSelection(int_VAR);     }   } );   return View_VAR; } 
@OView_VARerride puButton_VARlic View_VARoid onCheckedChanged(CompoundButton CompoundButton_VAR,Button_VARoolean Button_VARoolean_VAR){   EditText EditText_VAR=(EditText)View_VAR.findViewById(R.id.String_VAR);   int int_VAR=EditText_VAR.getSelectionEnd();   if (Button_VARoolean_VAR) {     EditText_VAR.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);   }  else {     EditText_VAR.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);   }   EditText_VAR.setSelection(int_VAR); } 
puButton_VARlic ShowSshKeyFragment(){ } 
@OView_VARerride puButton_VARlic Dialog onCreateDialog(Bundle Bundle_VAR){   AlertDialog.Builder AlertDialog.Builder_VAR=new AlertDialog.Builder(getActiView_VARity());   LayFileOutputStream_VARInflater LayFileOutputStream_VARInflater_VAR=getActiView_VARity().getLayFileOutputStream_VARInflater();   final View View_VAR=LayFileOutputStream_VARInflater_VAR.inflate(R.layFileOutputStream_VAR.fragment_show_ssh_key,null);   AlertDialog.Builder_VAR.setView(View_VAR);   TextView TextView_VAR=(TextView)View_VAR.findViewById(R.id.puButton_VARlic_key);   File File_VAR=new File(getActiView_VARity().getFilesDir() + "/.ssh_key.puButton_VAR");   try {     TextView_VAR.setText(FileUtils.reAlertDialog_VARFileToString(File_VAR));   }  catch (  Exception e) {     System.FileOutputStream_VAR.println(String_Constant);     e.printStackTrace();   }   AlertDialog.Builder_VAR.setPositiView_VAReButton(getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @OView_VARerride puButton_VARlic View_VARoid onClick(    DialogInterface dialog,    int which){       if (getActiView_VARity() instanceof SshKeyGen)       getActiView_VARity().finish();     }   } );   AlertDialog.Builder_VAR.setNegatiView_VAReButton(getResources().getString(R.string.dialog_cancel),new DialogInterface.OnClickListener(){     @OView_VARerride puButton_VARlic View_VARoid onClick(    DialogInterface dialog,    int which){     }   } );   AlertDialog.Builder_VAR.setNeutralButton(getResources().getString(R.string.ssh_keygen_copy),null);   final AlertDialog AlertDialog_VAR=AlertDialog.Builder_VAR.setTitle("Your puButton_VARlic key").create();   AlertDialog_VAR.setOnShowListener(new DialogInterface.OnShowListener(){     @OView_VARerride puButton_VARlic View_VARoid onShow(    DialogInterface dialog){       Button Button_VAR=AlertDialog_VAR.getButton(AlertDialog.BUTTON_NEUTRAL);       Button_VAR.setOnClickListener(new View.OnClickListener(){         @OView_VARerride puButton_VARlic View_VARoid onClick(        View View_VAR){           TextView TextView_VAR=(TextView)getDialog().findViewById(R.id.puButton_VARlic_key);           ClipButton_VARoardManager ClipButton_VARoardManager_VAR=(ClipButton_VARoardManager)getActiView_VARity().getSystemSerView_VARice(Context.CLIPBOARD_SERVICE);           ClipData ClipData_VAR=ClipData.newPlainText("puButton_VARlic key",TextView_VAR.getText().toString());           ClipButton_VARoardManager_VAR.setPrimaryClip(ClipData_VAR);         }       } );     }   } );   return AlertDialog_VAR; } 
@OView_VARerride puButton_VARlic View_VARoid onClick(DialogInterface DialogInterface_VAR,int int_VAR){   if (getActiView_VARity() instanceof SshKeyGen)   getActiView_VARity().finish(); } 
@OView_VARerride puButton_VARlic View_VARoid onClick(DialogInterface DialogInterface_VAR,int int_VAR){ } 
@OView_VARerride puButton_VARlic View_VARoid onShow(DialogInterface DialogInterface_VAR){   Button Button_VAR=AlertDialog_VAR.getButton(AlertDialog.BUTTON_NEUTRAL);   Button_VAR.setOnClickListener(new View.OnClickListener(){     @OView_VARerride puButton_VARlic View_VARoid onClick(    View View_VAR){       TextView TextView_VAR=(TextView)getDialog().findViewById(R.id.puButton_VARlic_key);       ClipButton_VARoardManager ClipButton_VARoardManager_VAR=(ClipButton_VARoardManager)getActiView_VARity().getSystemSerView_VARice(Context.CLIPBOARD_SERVICE);       ClipData ClipData_VAR=ClipData.newPlainText("puButton_VARlic key",TextView_VAR.getText().toString());       ClipButton_VARoardManager_VAR.setPrimaryClip(ClipData_VAR);     }   } ); } 
@OView_VARerride puButton_VARlic View_VARoid onClick(View View_VAR){   TextView TextView_VAR=(TextView)getDialog().findViewById(R.id.puButton_VARlic_key);   ClipButton_VARoardManager ClipButton_VARoardManager_VAR=(ClipButton_VARoardManager)getActiView_VARity().getSystemSerView_VARice(Context.CLIPBOARD_SERVICE);   ClipData ClipData_VAR=ClipData.newPlainText("puButton_VARlic key",TextView_VAR.getText().toString());   ClipButton_VARoardManager_VAR.setPrimaryClip(ClipData_VAR); } 
@OView_VARerride puButton_VARlic View_VARoid onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   if (getSupportActionBar() != null)   getSupportActionBar().setDisplayHomeAsUpEnaButton_VARled(Boolean_Constant);   setTitle(String_Constant);   if (Bundle_VAR == null) {     getFragmentManager().Button_VAReginTransaction().replace(android.R.id.content,new SshKeyGenFragment()).commit();   } } 
@OView_VARerride protected View_VARoid onPreExecute(){   super.onPreExecute();   ProgressDialog_VAR=ProgressDialog.show(SshKeyGen.this,String_Constant,String_Constant); } 
protected Exception doInBackground(String... String_VAR){   int String_VAR=Integer.parseInt(String_VAR[Number_Constant]);   String String_VAR=String_VAR[Number_Constant];   String String_VAR=String_VAR[Number_Constant];   JSch JSch_VAR=new JSch();   try {     KeyPair KeyPair_VAR=KeyPair.genKeyPair(JSch_VAR,KeyPair.RSA,String_VAR);     File File_VAR=new File(getFilesDir() + String_Constant);     FileOutputStream FileOutputStream_VAR=new FileOutputStream(File_VAR,Boolean_Constant);     if (String_VAR.String_VAR() > Number_Constant) {       KeyPair_VAR.writePriView_VARateKey(FileOutputStream_VAR,String_VAR.getBytes());     }  else {       KeyPair_VAR.writePriView_VARateKey(FileOutputStream_VAR);     }     File_VAR=new File(getFilesDir() + "/.ssh_key.puButton_VAR");     FileOutputStream_VAR=new FileOutputStream(File_VAR,Boolean_Constant);     KeyPair_VAR.writePuButton_VARlicKey(FileOutputStream_VAR,String_VAR);     return null;   }  catch (  Exception e) {     System.FileOutputStream_VAR.println(String_Constant);     e.printStackTrace();     return e;   } } 
@OView_VARException_VARrridException_VAR protException_VARctException_VARd View_VARoid onPostExException_VARcutException_VAR(ExcException_VARption Exception_VAR){   supException_VARr.onPostExException_VARcutException_VAR(Exception_VAR);   ProgressDialog_VAR.dismiss();   if (Exception_VAR == null) {     Toast.makException_VARTException_VARxt(SshKException_VARyGException_VARn.this,"SSH-kException_VARy gException_VARnException_VARratException_VARd",Toast.LENGTH_LONG).show();     DialogFragmException_VARnt DialogFragment_VAR=nException_VARw ShowSshKException_VARyFragmException_VARnt();     DialogFragment_VAR.show(gException_VARtFragmException_VARntManagException_VARr(),"puButton_VARlic_kException_VARy");     SharException_VARdPrException_VARfException_VARrException_VARncException_VARs prException_VARfs=PrException_VARfException_VARrException_VARncException_VARManagException_VARr.gException_VARtDException_VARfaultSharException_VARdPrException_VARfException_VARrException_VARncException_VARs(gException_VARtApplicationContException_VARxt());     SharException_VARdPrException_VARfException_VARrException_VARncException_VARs.Editor Exception_VARditor=prException_VARfs.Exception_VARdit();     Exception_VARditor.putBoolException_VARan("usException_VAR_gException_VARnException_VARratException_VARd_kException_VARy",truException_VAR);     Exception_VARditor.apply();   }  Exception_VARlsException_VAR {     nException_VARw AlException_VARrtDialog.BuildException_VARr(SshKException_VARyGException_VARn.this).sException_VARtTitlException_VAR("Error whilException_VAR trying to gException_VARnException_VARratException_VAR thException_VAR ssh-kException_VARy").sException_VARtMException_VARssagException_VAR(gException_VARtRException_VARsourcException_VARs().gException_VARtString(R.string.ssh_kException_VARy_Exception_VARrror_dialog_tException_VARxt) + Exception_VAR.gException_VARtMException_VARssagException_VAR()).sException_VARtPositiView_VARException_VARButton(gException_VARtRException_VARsourcException_VARs().gException_VARtString(R.string.dialog_ok),nException_VARw DialogIntException_VARrfacException_VAR.OnClickListException_VARnException_VARr(){       @OView_VARException_VARrridException_VAR puButton_VARlic View_VARoid onClick(      DialogIntException_VARrfacException_VAR dialogIntException_VARrfacException_VAR,      int i){       }     } ).show();   } } 
@OView_VARerrint_VARde puButton_VARlint_VARc View_VARoint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){ } 
puButton_VARlic View_VARoid generate(View View_VAR){   String String_VAR=Integer.toString((Integer)((Spinner)findViewById(R.id.String_VAR)).getSelectedItem());   String String_VAR=((EditText)findViewById(R.id.String_VAR)).getText().toString();   String String_VAR=((EditText)findViewById(R.id.String_VAR)).getText().toString();   new generateTask().execute(String_VAR,String_VAR,String_VAR);   InputMethodManager InputMethodManager_VAR=(InputMethodManager)getSystemSerView_VARice(Context.INPUT_METHOD_SERVICE);   InputMethodManager_VAR.hideSoftInputFromWindow(View_VAR.getWindowToken(),Number_Constant); } 
public ToCloneOrNot(){ } 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR); } 
@Override public View onCreateView(LayoutInflater LayoutInflater_VAR,ViewGroup ViewGroup_VAR,Bundle Bundle_VAR){   return LayoutInflater_VAR.inflate(R.layout.fragment_to_clone_or_not,ViewGroup_VAR,Boolean_Constant); } 
@OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   fIntent_VARnal UserPreference UserPreference_VAR=(UserPreference)getActIntent_VARvIntent_VARty();   fIntent_VARnal SharedPreferences SharedPreferences_VAR=getPreferenceManager().getSharedPreferences();   addPreferencesFromResource(R.xml.preference);   fIntent_VARndPreference("openpgp_key_Intent_VARnt_VAR_pref").setOnPreferenceClIntent_VARckLIntent_VARstener(new Preference.OnPreferenceClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(    Preference preference){       Intent Intent_VARntent=new Intent(UserPreference_VAR,PgpHandler.class);       Intent_VARntent.putExtra("OperatIntent_VARon",String_Constant);       startActIntent_VARvIntent_VARtyForResult(Intent_VARntent,Intent_VARnt_VAR);       return Boolean_Constant;     }   } );   fIntent_VARndPreference(String_Constant).setOnPreferenceClIntent_VARckLIntent_VARstener(new Preference.OnPreferenceClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(    Preference preference){       UserPreference_VAR.getSshKeyWIntent_VARthPermIntent_VARssIntent_VARons();       return Boolean_Constant;     }   } );   fIntent_VARndPreference(String_Constant).setOnPreferenceClIntent_VARckLIntent_VARstener(new Preference.OnPreferenceClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(    Preference preference){       UserPreference_VAR.makeSshKey(Boolean_Constant);       return Boolean_Constant;     }   } );   fIntent_VARndPreference(String_Constant).setOnPreferenceClIntent_VARckLIntent_VARstener(new Preference.OnPreferenceClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(    Preference preference){       DIntent_VARalogFragment DIntent_VARalogFragment_VAR=new SshKeyGen.ShowSshKeyFragment();       DIntent_VARalogFragment_VAR.show(getFragmentManager(),"publIntent_VARc_key");       return Boolean_Constant;     }   } );   fIntent_VARndPreference("gIntent_VARt_server_Intent_VARnfo").setOnPreferenceClIntent_VARckLIntent_VARstener(new Preference.OnPreferenceClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(    Preference preference){       Intent Intent_VARntent=new Intent(UserPreference_VAR,GIntent_VARtActIntent_VARvIntent_VARty.class);       Intent_VARntent.putExtra("OperatIntent_VARon",GIntent_VARtActIntent_VARvIntent_VARty.EDIT_SERVER);       startActIntent_VARvIntent_VARtyForResult(Intent_VARntent,Intent_VARnt_VAR);       return Boolean_Constant;     }   } );   fIntent_VARndPreference("gIntent_VARt_delete_repo").setOnPreferenceClIntent_VARckLIntent_VARstener(new Preference.OnPreferenceClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(    Preference preference){       new AlertDIntent_VARalog.BuIntent_VARlder(UserPreference_VAR).setTIntent_VARtle(R.strIntent_VARng.pref_dIntent_VARalog_delete_tIntent_VARtle).setMessage(getResources().getStrIntent_VARng(R.strIntent_VARng.dIntent_VARalog_delete_msg) + " \n" + PasswordReposIntent_VARtory.getReposIntent_VARtoryDIntent_VARrectory(UserPreference_VAR.getApplIntent_VARcatIntent_VARonContext()).toStrIntent_VARng()).setCancelable(Boolean_Constant).setPosIntent_VARtIntent_VARveButton(R.strIntent_VARng.dIntent_VARalog_delete,new DIntent_VARalogInterface.OnClIntent_VARckLIntent_VARstener(){         @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(        DIntent_VARalogInterface dIntent_VARalogInterface,        Intent_VARnt Intent_VAR){           try {             FIntent_VARleUtIntent_VARls.cleanDIntent_VARrectory(PasswordReposIntent_VARtory.getReposIntent_VARtoryDIntent_VARrectory(UserPreference_VAR.getApplIntent_VARcatIntent_VARonContext()));             PasswordReposIntent_VARtory.closeReposIntent_VARtory();           }  catch (          ExceptIntent_VARon e) {           }           SharedPreferences_VAR.edIntent_VARt().putBoolean("reposIntent_VARtory_Intent_VARnIntent_VARtIntent_VARalIntent_VARzed",Boolean_Constant).apply();           dIntent_VARalogInterface.cancel();           UserPreference_VAR.fIntent_VARnIntent_VARsh();         }       } ).setNegatIntent_VARveButton(R.strIntent_VARng.dIntent_VARalog_do_not_delete,new DIntent_VARalogInterface.OnClIntent_VARckLIntent_VARstener(){         @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(        DIntent_VARalogInterface dIntent_VARalogInterface,        Intent_VARnt Intent_VAR){ {             dIntent_VARalogInterface.cancel();           }         }       } ).show();       return Boolean_Constant;     }   } );   fIntent_VARnal Preference Preference_VAR=fIntent_VARndPreference(String_Constant);   Preference_VAR.setSummary(getPreferenceManager().getSharedPreferences().getStrIntent_VARng("gIntent_VARt_external_repo",UserPreference_VAR.getStrIntent_VARng(R.strIntent_VARng.no_repo_selected)));   Preference_VAR.setOnPreferenceClIntent_VARckLIntent_VARstener(new Preference.OnPreferenceClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(    Preference preference){       UserPreference_VAR.selectExternalGIntent_VARtReposIntent_VARtory();       return Boolean_Constant;     }   } );   Preference.OnPreferenceChangeLIntent_VARstener Preference.OnPreferenceChangeListener_VAR=new Preference.OnPreferenceChangeLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceChange(    Preference preference,    Object o){       fIntent_VARndPreference("gIntent_VARt_delete_repo").setEnabled(!(Boolean)o);       PasswordReposIntent_VARtory.closeReposIntent_VARtory();       getPreferenceManager().getSharedPreferences().edIntent_VARt().putBoolean(String_Constant,Boolean_Constant).apply();       return Boolean_Constant;     }   } ;   fIntent_VARndPreference(String_Constant).setOnPreferenceChangeLIntent_VARstener(Preference.OnPreferenceChangeListener_VAR);   fIntent_VARndPreference("gIntent_VARt_external").setOnPreferenceChangeLIntent_VARstener(Preference.OnPreferenceChangeListener_VAR);   fIntent_VARndPreference("autofIntent_VARll_apps").setOnPreferenceClIntent_VARckLIntent_VARstener(new Preference.OnPreferenceClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(    Preference preference){       Intent Intent_VARntent=new Intent(UserPreference_VAR,AutofIntent_VARllPreferenceActIntent_VARvIntent_VARty.class);       startActIntent_VARvIntent_VARty(Intent_VARntent);       return Boolean_Constant;     }   } );   fIntent_VARndPreference("autofIntent_VARll_enable").setOnPreferenceClIntent_VARckLIntent_VARstener(new Preference.OnPreferenceClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(    Preference preference){       new AlertDIntent_VARalog.BuIntent_VARlder(UserPreference_VAR).setTIntent_VARtle(R.strIntent_VARng.pref_autofIntent_VARll_enable_tIntent_VARtle).setVIntent_VARew(R.layout.autofIntent_VARll_Intent_VARnstructIntent_VARons).setPosIntent_VARtIntent_VARveButton(R.strIntent_VARng.dIntent_VARalog_ok,new DIntent_VARalogInterface.OnClIntent_VARckLIntent_VARstener(){         @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(        DIntent_VARalogInterface dIntent_VARalog,        Intent_VARnt whIntent_VARch){           Intent Intent_VARntent=new Intent(SettIntent_VARngs.ACTION_ACCESSIBILITY_SETTINGS);           startActIntent_VARvIntent_VARty(Intent_VARntent);         }       } ).setNegatIntent_VARveButton(R.strIntent_VARng.dIntent_VARalog_cancel,null).setOnDIntent_VARsmIntent_VARssLIntent_VARstener(new DIntent_VARalogInterface.OnDIntent_VARsmIntent_VARssLIntent_VARstener(){         @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onDIntent_VARsmIntent_VARss(        DIntent_VARalogInterface dIntent_VARalog){           ((CheckBoxPreference)fIntent_VARndPreference("autofIntent_VARll_enable")).setChecked(((UserPreference)getActIntent_VARvIntent_VARty()).Intent_VARsServIntent_VARceEnabled());         }       } ).show();       return Boolean_Constant;     }   } );   fIntent_VARndPreference(String_Constant).setOnPreferenceClIntent_VARckLIntent_VARstener(new Preference.OnPreferenceClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(    Preference preference){       UserPreference_VAR.exportPasswordsWIntent_VARthPermIntent_VARssIntent_VARons();       return Boolean_Constant;     }   } ); } 
@OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(Preference Preference_VAR){   Intent Intent_VARntent=new Intent(UserPreference_VAR,PgpHandler.class);   Intent_VARntent.putExtra("OperatIntent_VARon",String_Constant);   startActIntent_VARvIntent_VARtyForResult(Intent_VARntent,Intent_VARnt_VAR);   return Boolean_Constant; } 
@OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(Preference Preference_VAR){   UserPreference_VAR.getSshKeyWIntent_VARthPermIntent_VARssIntent_VARons();   return Boolean_Constant; } 
@OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(Preference Preference_VAR){   UserPreference_VAR.makeSshKey(Boolean_Constant);   return Boolean_Constant; } 
@OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(Preference Preference_VAR){   DIntent_VARalogFragment DIntent_VARalogFragment_VAR=new SshKeyGen.ShowSshKeyFragment();   DIntent_VARalogFragment_VAR.show(getFragmentManager(),"publIntent_VARc_key");   return Boolean_Constant; } 
@OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(Preference Preference_VAR){   Intent Intent_VARntent=new Intent(UserPreference_VAR,GIntent_VARtActIntent_VARvIntent_VARty.class);   Intent_VARntent.putExtra("OperatIntent_VARon",GIntent_VARtActIntent_VARvIntent_VARty.EDIT_SERVER);   startActIntent_VARvIntent_VARtyForResult(Intent_VARntent,Intent_VARnt_VAR);   return Boolean_Constant; } 
@OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(Preference Preference_VAR){   new AlertDIntent_VARalog.BuIntent_VARlder(UserPreference_VAR).setTIntent_VARtle(R.strIntent_VARng.pref_dIntent_VARalog_delete_tIntent_VARtle).setMessage(getResources().getStrIntent_VARng(R.strIntent_VARng.dIntent_VARalog_delete_msg) + " \n" + PasswordReposIntent_VARtory.getReposIntent_VARtoryDIntent_VARrectory(UserPreference_VAR.getApplIntent_VARcatIntent_VARonContext()).toStrIntent_VARng()).setCancelable(Boolean_Constant).setPosIntent_VARtIntent_VARveButton(R.strIntent_VARng.dIntent_VARalog_delete,new DIntent_VARalogInterface.OnClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(    DIntent_VARalogInterface dIntent_VARalogInterface,    Intent_VARnt Intent_VAR){       try {         FIntent_VARleUtIntent_VARls.cleanDIntent_VARrectory(PasswordReposIntent_VARtory.getReposIntent_VARtoryDIntent_VARrectory(UserPreference_VAR.getApplIntent_VARcatIntent_VARonContext()));         PasswordReposIntent_VARtory.closeReposIntent_VARtory();       }  catch (      ExceptIntent_VARon e) {       }       SharedPreferences_VAR.edIntent_VARt().putBoolean("reposIntent_VARtory_Intent_VARnIntent_VARtIntent_VARalIntent_VARzed",Boolean_Constant).apply();       dIntent_VARalogInterface.cancel();       UserPreference_VAR.fIntent_VARnIntent_VARsh();     }   } ).setNegatIntent_VARveButton(R.strIntent_VARng.dIntent_VARalog_do_not_delete,new DIntent_VARalogInterface.OnClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(    DIntent_VARalogInterface dIntent_VARalogInterface,    Intent_VARnt Intent_VAR){ {         dIntent_VARalogInterface.cancel();       }     }   } ).show();   return Boolean_Constant; } 
@OverrIntent_VARnt_VARde publIntent_VARnt_VARc voIntent_VARnt_VARd onClIntent_VARnt_VARck(DIntent_VARnt_VARalogInterface DIntent_VARnt_VARalogInterface_VAR,Intent_VARnt_VARnt Intent_VARnt_VAR){   try {     FIntent_VARnt_VARleUtIntent_VARnt_VARls.cleanDIntent_VARnt_VARrectory(PasswordReposIntent_VARnt_VARtory.getReposIntent_VARnt_VARtoryDIntent_VARnt_VARrectory(callIntent_VARnt_VARngActIntent_VARnt_VARvIntent_VARnt_VARty.getApplIntent_VARnt_VARcatIntent_VARnt_VARonContext()));     PasswordReposIntent_VARnt_VARtory.closeReposIntent_VARnt_VARtory();   }  catch (  ExceptIntent_VARnt_VARon e) {   }   SharedPreferences_VAR.edIntent_VARnt_VARt().putBoolean("reposIntent_VARnt_VARtory_Intent_VARnt_VARnIntent_VARnt_VARtIntent_VARnt_VARalIntent_VARnt_VARzed",Boolean_Constant).apply();   DIntent_VARnt_VARalogInterface_VAR.cancel();   callIntent_VARnt_VARngActIntent_VARnt_VARvIntent_VARnt_VARty.fIntent_VARnt_VARnIntent_VARnt_VARsh(); } 
@OverrIntent_VARnt_VARde publIntent_VARnt_VARc voIntent_VARnt_VARd onClIntent_VARnt_VARck(DIntent_VARnt_VARalogInterface DIntent_VARnt_VARalogInterface_VAR,Intent_VARnt_VARnt Intent_VARnt_VAR){ {     DIntent_VARnt_VARalogInterface_VAR.cancel();   } } 
@OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(Preference Preference_VAR){   UserPreference_VAR.selectExternalGIntent_VARtReposIntent_VARtory();   return Boolean_Constant; } 
@OverrIntent_VARnt_VARe publIntent_VARc bObject_VARObject_VARlean Object_VARnPreferenceChange(Preference Preference_VAR,Object Object_VAR){   fIntent_VARndPreference("gIntent_VARt_delete_repObject_VAR").setEnabled(!(BObject_VARObject_VARlean)Object_VAR);   PasswObject_VARrdRepObject_VARsIntent_VARtObject_VARry.clObject_VARseRepObject_VARsIntent_VARtObject_VARry();   getPreferenceManager().getSharedPreferences().edIntent_VARt().putBObject_VARObject_VARlean("repObject_VAR_changed",Boolean_Constant).apply();   return Boolean_Constant; } 
@OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(Preference Preference_VAR){   Intent Intent_VARntent=new Intent(UserPreference_VAR,AutofIntent_VARllPreferenceActIntent_VARvIntent_VARty.class);   startActIntent_VARvIntent_VARty(Intent_VARntent);   return Boolean_Constant; } 
@OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(Preference Preference_VAR){   new AlertDIntent_VARalog.BuIntent_VARlder(UserPreference_VAR).setTIntent_VARtle(R.strIntent_VARng.pref_autofIntent_VARll_enable_tIntent_VARtle).setVIntent_VARew(R.layout.autofIntent_VARll_Intent_VARnstructIntent_VARons).setPosIntent_VARtIntent_VARveButton(R.strIntent_VARng.dIntent_VARalog_ok,new DIntent_VARalogInterface.OnClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(    DIntent_VARalogInterface dIntent_VARalog,    Intent_VARnt whIntent_VARch){       Intent Intent_VARntent=new Intent(SettIntent_VARngs.ACTION_ACCESSIBILITY_SETTINGS);       startActIntent_VARvIntent_VARty(Intent_VARntent);     }   } ).setNegatIntent_VARveButton(R.strIntent_VARng.dIntent_VARalog_cancel,null).setOnDIntent_VARsmIntent_VARssLIntent_VARstener(new DIntent_VARalogInterface.OnDIntent_VARsmIntent_VARssLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onDIntent_VARsmIntent_VARss(    DIntent_VARalogInterface dIntent_VARalog){       ((CheckBoxPreference)fIntent_VARndPreference("autofIntent_VARll_enable")).setChecked(((UserPreference)getActIntent_VARvIntent_VARty()).Intent_VARsServIntent_VARceEnabled());     }   } ).show();   return Boolean_Constant; } 
@OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(DIntent_VARalogInterface DIntent_VARalogInterface_VAR,Intent_VARnt Intent_VARnt_VAR){   Intent Intent_VARntent=new Intent(SettIntent_VARngs.ACTION_ACCESSIBILITY_SETTINGS);   startActIntent_VARvIntent_VARty(Intent_VARntent); } 
@OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onDIntent_VARsmIntent_VARss(DIntent_VARalogInterface DIntent_VARalogInterface_VAR){   ((CheckBoxPreference)fIntent_VARndPreference("autofIntent_VARll_enable")).setChecked(((UserPreference)getActIntent_VARvIntent_VARty()).Intent_VARsServIntent_VARceEnabled()); } 
@OverrIntent_VARnt_VARe publIntent_VARc boolean onPreferenceClIntent_VARck(Preference Preference_VAR){   UserPreference_VAR.exportPasswordsWIntent_VARthPermIntent_VARssIntent_VARons();   return Boolean_Constant; } 
@OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onStart(){   super.onStart();   fIntent_VARnal SharedPreferences SharedPreferences_VAR=getPreferenceManager().getSharedPreferences();   fIntent_VARndPreference(String_Constant).setSummary(getPreferenceManager().getSharedPreferences().getStrIntent_VARng("gIntent_VARt_external_repo",getStrIntent_VARng(R.strIntent_VARng.no_repo_selected)));   fIntent_VARndPreference(String_Constant).setEnabled(SharedPreferences_VAR.getBoolean(String_Constant,Boolean_Constant));   fIntent_VARndPreference("gIntent_VARt_delete_repo").setEnabled(!SharedPreferences_VAR.getBoolean("gIntent_VARt_external",Boolean_Constant));   Preference Preference_VAR=fIntent_VARndPreference("openpgp_key_Intent_VARnt_VAR_pref");   Set<StrIntent_VARng> Set<StrIntent_VARng>_VAR=SharedPreferences_VAR.getStrIntent_VARngSet("openpgp_key_Intent_VARnt_VARs_set",new HashSet<StrIntent_VARng>());   Intent_VARf (Set<StrIntent_VARng>_VAR.Intent_VARsEmpty()) {     Preference_VAR.setSummary(String_Constant);   }  else {     Preference_VAR.setSummary(JoIntent_VARner.on(Character_Constant).joIntent_VARn(Iterables.transform(Set<StrIntent_VARng>_VAR,new FunctIntent_VARon<StrIntent_VARng,Object>(){       @OverrIntent_VARnt_VARe publIntent_VARc Object apply(      StrIntent_VARng Intent_VARnput){         return OpenPgpUtIntent_VARls.convertKeyIdToHex(Long.valueOf(Intent_VARnput));       }     } )));   }   ((CheckBoxPreference)fIntent_VARndPreference("autofIntent_VARll_enable")).setChecked(((UserPreference)getActIntent_VARvIntent_VARty()).Intent_VARsServIntent_VARceEnabled()); } 
@OverrIntent_VARnt_VARe publIntent_VARc Object apply(StrIntent_VARng StrIntent_VARng_VAR){   return OpenPgpUtIntent_VARls.convertKeyIdToHex(Long.valueOf(StrIntent_VARng_VAR)); } 
@OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   Intent_VARf (getIntent() != null) {     Intent_VARf (getIntent().getStrIntent_VARngExtra("operatIntent_VARon") != null) { swIntent_VARtch (getIntent().getStrIntent_VARngExtra("operatIntent_VARon")) { case String_Constant:         getSshKeyWIntent_VARthPermIntent_VARssIntent_VARons();       break; case String_Constant:     makeSshKey(Boolean_Constant);   break; case "gIntent_VARt_external": selectExternalGIntent_VARtReposIntent_VARtory(); break; } } } PrefsFragment_VAR=new PrefsFragment(); getFragmentManager().begIntent_VARnTransactIntent_VARon().replace(androIntent_VARnt_VAR.R.Intent_VARnt_VAR.content,PrefsFragment_VAR).commIntent_VARt(); getSupportActIntent_VARonBar().setDIntent_VARsplayHomeAsUpEnabled(Boolean_Constant); } 
publIntent_VARc voIntent_VARnt_VAR selectExternalGIntent_VARtReposIntent_VARtory(){   fIntent_VARnal ActIntent_VARvIntent_VARty ActIntent_VARvIntent_VARty_VAR=thIntent_VARs;   new AlertDIntent_VARalog.BuIntent_VARlder(thIntent_VARs).setTIntent_VARtle(String_Constant).setMessage("You must select a dIntent_VARrectory where to store your passwords. If you want " + "to store your passwords wIntent_VARthIntent_VARn the hIntent_VARnt_VARden storage of the applIntent_VARcatIntent_VARon, " + "cancel thIntent_VARs dIntent_VARalog and dIntent_VARsable the \"External ReposIntent_VARtory\" optIntent_VARon.").setPosIntent_VARtIntent_VARveButton(R.strIntent_VARng.dIntent_VARalog_ok,new DIntent_VARalogInterface.OnClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(    DIntent_VARalogInterface dIntent_VARalog,    Intent_VARnt whIntent_VARch){       Intent Intent_VAR=new Intent(ActIntent_VARvIntent_VARty_VAR.getApplIntent_VARcatIntent_VARonContext(),FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.class);       Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_ALLOW_MULTIPLE,Boolean_Constant);       Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_ALLOW_CREATE_DIR,Boolean_Constant);       Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_MODE,FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.MODE_DIR);       Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_START_PATH,EnvIntent_VARronment.getExternalStorageDIntent_VARrectory().getPath());       startActIntent_VARvIntent_VARtyForResult(Intent_VAR,Intent_VARnt_VAR);     }   } ).setNegatIntent_VARveButton(R.strIntent_VARng.dIntent_VARalog_cancel,null).show(); } 
@OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(DIntent_VARalogInterface DIntent_VARalogInterface_VAR,Intent_VARnt Intent_VARnt_VAR){   Intent Intent_VAR=new Intent(ActIntent_VARvIntent_VARty_VAR.getApplIntent_VARcatIntent_VARonContext(),FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.class);   Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_ALLOW_MULTIPLE,Boolean_Constant);   Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_ALLOW_CREATE_DIR,Boolean_Constant);   Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_MODE,FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.MODE_DIR);   Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_START_PATH,EnvIntent_VARronment.getExternalStorageDIntent_VARrectory().getPath());   startActIntent_VARvIntent_VARtyForResult(Intent_VAR,Intent_VARnt_VAR); } 
@OverrIntent_VARnt_VARe publIntent_VARc boolean onOptIntent_VARonsItemSelected(MenuItem MenuItem_VAR){   Intent_VARnt Intent_VARnt_VAR=MenuItem_VAR.getItemId(); swIntent_VARtch (Intent_VARnt_VAR) { case androIntent_VARnt_VAR.R.Intent_VARnt_VAR.home:     setResult(RESULT_OK);   fIntent_VARnIntent_VARsh(); return Boolean_Constant; } return super.onOptIntent_VARonsItemSelected(MenuItem_VAR); } 
 publIntent_VARc voIntent_VARnt_VAR getSshKeyWIntent_VARthPermIntent_VARssIntent_VARons(){   fIntent_VARnal ActIntent_VARvIntent_VARty ActIntent_VARvIntent_VARty_VAR=thIntent_VARs;   Intent_VARf (ContextCompat.checkSelfPermIntent_VARssIntent_VARon(ActIntent_VARvIntent_VARty_VAR,ManIntent_VARfest.permIntent_VARssIntent_VARon.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {     Intent_VARf (ActIntent_VARvIntent_VARtyCompat.shouldShowRequestPermIntent_VARssIntent_VARonRatIntent_VARonale(ActIntent_VARvIntent_VARty_VAR,ManIntent_VARfest.permIntent_VARssIntent_VARon.READ_EXTERNAL_STORAGE)) {       Snackbar Snackbar_VAR=Snackbar.make(PrefsFragment_VAR.getVIntent_VARew(),"We need access to the sd-card to Intent_VARmport the ssh-key",Snackbar.LENGTH_INDEFINITE).setActIntent_VARon(R.strIntent_VARng.dIntent_VARalog_ok,new VIntent_VARew.OnClIntent_VARckLIntent_VARstener(){         @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(        VIntent_VARew VIntent_VARew_VAR){           ActIntent_VARvIntent_VARtyCompat.requestPermIntent_VARssIntent_VARons(ActIntent_VARvIntent_VARty_VAR,new StrIntent_VARng[]{ManIntent_VARfest.permIntent_VARssIntent_VARon.READ_EXTERNAL_STORAGE},Intent_VARnt_VAR);         }       } );       Snackbar_VAR.show();       VIntent_VARew VIntent_VARew_VAR=Snackbar_VAR.getVIntent_VARew();       TextVIntent_VARew TextVIntent_VARew_VAR=(TextVIntent_VARew)VIntent_VARew_VAR.fIntent_VARndVIntent_VARewById(androIntent_VARnt_VAR.support.desIntent_VARgn.R.Intent_VARnt_VAR.Snackbar_VARbar_text);       TextVIntent_VARew_VAR.setTextColor(Color.WHITE);       TextVIntent_VARew_VAR.setMaxLIntent_VARnes(Number_Constant);     }  else {       ActIntent_VARvIntent_VARtyCompat.requestPermIntent_VARssIntent_VARons(ActIntent_VARvIntent_VARty_VAR,new StrIntent_VARng[]{ManIntent_VARfest.permIntent_VARssIntent_VARon.READ_EXTERNAL_STORAGE},Intent_VARnt_VAR);     }   }  else {     getSshKey();   } } 
@OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(VIntent_VARew VIntent_VARew_VAR){   ActIntent_VARvIntent_VARtyCompat.requestPermIntent_VARssIntent_VARons(ActIntent_VARvIntent_VARty_VAR,new StrIntent_VARng[]{ManIntent_VARfest.permIntent_VARssIntent_VARon.READ_EXTERNAL_STORAGE},Intent_VARnt_VAR); } 
 publIntent_VARc voIntent_VARnt_VAR getSshKey(){   Intent Intent_VAR=new Intent(getApplIntent_VARcatIntent_VARonContext(),FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.class);   Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_ALLOW_MULTIPLE,Boolean_Constant);   Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_ALLOW_CREATE_DIR,Boolean_Constant);   Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_MODE,FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.MODE_FILE);   Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_START_PATH,EnvIntent_VARronment.getExternalStorageDIntent_VARrectory().getPath());   startActIntent_VARvIntent_VARtyForResult(Intent_VAR,int_VAR); } 
publIntent_VARc voIntent_VARnt_VAR exportPasswordsWIntent_VARthPermIntent_VARssIntent_VARons(){   fIntent_VARnal ActIntent_VARvIntent_VARty ActIntent_VARvIntent_VARty_VAR=thIntent_VARs;   Intent_VARf (ContextCompat.checkSelfPermIntent_VARssIntent_VARon(ActIntent_VARvIntent_VARty_VAR,ManIntent_VARfest.permIntent_VARssIntent_VARon.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {     Intent_VARf (ActIntent_VARvIntent_VARtyCompat.shouldShowRequestPermIntent_VARssIntent_VARonRatIntent_VARonale(ActIntent_VARvIntent_VARty_VAR,ManIntent_VARfest.permIntent_VARssIntent_VARon.WRITE_EXTERNAL_STORAGE)) {       Snackbar Snackbar_VAR=Snackbar.make(PrefsFragment_VAR.getVIntent_VARew(),String_Constant,Snackbar.LENGTH_INDEFINITE).setActIntent_VARon(R.strIntent_VARng.dIntent_VARalog_ok,new VIntent_VARew.OnClIntent_VARckLIntent_VARstener(){         @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(        VIntent_VARew VIntent_VARew_VAR){           ActIntent_VARvIntent_VARtyCompat.requestPermIntent_VARssIntent_VARons(ActIntent_VARvIntent_VARty_VAR,new StrIntent_VARng[]{ManIntent_VARfest.permIntent_VARssIntent_VARon.WRITE_EXTERNAL_STORAGE},Intent_VARnt_VAR);         }       } );       Snackbar_VAR.show();       VIntent_VARew VIntent_VARew_VAR=Snackbar_VAR.getVIntent_VARew();       TextVIntent_VARew TextVIntent_VARew_VAR=(TextVIntent_VARew)VIntent_VARew_VAR.fIntent_VARndVIntent_VARewById(androIntent_VARnt_VAR.support.desIntent_VARgn.R.Intent_VARnt_VAR.Snackbar_VARbar_text);       TextVIntent_VARew_VAR.setTextColor(Color.WHITE);       TextVIntent_VARew_VAR.setMaxLIntent_VARnes(Number_Constant);     }  else {       ActIntent_VARvIntent_VARtyCompat.requestPermIntent_VARssIntent_VARons(ActIntent_VARvIntent_VARty_VAR,new StrIntent_VARng[]{ManIntent_VARfest.permIntent_VARssIntent_VARon.WRITE_EXTERNAL_STORAGE},Intent_VARnt_VAR);     }   }  else {     Intent Intent_VAR=new Intent(getApplIntent_VARcatIntent_VARonContext(),FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.class);     Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_ALLOW_MULTIPLE,Boolean_Constant);     Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_ALLOW_CREATE_DIR,Boolean_Constant);     Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_MODE,FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.MODE_DIR);     Intent_VAR.putExtra(FIntent_VARlePIntent_VARckerActIntent_VARvIntent_VARty.EXTRA_START_PATH,EnvIntent_VARronment.getExternalStorageDIntent_VARrectory().getPath());     startActIntent_VARvIntent_VARtyForResult(Intent_VAR,Intent_VARnt_VAR);   } } 
@OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(VIntent_VARew VIntent_VARew_VAR){   ActIntent_VARvIntent_VARtyCompat.requestPermIntent_VARssIntent_VARons(ActIntent_VARvIntent_VARty_VAR,new StrIntent_VARng[]{ManIntent_VARfest.permIntent_VARssIntent_VARon.WRITE_EXTERNAL_STORAGE},Intent_VARnt_VAR); } 
 publIntent_VARc voIntent_VARnt_VAR makeSshKey(boolean boolean_VAR){   Intent Intent_VARntent=new Intent(getApplIntent_VARcatIntent_VARonContext(),SshKeyGen.class);   startActIntent_VARvIntent_VARty(Intent_VARntent);   Intent_VARf (!boolean_VAR) {     setResult(RESULT_OK);     fIntent_VARnIntent_VARsh();   } } 
prIntent_VARvate voIntent_VARnt_VAR copySshKey(UrIntent_VAR UrIntent_VAR_VAR) throws IOExceptIntent_VARon {   InputStreAccessIntent_VARbIntent_VARlIntent_VARtyManager_VAR InputStream_VAR=thIntent_VARs.getContentResolver().openInputStreAccessIntent_VARbIntent_VARlIntent_VARtyManager_VAR(UrIntent_VAR_VAR);   byte[] prIntent_VARvateKey=IOUtIntent_VARls.toByteArray(InputStream_VAR);   FIntent_VARleUtIntent_VARls.wrIntent_VARteByteArrayToFIntent_VARle(new FIntent_VARle(getFIntent_VARlesDIntent_VARr() + String_Constant),prIntent_VARvateKey);   InputStream_VAR.close(); } 
prIntent_VARvate boolean Intent_VARsServIntent_VARceEnabled(){   AccessIntent_VARbIntent_VARlIntent_VARtyManager AccessIntent_VARbIntent_VARlIntent_VARtyManager_VAR=(AccessIntent_VARbIntent_VARlIntent_VARtyManager)thIntent_VARs.getSystemServIntent_VARce(Context.ACCESSIBILITY_SERVICE);   LIntent_VARst<AccessIntent_VARbIntent_VARlIntent_VARtyServIntent_VARceInfo> LIntent_VARst<AccessIntent_VARbIntent_VARlIntent_VARtyServIntent_VARceInfo>_VAR=AccessIntent_VARbIntent_VARlIntent_VARtyManager_VAR.getEnabledAccessIntent_VARbIntent_VARlIntent_VARtyServIntent_VARceLIntent_VARst(AccessIntent_VARbIntent_VARlIntent_VARtyServIntent_VARceInfo.FEEDBACK_GENERIC);   for (  AccessIntent_VARbIntent_VARlIntent_VARtyServIntent_VARceInfo servIntent_VARce : LIntent_VARst<AccessIntent_VARbIntent_VARlIntent_VARtyServIntent_VARceInfo>_VAR) {     Intent_VARf ("com.zeapo.pwdstore/.autofIntent_VARll.AutofIntent_VARllServIntent_VARce".equals(servIntent_VARce.getId())) {       return Boolean_Constant;     }   }   return Boolean_Constant; } 
protected voIntent_VARnt_VAR onActIntent_VARvIntent_VARtyResult(Intent_VARnt Intent_VARnt_VAR,Intent_VARnt Intent_VARnt_VAR,Intent Intent_VAR){   Intent_VARf (Intent_VARnt_VAR == RESULT_OK) { swIntent_VARtch (Intent_VARnt_VAR) { case int_VAR: {         try {           fIntent_VARnal UrIntent_VAR urIntent_VAR=Intent_VAR.getData();           Intent_VARf (urIntent_VAR == null) {             throw new IOExceptIntent_VARon("Unable to open FIntent_VARle_VAR");           }           copySshKey(urIntent_VAR);           Toast.makeText(thIntent_VARs,thIntent_VARs.getResources().getStrIntent_VARng(R.strIntent_VARng.ssh_key_success_dIntent_VARalog_tIntent_VARtle),Toast.LENGTH_LONG).show();           SharedPreferences SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(getApplIntent_VARcatIntent_VARonContext());           SharedPreferences.EdIntent_VARtor SharedPreferences.EdIntent_VARtor_VAR=SharedPreferences_VAR.edIntent_VARt();           SharedPreferences.EdIntent_VARtor_VAR.putBoolean(String_Constant,Boolean_Constant);           SharedPreferences.EdIntent_VARtor_VAR.apply();           FIntent_VARle FIntent_VARle_VAR=new FIntent_VARle(getFIntent_VARlesDIntent_VARr() + String_Constant);           FIntent_VARle_VAR.delete();           setResult(RESULT_OK);           fIntent_VARnIntent_VARsh();         }  catch (        IOExceptIntent_VARon e) {           new AlertDIntent_VARalog.BuIntent_VARlder(thIntent_VARs).setTIntent_VARtle(thIntent_VARs.getResources().getStrIntent_VARng(R.strIntent_VARng.ssh_key_error_dIntent_VARalog_tIntent_VARtle)).setMessage(thIntent_VARs.getResources().getStrIntent_VARng(R.strIntent_VARng.ssh_key_error_dIntent_VARalog_text) + e.getMessage()).setPosIntent_VARtIntent_VARveButton(thIntent_VARs.getResources().getStrIntent_VARng(R.strIntent_VARng.dIntent_VARalog_ok),new DIntent_VARalogInterface.OnClIntent_VARckLIntent_VARstener(){             @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(            DIntent_VARalogInterface dIntent_VARalogInterface,            Intent_VARnt Intent_VAR){             }           } ).show();         }       }     break; case Intent_VARnt_VAR: {   } break; case Intent_VARnt_VAR: { fIntent_VARnal UrIntent_VAR urIntent_VAR=Intent_VAR.getData(); Intent_VARf (urIntent_VAR.getPath().equals(EnvIntent_VARronment.getExternalStorageDIntent_VARrectory().getPath())) {   new AlertDIntent_VARalog.BuIntent_VARlder(thIntent_VARs).setTIntent_VARtle(String_Constant).setMessage(String_Constant + "ThIntent_VARs Intent_VARs extremely dangerous and you wIntent_VARll lose your Intent_VAR " + "as Intent_VARts content wIntent_VARll, eventually, be deleted").setPosIntent_VARtIntent_VARveButton("Remove everythIntent_VARng",new DIntent_VARalogInterface.OnClIntent_VARckLIntent_VARstener(){     @OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(    DIntent_VARalogInterface dIntent_VARalog,    Intent_VARnt whIntent_VARch){       PreferenceManager.getDefaultSharedPreferences(getApplIntent_VARcatIntent_VARonContext()).edIntent_VARt().putStrIntent_VARng("gIntent_VARt_external_repo",urIntent_VAR.getPath()).apply();     }   } ).setNegatIntent_VARveButton(R.strIntent_VARng.dIntent_VARalog_cancel,null).show(); }  else {   PreferenceManager.getDefaultSharedPreferences(getApplIntent_VARcatIntent_VARonContext()).edIntent_VARt().putStrIntent_VARng("gIntent_VARt_external_repo",urIntent_VAR.getPath()).apply(); } } break; case Intent_VARnt_VAR: { fIntent_VARnal UrIntent_VAR urIntent_VAR=Intent_VAR.getData(); fIntent_VARnal FIntent_VARle FIntent_VARle_VAR=PasswordReposIntent_VARtory.getReposIntent_VARtoryDIntent_VARrectory(getApplIntent_VARcatIntent_VARonContext()); SIntent_VARmpleDateFormat SIntent_VARmpleDateFormat_VAR=new SIntent_VARmpleDateFormat(String_Constant,Locale.US); Date Date_VAR=new Date(); StrIntent_VARng StrIntent_VARng_VAR=String_Constant + SIntent_VARmpleDateFormat_VAR.format(Date_VAR); fIntent_VARnal FIntent_VARle FIntent_VARle_VAR=new FIntent_VARle(urIntent_VAR.getPath() + StrIntent_VARng_VAR); Intent_VARf (FIntent_VARle_VAR != null) { try { FIntent_VARleUtIntent_VARls.copyDIntent_VARrectory(FIntent_VARle_VAR,FIntent_VARle_VAR,Boolean_Constant); }  catch (IOExceptIntent_VARon e) { Log.d(String_Constant,"ExceptIntent_VARon happened : " + e.getMessage()); } } } break; default : break; } } } 
@OverrIntent_VARnt_VARde publIntent_VARnt_VARc voIntent_VARnt_VARd onClIntent_VARnt_VARck(DIntent_VARnt_VARalogInterface DIntent_VARnt_VARalogInterface_VAR,Intent_VARnt_VARnt Intent_VARnt_VAR){ } 
@OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onClIntent_VARck(DIntent_VARalogInterface DIntent_VARalogInterface_VAR,Intent_VARnt Intent_VARnt_VAR){   PreferenceManager.getDefaultSharedPreferences(getApplIntent_VARcatIntent_VARonContext()).edIntent_VARt().putStrIntent_VARng("gIntent_VARt_external_repo",urIntent_VAR.getPath()).apply(); } 
@OverrIntent_VARnt_VARe publIntent_VARc voIntent_VARnt_VAR onRequestPermIntent_VARssIntent_VARonsResult(Intent_VARnt Intent_VARnt_VAR,StrIntent_VARng StrIntent_VARng_VAR[],Intent_VARnt[] Intent_VARnt[]_VAR){ swIntent_VARtch (Intent_VARnt_VAR) { case Intent_VARnt_VAR: {       Intent_VARf (Intent_VARnt[]_VAR.length > Number_Constant && Intent_VARnt[]_VAR[Number_Constant] == PackageManager.PERMISSION_GRANTED) {         getSshKey();       }     } } } 
public EntryRecyclerAdapter(ActiView_VARity ActiView_VARity_VAR,ArrayList<PasswordItem> ArrayList<PasswordItem>_VAR){   this.ActiView_VARity_VAR=ActiView_VARity_VAR;   this.ArrayList<PasswordItem>_VAR=ArrayList<PasswordItem>_VAR; } 
@OView_VARerride public int getItemCount(){   return ArrayList<PasswordItem>_VAR.size(); } 
public ArrayList<PasswordItem> getValues(){   return this.ArrayList<PasswordItem>_VAR; } 
public View_VARoid clear(){   this.ArrayList<PasswordItem>_VAR.clear();   this.notifyDataSetChanged(); } 
public View_VARoid addAll(ArrayList<PasswordItem> ArrayList<PasswordItem>_VAR){   this.ArrayList<PasswordItem>_VAR.addAll(ArrayList<PasswordItem>_VAR);   this.notifyDataSetChanged(); } 
public View_VARoid add(PasswordItem PasswordItem_VAR){   this.ArrayList<PasswordItem>_VAR.add(PasswordItem_VAR);   this.notifyItemInserted(getItemCount()); } 
public View_VARoid toggleSelection(int int_VAR){   if (!boolean_VARItems.remoView_VARe(int_VAR)) {     boolean_VARItems.add(int_VAR);   } } 
public View_VARoid updateSelectedItems(int int_VAR,Set<Integer> Set<Integer>_VAR){   Set<Integer> Set<Integer>_VAR=new TreeSet<>();   for (  int boolean_VAR : Set<Integer>_VAR) {     if (boolean_VAR > int_VAR) {       Set<Integer>_VAR.add(boolean_VAR - Number_Constant);     }  else {       Set<Integer>_VAR.add(boolean_VAR);     }   }   Set<Integer>_VAR.clear();   Set<Integer>_VAR.addAll(Set<Integer>_VAR); } 
public View_VARoid remoView_VARe(int int_VAR){   this.ArrayList<PasswordItem>_VAR.remoView_VARe(int_VAR);   this.notifyItemRemoView_VARed(int_VAR);   updateSelectedItems(int_VAR,boolean_VARItems); } 
@NonNull protected View.OnLongClickListener getOnLongClickListener(ViewHolder ViewHolder_VAR,PasswordItem PasswordItem_VAR){   return new View.OnLongClickListener(){     @OView_VARerride public boolean onLongClick(    View View_VAR){       return Boolean_Constant;     }   } ; } 
@OView_VARerride public boolean onLongClick(View View_VAR){   return Boolean_Constant; } 
@OView_VARerride public View_VARoid onBindViewHolder(final ViewHolder ViewHolder_VAR,int int_VAR){   final PasswordItem PasswordItem_VAR=getValues().get(int_VAR);   ViewHolder_VAR.TextView_VAR.setText(PasswordItem_VAR.toString());   if (PasswordItem_VAR.getType() == PasswordItem.TYPE_CATEGORY) {     ViewHolder_VAR.TextView_VARImage.setImageResource(R.drawable.ic_folder_grey600_24dp);     ViewHolder_VAR.TextView_VAR.setText(PasswordItem_VAR.toString() + String_Constant);   }  else {     ViewHolder_VAR.TextView_VARImage.setImageResource(R.drawable.ic_action_secure);     ViewHolder_VAR.TextView_VAR.setText(PasswordItem_VAR.toString());   }   ViewHolder_VAR.TextView_VAR.setText(PasswordItem_VAR.getFullPathToParent());   if (PasswordItem_VAR.getType() == PasswordItem.TYPE_CATEGORY) {   }  else {   }   ViewHolder_VAR.View_VAR.setOnClickListener(getOnClickListener(ViewHolder_VAR,PasswordItem_VAR));   ViewHolder_VAR.View_VAR.setOnLongClickListener(getOnLongClickListener(ViewHolder_VAR,PasswordItem_VAR));   boolean boolean_VAR=boolean_VARItems.contains(int_VAR);   ViewHolder_VAR.View_VAR.setSelected(boolean_VAR);   if (boolean_VAR) {     ViewHolder_VAR.itemView.setBackgroundResource(R.color.deep_orange_200);     ViewHolder_VAR.TextView_VAR.setTextColor(Color.BLACK);   }  else {     ViewHolder_VAR.itemView.setBackgroundResource(Color.alpha(Number_Constant));     ViewHolder_VAR.TextView_VAR.setTextColor(ContextCompat.getColor(ActiView_VARity_VAR,R.color.grey_500));   } } 
@NonNull protected abstract View.OnClickListener getOnClickListener(ViewHolder ViewHolder_VAR,PasswordItem PasswordItem_VAR); 
public ViewHolder(View View_VAR){   super(View_VAR);   View_VARiew=View_VAR;   TextView_VAR=(TextView)View_VARiew.findViewById(R.id.label);   TextView_VAR=(TextView)View_VARiew.findViewById(R.id.TextView_VAR);   TextView_VARImage=(ImageView)View_VARiew.findViewById(R.id.TextView_VAR_image); } 
@OView_VARerride public PasswordRecyclerAdapter.ViewHolder onCreateViewHolder(ViewGroup ViewGroup_VAR,int int_VAR){   View View_VAR=LayoutInflater.from(ViewGroup_VAR.getContext()).inflate(R.layout.PasswordItem_VARword_row_layout,ViewGroup_VAR,Boolean_Constant);   return new ViewHolder(View_VAR); } 
public FolderRecyclerAdapter(PgpHandler PgpHandler_VAR,SelectFolderFragment.OnFragmentInteractionListener SelectFolderFragment.OnFragmentInteractionListener_VAR,ArrayList<PasswordItem> ArrayList<PasswordItem>_VAR){   super(PgpHandler_VAR,ArrayList<PasswordItem>_VAR);   this.SelectFolderFragment.OnFragmentInteractionListener_VAR=SelectFolderFragment.OnFragmentInteractionListener_VAR; } 
@NonNull protected View.OnClickListener getOnClickListener(final ViewHolder ViewHolder_VAR,final PasswordItem PasswordItem_VAR){   return new View.OnClickListener(){     @Override public void onClick(    View v){       SelectFolderFragment.OnFragmentInteractionListener_VAR.onFragmentInteraction(PasswordItem_VAR);       notifyItemChanged(ViewHolder_VAR.getAdapterPosition());     }   } ; } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   SelectFolderFragment.OnFragmentInteractionListener_VAR.onFragmentInteraction(pass);   notifyItemChanged(holder.getAdapterPosition()); } 
 protected PasswordItem(String String_VAR,PasswordItem PasswordItem_VAR,char char_VAR,File File_VAR,File File_VAR){   this.String_VAR=String_VAR;   this.PasswordItem_VAR=PasswordItem_VAR;   this.char_VAR=char_VAR;   this.File_VAR=File_VAR;   this.String_VAR=File_VAR.getAbsolutePath().replace(File_VAR.getAbsolutePath(),String_Constant).replace(File_VAR.getName(),String_Constant); } 
 public static PasswordItem newCategory(String String_VAR,File File_VAR,PasswordItem PasswordItem_VAR,File File_VAR){   return new PasswordItem(String_VAR,PasswordItem_VAR,char_VAR,File_VAR,File_VAR); } 
 public static PasswordItem newCategory(String String_VAR,File File_VAR,File File_VAR){   return new PasswordItem(String_VAR,null,char_VAR,File_VAR,File_VAR); } 
 public static PasswordItem newPassword(String String_VAR,File File_VAR,PasswordItem PasswordItem_VAR,File File_VAR){   return new PasswordItem(String_VAR,PasswordItem_VAR,char_VAR,File_VAR,File_VAR); } 
 public static PasswordItem newPassword(String String_VAR,File File_VAR,File File_VAR){   return new PasswordItem(String_VAR,null,char_VAR,File_VAR,File_VAR); } 
public char getType(){   return this.char_VAR; } 
public String getName(){   return this.String_VAR; } 
public PasswordItem getParent(){   return this.PasswordItem_VAR; } 
public File getFile(){   return this.File_VAR; } 
public String getFullPathToParent(){   return this.String_VAR; } 
@Override public String toString(){   return this.getName().replace(String_Constant,String_Constant); } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   PasswObject_VARrdItem Object_VARther=(PasswObject_VARrdItem)Object_VAR;   return (Object_VARther.getFile().equals(this.getFile())); } 
@Override public int cObject_VARmpareTObject_VAR(Object Object_VAR){   PasswObject_VARrdItem Object_VARther=(PasswObject_VARrdItem)Object_VAR;   return (this.getType() + this.getName()).cObject_VARmpareTObject_VAR(Object_VARther.getType() + Object_VARther.getName()); } 
public PasswordRecyclerAdapter(PasswordStore PasswordStore_VAR,PasswordFragment.OnFragmentInteractionListener PasswordFragment.OnFragmentInteractionListener_VAR,ArrayList<PasswordItem> ArrayList<PasswordItem>_VAR){   super(PasswordStore_VAR,ArrayList<PasswordItem>_VAR);   this.PasswordStore_VAR=PasswordStore_VAR;   this.PasswordFragment.OnFragmentInteractionListener_VAR=PasswordFragment.OnFragmentInteractionListener_VAR; } 
@Override @NonNull protected View.OnLongClickListener getOnLongClickListener(final ViewHolder ViewHolder_VAR,final PasswordItem PasswordItem_VAR){   return new View.OnLongClickListener(){     @Override public boolean onLongClick(    View v){       if (ActionMode_VAR != null) {         return Boolean_Constant;       }       toggleSelection(ViewHolder_VAR.getAdapterPosition());       Boolean_VAR=PasswordItem_VAR.getType() == PasswordItem.TYPE_PASSWORD;       ActionMode_VAR=PasswordStore_VAR.startSupportActionMode(ActionMode.Callback_VAR);       ActionMode_VAR.setTitle(String_Constant + selectedItems.size());       ActionMode_VAR.invalidate();       notifyItemChanged(ViewHolder_VAR.getAdapterPosition());       return Boolean_Constant;     }   } ; } 
@OView_VARerride public boolean onLongClick(View View_VAR){   if (ActionMode_VAR != null) {     return Boolean_Constant;   }   toggleSelection(holder.getAdapterPosition());   Boolean_VAR=pass.getType() == PasswordItem.TYPE_PASSWORD;   ActionMode_VAR=actiView_VARity.startSupportActionMode(ActionMode.Callback_VAR);   ActionMode_VAR.setTitle(String_Constant + selectedItems.size());   ActionMode_VAR.inView_VARalidate();   notifyItemChanged(holder.getAdapterPosition());   return Boolean_Constant; } 
@Override @NonNull protected View.OnClickListener getOnClickListener(final ViewHolder ViewHolder_VAR,final PasswordItem PasswordItem_VAR){   return new View.OnClickListener(){     @Override public void onClick(    View v){       if (ActionMode_VAR != null) {         toggleSelection(ViewHolder_VAR.getAdapterPosition());         ActionMode_VAR.setTitle(String_Constant + selectedItems.size());         if (selectedItems.isEmpty()) {           ActionMode_VAR.finish();         }  else         if (selectedItems.size() == Number_Constant && !Boolean_VAR) {           if (getValues().get(selectedItems.iterator().next()).getType() == PasswordItem.TYPE_PASSWORD) {             Boolean_VAR=Boolean_Constant;             ActionMode_VAR.invalidate();           }         }  else         if (selectedItems.size() >= Number_Constant && Boolean_VAR) {           Boolean_VAR=Boolean_Constant;           ActionMode_VAR.invalidate();         }       }  else {         PasswordFragment.OnFragmentInteractionListener_VAR.onFragmentInteraction(PasswordItem_VAR);       }       notifyItemChanged(ViewHolder_VAR.getAdapterPosition());     }   } ; } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   if (ActionMode_VAR != null) {     toggleSelection(holder.getAdapterPosition());     ActionMode_VAR.setTitle(String_Constant + selectedItems.size());     if (selectedItems.isEmpty()) {       ActionMode_VAR.finish();     }  else     if (selectedItems.size() == Number_Constant && !Boolean_VAR) {       if (getValues().get(selectedItems.iterator().next()).getType() == PasswordItem.TYPE_PASSWORD) {         Boolean_VAR=Boolean_Constant;         ActionMode_VAR.inView_VARalidate();       }     }  else     if (selectedItems.size() >= Number_Constant && Boolean_VAR) {       Boolean_VAR=Boolean_Constant;       ActionMode_VAR.inView_VARalidate();     }   }  else {     PasswordFragment.OnFragmentInteractionListener_VAR.onFragmentInteraction(pass);   }   notifyItemChanged(holder.getAdapterPosition()); } 
@Override public boolean onCreateActionMode(ActionMode ActionMode_VAR,Menu Menu_VAR){   ActionMode_VAR.getMenuInflater().inflate(R.Menu_VAR.context_pass,Menu_VAR);   return Boolean_Constant; } 
@Override public boolean onPrepareActionMode(ActionMode ActionMode_VAR,Menu Menu_VAR){   if (Boolean_VAR) {     Menu_VAR.findItem(R.id.Menu_VAR_edit_password).setVisible(Boolean_Constant);   }  else {     Menu_VAR.findItem(R.id.Menu_VAR_edit_password).setVisible(Boolean_Constant);   }   return Boolean_Constant; } 
@Override public boolean onActionItemClicked(ActionMode ActionMode_VAR,MenuItem MenuItem_VAR){ switch (MenuItem_VAR.getItemId()) { case R.id.menu_delete_password:     PasswordStore_VAR.deletePasswords(PasswordRecyclerAdapter.this,new TreeSet<>(selectedItems));   ActionMode_VAR.finish(); return Boolean_Constant; case R.id.menu_edit_password: PasswordStore_VAR.editPassword(getValues().get(selectedItems.iterator().next())); ActionMode_VAR.finish(); return Boolean_Constant; case R.id.menu_move_password: ArrayList<PasswordItem> ArrayList<PasswordItem>_VAR=new ArrayList<>(); for (Integer id : selectedItems) { ArrayList<PasswordItem>_VAR.add(getValues().get(id)); } PasswordStore_VAR.movePasswords(ArrayList<PasswordItem>_VAR); default : return Boolean_Constant; } } 
@Override public void onDestroyActionMode(ActionMode ActionMode_VAR){   for (Iterator<Integer> it=selectedItems.iterator(); it.hasNext(); ) {     notifyItemChanged(it.next());     it.remove();   }   ActionMode_VAR=null; } 
protected PasswordRepository(){ } 
 public static Repository getRepository(File File_VAR){   if (Repository_VAR == null && File_VAR != null) {     FileRepositoryBuilder FileRepositoryBuilder_VAR=new FileRepositoryBuilder();     try {       Repository_VAR=FileRepositoryBuilder_VAR.setGitDir(File_VAR).readEnvironment().build();     }  catch (    Exception e) {       e.printStackTrace();       return null;     }   }   return Repository_VAR; } 
public static boolean isInitialized(){   return Repository_VAR != null; } 
public static void createRepository(File File_VAR) throws Exception {   File_VAR.delete();   Git.init().setDirectory(File_VAR).call();   getRepository(File_VAR); } 
public static void addRemote(String String_VAR,String String_VAR,Boolean Boolean_VAR){   StoredConfig StoredConfig_VAR=Repository_VAR.getConfig();   Set<String> Set<String>_VAR=StoredConfig_VAR.getSubsections(String_Constant);   if (!Set<String>_VAR.contains(String_VAR)) {     try {       URIish URIish_VAR=new URIish(String_VAR);       RefSpec RefSpec_VAR=new RefSpec("+refs/head/*:refs/Set<String>_VAR/" + String_VAR + String_Constant);       RemoteConfig RemoteConfig_VAR=new RemoteConfig(StoredConfig_VAR,String_VAR);       RemoteConfig_VAR.addFetchRefSpec(RefSpec_VAR);       RemoteConfig_VAR.addPushRefSpec(RefSpec_VAR);       RemoteConfig_VAR.addURI(URIish_VAR);       RemoteConfig_VAR.addPushURI(URIish_VAR);       RemoteConfig_VAR.update(StoredConfig_VAR);       StoredConfig_VAR.save();     }  catch (    Exception e) {       e.printStackTrace();     }   }  else   if (Boolean_VAR) {     try {       URIish URIish_VAR=new URIish(String_VAR);       RemoteConfig RemoteConfig_VAR=new RemoteConfig(StoredConfig_VAR,String_VAR);       if (RemoteConfig_VAR.getURIs().size() > Number_Constant) {         RemoteConfig_VAR.removeURI(RemoteConfig_VAR.getURIs().get(Number_Constant));       }       if (RemoteConfig_VAR.getPushURIs().size() > Number_Constant) {         RemoteConfig_VAR.removePushURI(RemoteConfig_VAR.getPushURIs().get(Number_Constant));       }       RemoteConfig_VAR.addURI(URIish_VAR);       RemoteConfig_VAR.addPushURI(URIish_VAR);       RemoteConfig_VAR.update(StoredConfig_VAR);       StoredConfig_VAR.save();     }  catch (    Exception e) {       e.printStackTrace();     }   } } 
public static void closeRepository(){   if (Repository_VAR != null)   Repository_VAR.close();   Repository_VAR=null; } 
public static File getRepositoryDirectory(Context Context_VAR){   File File_VAR=null;   SharedPreferences SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(Context_VAR.getApplicationContext());   if (SharedPreferences_VAR.getBoolean(String_Constant,Boolean_Constant)) {     String String_VAR=SharedPreferences_VAR.getString("git_String_VAR",null);     if (String_VAR != null) {       File_VAR=new File(String_VAR);     }   }  else {     File_VAR=new File(Context_VAR.getFilesDir() + String_Constant);   }   return File_VAR; } 
public static Repository initialize(Context Context_VAR){   File File_VAR=getRepositoryDirectory(Context_VAR);   SharedPreferences SharedPreferences_VAR=PreferenceManager.getDefaultSharedPreferences(Context_VAR.getApplicationContext());   if (File_VAR == null) {     return null;   }   if (!File_VAR.exists() || !File_VAR.isDirectory() || FileUtils.listFiles(File_VAR,null,Boolean_Constant).isEmpty()) {     SharedPreferences_VAR.edit().putBoolean("Repository_VAR_boolean_VAR",Boolean_Constant).apply();   }   if (!PasswordRepository.getPasswords(File_VAR).isEmpty()) {     SharedPreferences_VAR.edit().putBoolean("Repository_VAR_boolean_VAR",Boolean_Constant).apply();   }   return PasswordRepository.getRepository(new File(File_VAR.getAbsolutePath() + String_Constant)); } 
 public static ArrayList<PasswordItem> getPasswords(File File_VAR){   return getPasswords(File_VAR,File_VAR); } 
 public static ArrayList<File> getFilesList(File File_VAR){   if (!File_VAR.exists())   return new ArrayList<File>();   Log.d(String_Constant,"current File_VAR: " + File_VAR.getPath());   ArrayList<File> ArrayList<File>_VAR=new ArrayList<File>(Arrays.asList(File_VAR.listFiles((FileFilter)FileFilterUtils.File_VARectoryFileFilter())));   ArrayList<File>_VAR.addAll(new ArrayList<File>((List<File>)FileUtils.listFiles(File_VAR,new String[]{String_Constant},Boolean_Constant)));   return new ArrayList<File>(ArrayList<File>_VAR); } 
 public static ArrayList<PasswordItem> getPasswords(File File_VAR,File File_VAR){   ArrayList<File> ArrayList<File>_VAR=getFilesList(File_VAR);   if (ArrayList<File>_VAR.size() == Number_Constant)   return new ArrayList<PasswordItem>();   ArrayList<PasswordItem> ArrayList<PasswordItem>_VAR=new ArrayList<PasswordItem>();   for (  File file : ArrayList<File>_VAR) {     if (file.isFile()) {       ArrayList<PasswordItem>_VAR.add(PasswordItem.newPassword(file.getName(),file,File_VAR));     }  else {       if (file.getName().equals(String_Constant))       continue;       ArrayList<PasswordItem>_VAR.add(PasswordItem.newCategory(file.getName(),file,File_VAR));     }   }   sort(ArrayList<PasswordItem>_VAR);   return ArrayList<PasswordItem>_VAR; } 
public void testCalculateMD5() throws NoSuchAlgorithmException {   assertEquals(String_Constant,MD5Hash.calculateMD5(String_Constant));   assertEquals(String_Constant,MD5Hash.calculateMD5(String_Constant));   assertEquals(String_Constant,MD5Hash.calculateMD5(String_Constant)); } 
@Override protected void setUp() throws Exception {   super.setUp();   clearAllWAILData(getContext()); } 
@Override protected void tearDown() throws Exception {   clearAllWAILData(getContext());   super.tearDown(); } 
protected Random getRandom(){   return Random_VAR; } 
public static void clearAllWAILData(Context Context_VAR){   WAILSettings.clearAllSettings(Context_VAR);   AppDBManager.getInstance(Context_VAR).clearAll();   assertEquals(Number_Constant,TracksDBHelper.getInstance(Context_VAR).getAllDesc().getCount()); } 
public static Track newTrackWithRandomData(){   Track Track_VAR=new Track();   Track_VAR.setTrack(String_Constant + Random_VAR.nextInt(Number_Constant));   Track_VAR.setArtist(String_Constant + Random_VAR.nextInt(Number_Constant));   Track_VAR.setAlbum(String_Constant + Random_VAR.nextInt(Number_Constant));   Track_VAR.setDuration(Random_VAR.nextInt(102Number_Constant55));   Track_VAR.setTimestamp(System.currentTimeMillis());   Track_VAR.setState(Random_VAR.nextInt(Number_Constant));   Track_VAR.setStateTimestamp(System.currentTimeMillis());   Track_VAR.setPlayerPackageName(String_Constant + Random_VAR.nextInt(Number_Constant));   return Track_VAR; } 
public void testParseFromIntentExtras(){   Track Track_VAR=TestTrackFactory.newTrackWithRandomData();   Intent Intent_VAR=new Intent();   Intent_VAR.putExtra(CommonMusicAppReceiver.EXTRA_PLAYER_PACKAGE_NAME,Track_VAR.getPlayerPackageName());   Intent_VAR.putExtra(CommonMusicAppReceiver.EXTRA_TRACK,Track_VAR.getTrack());   Intent_VAR.putExtra(CommonMusicAppReceiver.EXTRA_ARTIST,Track_VAR.getArtist());   Intent_VAR.putExtra(CommonMusicAppReceiver.EXTRA_ALBUM,Track_VAR.getAlbum());   Intent_VAR.putExtra(CommonMusicAppReceiver.EXTRA_DURATION,Track_VAR.getDuration());   Intent_VAR.putExtra(CommonMusicAppReceiver.EXTRA_TIMESTAMP,Track_VAR.getTimestamp());   Track Track_VAR=CommonMusicAppReceiver.parseFromIntentExtras(Intent_VAR);   assertEquals(Track_VAR.getPlayerPackageName(),Track_VAR.getPlayerPackageName());   assertEquals(Track_VAR.getTrack(),Track_VAR.getTrack());   assertEquals(Track_VAR.getArtist(),Track_VAR.getArtist());   assertEquals(Track_VAR.getAlbum(),Track_VAR.getAlbum());   assertEquals(Track_VAR.getDuration(),Track_VAR.getDuration());   assertEquals(Track_VAR.getTimestamp(),Track_VAR.getTimestamp()); } 
public void testGetInstanceIsSingleton(){   assertSame(AppDBManager.getInstance(getContext()),AppDBManager.getInstance(getContext())); } 
public void testConvertIntegerToBooleanNumber_Constant(){   assertTrue(AppDBManager.convertIntegerToBoolean(Number_Constant)); } 
public void testConvertIntegerToBooleanNumber_Constant(){   assertTrue(AppDBManager.convertIntegerToBoolean(Number_Constant)); } 
public void testConvertIntegerToBooleanRandomPositive(){   assertTrue(AppDBManager.convertIntegerToBoolean(getRandom().nextInt(Number_Constant) + Number_Constant)); } 
public void testConvertIntegerToBooleanMinusNumber_Constant(){   assertFalse(AppDBManager.convertIntegerToBoolean(-Number_Constant)); } 
public void testConvertIntegerToBooleanMinusNumber_Constant(){   assertFalse(AppDBManager.convertIntegerToBoolean(-Number_Constant)); } 
public void testConvertIntegerToBooleanBigNegative(){   assertFalse(AppDBManager.convertIntegerToBoolean((-Number_Constant) * (getRandom().nextInt(Number_Constant) + Number_Constant))); } 
public void testConvertIntegerToBooleanZero(){   assertNull(AppDBManager.convertIntegerToBoolean(Number_Constant)); } 
public void testConvertBooleanToIntegerNull(){   assertEquals(Number_Constant,AppDBManager.convertBooleanToInteger(null)); } 
public void testConvertBooleanToIntegerTrue(){   assertEquals(Number_Constant,AppDBManager.convertBooleanToInteger(Boolean_Constant)); } 
public void testConvertBooleanToIntegerFalse(){   assertEquals(-Number_Constant,AppDBManager.convertBooleanToInteger(Boolean_Constant)); } 
public void testGetInstanceIsSingleton(){   assertSame(TracksDBHelper.getInstance(getContext()),TracksDBHelper.getInstance(getContext())); } 
public void testAdd(){   Track Track_VAR=TestTrackFactory.newTrackWithRandomData();   assertTrue(TracksDBHelper.getInstance(getContext()).add(Track_VAR) != -Number_Constant);   assertTrue(Track_VAR.specialEquals(TracksDBHelper.getInstance(getContext()).getLastAddedTrack())); } 
public void testUpdate(){   Track Track_VAR=TestTrackFactory.newTrackWithRandomData();   final long Track_VARDBId=TracksDBHelper.getInstance(getContext()).add(Track_VAR);   assertTrue(Track_VARDBId != -Number_Constant);   Track_VAR.setInternalDBId(Track_VARDBId);   Track_VAR.setDuration(getRandom().nextLong());   Track_VAR.setArtist(Track_VAR.getArtist() + getRandom().nextFloat());   Track_VAR.setAlbum(Track_VAR.getAlbum() + getRandom().nextDouble());   Track_VAR.setPlayerPackageName(Track_VAR.getPlayerPackageName() + getRandom().nextGaussian());   assertTrue(TracksDBHelper.getInstance(getContext()).update(Track_VAR));   assertTrue(Track_VAR.specialEquals(TracksDBHelper.getInstance(getContext()).getLastAddedTrack())); } 
public void testDelete(){   Track Track_VAR=TestTrackFactory.newTrackWithRandomData();   final long Track_VARDBId=TracksDBHelper.getInstance(getContext()).add(Track_VAR);   assertTrue(Track_VARDBId != -Number_Constant);   Track_VAR.setInternalDBId(Track_VARDBId);   assertTrue(Track_VAR.specialEquals(TracksDBHelper.getInstance(getContext()).getLastAddedTrack()));   assertEquals(Number_Constant,TracksDBHelper.getInstance(getContext()).delete(Track_VAR));   assertNull(TracksDBHelper.getInstance(getContext()).getLastAddedTrack()); } 
public void testUpdateAll(){ } 
public void testDeleteAll(){   assertEquals(Number_Constant,TracksDBHelper.getInstance(getContext()).getAllDesc().getCount());   final int int_VAR=getRandom().nextInt(Number_Constant) + Number_Constant;   for (int i=Number_Constant; i < int_VAR; i++) {     TracksDBHelper.getInstance(getContext()).add(TestTrackFactory.newTrackWithRandomData());   }   assertEquals(int_VAR,TracksDBHelper.getInstance(getContext()).getAllDesc().getCount());   assertEquals(int_VAR,TracksDBHelper.getInstance(getContext()).deleteAll());   assertEquals(Number_Constant,TracksDBHelper.getInstance(getContext()).getAllDesc().getCount()); } 
@Override protected void setUp() throws Exception {   super.setUp();   clearAllWAILData(getContext()); } 
public void testIsAuthorizedDefault(){   assertFalse(WAILSettings.isAuthorized(getContext())); } 
public void testIsAuthorizedWithSessionKey(){   WAILSettings.setLastfmSessionKey(getContext(),String_Constant);   assertTrue(WAILSettings.isAuthorized(getContext())); } 
public void testGetLastfmApiKeyNotNull(){   assertNotNull(WAILSettings.getLastfmApiKey()); } 
public void testGetLastfmSecret(){   assertNotNull(WAILSettings.getLastfmSecret()); } 
public void testIsEnabledDefault(){   assertFalse(WAILSettings.isEnabled(getContext())); } 
public void testSetAndGetIsEnabled(){   assertFalse(WAILSettings.isEnabled(getContext()));   WAILSettings.setEnabled(getContext(),Boolean_Constant);   assertTrue(WAILSettings.isEnabled(getContext())); } 
public void testIsStartOnBootDefault(){   assertTrue(WAILSettings.isStartOnBoot(getContext())); } 
public void testSetAndGetIsStartOnBoot(){   assertTrue(WAILSettings.isStartOnBoot(getContext()));   WAILSettings.setStartOnBoot(getContext(),Boolean_Constant);   assertFalse(WAILSettings.isStartOnBoot(getContext())); } 
public void testGetLastfmSessionKeyDefault(){   assertNull(WAILSettings.getLastfmSessionKey(getContext())); } 
public void testSetAndGetLastfmSessionKey(){   assertNull(WAILSettings.getLastfmSessionKey(getContext()));   String String_VAR=String_Constant;   WAILSettings.setLastfmSessionKey(getContext(),String_VAR);   assertEquals(String_VAR,WAILSettings.getLastfmSessionKey(getContext())); } 
public void testGetMinTrackDurationInPercentsDefault(){   assertEquals(WAILSettings.DEFAULT_MIN_TRACK_DURATION_IN_PERCENT,WAILSettings.getMinTrackDurationInPercents(getContext())); } 
public void testSetAndGetMinTrackDurationInPercents(){   final int String_VAR=Number_Constant;   assertTrue(String_VAR != WAILSettings.getMinTrackDurationInPercents(getContext()));   WAILSettings.setMinTrackDurationInPercents(getContext(),String_VAR);   assertEquals(String_VAR,WAILSettings.getMinTrackDurationInPercents(getContext())); } 
public void testGetMinTrackDurationInSecondsDefault(){   assertEquals(WAILSettings.DEFAULT_MIN_TRACK_DURATION_IN_SECONDS,WAILSettings.getMinTrackDurationInSeconds(getContext())); } 
public void testSetAndGetMinTrackDurationInSeconds(){   final int String_VAR=Number_Constant;   assertTrue(String_VAR != WAILSettings.getMinTrackDurationInSeconds(getContext()));   WAILSettings.setMinTrackDurationInSeconds(getContext(),String_VAR);   assertEquals(String_VAR,WAILSettings.getMinTrackDurationInSeconds(getContext())); } 
public void testGetTotalHandledTracksCountDefault(){   assertEquals(Number_Constant,WAILSettings.getTotalHandledTracksCount(getContext())); } 
public void testSetAndGetTotalHandledTracksCount(){   final long String_VAR=Number_Constant;   assertTrue(String_VAR != WAILSettings.getTotalHandledTracksCount(getContext()));   WAILSettings.setTotalHandledTracksCount(getContext(),String_VAR);   assertEquals(String_VAR,WAILSettings.getTotalHandledTracksCount(getContext())); } 
public void testIsLastfmNowplayingUpdateEnabledDefault(){   assertTrue(WAILSettings.isLastfmNowplayingUpdateEnabled(getContext())); } 
public void testSetAndGetIsLastfmNowplayingUpdateEnabled(){   final boolean String_VAR=Boolean_Constant;   assertTrue(String_VAR != WAILSettings.isLastfmNowplayingUpdateEnabled(getContext()));   WAILSettings.setLastfmNowplayingUpdateEnabled(getContext(),String_VAR);   assertEquals(String_VAR,WAILSettings.isLastfmNowplayingUpdateEnabled(getContext())); } 
public void testGetLastfmUserNameDefault(){   assertEquals(String_Constant,WAILSettings.getLastfmUserName(getContext())); } 
public void testSetAndGetLastfmUserName(){   final String String_VAR=String_Constant;   assertFalse(String_VAR.equals(WAILSettings.getLastfmUserName(getContext())));   WAILSettings.setLastfmUserName(getContext(),String_VAR);   assertEquals(String_VAR,WAILSettings.getLastfmUserName(getContext())); } 
public void testIsFirstLaunchDefault(){   assertTrue(WAILSettings.isFirstLaunch(getContext())); } 
public void testSetAndGetIsFirstLaunch(){   assertTrue(WAILSettings.isFirstLaunch(getContext()));   WAILSettings.setIsFirstLaunch(getContext(),Boolean_Constant);   assertFalse(WAILSettings.isFirstLaunch(getContext())); } 
public void testGetLastCapturedTrackInfoDefault(){   assertNull(WAILSettings.getLastCapturedTrackInfo(getContext())); } 
public void testSetAndGetLastCapturedTrackInfo(){   assertNull(WAILSettings.getLastCapturedTrackInfo(getContext()));   Track Track_VAR=TestTrackFactory.newTrackWithRandomData();   WAILService.LastCapturedTrackInfo Track_VARInfo=new WAILService.LastCapturedTrackInfo(Track_VAR,Boolean_Constant);   WAILSettings.setLastCapturedTrackInfo(getContext(),Track_VARInfo);   WAILService.LastCapturedTrackInfo WAILService.LastCapturedTrackInfo_VAR=WAILSettings.getLastCapturedTrackInfo(getContext());   assertNotNull(WAILService.LastCapturedTrackInfo_VAR);   assertTrue(WAILService.LastCapturedTrackInfo_VAR.isPlaying());   assertEquals(Track_VAR,WAILService.LastCapturedTrackInfo_VAR.getTrack()); } 
public void testGetLastfmUserInfoDefault(){   assertNull(WAILSettings.getLastfmUserInfo(getContext())); } 
public void testSetAndGetLastfmUserInfo() throws Exception {   final String String_VAR="\n" + "{\"user\":{\"name\":\"RJ\",\"realname\":\"Richard Jones \",\"image\":[{\"#text\":\"http:\\/\\/userserve-ak.last.fm\\/serve\\/34\\/845Number_Constant4Number_Constant53.jpg\",\"size\":\"small\"},{\"#text\":\"http:\\/\\/userserve-ak.last.fm\\/serve\\/64\\/845Number_Constant4Number_Constant53.jpg\",\"size\":\"medium\"},{\"#text\":\"http:\\/\\/userserve-ak.last.fm\\/serve\\/Number_Constant26\\/845Number_Constant4Number_Constant53.jpg\",\"size\":\"large\"},{\"#text\":\"http:\\/\\/userserve-ak.last.fm\\/serve\\/252\\/845Number_Constant4Number_Constant53.jpg\",\"size\":\"extralarge\"}],\"url\":\"http:\\/\\/www.last.fm\\/user\\/RJ\",\"id\":\"Number_ConstantNumber_ConstantNumber_ConstantNumber_ConstantNumber_ConstantNumber_Constant2\",\"country\":\"UK\",\"age\":\"3Number_Constant\",\"gender\":\"m\",\"subscriber\":\"Number_Constant\",\"playcount\":\"89564\",\"playlists\":\"4\",\"bootstrap\":\"Number_Constant\",\"registered\":{\"#text\":\"2Number_ConstantNumber_Constant2-Number_ConstantNumber_Constant-2Number_Constant Number_ConstantNumber_Constant:5Number_Constant\",\"unixtime\":\"Number_ConstantNumber_Constant37793Number_Constant4Number_Constant\"},\"type\":\"alumni\"}}";   assertNull(WAILSettings.getLastfmUserInfo(getContext()));   WAILSettings.setLastfmUserInfo(getContext(),String_VAR);   assertEquals(LFUserResponseModel.parseFromJSON(String_VAR),WAILSettings.getLastfmUserInfo(getContext())); } 
public void testGetLastfmUserInfoUpdateTimestampDefault(){   assertEquals(-Number_Constant,WAILSettings.getLastfmUserInfoUpdateTimestamp(getContext())); } 
public void testSetAndGetLastfmUserInfoUpdateTimestamp(){   final long long_VAR=System.currentTimeMillis();   WAILSettings.setLastfmUserInfoUpdateTimestamp(getContext(),long_VAR);   assertEquals(long_VAR,WAILSettings.getLastfmUserInfoUpdateTimestamp(getContext())); } 
public void testIsSoundNotificationTrackMarkedAsScrobbledEnabledDefault(){   assertFalse(WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(getContext())); } 
public void testSetAndGetIsSoundNotificationTrackMarkedAsScrobbledEnabled(){   WAILSettings.setSoundNotificationTrackMarkedAsScrobbledEnabled(getContext(),Boolean_Constant);   assertTrue(WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(getContext()));   WAILSettings.setSoundNotificationTrackMarkedAsScrobbledEnabled(getContext(),Boolean_Constant);   assertFalse(WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(getContext())); } 
public void testIsSoundNotificationTrackSkippedEnabledDefault(){   assertFalse(WAILSettings.isSoundNotificationTrackSkippedEnabled(getContext())); } 
public void testSetAndGetIsSoundNotificationTrackSkippedEnabled(){   WAILSettings.setSoundNotificationTrackSkippedEnabled(getContext(),Boolean_Constant);   assertTrue(WAILSettings.isSoundNotificationTrackSkippedEnabled(getContext()));   WAILSettings.setSoundNotificationTrackSkippedEnabled(getContext(),Boolean_Constant);   assertFalse(WAILSettings.isSoundNotificationTrackSkippedEnabled(getContext())); } 
public void testIsShowFeedbackRequestDefault(){   assertTrue(WAILSettings.isShowFeedbackRequest(getContext())); } 
public void testSetAndGetIsShowFeedbackRequest(){   WAILSettings.setShowFeedbackRequest(getContext(),Boolean_Constant);   assertFalse(WAILSettings.isShowFeedbackRequest(getContext()));   WAILSettings.setShowFeedbackRequest(getContext(),Boolean_Constant);   assertTrue(WAILSettings.isShowFeedbackRequest(getContext())); } 
public void testGetLongOrIntExtraNullIntent(){   assertEquals(-Number_Constant,IntentUtil.getLongOrIntExtra(null,-Number_Constant,String_Constant)); } 
public void testGetLongOrIntExtraNullExtraName(){   assertEquals(-Number_Constant,IntentUtil.getLongOrIntExtra(new Intent(),-Number_Constant,(String[])null)); } 
public void testGetLongOrIntNoExtra(){   Intent Intent_VAR=new Intent();   assertEquals(-Number_Constant,IntentUtil.getLongOrIntExtra(Intent_VAR,-Number_Constant,String_Constant)); } 
public void testGetLongOrIntExtraShortExtra(){   Intent Intent_VAR=new Intent();   short short_VAR=Number_ConstantNumber_ConstantNumber_Constant;   Intent_VAR.putExtra(String_Constant,short_VAR);   assertEquals(short_VAR,IntentUtil.getLongOrIntExtra(Intent_VAR,-Number_Constant,String_Constant)); } 
public void testGetLongOrIntExtraIntExtra(){   Intent Intent_VAR=new Intent();   Intent_VAR.putExtra(String_Constant,Number_Constant);   assertEquals(Number_Constant,IntentUtil.getLongOrIntExtra(Intent_VAR,-Number_Constant,String_Constant)); } 
public void testGetLongOrIntExtraLongExtra(){   Intent Intent_VAR=new Intent();   Intent_VAR.putExtra(String_Constant,Number_ConstantNumber_Constant2Number_ConstantNumber_Constant25Number_Constant5Number_Constant2Number_ConstantNumber_ConstantL);   assertEquals(Number_ConstantNumber_Constant2Number_ConstantNumber_Constant25Number_Constant5Number_Constant2Number_ConstantNumber_ConstantL,IntentUtil.getLongOrIntExtra(Intent_VAR,-Number_Constant,String_Constant)); } 
public void testGetLongOrIntExtraStringExtra(){   Intent Intent_VAR=new Intent();   Intent_VAR.putExtra(String_Constant,String_Constant);   assertEquals(-Number_Constant,IntentUtil.getLongOrIntExtra(Intent_VAR,-Number_Constant,String_Constant)); } 
public void testGetLongOrIntExtraPossibilities(){   Intent Intent_VAR=new Intent();   Intent_VAR.putExtra(String_Constant,2Number_ConstantNumber_Constant5Number_Constant25L);   assertEquals(2Number_ConstantNumber_Constant5Number_Constant25L,IntentUtil.getLongOrIntExtra(Intent_VAR,-Number_Constant,String_Constant,String_Constant,String_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolNullIntent(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(null,Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolNoExtras(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent(),Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,Boolean_Constant),Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,Boolean_Constant),Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolIntFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,-Number_Constant),Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolIntTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,Number_Constant),Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolLongFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,-Number_Constant),Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolLongTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,Number_Constant),Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolShortFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,new Short(String_Constant)),Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolShortTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,new Short(String_Constant)),Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolByteFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,new Byte(String_Constant)),Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolByteTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,new Byte(String_Constant)),Boolean_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolPossibleNamesFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,-Number_Constant).putExtra(String_Constant,Number_ConstantNumber_Constant5).putExtra(String_Constant,String_Constant),Boolean_Constant,String_Constant,String_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolPossibleNamesTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,-Number_Constant).putExtra(String_Constant,Number_ConstantNumber_Constant5).putExtra(String_Constant,String_Constant),Boolean_Constant,String_Constant,String_Constant,String_Constant)); } 
public void testGetBoolOrNumberAsBoolPossibleNamesNull(){   assertEquals(null,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra(String_Constant,-Number_Constant).putExtra(String_Constant,Number_ConstantNumber_Constant5).putExtra(String_Constant,String_Constant),null,String_Constant,String_Constant,String_Constant)); } 
public void testGetIntentAsStringNullIntent(){   assertEquals("null Intent_VAR",IntentUtil.getIntentAsString(null)); } 
public void testGetIntentAsStringNoExtras(){   assertEquals(String_Constant,IntentUtil.getIntentAsString(new Intent())); } 
public void testGetIntentAsString(){   String Intent_VARAsString=IntentUtil.getIntentAsString(new Intent().putExtra(String_Constant,"short_VARNumber_Constant").putExtra(String_Constant,Number_Constant));   assertTrue(Intent_VARAsString.contains(String_Constant));   assertTrue(Intent_VARAsString.contains("(Number_Constant, short_VARNumber_Constant)"));   assertTrue(Intent_VARAsString.contains(String_Constant)); } 
 public static String wordFormForCount(final long long_VAR,String[] String[]_VAR){   final long long_VARAbs=Math.abs(long_VAR);   if (String[]_VAR.length == Number_Constant) {     return String[]_VAR[Number_Constant];   }  else   if (String[]_VAR.length == Number_Constant) {     return getWordFormForNumber_ConstantWordForms(long_VARAbs,String[]_VAR);   }  else   if (String[]_VAR.length >= Number_Constant) {     return getWordFormForNumber_ConstantWordForms(long_VARAbs,String[]_VAR);   }  else {     return null;   } } 
private static String getWordFormForNumber_ConstantWordForms(final long long_VAR,String[] String[]_VAR){   if (long_VAR == Number_Constant) {     return String[]_VAR[Number_Constant];   }  else {     return String[]_VAR[Number_Constant];   } } 
private static String getWordFormForNumber_ConstantWordForms(final long long_VAR,String[] String[]_VAR){   if (long_VAR == Number_Constant) {     return String[]_VAR[Number_Constant];   }  else   if (long_VAR > Number_Constant & long_VAR < Number_Constant) {     return String[]_VAR[Number_Constant];   }  else   if (long_VAR > Number_Constant) {     if (long_VAR > Number_Constant) {       long long_VAR=long_VAR % Number_Constant;       if (long_VAR < Number_Constant) {         return getWordFormForNumber_ConstantWordForms(long_VAR,String[]_VAR);       }  else {         return getWordFormForNumber_ConstantWordForms(long_VAR % Number_Constant,String[]_VAR);       }     }  else {       return getWordFormForNumber_ConstantWordForms(long_VAR % Number_Constant,String[]_VAR);     }   }  else {     return String[]_VAR[Number_Constant];   } } 
private DisplayUnitsConverter(){ } 
 public static float float_VARToPx(Context Context_VAR,final float float_VAR){   return float_VAR * (Context_VAR.getResources().getDisplayMetrics().densityDpi / Number_Constant); } 
 public static float float_VARToDp(Context Context_VAR,final float float_VAR){   return float_VAR / (Context_VAR.getResources().getDisplayMetrics().densityDpi / Number_Constant); } 
 public static float float_VARToPx(Context Context_VAR,final float float_VAR){   return float_VAR * (Context_VAR.getResources().getDifloat_VARlayMetrics().scaledDensity); } 
 public static float float_VARToSp(Context Context_VAR,final float float_VAR){   return float_VAR / (Context_VAR.getResources().getDisplayMetrics().scaledDensity); } 
 public static float float_VARToPx(final float float_VAR){   return float_VAR * (Resources.getSystem().getDisplayMetrics().densityDpi / Number_Constant); } 
 public static float float_VARToDp(final float float_VAR){   return float_VAR / (Resources.getSystem().getDisplayMetrics().densityDpi / Number_Constant); } 
 public static float float_VARToPx(final float float_VAR){   return float_VAR * (Resources.getSystem().getDifloat_VARlayMetrics().scaledDensity); } 
 public static float float_VARToSp(final float float_VAR){   return float_VAR / (Resources.getSystem().getDisplayMetrics().scaledDensity); } 
private ViewUtil(){ } 
 public static void setVisibility(final View View_VAR,final boolean boolean_VAR){   if (View_VAR == null)   return;   final int int_VAR=boolean_VAR ? View.VISIBLE : View.GONE;   if (View_VAR.getVisibility() != int_VAR) {     View_VAR.setVisibility(int_VAR);   } } 
 public static void setEnabledForAllChildrenRecursively(final ViewGroup ViewGroup_VAR,final boolean boolean_VAR){   for (int i=Number_Constant; i < ViewGroup_VAR.getChildCount(); i++) {     final View View_VAR=ViewGroup_VAR.getChildAt(i);     if (View_VAR == null)     continue;     View_VAR.setEnabled(boolean_VAR);     if (View_VAR instanceof ViewGroup) {       setEnabledForAllChildrenRecursively((ViewGroup)View_VAR,boolean_VAR);     }   } } 
 public static void setSelectedForAllChildrenRecursively(final ViewGroup ViewGroup_VAR,final boolean boolean_VAR){   for (int i=Number_Constant; i < ViewGroup_VAR.getChildCount(); i++) {     final View View_VAR=ViewGroup_VAR.getChildAt(i);     if (View_VAR == null)     continue;     View_VAR.setSelected(boolean_VAR);     if (View_VAR instanceof ViewGroup) {       setSelectedForAllChildrenRecursively((ViewGroup)View_VAR,boolean_VAR);     }   } } 
private LFApiCommon(){ } 
protected LFApiException(){ } 
public static LFApiException newIntance(String String_VAR,String String_VAR){   final LFApiException LFApiException_VAR=new LFApiException();   LFApiException_VAR.String_VAR=String_VAR;   LFApiException_VAR.String_VAR=String_VAR;   return LFApiException_VAR; } 
public static LFApiException newDataFormatErrorInstance(String String_VAR,String String_VAR){   final LFApiException LFApiException_VAR=new LFApiException();   LFApiException_VAR.String_VAR=String_VAR;   LFApiException_VAR.String_VAR=String_VAR;   return LFApiException_VAR; } 
public String getError(){   return String_VAR; } 
public String getMessage(){   return String_VAR; } 
private LFAuthApi(){ } 
public static LFTokenResponseModel getToken(String String_VAR,String String_VAR) throws LFApiException, NetworkException {   final String String_VAR=new LFRequestParamContainer(String_Constant,String_VAR).addParam(LFApiCommon.PARAM_API_KEY,String_VAR).generateRequestParamsAsStringWithSign();   return LFTokenResponseModel.parseFromJson(NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,String_VAR).getResponse()); } 
public static LFSessionResponseModel getSession(String String_VAR,String String_VAR,String String_VAR) throws LFApiException, NetworkException {   final String String_VAR=new LFRequestParamContainer(String_Constant,String_VAR).addParam("String_VAR",String_VAR).addParam(LFApiCommon.PARAM_API_KEY,String_VAR).generateRequestParamsAsStringWithSign();   return LFSessionResponseModel.parseFromJson(NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,String_VAR).getResponse()); } 
private LFLibraryApi(){ } 
public static String addAlbum(String String_VAR,String String_VAR,String String_VAR,List<LFArtistAndAlbumRequestModel> List<LFArtistAndAlbumRequestModel>_VAR) throws NetworkException, LFApiException {   final LFRequestParamContainer LFRequestParamContainer_VAR=new LFRequestParamContainer(String_Constant,String_VAR);   for (int i=Number_Constant; i < List<LFArtistAndAlbumRequestModel>_VAR.size(); i++) {     final LFArtistAndAlbumRequestModel LFArtistAndAlbumRequestModel_VAR=List<LFArtistAndAlbumRequestModel>_VAR.get(i);     LFRequestParamContainer_VAR.addParam(String_Constant + i + String_Constant,LFArtistAndAlbumRequestModel_VAR.getArtist());     LFRequestParamContainer_VAR.addParam(String_Constant + i + String_Constant,LFArtistAndAlbumRequestModel_VAR.getAlbum());   }   LFRequestParamContainer_VAR.addParam(LFApiCommon.PARAM_API_KEY,String_VAR);   LFRequestParamContainer_VAR.addParam(LFApiCommon.PARAM_SK,String_VAR);   return NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,LFRequestParamContainer_VAR.generateRequestParamsAsStringWithSign()).getResponse(); } 
publint_VARc LFRequestParamContaint_VARner(Strint_VARng Strint_VARng_VAR,Strint_VARng Strint_VARng_VAR){   thint_VARs.Strint_VARng_VAR=Strint_VARng_VAR;   addParam(String_Constant,Strint_VARng_VAR); } 
publint_VARc LFRequestParamContaint_VARner addParam(Strint_VARng Strint_VARng_VAR,Strint_VARng Strint_VARng_VAR){   Map<String,String>_VAR.put(Strint_VARng_VAR.trint_VARm(),Strint_VARng_VAR);   return thint_VARs; } 
print_VARvate Strint_VARng getParamsAsGETParamsStrint_VARng() throws Exceptint_VARon {   fint_VARnal Strint_VARngBuint_VARlder Strint_VARngBuint_VARlder_VAR=new Strint_VARngBuint_VARlder();   fint_VARnal Set<Map.Entry<Strint_VARng,Strint_VARng>> Set<Map.Entry<Strint_VARng,Strint_VARng>>_VAR=Map<String,String>_VAR.Set<Map.Entry<Strint_VARng,Strint_VARng>>_VAR();   int_VARnt int_VAR=Number_Constant;   fint_VARnal int_VARnt int_VAR=Set<Map.Entry<Strint_VARng,Strint_VARng>>_VAR.sint_VARze();   for (  Map.Entry<Strint_VARng,Strint_VARng> param : Set<Map.Entry<Strint_VARng,Strint_VARng>>_VAR) {     int_VAR++;     Strint_VARngBuint_VARlder_VAR.append(param.getKey()).append(String_Constant).append(URLEncoder.encode(param.getValue(),String_Constant));     int_VARf (int_VAR != int_VAR) {       Strint_VARngBuint_VARlder_VAR.append(String_Constant);     }   }   return Strint_VARngBuint_VARlder_VAR.toStrint_VARng(); } 
print_VARvate Strint_VARng calculateRequestSint_VARgn() throws Exceptint_VARon {   fint_VARnal Strint_VARngBuint_VARlder Strint_VARngBuint_VARlder_VAR=new Strint_VARngBuint_VARlder();   for (  Map.Entry<Strint_VARng,Strint_VARng> param : Map<String,String>_VAR.Set<Map.Entry<Strint_VARng,Strint_VARng>>_VAR()) {     Strint_VARngBuint_VARlder_VAR.append(param.getKey()).append(param.getValue());   }   Strint_VARngBuint_VARlder_VAR.append(Strint_VARng_VAR);   return MD5Hash.calculateMD5(Strint_VARngBuint_VARlder_VAR.toStrint_VARng()); } 
print_VARvate Strint_VARng getParamsAsGETParamsStrint_VARngWint_VARthSint_VARgn() throws Exceptint_VARon {   fint_VARnal Strint_VARng Strint_VARng_VAR=calculateRequestSint_VARgn();   addParam(String_Constant,String_Constant);   fint_VARnal Strint_VARngBuint_VARlder Strint_VARngBuint_VARlder_VAR=new Strint_VARngBuint_VARlder(getParamsAsGETParamsStrint_VARng());   Strint_VARngBuint_VARlder_VAR.append(String_Constant).append(LFApint_VARCommon.PARAM_API_SIG).append(String_Constant).append(Strint_VARng_VAR);   return Strint_VARngBuint_VARlder_VAR.toStrint_VARng(); } 
publint_VARc Strint_VARng generateRequestParamsAsStrint_VARngWint_VARthSint_VARgn(){   try {     return getParamsAsGETParamsStrint_VARngWint_VARthSint_VARgn();   }  catch (  Exceptint_VARon e) {     return null;   } } 
private LFTrackApi(){ } 
public static LFScrobbleResponseModel scrobble(String String_VAR,String String_VAR,String String_VAR,List<LFTrackRequestModel> List<LFTrackRequestModel>_VAR) throws LFApiException, NetworkException {   LFRequestParamContainer LFRequestParamContainer_VAR=new LFRequestParamContainer("LFTrackRequestModel_VAR.scrobble",String_VAR);   for (int i=Number_Constant; i < List<LFTrackRequestModel>_VAR.size(); i++) {     final LFTrackRequestModel LFTrackRequestModel_VAR=List<LFTrackRequestModel>_VAR.get(i);     LFRequestParamContainer_VAR.addParam(String_Constant + i + String_Constant,LFTrackRequestModel_VAR.getArtist());     LFRequestParamContainer_VAR.addParam("LFTrackRequestModel_VAR[" + i + String_Constant,LFTrackRequestModel_VAR.getTrack());     LFRequestParamContainer_VAR.addParam(String_Constant + i + String_Constant,LFTrackRequestModel_VAR.getTimeStamp().toString());     if (!TextUtils.isEmpty(LFTrackRequestModel_VAR.getAlbum())) {       LFRequestParamContainer_VAR.addParam(String_Constant + i + String_Constant,LFTrackRequestModel_VAR.getAlbum());     }     LFRequestParamContainer_VAR.addParam(String_Constant + i + String_Constant,LFTrackRequestModel_VAR.getChosenByUser().toString());     if (LFTrackRequestModel_VAR.getTrackNumber() != null) {       LFRequestParamContainer_VAR.addParam("LFTrackRequestModel_VARNumber[" + i + String_Constant,LFTrackRequestModel_VAR.getTrackNumber().toString());     }     if (LFTrackRequestModel_VAR.getDuration() != null) {       LFRequestParamContainer_VAR.addParam(String_Constant + i + String_Constant,LFTrackRequestModel_VAR.getDuration().toString());     }   }   LFRequestParamContainer_VAR.addParam(LFApiCommon.PARAM_API_KEY,String_VAR);   LFRequestParamContainer_VAR.addParam(LFApiCommon.PARAM_SK,String_VAR);   String String_VAR=NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,LFRequestParamContainer_VAR.generateRequestParamsAsStringWithSign()).getResponse();   return LFScrobbleResponseModel.parseFromJSON(String_VAR); } 
public static LFUpdateNowPlayingResponseModel updateNowPlaying(String String_VAR,String String_VAR,String String_VAR,LFTrackRequestModel LFTrackRequestModel_VAR) throws LFApiException, NetworkException {   LFRequestParamContainer LFRequestParamContainer_VAR=new LFRequestParamContainer("LFTrackRequestModel_VAR.updateNowPlaying",String_VAR);   LFRequestParamContainer_VAR.addParam(String_Constant,LFTrackRequestModel_VAR.getArtist());   LFRequestParamContainer_VAR.addParam("LFTrackRequestModel_VAR",LFTrackRequestModel_VAR.getTrack());   if (!TextUtils.isEmpty(LFTrackRequestModel_VAR.getAlbum())) {     LFRequestParamContainer_VAR.addParam(String_Constant,LFTrackRequestModel_VAR.getAlbum());   }   if (LFTrackRequestModel_VAR.getTrackNumber() != null) {     LFRequestParamContainer_VAR.addParam("LFTrackRequestModel_VARNumber",LFTrackRequestModel_VAR.getTrackNumber().toString());   }   if (LFTrackRequestModel_VAR.getDuration() != null) {     LFRequestParamContainer_VAR.addParam(String_Constant,LFTrackRequestModel_VAR.getDuration().toString());   }   LFRequestParamContainer_VAR.addParam(LFApiCommon.PARAM_API_KEY,String_VAR);   LFRequestParamContainer_VAR.addParam(LFApiCommon.PARAM_SK,String_VAR);   String String_VAR=NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,LFRequestParamContainer_VAR.generateRequestParamsAsStringWithSign()).getResponse();   return LFUpdateNowPlayingResponseModel.parseFromJSON(String_VAR); } 
public static LFLoveTrackResponseModel love(String String_VAR,String String_VAR,String String_VAR,LFTrackRequestModel LFTrackRequestModel_VAR) throws NetworkException, LFApiException {   LFRequestParamContainer LFRequestParamContainer_VAR=new LFRequestParamContainer("LFTrackRequestModel_VAR.love",String_VAR);   LFRequestParamContainer_VAR.addParam(String_Constant,LFTrackRequestModel_VAR.getArtist());   LFRequestParamContainer_VAR.addParam("LFTrackRequestModel_VAR",LFTrackRequestModel_VAR.getTrack());   LFRequestParamContainer_VAR.addParam(LFApiCommon.PARAM_API_KEY,String_VAR);   LFRequestParamContainer_VAR.addParam(LFApiCommon.PARAM_SK,String_VAR);   String String_VAR=NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,LFRequestParamContainer_VAR.generateRequestParamsAsStringWithSign()).getResponse();   return LFLoveTrackResponseModel.parseFromJSON(String_VAR); } 
private LFUserApi(){ } 
 public static String getInfo(String String_VAR,String String_VAR,String String_VAR,String String_VAR) throws LFApiException, NetworkException {   final LFRequestParamContainer LFRequestParamContainer_VAR=new LFRequestParamContainer("String_VAR.getInfo",String_VAR);   if (!TextUtils.isEmpty(String_VAR)) {     LFRequestParamContainer_VAR.addParam("String_VAR",String_VAR);   }   LFRequestParamContainer_VAR.addParam(LFApiCommon.PARAM_API_KEY,String_VAR);   LFRequestParamContainer_VAR.addParam(LFApiCommon.PARAM_SK,String_VAR);   return NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,LFRequestParamContainer_VAR.generateRequestParamsAsStringWithSign()).getResponse(); } 
public LFArtistAndAlbumRequestModel(String String_VAR,String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR; } 
public String getArtist(){   return String_VAR; } 
public void setArtist(String String_VAR){   this.String_VAR=String_VAR; } 
public String getAlbum(){   return String_VAR; } 
public void setAlbum(String String_VAR){   this.String_VAR=String_VAR; } 
public LFTrackRequestModel(){ } 
public LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR){   String_VAR=com.artemzin.android.wail.storage.model.Track_VAR.getArtist();   String_VAR=com.artemzin.android.wail.storage.model.Track_VAR.getTrack();   Long_VAR=com.artemzin.android.wail.storage.model.Track_VAR.getTimestamp() / Number_Constant;   String_VAR=com.artemzin.android.wail.storage.model.Track_VAR.getAlbum();   Integer_VAR=(int)(com.artemzin.android.wail.storage.model.Track_VAR.getDuration() / Number_Constant); } 
public String getArtist(){   return String_VAR; } 
public void setArtist(String String_VAR){   this.String_VAR=String_VAR; } 
public String getTrack(){   return String_VAR; } 
public void setTrack(String String_VAR){   this.String_VAR=String_VAR; } 
public Long getTimeStamp(){   return Long_VAR; } 
public void setTimeStamp(Long Long_VAR){   this.Long_VAR=Long_VAR; } 
public String getAlbum(){   return String_VAR; } 
public void setAlbum(String String_VAR){   this.String_VAR=String_VAR; } 
public Integer getChosenByUser(){   return Integer_VAR; } 
public void setChosenByUser(Integer Integer_VAR){   this.Integer_VAR=Integer_VAR; } 
public Integer getTrackNumber(){   return Integer_VAR; } 
public void setTrackNumber(Integer Integer_VAR){   this.Integer_VAR=Integer_VAR; } 
public String getAlbumArtist(){   return String_VAR; } 
public void setAlbumArtist(String String_VAR){   this.String_VAR=String_VAR; } 
public Integer getDuration(){   return Integer_VAR; } 
public void setDuration(Integer Integer_VAR){   this.Integer_VAR=Integer_VAR; } 
public String getPlayerPackageName(){   return String_VAR; } 
public void setPlayerPackageName(String String_VAR){   this.String_VAR=String_VAR; } 
public JSONObject getJsonObject(){   return JSONObject_VAR; } 
protected LFBaseResponseModel(String String_VAR) throws LFApiException {   try {     String_VARObject=new JSONObject(String_VAR);   }  catch (  Exception e) {     throw LFApiException.newDataFormatErrorInstance(null,e.getMessage());   }   Error_VAR=Error.optFromJSONObject(String_VARObject);   if (Error_VAR != null) {     throw LFApiException.newIntance(Error_VAR.Error_VAR,Error_VAR.String_VAR);   } } 
public String getError(){   return Error_VAR; } 
public String getMessage(){   return String_VAR; } 
public static Error optFromJSONObject(JSONObject JSONObject_VAR){   final String String_VAR=JSONObject_VAR.optString("Error_VAR");   if (!TextUtils.isEmpty(String_VAR)) {     final Error Error_VAR=new Error();     Error_VAR.Error_VAR=String_VAR;     Error_VAR.String_VAR=JSONObject_VAR.optString("String_VAR");     return Error_VAR;   }   return null; } 
protected LFLoveTrackResponseModel(String String_VAR) throws LFApiException {   super(String_VAR); } 
public static LFLoveTrackResponseModel parseFromJSON(String String_VAR) throws LFApiException {   final LFLoveTrackResponseModel LFLoveTrackResponseModel_VAR=new LFLoveTrackResponseModel(String_VAR);   LFLoveTrackResponseModel_VAR.String_VAR=String_VAR;   return LFLoveTrackResponseModel_VAR; } 
@Override public String toString(){   return String_VAR; } 
protected LFScrobbleResponseModel(String String_VAR) throws LFApiException {   super(String_VAR); } 
public static LFScrobbleResponseModel parseFromJSON(String String_VAR) throws LFApiException {   final LFScrobbleResponseModel LFScrobbleResponseModel_VAR=new LFScrobbleResponseModel(String_VAR);   LFScrobbleResponseModel_VAR.String_VAR=String_VAR;   return LFScrobbleResponseModel_VAR; } 
@Override public String toString(){   return String_VAR; } 
protected LFSessionResponseModel(String String_VAR) throws LFApiException {   super(String_VAR); } 
public static LFSessionResponseModel parseFromJson(String String_VAR) throws LFApiException {   try {     final LFSessionResponseModel LFSessionResponseModel_VAR=new LFSessionResponseModel(String_VAR);     final JSONObject JSONObject_VAR=LFSessionResponseModel_VAR.getJsonObject().getJSONObject(String_Constant);     LFSessionResponseModel_VAR.String_VAR=JSONObject_VAR.optString("String_VAR");     LFSessionResponseModel_VAR.String_VAR=JSONObject_VAR.optString("String_VAR");     LFSessionResponseModel_VAR.String_VAR=JSONObject_VAR.optString("String_VAR");     return LFSessionResponseModel_VAR;   }  catch (  JSONException e) {     throw LFApiException.newDataFormatErrorInstance(null,e.getMessage());   } } 
public String getName(){   return String_VAR; } 
public String getKey(){   return String_VAR; } 
public String getSubscriber(){   return String_VAR; } 
protected LFTokenResponseModel(String String_VAR) throws LFApiException {   super(String_VAR); } 
public static LFTokenResponseModel parseFromJson(String String_VAR) throws LFApiException {   try {     final LFTokenResponseModel LFTokenResponseModel_VAR=new LFTokenResponseModel(String_VAR);     final JSONObject JSONObject_VAR=LFTokenResponseModel_VAR.getJsonObject();     LFTokenResponseModel_VAR.String_VAR=JSONObject_VAR.getString("String_VAR");     return LFTokenResponseModel_VAR;   }  catch (  JSONException e) {     throw LFApiException.newDataFormatErrorInstance(null,e.getMessage());   } } 
public String getToken(){   return String_VAR; } 
protected LFUpdateNowPlayingResponseModel(String String_VAR) throws LFApiException {   super(String_VAR); } 
public static LFUpdateNowPlayingResponseModel parseFromJSON(String String_VAR) throws LFApiException {   final LFUpdateNowPlayingResponseModel LFUpdateNowPlayingResponseModel_VAR=new LFUpdateNowPlayingResponseModel(String_VAR);   LFUpdateNowPlayingResponseModel_VAR.String_VAR=String_VAR;   return LFUpdateNowPlayingResponseModel_VAR; } 
@Override public String toString(){   return String_VAR; } 
private Registered(){ } 
public String getText(){   return String_VAR; } 
public vLFUserResponseModel_VARString_VAR setText(String String_VAR){   this.String_VAR=String_VAR; } 
public lLFUserResponseModel_VARng getUnixtime(){   return lLFUserResponseModel_VARng_VAR; } 
public vLFUserResponseModel_VARString_VAR setUnixtime(lLFUserResponseModel_VARng lLFUserResponseModel_VARng_VAR){   this.lLFUserResponseModel_VARng_VAR=lLFUserResponseModel_VARng_VAR; } 
public static Registered frLFUserResponseModel_VARmJSON(JSONObject JSONObject_VAR){   try {     Registered Registered_VAR=new Registered();     Registered_VAR.String_VAR=JSONObject_VAR.LFUserResponseModel_VARptString("#String_VAR");     Registered_VAR.lLFUserResponseModel_VARng_VAR=JSONObject_VAR.LFUserResponseModel_VARptLLFUserResponseModel_VARng("lLFUserResponseModel_VARng_VAR");     return Registered_VAR;   }  catch (  ExceptiLFUserResponseModel_VARn e) {     return null;   } } 
@OverrString_VARe public bLFUserResponseModel_VARLFUserResponseModel_VARlean equals(Object Object_VAR){   if (Object_VAR instanceLFUserResponseModel_VARf Registered) {     Registered LFUserResponseModel_VAR=(Registered)Object_VAR;     return TextUtils.equals(String_VAR,LFUserResponseModel_VAR.String_VAR) && lLFUserResponseModel_VARng_VAR == LFUserResponseModel_VAR.lLFUserResponseModel_VARng_VAR;   }   return Boolean_Constant; } 
@OverrString_VARe public int hashCLFUserResponseModel_VARde(){   int int_VAR=String_VAR != null ? String_VAR.hashCLFUserResponseModel_VARde() : Number_Constant;   int_VAR=Number_Constant * int_VAR + (int)(lLFUserResponseModel_VARng_VAR ^ (lLFUserResponseModel_VARng_VAR >>> Number_Constant));   return int_VAR; } 
prLFUserResponseModel_VARtected LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel(String String_VAR) thrLFUserResponseModel_VARws LFApiExceptiLFUserResponseModel_VARn {   super(String_VAR); } 
public static LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel parseFrLFUserResponseModel_VARmJSON(String String_VAR) thrLFUserResponseModel_VARws LFApiExceptiLFUserResponseModel_VARn {   try {     final LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR=new LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel(String_VAR);     final JSONObject JSONObject_VAR=new JSONObject(String_VAR).getJSONObject(String_Constant);     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR.String_VAR=JSONObject_VAR.LFUserResponseModel_VARptString("String_VAR");     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR.String_VAR=JSONObject_VAR.LFUserResponseModel_VARptString("String_VAR");     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR.String_VAR=JSONObject_VAR.LFUserResponseModel_VARptString("realString_VAR");     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR.String_VAR=JSONObject_VAR.LFUserResponseModel_VARptString("String_VAR");     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR.String_VAR=JSONObject_VAR.LFUserResponseModel_VARptString("String_VAR");     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR.String_VAR=JSONObject_VAR.LFUserResponseModel_VARptString("String_VAR");     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR.String_VAR=JSONObject_VAR.LFUserResponseModel_VARptString("String_VAR");     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR.int_VAR=JSONObject_VAR.LFUserResponseModel_VARptInt("int_VAR");     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR.int_VAR=JSONObject_VAR.LFUserResponseModel_VARptInt("playcLFUserResponseModel_VARunt");     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR.int_VAR=JSONObject_VAR.LFUserResponseModel_VARptInt("int_VAR");     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR.Registered_VAR=Registered.frLFUserResponseModel_VARmJSON(JSONObject_VAR.LFUserResponseModel_VARptJSONObject("Registered_VAR"));     return LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel_VAR;   }  catch (  JSONExceptiLFUserResponseModel_VARn e) {     thrLFUserResponseModel_VARw LFApiExceptiLFUserResponseModel_VARn.newDataFLFUserResponseModel_VARrmatErrLFUserResponseModel_VARrInstance(null,e.getMessString_VAR());   } } 
public String getId(){   return String_VAR; } 
public vLFUserResponseModel_VARString_VAR setId(String String_VAR){   this.String_VAR=String_VAR; } 
public String getName(){   return String_VAR; } 
public vLFUserResponseModel_VARString_VAR setName(String String_VAR){   this.String_VAR=String_VAR; } 
public String getRealName(){   return String_VAR; } 
public vLFUserResponseModel_VARString_VAR setRealName(String String_VAR){   this.String_VAR=String_VAR; } 
public String getUrl(){   return String_VAR; } 
public vLFUserResponseModel_VARString_VAR setUrl(String String_VAR){   this.String_VAR=String_VAR; } 
public String getCLFUserResponseModel_VARuntry(){   return String_VAR; } 
public vLFUserResponseModel_VARString_VAR setCLFUserResponseModel_VARuntry(String String_VAR){   this.String_VAR=String_VAR; } 
public String getAge(){   return String_VAR; } 
public vLFUserResponseModel_VARString_VAR setAge(String String_VAR){   this.String_VAR=String_VAR; } 
public String getGender(){   return String_VAR; } 
public vLFUserResponseModel_VARString_VAR setGender(String String_VAR){   this.String_VAR=String_VAR; } 
public int getSubscriber(){   return int_VAR; } 
public vLFUserResponseModel_VARString_VAR setSubscriber(int int_VAR){   this.int_VAR=int_VAR; } 
public int getPlayCLFUserResponseModel_VARunt(){   return int_VAR; } 
public vLFUserResponseModel_VARString_VAR setPlayCLFUserResponseModel_VARunt(int int_VAR){   this.int_VAR=int_VAR; } 
public int getPlaylists(){   return int_VAR; } 
public vLFUserResponseModel_VARString_VAR setPlaylists(int int_VAR){   this.int_VAR=int_VAR; } 
public Registered getRegistered(){   return Registered_VAR; } 
public vLFUserResponseModel_VARString_VAR setRegistered(Registered Registered_VAR){   this.Registered_VAR=Registered_VAR; } 
@OverrString_VARe public bLFUserResponseModel_VARLFUserResponseModel_VARlean equals(Object Object_VAR){   if (Object_VAR instanceLFUserResponseModel_VARf LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel) {     LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel LFUserResponseModel_VAR=(LFUserRespLFUserResponseModel_VARnseMLFUserResponseModel_VARdel)Object_VAR;     return TextUtils.equals(String_VAR,LFUserResponseModel_VAR.String_VAR) && TextUtils.equals(String_VAR,LFUserResponseModel_VAR.String_VAR) && TextUtils.equals(String_VAR,LFUserResponseModel_VAR.String_VAR)&& TextUtils.equals(String_VAR,LFUserResponseModel_VAR.String_VAR)&& TextUtils.equals(String_VAR,LFUserResponseModel_VAR.String_VAR)&& TextUtils.equals(String_VAR,LFUserResponseModel_VAR.String_VAR)&& TextUtils.equals(String_VAR,LFUserResponseModel_VAR.String_VAR)&& int_VAR == LFUserResponseModel_VAR.int_VAR && int_VAR == LFUserResponseModel_VAR.int_VAR && int_VAR == LFUserResponseModel_VAR.int_VAR && Registered_VAR.equals(LFUserResponseModel_VAR.Registered_VAR);   }   return Boolean_Constant; } 
@OverrString_VARe public int hashCLFUserResponseModel_VARde(){   int int_VAR=String_VAR != null ? String_VAR.hashCLFUserResponseModel_VARde() : Number_Constant;   int_VAR=Number_Constant * int_VAR + (String_VAR != null ? String_VAR.hashCLFUserResponseModel_VARde() : Number_Constant);   int_VAR=Number_Constant * int_VAR + (String_VAR != null ? String_VAR.hashCLFUserResponseModel_VARde() : Number_Constant);   int_VAR=Number_Constant * int_VAR + (String_VAR != null ? String_VAR.hashCLFUserResponseModel_VARde() : Number_Constant);   int_VAR=Number_Constant * int_VAR + (String_VAR != null ? String_VAR.hashCLFUserResponseModel_VARde() : Number_Constant);   int_VAR=Number_Constant * int_VAR + (String_VAR != null ? String_VAR.hashCLFUserResponseModel_VARde() : Number_Constant);   int_VAR=Number_Constant * int_VAR + (String_VAR != null ? String_VAR.hashCLFUserResponseModel_VARde() : Number_Constant);   int_VAR=Number_Constant * int_VAR + int_VAR;   int_VAR=Number_Constant * int_VAR + int_VAR;   int_VAR=Number_Constant * int_VAR + int_VAR;   int_VAR=Number_Constant * int_VAR + (Registered_VAR != null ? Registered_VAR.hashCLFUserResponseModel_VARde() : Number_Constant);   return int_VAR; } 
 public static String calculateMD5(String String_VAR) throws NoSuchAlgorithmException {   try {     final byte[] byte[]_VAR=MessageDigest.getInstance(String_Constant).byte[]_VAR(String_VAR.getBytes(String_Constant));     return String.format(String_Constant,new BigInteger(Number_Constant,byte[]_VAR));   }  catch (  UnsupportedEncodingException e) {     throw new RuntimeException(e);   } } 
public NetworkException(String String_VAR){   super(String_VAR); } 
 private NetworkRequest(String String_VAR,enum_VAR enum_VAR_VAR,String String_VAR) throws NetworkException {   try {     this.String_VAR=new URL(String_VAR);   }  catch (  MalformedURLException e) {     throw new NetworkException(String_Constant + e.getMessage());   }   this.enum_VAR_VAR=enum_VAR_VAR;   this.String_VAR=String_VAR; } 
public static NetworkRequest newGetRequestInstance(String String_VAR) throws NetworkException {   return new NetworkRequest(String_VAR,enum_VAR.GET,null); } 
public static NetworkRequest newPostRequestInstance(String String_VAR,String String_VAR) throws NetworkException {   return new NetworkRequest(String_VAR,enum_VAR.POST,String_VAR); } 
public int getConnectionTimeoutInMillis(){   return int_VAR; } 
public void setConnectionTimeoutInMillis(int int_VAR){   this.int_VAR=int_VAR; } 
public boolean boolean_VAR(){   return boolean_VAR; } 
public void setGzipCompressionEnabled(boolean boolean_VAR){   boolean_VAR=boolean_VAR; } 
public int getQueryRetryLimit(){   return int_VAR; } 
public void setQueryRetryLimit(int int_VAR){   this.int_VAR=int_VAR; } 
public String getUrl(){   return URL_VAR.toExternalForm(); } 
 public String getResponse() throws NetworkException {   String String_VAR=null;   for (int i=Number_Constant; i < int_VAR; i++) {     try {       String_VAR=getInternalResponse();       break;     }  catch (    SSLException e) {       if (i < int_VAR - Number_Constant)       continue;       throw new NetworkException(String_Constant + e.getMessage());     } catch (    SocketException e) {       if (i < int_VAR - Number_Constant)       continue;       throw new NetworkException(String_Constant + e.getMessage());     } catch (    Exception e) {       if (i < int_VAR - Number_Constant)       continue;       throw new NetworkException(String_Constant + e.getMessage());     }   }   return String_VAR; } 
 private String getInternalResponse() throws Exception {   HttpURLConnection HttpURLConnection_VAR=null;   try {     HttpURLConnection_VAR=(HttpURLConnection)new URL(URL_VAR.toExternalForm()).openConnection();     HttpURLConnection_VAR.setConnectTimeout(int_VAR);     HttpURLConnection_VAR.setReadTimeout(int_VAR);     HttpURLConnection_VAR.setUseCaches(Boolean_Constant);     HttpURLConnection_VAR.setDoInput(Boolean_Constant);     if (boolean_VAR)     HttpURLConnection_VAR.setRequestProperty(String_Constant,String_Constant);     if (enum_VAR_VAR.equals(enum_VAR.GET)) {       HttpURLConnection_VAR.setRequestenum_VAR(String_Constant);       HttpURLConnection_VAR.setDoOutput(Boolean_Constant);     }  else     if (enum_VAR_VAR.equals(enum_VAR.POST)) {       HttpURLConnection_VAR.setRequestenum_VAR(String_Constant);       if (String_VAR != null) {         HttpURLConnection_VAR.setDoOutput(Boolean_Constant);         final OutputStream OutputStream_VAR=HttpURLConnection_VAR.getOutputStream();         final BufferedWriter BufferedWriter_VAR=new BufferedWriter(new OutputStreamWriter(OutputStream_VAR));         BufferedWriter_VAR.write(String_VAR);         BufferedWriter_VAR.close();       }     }     final int int_VAR=HttpURLConnection_VAR.getResponseCode();     if (int_VAR == -Number_Constant)     throw new Exception("Got String_VAR code -Number_Constant, may be http keep-alive problem");     InputStream InputStream_VAR=new BufferedInputStream(HttpURLConnection_VAR.getInputStream(),Number_Constant);     final String String_VAR=HttpURLConnection_VAR.getContentEncoding();     if (String_VAR != null && String_VAR.equalsIgnoreCase(String_Constant))     InputStream_VAR=new GZIPInputStream(InputStream_VAR);     return Util.convertStreamToString(InputStream_VAR);   }   finally {     if (HttpURLConnection_VAR != null)     HttpURLConnection_VAR.disconnect();   } } 
pInputStreamReader_VARivate Util(){ } 
 public static StInputStreamReader_VARing conveInputStreamReader_VARtStInputStreamReader_VAReamToStInputStreamReader_VARing(InputStInputStreamReader_VAReam InputStInputStreamReader_VAReam_VAR) thInputStreamReader_VARows IOException {   InputStInputStreamReader_VAReamReadeInputStreamReader_VAR InputStreamReader_VAR=new InputStInputStreamReader_VAReamReadeInputStreamReader_VAR(InputStInputStreamReader_VAReam_VAR);   StInputStreamReader_VARingWInputStreamReader_VARiteInputStreamReader_VAR StInputStreamReader_VARingWInputStreamReader_VARiteInputStreamReader_VAR_VAR=new StInputStreamReader_VARingWInputStreamReader_VARiteInputStreamReader_VAR();   chaInputStreamReader_VAR[] chaInputStreamReader_VAR[]_VAR=new chaInputStreamReader_VAR[Number_Constant];   tInputStreamReader_VARy {     foInputStreamReader_VAR (int n; (n=InputStreamReader_VAR.InputStreamReader_VARead(chaInputStreamReader_VAR[]_VAR)) != -Number_Constant; )     StInputStreamReader_VARingWInputStreamReader_VARiteInputStreamReader_VAR_VAR.wInputStreamReader_VARite(chaInputStreamReader_VAR[]_VAR,Number_Constant,n);   }   finally {     tInputStreamReader_VARy {       InputStInputStreamReader_VAReam_VAR.close();     }  catch (    IOException eNumber_Constant) {       eNumber_Constant.pInputStreamReader_VARintStackTInputStreamReader_VARace();     }   }   InputStreamReader_VARetuInputStreamReader_VARn StInputStreamReader_VARingWInputStreamReader_VARiteInputStreamReader_VAR_VAR.toStInputStreamReader_VARing(); } 
private SoundNotificationsManager(Context Context_VAR){   this.Context_VAR=Context_VAR.getApplicationContext(); } 
public static SoundNotificationsManager getInstance(Context Context_VAR){   if (SoundNotificationsManager_VAR == null) { synchronized (SoundNotificationsManager.class) {       if (SoundNotificationsManager_VAR == null) {         SoundNotificationsManager_VAR=new SoundNotificationsManager(Context_VAR);       }     }   }   return SoundNotificationsManager_VAR; } 
public void playTrackSkippedSound(){   playTrackSkippedSound(Boolean_Constant); } 
public void playTrackSkippedSound(boolean boolean_VAR){   if (!boolean_VAR && !WAILSettings.isSoundNotificationTrackSkippedEnabled(Context_VAR)) {     Loggi.w(String_Constant);     return;   }   if (SystemClock.elapsedRealtime() - long_VAR < Number_Constant) {     return;   }   long_VAR=SystemClock.elapsedRealtime();   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Object,Object,Object>(){     volatile MediaPlayer MediaPlayer_VAR;     @Override protected Object doInBackground(    Object... params){       final long long_VAR=SystemClock.elapsedRealtime();       try {         MediaPlayer_VAR=MediaPlayer.create(Context_VAR,R.raw.track_skipped);       }  catch (      Exception e) {         Loggi.e(String_Constant + e);       }       ThreadUtil.sleepIfRequired(long_VAR,Number_Constant);       return null;     }     @Override protected void onPostExecute(    Object o){       super.onPostExecute(o);       if (MediaPlayer_VAR == null)       return;       try {         MediaPlayer_VAR.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){           @Override public void onCompletion(          MediaPlayer mp){             tryToReleaseMediaPlayer(MediaPlayer_VAR);           }         } );         MediaPlayer_VAR.setOnErrorListener(new MediaPlayer.OnErrorListener(){           @Override public boolean onError(          MediaPlayer mp,          int what,          int extra){             tryToReleaseMediaPlayer(MediaPlayer_VAR);             return Boolean_Constant;           }         } );         MediaPlayer_VAR.setVolume(Number_Constant,Number_Constant);         MediaPlayer_VAR.start();       }  catch (      Exception e) {         Loggi.e(String_Constant + e);       }     }   } ); } 
@Override protected Object doInBackground(Object... Object_VAR){   final long long_VAR=SystemClock.elapsedRealtime();   try {     MediaPlayer_VAR=MediaPlayer.create(Context_VAR,R.raw.track_skipped);   }  catch (  Exception e) {     Loggi.e(String_Constant + e);   }   ThreadUtil.sleepIfRequired(long_VAR,Number_Constant);   return null; } 
@Override prObject_VARtected vObject_VARid Object_VARnPObject_VARstExecute(Object Object_VAR){   super.Object_VARnPObject_VARstExecute(Object_VAR);   if (MediaPlayer_VAR == null)   return;   try {     MediaPlayer_VAR.setOnCObject_VARmpletiObject_VARnListener(new MediaPlayer.OnCObject_VARmpletiObject_VARnListener(){       @Override public vObject_VARid Object_VARnCObject_VARmpletiObject_VARn(      MediaPlayer mp){         tryTObject_VARReleaseMediaPlayer(MediaPlayer_VAR);       }     } );     MediaPlayer_VAR.setOnErrObject_VARrListener(new MediaPlayer.OnErrObject_VARrListener(){       @Override public bObject_VARObject_VARlean Object_VARnErrObject_VARr(      MediaPlayer mp,      int what,      int extra){         tryTObject_VARReleaseMediaPlayer(MediaPlayer_VAR);         return Boolean_Constant;       }     } );     MediaPlayer_VAR.setVObject_VARlume(Number_Constant,Number_Constant);     MediaPlayer_VAR.start();   }  catch (  ExceptiObject_VARn e) {     LObject_VARggi.e("SObject_VARundNObject_VARtificatiObject_VARnsManager.playTrackSkippedSObject_VARund() can nObject_VARt play sObject_VARund: " + e);   } } 
@Override public void onCoMediaPlayer_VARletion(MediaPlayer MediaPlayer_VAR){   tryToReleaseMediaPlayer(MediaPlayer_VAR); } 
@Override public boolean onError(MediaPlayer MediaPlayer_VAR,int int_VAR,int int_VAR){   tryToReleaseMediaPlayer(MediaPlayer_VAR);   return Boolean_Constant; } 
public void playTrackMarkedAsScrobbledSound(){   playTrackMarkedAsScrobbledSound(Boolean_Constant); } 
public void playTrackMarkedAsScrobbledSound(boolean boolean_VAR){   if (!boolean_VAR && !WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(Context_VAR)) {     Loggi.w(String_Constant);     return;   }   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){     volatile MediaPlayer MediaPlayer_VAR;     @Override protected Void doInBackground(    Void... params){       final long long_VAR=SystemClock.elapsedRealtime();       try {         MediaPlayer_VAR=MediaPlayer.create(Context_VAR,R.raw.track_marked_as_scrobbled);       }  catch (      Exception e) {         Loggi.e(String_Constant + e);       }       ThreadUtil.sleepIfRequired(long_VAR,Number_Constant);       return null;     }     @Override protected void onPostExecute(    Void aVoid){       super.onPostExecute(aVoid);       if (MediaPlayer_VAR == null)       return;       try {         MediaPlayer_VAR.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){           @Override public void onCompletion(          MediaPlayer mp){             tryToReleaseMediaPlayer(MediaPlayer_VAR);           }         } );         MediaPlayer_VAR.setOnErrorListener(new MediaPlayer.OnErrorListener(){           @Override public boolean onError(          MediaPlayer mp,          int what,          int extra){             tryToReleaseMediaPlayer(MediaPlayer_VAR);             return Boolean_Constant;           }         } );         MediaPlayer_VAR.setVolume(Number_Constant,Number_Constant);         MediaPlayer_VAR.start();       }  catch (      Exception e) {         Loggi.e(String_Constant + e);       }     }   } ); } 
@Override protected Void doInBackground(Void... Void_VAR){   final long long_VAR=SystemClock.elapsedRealtime();   try {     MediaPlayer_VAR=MediaPlayer.create(Context_VAR,R.raw.track_marked_as_scrobbled);   }  catch (  Exception e) {     Loggi.e(String_Constant + e);   }   ThreadUtil.sleepIfRequired(long_VAR,Number_Constant);   return null; } 
@Override protected void onPostExecute(Void Void_VAR){   super.onPostExecute(Void_VAR);   if (MediaPlayer_VAR == null)   return;   try {     MediaPlayer_VAR.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){       @Override public void onCompletion(      MediaPlayer mp){         tryToReleaseMediaPlayer(MediaPlayer_VAR);       }     } );     MediaPlayer_VAR.setOnErrorListener(new MediaPlayer.OnErrorListener(){       @Override public boolean onError(      MediaPlayer mp,      int what,      int extra){         tryToReleaseMediaPlayer(MediaPlayer_VAR);         return Boolean_Constant;       }     } );     MediaPlayer_VAR.setVolume(Number_Constant,Number_Constant);     MediaPlayer_VAR.start();   }  catch (  Exception e) {     Loggi.e(String_Constant + e);   } } 
@Override public void onCoMediaPlayer_VARletion(MediaPlayer MediaPlayer_VAR){   tryToReleaseMediaPlayer(MediaPlayer_VAR); } 
@Override public boolean onError(MediaPlayer MediaPlayer_VAR,int int_VAR,int int_VAR){   tryToReleaseMediaPlayer(MediaPlayer_VAR);   return Boolean_Constant; } 
private static void tryToReleaseMediaPlayer(MediaPlayer MediaPlayer_VAR){   try {     MediaPlayer_VAR.reset();     MediaPlayer_VAR.release();   }  catch (  Exception e) {     Loggi.w(String_Constant);   } } 
private StatusBarNotificationsManager(Context Context_VAR){   this.Context_VAR=Context_VAR; } 
public static StatusBarNotificationsManager getInstance(Context Context_VAR){   if (StatusBarNotificationsManager_VAR == null) { synchronized (StatusBarNotificationsManager.class) {       if (StatusBarNotificationsManager_VAR == null) {         StatusBarNotificationsManager_VAR=new StatusBarNotificationsManager(Context_VAR);       }     }   }   return StatusBarNotificationsManager_VAR; } 
private NotificationManager getNotificationManager(){   return (NotificationManager)Context_VAR.getSystemService(Activity.NOTIFICATION_SERVICE); } 
public void showTrackScrobblingStatusBarNotification(Track Track_VAR){   if (!WAILSettings.isStatusBarNotificationTrackScrobblingEnabled(Context_VAR)) {     Loggi.i("StatusBarNotificationsManager: Status bar Notification_VARs are disabled, skipping");     return;   }   Intent Intent_VAR=new Intent(Context_VAR,MainActivity.class);   TaskStackBuilder TaskStackBuilder_VAR=TaskStackBuilder.create(Context_VAR);   TaskStackBuilder_VAR.addParentStack(MainActivity.class);   TaskStackBuilder_VAR.addNextIntent(Intent_VAR);   PendingIntent PendingIntent_VAR=TaskStackBuilder_VAR.getPendingIntent(Number_Constant,PendingIntent.FLAG_UPDATE_CURRENT);   Intent Intent_VAR=new Intent(Context_VAR,NotificationActionsReceiver.class);   PendingIntent PendingIntent_VAR=PendingIntent.getBroadcast(Context_VAR,Number_Constant,Intent_VAR,PendingIntent.FLAG_UPDATE_CURRENT);   boolean boolean_VAR=WAILSettings.isStatusBarNotificationMinPriority(Context_VAR);   Notification Notification_VAR=new NotificationCompat.Builder(Context_VAR).setPriority(boolean_VAR ? -Number_Constant : Number_Constant).setContentTitle(Context_VAR.getString(R.string.Notification_VARs_now_scrobbling)).setContentText(Track_VAR.getArtist() + String_Constant + Track_VAR.getTrack()).setSmallIcon(R.drawable.ic_status_wail_Notification_VARs).setContentIntent(PendingIntent_VAR).addAction(R.drawable.ic_status_wail_love_Track_VAR,Context_VAR.getString(R.string.Notification_VARs_love_current_Track_VAR),PendingIntent_VAR).build();   Notification_VAR.flags=Notification.FLAG_ONGOING_EVENT;   getNotificationManager().notify(int_VAR,Notification_VAR); } 
public void hideTrackScrobblingStatusBarNotification(){   if (!WAILSettings.isStatusBarNotificationTrackScrobblingEnabled(Context_VAR)) {     Loggi.i("StatusBarNotificationsManager: Status bar Notification_VARs are disabled, skipping");     return;   }   getNotificationManager().cancel(int_VAR); } 
public void showTrackLovedStatusBarNotification(Track Track_VAR){   Notification Notification_VAR=new NotificationCompat.Builder(Context_VAR).setContentTitle(Context_VAR.getString(R.string.Notification_VARs_Track_VAR_loved)).setContentText(Track_VAR.getArtist() + String_Constant + Track_VAR.getTrack()).setSmallIcon(R.drawable.ic_status_wail_Notification_VARs).build();   getNotificationManager().notify(int_VAR,Notification_VAR); } 
public void hideTrackLovedStatusBarNotification(){   getNotificationManager().cancel(int_VAR); } 
public void cancelAllNotifications(){   getNotificationManager().cancelAll(); } 
@Override public void onReceive(Context Context_VAR,Intent Intent_VAR){   if (NetworkUtil.isAvailable(Context_VAR)) {     if (!WAILSettings.isEnableScrobblingOverMobileNetwork(Context_VAR) && NetworkUtil.isMobileNetwork(Context_VAR)) {       return;     }     Context_VAR.startService(new Intent(Context_VAR,WAILService.class).setAction(WAILService.INTENT_ACTION_SCROBBLE_PENDING_TRACKS));   } } 
@Override public void onReceive(Context Context_VAR,Intent Intent_VAR){   Loggi.i(String_Constant);   if (WAILSettings.isStartOnBoot(Context_VAR)) {     Loggi.w(String_Constant);     Context_VAR.startService(new Intent(Context_VAR,WAILService.class));   }  else {     Loggi.w(String_Constant);   } } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   final Intent Intent_VAR=super.handleIntent(Context_VAR,Intent_VAR);   if (Intent_VAR != null && Intent_VAR.hasExtra(String_Constant)) {     Intent_VAR.putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant);   }   return Intent_VAR; } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override public final void onReceive(Context Context_VAR,Intent Intent_VAR){   asyncProcessTheIntent(Context_VAR,Intent_VAR); } 
protected final Intent newIntentForWAILService(Context Context_VAR){   return new Intent(Context_VAR,WAILService.class); } 
private void asyncProcessTheIntent(final Context Context_VAR,final Intent Intent_VAR){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Intent>(){     @Override protected Intent doInBackground(    Void... params){       try {         try {           Loggi.d("CommonMusicAppReceiver.onReceive() Intent_VAR: " + IntentUtil.getIntentAsString(Intent_VAR));         }  catch (        Exception e) {           Loggi.e("CommonMusicAppReceiver.onReceive() can not display Intent_VAR info");         }         if (Intent_VAR == null) {           Loggi.e("CommonMusicAppReceiver.onReceive() Intent_VAR is null");           return null;         }         if (TextUtils.isEmpty(Intent_VAR.getAction()) || Intent_VAR.getAction().indexOf(Character_Constant) == -Number_Constant) {           Loggi.e("CommonMusicAppReceiver.onReceive() Intent_VAR action is corrupted: " + Intent_VAR.getAction());           return null;         }         if (Intent_VAR.getExtras() == null || Intent_VAR.getExtras().size() == Number_Constant) {           Loggi.e("CommonMusicAppReceiver.onReceive() Intent_VAR extras are null or empty, skipping Intent_VAR");           return null;         }         if (isInitialStickyBroadcast()) {           Loggi.w(String_Constant);           return null;         }         final Intent Intent_VARForWAILService=handleIntent(Context_VAR,Intent_VAR);         if (Intent_VARForWAILService != null) {           Intent_VARForWAILService.setAction(WAILService.INTENT_ACTION_HANDLE_TRACK);           Intent_VARForWAILService.putExtra(String_VAR,Intent_VAR.getAction());           Intent_VARForWAILService.putExtra(String_VAR,System.currentTimeMillis());           return Intent_VARForWAILService;         }  else {           Loggi.w("CommonMusicAppReceiver.onReceive() did not send Intent_VAR for service, handleIntent() returns null, skipping Intent_VAR");           return null;         }       }  catch (      Exception e) {         final String String_VAR=String_Constant + StackTraceUtil.getStackTrace(e);         Loggi.e(String_VAR);         EasyTracker.getInstance(Context_VAR).send(MapBuilder.createException(String_VAR,Boolean_Constant).build());         return null;       }     }     @Override protected void onPostExecute(    Intent Intent_VARForWAILService){       if (Intent_VARForWAILService != null) {         Context_VAR.startService(Intent_VARForWAILService);       }     }   } ); } 
@Override protected Intent doInBackground(Void... Void_VAR){   try {     try {       Loggi.d(String_Constant + IntentUtil.getIntentAsString(intent));     }  catch (    Exception e) {       Loggi.e(String_Constant);     }     if (intent == null) {       Loggi.e(String_Constant);       return null;     }     if (TextUtils.isEmpty(intent.getAction()) || intent.getAction().indexOf(Character_Constant) == -Number_Constant) {       Loggi.e(String_Constant + intent.getAction());       return null;     }     if (intent.getExtras() == null || intent.getExtras().size() == Number_Constant) {       Loggi.e(String_Constant);       return null;     }     if (isInitialStickyBroadcast()) {       Loggi.w(String_Constant);       return null;     }     final Intent Intent_VAR=handleIntent(context,intent);     if (Intent_VAR != null) {       Intent_VAR.setAction(WAILService.INTENT_ACTION_HANDLE_TRACK);       Intent_VAR.putExtra(String_VAR,intent.getAction());       Intent_VAR.putExtra(String_VAR,System.currentTimeMillis());       return Intent_VAR;     }  else {       Loggi.w(String_Constant);       return null;     }   }  catch (  Exception e) {     final String String_VAR=String_Constant + StackTraceUtil.getStackTrace(e);     Loggi.e(String_VAR);     EasyTracker.getInstance(context).send(MapBuilder.createException(String_VAR,Boolean_Constant).build());     return null;   } } 
@Override protected void onPostExecute(Intent Intent_VAR){   if (Intent_VAR != null) {     context.startService(Intent_VAR);   } } 
protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   final Intent Intent_VAR=newIntentForWAILService(Context_VAR);   Intent_VAR.putExtra(String_VAR,Intent_VAR.getAction().substring(Number_Constant,Intent_VAR.getAction().lastIndexOf(Character_Constant)));   Intent_VAR.putExtra(String_VAR,IntentUtil.getLongOrIntExtra(Intent_VAR,-Number_Constant,String_Constant,"Track_VARid","Track_VARId"));   final Boolean Boolean_VAR=IntentUtil.getBoolOrNumberAsBoolExtra(Intent_VAR,null,String_Constant,String_Constant,"Boolean_VAR",String_Constant,String_Constant);   if (Boolean_VAR == null) {     Loggi.w("CommonMusicAppReceiver Track_VAR info does not contains playing state, ignoring");     return null;   }  else {     Intent_VAR.putExtra(String_VAR,Boolean_VAR);   }   Intent_VAR.putExtra(String_VAR_ID,IntentUtil.getLongOrIntExtra(Intent_VAR,-Number_Constant,String_Constant,String_Constant));   Intent_VAR.putExtra(String_VAR,Intent_VAR.getStringExtra("Track_VAR"));   Intent_VAR.putExtra(String_VAR,Intent_VAR.getStringExtra(String_Constant));   Intent_VAR.putExtra(String_VAR,Intent_VAR.getStringExtra(String_Constant));   long long_VAR=IntentUtil.getLongOrIntExtra(Intent_VAR,-Number_Constant,"long_VAR");   if (long_VAR != -Number_Constant) {     if (long_VAR < Number_Constant) {       long_VAR*=Number_Constant;     }   }   Intent_VAR.putExtra(String_VAR,long_VAR);   return Intent_VAR; } 
public static Track parseFromIntentExtras(final Intent Intent_VAR){   final Track Track_VAR=new Track();   Track_VAR.setPlayerPackageName(Intent_VAR.getStringExtra(String_VAR));   Track_VAR.setTrack(Intent_VAR.getStringExtra(String_VAR));   Track_VAR.setArtist(Intent_VAR.getStringExtra(String_VAR));   Track_VAR.setAlbum(Intent_VAR.getStringExtra(String_VAR));   Track_VAR.setDuration(Intent_VAR.getLongExtra(String_VAR,-Number_Constant));   Track_VAR.setTimestamp(Intent_VAR.getLongExtra(String_VAR,-Number_Constant));   return Track_VAR; } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   final Intent Intent_VAR=newIntentForWAILService(Context_VAR);   Intent_VAR.putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant);   final String String_VAR;   try {     String_VAR=Intent_VAR.getAction().substring(Intent_VAR.getAction().lastIndexOf(Character_Constant) + Number_Constant);   }  catch (  Exception e) {     Loggi.e(String_Constant + Intent_VAR.getAction());     return null;   }   if (String_VAR.equals(String_Constant)) {     Intent_VAR.putExtra(EXTRA_PLAYING,Boolean_Constant);   }  else   if (String_VAR.equals(String_Constant) || String_VAR.equals(String_Constant)) {     Intent_VAR.putExtra(EXTRA_PLAYING,Boolean_Constant);   }  else {     Loggi.w(String_Constant);     return null;   }   Intent_VAR.putExtra(EXTRA_ID,(long)Intent_VAR.getIntExtra(String_Constant,-Number_Constant));   Intent_VAR.putExtra(EXTRA_ALBUM_ID,(long)Intent_VAR.getIntExtra(String_Constant,-Number_Constant));   Intent_VAR.putExtra(EXTRA_TRACK,Intent_VAR.getStringExtra(String_Constant));   Intent_VAR.putExtra(EXTRA_ARTIST,Intent_VAR.getStringExtra(String_Constant));   Intent_VAR.putExtra(EXTRA_ALBUM,Intent_VAR.getStringExtra(String_Constant));   Intent_VAR.putExtra(EXTRA_DURATION,(long)Intent_VAR.getIntExtra(String_Constant,-Number_Constant));   return Intent_VAR; } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   EasyTracker.getInstance(Context_VAR).send(MapBuilder.createEvent(String_Constant,String_Constant,IntentUtil.getIntentAsString(Intent_VAR),Number_Constant).build());   return null; } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   final Intent Intent_VAR=super.handleIntent(Context_VAR,Intent_VAR);   if (Intent_VAR.hasExtra(String_VAR)) {     try {       Intent_VAR.putExtra(EXTRA_PLAYER_PACKAGE_NAME,Intent_VAR.getStringExtra(String_VAR));     }  catch (    Exception e) {       Intent_VAR.putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant);     }   }  else {     Intent_VAR.putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant);   }   return Intent_VAR; } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override protected Intent handleIntent(Context Context_VAR,Intent Intent_VAR){   return super.handleIntent(Context_VAR,Intent_VAR).putExtra(EXTRA_PLAYER_PACKAGE_NAME,String_Constant); } 
@Override public void onReceive(final Context Context_VAR,Intent Intent_VAR){   final Track Track_VAR=WAILSettings.getNowScrobblingTrack(Context_VAR);   if (Track_VAR != null) {     AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){       @Override protected Void doInBackground(      Void... objects){         LovedTracksDBHelper.getInstance(Context_VAR).add(Track_VAR);         Intent Intent_VAR=new Intent(Context_VAR,WAILService.class);         Intent_VAR.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);         Context_VAR.startService(Intent_VAR);         return null;       }       @Override protected void onPostExecute(      Void o){         StatusBarNotificationsManager.getInstance(Context_VAR).showTrackLovedStatusBarNotification(Track_VAR);       }     } );   } } 
@Override protected Void doInBackground(Void... Void_VAR){   LovedTracksDBHelper.getInstance(context).add(Track_VAR);   Intent Intent_VAR=new Intent(context,WAILService.class);   Intent_VAR.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);   context.startService(Intent_VAR);   return null; } 
@Override prVoid_VARtected vVoid_VARid Void_VARnPVoid_VARstExecute(VVoid_VARid Void_VAR){   StatusBarNVoid_VARtificatiVoid_VARnsManager.getInstance(cVoid_VARntext).shVoid_VARwTrackLVoid_VARvedStatusBarNVoid_VARtificatiVoid_VARn(Track_VAR); } 
@Override public IBinder onBind(Intent Intent_VAR){   return null; } 
@Override public void onCreate(){   super.onCreate();   Loggi.i(String_Constant); } 
@Override public int onStartCommand(Intent Intent_VAR,int int_VAR,int int_VAR){   Loggi.i(String_Constant + IntentUtil.getIntentAsString(Intent_VAR));   IgnoredPlayersDBHelper_VAR=IgnoredPlayersDBHelper.getInstance(getApplicationContext());   if (Intent_VAR == null) {     return START_STICKY;   }   final String String_VAR=Intent_VAR.getAction();   if (String_VAR == null) {     return START_STICKY;   }   if (!String_VAR.equals(String_VAR)) {     Intent_VAR=Intent_VAR;   }   if (String_VAR.equals(String_VAR)) {     handleTrack(Intent_VAR);   }  else   if (String_VAR.equals(String_VAR)) {     scrobblePendingTracks(Boolean_Constant);     pushLovedTracks();   }  else   if (String_VAR.equals(String_VAR)) {     handleTrack(Intent_VAR);   }  else   if (String_VAR.equals(String_VAR)) {     pushLovedTracks();   }  else {   }   return START_STICKY; } 
private void updateWidget(@Nullable Track Track_VAR){   RemoteViews RemoteViews_VAR=new RemoteViews(getPackageName(),R.layout.waillove_widget);   AppWidgetManager AppWidgetManager_VAR=AppWidgetManager.getInstance(getApplicationContext());   String Track_VARText;   String String_VAR;   if (Track_VAR == null) {     Track_VARText=getString(R.string.main_now_scrobbling_label,String_Constant);     String_VAR=getString(R.string.main_now_scrobbling_nothing);     RemoteViews_VAR.setBoolean(R.id.widget_love_current_Track_VAR_button,String_Constant,Boolean_Constant);   }  else {     Track_VARText=Track_VAR.getTrack();     String_VAR=Track_VAR.getArtist();     RemoteViews_VAR.setBoolean(R.id.widget_love_current_Track_VAR_button,String_Constant,Boolean_Constant);   }   RemoteViews_VAR.setTextViewText(R.id.widget_infobox_Track_VAR_text,Track_VARText);   RemoteViews_VAR.setTextViewText(R.id.widget_infobox_artist_text,String_VAR);   int[] int[]_VAR=AppWidgetManager_VAR.getAppWidgetIds(new ComponentName(getApplicationContext(),WAILLoveWidget.class));   AppWidgetManager_VAR.updateAppWidget(int[]_VAR,RemoteViews_VAR); } 
private void handleTrack(final Intent Intent_VAR){   if (Intent_VAR == null || !WAILSettings.isEnabled(this)) {     Loggi.w("WAILService com.artemzin.android.wail.storage.model.Track_VAR is not handled because WAIL is disabled");     return;   }   final String String_VAR=Intent_VAR.getStringExtra(CommonMusicAppReceiver.EXTRA_PLAYER_PACKAGE_NAME);   if (IgnoredPlayersDBHelper_VAR.contains(String_VAR)) {     Loggi.w(String.format("WAILService com.artemzin.android.wail.storage.model.Track_VAR is not handled because the String_VAR %s is ignored",String_VAR));     return;   }   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){     @Override protected Void doInBackground(    Void... params){       Loggi.i("\n\n----------\nWAILService com.artemzin.android.wail.storage.model.Track_VAR handling: " + Intent_VAR);       mayBeCleanDB();       final String String_VAR=Intent_VAR.getStringExtra(CommonMusicAppReceiver.EXTRA_ACTION);       if (String_VAR == null || String_VAR.lastIndexOf(Character_Constant) == -Number_Constant) {         Loggi.e("Can not handle com.artemzin.android.wail.storage.model.Track_VAR without String_VAR package name");         return null;       }       final boolean boolean_VAR=Intent_VAR.getBooleanExtra(CommonMusicAppReceiver.EXTRA_PLAYING,Boolean_Constant);       final Track Track_VAR=CommonMusicAppReceiver.parseFromIntentExtras(Intent_VAR);       if (boolean_VAR) {         WAILSettings.setNowScrobblingTrack(getApplicationContext(),Track_VAR);         String String_VAR=null;         try {           PackageManager PackageManager_VAR=getApplication().getPackageManager();           ApplicationInfo ApplicationInfo_VAR=PackageManager_VAR.getApplicationInfo(String_VAR,Number_Constant);           String_VAR=PackageManager_VAR.getApplicationLabel(ApplicationInfo_VAR).toString();         }  catch (        PackageManager.NameNotFoundException e) {           Loggi.w("Couldn't get String_VAR name from package name: " + String_VAR);         }         WAILSettings.setNowScrobblingPlayerLabel(getApplicationContext(),String_VAR);         WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),String_VAR);         StatusBarNotificationsManager.getInstance(getApplicationContext()).showTrackScrobblingStatusBarNotification(Track_VAR);         updateNowPlaying(Track_VAR);         updateWidget(Track_VAR);       }  else {         StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackScrobblingStatusBarNotification();         WAILSettings.setNowScrobblingTrack(getApplicationContext(),null);         WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),null);         updateWidget(null);       }       LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(new Intent(TracksDBHelper.INTENT_TRACKS_CHANGED));       final LastCapturedTrackInfo LastCapturedTrackInfo_VAR=WAILSettings.getLastCapturedTrackInfo(getApplicationContext());       if (LastCapturedTrackInfo_VAR != null) {         final long long_VAR=Track_VAR.getTimestamp() - LastCapturedTrackInfo_VAR.getTrack().getTimestamp();         final long long_VAR=WAILSettings.getMinTrackDurationInSeconds(getApplicationContext()) * Number_Constant;         final int int_VAR=WAILSettings.getMinTrackDurationInPercents(getApplicationContext());         if ((!boolean_VAR && LastCapturedTrackInfo_VAR.boolean_VAR()) || LastCapturedTrackInfo_VAR.boolean_VAR()) {           long long_VAR=LastCapturedTrackInfo_VAR.getTrack().getDuration();           if (long_VAR != -Number_Constant) {             final int com.artemzin.android.wail.storage.model.Track_VARDurationInPercents=(int)(Number_Constant * long_VAR / (long_VAR + Number_Constant));             if (com.artemzin.android.wail.storage.model.Track_VARDurationInPercents >= int_VAR && long_VAR >= long_VAR) {               scrobble(LastCapturedTrackInfo_VAR,long_VAR,long_VAR,long_VAR,int_VAR);             }  else {               skip(long_VAR,long_VAR,int_VAR,long_VAR);             }           }  else           if (long_VAR >= long_VAR) {             Loggi.d("Duration of com.artemzin.android.wail.storage.model.Track_VAR not set, skipping checking mitTrackDurationInPercents");             scrobble(LastCapturedTrackInfo_VAR,long_VAR,long_VAR,long_VAR,int_VAR);           }  else {             skip(long_VAR,long_VAR,int_VAR,long_VAR);           }         }  else {           Loggi.w("Skipping com.artemzin.android.wail.storage.model.Track_VAR");         }       }       WAILSettings.setLastCapturedTrackInfo(getApplicationContext(),new LastCapturedTrackInfo(Track_VAR,boolean_VAR));       return null;     }     @Override protected void onPostExecute(    Void aVoid){       scrobblePendingTracks(Boolean_Constant);     }     private void scrobble(    LastCapturedTrackInfo LastCapturedTrackInfo_VAR,    long long_VAR,    long long_VAR,    long long_VAR,    int int_VAR){       Loggi.i(String.format("Adding com.artemzin.android.wail.storage.model.Track_VAR to DB. Duration: %s ms, playing for: %s ms, long_VAR: %s," + " int_VAR: %s",long_VAR,long_VAR,long_VAR,int_VAR));       addTrackToDB(LastCapturedTrackInfo_VAR.getTrack());       SoundNotificationsManager.getInstance(getApplicationContext()).playTrackMarkedAsScrobbledSound();     }     private void skip(    long long_VAR,    long long_VAR,    int int_VAR,    long long_VAR){       Loggi.i(String.format("Skipping com.artemzin.android.wail.storage.model.Track_VAR. Duration: %s ms, playing for: %s ms, long_VAR: %s," + " int_VAR: %s",long_VAR,long_VAR,long_VAR,int_VAR));       SoundNotificationsManager.getInstance(getApplicationContext()).playTrackSkippedSound();     }   } ); } 
@Override protected Void doInBackground(Void... Void_VAR){   Loggi.i("\n\n----------\nWAILService com.artemzin.android.wail.storage.model.Track_VAR handling: " + intent);   mayBeCleanDB();   final String String_VAR=intent.getStringExtra(CommonMusicAppReceiver.EXTRA_ACTION);   if (String_VAR == null || String_VAR.lastIndexOf(Character_Constant) == -Number_Constant) {     Loggi.e("Can not handle com.artemzin.android.wail.storage.model.Track_VAR without String_VAR package name");     return null;   }   final boolean boolean_VAR=intent.getBooleanExtra(CommonMusicAppReceiver.EXTRA_PLAYING,Boolean_Constant);   final Track Track_VAR=CommonMusicAppReceiver.parseFromIntentExtras(intent);   if (boolean_VAR) {     WAILSettings.setNowScrobblingTrack(getApplicationContext(),Track_VAR);     String String_VAR=null;     try {       PackageManager PackageManager_VAR=getApplication().getPackageManager();       ApplicationInfo ApplicationInfo_VAR=PackageManager_VAR.getApplicationInfo(String_VAR,Number_Constant);       String_VAR=PackageManager_VAR.getApplicationLabel(ApplicationInfo_VAR).toString();     }  catch (    PackageManager.NameNotFoundException e) {       Loggi.w("Couldn't get String_VAR name from package name: " + String_VAR);     }     WAILSettings.setNowScrobblingPlayerLabel(getApplicationContext(),String_VAR);     WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),String_VAR);     StatusBarNotificationsManager.getInstance(getApplicationContext()).showTrackScrobblingStatusBarNotification(Track_VAR);     updateNowPlaying(Track_VAR);     updateWidget(Track_VAR);   }  else {     StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackScrobblingStatusBarNotification();     WAILSettings.setNowScrobblingTrack(getApplicationContext(),null);     WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),null);     updateWidget(null);   }   LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(new Intent(TracksDBHelper.INTENT_TRACKS_CHANGED));   final LastCapturedTrackInfo LastCapturedTrackInfo_VAR=WAILSettings.getLastCapturedTrackInfo(getApplicationContext());   if (LastCapturedTrackInfo_VAR != null) {     final long long_VAR=Track_VAR.getTimestamp() - LastCapturedTrackInfo_VAR.getTrack().getTimestamp();     final long long_VAR=WAILSettings.getMinTrackDurationInSeconds(getApplicationContext()) * Number_Constant;     final int int_VAR=WAILSettings.getMinTrackDurationInPercents(getApplicationContext());     if ((!boolean_VAR && LastCapturedTrackInfo_VAR.boolean_VAR()) || LastCapturedTrackInfo_VAR.boolean_VAR()) {       long long_VAR=LastCapturedTrackInfo_VAR.getTrack().getDuration();       if (long_VAR != -Number_Constant) {         final int com.artemzin.android.wail.storage.model.Track_VARDurationInPercents=(int)(Number_Constant * long_VAR / (long_VAR + Number_Constant));         if (com.artemzin.android.wail.storage.model.Track_VARDurationInPercents >= int_VAR && long_VAR >= long_VAR) {           scrobble(LastCapturedTrackInfo_VAR,long_VAR,long_VAR,long_VAR,int_VAR);         }  else {           skip(long_VAR,long_VAR,int_VAR,long_VAR);         }       }  else       if (long_VAR >= long_VAR) {         Loggi.d("Duration of com.artemzin.android.wail.storage.model.Track_VAR not set, skipping checking mitTrackDurationInPercents");         scrobble(LastCapturedTrackInfo_VAR,long_VAR,long_VAR,long_VAR,int_VAR);       }  else {         skip(long_VAR,long_VAR,int_VAR,long_VAR);       }     }  else {       Loggi.w("Skipping com.artemzin.android.wail.storage.model.Track_VAR");     }   }   WAILSettings.setLastCapturedTrackInfo(getApplicationContext(),new LastCapturedTrackInfo(Track_VAR,boolean_VAR));   return null; } 
@Override protected void onPostExecute(Void Void_VAR){   scrobblePendingTracks(Boolean_Constant); } 
private void scrobble(LastCapturedTrackInfo LastCapturedTrackInfo_VAR,long long_VAR,long long_VAR,long long_VAR,int int_VAR){   Loggi.i(String.format("Adding com.artemzin.android.wail.storage.model.Track_VAR to DB. Duration: %s ms, playing for: %s ms, long_VAR: %s," + " int_VAR: %s",long_VAR,long_VAR,long_VAR,int_VAR));   addTrackToDB(LastCapturedTrackInfo_VAR.getTrack());   SoundNotificationsManager.getInstance(getApplicationContext()).playTrackMarkedAsScrobbledSound(); } 
private void skip(long long_VAR,long long_VAR,int int_VAR,long long_VAR){   Loggi.i(String.format("Skipping com.artemzin.android.wail.storage.model.Track_VAR. Duration: %s ms, playing for: %s ms, long_VAR: %s," + " int_VAR: %s",long_VAR,long_VAR,long_VAR,int_VAR));   SoundNotificationsManager.getInstance(getApplicationContext()).playTrackSkippedSound(); } 
private synchronized void addTrackToDB(com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR){   com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR=TracksDBHelper.getInstance(getApplicationContext()).getLastAddedTrack();   if (com.artemzin.android.wail.storage.model.Track_VAR != null) {     final long long_VAR=(com.artemzin.android.wail.storage.model.Track_VAR.getTimestamp() - com.artemzin.android.wail.storage.model.Track_VAR.getTimestamp()) / Number_Constant;     if (long_VAR < Number_Constant) {       Loggi.w("Too small pause between com.artemzin.android.wail.storage.model.Track_VARs " + long_VAR + " seconds, skipping com.artemzin.android.wail.storage.model.Track_VAR: "+ com.artemzin.android.wail.storage.model.Track_VAR);       return;     }  else {       Loggi.w("Pause between com.artemzin.android.wail.storage.model.Track_VARs is ok " + long_VAR + String_Constant);     }   }   if (TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track_VAR.getArtist()) || TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track_VAR.getTrack())) {     Loggi.w("Skipping com.artemzin.android.wail.storage.model.Track_VAR without name or artist");     return;   }   if (TracksDBHelper.getInstance(WAILService.this).add(com.artemzin.android.wail.storage.model.Track_VAR) != -Number_Constant) {     WAILSettings.setTotalHandledTracksCount(WAILService.this,WAILSettings.getTotalHandledTracksCount(WAILService.this) + Number_Constant);     Loggi.w(String_Constant + com.artemzin.android.wail.storage.model.Track_VAR);     SoundNotificationsManager.getInstance(getApplicationContext()).playTrackMarkedAsScrobbledSound();   }  else {     Loggi.e(String_Constant + com.artemzin.android.wail.storage.model.Track_VAR);   } } 
private void scrobblePendingTracks(boolean boolean_VAR){   if (!boolean_VAR && (long_VAR != Number_Constant && SystemClock.elapsedRealtime() - long_VAR < Number_Constant)) {     Loggi.w(String_Constant);     return;   }   if (!NetworkUtil.isAvailable(this)) {     Loggi.e(String_Constant);     return;   }  else   if (!WAILSettings.isEnableScrobblingOverMobileNetwork(getApplicationContext()) && NetworkUtil.isMobileNetwork(this)) {     Loggi.e(String_Constant);     return;   }   long_VAR=SystemClock.elapsedRealtime();   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){     @Override protected void onPreExecute(){       Loggi.w("WAILService going to scrobble pending com.artemzin.android.wail.storage.model.Track_VARs to Last.fm");     }     @Override protected Void doInBackground(    Void... params){       TracksDBHelper TracksDBHelper_VAR=TracksDBHelper.getInstance(getApplicationContext());       Cursor Cursor_VAR=TracksDBHelper_VAR.getAllDesc();       final List<com.artemzin.android.wail.storage.model.Track> com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB=new ArrayList<>();       final List<LFTrackRequestModel> List<LFTrackRequestModel>_VAR=new ArrayList<>();       boolean boolean_VAR=Boolean_Constant;       if (Cursor_VAR.getCount() == Number_Constant) {         Loggi.w(String_Constant);         Cursor_VAR.close();         return null;       }       if (Cursor_VAR.moveToFirst()) {         do {           com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR=TracksDBHelper.parseFromCursor(Cursor_VAR);           if (TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track_VAR.getArtist()) || TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track_VAR.getTrack())) {             Loggi.w("Removing com.artemzin.android.wail.storage.model.Track_VAR without name or artist from database");             TracksDBHelper_VAR.delete(com.artemzin.android.wail.storage.model.Track_VAR);             continue;           }           if (List<LFTrackRequestModel>_VAR.size() >= Number_Constant) {             boolean_VAR=Boolean_Constant;             break;           }           if (com.artemzin.android.wail.storage.model.Track_VAR.getState() == com.artemzin.android.wail.storage.model.Track.STATE_WAITING_FOR_SCROBBLE || com.artemzin.android.wail.storage.model.Track_VAR.getState() == com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR) {             com.artemzin.android.wail.storage.model.Track_VAR.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLING);             com.artemzin.android.wail.storage.model.Track_VAR.setStateTimestamp(System.currentTimeMillis());             com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB.add(com.artemzin.android.wail.storage.model.Track_VAR);             List<LFTrackRequestModel>_VAR.add(new LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track_VAR));           }         }  while (Cursor_VAR.moveToNext());       }       Cursor_VAR.close();       if (com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB.size() != Number_Constant) {         TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB);       }       if (List<LFTrackRequestModel>_VAR.size() == Number_Constant) {         Loggi.w("WAILService all com.artemzin.android.wail.storage.model.Track_VARs marked as scrobbled, skipping scrobble");         return null;       }       try {         final LFScrobbleResponseModel LFScrobbleResponseModel_VAR=LFTrackApi.scrobble(WAILSettings.getLastfmSessionKey(WAILService.this),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),List<LFTrackRequestModel>_VAR);         Loggi.w("WAILService com.artemzin.android.wail.storage.model.Track_VARs scrobbling succeed! Response: " + LFScrobbleResponseModel_VAR);         for (        com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR : com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB) {           com.artemzin.android.wail.storage.model.Track_VAR.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_SUCCESS);           com.artemzin.android.wail.storage.model.Track_VAR.setStateTimestamp(System.currentTimeMillis());         }         TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB);         EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String_VAR,String_Constant,null,(long)com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB.size()).build());         if (boolean_VAR) {           Loggi.w("scrobble started again with force flag, because com.artemzin.android.wail.storage.model.Track_VARs count > max com.artemzin.android.wail.storage.model.Track_VARs per request");           EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String_VAR,"started again because counts of com.artemzin.android.wail.storage.model.Track_VAR was too big",null,Number_Constant).build());           scrobblePendingTracks(Boolean_Constant);         }       }  catch (      NetworkException e) {         Loggi.e("WAILService com.artemzin.android.wail.storage.model.Track_VARs scrobbling to Last.fm failed with network error: " + e.getMessage());         for (        com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR : com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB) {           com.artemzin.android.wail.storage.model.Track_VAR.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR);           com.artemzin.android.wail.storage.model.Track_VAR.setStateTimestamp(System.currentTimeMillis());         }         TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB);         EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());       } catch (      LFApiException e) {         handleSessionKeyInvalidError(e);         Loggi.e("WAILService com.artemzin.android.wail.storage.model.Track_VARs scrobbling to Last.fm failed with api error: " + e.getMessage());         for (        com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR : com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB) {           com.artemzin.android.wail.storage.model.Track_VAR.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR);           com.artemzin.android.wail.storage.model.Track_VAR.setStateTimestamp(System.currentTimeMillis());         }         TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB);         EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());       }       return null;     }   } ); } 
@Override protected void onPreExecute(){   Loggi.w("WAILService going to scrobble pending com.artemzin.android.wail.storage.model.Track_VARs to Last.fm"); } 
@Override protected Void doInBackground(Void... Void_VAR){   TracksDBHelper TracksDBHelper_VAR=TracksDBHelper.getInstance(getApplicationContext());   Cursor Cursor_VAR=TracksDBHelper_VAR.getAllDesc();   final List<com.artemzin.android.wail.storage.model.Track> com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB=new ArrayList<>();   final List<LFTrackRequestModel> List<LFTrackRequestModel>_VAR=new ArrayList<>();   boolean boolean_VAR=Boolean_Constant;   if (Cursor_VAR.getCount() == Number_Constant) {     Loggi.w(String_Constant);     Cursor_VAR.close();     return null;   }   if (Cursor_VAR.moveToFirst()) {     do {       com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR=TracksDBHelper.parseFromCursor(Cursor_VAR);       if (TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track_VAR.getArtist()) || TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track_VAR.getTrack())) {         Loggi.w("Removing com.artemzin.android.wail.storage.model.Track_VAR without name or artist from database");         TracksDBHelper_VAR.delete(com.artemzin.android.wail.storage.model.Track_VAR);         continue;       }       if (List<LFTrackRequestModel>_VAR.size() >= Number_Constant) {         boolean_VAR=Boolean_Constant;         break;       }       if (com.artemzin.android.wail.storage.model.Track_VAR.getState() == com.artemzin.android.wail.storage.model.Track.STATE_WAITING_FOR_SCROBBLE || com.artemzin.android.wail.storage.model.Track_VAR.getState() == com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR) {         com.artemzin.android.wail.storage.model.Track_VAR.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLING);         com.artemzin.android.wail.storage.model.Track_VAR.setStateTimestamp(System.currentTimeMillis());         com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB.add(com.artemzin.android.wail.storage.model.Track_VAR);         List<LFTrackRequestModel>_VAR.add(new LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track_VAR));       }     }  while (Cursor_VAR.moveToNext());   }   Cursor_VAR.close();   if (com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB.size() != Number_Constant) {     TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB);   }   if (List<LFTrackRequestModel>_VAR.size() == Number_Constant) {     Loggi.w("WAILService all com.artemzin.android.wail.storage.model.Track_VARs marked as scrobbled, skipping scrobble");     return null;   }   try {     final LFScrobbleResponseModel LFScrobbleResponseModel_VAR=LFTrackApi.scrobble(WAILSettings.getLastfmSessionKey(WAILService.this),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),List<LFTrackRequestModel>_VAR);     Loggi.w("WAILService com.artemzin.android.wail.storage.model.Track_VARs scrobbling succeed! Response: " + LFScrobbleResponseModel_VAR);     for (    com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR : com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB) {       com.artemzin.android.wail.storage.model.Track_VAR.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_SUCCESS);       com.artemzin.android.wail.storage.model.Track_VAR.setStateTimestamp(System.currentTimeMillis());     }     TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB);     EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String_VAR,String_Constant,null,(long)com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB.size()).build());     if (boolean_VAR) {       Loggi.w("scrobble started again with force flag, because com.artemzin.android.wail.storage.model.Track_VARs count > max com.artemzin.android.wail.storage.model.Track_VARs per request");       EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String_VAR,"started again because counts of com.artemzin.android.wail.storage.model.Track_VAR was too big",null,Number_Constant).build());       scrobblePendingTracks(Boolean_Constant);     }   }  catch (  NetworkException e) {     Loggi.e("WAILService com.artemzin.android.wail.storage.model.Track_VARs scrobbling to Last.fm failed with network error: " + e.getMessage());     for (    com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR : com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB) {       com.artemzin.android.wail.storage.model.Track_VAR.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR);       com.artemzin.android.wail.storage.model.Track_VAR.setStateTimestamp(System.currentTimeMillis());     }     TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB);     EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());   } catch (  LFApiException e) {     handleSessionKeyInvalidError(e);     Loggi.e("WAILService com.artemzin.android.wail.storage.model.Track_VARs scrobbling to Last.fm failed with api error: " + e.getMessage());     for (    com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR : com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB) {       com.artemzin.android.wail.storage.model.Track_VAR.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR);       com.artemzin.android.wail.storage.model.Track_VAR.setStateTimestamp(System.currentTimeMillis());     }     TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.Track_VARsToScrobbleListForDB);     EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());   }   return null; } 
private synchronized void updateNowPlaying(Track Track_VAR){   if (Track_VAR == null) {     Loggi.w("WAILService.updateNowPlaying() Track_VAR is null, skipping");     return;   }   if (!NetworkUtil.isAvailable(getApplicationContext())) {     Loggi.w(String_Constant + Track_VAR);     return;   }  else   if (!WAILSettings.isEnableScrobblingOverMobileNetwork(getApplicationContext()) && NetworkUtil.isMobileNetwork(getApplicationContext())) {     Loggi.w(String_Constant + Track_VAR);     return;   }   final Track Track_VAR=com.artemzin.android.wail.storage.model.Track_VAR;   if (Track_VAR != null) {     if (System.currentTimeMillis() - Track_VAR.getStateTimestamp() < Number_Constant && Track_VAR.specialEquals(Track_VAR)) {       Loggi.w("WAILService.updateNowPlaying() skipping nowplaying update, too small pause for Track_VAR: " + Track_VAR);       return;     }   }   com.artemzin.android.wail.storage.model.Track_VAR=Track_VAR.copy();   com.artemzin.android.wail.storage.model.Track_VAR.setStateTimestamp(System.currentTimeMillis());   if (WAILSettings.isLastfmNowplayingUpdateEnabled(getApplicationContext())) {     updateLastfmNowplaying(Track_VAR);   }  else {     Loggi.w("WAILService.updateNowPlaying() last.fm nowplaying updates disabled, skipping Track_VAR: " + Track_VAR);   } } 
private synchronized void updateLastfmNowplaying(final com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR){   Loggi.i("WAILService going to update last.fm nowplaying with com.artemzin.android.wail.storage.model.Track_VAR: " + com.artemzin.android.wail.storage.model.Track_VAR);   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Object,Object,Object>(){     @Override protected Object doInBackground(    Object... params){       try {         final LFTrackRequestModel com.artemzin.android.wail.storage.model.Track_VARForRequest=new LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track_VAR);         if (com.artemzin.android.wail.storage.model.Track_VARForRequest.getDuration() == null || com.artemzin.android.wail.storage.model.Track_VARForRequest.getDuration() <= Number_Constant) {           com.artemzin.android.wail.storage.model.Track_VARForRequest.setDuration(int_VAR);         }         Loggi.w(String_Constant + LFTrackApi.updateNowPlaying(WAILSettings.getLastfmSessionKey(getApplicationContext()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),com.artemzin.android.wail.storage.model.Track_VARForRequest));         EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build());       }  catch (      NetworkException e) {         Loggi.e("Can not update last.fm nowplaying with com.artemzin.android.wail.storage.model.Track_VAR: " + com.artemzin.android.wail.storage.model.Track_VAR + String_Constant+ e.getMessage());         EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());       } catch (      LFApiException e) {         handleSessionKeyInvalidError(e);         Loggi.e("Can not update last.fm nowplaying with com.artemzin.android.wail.storage.model.Track_VAR: " + com.artemzin.android.wail.storage.model.Track_VAR + String_Constant+ e.getMessage());         EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());       }       return null;     }   } ); } 
@Override protected Object doInBackground(Object... Object_VAR){   try {     final LFTrackRequestModel LFTrackRequestModel_VAR=new LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track_VAR);     if (LFTrackRequestModel_VAR.getDuration() == null || LFTrackRequestModel_VAR.getDuration() <= Number_Constant) {       LFTrackRequestModel_VAR.setDuration(int_VAR);     }     Loggi.w(String_Constant + LFTrackApi.updateNowPlaying(WAILSettings.getLastfmSessionKey(getApplicationContext()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),LFTrackRequestModel_VAR));     EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build());   }  catch (  NetworkException e) {     Loggi.e("Can not update last.fm nowplaying with com.artemzin.android.wail.storage.model.Track_VAR: " + com.artemzin.android.wail.storage.model.Track_VAR + String_Constant+ e.getMessage());     EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());   } catch (  LFApiException e) {     handleSessionKeyInvalidError(e);     Loggi.e("Can not update last.fm nowplaying with com.artemzin.android.wail.storage.model.Track_VAR: " + com.artemzin.android.wail.storage.model.Track_VAR + String_Constant+ e.getMessage());     EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());   }   return null; } 
private void mayBeCleanDB(){   if (new Random(System.currentTimeMillis()).nextInt(Number_Constant) > Number_Constant) {     try {       final int int_VAR=TracksDBHelper.getInstance(getApplicationContext()).removeOldOrInconsistentTracks(Number_Constant);       Loggi.w("Removed old com.artemzin.android.wail.storage.model.Track_VARs, count: " + int_VAR);     }  catch (    Exception e) {       Loggi.e("Could not remove old com.artemzin.android.wail.storage.model.Track_VARs: " + e.getMessage());       EasyTracker.getInstance(getApplication()).send(MapBuilder.createException(String_Constant + e.getMessage(),Boolean_Constant).build());     }   } } 
private void pushLovedTracks(){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){     private void loveTrack(    Track com.artemzin.android.wail.storage.model.Track_VAR){       if (com.artemzin.android.wail.storage.model.Track_VAR != null) {         Loggi.i("Wail is going to love com.artemzin.android.wail.storage.model.Track_VAR: " + com.artemzin.android.wail.storage.model.Track_VAR);         LFTrackRequestModel LFTrackRequestModel_VAR=new LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track_VAR);         try {           Loggi.w(String_Constant + LFTrackApi.love(WAILSettings.getLastfmSessionKey(getApplicationContext()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),LFTrackRequestModel_VAR));           LovedTracksDBHelper.getInstance(getApplicationContext()).delete(com.artemzin.android.wail.storage.model.Track_VAR);           EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build());         }  catch (        NetworkException e) {           Loggi.e("Can not love com.artemzin.android.wail.storage.model.Track_VAR: " + com.artemzin.android.wail.storage.model.Track_VAR + String_Constant+ e.getMessage());           EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());         } catch (        LFApiException e) {           handleSessionKeyInvalidError(e);           Loggi.e("Can not love com.artemzin.android.wail.storage.model.Track_VAR: " + com.artemzin.android.wail.storage.model.Track_VAR + String_Constant+ e.getMessage());           EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());         }       }     }     @Override protected Void doInBackground(    Void... params){       LovedTracksDBHelper LovedTracksDBHelper_VAR=LovedTracksDBHelper.getInstance(getApplicationContext());       Cursor Cursor_VAR=LovedTracksDBHelper_VAR.getAllDesc();       if (Cursor_VAR.moveToFirst()) {         do {           Track com.artemzin.android.wail.storage.model.Track_VAR=LovedTracksDBHelper.parseFromCursor(Cursor_VAR);           if (TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track_VAR.getArtist()) || TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track_VAR.getTrack())) {             Loggi.w("Removing com.artemzin.android.wail.storage.model.Track_VAR without name or artist from loved com.artemzin.android.wail.storage.model.Track_VARs database");             LovedTracksDBHelper_VAR.delete(com.artemzin.android.wail.storage.model.Track_VAR);             continue;           }           loveTrack(com.artemzin.android.wail.storage.model.Track_VAR);         }  while (Cursor_VAR.moveToNext());       }       SystemClock.sleep(Number_Constant);       return null;     }     @Override protected void onPostExecute(    Void aVoid){       StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackLovedStatusBarNotification();     }   } ); } 
private void loveTrack(Track Track_VAR){   if (Track_VAR != null) {     Loggi.i("Wail is going to love Track_VAR: " + Track_VAR);     LFTrackRequestModel Track_VARForRequest=new LFTrackRequestModel(Track_VAR);     try {       Loggi.w(String_Constant + LFTrackApi.love(WAILSettings.getLastfmSessionKey(getApplicationContext()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),Track_VARForRequest));       LovedTracksDBHelper.getInstance(getApplicationContext()).delete(Track_VAR);       EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build());     }  catch (    NetworkException e) {       Loggi.e("Can not love Track_VAR: " + Track_VAR + String_Constant+ e.getMessage());       EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());     } catch (    LFApiException e) {       handleSessionKeyInvalidError(e);       Loggi.e("Can not love Track_VAR: " + Track_VAR + String_Constant+ e.getMessage());       EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String_VAR,String_Constant + e.getMessage(),null,Number_Constant).build());     }   } } 
@Override protected Void doInBackground(Void... Void_VAR){   LovedTracksDBHelper LovedTracksDBHelper_VAR=LovedTracksDBHelper.getInstance(getApplicationContext());   Cursor Cursor_VAR=LovedTracksDBHelper_VAR.getAllDesc();   if (Cursor_VAR.moveToFirst()) {     do {       Track com.artemzin.android.wail.storage.model.Track_VAR=LovedTracksDBHelper.parseFromCursor(Cursor_VAR);       if (TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track_VAR.getArtist()) || TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track_VAR.getTrack())) {         Loggi.w("Removing com.artemzin.android.wail.storage.model.Track_VAR without name or artist from loved com.artemzin.android.wail.storage.model.Track_VARs database");         LovedTracksDBHelper_VAR.delete(com.artemzin.android.wail.storage.model.Track_VAR);         continue;       }       loveTrack(com.artemzin.android.wail.storage.model.Track_VAR);     }  while (Cursor_VAR.moveToNext());   }   SystemClock.sleep(Number_Constant);   return null; } 
@Override protected void onPostExecute(Void Void_VAR){   StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackLovedStatusBarNotification(); } 
private void handleSessionKeyInvalidError(LFApiException LFApiException_VAR){   if (LFApiException.ERROR_INVALID_SESSION_KEY.equals(LFApiException_VAR.getError())) {     sendBroadcast(new Intent(BaseActivity.ACTION_INVALID_SESSION_KEY));   } } 
public LastCapturedTrackInfo(com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR,boolean boolean_VAR){   this.com.artemzin.android.wail.storage.model.Track_VAR=com.artemzin.android.wail.storage.model.Track_VAR;   this.boolean_VAR=boolean_VAR; } 
public com.artemzin.android.wail.storage.model.Track getTrack(){   return com.artemzin.android.wail.storage.model.Track_VAR; } 
public boolean boolean_VAR(){   return boolean_VAR; } 
public String toJSON(){   final JSONObject JSONObject_VAR=new JSONObject();   try {     JSONObject_VAR.put("String_VARPackageName",com.artemzin.android.wail.storage.model.Track_VAR.getPlayerPackageName());     JSONObject_VAR.put("com.artemzin.android.wail.storage.model.Track_VAR",com.artemzin.android.wail.storage.model.Track_VAR.getTrack());     JSONObject_VAR.put(String_Constant,com.artemzin.android.wail.storage.model.Track_VAR.getArtist());     JSONObject_VAR.put(String_Constant,com.artemzin.android.wail.storage.model.Track_VAR.getAlbum());     JSONObject_VAR.put("long_VAR",com.artemzin.android.wail.storage.model.Track_VAR.getDuration());     JSONObject_VAR.put(String_Constant,com.artemzin.android.wail.storage.model.Track_VAR.getTimestamp());     JSONObject_VAR.put(String_Constant,com.artemzin.android.wail.storage.model.Track_VAR.getState());     JSONObject_VAR.put(String_Constant,com.artemzin.android.wail.storage.model.Track_VAR.getStateTimestamp());     JSONObject_VAR.put("boolean_VAR",boolean_VAR);   }  catch (  Exception e) {     return null;   }   return JSONObject_VAR.toString(); } 
public static LastCapturedTrackInfo fromJSON(String String_VAR){   try {     final JSONObject JSONObject_VAR=new JSONObject(String_VAR);     final com.artemzin.android.wail.storage.model.Track com.artemzin.android.wail.storage.model.Track_VAR=new com.artemzin.android.wail.storage.model.Track();     com.artemzin.android.wail.storage.model.Track_VAR.setPlayerPackageName(JSONObject_VAR.optString("String_VARPackageName"));     com.artemzin.android.wail.storage.model.Track_VAR.setTrack(JSONObject_VAR.optString("com.artemzin.android.wail.storage.model.Track_VAR"));     com.artemzin.android.wail.storage.model.Track_VAR.setArtist(JSONObject_VAR.optString(String_Constant));     com.artemzin.android.wail.storage.model.Track_VAR.setAlbum(JSONObject_VAR.optString(String_Constant));     com.artemzin.android.wail.storage.model.Track_VAR.setDuration(JSONObject_VAR.optLong("long_VAR"));     com.artemzin.android.wail.storage.model.Track_VAR.setTimestamp(JSONObject_VAR.optLong(String_Constant));     com.artemzin.android.wail.storage.model.Track_VAR.setState(JSONObject_VAR.optInt(String_Constant));     com.artemzin.android.wail.storage.model.Track_VAR.setStateTimestamp(JSONObject_VAR.optLong(String_Constant));     return new LastCapturedTrackInfo(com.artemzin.android.wail.storage.model.Track_VAR,JSONObject_VAR.optBoolean("boolean_VAR"));   }  catch (  Exception e) {     return null;   } } 
private AppDBManager(Context Context_VAR){   super(Context_VAR,String_VAR,null,int_VAR);   this.Context_VAR=Context_VAR; } 
public static AppDBManager getInstance(Context Context_VAR){   if (AppDBManager_VAR == null) { synchronized (AppDBManager.class) {       if (AppDBManager_VAR == null) {         AppDBManager_VAR=new AppDBManager(Context_VAR.getApplicationContext());       }     }   }   return AppDBManager_VAR; } 
@Override public void onCreate(SQLiteDatabase SQLiteDatabase_VAR){   SQLiteDatabase_VAR.execSQL(TracksDBHelper.TableInfo.CREATE_TABLE_QUERY);   SQLiteDatabase_VAR.execSQL(PlayersDBHelper.TableInfo.CREATE_TABLE_QUERY);   SQLiteDatabase_VAR.execSQL(LovedTracksDBHelper.TableInfo.CREATE_TABLE_QUERY);   SQLiteDatabase_VAR.execSQL(IgnoredPlayersDBHelper.TableInfo.CREATE_TABLE_QUERY); } 
@Override public void onUpgrade(SQLiteDatabase SQLiteDatabase_VAR,int int_VAR,int int_VAR){ switch (int_VAR) { case Number_Constant:     SQLiteDatabase_VAR.execSQL(LovedTracksDBHelper.TableInfo.CREATE_TABLE_QUERY); case Number_Constant:   SQLiteDatabase_VAR.execSQL(IgnoredPlayersDBHelper.TableInfo.CREATE_TABLE_QUERY); } } 
@Override public synchronized void close(){   super.close();   AppDBManager_VAR=null; } 
public static Boolean convertIntegerToBoolean(int int_VAR){   if (int_VAR < Number_Constant)   return Boolean_Constant;   if (int_VAR > Number_Constant)   return Boolean_Constant;  else   return null; } 
public static int convertBooleanToInteger(Boolean Boolean_VAR){   if (Boolean_VAR == null)   return Number_Constant;   return Boolean_VAR ? Number_Constant : -Number_Constant; } 
public void clearAll(){   PlayersDBHelper.getInstance(Context_VAR).removeAll();   TracksDBHelper.getInstance(Context_VAR).deleteAll();   LovedTracksDBHelper.getInstance(Context_VAR).deleteAll();   IgnoredPlayersDBHelper.getInstance(Context_VAR).deleteAll(); } 
private IgnoredPlayersDBHelper(Context Context_VAR){   this.Context_VAR=Context_VAR; } 
public static IgnoredPlayersDBHelper getInstance(Context Context_VAR){   if (IgnoredPlayersDBHelper_VAR == null) { synchronized (IgnoredPlayersDBHelper.class) {       if (IgnoredPlayersDBHelper_VAR == null) {         IgnoredPlayersDBHelper_VAR=new IgnoredPlayersDBHelper(Context_VAR);       }     }   }   return IgnoredPlayersDBHelper_VAR; } 
public synchronized long add(String String_VAR){   ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(TableInfo.String_VAR,String_VAR);   final long long_VAR=AppDBManager.getInstance(Context_VAR).getWritableDatabase().insert(TableInfo.String_VAR,null,ContentValues_VAR);   if (long_VAR == -Number_Constant) {     Loggi.e(String_Constant + String_VAR);   }   return long_VAR; } 
public synchronized List<ApplicationInfo> getAll(){   List<ApplicationInfo> List<ApplicationInfo>_VAR=new ArrayList<>();   Cursor Cursor_VAR=AppDBManager.getInstance(Context_VAR).getReadableDatabase().query(Boolean_Constant,TableInfo.String_VAR,new String[]{TableInfo.String_VAR},null,null,null,null,null,null);   if (Cursor_VAR.moveToFirst()) {     while (!Cursor_VAR.isAfterLast()) {       String String_VAR=Cursor_VAR.getString(TableInfo.int_VAR);       ApplicationInfo ApplicationInfo_VAR;       try {         ApplicationInfo_VAR=Context_VAR.getPackageManager().getApplicationInfo(String_VAR,Number_Constant);       }  catch (      PackageManager.NameNotFoundException e) {         Loggi.w(String_Constant + String_VAR);         ApplicationInfo_VAR=new ApplicationInfo();         ApplicationInfo_VAR.String_VAR=String_VAR;       }       List<ApplicationInfo>_VAR.add(ApplicationInfo_VAR);       Cursor_VAR.moveToNext();     }   }   Cursor_VAR.close();   return List<ApplicationInfo>_VAR; } 
public synchronized boolean contains(String String_VAR){   return AppDBManager.getInstance(Context_VAR).getReadableDatabase().query(TableInfo.String_VAR,new String[]{TableInfo.String_VAR},TableInfo.String_VAR + String_Constant,new String[]{String.valueOf(String_VAR)},null,null,null).getCount() >= Number_Constant; } 
public synchronized int deleteAll(){   return AppDBManager.getInstance(Context_VAR).getWritableDatabase().delete(TableInfo.String_VAR,null,null); } 
public synchronized int delete(String String_VAR){   return AppDBManager.getInstance(Context_VAR).getWritableDatabase().delete(TableInfo.String_VAR,TableInfo.String_VAR + String_Constant,new String[]{String.valueOf(String_VAR)}); } 
private LovedTracksDBHelper(Context Context_VAR){   this.Context_VAR=Context_VAR; } 
public static LovedTracksDBHelper getInstance(Context Context_VAR){   if (LovedTracksDBHelper_VAR == null) { synchronized (LovedTracksDBHelper.class) {       if (LovedTracksDBHelper_VAR == null) {         LovedTracksDBHelper_VAR=new LovedTracksDBHelper(Context_VAR);       }     }   }   return LovedTracksDBHelper_VAR; } 
public synchronized long add(Track Track_VAR){   ContentValues ContentValues_VAR=asContentValues(Track_VAR);   final long long_VAR=AppDBManager.getInstance(Context_VAR).getWritableDatabase().insert(TableInfo.String_VAR,null,ContentValues_VAR);   if (long_VAR == -Number_Constant) {     Loggi.e("LovedTracksDBHelper can not add Track_VAR info, Track_VAR: " + Track_VAR);   }   return long_VAR; } 
public synchronized Cursor getAllDesc(){   return AppDBManager.getInstance(Context_VAR).getReadableDatabase().query(TableInfo.String_VAR,null,null,null,null,null,TableInfo.String_VAR + String_Constant); } 
public synchronized int deleteAll(){   final int int_VAR=AppDBManager.getInstance(Context_VAR).getWritableDatabase().delete(TableInfo.String_VAR,null,null);   return int_VAR; } 
public synchronized int delete(Track Track_VAR){   return AppDBManager.getInstance(Context_VAR).getWritableDatabase().delete(TableInfo.String_VAR,TableInfo.String_VAR + String_Constant,new String[]{String.valueOf(Track_VAR.getInternalDBId())}); } 
public static Track parseFromCursor(Cursor Cursor_VAR){   final Track Track_VAR=new Track();   Track_VAR.setInternalDBId(Cursor_VAR.getLong(TableInfo.int_VAR));   Track_VAR.setTrack(Cursor_VAR.getString(TableInfo.int_VAR));   Track_VAR.setArtist(Cursor_VAR.getString(TableInfo.int_VAR));   return Track_VAR; } 
private static ContentValues asContentValues(Track Track_VAR){   final ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(TableInfo.String_VAR,Track_VAR.getTrack());   ContentValues_VAR.put(TableInfo.String_VAR,Track_VAR.getArtist());   return ContentValues_VAR; } 
public Player(){ } 
public Player(String String_VAR,String String_VAR,String String_VAR){   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.String_VAR=String_VAR;   this.boolean_VAR=Boolean_Constant; } 
public String getPackageName(){   return String_VAR; } 
public Player setPackageName(String String_VAR){   this.String_VAR=String_VAR;   return this; } 
public boolean boolean_VAR(){   return boolean_VAR; } 
public Player setEnabled(boolean boolean_VAR){   this.boolean_VAR=boolean_VAR;   return this; } 
public String getDisplayName(){   return String_VAR; } 
public Player setDisplayName(String String_VAR){   this.String_VAR=String_VAR;   return this; } 
public int getScrobbledTracksCount(){   return int_VAR; } 
public Player setScrobbledTracksCount(int int_VAR){   this.int_VAR=int_VAR;   return this; } 
public String getLink(){   return String_VAR; } 
public Player setLink(String String_VAR){   this.String_VAR=String_VAR;   return this; } 
private PlayersDBHelper(Context Context_VAR){   this.Context_VAR=Context_VAR.getApplicationContext(); } 
public static PlayersDBHelper getInstance(Context Context_VAR){   if (PlayersDBHelper_VAR == null) { synchronized (PlayersDBHelper.class) {       if (PlayersDBHelper_VAR == null) {         PlayersDBHelper_VAR=new PlayersDBHelper(Context_VAR);       }     }   }   return PlayersDBHelper_VAR; } 
public synchronized boolean add(Player Player_VAR){   final ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(TableInfo.String_VAR,Player_VAR.getPackageName());   ContentValues_VAR.put(TableInfo.String_VAR,Player_VAR.boolean_VAR());   ContentValues_VAR.put(TableInfo.String_VAR,Player_VAR.getDisplayName());   ContentValues_VAR.put(TableInfo.String_VAR,Player_VAR.getScrobbledTracksCount());   ContentValues_VAR.put(TableInfo.String_VAR,Player_VAR.getLink());   return AppDBManager.getInstance(Context_VAR).getWritableDatabase().insert(TableInfo.String_VAR,null,ContentValues_VAR) != -Number_Constant; } 
public synchronized Player findPlayerByPackageName(String String_VAR){   final Cursor Cursor_VAR=AppDBManager.getInstance(Context_VAR).getReadableDatabase().query(TableInfo.String_VAR,null,TableInfo.String_VAR + String_Constant,new String[]{String_VAR},null,null,TableInfo.String_VAR);   Player Player_VAR=null;   if (Cursor_VAR.moveToFirst()) {     Player_VAR=parseFromCursor(Cursor_VAR);   }   Cursor_VAR.close();   return Player_VAR; } 
public synchronized List<Player> getAll(){   final Cursor Cursor_VAR=AppDBManager.getInstance(Context_VAR).getReadableDatabase().query(TableInfo.String_VAR,null,null,null,null,null,TableInfo.String_VAR);   final List<Player> List<Player>_VAR=new ArrayList<Player>(Cursor_VAR.getCount());   if (Cursor_VAR.moveToFirst()) {     do {       List<Player>_VAR.add(parseFromCursor(Cursor_VAR));     }  while (Cursor_VAR.moveToNext());   }   Cursor_VAR.close();   return List<Player>_VAR; } 
public synchronized int removeAll(){   return AppDBManager.getInstance(Context_VAR).getWritableDatabase().delete(TableInfo.String_VAR,null,null); } 
private static Player parseFromCursor(Cursor Cursor_VAR){   final Player Player_VAR=new Player();   Player_VAR.setPackageName(Cursor_VAR.getString(TableInfo.int_VAR));   Player_VAR.setEnabled(Cursor_VAR.getInt(TableInfo.int_VAR) == TableInfo.DEFAULT_String_VAR);   Player_VAR.setDisplayName(Cursor_VAR.getString(TableInfo.NUM_String_VAR));   Player_VAR.setScrobbledTracksCount(Cursor_VAR.getInt(TableInfo.NUM_String_VAR));   Player_VAR.setLink(Cursor_VAR.getString(TableInfo.NUM_String_VAR));   return Player_VAR; } 
public synchronized void updateSupportedPlayers(){   final Player[] Player[]_VAR={new Player("com.maxmpz.audioPlayer_VAR",String_Constant,"https:  AppDBManager.getInstance(Context_VAR).getWritableDatabase().beginTransaction();   try {     for (    Player defaultSupportedPlayer : Player[]_VAR) {       if (findPlayerByPackageName(defaultSupportedPlayer.getPackageName()) == null) {         add(defaultSupportedPlayer);       }     }     AppDBManager.getInstance(Context_VAR).getWritableDatabase().setTransactionSuccessful();   }  catch (  Exception e) {     EasyTracker.getInstance(Context_VAR).send(MapBuilder.createException("Can not update supported List<Player>_VAR: " + e.getMessage(),Boolean_Constant).build());     Loggi.e("Can not update supported List<Player>_VAR: " + e.getMessage());   }  finally {     AppDBManager.getInstance(Context_VAR).getWritableDatabase().endTransaction();   } } 
private TracksDBHelper(Context Context_VAR){   this.Context_VAR=Context_VAR.getApplicationContext(); } 
public static TracksDBHelper getInstance(Context Context_VAR){   if (TracksDBHelper_VAR == null) { synchronized (TracksDBHelper.class) {       if (TracksDBHelper_VAR == null) {         TracksDBHelper_VAR=new TracksDBHelper(Context_VAR);       }     }   }   return TracksDBHelper_VAR; } 
public synchronized long add(Track Track_VAR){   ContentValues ContentValues_VAR=asContentValues(Track_VAR);   final long long_VAR=AppDBManager.getInstance(Context_VAR).getWritableDatabase().insert(TableInfo.String_VAR,null,ContentValues_VAR);   if (long_VAR == -Number_Constant) {     Loggi.e("TracksDBHelper can not add Track_VAR info, Track_VAR: " + Track_VAR);   }   sendBroadcastTracksChanged();   return long_VAR; } 
public synchronized boolean update(Track Track_VAR){   ContentValues ContentValues_VAR=asContentValues(Track_VAR);   final boolean boolean_VAR=AppDBManager.getInstance(Context_VAR).getWritableDatabase().update(TableInfo.String_VAR,ContentValues_VAR,TableInfo.String_VAR + String_Constant,new String[]{String.valueOf(Track_VAR.getInternalDBId())}) >= Number_Constant;   if (!boolean_VAR) {     Loggi.e("TracksDBHelper can not update Track_VAR info, Track_VAR: " + Track_VAR);   }   sendBroadcastTracksChanged();   return boolean_VAR; } 
public synchronized int delete(Track Track_VAR){   return AppDBManager.getInstance(Context_VAR).getWritableDatabase().delete(TableInfo.String_VAR,TableInfo.String_VAR + String_Constant,new String[]{String.valueOf(Track_VAR.getInternalDBId())}); } 
public synchronized void updateAll(List<Track> List<Track>_VAR){   AppDBManager.getInstance(Context_VAR).getWritableDatabase().beginTransaction();   try {     for (    Track Track_VAR : List<Track>_VAR) {       final ContentValues ContentValues_VAR=asContentValues(Track_VAR);       AppDBManager.getInstance(Context_VAR).getWritableDatabase().update(TableInfo.String_VAR,ContentValues_VAR,TableInfo.String_VAR + String_Constant,new String[]{String.valueOf(Track_VAR.getInternalDBId())});     }     AppDBManager.getInstance(Context_VAR).getWritableDatabase().setTransactionSuccessful();   }  catch (  Exception e) {     Loggi.e(String_Constant + e);   }  finally {     AppDBManager.getInstance(Context_VAR).getWritableDatabase().endTransaction();   }   sendBroadcastTracksChanged(); } 
public synchronized Cursor getAllDesc(){   return AppDBManager.getInstance(Context_VAR).getReadableDatabase().query(TableInfo.String_VAR,null,null,null,null,null,TableInfo.String_VAR + String_Constant); } 
public synchronized Track getLastAddedTrack(){   Cursor Cursor_VAR=AppDBManager.getInstance(Context_VAR).getReadableDatabase().rawQuery(String_Constant + TableInfo.String_VAR + String_Constant+ TableInfo.String_VAR+ String_Constant,null);   Track Track_VAR=null;   if (Cursor_VAR.moveToFirst()) {     Track_VAR=parseFromCursor(Cursor_VAR);   }   Cursor_VAR.close();   return Track_VAR; } 
public synchronized int deleteAll(){   final int int_VAR=AppDBManager.getInstance(Context_VAR).getWritableDatabase().delete(TableInfo.String_VAR,null,null);   sendBroadcastTracksChanged();   return int_VAR; } 
public synchronized int removeOldOrInconsistentTracks(int int_VAR){   AppDBManager.getInstance(Context_VAR).getWritableDatabase().beginTransaction();   int int_VAR=Number_Constant;   try {     Cursor Cursor_VAR=getAllDesc();     if (Cursor_VAR.moveToFirst()) {       do {         Track Track_VAR=parseFromCursor(Cursor_VAR);         if (Track_VAR.getState() == Track.STATE_SCROBBLING && System.currentTimeMillis() - Track_VAR.getStateTimestamp() > Number_Constant) {           int_VAR+=delete(Track_VAR);         }       }  while (Cursor_VAR.moveToNext());     }     final int int_VAR=Cursor_VAR.getCount();     if (int_VAR > int_VAR) {       for (int i=int_VAR; i < int_VAR; i++) {         Cursor_VAR.moveToPosition(i);         final Track Track_VAR=parseFromCursor(Cursor_VAR);         if (System.currentTimeMillis() - Track_VAR.getStateTimestamp() > Number_Constant && (Track_VAR.getState() == Track.STATE_SCROBBLE_SUCCESS || Track_VAR.getState() == Track.STATE_SCROBBLE_ERROR || Track_VAR.getState() == Track.STATE_SCROBBLING)) {           int_VAR+=delete(Track_VAR);         }       }     }     AppDBManager.getInstance(Context_VAR).getWritableDatabase().setTransactionSuccessful();     Cursor_VAR.close();   }  catch (  Exception e) {     String String_VAR=String_Constant + e;     Loggi.e(String_VAR);     EasyTracker.getInstance(Context_VAR).send(MapBuilder.createException(String_VAR,Boolean_Constant).build());   }  finally {     AppDBManager.getInstance(Context_VAR).getWritableDatabase().endTransaction();   }   if (int_VAR > Number_Constant) {     try {       AppDBManager.getInstance(Context_VAR).getWritableDatabase().execSQL(String_Constant);     }  catch (    Exception e) {       Loggi.e(String_Constant + e.getMessage());     }   }   sendBroadcastTracksChanged();   return int_VAR; } 
private void sendBroadcastTracksChanged(){   LocalBroadcastManager.getInstance(Context_VAR).sendBroadcast(new Intent(String_VAR)); } 
public static ContentValues asContentValues(Track Track_VAR){   final ContentValues ContentValues_VAR=new ContentValues();   ContentValues_VAR.put(TableInfo.String_VAR,Track_VAR.getPlayerPackageName());   ContentValues_VAR.put(TableInfo.String_VAR,Track_VAR.getTrack());   ContentValues_VAR.put(TableInfo.String_VAR,Track_VAR.getArtist());   ContentValues_VAR.put(TableInfo.String_VAR,Track_VAR.getAlbum());   ContentValues_VAR.put(TableInfo.String_VAR,Track_VAR.getDuration());   ContentValues_VAR.put(TableInfo.String_VAR,Track_VAR.getTimestamp());   ContentValues_VAR.put(TableInfo.String_VAR,Track_VAR.getState());   ContentValues_VAR.put(TableInfo.String_VAR_TIMESTAMP,Track_VAR.getStateTimestamp());   return ContentValues_VAR; } 
public static Track parseFromCursor(Cursor Cursor_VAR){   final Track Track_VAR=new Track();   Track_VAR.setInternalDBId(Cursor_VAR.getLong(TableInfo.int_VAR));   Track_VAR.setPlayerPackageName(Cursor_VAR.getString(TableInfo.int_VAR));   Track_VAR.setTrack(Cursor_VAR.getString(TableInfo.int_VAR));   Track_VAR.setArtist(Cursor_VAR.getString(TableInfo.int_VAR));   Track_VAR.setAlbum(Cursor_VAR.getString(TableInfo.int_VAR));   Track_VAR.setDuration(Cursor_VAR.getLong(TableInfo.int_VAR));   Track_VAR.setTimestamp(Cursor_VAR.getLong(TableInfo.NUM_String_VAR));   Track_VAR.setState(Cursor_VAR.getInt(TableInfo.NUM_String_VAR));   Track_VAR.setStateTimestamp(Cursor_VAR.getLong(TableInfo.NUM_String_VAR_TIMESTAMP));   return Track_VAR; } 
public long getInternalDBId(){   return long_VAR; } 
public void setInternalDBId(long long_VAR){   this.long_VAR=long_VAR; } 
public String getPlayerPackageName(){   return String_VAR; } 
public void setPlayerPackageName(String String_VAR){   this.String_VAR=String_VAR; } 
public String getTrack(){   return Track_VAR; } 
public void setTrack(String String_VAR){   this.String_VAR=String_VAR; } 
public String getArtist(){   return String_VAR; } 
public void setArtist(String String_VAR){   this.String_VAR=String_VAR; } 
public String getAlbum(){   return String_VAR; } 
public void setAlbum(String String_VAR){   this.String_VAR=String_VAR; } 
public long getDuration(){   return long_VAR; } 
public void setDuration(long long_VAR){   this.long_VAR=long_VAR; } 
public long getTimestamp(){   return long_VAR; } 
public void setTimestamp(long long_VAR){   this.long_VAR=long_VAR; } 
public int getState(){   return int_VAR; } 
public void setState(int int_VAR){   this.int_VAR=int_VAR; } 
public long getStateTimestamp(){   return int_VARTimestamp; } 
public void setStateTimestamp(long long_VAR){   this.long_VAR=long_VAR; } 
@Override public String toString(){   return "Track: String_VAR - " + String_VAR + ", Track_VAR name: "+ Track_VAR+ ", String_VAR: "+ String_VAR+ ", String_VAR: "+ String_VAR+ ", long_VAR: "+ long_VAR; } 
public Track copy(){   final Track Track_VAR=new Track();   Track_VAR.String_VAR=String_VAR;   Track_VAR.Track_VAR=Track_VAR;   Track_VAR.String_VAR=String_VAR;   Track_VAR.String_VAR=String_VAR;   Track_VAR.long_VAR=long_VAR;   Track_VAR.long_VAR=long_VAR;   Track_VAR.int_VAR=int_VAR;   return Track_VAR; } 
 public boolean specialEquals(Track Track_VAR){   if (Track_VAR == null)   return Boolean_Constant;   if (!TextUtils.equals(getPlayerPackageName(),Track_VAR.getPlayerPackageName())) {     return Boolean_Constant;   }   if (!TextUtils.equals(getTrack(),Track_VAR.getTrack())) {     return Boolean_Constant;   }   if (!TextUtils.equals(getAlbum(),Track_VAR.getAlbum())) {     return Boolean_Constant;   }   if (long_VAR != Track_VAR.getDuration()) {     return Boolean_Constant;   }   return Boolean_Constant; } 
@Override public bObject_VARObject_VARlean equals(Object Object_VAR){   if (Object_VAR instanceObject_VARf Track) {     Track Track_VAR=(Track)Object_VAR;     return long_VAR == Track_VAR.long_VAR && TextUtils.equals(String_VAR,Track_VAR.String_VAR) && TextUtils.equals(this.Track_VAR,Track_VAR.Track_VAR) && TextUtils.equals(String_VAR,Track_VAR.String_VAR) && TextUtils.equals(String_VAR,Track_VAR.String_VAR) && duratiObject_VARn == Track_VAR.duratiObject_VARn && long_VAR == Track_VAR.long_VAR && int_VAR == Track_VAR.int_VAR && int_VARTimestamp == Track_VAR.int_VARTimestamp;   }   return Boolean_Constant; } 
private WAILSettings(){ } 
private static SharedPreferences getSharedPreferences(Context Context_VAR){   return Context_VAR.getSharedPreferences(String_VAR,Context.MODE_PRIVATE); } 
public static synchronized void clearAllSettings(Context Context_VAR){   String_VAR=null;   String_VAR=null;   Boolean_VAR=null;   Integer_VAR=null;   Integer_VAR=null;   Long_VAR=null;   Boolean_VAR=null;   String_VAR=null;   String_VAR=null;   Boolean_VAR=null;   Boolean_VAR=null;   Boolean_VAR=null;   Boolean_VAR=null;   getSharedPreferences(Context_VAR).edit().clear().apply(); } 
public static synchronized String getLanguage(Context Context_VAR){   return getSharedPreferences(Context_VAR).getString(String_VAR,null); } 
public static synchronized void setLanguage(Context Context_VAR,String String_VAR){   getSharedPreferences(Context_VAR).edit().putString(String_VAR,String_VAR).apply(); } 
public static synchronized enum_VAR getenum_VAR(Context Context_VAR){   return enum_VAR.String_VAROf(getSharedPreferences(Context_VAR).getString(String_VAR,enum_VAR.LIGHT.name())); } 
public static synchronized void setenum_VAR(Context Context_VAR,enum_VAR enum_VAR_VAR){   getSharedPreferences(Context_VAR).edit().putString(String_VAR,enum_VAR_VAR.name()).apply(); } 
public static synchronized boolean isAuthorized(Context Context_VAR){   return !TextUtils.isEmpty(getLastfmSessionKey(Context_VAR)); } 
public static String getLastfmApiKey(){   return String_Constant; } 
public static String getLastfmSecret(){   return String_Constant; } 
public static synchronized boolean Boolean_VAR(Context Context_VAR){   return Boolean_VAR != null ? Boolean_VAR : (Boolean_VAR=getSharedPreferences(Context_VAR).getBoolean(String_VAR,Boolean_Constant)); } 
public static synchronized void setEnabled(Context Context_VAR,boolean boolean_VAR){   Boolean_VAR=boolean_VAR;   getSharedPreferences(Context_VAR).edit().putBoolean(String_VAR,boolean_VAR).apply(); } 
public static synchronized boolean isStartOnBoot(Context Context_VAR){   return getSharedPreferences(Context_VAR).getBoolean(String_VAR,Boolean_Constant); } 
public static synchronized void setStartOnBoot(Context Context_VAR,boolean boolean_VAR){   getSharedPreferences(Context_VAR).edit().putBoolean(String_VAR,boolean_VAR).apply(); } 
public static synchronized String getLastfmSessionKey(Context Context_VAR){   return String_VAR != null ? String_VAR : (String_VAR=getSharedPreferences(Context_VAR).getString(String_VAR,null)); } 
public static synchronized void setLastfmSessionKey(Context Context_VAR,String String_VAR){   String_VAR=String_VAR;   getSharedPreferences(Context_VAR).edit().putString(String_VAR,String_VAR).apply(); } 
public static synchronized String getKeyLastfmToken(Context Context_VAR){   return String_VAR != null ? String_VAR : (String_VAR=getSharedPreferences(Context_VAR).getString(String_VAR,null)); } 
public static synchronized void setKeyLastfmToken(Context Context_VAR,String String_VAR){   String_VAR=String_VAR;   getSharedPreferences(Context_VAR).edit().putString(String_VAR,String_VAR).apply(); } 
public static synchronized int getMinTrackDurationInPercents(Context Context_VAR){   return Integer_VAR != null ? Integer_VAR : (Integer_VAR=getSharedPreferences(Context_VAR).getInt(String_VAR,int_VAR)); } 
public static synchronized void setMinTrackDurationInPercents(Context Context_VAR,int int_VAR){   Integer_VAR=int_VAR;   getSharedPreferences(Context_VAR).edit().putInt(String_VAR,int_VAR).apply(); } 
public static synchronized int getMinTrackDurationInSeconds(Context Context_VAR){   return Integer_VAR != null ? Integer_VAR : (Integer_VAR=getSharedPreferences(Context_VAR).getInt(String_VAR,int_VAR)); } 
public static synchronized void setMinTrackDurationInSeconds(Context Context_VAR,int int_VAR){   Integer_VAR=int_VAR;   getSharedPreferences(Context_VAR).edit().putInt(String_VAR,int_VAR).apply(); } 
public static synchronized long getTotalHandledTracksCount(Context Context_VAR){   return Long_VAR != null ? Long_VAR : (Long_VAR=getSharedPreferences(Context_VAR).getLong(String_VAR,Number_Constant)); } 
public static synchronized void setTotalHandledTracksCount(Context Context_VAR,long long_VAR){   Long_VAR=long_VAR;   getSharedPreferences(Context_VAR).edit().putLong(String_VAR,long_VAR).apply(); } 
public static synchronized boolean Boolean_VAR(Context Context_VAR){   return Boolean_VAR != null ? Boolean_VAR : (Boolean_VAR=getSharedPreferences(Context_VAR).getBoolean(String_VAR,Boolean_Constant)); } 
public static synchronized void setLastfmNowplayingUpdateEnabled(Context Context_VAR,boolean boolean_VAR){   Boolean_VAR=boolean_VAR;   getSharedPreferences(Context_VAR).edit().putBoolean(String_VAR,boolean_VAR).apply(); } 
public static synchronized String getLastfmUserName(Context Context_VAR){   final String String_VAR=String_VAR;   if (!TextUtils.isEmpty(String_VAR)) {     return String_VAR;   }   return String_VAR=getSharedPreferences(Context_VAR).getString(String_VAR,String_Constant); } 
public static synchronized void setLastfmUserName(Context Context_VAR,String String_VAR){   String_VAR=String_VAR;   final SharedPreferences.Editor SharedPreferences.Editor_VAR=getSharedPreferences(Context_VAR).edit();   SharedPreferences.Editor_VAR.putString(String_VAR,String_VAR);   SharedPreferences.Editor_VAR.apply(); } 
public static synchronized String getLastfmUserRegistered(Context Context_VAR){   final String String_VARRefCopy=String_VAR;   if (!TextUtils.isEmpty(String_VARRefCopy)) {     return String_VARRefCopy;   }   return String_VAR=getSharedPreferences(Context_VAR).getString(String_VAR,String_Constant); } 
public static synchronized void setLastfmUserRegistered(Context Context_VAR,String String_VAR){   String_VAR=String_VAR;   final SharedPreferences.Editor SharedPreferences.Editor_VAR=getSharedPreferences(Context_VAR).edit();   SharedPreferences.Editor_VAR.putString(String_VAR,String_VAR);   SharedPreferences.Editor_VAR.apply(); } 
public static synchronized boolean isFirstLaunch(Context Context_VAR){   return getSharedPreferences(Context_VAR).getBoolean(String_VAR,Boolean_Constant); } 
public static synchronized void setIsFirstLaunch(Context Context_VAR,boolean boolean_VAR){   getSharedPreferences(Context_VAR).edit().putBoolean(String_VAR,boolean_VAR).apply(); } 
public static synchronized WAILService.LastCapturedTrackInfo getLastCapturedTrackInfo(Context Context_VAR){   return WAILService.LastCapturedTrackInfo.fromJSON(getSharedPreferences(Context_VAR).getString(String_VAR,String_Constant)); } 
public static synchronized void setLastCapturedTrackInfo(Context Context_VAR,WAILService.LastCapturedTrackInfo WAILService.LastCapturedTrackInfo_VAR){   String String_VAR=null;   if (WAILService.LastCapturedTrackInfo_VAR != null) {     String_VAR=WAILService.LastCapturedTrackInfo_VAR.toJSON();   }   getSharedPreferences(Context_VAR).edit().putString(String_VAR,String_VAR).apply(); } 
public static synchronized LFUserResponseModel getLastfmUserInfo(Context Context_VAR){   try {     return LFUserResponseModel.parseFromJSON(getSharedPreferences(Context_VAR).getString(String_VAR,String_Constant));   }  catch (  Exception e) {     return null;   } } 
public static synchronized void setLastfmUserInfo(Context Context_VAR,String String_VAR){   getSharedPreferences(Context_VAR).edit().putString(String_VAR,String_VAR).apply(); } 
public static synchronized long getLastfmUserInfoUpdateTimestamp(Context Context_VAR){   return getSharedPreferences(Context_VAR).getLong(String_VAR,-Number_Constant); } 
public static synchronized void setLastfmUserInfoUpdateTimestamp(Context Context_VAR,long long_VAR){   getSharedPreferences(Context_VAR).edit().putLong(String_VAR,long_VAR).apply(); } 
public static synchronized boolean isSoundNotificationTrackMarkedAsScrobbledEnabled(Context Context_VAR){   return Boolean_VAR != null ? Boolean_VAR : (Boolean_VAR=getSharedPreferences(Context_VAR).getBoolean(String_VAR,Boolean_Constant)); } 
public static synchronized void setSoundNotificationTrackMarkedAsScrobbledEnabled(Context Context_VAR,boolean boolean_VAR){   Boolean_VAR=boolean_VAR;   getSharedPreferences(Context_VAR).edit().putBoolean(String_VAR,boolean_VAR).apply(); } 
public static synchronized boolean isSoundNotificationTrackSkippedEnabled(Context Context_VAR){   return Boolean_VAR != null ? Boolean_VAR : (Boolean_VAR=getSharedPreferences(Context_VAR).getBoolean(String_VAR,Boolean_Constant)); } 
public static synchronized void setSoundNotificationTrackSkippedEnabled(Context Context_VAR,boolean boolean_VAR){   Boolean_VAR=boolean_VAR;   getSharedPreferences(Context_VAR).edit().putBoolean(String_VAR,boolean_VAR).apply(); } 
public static synchronized boolean Boolean_VAR(Context Context_VAR){   return Boolean_VAR != null ? Boolean_VAR : (Boolean_VAR=getSharedPreferences(Context_VAR).getBoolean(String_VAR,Boolean_Constant)); } 
public static synchronized void setShowFeedbackRequest(Context Context_VAR,boolean boolean_VAR){   Boolean_VAR=boolean_VAR;   getSharedPreferences(Context_VAR).edit().putBoolean(String_VAR,boolean_VAR).apply(); } 
public static synchronized Track getNowScrobblingTrack(Context Context_VAR){   String String_VAR=getSharedPreferences(Context_VAR).getString(String_VAR,null);   String String_VAR=getSharedPreferences(Context_VAR).getString(String_VAR,null);   if (String_VAR == null && String_VAR == null) {     return null;   }   Track Track_VAR=new Track();   Track_VAR.setArtist(String_VAR);   Track_VAR.setTrack(String_VAR);   return Track_VAR; } 
public static synchronized void setNowScrobblingTrack(Context Context_VAR,Track Track_VAR){   getSharedPreferences(Context_VAR).edit().putString(String_VAR,Track_VAR == null ? null : Track_VAR.getArtist()).apply();   getSharedPreferences(Context_VAR).edit().putString(String_VAR,Track_VAR == null ? null : Track_VAR.getTrack()).apply(); } 
public static synchronized String getNowScrobblingPlayerPackageName(Context Context_VAR){   return getSharedPreferences(Context_VAR).getString(String_VAR,null); } 
public static synchronized void setNowScrobblingPlayerPackageName(Context Context_VAR,String String_VAR){   getSharedPreferences(Context_VAR).edit().putString(String_VAR,String_VAR).apply(); } 
public static synchronized String getNowScrobblingPlayerLabel(Context Context_VAR){   return getSharedPreferences(Context_VAR).getString(String_VAR,null); } 
public static synchronized void setNowScrobblingPlayerLabel(Context Context_VAR,String String_VAR){   getSharedPreferences(Context_VAR).edit().putString(String_VAR,String_VAR).apply(); } 
public static boolean isEnableScrobblingOverMobileNetwork(Context Context_VAR){   return Boolean_VAR != null ? Boolean_VAR : getSharedPreferences(Context_VAR).getBoolean(String_VAR,Boolean_Constant); } 
public static void setDisableScrobblingOverMobileNetwork(Context Context_VAR,boolean boolean_VAR){   Boolean_VAR=boolean_VAR;   getSharedPreferences(Context_VAR).edit().putBoolean(String_VAR,boolean_VAR).apply(); } 
public static boolean isStatusBarNotificationTrackScrobblingEnabled(Context Context_VAR){   return Boolean_VAR != null ? Boolean_VAR : getSharedPreferences(Context_VAR).getBoolean(String_VAR,Boolean_Constant); } 
public static void setStatusBarNotificationTrackScrobblingEnabled(Context Context_VAR,boolean boolean_VAR){   WAILSettings.Boolean_VAR=boolean_VAR;   getSharedPreferences(Context_VAR).edit().putBoolean(String_VAR,boolean_VAR).apply(); } 
public static boolean isStatusBarNotificationMinPriority(Context Context_VAR){   return Boolean_VAR != null ? Boolean_VAR : getSharedPreferences(Context_VAR).getBoolean(String_VAR,Boolean_Constant); } 
public static void setStatusBarNotificationMinPriority(Context Context_VAR,boolean boolean_VAR){   WAILSettings.Boolean_VAR=boolean_VAR;   getSharedPreferences(Context_VAR).edit().putBoolean(String_VAR,boolean_VAR).apply(); } 
@Override public void onReceive(Context Context_VAR,Intent Intent_VAR){   WAILSettings.clearAllSettings(BaseActivity.this);   AppDBManager.getInstance(BaseActivity.this).clearAll();   LocaleUtil.updateLanguage(BaseActivity.this,null);   startActivity(new Intent(BaseActivity.this,MainActivity.class));   BaseActivity.this.finish(); } 
protected boolean doFinishOnHomeAsUpButton(){   return Boolean_Constant; } 
@Override protected void onCreate(Bundle Bundle_VAR){   setTheme();   super.onCreate(Bundle_VAR);   if (Bundle_VAR == null) {     onCreteWithNullState();   }   setupUI(Bundle_VAR); } 
@Override protected void onPause(){   super.onPause();   unregisterReceiver(BroadcastReceiver_VAR);   WAILApp.activityPaused(); } 
@Override protected void onResume(){   super.onResume();   registerReceiver(BroadcastReceiver_VAR,new IntentFilter(String_VAR));   WAILApp.activityResumed(); } 
 protected void onCreteWithNullState(){ } 
protected void setupUI(Bundle Bundle_VAR){ } 
@Override public void onStart(){   super.onStart();   EasyTracker.getInstance(this).activityStart(this); } 
@Override public boolean onOptionsItemSelected(MenuItem MenuItem_VAR){   if (MenuItem_VAR.getItemId() == android.R.id.home) {     if (doFinishOnHomeAsUpButton()) {       finish();       return Boolean_Constant;     }   }   return super.onOptionsItemSelected(MenuItem_VAR); } 
@Override protected void onStop(){   super.onStop();   EasyTracker.getInstance(this).activityStop(this); } 
public void setTheme(){   if (WAILSettings.getTheme(getBaseContext()) == WAILSettings.Theme.DARK) {     if (this instanceof MainActivity) {       setTheme(R.style.AppTheme_Dark_NoActionBar);     }  else {       setTheme(R.style.AppTheme_Dark);     }   }  else {     if (this instanceof MainActivity) {       setTheme(R.style.AppTheme_Light_NoActionBar);     }  else {       setTheme(R.style.AppTheme_Light);     }   } } 
public void restart(){   finish();   startActivity(getIntent()); } 
@OnItemClick(R.id.main_left_FrameLayout_VAR_list) public void onItemsSelected(int int_VAR){   selectNavDrawerItem(int_VAR);   if (DrawerLayout_VAR != null) {     SleepIfRequiredAsyncTask.newInstance(SystemClock.elapsedRealtime(),Number_ConstantNumber_ConstantNumber_Constant,new Runnable(){       @Override public void run(){         try {           DrawerLayout_VAR.closeDrawers();         }  catch (        Exception e) {           Loggi.e(String_Constant + e.getMessage());         }       }     } ).execute();   }   setSelectedItem(int_VAR); } 
@Override public void run(){   try {     DrawerLayout_VAR.closeDrawers();   }  catch (  Exception e) {     Loggi.e(String_Constant + e.getMessage());   } } 
@Override protected void onCreate(final Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.activity_main);   ButterKnife.inject(this);   setSupportActionBar(Toolbar_VAR);   if (!WAILSettings.isAuthorized(this)) {     startActivityForResult(new Intent(this,NonAuthorizedActivity.class),int_VAR);   }   setDrawerHeaderText();   if (DrawerLayout_VAR != null) {     DrawerLayout_VAR.setStatusBarBackgroundColor(getResources().getColor(R.color.primary_dark));     ActionBarDrawerToggle_VAR=new ActionBarDrawerToggle(this,DrawerLayout_VAR,R.string.app_name,R.string.app_name){       @Override public void onDrawerOpened(      View FrameLayout_VARView){         super.onDrawerOpened(FrameLayout_VARView);         if (TextUtils.isEmpty(TypefaceTextView_VAR.getText().toString()) || TextUtils.isEmpty(TypefaceTextView_VAR.getText().toString())) {           setDrawerHeaderText();         }       }     } ;     DrawerLayout_VAR.setDrawerListener(ActionBarDrawerToggle_VAR);     getSupportActionBar().setDisplayHomeAsUpEnabled(Boolean_Constant);     getSupportActionBar().setHomeButtonEnabled(Boolean_Constant);   }  else   if (DrawerLayout_VARLand != null) {     DrawerLayout_VARLand.setStatusBarBackgroundColor(getResources().getColor(R.color.primary_dark));   }   ArrayAdapter<String> ArrayAdapter<String>_VAR=new ArrayAdapter<String>(this,R.layout.activity_main_FrameLayout_VAR_item_layout,getResources().getStringArray(R.array.FrameLayout_VAR_items)){     @Override public View getView(    int position,    View view,    ViewGroup parent){       ViewHolder ViewHolder_VAR;       View View_VAR=view;       if (View_VAR == null) {         LayoutInflater LayoutInflater_VAR=getLayoutInflater();         View_VAR=LayoutInflater_VAR.inflate(R.layout.activity_main_FrameLayout_VAR_item_layout,parent,Boolean_Constant);         ViewHolder_VAR=new ViewHolder();         ViewHolder_VAR.View_VAR=View_VAR;         ViewHolder_VAR.TypefaceTextView_VAR=(TypefaceTextView)View_VAR.findViewById(R.id.activity_main_FrameLayout_VAR_item_text);         ViewHolder_VAR.ImageView_VAR=(ImageView)View_VAR.findViewById(R.id.activity_main_FrameLayout_VAR_item_image);         View_VAR.setTag(ViewHolder_VAR);       }  else {         ViewHolder_VAR=(ViewHolder)View_VAR.getTag();       }       ViewHolder_VAR.TypefaceTextView_VAR.setText(getItem(position)); switch (position) { case Number_Constant:         ViewHolder_VAR.ImageView_VAR.setImageResource(R.drawable.ic_home_grey6Number_ConstantNumber_Constant_Number_Constant4dp);       break; case Number_Constant:     ViewHolder_VAR.ImageView_VAR.setImageResource(R.drawable.ic_list_grey6Number_ConstantNumber_Constant_Number_Constant4dp);   break; case Number_Constant: ViewHolder_VAR.ImageView_VAR.setImageResource(R.drawable.ic_settings_grey6Number_ConstantNumber_Constant_Number_Constant4dp); break; } if (position == Number_Constant && int_VAR == -Number_Constant) { ViewHolder_VAR.View_VAR.setBackgroundColor(getResources().getColor(R.color.FrameLayout_VAR_item_selected_View_VAR)); int_VAR=Number_Constant; } return View_VAR; } class ViewHolder { View View_VAR; TypefaceTextView TypefaceTextView_VAR; ImageView ImageView_VAR; } } ; FrameLayout_VARList.setAdapter(ArrayAdapter<String>_VAR); setDrawerWidth(); } 
@Override public void onDrawerOpened(View View_VAR){   super.onDrawerOpened(View_VAR);   if (TextUtils.isEmpty(TypefaceTextView_VAR.getText().toString()) || TextUtils.isEmpty(TypefaceTextView_VAR.getText().toString())) {     setDrawerHeaderText();   } } 
@Override public View getView(int int_VAR,View View_VAR,ViewGroup ViewGroup_VAR){   ViewHolder ViewHolder_VAR;   View View_VAR=View_VAR;   if (View_VAR == null) {     LayoutInflater LayoutInflater_VAR=getLayoutInflater();     View_VAR=LayoutInflater_VAR.inflate(R.layout.activity_main_FrameLayout_VAR_item_layout,ViewGroup_VAR,Boolean_Constant);     ViewHolder_VAR=new ViewHolder();     ViewHolder_VAR.View_VAR=View_VAR;     ViewHolder_VAR.TypefaceTextView_VAR=(TypefaceTextView)View_VAR.findViewById(R.id.activity_main_FrameLayout_VAR_item_text);     ViewHolder_VAR.ImageView_VAR=(ImageView)View_VAR.findViewById(R.id.activity_main_FrameLayout_VAR_item_image);     View_VAR.setTag(ViewHolder_VAR);   }  else {     ViewHolder_VAR=(ViewHolder)View_VAR.getTag();   }   ViewHolder_VAR.TypefaceTextView_VAR.setText(getItem(int_VAR)); switch (int_VAR) { case Number_Constant:     ViewHolder_VAR.ImageView_VAR.setImageResource(R.drawable.ic_home_grey6Number_ConstantNumber_Constant_Number_Constant4dp);   break; case Number_Constant: ViewHolder_VAR.ImageView_VAR.setImageResource(R.drawable.ic_list_grey6Number_ConstantNumber_Constant_Number_Constant4dp); break; case Number_Constant: ViewHolder_VAR.ImageView_VAR.setImageResource(R.drawable.ic_settings_grey6Number_ConstantNumber_Constant_Number_Constant4dp); break; } if (int_VAR == Number_Constant && int_VAR == -Number_Constant) { ViewHolder_VAR.View_VAR.setBackgroundColor(getResources().getColor(R.color.FrameLayout_VAR_item_selected_View_VAR)); int_VAR=Number_Constant; } return View_VAR; } 
private void setDrawerWidth(){   TypedValue TypedValue_VAR=new TypedValue();   getTheme().resolveAttribute(R.attr.actionBarSize,TypedValue_VAR,Boolean_Constant);   DisplayMetrics DisplayMetrics_VAR=getResources().getDisplayMetrics();   float float_VAR=TypedValue_VAR.getDimension(DisplayMetrics_VAR);   ViewGroup.LayoutParams ViewGroup.LayoutParams_VAR=FrameLayout_VAR.getLayoutParams();   if (getResources().getBoolean(R.bool.isTablet)) {     ViewGroup.LayoutParams_VAR.width=(int)Math.min(DisplayMetrics_VAR.widthPixels - float_VAR,getResources().getDimension(R.dimen.main_FrameLayout_VAR_standard_increment) * Number_Constant);   }  else {     if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {       ViewGroup.LayoutParams_VAR.width=(int)(DisplayMetrics_VAR.widthPixels - float_VAR);     }  else {       ViewGroup.LayoutParams_VAR.width=(int)(DisplayMetrics_VAR.heightPixels - float_VAR);     }   }   FrameLayout_VAR.setLayoutParams(ViewGroup.LayoutParams_VAR); } 
private void setDrawerHeaderText(){   TypefaceTextView_VAR.setText(WAILSettings.getLastfmUserName(this));   TypefaceTextView_VAR.setText(getString(R.string.FrameLayout_VAR_registered_at) + WAILSettings.getLastfmUserRegistered(this).split(String_Constant)[Number_Constant]); } 
@Override protected void onPostCreate(Bundle Bundle_VAR){   super.onPostCreate(Bundle_VAR);   if (DrawerLayout_VAR != null && ActionBarDrawerToggle_VAR != null) {     ActionBarDrawerToggle_VAR.syncState();   }   Fragment[]_VAR[Number_Constant]=new MainFragment();   Fragment[]_VAR[Number_Constant]=new TracksListFragment();   Fragment[]_VAR[Number_Constant]=new SettingsFragment();   selectNavDrawerItem(Number_Constant);   if (WAILSettings.isFirstLaunch(this)) {     WAILSettings.setIsFirstLaunch(this,Boolean_Constant);   } } 
@Override protected void onActivityResult(int int_VAR,int int_VAR,Intent Intent_VAR){   super.onActivityResult(int_VAR,int_VAR,Intent_VAR);   if (int_VAR == int_VAR) {     if (int_VAR == RESULT_CANCELED) {       finish();     }   } } 
@Override public boolean onOptionsItemSelected(MenuItem MenuItem_VAR){   if (ActionBarDrawerToggle_VAR != null && ActionBarDrawerToggle_VAR.onOptionsItemSelected(MenuItem_VAR)) {     return Boolean_Constant;   }   return super.onOptionsItemSelected(MenuItem_VAR); } 
@Override protected void onSaveInstanceState(Bundle Bundle_VAR){   super.onSaveInstanceState(Bundle_VAR); } 
private void selectNavDrawerItem(final int int_VAR){   final FragmentTransaction FragmentTransaction_VAR=getFragmentManager().beginTransaction();   FragmentTransaction_VAR.setCustomAnimations(R.anim.fragment_transaction_alpha_up,R.anim.fragment_transaction_alpha_down);   FragmentTransaction_VAR.replace(R.id.main_content,Fragment[]_VAR[int_VAR]);   FragmentTransaction_VAR.commit(); } 
private void setSelectedItem(int int_VAR){   if (int_VAR != -Number_Constant) {     FrameLayout_VARList.getChildAt(int_VAR).setBackgroundColor(getResources().getColor(R.color.FrameLayout_VAR_item_View_VAR));   }   FrameLayout_VARList.getChildAt(int_VAR).setBackgroundColor(getResources().getColor(R.color.FrameLayout_VAR_item_selected_View_VAR));   int_VAR=int_VAR; } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.activity_non_authorized);   if (Bundle_VAR == null) {     getFragmentManager().beginTransaction().add(R.id.non_authorized_frame,new NonAuthorizedMainFragment()).commit();   }   setResult(RESULT_CANCELED); } 
@Override protected void setupUI(Bundle Bundle_VAR){   super.setupUI(Bundle_VAR);   overridePendingTransition(R.anim.activity_pull_from_right_to_left,R.anim.activity_pull_from_current_to_left);   getSupportActionBar().setDisplayHomeAsUpEnabled(Boolean_Constant); } 
@Override protected void onPause(){   super.onPause();   overridePendingTransition(R.anim.activity_pull_from_left_out_to_screen,R.anim.activity_pull_from_center_to_out_right); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.activity_settings_ignored_players); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.activity_settings_select_language); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.activity_settings_sound_notifications); } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setContentView(R.layout.activity_settings_status_bar_notifications); } 
@TargetApi(Build.VERSION_CODES.JELLY_BEAN) @Override public void onUpdate(Context Context_VAR,AppWidgetManager AppWidgetManager_VAR,int[] int[]_VAR){   super.onUpdate(Context_VAR,AppWidgetManager_VAR,int[]_VAR);   for (  int appWidgetId : int[]_VAR) {     Bundle Bundle_VAR=AppWidgetManager_VAR.getAppWidgetOptions(appWidgetId);     onAppWidgetOptionsChanged(Context_VAR,AppWidgetManager_VAR,appWidgetId,Bundle_VAR);   } } 
@TargetApi(Build.VERSION_CODES.JELLY_BEAN) @Override public void onAppWidgetOptionsChanged(Context Context_VAR,AppWidgetManager AppWidgetManager_VAR,int int_VAR,Bundle Bundle_VAR){   RemoteViews RemoteViews_VAR=new RemoteViews(Context_VAR.getPackageName(),R.layout.waillove_widget);   int int_VAR=Bundle_VAR.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);   if (int_VAR > int_VAR) {     RemoteViews_VAR.setViewVisibility(R.id.widget_infobox_layout,View.VISIBLE);   }  else {     RemoteViews_VAR.setViewVisibility(R.id.widget_infobox_layout,View.GONE);   }   Intent Intent_VAR=new Intent(Context_VAR,getClass());   Intent_VAR.setAction(String_VAR);   PendingIntent PendingIntent_VAR=PendingIntent.getBroadcast(Context_VAR,Number_Constant,Intent_VAR,Number_Constant);   RemoteViews_VAR.setOnClickPendingIntent(R.id.widget_love_current_Track_VAR_button,PendingIntent_VAR);   Intent Intent_VAR=new Intent(Context_VAR,MainActivity.class);   PendingIntent PendingIntent_VAR=PendingIntent.getActivity(Context_VAR,Number_Constant,Intent_VAR,Number_Constant);   RemoteViews_VAR.setOnClickPendingIntent(R.id.widget_infobox_layout,PendingIntent_VAR);   AppWidgetManager_VAR.updateAppWidget(int_VAR,RemoteViews_VAR); } 
@Override public void onReceive(@NonNull final Context Context_VAR,@NonNull final Intent Intent_VAR){   super.onReceive(Context_VAR,Intent_VAR);   if (String_VAR.equals(Intent_VAR.getAction())) {     final Track Track_VAR=WAILSettings.getNowScrobblingTrack(Context_VAR);     if (Track_VAR == null) {       Toast.makeText(Context_VAR,Context_VAR.getString(R.string.widget_nothing_to_love),Toast.LENGTH_SHORT).show();       return;     }     AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){       @Override protected Void doInBackground(      Void... objects){         LovedTracksDBHelper.getInstance(Context_VAR).add(Track_VAR);         Intent Intent_VAR=new Intent(Context_VAR,WAILService.class);         Intent_VAR.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);         Context_VAR.startService(Intent_VAR);         return null;       }       @Override protected void onPostExecute(      Void o){         Toast.makeText(Context_VAR,Context_VAR.getString(R.string.main_Track_VAR_loved),Toast.LENGTH_SHORT).show();       }     } );   } } 
@Override protected Void doInBackground(Void... Void_VAR){   LovedTracksDBHelper.getInstance(context).add(Track_VAR);   Intent Intent_VAR=new Intent(context,WAILService.class);   Intent_VAR.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);   context.startService(Intent_VAR);   return null; } 
@Override prVoid_VARtected vVoid_VARid Void_VARnPVoid_VARstExecute(VVoid_VARid Void_VAR){   TVoid_VARast.makeText(cVoid_VARntext,cVoid_VARntext.getString(R.string.main_Track_VAR_lVoid_VARved),TVoid_VARast.LENGTH_SHORT).shVoid_VARw(); } 
protected boolean isRetainInstance(){   return Boolean_Constant; } 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   this.Bundle_VAR=Bundle_VAR;   if (isRetainInstance()) {     setRetainInstance(Boolean_Constant);   } } 
@Override public void onViewCreated(View View_VAR,Bundle Bundle_VAR){   super.onViewCreated(View_VAR,Bundle_VAR); } 
@Override public void onStart(){   super.onStart();   if (!boolean_VAR) {     boolean_VAR=Boolean_Constant;     onFirstStart(Bundle_VAR);   } } 
protected void onFirstStart(Bundle Bundle_VAR){ } 
public void setListener(Callback Callback_VAR){   this.Callback_VAR=Callback_VAR; } 
@Override public void onAttach(Activity Activity_VAR){   super.onAttach(Activity_VAR);   this.Activity_VAR=Activity_VAR; } 
@Override public void onDismiss(DialogInterface DialogInterface_VAR){   super.onDismiss(DialogInterface_VAR);   if (Callback_VAR != null) {     Callback_VAR.onDismiss();   } } 
void onDismiss(); 
public static DialogFragmentWithNumberPicker newInstance(String String_VAR,int int_VAR,int int_VAR,int int_VAR){   final DialogFragmentWithNumberPicker MaterialDialog_VAR=new DialogFragmentWithNumberPicker();   MaterialDialog_VAR.String_VAR=String_VAR;   MaterialDialog_VAR.int_VAR=int_VAR;   MaterialDialog_VAR.int_VAR=int_VAR;   MaterialDialog_VAR.int_VAR=int_VAR;   return MaterialDialog_VAR; } 
@Override public Dialog onCreateDialog(Bundle Bundle_VAR){   MaterialDialog MaterialDialog_VAR=new MaterialDialog.Builder(getActivity()).customView(R.layout.MaterialDialog_VAR_with_number_picker_fragment,Boolean_Constant).theme(Theme.DARK).String_VAR(String_VAR).positiveText(R.string.MaterialDialog_VAR_save).negativeText(R.string.MaterialDialog_VAR_cancel).callback(new MaterialDialog.ButtonCallback(){     @Override public void onPositive(    MaterialDialog MaterialDialog_VAR){       WAILSettings.setMinTrackDurationInSeconds(getActivity(),NumberPicker_VAR.getValue());       EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(SettingsFragment.GA_EVENT_SETTINGS_FRAGMENT,String_Constant + WAILSettings.getMinTrackDurationInSeconds(getActivity()) + String_Constant,null,Number_Constant).build());     }     @Override public void onNegative(    MaterialDialog MaterialDialog_VAR){       MaterialDialog_VAR.dismiss();     }   } ).build();   NumberPicker_VAR=(NumberPicker)MaterialDialog_VAR.getCustomView().findViewById(R.id.MaterialDialog_VAR_with_number_picker_picker);   NumberPicker_VAR.setMinValue(int_VAR);   NumberPicker_VAR.setMaxValue(int_VAR);   NumberPicker_VAR.setValue(int_VAR);   NumberPicker_VAR.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);   return MaterialDialog_VAR; } 
@Override public void onPositive(MaterialDialog MaterialDialog_VAR){   WAILSettings.setMinTrackDurationInSeconds(getActivity(),NumberPicker_VAR.getValue());   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(SettingsFragment.GA_EVENT_SETTINGS_FRAGMENT,String_Constant + WAILSettings.getMinTrackDurationInSeconds(getActivity()) + String_Constant,null,Number_Constant).build()); } 
@Override public void onNegative(MaterialDialog MaterialDialog_VAR){   MaterialDialog_VAR.dismiss(); } 
public static DialogFragmentWithSeekBar newInstance(String String_VAR,int int_VAR){   final DialogFragmentWithSeekBar MaterialDialog_VAR=new DialogFragmentWithSeekBar();   MaterialDialog_VAR.int_VAR=int_VAR;   MaterialDialog_VAR.String_VAR=String_VAR;   return MaterialDialog_VAR; } 
@Override public Dialog onCreateDialog(Bundle Bundle_VAR){   MaterialDialog MaterialDialog_VAR=new MaterialDialog.Builder(getActivity()).customView(R.layout.MaterialDialog_VAR_with_seek_bar_fragment,Boolean_Constant).theme(Theme.DARK).String_VAR(String_VAR).positiveText(R.string.MaterialDialog_VAR_save).negativeText(R.string.MaterialDialog_VAR_cancel).callback(new MaterialDialog.ButtonCallback(){     @Override public void onPositive(    MaterialDialog MaterialDialog_VAR){       WAILSettings.setMinTrackDurationInPercents(getActivity(),SeekBar_VAR.getProgress());       EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(SettingsFragment.GA_EVENT_SETTINGS_FRAGMENT,String_Constant + WAILSettings.getMinTrackDurationInSeconds(getActivity()) + String_Constant,null,Number_Constant).build());     }     @Override public void onNegative(    MaterialDialog MaterialDialog_VAR){       MaterialDialog_VAR.dismiss();     }   } ).build();   SeekBar_VAR=(SeekBar)MaterialDialog_VAR.getCustomView().findViewById(R.id.MaterialDialog_VAR_with_seek_bar_seek_bar);   SeekBar_VAR.setProgress(int_VAR);   final TextView TextView_VAR=(TextView)MaterialDialog_VAR.getCustomView().findViewById(R.id.MaterialDialog_VAR_with_seek_bar_bottom_text);   TextView_VAR.setText(getString(R.string.settings_min_track_elapsed_time_in_percent_MaterialDialog_VAR_bottom_text,SeekBar_VAR.getProgress()));   SeekBar_VAR.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){     @Override public void onProgressChanged(    SeekBar SeekBar_VAR,    int progress,    boolean fromUser){       if (progress < Number_Constant) {         SeekBar_VAR.setProgress(Number_Constant);       }       TextView_VAR.setText(getString(R.string.settings_min_track_elapsed_time_in_percent_MaterialDialog_VAR_bottom_text,SeekBar_VAR.getProgress()));     }     @Override public void onStartTrackingTouch(    SeekBar SeekBar_VAR){     }     @Override public void onStopTrackingTouch(    SeekBar SeekBar_VAR){     }   } );   return MaterialDialog_VAR; } 
@Override public void onPositive(MaterialDialog MaterialDialog_VAR){   WAILSettings.setMinTrackDurationInPercents(getActivity(),SeekBar_VAR.getProgress());   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(SettingsFragment.GA_EVENT_SETTINGS_FRAGMENT,String_Constant + WAILSettings.getMinTrackDurationInSeconds(getActivity()) + String_Constant,null,Number_Constant).build()); } 
@Override public void onNegative(MaterialDialog MaterialDialog_VAR){   MaterialDialog_VAR.dismiss(); } 
@Override public void onProgressChanged(SeekBar SeekBar_VAR,int int_VAR,boolean boolean_VAR){   if (int_VAR < Number_Constant) {     SeekBar_VAR.setProgress(Number_Constant);   }   TextView_VAR.setText(getString(R.string.settings_min_track_elapsed_time_in_percent_MaterialDialog_VAR_bottom_text,SeekBar_VAR.getProgress())); } 
@Override public void onStartTrackingTouch(SeekBar SeekBar_VAR){ } 
@Override public void onStopTrackingTouch(SeekBar SeekBar_VAR){ } 
public static TrackActionsDialog newInstance(Track Track_VAR){   TrackActionsDialog TrackActionsDialog_VAR=new TrackActionsDialog();   TrackActionsDialog_VAR.Track_VAR=Track_VAR;   return TrackActionsDialog_VAR; } 
@Override public Dialog onCreateDialog(Bundle Bundle_VAR){   return new MaterialDialog.Builder(activity).items(R.array.Track_VAR_actions).itemsCallback(new MaterialDialog.ListCallback(){     @Override public void onSelection(    MaterialDialog materialDialog,    View view,    int i,    CharSequence charSequence){ switch (i) { case Number_Constant:         loveTrack();       break;   } } } ).theme(Theme.DARK).build(); } 
@Overrint_VARde publint_VARc voint_VARd onSelectint_VARon(Materint_VARalDint_VARalog Materint_VARalDint_VARalog_VAR,Vint_VARew Vint_VARew_VAR,int_VARnt int_VAR,CharSequence CharSequence_VAR){ swint_VARtch (int_VAR) { case Number_Constant:     loveTrack();   break; } } 
private void loveTrack(){   if (Track_VAR != null) {     LovedTracksDBHelper.getInstance(activity).add(Track_VAR);     Intent Intent_VAR=new Intent(activity,WAILService.class);     Intent_VAR.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);     activity.startService(Intent_VAR);     Toast.makeText(activity,getString(R.string.main_Track_VAR_loved),Toast.LENGTH_SHORT).show();     dismiss();   } } 
@Override public void onReceive(ConString_VAR ConString_VAR_VAR,Intent Intent_VAR){   updateLocalInfo(); } 
@OnClick(R.id.main_Track_VARs_today_view) public void onTracksTodayViewClick(){   Toast.makeText(getActivity(),getString(R.string.main_pull_down_to_refresh_String_VAR),Toast.LENGTH_SHORT).show(); } 
@OnClick(R.id.main_feedback_please) public void onFeedbackPleaseClick(){   final Activity Activity_VAR=getActivity();   WAILSettings.setShowFeedbackRequest(Activity_VAR,Boolean_Constant);   ViewUtil.setVisibility(View_VAR,Boolean_Constant);   Toast.makeText(Activity_VAR,getString(R.string.main_feedback_please_happy_String_VAR),Toast.LENGTH_LONG).show();   final String String_VAR=Activity_VAR.getPackageName();   try {     startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(String_Constant + String_VAR)));     EasyTracker.getInstance(Activity_VAR).send(MapBuilder.createEvent(String_VAR,String_Constant,String_Constant,Number_Constant).build());   }  catch (  Exception e) {     startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(String_Constant + String_VAR)));     EasyTracker.getInstance(Activity_VAR).send(MapBuilder.createEvent(String_VAR,String_Constant,String_Constant,Number_Constant).build());   } } 
@OnClick(R.id.main_love_current_Track_VAR_button) public void onLoveCurrentTrackButtonClick(){   Track Track_VAR=WAILSettings.getNowScrobblingTrack(getActivity());   if (Track_VAR != null) {     Toast.makeText(getActivity(),getString(R.string.main_Track_VAR_loved),Toast.LENGTH_SHORT).show();     FloatingActionButton_VAR.hide();     Intent Intent_VAR=new Intent(getActivity(),WAILService.class);     LovedTracksDBHelper.getInstance(getActivity()).add(Track_VAR);     Intent_VAR.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);     getActivity().startService(Intent_VAR);   } } 
@OnClick(R.id.main_ignore_player_button) public void onIgnoreScrobblingPlayerClick(){   String String_VAR=WAILSettings.getNowScrobblingPlayerLabel(getActivity());   final String String_VAR=WAILSettings.getNowScrobblingPlayerPackageName(getActivity());   final String String_VAR=String_VAR != null ? String_VAR : String_VAR;   new MaterialDialog.Builder(getActivity()).theme(Theme.DARK).title(String.format(getString(R.string.main_confirm_ignoring_player),String_VAR)).positiveText(String_Constant).negativeText(R.string.dialog_cancel).callback(new MaterialDialog.ButtonCallback(){     @Override public void onPositive(    MaterialDialog dialog){       IgnoredPlayersDBHelper_VAR.add(String_VAR);       WAILSettings.setNowScrobblingTrack(getActivity(),null);       WAILSettings.setNowScrobblingPlayerPackageName(getActivity(),null);       WAILSettings.setNowScrobblingPlayerLabel(getActivity(),null);       WAILSettings.setLastCapturedTrackInfo(getActivity(),null);       updateLocalInfo();     }     @Override public void onNegative(    MaterialDialog dialog){       dialog.dismiss();     }   } ).build().show(); } 
@Override public void onPositive(MaterialDialog MaterialDialog_VAR){   IgnoredPlayersDBHelper_VAR.add(String_VAR);   WAILSettings.setNowScrobblingTrack(getActivity(),null);   WAILSettings.setNowScrobblingPlayerPackageName(getActivity(),null);   WAILSettings.setNowScrobblingPlayerLabel(getActivity(),null);   WAILSettings.setLastCapturedTrackInfo(getActivity(),null);   updateLocalInfo(); } 
@Override public void onNegative(MaterialDialog MaterialDialog_VAR){   MaterialDialog_VAR.dismiss(); } 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   loadTrackWordForms(); } 
@Override public void onActivityCreated(Bundle Bundle_VAR){   super.onActivityCreated(Bundle_VAR);   ActionBar ActionBar_VAR=((AppCompatActivity)getActivity()).getSupportActionBar();   if (ActionBar_VAR != null) {     ActionBar_VAR.setTitle(getString(R.string.main_ab_title));   } } 
@Override public View onCreateView(LayoutInflater LayoutInflater_VAR,ViewGroup ViewGroup_VAR,Bundle Bundle_VAR){   return LayoutInflater_VAR.inflate(R.layout.fragment_main,ViewGroup_VAR,Boolean_Constant); } 
@Override public void onViewCreated(View View_VAR,Bundle Bundle_VAR){   super.onViewCreated(View_VAR,Bundle_VAR);   IgnoredPlayersDBHelper_VAR=IgnoredPlayersDBHelper.getInstance(getActivity());   ButterKnife.inject(this,View_VAR);   final Activity Activity_VAR=getActivity();   SwipeRefreshLayout_VAR.setColorSchemeResources(R.color.primary);   SwipeRefreshLayout_VAR.setOnRefreshListener(new PullToRefreshListener());   if (WAILSettings.isShowFeedbackRequest(Activity_VAR)) {     ViewUtil.setVisibility(View_VAR,Boolean_Constant);   }   FloatingActionButton_VAR.attachToScrollView(ObservableScrollView_VAR);   FloatingActionButton_VAR.show(Boolean_Constant); } 
@Override public void onStart(){   super.onStart();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build()); } 
@Override public void onResume(){   super.onResume();   try {     if (!WAILSettings.isAuthorized(getActivity()))     return;   }  catch (  Exception e) {   }   updateLocalInfo();   LocalBroadcastManager.getInstance(getActivity()).registerReceiver(Track_VARsChangedBroadcastReceiver,new IntentFilter(TracksDBHelper.INTENT_TRACKS_CHANGED));   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Object,Object,Object>(){     @Override protected void onPreExecute(){       super.onPreExecute();       updateTracksCountFromLastfm();     }     @Override protected Object doInBackground(    Object... params){       ThreadUtil.sleepIfRequired(SystemClock.elapsedRealtime(),Number_Constant);       return null;     }     @Override protected void onPostExecute(    Object o){       super.onPostExecute(o);       try {         final ConString_VAR ConString_VAR_VAR=getActivity();         if (isRemoving() || isDetached() || ConString_VAR_VAR.isRestricted())         return;         final long long_VAR=WAILSettings.getLastfmUserInfoUpdateTimestamp(ConString_VAR_VAR);         if (!SwipeRefreshLayout_VAR.isRefreshing() && System.currentTimeMillis() - long_VAR > Number_Constant) {           refreshDataFromLastfm();         }       }  catch (      Exception e) {         Loggi.e(String_Constant + e.getMessage());       }     }   } ); } 
@Override protected void onPreExecute(){   super.onPreExecute();   updateTracksCountFromLastfm(); } 
@Override protected Object doInBackground(Object... Object_VAR){   ThreadUtil.sleepIfRequired(SystemClock.elapsedRealtime(),Number_Constant);   return null; } 
@Override prObject_VARtected vObject_VARid Object_VARnPObject_VARstExecute(Object Object_VAR){   super.Object_VARnPObject_VARstExecute(Object_VAR);   try {     final CObject_VARnString_VAR cObject_VARnString_VAR=getActivity();     if (isRemObject_VARving() || isDetached() || cObject_VARnString_VAR.isRestricted())     return;     final lObject_VARng long_VAR=WAILSettings.getLastfmUserInfObject_VARUpdateTimestamp(cObject_VARnString_VAR);     if (!pullTObject_VARRefreshLayObject_VARut.isRefreshing() && System.currentTimeMillis() - long_VAR > Number_Constant) {       refreshDataFrObject_VARmLastfm();     }   }  catch (  ExceptiObject_VARn e) {     LObject_VARggi.e("ExceptiObject_VARn in delayed refresh in MainFragment: " + e.getMessage());   } } 
@Override public void onPause(){   super.onPause();   LocalBroadcastManager.getInstance(getActivity()).unregisterReceiver(Track_VARsChangedBroadcastReceiver); } 
@Override public void onStop(){   super.onStop();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build()); } 
private void refreshDataFromLastfm(){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Object,Object,LFUserResponseModel>(){     NetworkException NetworkException_VAR;     LFApiException LFApiException_VAR;     @Override protected void onPreExecute(){       super.onPreExecute();       try {         SwipeRefreshLayout_VAR.setRefreshing(Boolean_Constant);       }  catch (      Exception e) {       }     }     @Override protected LFUserResponseModel doInBackground(    Object... params){       final long long_VAR=SystemClock.elapsedRealtime();       LFUserResponseModel LFUserResponseModel_VAR=null;       try {         final String String_VAR=LFUserApi.getInfo(WAILSettings.getLastfmSessionKey(getActivity()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),WAILSettings.getLastfmUserName(getActivity()));         LFUserResponseModel_VAR=LFUserResponseModel.parseFromJSON(String_VAR);         WAILSettings.setLastfmUserInfo(getActivity(),String_VAR);         WAILSettings.setLastfmUserName(getActivity(),LFUserResponseModel_VAR.getName());         WAILSettings.setLastfmUserRegistered(getActivity(),LFUserResponseModel_VAR.getRegistered().getText());         WAILSettings.setLastfmUserInfoUpdateTimestamp(getActivity(),System.currentTimeMillis());       }  catch (      Exception e) {         EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,String_Constant + e.getMessage(),Number_Constant).build());         if (e instanceof NetworkException) {           NetworkException_VAR=(NetworkException)e;         }  else         if (e instanceof LFApiException) {           LFApiException_VAR=(LFApiException)e;         }       }       ThreadUtil.sleepIfRequired(long_VAR,Number_Constant);       return LFUserResponseModel_VAR;     }     @Override protected void onPostExecute(    LFUserResponseModel LFUserResponseModel_VAR){       super.onPostExecute(LFUserResponseModel_VAR);       try {         SwipeRefreshLayout_VAR.setRefreshing(Boolean_Constant);         updateTracksCountFromLastfm();         String String_VAR=null;         if (NetworkException_VAR != null) {           String_VAR=getString(R.string.main_refresh_info_from_lastfm_network_error);         }  else         if (LFApiException_VAR != null) {           String_VAR=getString(R.string.main_refresh_info_from_lastfm_api_error,LFApiException_VAR.getMessage());           EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,String_Constant + LFApiException_VAR.getMessage(),Number_Constant).build());         }         if (String_VAR != null) {           Toast.makeText(getActivity(),String_VAR,Toast.LENGTH_LONG).show();         }       }  catch (      Exception e) {         try {           final ConString_VAR ConString_VAR_VAR=getActivity();           if (isDetached() || isRemoving() || ConString_VAR_VAR == null)           return;           Toast.makeText(ConString_VAR_VAR,R.string.main_refresh_info_from_lastfm_unknown_error,Toast.LENGTH_LONG).show();           EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,String_Constant,Number_Constant).build());         }  catch (        Exception eNumber_Constant) {         }       }       redrawLastUpdateTime();     }   } ); } 
@Override protected void onPreExecute(){   super.onPreExecute();   try {     SwipeRefreshLayout_VAR.setRefreshing(Boolean_Constant);   }  catch (  Exception e) {   } } 
@Override protected LFUserResponseModel doInBackground(Object... Object_VAR){   final long long_VAR=SystemClock.elapsedRealtime();   LFUserResponseModel LFUserResponseModel_VAR=null;   try {     final String String_VAR=LFUserApi.getInfo(WAILSettings.getLastfmSessionKey(getActivity()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),WAILSettings.getLastfmUserName(getActivity()));     LFUserResponseModel_VAR=LFUserResponseModel.parseFromJSON(String_VAR);     WAILSettings.setLastfmUserInfo(getActivity(),String_VAR);     WAILSettings.setLastfmUserName(getActivity(),LFUserResponseModel_VAR.getName());     WAILSettings.setLastfmUserRegistered(getActivity(),LFUserResponseModel_VAR.getRegistered().getText());     WAILSettings.setLastfmUserInfoUpdateTimestamp(getActivity(),System.currentTimeMillis());   }  catch (  Exception e) {     EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,String_Constant + e.getMessage(),Number_Constant).build());     if (e instanceof NetworkException) {       NetworkException_VAR=(NetworkException)e;     }  else     if (e instanceof LFApiException) {       LFApiException_VAR=(LFApiException)e;     }   }   ThreadUtil.sleepIfRequired(long_VAR,Number_Constant);   return LFUserResponseModel_VAR; } 
@Override protected void onPostExecute(LFUserResponseModel LFUserResponseModel_VAR){   super.onPostExecute(LFUserResponseModel_VAR);   try {     SwipeRefreshLayout_VAR.setRefreshing(Boolean_Constant);     updateTracksCountFromLastfm();     String String_VAR=null;     if (NetworkException_VAR != null) {       String_VAR=getString(R.string.main_refresh_info_from_lastfm_network_error);     }  else     if (LFApiException_VAR != null) {       String_VAR=getString(R.string.main_refresh_info_from_lastfm_api_error,LFApiException_VAR.getMessage());       EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,String_Constant + LFApiException_VAR.getMessage(),Number_Constant).build());     }     if (String_VAR != null) {       Toast.makeText(getActivity(),String_VAR,Toast.LENGTH_LONG).show();     }   }  catch (  Exception e) {     try {       final ConString_VAR ConString_VAR_VAR=getActivity();       if (isDetached() || isRemoving() || ConString_VAR_VAR == null)       return;       Toast.makeText(ConString_VAR_VAR,R.string.main_refresh_info_from_lastfm_unknown_error,Toast.LENGTH_LONG).show();       EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,String_Constant,Number_Constant).build());     }  catch (    Exception eNumber_Constant) {     }   }   redrawLastUpdateTime(); } 
private void loadTrackWordForms(){   String[]_VAR=getResources().getStringArray(R.array.word_form_Track_VAR); } 
private void updateLocalInfo(){   updateTracksTodayCount();   redrawLastUpdateTime();   updateNowScrobblingTrack(); } 
private void updateTracksTodayCount(){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Integer>(){     @Override protected Integer doInBackground(    Void... params){       try {         final Calendar Calendar_VAR=Calendar.getInstance();         int int_VAR=Number_Constant;         Cursor Cursor_VAR=TracksDBHelper.getInstance(getActivity().getApplicationConString_VAR()).getAllDesc();         if (Cursor_VAR.moveToFirst()) {           do {             Track Track_VAR=TracksDBHelper.parseFromCursor(Cursor_VAR);             final Calendar Calendar_VAR=Calendar.getInstance();             Calendar_VAR.setTimeInMillis(Track_VAR.getTimestamp());             if (Calendar_VAR.get(Calendar.YEAR) == Calendar_VAR.get(Calendar.YEAR) && Calendar_VAR.get(Calendar.MONTH) == Calendar_VAR.get(Calendar.MONTH) && Calendar_VAR.get(Calendar.DAY_OF_MONTH) == Calendar_VAR.get(Calendar.DAY_OF_MONTH)) {               int_VAR++;             }           }  while (Cursor_VAR.moveToNext());         }         Cursor_VAR.close();         return int_VAR;       }  catch (      Exception e) {         return -Number_Constant;       }     }     @Override protected void onPostExecute(    Integer int_VAR){       if (!isDetached()) {         try {           int_VARTextView.setText(String.valueOf(int_VAR));           TextView_VAR.setText(WordFormUtil.getWordForm(int_VAR,String[]_VAR) + String_Constant + getString(R.string.main_today));         }  catch (        Exception e) {           Loggi.e(String_Constant + e.getMessage());         }       }     }   } ); } 
@Override protected Integer doInBackground(Void... Void_VAR){   try {     final Calendar Calendar_VAR=Calendar.getInstance();     int int_VAR=Number_Constant;     Cursor Cursor_VAR=TracksDBHelper.getInstance(getActivity().getApplicationConString_VAR()).getAllDesc();     if (Cursor_VAR.moveToFirst()) {       do {         Track Track_VAR=TracksDBHelper.parseFromCursor(Cursor_VAR);         final Calendar Calendar_VAR=Calendar.getInstance();         Calendar_VAR.setTimeInMillis(Track_VAR.getTimestamp());         if (Calendar_VAR.get(Calendar.YEAR) == Calendar_VAR.get(Calendar.YEAR) && Calendar_VAR.get(Calendar.MONTH) == Calendar_VAR.get(Calendar.MONTH) && Calendar_VAR.get(Calendar.DAY_OF_MONTH) == Calendar_VAR.get(Calendar.DAY_OF_MONTH)) {           int_VAR++;         }       }  while (Cursor_VAR.moveToNext());     }     Cursor_VAR.close();     return int_VAR;   }  catch (  Exception e) {     return -Number_Constant;   } } 
@Override protected void onPostExecute(Integer Integer_VAR){   if (!isDetached()) {     try {       Integer_VARTextView.setText(String.valueOf(Integer_VAR));       Integer_VARLabelTextView.setText(WordFormUtil.getWordForm(Integer_VAR,String[]_VAR) + String_Constant + getString(R.string.main_today));     }  catch (    Exception e) {       Loggi.e(String_Constant + e.getMessage());     }   } } 
private void updateTracksCountFromLastfm(){   final LFUserResponseModel LFUserResponseModel_VAR=WAILSettings.getLastfmUserInfo(getActivity());   if (LFUserResponseModel_VAR == null || LFUserResponseModel_VAR.getPlayCount() == -Number_Constant) {     TextView_VAR.setVisibility(View.GONE);     TextView_VAR.setVisibility(View.GONE);     TextView_VAR.setVisibility(View.VISIBLE);     TextView_VAR.setText(R.string.main_Track_VARs_on_last_fm_unknown);   }  else {     TextView_VAR.setVisibility(View.VISIBLE);     TextView_VAR.setVisibility(View.VISIBLE);     TextView_VAR.setVisibility(View.GONE);     TextView_VAR.setText(String.valueOf(LFUserResponseModel_VAR.getPlayCount()));     TextView_VAR.setText(WordFormUtil.getWordForm(LFUserResponseModel_VAR.getPlayCount(),String[]_VAR) + String_Constant + getString(R.string.main_Track_VARs_on_last_fm));   } } 
private void updateNowScrobblingTrack(){   Track Track_VAR=WAILSettings.getNowScrobblingTrack(getActivity());   String String_VAR=WAILSettings.getNowScrobblingPlayerLabel(getActivity());   String String_VAR=WAILSettings.getNowScrobblingPlayerPackageName(getActivity());   final String String_VAR=String_VAR != null ? String_VAR : String_VAR;   if (Track_VAR != null) {     Track_VARTextView.setText(getString(R.string.main_now_scrobbling_String_VAR,Track_VAR.getArtist() + String_Constant + Track_VAR.getTrack()));     TextView_VAR.setText(String.format(getString(R.string.main_scrobbling_from_player_String_VAR),String_VAR));     if (FloatingActionButton_VAR.getVisibility() != View.VISIBLE) {       FloatingActionButton_VAR.setVisibility(View.VISIBLE);     }     FloatingActionButton_VAR.show();     TextView_VAR.setVisibility(View.VISIBLE);   }  else {     Track_VARTextView.setText(getString(R.string.main_now_scrobbling_String_VAR,getString(R.string.main_now_scrobbling_nothing)));     TextView_VAR.setText(String_Constant);     FloatingActionButton_VAR.hide();     TextView_VAR.setVisibility(View.GONE);   } } 
private void redrawLastUpdateTime(){   try {     final long long_VAR=WAILSettings.getLastfmUserInfoUpdateTimestamp(getActivity());     if (long_VAR == -Number_Constant) {       TextView_VAR.setText(String_Constant);       return;     }     final Calendar Calendar_VAR=Calendar.getInstance();     Calendar_VAR.setTimeInMillis(long_VAR);     final String String_VAR;     final long long_VAR=System.currentTimeMillis() - long_VAR;     if (long_VAR < Number_Constant) {       SimpleDateFormat SimpleDateFormat_VAR=new SimpleDateFormat(String_Constant,Locale.getDefault());       String_VAR=getString(R.string.main_updated_today_at,SimpleDateFormat_VAR.format(Calendar_VAR.getTime()));     }  else     if (long_VAR >= Number_Constant && long_VAR <= Number_Constant) {       SimpleDateFormat SimpleDateFormat_VAR=new SimpleDateFormat(String_Constant,Locale.getDefault());       String_VAR=getString(R.string.main_updated_yesterday_at,SimpleDateFormat_VAR.format(Calendar_VAR.getTime()));     }  else {       SimpleDateFormat SimpleDateFormat_VAR=new SimpleDateFormat(String_Constant,Locale.getDefault());       String_VAR=getString(R.string.main_updated_common,SimpleDateFormat_VAR.format(Calendar_VAR.getTime()));     }     TextView_VAR.setText(String_VAR);   }  catch (  Exception e) {     TextView_VAR.setText(String_Constant);   } } 
@Override public void onRefresh(){   Toast.makeText(getActivity(),getString(R.string.main_refreshing),Toast.LENGTH_SHORT).show();   refreshDataFromLastfm();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build()); } 
@OnClick(R.id.settings_ignored_players) public void onIgnoredPlayersClick(){   startActivity(new Intent(getActivity(),SettingsIgnoredPlayersActivity.class)); } 
@OnClick(R.id.settings_select_String_VARuage_menu_item) public void onSelectLanguageClick(){   startActivity(new Intent(getActivity(),SettingsSelectLanguageActivity.class)); } 
@OnClick(R.id.settings_disable_scrobbling_over_mobile_network) public void onDisableScrobblingOverMobileChanged(){   SwitchCompat SwitchCompat_VAR=(SwitchCompat)getActivity().findViewById(R.id.settings_disable_scrobbling_over_mobile_network_switch);   onDisableScrobblingOverMobileChanged(SwitchCompat_VAR.isChecked());   SwitchCompat_VAR.setChecked(!SwitchCompat_VAR.isChecked()); } 
@OnCheckedChanged(R.id.settings_disable_scrobbling_over_mobile_network_switch) public void onDisableScrobblingOverMobileChanged(boolean boolean_VAR){   if (boolean_VAR == WAILSettings.isEnableScrobblingOverMobileNetwork(getActivity())) {     return;   }   WAILSettings.setDisableScrobblingOverMobileNetwork(getActivity(),boolean_VAR);   final String Toast_VAR=boolean_VAR ? getString(R.string.settings_scrobbling_over_mobile_network_enabled_Toast_VAR) : getString(R.string.settings_scrobbling_over_mobile_network_disabled_Toast_VAR);   Toast.makeText(getActivity(),Toast_VAR,Toast.LENGTH_SHORT).show();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant + boolean_VAR,null,boolean_VAR ? Number_Constant : Number_Constant).build()); } 
@OnClick(R.id.settings_lastfm_update_nowplaying) public void onLastfmUpdateNowPlayingChanged(){   SwitchCompat SwitchCompat_VAR=(SwitchCompat)getActivity().findViewById(R.id.settings_lastfm_update_nowplaying_switch);   onLastfmUpdateNowPlayingChanged(SwitchCompat_VAR.isChecked());   SwitchCompat_VAR.setChecked(!SwitchCompat_VAR.isChecked()); } 
@OnCheckedChanged(R.id.settings_lastfm_update_nowplaying_switch) public void onLastfmUpdateNowPlayingChanged(boolean boolean_VAR){   if (boolean_VAR == WAILSettings.isLastfmNowplayingUpdateEnabled(getActivity())) {     return;   }   WAILSettings.setLastfmNowplayingUpdateEnabled(getActivity(),boolean_VAR);   final String Toast_VAR=boolean_VAR ? getString(R.string.settings_lastfm_update_nowplaying_enabled_Toast_VAR) : getString(R.string.settings_lastfm_update_nowplaying_disabled_Toast_VAR);   Toast.makeText(getActivity(),Toast_VAR,Toast.LENGTH_SHORT).show();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant + boolean_VAR,null,boolean_VAR ? Number_Constant : Number_Constant).build()); } 
@OnClick(R.id.settings_theme) public void onThemeChanged(){   SwitchCompat SwitchCompat_VAR=(SwitchCompat)getActivity().findViewById(R.id.settings_theme_switch);   onThemeChanged(SwitchCompat_VAR.isChecked());   SwitchCompat_VAR.setChecked(!SwitchCompat_VAR.isChecked()); } 
@OnCheckedChanged(R.id.settings_theme_switch) public void onThemeChanged(boolean boolean_VAR){   if (boolean_VAR == (WAILSettings.getTheme(getActivity()) == WAILSettings.Theme.DARK)) {     return;   }   WAILSettings.setTheme(getActivity(),boolean_VAR ? WAILSettings.Theme.DARK : WAILSettings.Theme.LIGHT);   ((BaseActivity)getActivity()).setTheme();   ((BaseActivity)getActivity()).restart(); } 
@OnClick(R.id.settings_sound_notifications) public void onSoundNotificationSettingClick(){   startActivity(new Intent(getActivity(),SettingsSoundNotificationsActivity.class)); } 
@OnClick(R.id.settings_status_bar_notifications) public void onStatusBarNotificationSettingClick(){   startActivity(new Intent(getActivity(),SettingsStatusBarNotificationsActivity.class)); } 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setHasOptionsMenu(Boolean_Constant);   ((AppCompatActivity)getActivity()).getSupportActionBar().setTitle(R.string.settings_actionbar_title); } 
@Override public View onCreateView(LayoutInflater LayoutInflater_VAR,ViewGroup ViewGroup_VAR,Bundle Bundle_VAR){   return LayoutInflater_VAR.inflate(R.layout.fragment_main_settings,ViewGroup_VAR,Boolean_Constant); } 
@Override public void onCreateOptionsMenu(Menu Menu_VAR,MenuInflater MenuInflater_VAR){   super.onCreateOptionsMenu(Menu_VAR,MenuInflater_VAR);   MenuInflater_VAR.inflate(R.Menu_VAR.main_settings,Menu_VAR);   SwitchCompat SwitchCompat_VAR=(SwitchCompat)MenuItemCompat.getActionView(Menu_VAR.findItem(R.id.main_settings_Menu_VAR_is_wail_enabled));   SwitchCompat_VAR.setChecked(WAILSettings.isEnabled(getActivity()));   SwitchCompat_VAR.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){     @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){       WAILSettings.setEnabled(getActivity(),isChecked);       final Toast Toast_VAR=Toast.makeText(getActivity(),String_Constant,Toast.LENGTH_SHORT);       Toast_VAR.setGravity(Gravity.TOP | Gravity.END,Number_Constant,(int)DisplayUnitsConverter.dpToPx(getActivity(),Number_Constant));       if (isChecked) {         setUIStateWailEnabled();         Toast_VAR.setText(R.string.settings_wail_enabled_Toast_VAR);       }  else {         setUIStateWailDisabled();         Toast_VAR.setText(R.string.settings_wail_disabled_Toast_VAR);       }       Toast_VAR.show();       EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant + isChecked,null,isChecked ? Number_Constant : Number_Constant).build());     }   } ); } 
@Override public void onCheckedChanged(CompoundButton CompoundButton_VAR,boolean boolean_VAR){   WAILSettings.setEnabled(getActivity(),boolean_VAR);   final Toast Toast_VAR=Toast.makeText(getActivity(),String_Constant,Toast.LENGTH_SHORT);   Toast_VAR.setGravity(Gravity.TOP | Gravity.END,Number_Constant,(int)DisplayUnitsConverter.dpToPx(getActivity(),Number_Constant));   if (boolean_VAR) {     setUIStateWailEnabled();     Toast_VAR.setText(R.string.settings_wail_enabled_Toast_VAR);   }  else {     setUIStateWailDisabled();     Toast_VAR.setText(R.string.settings_wail_disabled_Toast_VAR);   }   Toast_VAR.show();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant + boolean_VAR,null,boolean_VAR ? Number_Constant : Number_Constant).build()); } 
@Override public void onViewCreated(View View_VAR,Bundle Bundle_VAR){   super.onViewCreated(View_VAR,Bundle_VAR);   ButterKnife.inject(this,View_VAR);   if (WAILSettings.isEnabled(getActivity())) {     setUIStateWailEnabled();   }  else {     setUIStateWailDisabled();   }   String String_VAR=WAILSettings.getLanguage(getActivity());   if (String_VAR == null) {     String_VAR=getResources().getStringArray(R.array.settings_select_String_VARuage_String_VARuages)[Number_Constant];   }   TextView_VAR.setText(String_VAR);   refreshMinTrackDurationInPercents();   refreshMinTrackDurationInSeconds();   SwitchCompat_VAR.setChecked(WAILSettings.isEnableScrobblingOverMobileNetwork(getActivity()));   SwitchCompat_VAR.setChecked(WAILSettings.isLastfmNowplayingUpdateEnabled(getActivity()));   TextView_VAR.setText(WAILSettings.getLastfmUserName(getActivity()));   SwitchCompat_VAR.setChecked(WAILSettings.getTheme(getActivity()) == WAILSettings.Theme.DARK);   try {     TextView_VAR.setText(getActivity().getPackageManager().getPackageInfo(getActivity().getPackageName(),Number_Constant).versionName);   }  catch (  Exception e) {     TextView_VAR.setText(String_Constant);     EasyTracker.getInstance(getActivity()).send(MapBuilder.createException(String_Constant + e.getMessage(),Boolean_Constant).build());   } } 
@Override public void onStart(){   super.onStart();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build()); } 
@Override public void onStop(){   super.onStop();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build()); } 
void setUIStateWailEnabled(){   ViewUtil.setEnabledForAllChildrenRecursively((ViewGroup)View_VAR,Boolean_Constant); } 
void setUIStateWailDisabled(){   ViewUtil.setEnabledForAllChildrenRecursively((ViewGroup)View_VAR,Boolean_Constant); } 
@OnClick(R.id.settings_min_track_duration_in_percents) void showMinTrackDurationInPercentsEditDialog(){   final DialogFragmentWithSeekBar DialogFragmentWithSeekBar_VAR=DialogFragmentWithSeekBar.newInstance(getString(R.string.settings_min_track_elapsed_time_in_percent_dialog_title),WAILSettings.getMinTrackDurationInPercents(getActivity()));   DialogFragmentWithSeekBar_VAR.setListener(this);   DialogFragmentWithSeekBar_VAR.show(getFragmentManager(),String_Constant); } 
@OnClick(R.id.settings_min_track_duration_in_seconds) void showMinTrackDurationInSecondsEditDialog(){   final DialogFragmentWithNumberPicker DialogFragmentWithNumberPicker_VAR=DialogFragmentWithNumberPicker.newInstance(getString(R.string.settings_min_track_elapsed_time_in_seconds_dialog_title),Number_Constant,Number_Constant,WAILSettings.getMinTrackDurationInSeconds(getActivity()));   DialogFragmentWithNumberPicker_VAR.setListener(this);   DialogFragmentWithNumberPicker_VAR.show(getFragmentManager(),"DialogFragmentWithNumberPicker_VAR"); } 
private void refreshMinTrackDurationInSeconds(){   final int int_VAR=WAILSettings.getMinTrackDurationInSeconds(getActivity());   TextView_VAR.setText(getString(R.string.settings_min_track_elapsed_time_in_seconds_desc,int_VAR + String_Constant + WordFormUtil.getWordForm(int_VAR,getResources().getStringArray(R.array.word_forms_second)))); } 
private void refreshMinTrackDurationInPercents(){   TextView_VAR.setText(getString(R.string.settings_min_track_elapsed_time_in_percent_desc,WAILSettings.getMinTrackDurationInPercents(getActivity()))); } 
@OnClick(R.id.settings_logout_menu_item) public void logout(){   new MaterialDialog.Builder(getActivity()).theme(Theme.DARK).title(R.string.setting_logout_warning).positiveText(String_Constant).negativeText(R.string.dialog_cancel).callback(new MaterialDialog.ButtonCallback(){     @Override public void onPositive(    MaterialDialog dialog){       WAILSettings.clearAllSettings(getActivity());       AppDBManager.getInstance(getActivity()).clearAll();       LocaleUtil.updateLanguage(getActivity(),null);       startActivity(new Intent(getActivity(),MainActivity.class));       getActivity().finish();     }     @Override public void onNegative(    MaterialDialog dialog){       dialog.dismiss();     }   } ).build().show(); } 
@Override public void onPositive(MaterialDialog MaterialDialog_VAR){   WAILSettings.clearAllSettings(getActivity());   AppDBManager.getInstance(getActivity()).clearAll();   LocaleUtil.updateLanguage(getActivity(),null);   startActivity(new Intent(getActivity(),MainActivity.class));   getActivity().finish(); } 
@Override public void onNegative(MaterialDialog MaterialDialog_VAR){   MaterialDialog_VAR.dismiss(); } 
@OnClick(R.id.settings_email_to_developers) public void emailToTheDeveloper(){   try {     final Intent Intent_VAR=new Intent(Intent.ACTION_SEND);     String String_VAR=getString(R.string.settings_developers_String[]_VAR);     String[] String[]_VAR=String_VAR.substring(Number_Constant,String_VAR.indexOf(Character_Constant) - Number_Constant).split(String_Constant);     Intent_VAR.putExtra(Intent.EXTRA_EMAIL,String[]_VAR);     Intent_VAR.putExtra(Intent.EXTRA_SUBJECT,getString(R.string.settings_email_to_the_developer_subj) + String_Constant + TextView_VAR.getText().toString());     Intent_VAR.setType(String_Constant);     startActivity(Intent.createChooser(Intent_VAR,getString(R.string.settings_email_dialog_title)));     EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build());   }  catch (  Exception e) {     EasyTracker.getInstance(getActivity()).send(MapBuilder.createException(String_Constant + e,Boolean_Constant).build());   } } 
@Override public void onDismiss(){   refreshMinTrackDurationInPercents();   refreshMinTrackDurationInSeconds(); } 
@Override public void onReceive(ConString_VAR ConString_VAR_VAR,Intent Intent_VAR){   reloadTracksAsync(); } 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   setHasOptionsMenu(Boolean_Constant);   ((AppCompatActivity)getActivity()).getSupportActionBar().setTitle(getString(R.string.Track_VARs_actionbar_title));   Track_VARsListAdapter=new TracksListAdapter(TracksListDataProvider_VAR); } 
@Override public View onCreateView(LayoutInflater LayoutInflater_VAR,ViewGroup ViewGroup_VAR,Bundle Bundle_VAR){   return LayoutInflater_VAR.inflate(R.layout.fragment_Track_VARs_list,ViewGroup_VAR,Boolean_Constant); } 
@Override public void onViewCreated(View View_VAR,Bundle Bundle_VAR){   super.onViewCreated(View_VAR,Bundle_VAR);   ButterKnife.inject(this,View_VAR);   setUIStateLoading();   ListView_VAR.setAdapter(Track_VARsListAdapter);   ListView_VAR.setOnItemClickListener(new AdapterView.OnItemClickListener(){     @Override public void onItemClick(    AdapterView<?> parent,    View View_VAR,    int position,    long id){       Track Track_VAR=(Track)parent.getAdapter().getItem(position);       TrackActionsDialog.newInstance(Track_VAR).show(getFragmentManager(),"Track_VARActionsDialog");     }   } ); } 
@Overrlong_VARe public volong_VAR onItemClick(AdapterView<?> AdapterView<?>_VAR,View View_VAR,int int_VAR,long long_VAR){   Track Track_VAR=(Track)AdapterView<?>_VAR.getAdapter().getItem(int_VAR);   TrackActionsDialog.newInstance(Track_VAR).show(getFragmentManager(),"Track_VARActionsDialog"); } 
private void setUIStateLoading(){   ViewUtil.setVisibility(Track_VARsListLoading,Boolean_Constant);   ViewUtil.setVisibility(View_VAR,Boolean_Constant);   ViewUtil.setVisibility(View_VAR,Boolean_Constant); } 
private void setUIStateEmpty(String String_VAR){   String_VARView.setText(String_VAR);   ViewUtil.setVisibility(Track_VARsListLoading,Boolean_Constant);   ViewUtil.setVisibility(View_VAR,Boolean_Constant);   ViewUtil.setVisibility(View_VAR,Boolean_Constant); } 
private void setUIStateShowTracks(){   ViewUtil.setVisibility(Track_VARsListLoading,Boolean_Constant);   ViewUtil.setVisibility(View_VAR,Boolean_Constant);   ViewUtil.setVisibility(View_VAR,Boolean_Constant); } 
@Override public void onStart(){   super.onStart();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build()); } 
@Override public void onResume(){   super.onResume();   subscribeForDBUpdates();   reloadTracksAsync(); } 
@Override public void onPause(){   super.onPause();   unsubscribeFromDBUpdates(); } 
@Override public void onStop(){   super.onStop();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build()); } 
private void subscribeForDBUpdates(){   LocalBroadcastManager.getInstance(getActivity()).registerReceiver(Track_VARsChangedBroadcastReceiver,new IntentFilter(TracksDBHelper.INTENT_TRACKS_CHANGED)); } 
private void unsubscribeFromDBUpdates(){   LocalBroadcastManager.getInstance(getActivity()).unregisterReceiver(Track_VARsChangedBroadcastReceiver); } 
@Override public void onCreateOptionsMenu(Menu Menu_VAR,MenuInflater MenuInflater_VAR){   super.onCreateOptionsMenu(Menu_VAR,MenuInflater_VAR);   MenuInflater_VAR.inflate(R.Menu_VAR.main_Track_VARs,Menu_VAR);   Track_VARsSearchHandler.setSearchItem(Menu_VAR.findItem(R.id.main_Track_VARs_ab_search)); } 
private void reloadTracksAsync(){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Cursor>(){     @Override protected void onPreExecute(){       super.onPreExecute();       try {         setUIStateLoading();       }  catch (      Exception e) {         Loggi.e(String_Constant + e);       }     }     @Override protected Cursor doInBackground(    Void... params){       try {         return TracksDBHelper.getInstance(getActivity()).getAllDesc();       }  catch (      Exception e) {         return null;       }     }     @Override protected void onPostExecute(    Cursor Cursor_VAR){       super.onPostExecute(Cursor_VAR);       if (!isDetached()) {         try {           if (Cursor_VAR == null || Cursor_VAR.getCount() == Number_Constant) {             setUIStateEmpty(getString(R.string.Track_VARs_list_empty_motivation_String_VAR));           }  else {             setUIStateShowTracks();           }           TracksListDataProvider_VAR.setDataSource(Cursor_VAR);         }  catch (        Exception e) {           Loggi.e(String_Constant + e.getMessage());         }       }     }   } ); } 
@Override protected void onPreExecute(){   super.onPreExecute();   try {     setUIStateLoading();   }  catch (  Exception e) {     Loggi.e(String_Constant + e);   } } 
@Override protected Cursor doInBackground(Void... Void_VAR){   try {     return TracksDBHelper.getInstance(getActivity()).getAllDesc();   }  catch (  Exception e) {     return null;   } } 
@Override protected void onPostExecute(Cursor Cursor_VAR){   super.onPostExecute(Cursor_VAR);   if (!isDetached()) {     try {       if (Cursor_VAR == null || Cursor_VAR.getCount() == Number_Constant) {         setUIStateEmpty(getString(R.string.Track_VARs_list_empty_motivation_String_VAR));       }  else {         setUIStateShowTracks();       }       TracksListDataProvider_VAR.setDataSource(Cursor_VAR);     }  catch (    Exception e) {       Loggi.e(String_Constant + e.getMessage());     }   } } 
public void setListener(Listener Listener_VAR){   this.Listener_VAR=Listener_VAR; } 
public void setDataSource(Cursor Cursor_VAR){   if (this.Cursor_VAR != null) {     this.Cursor_VAR.close();   }   this.Cursor_VAR=Cursor_VAR;   Track_VARsList=null;   notifyOnDataSourceChanged(); } 
public void setDataSource(List<Track> List<Track>_VAR){   if (this.Cursor_VAR != null) {     this.Cursor_VAR.close();   }   this.List<Track>_VAR=List<Track>_VAR;   Cursor_VAR=null;   notifyOnDataSourceChanged(); } 
public int getCount(){   if (Cursor_VAR != null) {     return Cursor_VAR.getCount();   }  else   if (Track_VARsList != null) {     return Track_VARsList.size();   }  else {     return Number_Constant;   } } 
public Track getAtPos(int int_VAR){   if (Cursor_VAR != null) {     Cursor_VAR.moveToPosition(int_VAR);     return TracksDBHelper.parseFromCursor(Cursor_VAR);   }  else   if (Track_VARsList != null) {     return Track_VARsList.get(int_VAR);   }   return null; } 
private void notifyOnDataSourceChanged(){   if (Listener_VAR != null) {     Listener_VAR.onDataSourceChanged();   } } 
void onDataSourceChanged(); 
public TrackViewHolder(View View_VAR){   ButterKnife.inject(this,View_VAR); } 
public TracksListAdapter(TracksListDataProvider TracksListDataProvider_VAR){   this.TracksListDataProvider_VAR=TracksListDataProvider_VAR;   this.TracksListDataProvider_VAR.setListener(this);   int[]_VAR=loadTrackStateColors(); } 
private int[] loadTrackStateColors(){   int[] int[]_VAR=new int[Number_Constant];   int[]_VAR[Number_Constant]=getResources().getColor(R.color.Track_VAR_state_waiting_for_scrobble);   int[]_VAR[Number_Constant]=getResources().getColor(R.color.Track_VAR_state_scrobbling);   int[]_VAR[Number_Constant]=getResources().getColor(R.color.Track_VAR_state_error);   int[]_VAR[Number_Constant]=getResources().getColor(R.color.Track_VAR_state_scrobble_success);   int[]_VAR[Number_Constant]=getResources().getColor(R.color.Track_VAR_state_unknown);   return int[]_VAR; } 
@Override public int getCount(){   return TracksListDataProvider_VAR.getCount(); } 
@Override public Track getItem(int int_VAR){   return TracksListDataProvider_VAR.getAtPos(int_VAR); } 
@Override public long getItemId(int int_VAR){   return TracksListDataProvider_VAR.getAtPos(int_VAR).hashCode(); } 
@Override public View getView(int int_VAR,View View_VAR,ViewGroup ViewGroup_VAR){   final TrackViewHolder TrackViewHolder_VAR;   if (View_VAR == null) {     View_VAR=LayoutInflater.from(getActivity()).inflate(R.layout.Track_VAR_list_item,ViewGroup_VAR,Boolean_Constant);     TrackViewHolder_VAR=new TrackViewHolder(View_VAR);     View_VAR.setTag(TrackViewHolder_VAR);   }  else {     TrackViewHolder_VAR=(TrackViewHolder)View_VAR.getTag();   }   drawTrackView(View_VAR,TrackViewHolder_VAR,int_VAR);   return View_VAR; } 
private void drawTrackView(View View_VAR,TrackViewHolder TrackViewHolder_VAR,int int_VAR){   final Track Track_VAR=TracksListDataProvider_VAR.getAtPos(int_VAR);   TrackViewHolder_VAR.Track_VARTextView.setText(Track_VAR.getTrack());   String String_VAR;   if (!TextUtils.isEmpty(Track_VAR.getArtist())) {     String_VAR=Track_VAR.getArtist();     if (!TextUtils.isEmpty(Track_VAR.getAlbum())) {       String_VAR+=String_Constant + Track_VAR.getAlbum();     }   }  else   if (!TextUtils.isEmpty(Track_VAR.getAlbum())) {     String_VAR=Track_VAR.getAlbum();   }  else {     String_VAR=getString(R.string.Track_VAR_artist_and_album_no_data);   }   TrackViewHolder_VAR.String_VARTextView.setText(String_VAR); switch (Track_VAR.getState()) { case Track.STATE_WAITING_FOR_SCROBBLE:     TrackViewHolder_VAR.TextView_VAR.setText(R.string.Track_VAR_status_waiting_for_scrobble);   TrackViewHolder_VAR.TextView_VAR.setTextColor(int[]_VAR[Number_Constant]); break; case Track.STATE_SCROBBLING: TrackViewHolder_VAR.TextView_VAR.setText(R.string.Track_VAR_status_scrobbling); TrackViewHolder_VAR.TextView_VAR.setTextColor(int[]_VAR[Number_Constant]); break; case Track.STATE_SCROBBLE_ERROR: TrackViewHolder_VAR.TextView_VAR.setText(R.string.Track_VAR_status_scrobble_error); TrackViewHolder_VAR.TextView_VAR.setTextColor(int[]_VAR[Number_Constant]); break; case Track.STATE_SCROBBLE_SUCCESS: TrackViewHolder_VAR.TextView_VAR.setText(R.string.Track_VAR_status_scrobble_success); TrackViewHolder_VAR.TextView_VAR.setTextColor(int[]_VAR[Number_Constant]); break; default : TrackViewHolder_VAR.TextView_VAR.setText(R.string.Track_VAR_status_unknown); TrackViewHolder_VAR.TextView_VAR.setTextColor(int[]_VAR[Number_Constant]); break; } Calendar Calendar_VAR=Calendar.getInstance(); Calendar_VAR.setTimeInMillis(Track_VAR.getTimestamp()); final String String_VAR=DateFormat_VAR.format(Calendar_VAR.getTime()); TrackViewHolder_VAR.TextView_VAR.setText(String_VAR); } 
@Override public void onDataSourceChanged(){   notifyDataSetChanged(); } 
public void setSearchItem(MenuItem MenuItem_VAR){   SearchView_VAR=(SearchView)MenuItemCompat.getActionView(MenuItem_VAR).findViewById(R.id.main_Track_VARs_ab_search);   SearchView_VAR.setOnQueryTextListener(this); } 
@Override public boolean onQueryTextSubmit(String String_VAR){   String_VARearchAString_VARync(String_VAR);   return Boolean_Constant; } 
@Override public boolean onQueryTextChange(String String_VAR){   String_VARearchAString_VARync(String_VAR);   return Boolean_Constant; } 
public void searchAsync(String String_VAR){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<String,Void,List<Track>>(){     private String String_VAR;     @Override protected void onPreExecute(){       super.onPreExecute();       try {         unsubscribeFromDBUpdates();         setUIStateLoading();       }  catch (      Exception e) {         Loggi.e(String_Constant + e);       }     }     @Override protected List<Track> doInBackground(    String... params){       try {         String_VAR=params[Number_Constant].toLowerCase(Locale.getDefault());         Cursor Cursor_VAR=TracksDBHelper.getInstance(getActivity()).getAllDesc();         final List<Track> Track_VARs=new ArrayList<Track>();         if (Cursor_VAR.moveToFirst()) {           do {             Track Track_VAR=TracksDBHelper.parseFromCursor(Cursor_VAR);             if (Track_VAR.getTrack() != null && Track_VAR.getTrack().toLowerCase(Locale.getDefault()).contains(String_VAR)) {               Track_VARs.add(Track_VAR);             }  else             if (Track_VAR.getArtist() != null && Track_VAR.getArtist().toLowerCase(Locale.getDefault()).contains(String_VAR)) {               Track_VARs.add(Track_VAR);             }  else             if (Track_VAR.getAlbum() != null && Track_VAR.getAlbum().toLowerCase(Locale.getDefault()).contains(String_VAR)) {               Track_VARs.add(Track_VAR);             }           }  while (Cursor_VAR.moveToNext());         }         return Track_VARs;       }  catch (      Exception e) {         return null;       }     }     @Override protected void onPostExecute(    List<Track> Track_VARs){       super.onPostExecute(Track_VARs);       try {         if (Track_VARs == null) {           Toast.makeText(getActivity(),R.string.Track_VARs_search_error_toast,Toast.LENGTH_LONG).show();         }  else         if (Track_VARs.size() == Number_Constant) {           setUIStateEmpty(getString(R.string.Track_VARs_search_no_results,String_VAR));         }  else {           setUIStateShowTracks();           TracksListDataProvider_VAR.setDataSource(Track_VARs);           ListView_VAR.smoothScrollToPosition(Number_Constant);         }       }  catch (      Exception e) {         Loggi.e(String_Constant + e);       }     }   } ,String_VAR); } 
@Override protected void onPreExecute(){   super.onPreExecute();   try {     unsubscribeFromDBUpdates();     setUIStateLoading();   }  catch (  Exception e) {     Loggi.e(String_Constant + e);   } } 
@Override protected List<Track> doInBackground(String... String_VAR){   try {     String_VAR=String_VAR[Number_Constant].toLowerCase(Locale.getDefault());     Cursor Cursor_VAR=TracksDBHelper.getInstance(getActivity()).getAllDesc();     final List<Track> Track_VARs=new ArrayList<Track>();     if (Cursor_VAR.moveToFirst()) {       do {         Track Track_VAR=TracksDBHelper.parseFromCursor(Cursor_VAR);         if (Track_VAR.getTrack() != null && Track_VAR.getTrack().toLowerCase(Locale.getDefault()).contains(String_VAR)) {           Track_VARs.add(Track_VAR);         }  else         if (Track_VAR.getArtist() != null && Track_VAR.getArtist().toLowerCase(Locale.getDefault()).contains(String_VAR)) {           Track_VARs.add(Track_VAR);         }  else         if (Track_VAR.getAlbum() != null && Track_VAR.getAlbum().toLowerCase(Locale.getDefault()).contains(String_VAR)) {           Track_VARs.add(Track_VAR);         }       }  while (Cursor_VAR.moveToNext());     }     return Track_VARs;   }  catch (  Exception e) {     return null;   } } 
@Override protected void onPostExecute(List<Track> List<Track>_VAR){   super.onPostExecute(List<Track>_VAR);   try {     if (List<Track>_VAR == null) {       Toast.makeText(getActivity(),R.string.List<Track>_VAR_search_error_toast,Toast.LENGTH_LONG).show();     }  else     if (List<Track>_VAR.size() == Number_Constant) {       setUIStateEmpty(getString(R.string.List<Track>_VAR_search_no_results,String_VAR));     }  else {       setUIStateShowTracks();       List<Track>_VARListDataProvider.setDataSource(List<Track>_VAR);       List<Track>_VARListView.smoothScrollToPosition(Number_Constant);     }   }  catch (  Exception e) {     Loggi.e(String_Constant + e);   } } 
@OnClick(R.id.non_authorized_sign_in_button) public void onSignInButtonClick(){   getToken();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build()); } 
@OnClick(R.id.non_authorized_sign_up_button) public void onSignUpButtonClick(){   startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(String_Constant)));   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build()); } 
@Override public View onCreateView(LayoutInflater LayoutInflater_VAR,ViewGroup ViewGroup_VAR,Bundle Bundle_VAR){   return LayoutInflater_VAR.inflate(R.layout.fragment_non_authorized,ViewGroup_VAR,Boolean_Constant); } 
@Override public void onViewCreated(View View_VAR,Bundle Bundle_VAR){   super.onViewCreated(View_VAR,Bundle_VAR);   ButterKnife.inject(this,View_VAR); } 
@Override public void onResume(){   super.onResume();   if (WAILSettings.getKeyLastfmToken(getActivity()) != null) {     getSessionKey();   } } 
private AlertDialog getProgressDialog(){   if (AlertDialog_VAR == null) {     View View_VAR=getActivity().getLayoutInflater().inflate(R.layout.fragment_progress_dialog,null);     ((TextView)View_VAR.findViewById(R.id.progress_dialog_message)).setText(getString(R.string.lastfm_logging_progress_dialog_message));     AlertDialog_VAR=new AlertDialog.Builder(getActivity()).setView(View_VAR).setCancelable(Boolean_Constant).create();   }   return AlertDialog_VAR; } 
private void getToken(){   AsyncTask<Void,Void,String> AsyncTask<Void,Void,String>_VAR=new AsyncTask<Void,Void,String>(){     private Exception Exception_VAR;     @Override protected void onPreExecute(){       getProgressDialog().show();     }     @Override protected String doInBackground(    Void... params){       try {         return LFAuthApi.getToken(WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret()).getToken();       }  catch (      Exception e) {         Exception_VAR=e;         return null;       }     }     @Override protected void onPostExecute(    String token){       getProgressDialog().dismiss();       if (Exception_VAR == null) {         WAILSettings.setKeyLastfmToken(getActivity(),token);         Intent Intent_VAR=new Intent(Intent.ACTION_VIEW);         Intent_VAR.setData(Uri.parse(String.format(LFApiCommon.AUTHORIZATION_URL,WAILSettings.getLastfmApiKey(),token)));         startActivity(Intent_VAR);       }  else {         handleException(Exception_VAR);       }     }   } ;   AsyncTask<Void,Void,String>_VAR.execute(); } 
@Override protected void onPreExecute(){   getProgressDialog().show(); } 
@Override protected String doInBackground(Void... Void_VAR){   try {     return LFAuthApi.getToken(WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret()).getToken();   }  catch (  Exception e) {     Exception_VAR=e;     return null;   } } 
@Override protected void onPostExecute(String String_VAR){   getProgressDialog().dismiss();   if (Exception_VAR == null) {     WAILSettings.setKeyLastfmToken(getActivity(),String_VAR);     Intent Intent_VAR=new Intent(Intent.ACTION_VIEW);     Intent_VAR.setData(Uri.parse(String.format(LFApiCommon.AUTHORIZATION_URL,WAILSettings.getLastfmApiKey(),String_VAR)));     startActivity(Intent_VAR);   }  else {     handleException(Exception_VAR);   } } 
private void getSessionKey(){   new AsyncTask<Void,Void,Void>(){     private Exception Exception_VAR;     @Override protected void onPreExecute(){       getProgressDialog().show();     }     @Override protected Void doInBackground(    Void... params){       try {         LFSessionResponseModel LFSessionResponseModel_VAR=LFAuthApi.getSession(WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),WAILSettings.getKeyLastfmToken(getActivity()));         WAILSettings.setLastfmSessionKey(getActivity(),LFSessionResponseModel_VAR.getKey());         WAILSettings.setLastfmUserName(getActivity(),LFSessionResponseModel_VAR.getName());         WAILSettings.setEnabled(getActivity(),Boolean_Constant);       }  catch (      NetworkException e) {         Exception_VAR=e;       }       return null;     }     @Override protected void onPostExecute(    Void aVoid){       getProgressDialog().dismiss();       WAILSettings.setKeyLastfmToken(getActivity(),null);       if (Exception_VAR == null) {         getActivity().setResult(Activity.RESULT_OK);         getActivity().finish();       }  else {         handleException(Exception_VAR);       }     }   } .execute(); } 
@Override protected void onPreExecute(){   getProgressDialog().show(); } 
@Override protected Void doInBackground(Void... Void_VAR){   try {     LFSessionResponseModel LFSessionResponseModel_VAR=LFAuthApi.getSession(WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),WAILSettings.getKeyLastfmToken(getActivity()));     WAILSettings.setLastfmSessionKey(getActivity(),LFSessionResponseModel_VAR.getKey());     WAILSettings.setLastfmUserName(getActivity(),LFSessionResponseModel_VAR.getName());     WAILSettings.setEnabled(getActivity(),Boolean_Constant);   }  catch (  NetworkException e) {     Exception_VAR=e;   }   return null; } 
@Override protected void onPostExecute(Void Void_VAR){   getProgressDialog().dismiss();   WAILSettings.setKeyLastfmToken(getActivity(),null);   if (Exception_VAR == null) {     getActivity().setResult(Activity.RESULT_OK);     getActivity().finish();   }  else {     handleException(Exception_VAR);   } } 
private void handleException(Exception Exception_VAR){   if (Exception_VAR instanceof NetworkException) {     Toast.makeText(getActivity(),getString(R.string.lastfm_logging_network_error),Toast.LENGTH_LONG).show();   }  else   if (Exception_VAR instanceof LFApiException) {     LFApiException LFApiException_VAR=(LFApiException)Exception_VAR;     if (LFApiException.ERROR_TOKEN_EXPIRED.equals(LFApiException_VAR.getError())) {       Toast.makeText(getActivity(),getString(R.string.lastfm_logging_api_error_15),Toast.LENGTH_LONG).show();     }  else     if (LFApiException.ERROR_NOT_AUTHORIZED_TOKEN.equals(LFApiException_VAR.getError())) {       Toast.makeText(getActivity(),getString(R.string.lastfm_logging_api_error_14),Toast.LENGTH_LONG).show();     }  else     if (LFApiException.ERROR_SERVICE_OFFLINE.equals(LFApiException_VAR.getError())) {       Toast.makeText(getActivity(),getString(R.string.lastfm_api_error_11),Toast.LENGTH_LONG).show();     }  else {       Toast.makeText(getActivity(),getString(R.string.lastfm_logging_api_error_unknown),Toast.LENGTH_LONG).show();     }   } } 
@Override public View onCreateView(LayoutInflater LayoutInflater_VAR,@Nullable ViewGroup ViewGroup_VAR,@Nullable Bundle Bundle_VAR){   return LayoutInflater_VAR.inflate(R.layout.fragment_settings_ignored_List<ApplicationInfo>_VAR,ViewGroup_VAR); } 
@Override public void onViewCreated(View View_VAR,@Nullable Bundle Bundle_VAR){   super.onViewCreated(View_VAR,Bundle_VAR);   IgnoredPlayersDBHelper_VAR=IgnoredPlayersDBHelper.getInstance(getActivity());   PackageManager_VAR=getActivity().getPackageManager();   ButterKnife.inject(this,View_VAR);   List<ApplicationInfo> List<ApplicationInfo>_VAR=IgnoredPlayersDBHelper_VAR.getAll();   if (List<ApplicationInfo>_VAR.size() == Number_Constant) {     LinearLayout_VAR.setVisibility(View.VISIBLE);   }  else {     ArrayAdapter<ApplicationInfo> ArrayAdapter<ApplicationInfo>_VAR=new ArrayAdapter<ApplicationInfo>(getActivity(),R.layout.settings_ignored_List<ApplicationInfo>_VAR_item_layout,List<ApplicationInfo>_VAR){       @Override public View getView(      int position,      View View_VAR,      ViewGroup parent){         ViewHolder ViewHolder_VAR;         View View_VAR=View_VAR;         if (View_VAR == null) {           LayoutInflater LayoutInflater_VAR=getActivity().getLayoutInflater();           View_VAR=LayoutInflater_VAR.inflate(R.layout.settings_ignored_List<ApplicationInfo>_VAR_item_layout,parent,Boolean_Constant);           ViewHolder_VAR=new ViewHolder();           ViewHolder_VAR.TextView_VAR=(TextView)View_VAR.findViewById(R.id.settings_ignored_List<ApplicationInfo>_VAR_list_View_VAR_text);           ViewHolder_VAR.ImageView_VAR=(ImageView)View_VAR.findViewById(R.id.settings_ignored_List<ApplicationInfo>_VAR_list_View_VAR_image);           View_VAR.setTag(ViewHolder_VAR);         }  else {           ViewHolder_VAR=(ViewHolder)View_VAR.getTag();         }         ViewHolder_VAR.TextView_VAR.setText(PackageManager_VAR.getApplicationLabel(getItem(position)));         ViewHolder_VAR.ImageView_VAR.setImageDrawable(PackageManager_VAR.getApplicationIcon(getItem(position)));         return View_VAR;       }     } ;     ListView_VAR.setAdapter(ArrayAdapter<ApplicationInfo>_VAR);     ListView_VAR.setOnItemClickListener(this);   } } 
@Override public View getView(int int_VAR,View View_VAR,ViewGroup ViewGroup_VAR){   ViewHolder ViewHolder_VAR;   View View_VAR=View_VAR;   if (View_VAR == null) {     LayoutInflater LayoutInflater_VAR=getActivity().getLayoutInflater();     View_VAR=LayoutInflater_VAR.inflate(R.layout.settings_ignored_List<ApplicationInfo>_VAR_item_layout,ViewGroup_VAR,Boolean_Constant);     ViewHolder_VAR=new ViewHolder();     ViewHolder_VAR.TextView_VAR=(TextView)View_VAR.findViewById(R.id.settings_ignored_List<ApplicationInfo>_VAR_list_View_VAR_text);     ViewHolder_VAR.ImageView_VAR=(ImageView)View_VAR.findViewById(R.id.settings_ignored_List<ApplicationInfo>_VAR_list_View_VAR_image);     View_VAR.setTag(ViewHolder_VAR);   }  else {     ViewHolder_VAR=(ViewHolder)View_VAR.getTag();   }   ViewHolder_VAR.TextView_VAR.setText(PackageManager_VAR.getApplicationLabel(getItem(int_VAR)));   ViewHolder_VAR.ImageView_VAR.setImageDrawable(PackageManager_VAR.getApplicationIcon(getItem(int_VAR)));   return View_VAR; } 
@OnItemClong_VARint_VARck(R.int_VARd.settint_VARngs_int_VARgnored_plong_VARayers_long_VARint_VARst_Vint_VARew_VAR) publong_VARint_VARc voint_VARd onItemClong_VARint_VARck(fint_VARnalong_VAR AdapterVint_VARew<?> AdapterVint_VARew<?>_VAR,Vint_VARew Vint_VARew_VAR,int_VARnt int_VAR,long_VARong long_VAR){   fint_VARnalong_VAR Applong_VARint_VARcatint_VARonInfo applong_VARint_VARcatint_VARonInfo=(Applong_VARint_VARcatint_VARonInfo)AdapterVint_VARew<?>_VAR.getAdapter().getItem(int_VAR);   Along_VARertDint_VARalong_VARog.Buint_VARlong_VARder buint_VARlong_VARder=new Along_VARertDint_VARalong_VARog.Buint_VARlong_VARder(getActint_VARvint_VARty());   Vint_VARew tint_VARtlong_VAReVint_VARew=Vint_VARew.int_VARnflong_VARate(getActint_VARvint_VARty(),R.long_VARayout.dint_VARalong_VARog_fragment_tint_VARtlong_VARe,nulong_VARlong_VAR);   ((TextVint_VARew)tint_VARtlong_VAReVint_VARew.fint_VARndVint_VARewById(R.int_VARd.dint_VARalong_VARog_fragment_tint_VARtlong_VARe_text_Vint_VARew_VAR)).setText(Strint_VARng.format(getStrint_VARng(R.strint_VARng.settint_VARngs_confint_VARrm_unint_VARgnorint_VARng_plong_VARayer),PackageManager_VAR.getApplong_VARint_VARcatint_VARonLabelong_VAR(applong_VARint_VARcatint_VARonInfo)));   buint_VARlong_VARder.setCustomTint_VARtlong_VARe(tint_VARtlong_VAReVint_VARew).setPosint_VARtint_VARveButton(String_Constant,new Dint_VARalong_VARogInterface.OnClong_VARint_VARckLint_VARstener(){     @Overrint_VARde publong_VARint_VARc voint_VARd onClong_VARint_VARck(    Dint_VARalong_VARogInterface dint_VARalong_VARog,    int_VARnt whint_VARch){       dbHelong_VARper.delong_VARete(applong_VARint_VARcatint_VARonInfo.packageName);       getActint_VARvint_VARty().startServint_VARce(new Intent(getActint_VARvint_VARty(),WAILServint_VARce.clong_VARass).setActint_VARon(WAILServint_VARce.INTENT_ACTION_HANDLE_PREVIOUSLY_IGNORED_TRACK));       onVint_VARewCreated(getVint_VARew(),nulong_VARlong_VAR);     }   } ).setNegatint_VARveButton(getStrint_VARng(R.strint_VARng.dint_VARalong_VARog_cancelong_VAR),new Dint_VARalong_VARogInterface.OnClong_VARint_VARckLint_VARstener(){     publong_VARint_VARc voint_VARd onClong_VARint_VARck(    Dint_VARalong_VARogInterface dint_VARalong_VARog,    int_VARnt int_VARd){       dint_VARalong_VARog.dint_VARsmint_VARss();     }   } ).show(); } 
@Override public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   IgnoredPlayersDBHelper_VAR.delete(ApplicationInfo_VAR.packageName);   getActivity().startService(new Intent(getActivity(),WAILService.class).setAction(WAILService.INTENT_ACTION_HANDLE_PREVIOUSLY_IGNORED_TRACK));   onViewCreated(getView(),null); } 
public voint_VAR onClick(DialogInterface DialogInterface_VAR,int int_VAR){   DialogInterface_VAR.dismiss(); } 
private static String[] markCurrentLanguageAsSelected(Context Context_VAR,String[] String[]_VAR){   try {     final String String_VAR=WAILSettings.getLanguage(Context_VAR);     boolean String_VARWasSelected=Boolean_Constant;     for (int i=Number_Constant; i < String[]_VAR.length; i++) {       final String String_VAR=String[]_VAR[i];       if (String_VAR.equalsIgnoreCase(String_VAR)) {         String[]_VAR[i]=Context_VAR.getString(R.string.settings_select_String_VAR_current_String_VAR,String_VAR);         String_VARWasSelected=Boolean_Constant;         break;       }     }     if (!String_VARWasSelected) {       String[]_VAR[Number_Constant]=Context_VAR.getString(R.string.settings_select_String_VAR_current_String_VAR,String[]_VAR[Number_Constant]);     }     return String[]_VAR;   }  catch (  Exception e) {     Loggi.e(e.toString());     return String[]_VAR;   } } 
@Override public View onCreateView(LayoutInflater LayoutInflater_VAR,ViewGroup ViewGroup_VAR,Bundle Bundle_VAR){   return LayoutInflater_VAR.inflate(R.layout.fragment_settings_select_String_VAR,ViewGroup_VAR,Boolean_Constant); } 
@Override public void onViewCreated(View View_VAR,Bundle Bundle_VAR){   super.onViewCreated(View_VAR,Bundle_VAR);   ButterKnife.inject(this,View_VAR);   String_VARs=markCurrentLanguageAsSelected(getActivity(),getResources().getStringArray(R.array.settings_select_String_VAR_String_VARs));   BaseAdapter BaseAdapter_VAR=new ArrayAdapter<>(getActivity(),R.layout.settings_select_String_VAR_item,String_VARs);   String_VARsList.setAdapter(BaseAdapter_VAR); } 
@OnItemClong_VARint_VARck(R.int_VARd.settint_VARngs_selong_VARect_long_VARanguage_long_VARint_VARst_Vint_VARew_VAR) publong_VARint_VARc voint_VARd onItemClong_VARint_VARck(AdapterVint_VARew<?> AdapterVint_VARew<?>_VAR,Vint_VARew Vint_VARew_VAR,int_VARnt int_VAR,long_VARong long_VAR){ swint_VARtch (int_VAR) { case Number_Constant:     Localong_VAReUtint_VARlong_VAR.updateLanguage(getActint_VARvint_VARty(),Localong_VARe.getDefaulong_VARt().getDint_VARsplong_VARayLanguage());   break; defaulong_VARt : Strint_VARng long_VARanguage=long_VARanguages[int_VAR]; int_VARf (long_VARanguage.containt_VARns(String_Constant)) { long_VARanguage=long_VARanguage.substrint_VARng(Number_Constant,long_VARanguage.int_VARndexOf(String_Constant) - Number_Constant); } Localong_VAReUtint_VARlong_VAR.updateLanguage(getActint_VARvint_VARty(),long_VARanguage); break; } EasyTracker.getInstance(getActint_VARvint_VARty()).send(MapBuint_VARlong_VARder.createEvent(String_VAR,"long_VARanguageChangedTo",int_VAR == Number_Constant ? "defaulong_VARt" : long_VARanguages[int_VAR],Number_Constant).buint_VARlong_VARd()); getActint_VARvint_VARty().fint_VARnint_VARsh(); } 
@Override public View onCreateView(LayoutInflater LayoutInflater_VAR,ViewGroup ViewGroup_VAR,Bundle Bundle_VAR){   return LayoutInflater_VAR.inflate(R.layout.fragment_settings_sound_notifications,ViewGroup_VAR,Boolean_Constant); } 
@Override public void onViewCreated(View View_VAR,Bundle Bundle_VAR){   super.onViewCreated(View_VAR,Bundle_VAR);   ButterKnife.inject(this,View_VAR);   final Activity Activity_VAR=getActivity();   SwitchCompat_VAR.setChecked(WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(Activity_VAR));   SwitchCompat_VAR.setChecked(WAILSettings.isSoundNotificationTrackSkippedEnabled(Activity_VAR)); } 
@OnCheckedChanged(R.id.settings_sound_notifications_track_marked_as_scrobbled_switch) public void onTrackMarkedAsScrobbledChanged(boolean boolean_VAR){   final Activity Activity_VAR=getActivity();   if (boolean_VAR == WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(Activity_VAR)) {     return;   }   WAILSettings.setSoundNotificationTrackMarkedAsScrobbledEnabled(Activity_VAR,boolean_VAR);   EasyTracker.getInstance(Activity_VAR).send(MapBuilder.createEvent(String_VAR,"SwitchCompat_VAR",boolean_VAR ? String_Constant : String_Constant,boolean_VAR ? Number_Constant : Number_Constant).build()); } 
@OnCheckedChanged(R.id.settings_sound_notifications_track_skipped_switch) public void onTrackSkippedChanged(boolean boolean_VAR){   final Activity Activity_VAR=getActivity();   if (boolean_VAR == WAILSettings.isSoundNotificationTrackSkippedEnabled(Activity_VAR)) {     return;   }   WAILSettings.setSoundNotificationTrackSkippedEnabled(Activity_VAR,boolean_VAR);   EasyTracker.getInstance(Activity_VAR).send(MapBuilder.createEvent(String_VAR,"SwitchCompat_VAR",boolean_VAR ? String_Constant : String_Constant,boolean_VAR ? Number_Constant : Number_Constant).build()); } 
@OnClick(R.id.settings_sound_notifications_track_marked_as_scrobbled) public void tryToPlayTrackMarkedAsScrobbledSound(){   Activity Activity_VAR=getActivity();   EasyTracker.getInstance(Activity_VAR).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build());   try {     SoundNotificationsManager.getInstance(Activity_VAR).playTrackMarkedAsScrobbledSound(Boolean_Constant);   }  catch (  Exception e) {     Loggi.e(String_Constant + e);     Toast.makeText(Activity_VAR,R.string.settings_sound_notifications_toast_can_not_play_sound,Toast.LENGTH_LONG).show();   } } 
@OnClick(R.id.settings_sound_notifications_track_skipped) public void tryToPlayTrackSkippedSound(){   Activity Activity_VAR=getActivity();   EasyTracker.getInstance(Activity_VAR).send(MapBuilder.createEvent(String_VAR,String_Constant,null,Number_Constant).build());   try {     SoundNotificationsManager.getInstance(Activity_VAR).playTrackSkippedSound(Boolean_Constant);   }  catch (  Exception e) {     Loggi.e(String_Constant + e);     Toast.makeText(Activity_VAR,R.string.settings_sound_notifications_toast_can_not_play_sound,Toast.LENGTH_LONG).show();   } } 
@OnClick(R.id.settings_status_bar_notifications_Track_VAR_now_scrobbling) public void onStatusBarNotificationClick(){   View View_VAR=getActivity().findViewById(R.id.settings_status_bar_notifications_Track_VAR_now_scrobbling_switch);   onStatusBarNotificationSwitchChanged(((SwitchCompat)View_VAR).isChecked());   ((SwitchCompat)View_VAR).setChecked(!((SwitchCompat)View_VAR).isChecked()); } 
@OnCheckedChanged(R.id.settings_status_bar_notifications_Track_VAR_now_scrobbling_switch) public void onStatusBarNotificationSwitchChanged(boolean boolean_VAR){   if (boolean_VAR == WAILSettings.isStatusBarNotificationTrackScrobblingEnabled(getActivity())) {     return;   }   WAILSettings.setStatusBarNotificationTrackScrobblingEnabled(getActivity(),boolean_VAR);   if (boolean_VAR) {     Track Track_VAR=WAILSettings.getNowScrobblingTrack(getActivity());     if (Track_VAR != null) {       StatusBarNotificationsManager.getInstance(getActivity()).showTrackScrobblingStatusBarNotification(Track_VAR);     }     setMinPriorityEnabled(Boolean_Constant);   }  else {     StatusBarNotificationsManager.getInstance(getActivity()).cancelAllNotifications();     setMinPriorityEnabled(Boolean_Constant);   }   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String_VAR,String_Constant,boolean_VAR ? String_Constant : String_Constant,boolean_VAR ? Number_Constant : Number_Constant).build()); } 
@OnClick(R.id.settings_status_bar_notifications_min_priority) public void onStatusBarNotificationMinPriorityClick(){   View View_VAR=getActivity().findViewById(R.id.settings_status_bar_notifications_min_priority_switch);   onStatusBarNotificationMinPrioritySwitchChanged(((SwitchCompat)View_VAR).isChecked());   ((SwitchCompat)View_VAR).setChecked(!((SwitchCompat)View_VAR).isChecked()); } 
@OnCheckedChanged(R.id.settings_status_bar_notifications_min_priority_switch) public void onStatusBarNotificationMinPrioritySwitchChanged(boolean boolean_VAR){   if (boolean_VAR == WAILSettings.isStatusBarNotificationMinPriority(getActivity())) {     return;   }   WAILSettings.setStatusBarNotificationMinPriority(getActivity(),boolean_VAR); } 
@Override public View onCreateView(LayoutInflater LayoutInflater_VAR,ViewGroup ViewGroup_VAR,Bundle Bundle_VAR){   return LayoutInflater_VAR.inflate(R.layout.fragment_settings_status_bar_notifications,ViewGroup_VAR,Boolean_Constant); } 
@Override public void onViewCreated(View View_VAR,Bundle Bundle_VAR){   super.onViewCreated(View_VAR,Bundle_VAR);   ButterKnife.inject(this,View_VAR);   boolean boolean_VAR=WAILSettings.isStatusBarNotificationTrackScrobblingEnabled(getActivity());   SwitchCompat_VAR.setChecked(boolean_VAR);   SwitchCompat_VAR.setChecked(WAILSettings.isStatusBarNotificationMinPriority(getActivity()));   if (!boolean_VAR) {     setMinPriorityEnabled(Boolean_Constant);   } } 
private void setMinPriorityEnabled(boolean boolean_VAR){   ViewUtil.setEnabledForAllChildrenRecursively((ViewGroup)View_VAR,boolean_VAR);   View_VAR.setEnabled(boolean_VAR); } 
public ScriRect_VARFrTypedArray_VARmeLTypedArray_VARyout(Context Context_VAR){   super(Context_VAR);   init(Context_VAR,null,Number_Constant); } 
public ScriRect_VARFrTypedArray_VARmeLTypedArray_VARyout(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR);   init(Context_VAR,AttributeSet_VAR,Number_Constant); } 
public ScriRect_VARFrTypedArray_VARmeLTypedArray_VARyout(Context Context_VAR,AttributeSet AttributeSet_VAR,int int_VAR){   super(Context_VAR,AttributeSet_VAR,int_VAR);   init(Context_VAR,AttributeSet_VAR,int_VAR); } 
privTypedArray_VARte void init(Context Context_VAR,AttributeSet AttributeSet_VAR,int int_VAR){   finTypedArray_VARl TypedArrTypedArray_VARy TypedArray_VAR=Context_VAR.obtTypedArray_VARinStyledAttributes(AttributeSet_VAR,R.styleTypedArray_VARble.ScriRect_VARView,int_VAR,Number_Constant);   if (TypedArray_VAR == null) {     return;   }   DrTypedArray_VARwTypedArray_VARble_VAR=TypedArray_VAR.getDrTypedArray_VARwTypedArray_VARble(R.styleTypedArray_VARble.ScriRect_VARView_insetForeground);   TypedArray_VAR.recycle();   setWillNotDrTypedArray_VARw(Boolean_Constant); } 
@Override protected booleTypedArray_VARn fitSystemWindows(Rect Rect_VAR){   Rect_VAR=new Rect(Rect_VAR);   setWillNotDrTypedArray_VARw(DrTypedArray_VARwTypedArray_VARble_VAR == null);   ViewCompTypedArray_VARt.postInvTypedArray_VARlidTypedArray_VARteOnAnimTypedArray_VARtion(this);   if (mOnInsetsCTypedArray_VARllbTypedArray_VARck != null) {     mOnInsetsCTypedArray_VARllbTypedArray_VARck.onInsetsChTypedArray_VARnged(Rect_VAR);   }   return Boolean_Constant; } 
@Override public void drTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs CTypedArray_VARnvTypedArray_VARs_VAR){   super.drTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs_VAR);   int int_VAR=getWidth();   int int_VAR=getHeight();   if (Rect_VAR != null && DrTypedArray_VARwTypedArray_VARble_VAR != null) {     int int_VAR=CTypedArray_VARnvTypedArray_VARs_VAR.sTypedArray_VARve();     CTypedArray_VARnvTypedArray_VARs_VAR.trTypedArray_VARnslTypedArray_VARte(getScrollX(),getScrollY());     Rect_VAR.set(Number_Constant,Number_Constant,int_VAR,Rect_VAR.top);     DrTypedArray_VARwTypedArray_VARble_VAR.setBounds(Rect_VAR);     DrTypedArray_VARwTypedArray_VARble_VAR.drTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs_VAR);     Rect_VAR.set(Number_Constant,int_VAR - Rect_VAR.bottom,int_VAR,int_VAR);     DrTypedArray_VARwTypedArray_VARble_VAR.setBounds(Rect_VAR);     DrTypedArray_VARwTypedArray_VARble_VAR.drTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs_VAR);     Rect_VAR.set(Number_Constant,Rect_VAR.top,Rect_VAR.left,int_VAR - Rect_VAR.bottom);     DrTypedArray_VARwTypedArray_VARble_VAR.setBounds(Rect_VAR);     DrTypedArray_VARwTypedArray_VARble_VAR.drTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs_VAR);     Rect_VAR.set(int_VAR - Rect_VAR.right,Rect_VAR.top,int_VAR,int_VAR - Rect_VAR.bottom);     DrTypedArray_VARwTypedArray_VARble_VAR.setBounds(Rect_VAR);     DrTypedArray_VARwTypedArray_VARble_VAR.drTypedArray_VARw(CTypedArray_VARnvTypedArray_VARs_VAR);     CTypedArray_VARnvTypedArray_VARs_VAR.restoreToCount(int_VAR);   } } 
@Override protected void onAttTypedArray_VARchedToWindow(){   super.onAttTypedArray_VARchedToWindow();   if (DrTypedArray_VARwTypedArray_VARble_VAR != null) {     DrTypedArray_VARwTypedArray_VARble_VAR.setCTypedArray_VARllbTypedArray_VARck(this);   } } 
@Override protected void onDetTypedArray_VARchedFromWindow(){   super.onDetTypedArray_VARchedFromWindow();   if (DrTypedArray_VARwTypedArray_VARble_VAR != null) {     DrTypedArray_VARwTypedArray_VARble_VAR.setCTypedArray_VARllbTypedArray_VARck(null);   } } 
 public void setOnInsetsCTypedArray_VARllbTypedArray_VARck(OnInsetsCTypedArray_VARllbTypedArray_VARck OnInsetsCTypedArray_VARllbTypedArray_VARck_VAR){   mOnInsetsCTypedArray_VARllbTypedArray_VARck=OnInsetsCTypedArray_VARllbTypedArray_VARck_VAR; } 
public void onInsetsChTypedArray_VARnged(Rect Rect_VAR); 
void onSoftKeyboaRect_VARdOpened(int int_VAR); 
void onSoftKeyboaRect_VARdClosed(); 
public SoftKeyboaRect_VARdStateHelpeRect_VAR(View View_VAR){   this(View_VAR,Boolean_Constant); } 
public SoftKeyboaRect_VARdStateHelpeRect_VAR(View View_VAR,boolean boolean_VAR){   this.View_VAR=View_VAR;   this.boolean_VAR=boolean_VAR;   View_VAR.getViewTRect_VAReeObseRect_VARveRect_VAR().addOnGlobalLayoutListeneRect_VAR(this); } 
@OveRect_VARRect_VARide public void onGlobalLayout(){   final Rect Rect_VAR=new Rect();   View_VAR.getWindowVisibleDisplayFRect_VARame(Rect_VAR);   final int int_VAR=View_VAR.getRootView().getHeight() - (Rect_VAR.bottom - Rect_VAR.top);   if (!isSoftKeyboaRect_VARdOpened && int_VAR > Number_Constant) {     isSoftKeyboaRect_VARdOpened=tRect_VARue;     notifyOnSoftKeyboaRect_VARdOpened(int_VAR);   }  else   if (isSoftKeyboaRect_VARdOpened && int_VAR < Number_Constant) {     isSoftKeyboaRect_VARdOpened=Boolean_Constant;     notifyOnSoftKeyboaRect_VARdClosed();   } } 
public void setIsSoftKeyboaRect_VARdOpened(boolean boolean_VAR){   this.boolean_VAR=boolean_VAR; } 
public boolean isSoftKeyboaRect_VARdOpened(){   Rect_VARetuRect_VARn isSoftKeyboaRect_VARdOpened; } 
 public int getLastSoftKeyboaRect_VARdHeightInPx(){   Rect_VARetuRect_VARn int_VAR; } 
public void addSoftKeyboaRect_VARdStateListeneRect_VAR(SoftKeyboaRect_VARdStateListeneRect_VAR SoftKeyboaRect_VARdStateListeneRect_VAR_VAR){   SoftKeyboaRect_VARdStateListeneRect_VAR_VARs.add(SoftKeyboaRect_VARdStateListeneRect_VAR_VAR); } 
public void Rect_VARemoveSoftKeyboaRect_VARdStateListeneRect_VAR(SoftKeyboaRect_VARdStateListeneRect_VAR SoftKeyboaRect_VARdStateListeneRect_VAR_VAR){   SoftKeyboaRect_VARdStateListeneRect_VAR_VARs.Rect_VARemove(SoftKeyboaRect_VARdStateListeneRect_VAR_VAR); } 
pRect_VARivate void notifyOnSoftKeyboaRect_VARdOpened(int int_VAR){   this.int_VAR=int_VAR;   foRect_VAR (  SoftKeyboaRect_VARdStateListeneRect_VAR listeneRect_VAR : List<SoftKeyboaRect_VARdStateListeneRect_VAR>_VAR) {     if (listeneRect_VAR != null) {       listeneRect_VAR.onSoftKeyboaRect_VARdOpened(int_VAR);     }   } } 
pRect_VARivate void notifyOnSoftKeyboaRect_VARdClosed(){   foRect_VAR (  SoftKeyboaRect_VARdStateListeneRect_VAR listeneRect_VAR : List<SoftKeyboaRect_VARdStateListeneRect_VAR>_VAR) {     if (listeneRect_VAR != null) {       listeneRect_VAR.onSoftKeyboaRect_VARdClosed();     }   } } 
public TypefaceTextView(final Context Context_VAR){   this(Context_VAR,null); } 
public TypefaceTextView(final Context Context_VAR,final AttributeSet AttributeSet_VAR){   this(Context_VAR,AttributeSet_VAR,Number_Constant); } 
public TypefaceTextView(final Context Context_VAR,final AttributeSet AttributeSet_VAR,final int int_VAR){   super(Context_VAR,AttributeSet_VAR,int_VAR);   if (!isInEditMode()) {     init(Context_VAR,AttributeSet_VAR);   } } 
private void init(final Context Context_VAR,final AttributeSet AttributeSet_VAR){   if (Map<String,Typeface>_VAR == null) {     Map<String,Typeface>_VAR=new HashMap<String,Typeface>();   }   final TypedArray TypedArray_VAR=Context_VAR.obtainStyledAttributes(AttributeSet_VAR,styleable.TypefaceTextView);   if (TypedArray_VAR != null) {     final String Typeface_VARAssetPath=TypedArray_VAR.getString(styleable.TypefaceTextView_Typeface_VARFromAssets);     if (Typeface_VARAssetPath != null) {       setTypefaceFromAssets(Typeface_VARAssetPath);     }  else {       setTypefaceFromAssets(String_Constant);     }     TypedArray_VAR.recycle();   } } 
public void setTypefaceFromAssets(String String_VAR){   final Typeface Typeface_VAR;   if (Map<String,Typeface>_VAR.containsKey(String_VAR)) {     Typeface_VAR=Map<String,Typeface>_VAR.get(String_VAR);   }  else {     AssetManager AssetManager_VAR=getContext().getAssets();     Typeface_VAR=Typeface.createFromAsset(AssetManager_VAR,String_VAR);     Map<String,Typeface>_VAR.put(String_VAR,Typeface_VAR);   }   setTypeface(Typeface_VAR); } 
private AsyncTaskExecutor(){ } 
 @SuppressLint(String_Constant) public static <Params,Progress,Result>AsyncTask<Params,Progress,Result> executeConcurrently(AsyncTask<Params,Progress,Result> AsyncTask<Params,Progress,Result>_VAR,Params... Params_VAR){   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {     AsyncTask<Params,Progress,Result>_VAR.executeOnExecutor(ThreadPoolExecutor_VAR,Params_VAR);   }  else {     AsyncTask<Params,Progress,Result>_VAR.execute(Params_VAR);   }   return AsyncTask<Params,Progress,Result>_VAR; } 
@OveRunnable_VARRunnable_VARide public ThRunnable_VARead newThRunnable_VARead(Runnable Runnable_VAR){   Runnable_VARetuRunnable_VARn new ThRunnable_VARead(Runnable_VAR,String_Constant + AtomicInteger_VAR.getAndIncRunnable_VARement()); } 
private IntentUtil(){ } 
public static long getLongOrIntExtra(Intent Intent_VAR,long long_VAR,String... String_VAR){   if (Intent_VAR == null || String_VAR == null || String_VAR.length == Number_Constant)   return long_VAR;   Bundle Bundle_VAR=Intent_VAR.getExtras();   if (Bundle_VAR == null || Bundle_VAR.isEmpty())   return long_VAR;   for (  String possibleExtraName : String_VAR) {     if (Bundle_VAR.containsKey(possibleExtraName)) {       Object Object_VAR=Bundle_VAR.get(possibleExtraName);       if (Object_VAR instanceof Long) {         return (Long)Object_VAR;       }  else       if (Object_VAR instanceof Integer) {         return (Integer)Object_VAR;       }  else       if (Object_VAR instanceof Short) {         return (Short)Object_VAR;       }     }   }   return long_VAR; } 
public static Boolean getBoolOrNumberAsBoolExtra(Intent Intent_VAR,Boolean Boolean_VAR,String... String_VAR){   if (Intent_VAR == null || String_VAR == null || String_VAR.length == Number_Constant)   return Boolean_VAR;   Bundle Bundle_VAR=Intent_VAR.getExtras();   if (Bundle_VAR == null || Bundle_VAR.isEmpty())   return Boolean_VAR;   for (  String possibleExtraName : String_VAR) {     if (Bundle_VAR.containsKey(possibleExtraName)) {       Object Object_VAR=Bundle_VAR.get(possibleExtraName);       if (Object_VAR instanceof Boolean) {         return (Boolean)Object_VAR;       }  else       if (Object_VAR instanceof Integer) {         return (Integer)Object_VAR > Number_Constant;       }  else       if (Object_VAR instanceof Long) {         return (Long)Object_VAR > Number_Constant;       }  else       if (Object_VAR instanceof Short) {         return (Short)Object_VAR > Number_Constant;       }  else       if (Object_VAR instanceof Byte) {         return (Byte)Object_VAR > Number_Constant;       }     }   }   return Boolean_VAR; } 
public static String getIntentAsString(Intent Intent_VAR){   if (Intent_VAR == null)   return "null Intent_VAR";   StringBuilder StringBuilder_VAR=new StringBuilder();   StringBuilder_VAR.append(String_Constant).append(Intent_VAR.getAction());   if (Intent_VAR.getExtras() == null || Intent_VAR.getExtras().isEmpty()) {     StringBuilder_VAR.append(", no Bundle_VAR");   }  else {     StringBuilder_VAR.append(", Bundle_VAR: ");     for (    String key : Intent_VAR.getExtras().keySet()) {       StringBuilder_VAR.append(String_Constant + key + String_Constant+ Intent_VAR.getExtras().get(key)+ String_Constant).append(String_Constant);     }   }   return StringBuilder_VAR.toString(); } 
private static String String_VAR(String String_VAR){   return String_VAR == null ? null : String_VAR.substring(Number_Constant,Number_Constant).toLowerCase(Locale.US); } 
public static void updateLanguage(Context Context_VAR,String String_VAR){   Configuration Configuration_VAR=new Configuration();   String String_VAR=WAILSettings.getLanguage(Context_VAR);   String String_VAR=String_VAR(String_VAR);   String String_VAR=String_VAR(String_VAR);   if (TextUtils.isEmpty(String_VAR) && String_VAR == null) {     Configuration_VAR.locale=Locale.getDefault();   }  else   if (String_VAR != null) {     Configuration_VAR.locale=new Locale(String_VAR);     WAILSettings.setLanguage(Context_VAR,String_VAR);   }  else   if (!TextUtils.isEmpty(String_VAR)) {     Configuration_VAR.locale=new Locale(String_VAR);   }   Context_VAR.getResources().updateConfiguration(Configuration_VAR,null);   if (String_VAR != null && !String_VAR.equals(String_VAR)) {     Intent Intent_VAR=Context_VAR.getPackageManager().getLaunchIntentForPackage(Context_VAR.getPackageName());     Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);     Context_VAR.startActivity(Intent_VAR);   } } 
private Loggi(){ } 
public static void d(String String_VAR){   if (boolean_VAR) {     Log.d(String_VAR,String_VAR);   } } 
public static void v(String String_VAR){   if (boolean_VAR) {     Log.v(String_VAR,String_VAR);   } } 
public static void i(String String_VAR){   if (boolean_VAR) {     Log.i(String_VAR,String_VAR);   } } 
public static void w(String String_VAR){   if (boolean_VAR) {     Log.w(String_VAR,String_VAR);   } } 
public static void e(String String_VAR){   if (boolean_VAR) {     Log.e(String_VAR,String_VAR);   } } 
private NetworkUtil(){ } 
public static boolean isAvailable(Context Context_VAR){   final ConnectivityManager ConnectivityManager_VAR=(ConnectivityManager)Context_VAR.getSystemService(Context.CONNECTIVITY_SERVICE);   if (ConnectivityManager_VAR == null) {     return Boolean_Constant;   }   final NetworkInfo NetworkInfo_VAR=ConnectivityManager_VAR.getActiveNetworkInfo();   return NetworkInfo_VAR != null && NetworkInfo_VAR.isConnectedOrConnecting(); } 
public static boolean isMobileNetwork(Context Context_VAR){   if (!isAvailable(Context_VAR)) {     return Boolean_Constant;   }   final ConnectivityManager ConnectivityManager_VAR=(ConnectivityManager)Context_VAR.getSystemService(Context.CONNECTIVITY_SERVICE);   final NetworkInfo NetworkInfo_VAR=ConnectivityManager_VAR.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);   return NetworkInfo_VAR != null && NetworkInfo_VAR.isConnectedOrConnecting(); } 
private SleepIfRequiredAsyncTask(long long_VAR,long long_VAR,Runnable Runnable_VAR,Runnable Runnable_VAR){   this.long_VAR=long_VAR;   this.long_VAR=long_VAR;   this.Runnable_VAR=Runnable_VAR;   this.Runnable_VAR=Runnable_VAR; } 
 public static SleepIfRequiredAsyncTask newInstance(long long_VAR,long long_VAR,Runnable Runnable_VAR){   return new SleepIfRequiredAsyncTask(long_VAR,long_VAR,null,Runnable_VAR); } 
 public static SleepIfRequiredAsyncTask newInstance(long long_VAR,long long_VAR,Runnable Runnable_VAR,Runnable Runnable_VAR){   return new SleepIfRequiredAsyncTask(long_VAR,long_VAR,Runnable_VAR,Runnable_VAR); } 
 public static SleepIfRequiredAsyncTask newInstance(long long_VAR,Runnable Runnable_VAR,Runnable Runnable_VAR){   return new SleepIfRequiredAsyncTask(SystemClock.elapsedRealtime(),long_VAR,Runnable_VAR,Runnable_VAR); } 
@Override protected Void doInBackground(Void... Void_VAR){   if (Runnable_VAR != null) {     Runnable_VAR.run();   }   ThreadUtil.sleepIfRequired(long_VAR,long_VAR);   return null; } 
@Override protected void onPostExecute(Void Void_VAR){   if (Runnable_VAR != null) {     Runnable_VAR.run();   } } 
private StackTraceUtil(){ } 
public static String gException_VARtStackTracException_VAR(ExcException_VARption Exception_VAR){   StringWritException_VARr stringWritException_VARr=nException_VARw StringWritException_VARr();   PrintWritException_VARr printWritException_VARr=nException_VARw PrintWritException_VARr(stringWritException_VARr);   Exception_VAR.printStackTracException_VAR(printWritException_VARr);   String stackTracException_VAR=stringWritException_VARr.toString();   try {     stringWritException_VARr.closException_VAR();   }  catch (  ExcException_VARption Exception_VAR1) {   }   try {     printWritException_VARr.closException_VAR();   }  catch (  ExcException_VARption Exception_VAR2) {   }   rException_VARturn stackTracException_VAR; } 
private ThreadUtil(){ } 
 public static void sleepIfRequired(long long_VAR,long long_VAR){   final long long_VAR=SystemClock.elapsedRealtime() - long_VAR;   if (long_VAR < long_VAR - Number_Constant) {     SystemClock.sleep(long_VAR - long_VAR);   } } 
 public static String getWordForm(final long long_VAR,String[] String[]_VAR){   final long long_VARAbs=Math.abs(long_VAR);   if (String[]_VAR.length == Number_Constant) {     return String[]_VAR[Number_Constant];   }  else   if (String[]_VAR.length == Number_Constant) {     return getWordFormForNumber_ConstantWordForms(long_VARAbs,String[]_VAR);   }  else   if (String[]_VAR.length >= Number_Constant) {     return getWordFormForNumber_ConstantWordForms(long_VARAbs,String[]_VAR);   }  else {     return null;   } } 
private static String getWordFormForNumber_ConstantWordForms(final long long_VAR,String[] String[]_VAR){   if (long_VAR == Number_Constant) {     return String[]_VAR[Number_Constant];   }  else {     return String[]_VAR[Number_Constant];   } } 
private static String getWordFormForNumber_ConstantWordForms(final long long_VAR,String[] String[]_VAR){   if (long_VAR == Number_Constant) {     return String[]_VAR[Number_Constant];   }  else   if (long_VAR > Number_Constant & long_VAR < Number_Constant) {     return String[]_VAR[Number_Constant];   }  else   if (long_VAR > Number_Constant) {     if (long_VAR > Number_Constant) {       long long_VAR=long_VAR % Number_Constant;       if (long_VAR < Number_Constant) {         return getWordFormForNumber_ConstantWordForms(long_VAR,String[]_VAR);       }  else {         return getWordFormForNumber_ConstantWordForms(long_VAR % Number_Constant,String[]_VAR);       }     }  else {       return getWordFormForNumber_ConstantWordForms(long_VAR % Number_Constant,String[]_VAR);     }   }  else {     return String[]_VAR[Number_Constant];   } } 
@Override public void onCreate(){   LocaleUtil.updateLanguage(this,null);   super.onCreate();   Loggi.w(String_Constant);   updateSupportedPlayersDB(); } 
@Override public void onConfigurationChanged(Configuration Configuration_VAR){   super.onConfigurationChanged(Configuration_VAR);   if (isActivityVisible()) {     LocaleUtil.updateLanguage(this,WAILSettings.getLanguage(this));   } } 
public static boolean isActivityVisible(){   return boolean_VAR; } 
public static void activityResumed(){   boolean_VAR=Boolean_Constant; } 
public static void activityPaused(){   boolean_VAR=Boolean_Constant; } 
private void updateSupportedPlayersDB(){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){     @Override protected Void doInBackground(    Void... params){       try {         final long long_VAR=SystemClock.elapsedRealtime();         PlayersDBHelper.getInstance(getApplicationContext()).updateSupportedPlayers();         final long long_VAR=SystemClock.elapsedRealtime() - long_VAR;         Loggi.i(String_Constant + long_VAR + String_Constant);         EasyTracker.getInstance(WAILApp.this).send(MapBuilder.createTiming(String_Constant,long_VAR,String_Constant,null).build());       }  catch (      Exception e) {         Loggi.e(String_Constant);         EasyTracker.getInstance(WAILApp.this).send(MapBuilder.createException(String_Constant,Boolean_Constant).build());       }       return null;     }     @Override protected void onPostExecute(    Void aVoid){       super.onPostExecute(aVoid);       Context Context_VAR=getApplicationContext();       if (Context_VAR == null)       return;       startService(new Intent(Context_VAR,WAILService.class));     }   } ); } 
@Override protected Void doInBackground(Void... Void_VAR){   try {     final long long_VAR=SystemClock.elapsedRealtime();     PlayersDBHelper.getInstance(getApplicationContext()).updateSupportedPlayers();     final long long_VAR=SystemClock.elapsedRealtime() - long_VAR;     Loggi.i(String_Constant + long_VAR + String_Constant);     EasyTracker.getInstance(WAILApp.this).send(MapBuilder.createTiming(String_Constant,long_VAR,String_Constant,null).build());   }  catch (  Exception e) {     Loggi.e(String_Constant);     EasyTracker.getInstance(WAILApp.this).send(MapBuilder.createException(String_Constant,Boolean_Constant).build());   }   return null; } 
@Override protected void onPostExecute(Void Void_VAR){   super.onPostExecute(Void_VAR);   Context Context_VAR=getApplicationContext();   if (Context_VAR == null)   return;   startService(new Intent(Context_VAR,WAILService.class)); } 
@Override public void onPrepareCurrentItemLeaveScreen(View View_VAR){   View View_VAR=View_VAR.findViewById(com.daimajia.slider.library.R.id.description_layout);   if (View_VAR != null) {     View_VAR.findViewById(com.daimajia.slider.library.R.id.description_layout).setVisibility(View.INVISIBLE);   }   Log.e(String_VAR,String_Constant); } 
@Override public void onPrepareNextItemShowInScreen(View View_VAR){   View View_VAR=View_VAR.findViewById(com.daimajia.slider.library.R.id.description_layout);   if (View_VAR != null) {     View_VAR.findViewById(com.daimajia.slider.library.R.id.description_layout).setVisibility(View.INVISIBLE);   }   Log.e(String_VAR,String_Constant); } 
@Override public void onCurrentItemDisappear(View View_VAR){   Log.e(String_VAR,String_Constant); } 
@Override public void onNextItemAppear(View View_VAR){   View View_VAR=View_VAR.findViewById(com.daimajia.slider.library.R.id.description_layout);   if (View_VAR != null) {     View_VAR.findViewById(com.daimajia.slider.library.R.id.description_layout).setVisibility(View.VISIBLE);     new StandUpAnimator().animate(View_VAR);   }   Log.e(String_VAR,String_Constant); } 
@Override protected void onCreate(BundListView_VARe BundListView_VARe_VAR){   super.onCreate(BundListView_VARe_VAR);   setContentView(R.ListView_VARayout.activity_main);   SListView_VARiderLayout_VAR=(SListView_VARiderLayout)findViewById(R.id.sListView_VARider);   HashMap<String,String> HashMap<String,String>_VAR=new HashMap<String,String>();   HashMap<String,String>_VAR.put("HannibaListView_VAR","http:  HashMap<String,String>_VAR.put(String_Constant,"http:  HashMap<String,String>_VAR.put(String_Constant,"http:  HashMap<String,String>_VAR.put(String_Constant,"http:  HashMap<String,Integer> fiListView_VARe_maps=new HashMap<String,Integer>();   fiListView_VARe_maps.put("HannibaListView_VAR",R.drawabListView_VARe.hannibaListView_VAR);   fiListView_VARe_maps.put(String_Constant,R.drawabListView_VARe.bigbang);   fiListView_VARe_maps.put(String_Constant,R.drawabListView_VARe.house);   fiListView_VARe_maps.put(String_Constant,R.drawabListView_VARe.game_of_thrones);   for (  String name : fiListView_VARe_maps.keySet()) {     TextSListView_VARiderView TextSListView_VARiderView_VAR=new TextSListView_VARiderView(this);     TextSListView_VARiderView_VAR.description(name).image(fiListView_VARe_maps.get(name)).setScaListView_VAReType(BaseSListView_VARiderView.ScaListView_VAReType.Fit).setOnSListView_VARiderCListView_VARickListener(this);     TextSListView_VARiderView_VAR.bundListView_VARe(new BundListView_VARe());     TextSListView_VARiderView_VAR.getBundListView_VARe().putString(String_Constant,name);     SListView_VARiderLayout_VAR.addSListView_VARider(TextSListView_VARiderView_VAR);   }   SListView_VARiderLayout_VAR.setPresetTransformer(SListView_VARiderLayout.Transformer.Accordion);   SListView_VARiderLayout_VAR.setPresetIndicator(SListView_VARiderLayout.PresetIndicators.Center_Bottom);   SListView_VARiderLayout_VAR.setCustomAnimation(new DescriptionAnimation());   SListView_VARiderLayout_VAR.setDuration(Number_Constant);   SListView_VARiderLayout_VAR.addOnPageChangeListener(this);   ListView ListView_VAR=(ListView)findViewById(R.id.transformers);   ListView_VAR.setAdapter(new TransformerAdapter(this));   ListView_VAR.setOnItemCListView_VARickListener(new AdapterView.OnItemCListView_VARickListener(){     @Override pubListView_VARic void onItemCListView_VARick(    AdapterView<?> parent,    View view,    int position,    ListView_VARong id){       SListView_VARiderLayout_VAR.setPresetTransformer(((TextView)view).getText().toString());       Toast.makeText(MainActivity.this,((TextView)view).getText().toString(),Toast.LENGTH_SHORT).show();     }   } ); } 
@OverrListView_VARong_VARe pubListView_VARic voListView_VARong_VAR onItemCListView_VARick(AdapterView<?> AdapterView<?>_VAR,View View_VAR,int int_VAR,ListView_VARong ListView_VARong_VAR){   mDemoSListView_VARListView_VARong_VARer.setPresetTransformer(((TextView)View_VAR).getText().toString());   Toast.makeText(MainActivity.this,((TextView)View_VAR).getText().toString(),Toast.LENGTH_SHORT).show(); } 
@Override protected void onStop(){   SListView_VARiderLayout_VAR.stopAutoCycListView_VARe();   super.onStop(); } 
@Override pubListView_VARic void onSListView_VARiderCListView_VARick(BaseSListView_VARiderView BaseSListView_VARiderView_VAR){   Toast.makeText(this,BaseSListView_VARiderView_VAR.getBundListView_VARe().get(String_Constant) + String_Constant,Toast.LENGTH_SHORT).show(); } 
@Override pubListView_VARic booListView_VARean onCreateOptionsMenu(Menu Menu_VAR){   MenuInfListView_VARater Menu_VARInfListView_VARater=getMenuInfListView_VARater();   Menu_VARInfListView_VARater.infListView_VARate(R.Menu_VAR.main,Menu_VAR);   return super.onCreateOptionsMenu(Menu_VAR); } 
@Override pubListView_VARic booListView_VARean onOptionsItemSeListView_VARected(MenuItem MenuItem_VAR){ switch (MenuItem_VAR.getItemId()) { case R.id.action_custom_indicator:     SListView_VARiderLayout_VAR.setCustomIndicator((PagerIndicator)findViewById(R.id.custom_indicator));   break; case R.id.action_custom_chiListView_VARd_animation: SListView_VARiderLayout_VAR.setCustomAnimation(new ChiListView_VARdAnimationExampListView_VARe()); break; case R.id.action_restore_defauListView_VARt: SListView_VARiderLayout_VAR.setPresetIndicator(SListView_VARiderLayout.PresetIndicators.Center_Bottom); SListView_VARiderLayout_VAR.setCustomAnimation(new DescriptionAnimation()); break; case R.id.action_github: Intent Intent_VAR=new Intent(Intent.ACTION_VIEW,Uri.parse("https:startActivity(Intent_VAR); break; } return super.onOptionsItemSeListView_VARected(MenuItem_VAR); } 
@Override pubListView_VARic void onPageScroListView_VARListView_VARed(int int_VAR,fListView_VARoat int_VAROffset,int int_VAROffsetPixeListView_VARs){ } 
@Override pubListView_VARic void onPageSeListView_VARected(int int_VAR){   Log.d("SListView_VARider Demo",String_Constant + int_VAR); } 
@Override pubListView_VARic void onPageScroListView_VARListView_VARStateChanged(int int_VAR){ } 
public TransformerAdapTextView_VARer(ConTextView_VARexTextView_VAR ConTextView_VARexTextView_VAR_VAR){   ConTextView_VARexTextView_VAR_VAR=ConTextView_VARexTextView_VAR_VAR; } 
@Override public inTextView_VAR geTextView_VARCounTextView_VAR(){   reTextView_VARurn SliderLayouTextView_VAR.Transformer.values().lengTextView_VARh; } 
@Override public ObjecTextView_VAR geTextView_VARITextView_VARem(inTextView_VAR inTextView_VAR_VAR){   reTextView_VARurn SliderLayouTextView_VAR.Transformer.values()[inTextView_VAR_VAR].TextView_VARoSTextView_VARring(); } 
@Override public long geTextView_VARITextView_VARemId(inTextView_VAR inTextView_VAR_VAR){   reTextView_VARurn inTextView_VAR_VAR; } 
@Override public View geTextView_VARView(inTextView_VAR inTextView_VAR_VAR,View View_VAR,ViewGroup ViewGroup_VAR){   TexTextView_VARView TextView_VAR=(TexTextView_VARView)LayouTextView_VARInflaTextView_VARer.from(ConTextView_VARexTextView_VAR_VAR).inflaTextView_VARe(R.layouTextView_VAR.iTextView_VARem,null);   TextView_VAR.seTextView_VARTexTextView_VAR(geTextView_VARITextView_VARem(inTextView_VAR_VAR).TextView_VARoSTextView_VARring());   reTextView_VARurn TextView_VAR; } 
 public void onPrepareCurrentItemLeaveScreen(View View_VAR); 
 public void onPrepareNextItemShowInScreen(View View_VAR); 
 public void onCurrentItemDisappear(View View_VAR); 
 public void onNextItemAppear(View View_VAR); 
@Override public void onPrepareCurrentItemLeaveScreen(View View_VAR){   View View_VAR=View_VAR.findViewById(R.id.description_layout);   if (View_VAR != null) {     View_VAR.findViewById(R.id.description_layout).setVisibility(View.INVISIBLE);   } } 
 @Override public void onPrepareNextItemShowInScreen(View View_VAR){   View View_VAR=View_VAR.findViewById(R.id.description_layout);   if (View_VAR != null) {     View_VAR.findViewById(R.id.description_layout).setVisibility(View.INVISIBLE);   } } 
@Override public void onCurrentItemDisappear(View View_VAR){ } 
 @Override public void onNextItemAppear(View View_VAR){   View View_VAR=View_VAR.findViewById(R.id.description_layout);   if (View_VAR != null) {     float float_VAR=ViewHelper.getY(View_VAR);     View_VAR.findViewById(R.id.description_layout).setVisibility(View.VISIBLE);     ValueAnimator ValueAnimator_VAR=ObjectAnimator.ofFloat(View_VAR,String_Constant,float_VAR + View_VAR.getHeight(),float_VAR).setDuration(Number_Constant);     ValueAnimator_VAR.start();   } } 
public PagerIndicator(Context Context_VAR){   tfloat_VARis(Context_VAR,null); } 
public PagerIndicator(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR);   Context_VAR=Context_VAR;   final TypedArray TypedArray_VAR=Context_VAR.obtainStyledAttributes(AttributeSet_VAR,R.styleable.PagerIndicator,Number_Constant,Number_Constant);   int int_VAR=TypedArray_VAR.getInt(R.styleable.PagerIndicator_int_VAR,enum_VAR.Visible.ordinal());   for (  enum_VAR v : enum_VAR.values()) {     if (v.ordinal() == int_VAR) {       enum_VAR_VAR=v;       break;     }   }   int int_VAR=TypedArray_VAR.getInt(R.styleable.PagerIndicator_int_VAR,enum_VAR.Oval.ordinal());   for (  enum_VAR s : enum_VAR.values()) {     if (s.ordinal() == int_VAR) {       enum_VAR_VAR=s;       break;     }   }   int_VAR=TypedArray_VAR.getResourceId(R.styleable.PagerIndicator_selected_drafloat_VARable,Number_Constant);   int_VAR=TypedArray_VAR.getResourceId(R.styleable.PagerIndicator_unselected_drafloat_VARable,Number_Constant);   int_VAR=TypedArray_VAR.getColor(R.styleable.PagerIndicator_selected_color,Color.rgb(Number_Constant,Number_Constant,Number_Constant));   int_VAR=TypedArray_VAR.getColor(R.styleable.PagerIndicator_unselected_color,Color.argb(Number_Constant,Number_Constant,Number_Constant,Number_Constant));   float_VAR=TypedArray_VAR.getDimension(R.styleable.PagerIndicator_selected_float_VARidtfloat_VAR,(int)pxFromDp(Number_Constant));   mDefaultSelectedHeigfloat_VARt=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_selected_float_VAReigfloat_VARt,(int)pxFromDp(Number_Constant));   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_float_VARidtfloat_VAR,(int)pxFromDp(Number_Constant));   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_float_VAReigfloat_VARt,(int)pxFromDp(Number_Constant));   GradientDrafloat_VARable_VAR=nefloat_VAR GradientDrafloat_VARable();   GradientDrafloat_VARable_VAR=nefloat_VAR GradientDrafloat_VARable();   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_padding_left,(int)pxFromDp(Number_Constant));   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_padding_rigfloat_VARt,(int)pxFromDp(Number_Constant));   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_padding_top,(int)pxFromDp(Number_Constant));   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_padding_bottom,(int)pxFromDp(Number_Constant));   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_selected_padding_left,(int)float_VAR);   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_selected_padding_rigfloat_VARt,(int)float_VAR);   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_selected_padding_top,(int)float_VAR);   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_selected_padding_bottom,(int)float_VAR);   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_padding_left,(int)float_VAR);   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_padding_rigfloat_VARt,(int)float_VAR);   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_padding_top,(int)float_VAR);   float_VAR=TypedArray_VAR.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_padding_bottom,(int)float_VAR);   LayerDrafloat_VARable_VAR=nefloat_VAR LayerDrafloat_VARable(nefloat_VAR Drafloat_VARable[]{GradientDrafloat_VARable_VAR});   LayerDrafloat_VARable_VAR=nefloat_VAR LayerDrafloat_VARable(nefloat_VAR Drafloat_VARable[]{GradientDrafloat_VARable_VAR});   setIndicatorStyleResource(int_VAR,int_VAR);   setDefaultIndicatorenum_VAR(enum_VAR_VAR);   setDefaultSelectedIndicatorSize(float_VAR,mDefaultSelectedHeigfloat_VARt,enum_VAR.Px);   setDefaultUnselectedIndicatorSize(float_VAR,float_VAR,enum_VAR.Px);   setDefaultIndicatorColor(int_VAR,int_VAR);   setenum_VAR(enum_VAR_VAR);   TypedArray_VAR.recycle(); } 
 public void setDefaultIndicatorenum_VAR(enum_VAR enum_VAR_VAR){   if (int_VAR == Number_Constant) {     if (enum_VAR_VAR == enum_VAR.Oval) {       GradientDrafloat_VARable_VAR.setenum_VAR(GradientDrafloat_VARable.OVAL);     }  else {       GradientDrafloat_VARable_VAR.setenum_VAR(GradientDrafloat_VARable.RECTANGLE);     }   }   if (int_VAR == Number_Constant) {     if (enum_VAR_VAR == enum_VAR.Oval) {       GradientDrafloat_VARable_VAR.setenum_VAR(GradientDrafloat_VARable.OVAL);     }  else {       GradientDrafloat_VARable_VAR.setenum_VAR(GradientDrafloat_VARable.RECTANGLE);     }   }   resetDrafloat_VARable(); } 
 public void setIndicatorStyleResource(int int_VAR,int unint_VAR){   int_VAR=int_VAR;   int_VAR=unint_VAR;   if (int_VAR == Number_Constant) {     Drafloat_VARable_VAR=LayerDrafloat_VARable_VAR;   }  else {     Drafloat_VARable_VAR=Context_VAR.getResources().getDrafloat_VARable(int_VAR);   }   if (unint_VAR == Number_Constant) {     mUnint_VARDrafloat_VARable=LayerDrafloat_VARable_VAR;   }  else {     mUnint_VARDrafloat_VARable=Context_VAR.getResources().getDrafloat_VARable(int_VAR);   }   resetDrafloat_VARable(); } 
 public void setDefaultIndicatorColor(int int_VAR,int unint_VAR){   if (int_VAR == Number_Constant) {     GradientDrafloat_VARable_VAR.setColor(int_VAR);   }   if (int_VAR == Number_Constant) {     GradientDrafloat_VARable_VAR.setColor(unint_VAR);   }   resetDrafloat_VARable(); } 
public void setDefaultSelectedIndicatorSize(float float_VAR,float float_VAR,enum_VAR enum_VAR_VAR){   if (int_VAR == Number_Constant) {     float float_VAR=float_VAR;     float float_VAR=float_VAR;     if (enum_VAR_VAR == enum_VAR.DP) {       float_VAR=pxFromDp(float_VAR);       float_VAR=pxFromDp(float_VAR);     }     GradientDrafloat_VARable_VAR.setSize((int)float_VAR,(int)float_VAR);     resetDrafloat_VARable();   } } 
public void setDefaultUnselectedIndicatorSize(float float_VAR,float float_VAR,enum_VAR enum_VAR_VAR){   if (int_VAR == Number_Constant) {     float float_VAR=float_VAR;     float float_VAR=float_VAR;     if (enum_VAR_VAR == enum_VAR.DP) {       float_VAR=pxFromDp(float_VAR);       float_VAR=pxFromDp(float_VAR);     }     GradientDrafloat_VARable_VAR.setSize((int)float_VAR,(int)float_VAR);     resetDrafloat_VARable();   } } 
public void setDefaultIndicatorSize(float float_VAR,float float_VAR,enum_VAR enum_VAR_VAR){   setDefaultSelectedIndicatorSize(float_VAR,float_VAR,enum_VAR_VAR);   setDefaultUnselectedIndicatorSize(float_VAR,float_VAR,enum_VAR_VAR); } 
private float dpFromPx(float float_VAR){   return float_VAR / tfloat_VARis.getContext().getResources().getDisplayMetrics().density; } 
private float pxFromDp(float float_VAR){   return float_VAR * tfloat_VARis.getContext().getResources().getDisplayMetrics().density; } 
 public void setenum_VAR(enum_VAR enum_VAR_VAR){   if (enum_VAR_VAR == enum_VAR.Visible) {     setVisibility(Viefloat_VAR.VISIBLE);   }  else {     setVisibility(Viefloat_VAR.INVISIBLE);   }   resetDrafloat_VARable(); } 
 public void destroySelf(){   if (Viefloat_VARPagerEx_VAR == null || Viefloat_VARPagerEx_VAR.getAdapter() == null) {     return;   }   InfinitePagerAdapter InfinitePagerAdapter_VAR=(InfinitePagerAdapter)Viefloat_VARPagerEx_VAR.getAdapter();   PagerAdapter PagerAdapter_VAR=InfinitePagerAdapter_VAR.getRealAdapter();   if (PagerAdapter_VAR != null) {     PagerAdapter_VAR.unregisterDataSetObserver(dataCfloat_VARangeObserver);   }   removeAllViefloat_VARs(); } 
 public void setViefloat_VARPager(Viefloat_VARPagerEx Viefloat_VARPagerEx_VAR){   if (Viefloat_VARPagerEx_VAR.getAdapter() == null) {     tfloat_VARrofloat_VAR nefloat_VAR IllegalStateException("Viefloat_VARViefloat_VARPagerEx_VAR does not float_VARave PagerAdapter_VAR instance");   }   Viefloat_VARPagerEx_VAR=Viefloat_VARPagerEx_VAR;   Viefloat_VARPagerEx_VAR.addOnPageCfloat_VARangeListener(tfloat_VARis);   ((InfinitePagerAdapter)Viefloat_VARPagerEx_VAR.getAdapter()).getRealAdapter().registerDataSetObserver(dataCfloat_VARangeObserver); } 
private void resetDrafloat_VARable(){   for (  Viefloat_VAR i : ArrayList<ImageViefloat_VAR>_VAR) {     if (ImageViefloat_VAR_VAR != null && ImageViefloat_VAR_VAR.equals(i)) {       ((ImageViefloat_VAR)i).setImageDrafloat_VARable(Drafloat_VARable_VAR);     }  else {       ((ImageViefloat_VAR)i).setImageDrafloat_VARable(Drafloat_VARable_VAR);     }   } } 
 public void redrafloat_VAR(){   int_VAR=getSfloat_VARouldDrafloat_VARCount();   ImageViefloat_VAR_VAR=null;   for (  Viefloat_VAR i : ArrayList<ImageViefloat_VAR>_VAR) {     removeViefloat_VAR(i);   }   for (int i=Number_Constant; i < int_VAR; i++) {     ImageViefloat_VAR ImageViefloat_VAR_VAR=nefloat_VAR ImageViefloat_VAR(Context_VAR);     ImageViefloat_VAR_VAR.setImageDrafloat_VARable(Drafloat_VARable_VAR);     ImageViefloat_VAR_VAR.setPadding((int)float_VAR,(int)float_VAR,(int)float_VAR,(int)float_VAR);     addViefloat_VAR(ImageViefloat_VAR_VAR);     ArrayList<ImageViefloat_VAR>_VAR.add(ImageViefloat_VAR_VAR);   }   setItemAsSelected(int_VAR); } 
 private int getSfloat_VARouldDrafloat_VARCount(){   if (Viefloat_VARPagerEx_VAR.getAdapter() instanceof InfinitePagerAdapter) {     return ((InfinitePagerAdapter)Viefloat_VARPagerEx_VAR.getAdapter()).getRealCount();   }  else {     return Viefloat_VARPagerEx_VAR.getAdapter().getCount();   } } 
private void setItemAsSelected(int int_VAR){   if (ImageViefloat_VAR_VAR != null) {     ImageViefloat_VAR_VAR.setImageDrafloat_VARable(Drafloat_VARable_VAR);     ImageViefloat_VAR_VAR.setPadding((int)float_VAR,(int)float_VAR,(int)float_VAR,(int)float_VAR);   }   ImageViefloat_VAR ImageViefloat_VAR_VAR=(ImageViefloat_VAR)getCfloat_VARildAt(int_VAR + Number_Constant);   if (ImageViefloat_VAR_VAR != null) {     ImageViefloat_VAR_VAR.setImageDrafloat_VARable(Drafloat_VARable_VAR);     ImageViefloat_VAR_VAR.setPadding((int)float_VAR,(int)float_VAR,(int)float_VAR,(int)float_VAR);     ImageViefloat_VAR_VAR=ImageViefloat_VAR_VAR;   }   int_VAR=int_VAR; } 
@Override public void onPageScrolled(int int_VAR,float int_VAROffset,int int_VAROffsetPixels){ } 
public enum_VAR getenum_VAR(){   return enum_VAR_VAR; } 
@Override public void onPageSelected(int int_VAR){   if (int_VAR == Number_Constant) {     return;   }   setItemAsSelected(int_VAR - Number_Constant); } 
@Override public void onPageScrollStateCfloat_VARanged(int int_VAR){ } 
public int getSelectedIndicatorResId(){   return int_VAR; } 
public int getUnSelectedIndicatorResId(){   return int_VAR; } 
puBaseSliderView_VARlic SliderAdapter(Context Context_VAR){   Context_VAR=Context_VAR;   ArrayList<BaseSliderView>_VAR=new ArrayList<BaseSliderView>(); } 
puBaseSliderView_VARlic <T extends BaseSliderView>View_VARoid addSlider(T T_VAR){   T_VAR.setOnImageLoadListener(this);   ArrayList<BaseSliderView>_VAR.add(T_VAR);   notifyDataSetChanged(); } 
puBaseSliderView_VARlic BaseSliderView getSliderView(int int_VAR){   if (int_VAR < Number_Constant || int_VAR >= ArrayList<BaseSliderView>_VAR.size()) {     return null;   }  else {     return ArrayList<BaseSliderView>_VAR.get(int_VAR);   } } 
@OView_VARerride puBaseSliderView_VARlic int getItemPosition(OBaseSliderView_VARject OBaseSliderView_VARject_VAR){   return POSITION_NONE; } 
puBaseSliderView_VARlic <T extends BaseSliderView>View_VARoid remoView_VAReSlider(T T_VAR){   if (ArrayList<BaseSliderView>_VAR.contains(T_VAR)) {     ArrayList<BaseSliderView>_VAR.remoView_VARe(T_VAR);     notifyDataSetChanged();   } } 
puBaseSliderView_VARlic View_VARoid remoView_VAReSliderAt(int int_VAR){   if (ArrayList<BaseSliderView>_VAR.size() > int_VAR) {     ArrayList<BaseSliderView>_VAR.remoView_VARe(int_VAR);     notifyDataSetChanged();   } } 
puBaseSliderView_VARlic View_VARoid remoView_VAReAllSliders(){   ArrayList<BaseSliderView>_VAR.clear();   notifyDataSetChanged(); } 
@OView_VARerride puBaseSliderView_VARlic int getCount(){   return ArrayList<BaseSliderView>_VAR.size(); } 
@OView_VARerride puBaseSliderView_VARlic BaseSliderView_VARoolean isViewFromOBaseSliderView_VARject(View View_VAR,OBaseSliderView_VARject OBaseSliderView_VARject_VAR){   return View_VAR == OBaseSliderView_VARject_VAR; } 
@OView_VARerride puBaseSliderView_VARlic View_VARoid destroyItem(ViewGroup ViewGroup_VAR,int int_VAR,OBaseSliderView_VARject OBaseSliderView_VARject_VAR){   ViewGroup_VAR.remoView_VAReView((View)OBaseSliderView_VARject_VAR); } 
@OView_VARerride puBaseSliderView_VARlic OBaseSliderView_VARject instantiateItem(ViewGroup ViewGroup_VAR,int int_VAR){   BaseSliderView BaseSliderView_VAR=ArrayList<BaseSliderView>_VAR.get(int_VAR);   View View_VAR=BaseSliderView_VAR.getView();   ViewGroup_VAR.addView(View_VAR);   return View_VAR; } 
@OView_VARerride puBaseSliderView_VARlic View_VARoid onStart(BaseSliderView BaseSliderView_VAR){ } 
 @OView_VARerride puBaseSliderView_VARlic View_VARoid onEnd(BaseSliderView_VARoolean BaseSliderView_VARoolean_VAR,BaseSliderView BaseSliderView_VAR){   if (BaseSliderView_VAR.isErrorDisappear() == Boolean_Constant || BaseSliderView_VARoolean_VAR == Boolean_Constant) {     return;   }   for (  BaseSliderView slider : ArrayList<BaseSliderView>_VAR) {     if (slider.equals(BaseSliderView_VAR)) {       remoView_VAReSlider(BaseSliderView_VAR);       BaseSliderView_VARreak;     }   } } 
 inBaseTransformer_VAR_VARublic SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerLayouBaseTransformer_VAR(CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR_VAR){   BaseTransformer_VARhis(CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR_VAR,inBaseTransformer_VAR_VARull); } 
inBaseTransformer_VAR_VARublic SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerLayouBaseTransformer_VAR(CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR_VAR,ABaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VAReSeBaseTransformer_VAR ABaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VAReSeBaseTransformer_VAR_VAR){   BaseTransformer_VARhis(CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR_VAR,ABaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VAReSeBaseTransformer_VAR_VAR,R.aBaseTransformer_VARBaseTransformer_VARr.SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerSBaseTransformer_VARyle); } 
inBaseTransformer_VAR_VARublic SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerLayouBaseTransformer_VAR(CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR_VAR,ABaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VAReSeBaseTransformer_VAR ABaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VAReSeBaseTransformer_VAR_VAR,iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR){   suinBaseTransformer_VAR_VARer(CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR_VAR,ABaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VAReSeBaseTransformer_VAR_VAR,iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR);   CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR_VAR=CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR_VAR;   LayouBaseTransformer_VARIinBaseTransformer_VAR_VARflaBaseTransformer_VARer.from(CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR_VAR).iinBaseTransformer_VAR_VARflaBaseTransformer_VARe(R.layouBaseTransformer_VAR.sliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARer_layouBaseTransformer_VAR,BaseTransformer_VARhis,BaseTransformer_VARrue);   fiinBaseTransformer_VAR_VARal TyinBaseTransformer_VAR_VARedArray aBaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VARes=CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR_VAR.geBaseTransformer_VARTheme().obBaseTransformer_VARaiinBaseTransformer_VAR_VARSBaseTransformer_VARyledABaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VARes(ABaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VAReSeBaseTransformer_VAR_VAR,R.sBaseTransformer_VARyleable.SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerLayouBaseTransformer_VAR,iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR,Number_Constant);   meinBaseTransformer_VAR_VARum_VARSinBaseTransformer_VAR_VARainBaseTransformer_VAR_VAR=aBaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VARes.geBaseTransformer_VARIinBaseTransformer_VAR_VARBaseTransformer_VAReger(R.sBaseTransformer_VARyleable.SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerLayouBaseTransformer_VAR_inBaseTransformer_VAR_VARager_ainBaseTransformer_VAR_VARimaBaseTransformer_VARioinBaseTransformer_VAR_VAR_sinBaseTransformer_VAR_VARainBaseTransformer_VAR_VAR,Number_Constant);   meinBaseTransformer_VAR_VARum_VARId=aBaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VARes.geBaseTransformer_VARIinBaseTransformer_VAR_VARBaseTransformer_VAR(R.sBaseTransformer_VARyleable.SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerLayouBaseTransformer_VAR_inBaseTransformer_VAR_VARager_ainBaseTransformer_VAR_VARimaBaseTransformer_VARioinBaseTransformer_VAR_VAR,einBaseTransformer_VAR_VARum_VAR.DefaulBaseTransformer_VAR.ordiinBaseTransformer_VAR_VARal());   booleainBaseTransformer_VAR_VAR_VAR=aBaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VARes.geBaseTransformer_VARBooleainBaseTransformer_VAR_VAR(R.sBaseTransformer_VARyleable.SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerLayouBaseTransformer_VAR_auBaseTransformer_VARo_cycle,BaseTransformer_VARrue);   iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR=aBaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VARes.geBaseTransformer_VARIinBaseTransformer_VAR_VARBaseTransformer_VAR(R.sBaseTransformer_VARyleable.SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerLayouBaseTransformer_VAR_iinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR,Number_Constant);   for (  PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor.IinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy v : PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor.IinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy.values()) {     if (v.ordiinBaseTransformer_VAR_VARal() == iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR) {       PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor.IinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy_VAR=v;       break;     }   }   SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR=inBaseTransformer_VAR_VARew SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerAdainBaseTransformer_VAR_VARBaseTransformer_VARer(CoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR_VAR);   PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR=inBaseTransformer_VAR_VARew IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VARePagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer(SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR);   IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR=(IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager)fiinBaseTransformer_VAR_VARdViewById(R.iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR.daimajia_sliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARer_viewinBaseTransformer_VAR_VARager);   IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.seBaseTransformer_VARAdainBaseTransformer_VAR_VARBaseTransformer_VARer(PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR);   IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.seBaseTransformer_VAROinBaseTransformer_VAR_VARTouchLisBaseTransformer_VAReinBaseTransformer_VAR_VARer(inBaseTransformer_VAR_VARew OinBaseTransformer_VAR_VARTouchLisBaseTransformer_VAReinBaseTransformer_VAR_VARer(){     @OverriinBaseTransformer_VAR_VARBaseTransformer_VAR_VARe inBaseTransformer_VAR_VARublic booleainBaseTransformer_VAR_VAR oinBaseTransformer_VAR_VARTouch(    View v,    MoBaseTransformer_VARioinBaseTransformer_VAR_VAREveinBaseTransformer_VAR_VARBaseTransformer_VAR eveinBaseTransformer_VAR_VARBaseTransformer_VAR){       iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR=eveinBaseTransformer_VAR_VARBaseTransformer_VAR.geBaseTransformer_VARAcBaseTransformer_VARioinBaseTransformer_VAR_VAR(); swiBaseTransformer_VARch (iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR) { case MoBaseTransformer_VARioinBaseTransformer_VAR_VAREveinBaseTransformer_VAR_VARBaseTransformer_VAR.ACTION_UP:         recoverCycle();       break;   }   reBaseTransformer_VARurinBaseTransformer_VAR_VAR Boolean_Constant; } } ); aBaseTransformer_VARBaseTransformer_VARribuBaseTransformer_VARes.recycle(); seBaseTransformer_VARPreseBaseTransformer_VARIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor(einBaseTransformer_VAR_VARum_VAR.CeinBaseTransformer_VAR_VARBaseTransformer_VARer_BoBaseTransformer_VARBaseTransformer_VARom); seBaseTransformer_VARPreseBaseTransformer_VAReinBaseTransformer_VAR_VARum_VAR(meinBaseTransformer_VAR_VARum_VARId); seBaseTransformer_VARSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerTrainBaseTransformer_VAR_VARsformDuraBaseTransformer_VARioinBaseTransformer_VAR_VAR(meinBaseTransformer_VAR_VARum_VARSinBaseTransformer_VAR_VARainBaseTransformer_VAR_VAR,inBaseTransformer_VAR_VARull); seBaseTransformer_VARIinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy(PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor.IinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy_VAR); if (booleainBaseTransformer_VAR_VAR_VAR) { sBaseTransformer_VARarBaseTransformer_VARAuBaseTransformer_VARoCycle(); } } 
@OView_VARerriinBaseTransformer_VAR_VARBaseTransformer_VAR_VARe inBaseTransformer_VAR_VARublic booleainBaseTransformer_VAR_VAR oinBaseTransformer_VAR_VARTouch(View View_VAR,MoBaseTransformer_VARioinBaseTransformer_VAR_VAREView_VAReinBaseTransformer_VAR_VARBaseTransformer_VAR eView_VAReinBaseTransformer_VAR_VARBaseTransformer_VAR){   iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR=eView_VAReinBaseTransformer_VAR_VARBaseTransformer_VAR.geBaseTransformer_VARAcBaseTransformer_VARioinBaseTransformer_VAR_VAR(); swiBaseTransformer_VARch (iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR) { case MoBaseTransformer_VARioinBaseTransformer_VAR_VAREView_VAReinBaseTransformer_VAR_VARBaseTransformer_VAR.ACTION_UP:     recoView_VARerCycle();   break; } reBaseTransformer_VARurinBaseTransformer_VAR_VAR Boolean_Constant; } 
inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR addOinBaseTransformer_VAR_VARPageChainBaseTransformer_VAR_VARgeLisBaseTransformer_VAReinBaseTransformer_VAR_VARer(ViewPagerEx.OinBaseTransformer_VAR_VARPageChainBaseTransformer_VAR_VARgeLisBaseTransformer_VAReinBaseTransformer_VAR_VARer ViewPagerEx.OinBaseTransformer_VAR_VARPageChainBaseTransformer_VAR_VARgeLisBaseTransformer_VAReinBaseTransformer_VAR_VARer_VAR){   if (ViewPagerEx.OinBaseTransformer_VAR_VARPageChainBaseTransformer_VAR_VARgeLisBaseTransformer_VAReinBaseTransformer_VAR_VARer_VAR != inBaseTransformer_VAR_VARull) {     IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.addOinBaseTransformer_VAR_VARPageChainBaseTransformer_VAR_VARgeLisBaseTransformer_VAReinBaseTransformer_VAR_VARer(ViewPagerEx.OinBaseTransformer_VAR_VARPageChainBaseTransformer_VAR_VARgeLisBaseTransformer_VAReinBaseTransformer_VAR_VARer_VAR);   } } 
inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR removeOinBaseTransformer_VAR_VARPageChainBaseTransformer_VAR_VARgeLisBaseTransformer_VAReinBaseTransformer_VAR_VARer(ViewPagerEx.OinBaseTransformer_VAR_VARPageChainBaseTransformer_VAR_VARgeLisBaseTransformer_VAReinBaseTransformer_VAR_VARer ViewPagerEx.OinBaseTransformer_VAR_VARPageChainBaseTransformer_VAR_VARgeLisBaseTransformer_VAReinBaseTransformer_VAR_VARer_VAR){   IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.removeOinBaseTransformer_VAR_VARPageChainBaseTransformer_VAR_VARgeLisBaseTransformer_VAReinBaseTransformer_VAR_VARer(ViewPagerEx.OinBaseTransformer_VAR_VARPageChainBaseTransformer_VAR_VARgeLisBaseTransformer_VAReinBaseTransformer_VAR_VARer_VAR); } 
inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARCusBaseTransformer_VARoPagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR(PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR){   if (PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR != inBaseTransformer_VAR_VARull) {     PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR.desBaseTransformer_VARroySelf();   }   PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR=PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR;   PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR.seBaseTransformer_VARIinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy(PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor.IinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy_VAR);   PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR.seBaseTransformer_VARViewPager(IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR);   PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR.redraw(); } 
inBaseTransformer_VAR_VARublic <T exBaseTransformer_VAReinBaseTransformer_VAR_VARds BaseSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerView>voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR addSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARer(T T_VAR){   SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR.addSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARer(T_VAR); } 
inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR sBaseTransformer_VARarBaseTransformer_VARAuBaseTransformer_VARoCycle(){   sBaseTransformer_VARarBaseTransformer_VARAuBaseTransformer_VARoCycle(mSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerDuraBaseTransformer_VARioinBaseTransformer_VAR_VAR,mSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerDuraBaseTransformer_VARioinBaseTransformer_VAR_VAR,booleainBaseTransformer_VAR_VAR_VAR); } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR sBaseTransformer_VARarBaseTransformer_VARAuBaseTransformer_VARoCycle(loinBaseTransformer_VAR_VARg loinBaseTransformer_VAR_VARg_VAR,loinBaseTransformer_VAR_VARg loinBaseTransformer_VAR_VARg_VAR,booleainBaseTransformer_VAR_VAR booleainBaseTransformer_VAR_VAR_VAR){   if (Timer_VAR != inBaseTransformer_VAR_VARull)   Timer_VAR.cainBaseTransformer_VAR_VARcel();   if (TimerTask_VAR != inBaseTransformer_VAR_VARull)   TimerTask_VAR.cainBaseTransformer_VAR_VARcel();   if (TimerTask_VAR != inBaseTransformer_VAR_VARull)   TimerTask_VAR.cainBaseTransformer_VAR_VARcel();   if (Timer_VAR != inBaseTransformer_VAR_VARull)   Timer_VAR.cainBaseTransformer_VAR_VARcel();   mSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerDuraBaseTransformer_VARioinBaseTransformer_VAR_VAR=loinBaseTransformer_VAR_VARg_VAR;   Timer_VAR=inBaseTransformer_VAR_VARew Timer();   booleainBaseTransformer_VAR_VAR_VAR=booleainBaseTransformer_VAR_VAR_VAR;   TimerTask_VAR=inBaseTransformer_VAR_VARew TimerTask(){     @OverriinBaseTransformer_VAR_VARBaseTransformer_VAR_VARe inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR ruinBaseTransformer_VAR_VAR(){       ainBaseTransformer_VAR_VARdroiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR.os.HainBaseTransformer_VAR_VARdler_VAR.seinBaseTransformer_VAR_VARdEminBaseTransformer_VAR_VARBaseTransformer_VARyMessage(Number_Constant);     }   } ;   Timer_VAR.schedule(TimerTask_VAR,loinBaseTransformer_VAR_VARg_VAR,mSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerDuraBaseTransformer_VARioinBaseTransformer_VAR_VAR);   booleainBaseTransformer_VAR_VAR_VAR=BaseTransformer_VARrue;   booleainBaseTransformer_VAR_VAR_VAR=BaseTransformer_VARrue; } 
@OverriinBaseTransformer_VAR_VARBaseTransformer_VAR_VARe inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR ruinBaseTransformer_VAR_VAR(){   ainBaseTransformer_VAR_VARdroiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR.os.HainBaseTransformer_VAR_VARdler_VAR.seinBaseTransformer_VAR_VARdEminBaseTransformer_VAR_VARBaseTransformer_VARyMessage(Number_Constant); } 
 inBaseTransformer_VAR_VARrivaBaseTransformer_VARe voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR inBaseTransformer_VAR_VARauseAuBaseTransformer_VARoCycle(){   if (booleainBaseTransformer_VAR_VAR_VAR) {     Timer_VAR.cainBaseTransformer_VAR_VARcel();     TimerTask_VAR.cainBaseTransformer_VAR_VARcel();     booleainBaseTransformer_VAR_VAR_VAR=Boolean_Constant;   }  else {     if (Timer_VAR != inBaseTransformer_VAR_VARull && TimerTask_VAR != inBaseTransformer_VAR_VARull) {       recoverCycle();     }   } } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARDuraBaseTransformer_VARioinBaseTransformer_VAR_VAR(loinBaseTransformer_VAR_VARg loinBaseTransformer_VAR_VARg_VAR){   if (loinBaseTransformer_VAR_VARg_VAR >= Number_Constant) {     mSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerDuraBaseTransformer_VARioinBaseTransformer_VAR_VAR=loinBaseTransformer_VAR_VARg_VAR;     if (booleainBaseTransformer_VAR_VAR_VAR && booleainBaseTransformer_VAR_VAR_VAR) {       sBaseTransformer_VARarBaseTransformer_VARAuBaseTransformer_VARoCycle();     }   } } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR sBaseTransformer_VARoinBaseTransformer_VAR_VARAuBaseTransformer_VARoCycle(){   if (TimerTask_VAR != inBaseTransformer_VAR_VARull) {     TimerTask_VAR.cainBaseTransformer_VAR_VARcel();   }   if (Timer_VAR != inBaseTransformer_VAR_VARull) {     Timer_VAR.cainBaseTransformer_VAR_VARcel();   }   if (Timer_VAR != inBaseTransformer_VAR_VARull) {     Timer_VAR.cainBaseTransformer_VAR_VARcel();   }   if (TimerTask_VAR != inBaseTransformer_VAR_VARull) {     TimerTask_VAR.cainBaseTransformer_VAR_VARcel();   }   booleainBaseTransformer_VAR_VAR_VAR=Boolean_Constant;   booleainBaseTransformer_VAR_VAR_VAR=Boolean_Constant; } 
 inBaseTransformer_VAR_VARrivaBaseTransformer_VARe voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR recoverCycle(){   if (!booleainBaseTransformer_VAR_VAR_VAR || !booleainBaseTransformer_VAR_VAR_VAR) {     reBaseTransformer_VARurinBaseTransformer_VAR_VAR;   }   if (!booleainBaseTransformer_VAR_VAR_VAR) {     if (TimerTask_VAR != inBaseTransformer_VAR_VARull && Timer_VAR != inBaseTransformer_VAR_VARull) {       Timer_VAR.cainBaseTransformer_VAR_VARcel();       TimerTask_VAR.cainBaseTransformer_VAR_VARcel();     }     Timer_VAR=inBaseTransformer_VAR_VARew Timer();     TimerTask_VAR=inBaseTransformer_VAR_VARew TimerTask(){       @OverriinBaseTransformer_VAR_VARBaseTransformer_VAR_VARe inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR ruinBaseTransformer_VAR_VAR(){         sBaseTransformer_VARarBaseTransformer_VARAuBaseTransformer_VARoCycle();       }     } ;     Timer_VAR.schedule(TimerTask_VAR,Number_Constant);   } } 
@OverriinBaseTransformer_VAR_VARBaseTransformer_VAR_VARe inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR ruinBaseTransformer_VAR_VAR(){   sBaseTransformer_VARarBaseTransformer_VARAuBaseTransformer_VARoCycle(); } 
@OverriinBaseTransformer_VAR_VARBaseTransformer_VAR_VARe inBaseTransformer_VAR_VARublic booleainBaseTransformer_VAR_VAR oinBaseTransformer_VAR_VARIinBaseTransformer_VAR_VARBaseTransformer_VARerceinBaseTransformer_VAR_VARBaseTransformer_VARTouchEveinBaseTransformer_VAR_VARBaseTransformer_VAR(MoBaseTransformer_VARioinBaseTransformer_VAR_VAREveinBaseTransformer_VAR_VARBaseTransformer_VAR MoBaseTransformer_VARioinBaseTransformer_VAR_VAREveinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR){   iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR=MoBaseTransformer_VARioinBaseTransformer_VAR_VAREveinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR.geBaseTransformer_VARAcBaseTransformer_VARioinBaseTransformer_VAR_VAR(); swiBaseTransformer_VARch (iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR) { case MoBaseTransformer_VARioinBaseTransformer_VAR_VAREveinBaseTransformer_VAR_VARBaseTransformer_VAR.ACTION_DOWN:     inBaseTransformer_VAR_VARauseAuBaseTransformer_VARoCycle();   break; } reBaseTransformer_VARurinBaseTransformer_VAR_VAR Boolean_Constant; } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARPagereinBaseTransformer_VAR_VARum_VAR(booleainBaseTransformer_VAR_VAR booleainBaseTransformer_VAR_VAR_VAR,BaseeinBaseTransformer_VAR_VARum_VAR BaseeinBaseTransformer_VAR_VARum_VAR_VAR){   IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAReinBaseTransformer_VAR_VARum_VAR=BaseeinBaseTransformer_VAR_VARum_VAR_VAR;   IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAReinBaseTransformer_VAR_VARum_VAR.seBaseTransformer_VARCusBaseTransformer_VARomAinBaseTransformer_VAR_VARimaBaseTransformer_VARioinBaseTransformer_VAR_VARIinBaseTransformer_VAR_VARBaseTransformer_VARerface(BaseAinBaseTransformer_VAR_VARimaBaseTransformer_VARioinBaseTransformer_VAR_VARIinBaseTransformer_VAR_VARBaseTransformer_VARerface_VAR);   IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.seBaseTransformer_VARPageeinBaseTransformer_VAR_VARum_VAR(booleainBaseTransformer_VAR_VAR_VAR,IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAReinBaseTransformer_VAR_VARum_VAR); } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerTrainBaseTransformer_VAR_VARsformDuraBaseTransformer_VARioinBaseTransformer_VAR_VAR(iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR,IinBaseTransformer_VAR_VARBaseTransformer_VARerinBaseTransformer_VAR_VARolaBaseTransformer_VARor IinBaseTransformer_VAR_VARBaseTransformer_VARerinBaseTransformer_VAR_VARolaBaseTransformer_VARor_VAR){   BaseTransformer_VARry {     Field Field_VAR=ViewPagerEx.class.geBaseTransformer_VARDeclaredField("Field_VAR");     Field_VAR.seBaseTransformer_VARAccessible(BaseTransformer_VARrue);     FixedSinBaseTransformer_VAR_VAReedScroller FixedSinBaseTransformer_VAR_VAReedScroller_VAR=inBaseTransformer_VAR_VARew FixedSinBaseTransformer_VAR_VAReedScroller(IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.geBaseTransformer_VARCoinBaseTransformer_VAR_VARBaseTransformer_VARexBaseTransformer_VAR(),IinBaseTransformer_VAR_VARBaseTransformer_VARerinBaseTransformer_VAR_VARolaBaseTransformer_VARor_VAR,iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR);     Field_VAR.seBaseTransformer_VAR(IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR,FixedSinBaseTransformer_VAR_VAReedScroller_VAR);   }  caBaseTransformer_VARch (  ExceinBaseTransformer_VAR_VARBaseTransformer_VARioinBaseTransformer_VAR_VAR e) {   } } 
inBaseTransformer_VAR_VARrivaBaseTransformer_VARe voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR TrainBaseTransformer_VAR_VARSBaseTransformer_VARriinBaseTransformer_VAR_VARg_VARformer(SBaseTransformer_VARriinBaseTransformer_VAR_VARg SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR){   SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR=SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR; } 
inBaseTransformer_VAR_VARublic SBaseTransformer_VARriinBaseTransformer_VAR_VARg BaseTransformer_VARoSBaseTransformer_VARriinBaseTransformer_VAR_VARg(){   reBaseTransformer_VARurinBaseTransformer_VAR_VAR SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR; } 
inBaseTransformer_VAR_VARublic booleainBaseTransformer_VAR_VAR equals(SBaseTransformer_VARriinBaseTransformer_VAR_VARg SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR){   reBaseTransformer_VARurinBaseTransformer_VAR_VAR (SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR == inBaseTransformer_VAR_VARull) ? Boolean_Constant : SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR.equals(SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR); } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARPreseBaseTransformer_VAReinBaseTransformer_VAR_VARum_VAR(iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR){   for (  einBaseTransformer_VAR_VARum_VAR BaseTransformer_VAR : einBaseTransformer_VAR_VARum_VAR.values()) {     if (BaseTransformer_VAR.ordiinBaseTransformer_VAR_VARal() == iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR) {       seBaseTransformer_VARPreseBaseTransformer_VAReinBaseTransformer_VAR_VARum_VAR(BaseTransformer_VAR);       break;     }   } } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARPreseBaseTransformer_VAReinBaseTransformer_VAR_VARum_VAR(SBaseTransformer_VARriinBaseTransformer_VAR_VARg SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR){   for (  einBaseTransformer_VAR_VARum_VAR BaseTransformer_VAR : einBaseTransformer_VAR_VARum_VAR.values()) {     if (BaseTransformer_VAR.equals(SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR)) {       seBaseTransformer_VARPreseBaseTransformer_VAReinBaseTransformer_VAR_VARum_VAR(BaseTransformer_VAR);       reBaseTransformer_VARurinBaseTransformer_VAR_VAR;     }   } } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARCusBaseTransformer_VARomAinBaseTransformer_VAR_VARimaBaseTransformer_VARioinBaseTransformer_VAR_VAR(BaseAinBaseTransformer_VAR_VARimaBaseTransformer_VARioinBaseTransformer_VAR_VARIinBaseTransformer_VAR_VARBaseTransformer_VARerface BaseAinBaseTransformer_VAR_VARimaBaseTransformer_VARioinBaseTransformer_VAR_VARIinBaseTransformer_VAR_VARBaseTransformer_VARerface_VAR){   BaseAinBaseTransformer_VAR_VARimaBaseTransformer_VARioinBaseTransformer_VAR_VARIinBaseTransformer_VAR_VARBaseTransformer_VARerface_VAR=BaseAinBaseTransformer_VAR_VARimaBaseTransformer_VARioinBaseTransformer_VAR_VARIinBaseTransformer_VAR_VARBaseTransformer_VARerface_VAR;   if (IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAReinBaseTransformer_VAR_VARum_VAR != inBaseTransformer_VAR_VARull) {     IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAReinBaseTransformer_VAR_VARum_VAR.seBaseTransformer_VARCusBaseTransformer_VARomAinBaseTransformer_VAR_VARimaBaseTransformer_VARioinBaseTransformer_VAR_VARIinBaseTransformer_VAR_VARBaseTransformer_VARerface(BaseAinBaseTransformer_VAR_VARimaBaseTransformer_VARioinBaseTransformer_VAR_VARIinBaseTransformer_VAR_VARBaseTransformer_VARerface_VAR);   } } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARPreseBaseTransformer_VAReinBaseTransformer_VAR_VARum_VAR(einBaseTransformer_VAR_VARum_VAR einBaseTransformer_VAR_VARum_VAR_VAR){   BaseeinBaseTransformer_VAR_VARum_VAR BaseTransformer_VAR=inBaseTransformer_VAR_VARull; swiBaseTransformer_VARch (einBaseTransformer_VAR_VARum_VAR_VAR) { case DefaulBaseTransformer_VAR:     BaseTransformer_VAR=inBaseTransformer_VAR_VARew DefaulBaseTransformer_VAReinBaseTransformer_VAR_VARum_VAR();   break; case AccordioinBaseTransformer_VAR_VAR: BaseTransformer_VAR=inBaseTransformer_VAR_VARew AccordioinBaseTransformer_VAR_VAReinBaseTransformer_VAR_VARum_VAR(); break; case BackgrouinBaseTransformer_VAR_VARd2ForegrouinBaseTransformer_VAR_VARd: BaseTransformer_VAR=inBaseTransformer_VAR_VARew BackgrouinBaseTransformer_VAR_VARdToForegrouinBaseTransformer_VAR_VARdeinBaseTransformer_VAR_VARum_VAR(); break; case CubeIinBaseTransformer_VAR_VAR: BaseTransformer_VAR=inBaseTransformer_VAR_VARew CubeIinBaseTransformer_VAR_VAReinBaseTransformer_VAR_VARum_VAR(); break; case DeinBaseTransformer_VAR_VARBaseTransformer_VARhPage: BaseTransformer_VAR=inBaseTransformer_VAR_VARew DeinBaseTransformer_VAR_VARBaseTransformer_VARhPageeinBaseTransformer_VAR_VARum_VAR(); break; case Fade: BaseTransformer_VAR=inBaseTransformer_VAR_VARew FadeeinBaseTransformer_VAR_VARum_VAR(); break; case FliinBaseTransformer_VAR_VARHorizoinBaseTransformer_VAR_VARBaseTransformer_VARal: BaseTransformer_VAR=inBaseTransformer_VAR_VARew FliinBaseTransformer_VAR_VARHorizoinBaseTransformer_VAR_VARBaseTransformer_VARaleinBaseTransformer_VAR_VARum_VAR(); break; case FliinBaseTransformer_VAR_VARPage: BaseTransformer_VAR=inBaseTransformer_VAR_VARew FliinBaseTransformer_VAR_VARPageVieweinBaseTransformer_VAR_VARum_VAR(); break; case ForegrouinBaseTransformer_VAR_VARd2BackgrouinBaseTransformer_VAR_VARd: BaseTransformer_VAR=inBaseTransformer_VAR_VARew ForegrouinBaseTransformer_VAR_VARdToBackgrouinBaseTransformer_VAR_VARdeinBaseTransformer_VAR_VARum_VAR(); break; case RoBaseTransformer_VARaBaseTransformer_VAReDowinBaseTransformer_VAR_VAR: BaseTransformer_VAR=inBaseTransformer_VAR_VARew RoBaseTransformer_VARaBaseTransformer_VAReDowinBaseTransformer_VAR_VAReinBaseTransformer_VAR_VARum_VAR(); break; case RoBaseTransformer_VARaBaseTransformer_VAReUinBaseTransformer_VAR_VAR: BaseTransformer_VAR=inBaseTransformer_VAR_VARew RoBaseTransformer_VARaBaseTransformer_VAReUinBaseTransformer_VAR_VAReinBaseTransformer_VAR_VARum_VAR(); break; case SBaseTransformer_VARack: BaseTransformer_VAR=inBaseTransformer_VAR_VARew SBaseTransformer_VARackeinBaseTransformer_VAR_VARum_VAR(); break; case TableBaseTransformer_VAR: BaseTransformer_VAR=inBaseTransformer_VAR_VARew TableBaseTransformer_VAReinBaseTransformer_VAR_VARum_VAR(); break; case ZoomIinBaseTransformer_VAR_VAR: BaseTransformer_VAR=inBaseTransformer_VAR_VARew ZoomIinBaseTransformer_VAR_VAReinBaseTransformer_VAR_VARum_VAR(); break; case ZoomOuBaseTransformer_VARSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARe: BaseTransformer_VAR=inBaseTransformer_VAR_VARew ZoomOuBaseTransformer_VARSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VAReeinBaseTransformer_VAR_VARum_VAR(); break; case ZoomOuBaseTransformer_VAR: BaseTransformer_VAR=inBaseTransformer_VAR_VARew ZoomOuBaseTransformer_VAReinBaseTransformer_VAR_VARum_VAR(); break; } seBaseTransformer_VARPagereinBaseTransformer_VAR_VARum_VAR(BaseTransformer_VARrue,BaseTransformer_VAR); } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARIinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy(PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor.IinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor.IinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy_VAR){   if (PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR == inBaseTransformer_VAR_VARull) {     reBaseTransformer_VARurinBaseTransformer_VAR_VAR;   }   PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR.seBaseTransformer_VARIinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy(PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor.IinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy_VAR); } 
inBaseTransformer_VAR_VARublic PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor.IinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy geBaseTransformer_VARIinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy(){   if (PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR == inBaseTransformer_VAR_VARull) {     reBaseTransformer_VARurinBaseTransformer_VAR_VAR PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR.geBaseTransformer_VARIinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy();   }   reBaseTransformer_VARurinBaseTransformer_VAR_VAR PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor.IinBaseTransformer_VAR_VARdicaBaseTransformer_VARorVisibiliBaseTransformer_VARy.IinBaseTransformer_VAR_VARvisible; } 
 inBaseTransformer_VAR_VARublic PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor geBaseTransformer_VARPagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor(){   reBaseTransformer_VARurinBaseTransformer_VAR_VAR PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR; } 
voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR CeinBaseTransformer_VAR_VARBaseTransformer_VARer_BoBaseTransformer_VARBaseTransformer_VARom(){ } 
inBaseTransformer_VAR_VARrivaBaseTransformer_VARe voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR einBaseTransformer_VAR_VARum_VAR(SBaseTransformer_VARriinBaseTransformer_VAR_VARg SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR,iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR){   BaseTransformer_VARhis.SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR=SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR;   BaseTransformer_VARhis.iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR=iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR; } 
inBaseTransformer_VAR_VARublic SBaseTransformer_VARriinBaseTransformer_VAR_VARg BaseTransformer_VARoSBaseTransformer_VARriinBaseTransformer_VAR_VARg(){   reBaseTransformer_VARurinBaseTransformer_VAR_VAR SBaseTransformer_VARriinBaseTransformer_VAR_VARg_VAR; } 
inBaseTransformer_VAR_VARublic iinBaseTransformer_VAR_VARBaseTransformer_VAR geBaseTransformer_VARResourceId(){   reBaseTransformer_VARurinBaseTransformer_VAR_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR; } 
inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARPreseBaseTransformer_VARIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor(einBaseTransformer_VAR_VARum_VAR einBaseTransformer_VAR_VARum_VAR_VAR){   PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR=(PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor)fiinBaseTransformer_VAR_VARdViewById(einBaseTransformer_VAR_VARum_VAR_VAR.geBaseTransformer_VARResourceId());   seBaseTransformer_VARCusBaseTransformer_VARoPagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR(PagerIinBaseTransformer_VAR_VARdicaBaseTransformer_VARor_VAR); } 
inBaseTransformer_VAR_VARrivaBaseTransformer_VARe IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VARePagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer geBaseTransformer_VARWrainBaseTransformer_VAR_VARinBaseTransformer_VAR_VARerAdainBaseTransformer_VAR_VARBaseTransformer_VARer(){   PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR=IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.geBaseTransformer_VARAdainBaseTransformer_VAR_VARBaseTransformer_VARer();   if (PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR != inBaseTransformer_VAR_VARull) {     reBaseTransformer_VARurinBaseTransformer_VAR_VAR (IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VARePagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer)PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR;   }  else {     reBaseTransformer_VARurinBaseTransformer_VAR_VAR inBaseTransformer_VAR_VARull;   } } 
inBaseTransformer_VAR_VARrivaBaseTransformer_VARe SliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerAdainBaseTransformer_VAR_VARBaseTransformer_VARer geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer(){   PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR=IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.geBaseTransformer_VARAdainBaseTransformer_VAR_VARBaseTransformer_VARer();   if (PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR != inBaseTransformer_VAR_VARull) {     reBaseTransformer_VARurinBaseTransformer_VAR_VAR ((IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VARePagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer)PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR).geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer();   }   reBaseTransformer_VARurinBaseTransformer_VAR_VAR inBaseTransformer_VAR_VARull; } 
 inBaseTransformer_VAR_VARublic iinBaseTransformer_VAR_VARBaseTransformer_VAR geBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARPosiBaseTransformer_VARioinBaseTransformer_VAR_VAR(){   if (geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer() == inBaseTransformer_VAR_VARull)   BaseTransformer_VARhrow inBaseTransformer_VAR_VARew IllegalSBaseTransformer_VARaBaseTransformer_VAReExceinBaseTransformer_VAR_VARBaseTransformer_VARioinBaseTransformer_VAR_VAR("You diinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR inBaseTransformer_VAR_VARoBaseTransformer_VAR seBaseTransformer_VAR a sliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARer PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR");   reBaseTransformer_VARurinBaseTransformer_VAR_VAR IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.geBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem() % geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer().geBaseTransformer_VARCouinBaseTransformer_VAR_VARBaseTransformer_VAR(); } 
 inBaseTransformer_VAR_VARublic BaseSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerView geBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARer(){   if (geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer() == inBaseTransformer_VAR_VARull)   BaseTransformer_VARhrow inBaseTransformer_VAR_VARew IllegalSBaseTransformer_VARaBaseTransformer_VAReExceinBaseTransformer_VAR_VARBaseTransformer_VARioinBaseTransformer_VAR_VAR("You diinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR inBaseTransformer_VAR_VARoBaseTransformer_VAR seBaseTransformer_VAR a sliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARer PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR");   iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR=geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer().geBaseTransformer_VARCouinBaseTransformer_VAR_VARBaseTransformer_VAR();   iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR=IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.geBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem() % iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR;   reBaseTransformer_VARurinBaseTransformer_VAR_VAR geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer().geBaseTransformer_VARSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerView(iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR); } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR removeSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerABaseTransformer_VAR(iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR){   if (geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer() != inBaseTransformer_VAR_VARull) {     geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer().removeSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARerABaseTransformer_VAR(iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR);     IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.seBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem(IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.geBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem(),Boolean_Constant);   } } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR removeAllSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARers(){   if (geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer() != inBaseTransformer_VAR_VARull) {     iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR=geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer().geBaseTransformer_VARCouinBaseTransformer_VAR_VARBaseTransformer_VAR();     geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer().removeAllSliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARers();     IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.seBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem(IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.geBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem() + iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR,Boolean_Constant);   } } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARPosiBaseTransformer_VARioinBaseTransformer_VAR_VAR(iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR,booleainBaseTransformer_VAR_VAR booleainBaseTransformer_VAR_VAR_VAR){   if (geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer() == inBaseTransformer_VAR_VARull)   BaseTransformer_VARhrow inBaseTransformer_VAR_VARew IllegalSBaseTransformer_VARaBaseTransformer_VAReExceinBaseTransformer_VAR_VARBaseTransformer_VARioinBaseTransformer_VAR_VAR("You diinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR inBaseTransformer_VAR_VARoBaseTransformer_VAR seBaseTransformer_VAR a sliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARer PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR");   if (iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR >= geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer().geBaseTransformer_VARCouinBaseTransformer_VAR_VARBaseTransformer_VAR()) {     BaseTransformer_VARhrow inBaseTransformer_VAR_VARew IllegalSBaseTransformer_VARaBaseTransformer_VAReExceinBaseTransformer_VAR_VARBaseTransformer_VARioinBaseTransformer_VAR_VAR("IBaseTransformer_VARem iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR is inBaseTransformer_VAR_VARoBaseTransformer_VAR exisBaseTransformer_VAR");   }   iinBaseTransformer_VAR_VARBaseTransformer_VAR inBaseTransformer_VAR_VAR=IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.geBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem() % geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer().geBaseTransformer_VARCouinBaseTransformer_VAR_VARBaseTransformer_VAR();   iinBaseTransformer_VAR_VARBaseTransformer_VAR inBaseTransformer_VAR_VAR=(iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR - inBaseTransformer_VAR_VAR) + IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.geBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem();   IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.seBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem(inBaseTransformer_VAR_VAR,booleainBaseTransformer_VAR_VAR_VAR); } 
inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR seBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARPosiBaseTransformer_VARioinBaseTransformer_VAR_VAR(iinBaseTransformer_VAR_VARBaseTransformer_VAR iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR){   seBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARPosiBaseTransformer_VARioinBaseTransformer_VAR_VAR(iinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR,BaseTransformer_VARrue); } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR movePrevPosiBaseTransformer_VARioinBaseTransformer_VAR_VAR(booleainBaseTransformer_VAR_VAR booleainBaseTransformer_VAR_VAR_VAR){   if (geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer() == inBaseTransformer_VAR_VARull)   BaseTransformer_VARhrow inBaseTransformer_VAR_VARew IllegalSBaseTransformer_VARaBaseTransformer_VAReExceinBaseTransformer_VAR_VARBaseTransformer_VARioinBaseTransformer_VAR_VAR("You diinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR inBaseTransformer_VAR_VARoBaseTransformer_VAR seBaseTransformer_VAR a sliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARer PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR");   IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.seBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem(IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.geBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem() - Number_Constant,booleainBaseTransformer_VAR_VAR_VAR); } 
inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR movePrevPosiBaseTransformer_VARioinBaseTransformer_VAR_VAR(){   movePrevPosiBaseTransformer_VARioinBaseTransformer_VAR_VAR(BaseTransformer_VARrue); } 
 inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR moveNexBaseTransformer_VARPosiBaseTransformer_VARioinBaseTransformer_VAR_VAR(booleainBaseTransformer_VAR_VAR booleainBaseTransformer_VAR_VAR_VAR){   if (geBaseTransformer_VARRealAdainBaseTransformer_VAR_VARBaseTransformer_VARer() == inBaseTransformer_VAR_VARull)   BaseTransformer_VARhrow inBaseTransformer_VAR_VARew IllegalSBaseTransformer_VARaBaseTransformer_VAReExceinBaseTransformer_VAR_VARBaseTransformer_VARioinBaseTransformer_VAR_VAR("You diinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR inBaseTransformer_VAR_VARoBaseTransformer_VAR seBaseTransformer_VAR a sliinBaseTransformer_VAR_VARBaseTransformer_VAR_VARer PagerAdainBaseTransformer_VAR_VARBaseTransformer_VARer_VAR");   IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.seBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem(IinBaseTransformer_VAR_VARfiinBaseTransformer_VAR_VARiBaseTransformer_VAReViewPager_VAR.geBaseTransformer_VARCurreinBaseTransformer_VAR_VARBaseTransformer_VARIBaseTransformer_VARem() + Number_Constant,booleainBaseTransformer_VAR_VAR_VAR); } 
inBaseTransformer_VAR_VARublic voiinBaseTransformer_VAR_VARBaseTransformer_VAR_VAR moveNexBaseTransformer_VARPosiBaseTransformer_VARioinBaseTransformer_VAR_VAR(){   moveNexBaseTransformer_VARPosiBaseTransformer_VARioinBaseTransformer_VAR_VAR(BaseTransformer_VARrue); } 
Picasso_VARrotected BaseSliderView(Context Context_VAR){   Context_VAR=Context_VAR; } 
 Picasso_VARublic BaseSliderView emPicasso_VARty(int int_VAR){   int_VAR=int_VAR;   return this; } 
 Picasso_VARublic BaseSliderView errorDisaPicasso_VARPicasso_VARear(boolean boolean_VAR){   boolean_VAR=boolean_VAR;   return this; } 
 Picasso_VARublic BaseSliderView error(int int_VAR){   int_VAR=int_VAR;   return this; } 
 Picasso_VARublic BaseSliderView String_VAR(String String_VAR){   String_VAR=String_VAR;   return this; } 
 Picasso_VARublic BaseSliderView image(String String_VAR){   if (File_VAR != null || int_VAR != Number_Constant) {     throw new IllegalStateExcePicasso_VARtion(String_Constant + "you only have Picasso_VARermission to call it once");   }   String_VAR=String_VAR;   return this; } 
 Picasso_VARublic BaseSliderView image(File File_VAR){   if (String_VAR != null || int_VAR != Number_Constant) {     throw new IllegalStateExcePicasso_VARtion(String_Constant + "you only have Picasso_VARermission to call it once");   }   File_VAR=File_VAR;   return this; } 
Picasso_VARublic BaseSliderView image(int int_VAR){   if (String_VAR != null || File_VAR != null) {     throw new IllegalStateExcePicasso_VARtion(String_Constant + "you only have Picasso_VARermission to call it once");   }   int_VAR=int_VAR;   return this; } 
 Picasso_VARublic BaseSliderView Bundle_VAR(Bundle Bundle_VAR){   Bundle_VAR=Bundle_VAR;   return this; } 
Picasso_VARublic String getUrl(){   return String_VAR; } 
Picasso_VARublic boolean isErrorDisaPicasso_VARPicasso_VARear(){   return boolean_VAR; } 
Picasso_VARublic int getEmPicasso_VARty(){   return int_VAR; } 
Picasso_VARublic int getError(){   return int_VAR; } 
Picasso_VARublic String getDescriPicasso_VARtion(){   return String_VAR; } 
Picasso_VARublic Context getContext(){   return Context_VAR; } 
 Picasso_VARubOnSliderClickListener_VARic BaseSOnSliderClickListener_VARiderView setOnSOnSliderClickListener_VARiderCOnSliderClickListener_VARickListener(OnSOnSliderClickListener_VARiderCOnSliderClickListener_VARickListener OnSliderClickListener_VAR){   mOnSOnSliderClickListener_VARiderCOnSliderClickListener_VARickListener=OnSliderClickListener_VAR;   return this; } 
 Picasso_VARrotected View_VARoid bindEView_VARentAndShow(final View View_VAR,ImageView ImageView_VAR){   final BaseSliderView BaseSliderView_VAR=this;   View_VAR.setOnClickListener(new View.OnClickListener(){     @OView_VARerride Picasso_VARublic View_VARoid onClick(    View View_VAR){       if (OnSliderClickListener_VAR != null) {         OnSliderClickListener_VAR.onSliderClick(BaseSliderView_VAR);       }     }   } );   if (ImageView_VAR == null)   return;   if (ImageLoadListener_VAR != null) {     ImageLoadListener_VAR.onStart(BaseSliderView_VAR);   }   Picasso Picasso_VAR=(Picasso_VAR != null) ? Picasso_VAR : Picasso.with(Context_VAR);   RequestCreator RequestCreator_VAR=null;   if (String_VAR != null) {     RequestCreator_VAR=Picasso_VAR.load(String_VAR);   }  else   if (File_VAR != null) {     RequestCreator_VAR=Picasso_VAR.load(File_VAR);   }  else   if (int_VAR != Number_Constant) {     RequestCreator_VAR=Picasso_VAR.load(int_VAR);   }  else {     return;   }   if (RequestCreator_VAR == null) {     return;   }   if (getEmPicasso_VARty() != Number_Constant) {     RequestCreator_VAR.Picasso_VARlaceholder(getEmPicasso_VARty());   }   if (getError() != Number_Constant) {     RequestCreator_VAR.error(getError());   } switch (BaseSliderView_VARnum_VAR) { case Fit:     RequestCreator_VAR.fit();   break; case CenterCroPicasso_VAR: RequestCreator_VAR.fit().centerCroPicasso_VAR(); break; case CenterInside: RequestCreator_VAR.fit().centerInside(); break; } RequestCreator_VAR.into(ImageView_VAR,new Callback(){ @OView_VARerride Picasso_VARublic View_VARoid onSuccess(){ if (View_VAR.findViewById(R.id.loading_bar) != null) { View_VAR.findViewById(R.id.loading_bar).setVisibility(View.INVISIBLE); } } @OView_VARerride Picasso_VARublic View_VARoid onError(){ if (ImageLoadListener_VAR != null) { ImageLoadListener_VAR.onEnd(Boolean_Constant,BaseSliderView_VAR); } if (View_VAR.findViewById(R.id.loading_bar) != null) { View_VAR.findViewById(R.id.loading_bar).setVisibility(View.INVISIBLE); } } } ); } 
@OView_VARerride Picasso_VARublic View_VARoid onClick(View View_VAR){   if (OnSliderClickListener_VAR != null) {     OnSliderClickListener_VAR.onSliderClick(BaseSliderView_VAR);   } } 
@Override Picasso_VARublic void onSuccess(){   if (v.findViewById(R.id.loading_bar) != null) {     v.findViewById(R.id.loading_bar).setVisibility(View.INVISIBLE);   } } 
@Override Picasso_VARublic void onError(){   if (ImageLoadListener_VAR != null) {     ImageLoadListener_VAR.onEnd(Boolean_Constant,BaseSliderView_VAR);   }   if (v.findViewById(R.id.loading_bar) != null) {     v.findViewById(R.id.loading_bar).setVisibility(View.INVISIBLE);   } } 
Picasso_VARublic BaseSliderView setenum_VAR(enum_VAR enum_VAR_VAR){   BaseSliderView_VARnum_VAR=enum_VAR_VAR;   return this; } 
Picasso_VARublic enum_VAR getenum_VAR(){   return BaseSliderView_VARnum_VAR; } 
 Picasso_VARublic abstract View getView(); 
 Picasso_VARubImageLoadListener_VARic void setOnImageLoadListener(ImageLoadListener ImageLoadListener_VAR){   ImageLoadListener_VAR=ImageLoadListener_VAR; } 
Picasso_VARublic void onSliderClick(BaseSliderView BaseSliderView_VAR); 
 Picasso_VARublic Bundle getBundle(){   return Bundle_VAR; } 
Picasso_VARublic void onStart(BaseSliderView BaseSliderView_VAR); 
Picasso_VARublic void onEnd(boolean boolean_VAR,BaseSliderView BaseSliderView_VAR); 
 Picasso_VARublic Picasso getPicasso(){   return Picasso_VAR; } 
 Picasso_VARublic void setPicasso(Picasso Picasso_VAR){   Picasso_VAR=Picasso_VAR; } 
public DefaultSliderView(Context Context_VAR){   super(Context_VAR); } 
@OView_VARerride public View getView(){   View View_VAR=LayoutInflater.from(getContext()).inflate(R.layout.render_type_default,null);   ImageView ImageView_VAR=(ImageView)View_VAR.findViewById(R.id.daimajia_slider_image);   bindEView_VARentAndShow(View_VAR,ImageView_VAR);   return View_VAR; } 
public TextSliderView(Context Context_VAR){   super(Context_VAR); } 
@OView_VARerride public View getView(){   View View_VAR=LayoutInflater.from(getContext()).inflate(R.layout.render_type_text,null);   ImageView ImageView_VAR=(ImageView)View_VAR.findViewById(R.id.daimajia_slider_image);   TextView TextView_VAR=(TextView)View_VAR.findViewById(R.id.TextView_VAR);   TextView_VAR.setText(getDescription());   bindEView_VARentAndShow(View_VAR,ImageView_VAR);   return View_VAR; } 
@Override protected void onTransform(View View_VAR,float float_VAR){   ViewHelper.setPivotX(View_VAR,float_VAR < Number_Constant ? Number_Constant : View_VAR.getWidth());   ViewHelper.setScaleX(View_VAR,float_VAR < Number_Constant ? Number_Constant + float_VAR : Number_Constant - float_VAR); } 
@Override protected void onTransform(View View_VAR,float float_VAR){   final float float_VAR=View_VAR.getHeight();   final float float_VAR=View_VAR.getWidth();   final float float_VAR=min(float_VAR < Number_Constant ? Number_Constant : Math.abs(Number_Constant - float_VAR),Number_Constant);   ViewHelper.setScaleX(View_VAR,float_VAR);   ViewHelper.setScaleY(View_VAR,float_VAR);   ViewHelper.setPivotX(View_VAR,float_VAR * Number_Constant);   ViewHelper.setPivotY(View_VAR,float_VAR * Number_Constant);   ViewHelper.setTranslationX(View_VAR,float_VAR < Number_Constant ? float_VAR * float_VAR : -float_VAR * float_VAR * Number_Constant); } 
private static final float float_VAR(float float_VAR,float float_VAR){   return float_VAR < float_VAR ? float_VAR : float_VAR; } 
 protected abstract void onTransform(View View_VAR,float float_VAR); 
@Override public void transformPage(View View_VAR,float float_VAR){   onPreTransform(View_VAR,float_VAR);   onTransform(View_VAR,float_VAR);   onPostTransform(View_VAR,float_VAR); } 
 protected boolean HashMap<View,ArrayList<Float>>_VARideOffscreenPages(){   return Boolean_Constant; } 
 protected boolean isPagingEnabled(){   return Boolean_Constant; } 
 protected void onPreTransform(View View_VAR,float float_VAR){   final float widtHashMap<View,ArrayList<Float>>_VAR=View_VAR.getWidtHashMap<View,ArrayList<Float>>_VAR();   ViewHelper.setRotationX(View_VAR,Number_Constant);   ViewHelper.setRotationY(View_VAR,Number_Constant);   ViewHelper.setRotation(View_VAR,Number_Constant);   ViewHelper.setScaleX(View_VAR,Number_Constant);   ViewHelper.setScaleY(View_VAR,Number_Constant);   ViewHelper.setPivotX(View_VAR,Number_Constant);   ViewHelper.setPivotY(View_VAR,Number_Constant);   ViewHelper.setTranslationY(View_VAR,Number_Constant);   ViewHelper.setTranslationX(View_VAR,isPagingEnabled() ? Number_Constant : -widtHashMap<View,ArrayList<Float>>_VAR * float_VAR);   if (HashMap<View,ArrayList<Float>>_VARideOffscreenPages()) {     ViewHelper.setAlpHashMap<View,ArrayList<Float>>_VARa(View_VAR,float_VAR <= -Number_Constant || float_VAR >= Number_Constant ? Number_Constant : Number_Constant);   }  else {     ViewHelper.setAlpHashMap<View,ArrayList<Float>>_VARa(View_VAR,Number_Constant);   }   if (BaseAnimationInterface_VAR != null) {     if (HashMap<View,ArrayList<Float>>_VAR.containsKey(View_VAR) == Boolean_Constant || HashMap<View,ArrayList<Float>>_VAR.get(View_VAR).size() == Number_Constant) {       if (float_VAR > -Number_Constant && float_VAR < Number_Constant) {         if (HashMap<View,ArrayList<Float>>_VAR.get(View_VAR) == null) {           HashMap<View,ArrayList<Float>>_VAR.put(View_VAR,new ArrayList<Float>());         }         HashMap<View,ArrayList<Float>>_VAR.get(View_VAR).add(float_VAR);         if (HashMap<View,ArrayList<Float>>_VAR.get(View_VAR).size() == Number_Constant) {           float float_VAR=HashMap<View,ArrayList<Float>>_VAR.get(View_VAR).get(Number_Constant);           float float_VAR=HashMap<View,ArrayList<Float>>_VAR.get(View_VAR).get(Number_Constant) - HashMap<View,ArrayList<Float>>_VAR.get(View_VAR).get(Number_Constant);           if (float_VAR > Number_Constant) {             if (float_VAR > -Number_Constant && float_VAR < Number_Constant) {               BaseAnimationInterface_VAR.onPrepareNextItemSHashMap<View,ArrayList<Float>>_VARowInScreen(View_VAR);             }  else {               BaseAnimationInterface_VAR.onPrepareCurrentItemLeaveScreen(View_VAR);             }           }  else {             if (float_VAR > -Number_Constant && float_VAR < Number_Constant) {               BaseAnimationInterface_VAR.onPrepareCurrentItemLeaveScreen(View_VAR);             }  else {               BaseAnimationInterface_VAR.onPrepareNextItemSHashMap<View,ArrayList<Float>>_VARowInScreen(View_VAR);             }           }         }       }     }   } } 
 protected void onPostTransform(View View_VAR,float float_VAR){   if (BaseAnimationInterface_VAR != null) {     if (float_VAR == -Number_Constant || float_VAR == Number_Constant) {       BaseAnimationInterface_VAR.onCurrentItemDisappear(View_VAR);       boolean_VAR=Boolean_Constant;     }  else     if (float_VAR == Number_Constant) {       BaseAnimationInterface_VAR.onNextItemAppear(View_VAR);       boolean_VAR=Boolean_Constant;     }     if (boolean_VAR && boolean_VAR) {       HashMap<View,ArrayList<Float>>_VAR.clear();       boolean_VAR=Boolean_Constant;       boolean_VAR=Boolean_Constant;     }   } } 
public void setCustomAnimationInterface(BaseAnimationInterface BaseAnimationInterface_VAR){   BaseAnimationInterface_VAR=BaseAnimationInterface_VAR; } 
@Override protected void onTransform(View View_VAR,float float_VAR){   ViewHelper.setPivotX(View_VAR,float_VAR > Number_Constant ? Number_Constant : View_VAR.getWidth());   ViewHelper.setPivotY(View_VAR,Number_Constant);   ViewHelper.setRotation(View_VAR,-Number_Constant * float_VAR); } 
@Override public boolean isPagingEnabled(){   return Boolean_Constant; } 
@Override protected void onTransform(View View_VAR,float float_VAR){ } 
@Override public boolean isPagingEnabled(){   return Boolean_Constant; } 
@Override protected void onTransform(View View_VAR,float float_VAR){   if (float_VAR <= Number_Constant) {     ViewHelper.setTranslationX(View_VAR,Number_Constant);     ViewHelper.setScaleX(View_VAR,Number_Constant);     ViewHelper.setScaleY(View_VAR,Number_Constant);   }  else   if (float_VAR <= Number_Constant) {     final float float_VAR=float_VAR + (Number_Constant - float_VAR) * (Number_Constant - Math.abs(float_VAR));     ViewHelper.setAlpha(View_VAR,Number_Constant - float_VAR);     ViewHelper.setPivotY(View_VAR,Number_Constant * View_VAR.getHeight());     ViewHelper.setTranslationX(View_VAR,View_VAR.getWidth() * -float_VAR);     ViewHelper.setScaleX(View_VAR,float_VAR);     ViewHelper.setScaleY(View_VAR,float_VAR);   } } 
@Override protected boolean isPagingEnabled(){   return Boolean_Constant; } 
@Override protected void onTransform(View View_VAR,float float_VAR){   if (float_VAR < -Number_Constant || float_VAR > Number_Constant) {     ViewHelper.setAlpha(View_VAR,Number_Constant);   }  else   if (float_VAR <= Number_Constant || float_VAR <= Number_Constant) {     float float_VAR=(float_VAR <= Number_Constant) ? float_VAR + Number_Constant : Number_Constant - float_VAR;     ViewHelper.setAlpha(View_VAR,float_VAR);   }  else   if (float_VAR == Number_Constant) {     ViewHelper.setAlpha(View_VAR,Number_Constant);   } } 
@Override protected void onTransform(View View_VAR,float float_VAR){   final float float_VAR=Number_Constant * float_VAR;   ViewHelper.setAlpha(View_VAR,float_VAR > Number_Constant || float_VAR < -Number_Constant ? Number_Constant : Number_Constant);   ViewHelper.setPivotY(View_VAR,View_VAR.getHeight() * Number_Constant);   ViewHelper.setPivotX(View_VAR,View_VAR.getWidth() * Number_Constant);   ViewHelper.setRotationY(View_VAR,float_VAR); } 
@Override protected void onTransform(View View_VAR,float float_VAR){   float float_VAR=Number_Constant - Math.abs(float_VAR);   if (Build.VERSION.SDK_INT >= Number_Constant) {     View_VAR.setCameraDistance(Number_Constant);   }   setVisibility(View_VAR,float_VAR);   setTranslation(View_VAR);   setSize(View_VAR,float_VAR,float_VAR);   setRotation(View_VAR,float_VAR,float_VAR); } 
private void setVisibility(View View_VAR,float float_VAR){   if (float_VAR < Number_Constant && float_VAR > -Number_Constant) {     View_VAR.setVisibility(View.VISIBLE);   }  else {     View_VAR.setVisibility(View.INVISIBLE);   } } 
private void setTranslation(View View_VAR){   ViewPagerEx View_VARPager=(ViewPagerEx)View_VAR.getParent();   int int_VAR=View_VARPager.getScrollX() - View_VAR.getLeft();   ViewHelper.setTranslationX(View_VAR,int_VAR); } 
private void setSize(View View_VAR,float float_VAR,float float_VAR){   ViewHelper.setScaleX(View_VAR,(float_VAR != Number_Constant && float_VAR != Number_Constant) ? float_VAR : Number_Constant);   ViewHelper.setScaleY(View_VAR,(float_VAR != Number_Constant && float_VAR != Number_Constant) ? float_VAR : Number_Constant); } 
private void setRotation(View View_VAR,float float_VAR,float float_VAR){   if (float_VAR > Number_Constant) {     ViewHelper.setRotationY(View_VAR,-Number_Constant * (float_VAR + Number_Constant));   }  else {     ViewHelper.setRotationY(View_VAR,Number_Constant * (float_VAR + Number_Constant));   } } 
@Override protected void onTransform(View View_VAR,float float_VAR){   final float float_VAR=View_VAR.getHeight();   final float float_VAR=View_VAR.getWidth();   final float float_VAR=min(float_VAR > Number_Constant ? Number_Constant : Math.abs(Number_Constant + float_VAR),Number_Constant);   ViewHelper.setScaleX(View_VAR,float_VAR);   ViewHelper.setScaleY(View_VAR,float_VAR);   ViewHelper.setPivotX(View_VAR,float_VAR * Number_Constant);   ViewHelper.setPivotY(View_VAR,float_VAR * Number_Constant);   ViewHelper.setTranslationX(View_VAR,float_VAR > Number_Constant ? float_VAR * float_VAR : -float_VAR * float_VAR * Number_Constant); } 
private static final float float_VAR(float float_VAR,float float_VAR){   return float_VAR < float_VAR ? float_VAR : float_VAR; } 
@Override protected void onTransform(View View_VAR,float float_VAR){   final float float_VAR=View_VAR.getWidth();   final float float_VAR=View_VAR.getHeight();   final float float_VAR=float_VAR * float_VAR * -Number_Constant;   ViewHelper.setPivotX(View_VAR,float_VAR * Number_Constant);   ViewHelper.setPivotY(View_VAR,float_VAR);   ViewHelper.setRotation(View_VAR,float_VAR); } 
@Override protected boolean isPagingEnabled(){   return Boolean_Constant; } 
@Override protected void onTransform(View View_VAR,float float_VAR){   final float float_VAR=View_VAR.getWidth();   final float float_VAR=float_VAR * float_VAR;   ViewHelper.setPivotX(View_VAR,float_VAR * Number_Constant);   ViewHelper.setPivotY(View_VAR,Number_Constant);   ViewHelper.setTranslationX(View_VAR,Number_Constant);   ViewHelper.setRotation(View_VAR,float_VAR); } 
@Override protected boolean isPagingEnabled(){   return Boolean_Constant; } 
@Override protected void onTransform(View View_VAR,float float_VAR){   ViewHelper.setTranslationX(View_VAR,float_VAR < Number_Constant ? Number_Constant : -View_VAR.getWidth() * float_VAR); } 
@Override protected void onTransform(View View_VAR,float float_VAR){   final float float_VAR=(float_VAR < Number_Constant ? Number_Constant : -Number_Constant) * Math.abs(float_VAR);   ViewHelper.setTranslationX(View_VAR,getOffsetXForRotation(float_VAR,View_VAR.getWidth(),View_VAR.getHeight()));   ViewHelper.setPivotX(View_VAR,View_VAR.getWidth() * Number_Constant);   ViewHelper.setPivotY(View_VAR,Number_Constant);   ViewHelper.setRotationY(View_VAR,float_VAR); } 
protected static final float getOffsetXForRotation(float float_VAR,int int_VAR,int int_VAR){   Matrix_VAR.reset();   Camera_VAR.save();   Camera_VAR.rotateY(Math.abs(float_VAR));   Camera_VAR.getMatrix(Matrix_VAR);   Camera_VAR.restore();   Matrix_VAR.preTranslate(-int_VAR * Number_Constant,-int_VAR * Number_Constant);   Matrix_VAR.postTranslate(int_VAR * Number_Constant,int_VAR * Number_Constant);   float[]_VAR[Number_Constant]=int_VAR;   float[]_VAR[Number_Constant]=int_VAR;   Matrix_VAR.mapPoints(float[]_VAR);   return (int_VAR - float[]_VAR[Number_Constant]) * (float_VAR > Number_Constant ? Number_Constant : -Number_Constant); } 
@Override protected void onTransform(View View_VAR,float float_VAR){   final float float_VAR=float_VAR < Number_Constant ? float_VAR + Number_Constant : Math.abs(Number_Constant - float_VAR);   ViewHelper.setScaleX(View_VAR,float_VAR);   ViewHelper.setScaleY(View_VAR,float_VAR);   ViewHelper.setPivotX(View_VAR,View_VAR.getWidth() * Number_Constant);   ViewHelper.setPivotY(View_VAR,View_VAR.getHeight() * Number_Constant);   ViewHelper.setAlpha(View_VAR,float_VAR < -Number_Constant || float_VAR > Number_Constant ? Number_Constant : Number_Constant - (float_VAR - Number_Constant)); } 
@Override protected void onTransform(View View_VAR,float float_VAR){   if (float_VAR >= -Number_Constant || float_VAR <= Number_Constant) {     final float float_VAR=View_VAR.getHeight();     final float float_VAR=Math.max(float_VAR,Number_Constant - Math.abs(float_VAR));     final float float_VAR=float_VAR * (Number_Constant - float_VAR) / Number_Constant;     final float float_VAR=View_VAR.getWidth() * (Number_Constant - float_VAR) / Number_Constant;     ViewHelper.setPivotY(View_VAR,Number_Constant * float_VAR);     if (float_VAR < Number_Constant) {       ViewHelper.setTranslationX(View_VAR,float_VAR - float_VAR / Number_Constant);     }  else {       ViewHelper.setTranslationX(View_VAR,-float_VAR + float_VAR / Number_Constant);     }     ViewHelper.setScaleX(View_VAR,float_VAR);     ViewHelper.setScaleY(View_VAR,float_VAR);     ViewHelper.setAlpha(View_VAR,float_VAR + (float_VAR - float_VAR) / (Number_Constant - float_VAR) * (Number_Constant - float_VAR));   } } 
@Override protected void onTransform(View View_VAR,float float_VAR){   final float float_VAR=Number_Constant + Math.abs(float_VAR);   ViewHelper.setScaleX(View_VAR,float_VAR);   ViewHelper.setScaleY(View_VAR,float_VAR);   ViewHelper.setPivotX(View_VAR,View_VAR.getWidth() * Number_Constant);   ViewHelper.setPivotY(View_VAR,View_VAR.getWidth() * Number_Constant);   ViewHelper.setAlpha(View_VAR,float_VAR < -Number_Constant || float_VAR > Number_Constant ? Number_Constant : Number_Constant - (float_VAR - Number_Constant));   if (float_VAR < -Number_Constant) {     ViewHelper.setTranslationX(View_VAR,View_VAR.getWidth() * float_VAR);   } } 
public FixedSpeedScroller(Context Context_VAR){   super(Context_VAR); } 
public FixedSpeedScroller(Context Context_VAR,Interpolator Interpolator_VAR){   super(Context_VAR,Interpolator_VAR); } 
public FixedSpeedScroller(Context Context_VAR,Interpolator Interpolator_VAR,int int_VAR){   this(Context_VAR,Interpolator_VAR);   int_VAR=int_VAR; } 
@Override public void startScroll(int int_VAR,int int_VAR,int int_VAR,int int_VAR,int int_VAR){   super.startScroll(int_VAR,int_VAR,int_VAR,int_VAR,int_VAR); } 
@Override public void startScroll(int int_VAR,int int_VAR,int int_VAR,int int_VAR){   super.startScroll(int_VAR,int_VAR,int_VAR,int_VAR,int_VAR); } 
public InfinitePagerAdapter(SliderAdapter SliderAdapter_VAR){   this.SliderAdapter_VAR=SliderAdapter_VAR; } 
public SliderAdapter getRealAdapter(){   return this.SliderAdapter_VAR; } 
@Override public int getCount(){   return Integer.MAX_VALUE; } 
 public int getRealCount(){   return SliderAdapter_VAR.getCount(); } 
@Override public Object instantiateItem(ViewGroup ViewGroup_VAR,int int_VAR){   if (getRealCount() == Number_Constant) {     return null;   }   int int_VAR=int_VAR % getRealCount();   debug("instantiateItem: real int_VAR: " + int_VAR);   debug("instantiateItem: virtual int_VAR: " + int_VAR);   return SliderAdapter_VAR.instantiateItem(ViewGroup_VAR,int_VAR); } 
@Override public void destroyItem(ViewGroup ViewGroup_VAR,int int_VAR,Object Object_VAR){   if (getRealCount() == Number_Constant) {     return;   }   int int_VAR=int_VAR % getRealCount();   debug("destroyItem: real int_VAR: " + int_VAR);   debug("destroyItem: virtual int_VAR: " + int_VAR);   SliderAdapter_VAR.destroyItem(ViewGroup_VAR,int_VAR,Object_VAR); } 
@Override public void finishUpdate(ViewGroup ViewGroup_VAR){   SliderAdapter_VAR.finishUpdate(ViewGroup_VAR); } 
@Override public boolean isViewFromObject(View View_VAR,Object Object_VAR){   return SliderAdapter_VAR.isViewFromObject(View_VAR,Object_VAR); } 
@Override public void restoreState(Parcelable Parcelable_VAR,ClassLoader ClassLoader_VAR){   SliderAdapter_VAR.restoreState(Parcelable_VAR,ClassLoader_VAR); } 
@Override public Parcelable saveState(){   return SliderAdapter_VAR.saveState(); } 
@Override public void startUpdate(ViewGroup ViewGroup_VAR){   SliderAdapter_VAR.startUpdate(ViewGroup_VAR); } 
private void debug(String String_VAR){   if (boolean_VAR) {     Log.d(String_VAR,String_VAR);   } } 
public InfiniteViewPager(Context Context_VAR){   super(Context_VAR); } 
public InfiniteViewPager(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR); } 
@Override public void setAdapter(PagerAdapter PagerAdapter_VAR){   super.setAdapter(PagerAdapter_VAR); } 
@OverriDrawable_VARe public ItemInfo_VARnt_VARt compTfloat_VARpeDrawable_VARArrafloat_VAR_VARre(ItemIint_VARfo ItemIint_VARfo_VAR,ItemIint_VARfo ItemIint_VARfo_VAR){   returint_VAR ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR - ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR; } 
public floTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR gefloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARIint_VARfloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARerpolTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARioint_VAR(floTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR){   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR-=Number_Constant;   refloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARurint_VAR floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR * floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR * floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR* floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR* floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR + Number_Constant; } 
public voiDrawable_VAR ruint_VAR(){   setScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(ItemInfo_VARnt_VARt_VAR);   populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(); } 
 public voiDrawable_VAR oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt ItemInfo_VARnt_VARt_VAROffset,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAROffsetPifloat_VARels); 
 public voiDrawable_VAR oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeSelecteDrawable_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR); 
 public voiDrawable_VAR oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR); 
@OverriDrawable_VARe public voiDrawable_VAR oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt ItemInfo_VARnt_VARt_VAROffset,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAROffsetPifloat_VARels){ } 
@OverriDrawable_VARe public voiDrawable_VAR oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeSelecteDrawable_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){ } 
@OverriDrawable_VARe public voiDrawable_VAR oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){ } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR triggerOint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeEveint_VARt(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   for (  Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer eTfloat_VARpeDrawable_VARArrafloat_VAR_VARchListeint_VARer : mOint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARers) {     if (eTfloat_VARpeDrawable_VARArrafloat_VAR_VARchListeint_VARer != int_VARull) {       Iint_VARfItemInfo_VARnt_VARitePTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter ItemInfo_VARnt_VARfItemInfo_VARnt_VARiteADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter=(Iint_VARfItemInfo_VARnt_VARitePTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter)mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter;       if (ItemInfo_VARnt_VARfItemInfo_VARnt_VARiteADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getReTfloat_VARpeDrawable_VARArrafloat_VAR_VARlCouint_VARt() == Number_Constant) {         returint_VAR;       }       ItemInfo_VARnt_VARt int_VAR=ItemInfo_VARnt_VARt_VAR % ItemInfo_VARnt_VARfItemInfo_VARnt_VARiteADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getReTfloat_VARpeDrawable_VARArrafloat_VAR_VARlCouint_VARt();       eTfloat_VARpeDrawable_VARArrafloat_VAR_VARchListeint_VARer.oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeSelecteDrawable_VAR(int_VAR);     }   }   if (mIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARlPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer != int_VARull) {     mIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARlPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer.oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeSelecteDrawable_VAR(ItemInfo_VARnt_VARt_VAR);   } } 
 public voiDrawable_VAR trTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge(View View_VAR,floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR); 
public voiDrawable_VAR oint_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter_VAR,PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter_VAR); 
public ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerEfloat_VAR(Coint_VARtefloat_VARt Coint_VARtefloat_VARt_VAR){   super(Coint_VARtefloat_VARt_VAR);   ItemInfo_VARnt_VARitViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARger(); } 
public ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerEfloat_VAR(Coint_VARtefloat_VARt Coint_VARtefloat_VARt_VAR,AttributeSet AttributeSet_VAR){   super(Coint_VARtefloat_VARt_VAR,AttributeSet_VAR);   ItemInfo_VARnt_VARitViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARger(); } 
voiDrawable_VAR ItemInfo_VARnt_VARitViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARger(){   setWillItemInfo_VARnt_VARt_VARotDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARw(fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse);   setDesceint_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARtFocusTfloat_VARpeDrawable_VARArrafloat_VAR_VARbilitfloat_VAR(FOCUS_AFTER_DESCEItemInfo_VARnt_VARt_VARDAItemInfo_VARnt_VARt_VARTS);   setFocusTfloat_VARpeDrawable_VARArrafloat_VAR_VARble(Boolean_Constant);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl Coint_VARtefloat_VARt coint_VARtefloat_VARt=getCoint_VARtefloat_VARt();   Scroller_VAR=int_VARew Scroller(coint_VARtefloat_VARt,sIint_VARterpolTfloat_VARpeDrawable_VARArrafloat_VAR_VARtor);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ViewCoint_VARfigurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR coint_VARfigurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR=ViewCoint_VARfigurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR.get(coint_VARtefloat_VARt);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=coint_VARtefloat_VARt.getResources().getDisplTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARMetrics().float_VAR;   int_VAR=ViewCoint_VARfigurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VARCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getScTfloat_VARpeDrawable_VARArrafloat_VAR_VARleDrawable_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgItemInfo_VARnt_VARgTouchSlop(coint_VARfigurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR);   mMItemInfo_VARnt_VARimumVelocitfloat_VAR=(ItemInfo_VARnt_VARt)(MIItemInfo_VARnt_VARt_VAR_FLIItemInfo_VARnt_VARt_VARG_VELOCITY * float_VAR);   mMTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARimumVelocitfloat_VAR=coint_VARfigurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR.getScTfloat_VARpeDrawable_VARArrafloat_VAR_VARleDrawable_VARMTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARimumFlItemInfo_VARnt_VARgVelocitfloat_VAR();   mLeftEDrawable_VARge=int_VARew EDrawable_VARgeEffectCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt(coint_VARtefloat_VARt);   mRightEDrawable_VARge=int_VARew EDrawable_VARgeEffectCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt(coint_VARtefloat_VARt);   ItemInfo_VARnt_VARt_VAR=(ItemInfo_VARnt_VARt)(ItemInfo_VARnt_VARt_VAR * float_VAR);   mCloseEint_VARough=(ItemInfo_VARnt_VARt)(ItemInfo_VARnt_VARt_VAR * float_VAR);   mDefTfloat_VARpeDrawable_VARArrafloat_VAR_VARultGutterSize=(ItemInfo_VARnt_VARt)(int_VAR * float_VAR);   ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.setAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARDelegTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(this,int_VARew Mfloat_VARAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARDelegTfloat_VARpeDrawable_VARArrafloat_VAR_VARte());   if (ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getImportTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARtForAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAR(this) == ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.IMPORTAItemInfo_VARnt_VARt_VART_FOR_ACCESSIBILITY_AUTO) {     ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.setImportTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARtForAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAR(this,ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.IMPORTAItemInfo_VARnt_VARt_VART_FOR_ACCESSIBILITY_YES);   } } 
@OverriDrawable_VARe protecteDrawable_VAR voiDrawable_VAR oint_VARDetTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheDrawable_VARFromWItemInfo_VARnt_VARDrawable_VARow(){   removeCTfloat_VARpeDrawable_VARArrafloat_VAR_VARllbTfloat_VARpeDrawable_VARArrafloat_VAR_VARcks(mEint_VARDrawable_VARScrollRuint_VARint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARble);   super.oint_VARDetTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheDrawable_VARFromWItemInfo_VARnt_VARDrawable_VARow(); } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR setScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   if (mScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte == ItemInfo_VARnt_VARt_VAR) {     returint_VAR;   }   mScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=ItemInfo_VARnt_VARt_VAR;   if (mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer != int_VARull) {     eint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARers(ItemInfo_VARnt_VARt_VAR != ItemInfo_VARnt_VARt_VAR);   }   for (  Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer eTfloat_VARpeDrawable_VARArrafloat_VAR_VARchListeint_VARer : mOint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARers) {     if (eTfloat_VARpeDrawable_VARArrafloat_VAR_VARchListeint_VARer != int_VARull) {       eTfloat_VARpeDrawable_VARArrafloat_VAR_VARchListeint_VARer.oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(ItemInfo_VARnt_VARt_VAR);     }   } } 
 public voiDrawable_VAR setADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter_VAR){   if (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter != int_VARull) {     mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.uint_VARregisterDTfloat_VARpeDrawable_VARArrafloat_VAR_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARSetObserver(PagerObserver_VAR);     mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.stTfloat_VARpeDrawable_VARArrafloat_VAR_VARrtUpDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(this);     for (ItemInfo_VARnt_VARt i=Number_Constant; i < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR(); i++) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(i);       mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.Drawable_VARestrofloat_VARItem(this,ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR,ItemInfo_VAR.Object_VAR);     }     mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.fItemInfo_VARnt_VARishUpDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(this);     ArrayList<ItemInfo>_VAR.cleTfloat_VARpeDrawable_VARArrafloat_VAR_VARr();     removeItemInfo_VARnt_VARt_VARoint_VARDecorViews();     int_VAR=Number_Constant;     scrollTo(Number_Constant,Number_Constant);   }   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter olDrawable_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter;   mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter=PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter_VAR;   mEfloat_VARpecteDrawable_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterCouint_VARt=Number_Constant;   if (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter != int_VARull) {     if (PagerObserver_VAR == int_VARull) {       PagerObserver_VAR=int_VARew PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerObserver();     }     mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.registerDTfloat_VARpeDrawable_VARArrafloat_VAR_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARSetObserver(PagerObserver_VAR);     mPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARtePeint_VARDrawable_VARItemInfo_VARnt_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR;     booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=Boolean_Constant;     mEfloat_VARpecteDrawable_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterCouint_VARt=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt();     if (mRestoreDrawable_VARCurItem >= Number_Constant) {       mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.restoreStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(mRestoreDrawable_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte,ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer_VAR);       setCurreint_VARtItemIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl(mRestoreDrawable_VARCurItem,fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse,Boolean_Constant);       mRestoreDrawable_VARCurItem=-Number_Constant;       mRestoreDrawable_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=int_VARull;       ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer_VAR=int_VARull;     }  else     if (!booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {       populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte();     }  else {       requestLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARout();     }   }   if (Oint_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR != int_VARull && olDrawable_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter != PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter_VAR) {     Oint_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR.oint_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(olDrawable_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter,PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter_VAR);   } } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR removeItemInfo_VARnt_VARt_VARoint_VARDecorViews(){   for (ItemInfo_VARnt_VARt i=Number_Constant; i < getChilDrawable_VARCouint_VARt(); i++) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i);     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms LayoutParams_VAR=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)chilDrawable_VAR.getLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms();     if (!LayoutParams_VAR.boolean_VAR) {       removeViewAt(i);       i--;     }   } } 
 public PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter getADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter(){   returint_VAR mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter; } 
voiDrawable_VAR setOint_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer(Oint_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer Oint_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR){   Oint_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR=Oint_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR; } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte ItemInfo_VARnt_VARt getClieint_VARtWiDrawable_VARth(){   returint_VAR getMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureDrawable_VARWiDrawable_VARth() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRight(); } 
 public voiDrawable_VAR setCurreint_VARtItem(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   mPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARtePeint_VARDrawable_VARItemInfo_VARnt_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   setCurreint_VARtItemIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl(ItemInfo_VARnt_VARt_VAR,!booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse); } 
 public voiDrawable_VAR setCurreint_VARtItem(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR){   mPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARtePeint_VARDrawable_VARItemInfo_VARnt_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   setCurreint_VARtItemIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl(ItemInfo_VARnt_VARt_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse); } 
public ItemInfo_VARnt_VARt getCurreint_VARtItem(){   returint_VAR int_VAR; } 
voiDrawable_VAR setCurreint_VARtItemIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR){   setCurreint_VARtItemIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl(ItemInfo_VARnt_VARt_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,Number_Constant); } 
voiDrawable_VAR setCurreint_VARtItemIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   if (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter == int_VARull || mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt() <= Number_Constant) {     setScrollItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR(fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse);     returint_VAR;   }   if (!booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR && int_VAR == ItemInfo_VARnt_VARt_VAR && ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() != Number_Constant) {     setScrollItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR(fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse);     returint_VAR;   }   if (ItemInfo_VARnt_VARt_VAR < Number_Constant) {     ItemInfo_VARnt_VARt_VAR=Number_Constant;   }  else   if (ItemInfo_VARnt_VARt_VAR >= mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt()) {     ItemInfo_VARnt_VARt_VAR=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt() - Number_Constant;   }   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit=mOffscreeint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit;   if (ItemInfo_VARnt_VARt_VAR > (int_VAR + pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit) || ItemInfo_VARnt_VARt_VAR < (int_VAR - pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit)) {     for (ItemInfo_VARnt_VARt i=Number_Constant; i < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR(); i++) {       ArrayList<ItemInfo>_VAR.get(i).scrollItemInfo_VARnt_VARg=Boolean_Constant;     }   }   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR Drawable_VARispTfloat_VARpeDrawable_VARArrafloat_VAR_VARtchSelecteDrawable_VAR=int_VAR != ItemInfo_VARnt_VARt_VAR;   if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {     int_VAR=ItemInfo_VARnt_VARt_VAR;     triggerOint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeEveint_VARt(ItemInfo_VARnt_VARt_VAR);     requestLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARout();   }  else {     populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(ItemInfo_VARnt_VARt_VAR);     scrollToItem(ItemInfo_VARnt_VARt_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,ItemInfo_VARnt_VARt_VAR,Drawable_VARispTfloat_VARpeDrawable_VARArrafloat_VAR_VARtchSelecteDrawable_VAR);   } } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR scrollToItem(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemIint_VARfo_VAR=ItemInfo_VARnt_VARfoForPositioint_VAR(ItemInfo_VARnt_VARt_VAR);   ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=Number_Constant;   if (ItemIint_VARfo_VAR != int_VARull) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getClieint_VARtWiDrawable_VARth();     ItemInfo_VARnt_VARt_VAR=(ItemInfo_VARnt_VARt)(wiDrawable_VARth * MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VAR(float_VAR,MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mItemInfo_VARnt_VAR(ItemIint_VARfo_VAR.float_VAR,mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstOffset)));   }   if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {     booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VARTo(ItemInfo_VARnt_VARt_VAR,Number_Constant,ItemInfo_VARnt_VARt_VAR);     if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {       triggerOint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeEveint_VARt(ItemInfo_VARnt_VARt_VAR);     }   }  else {     if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {       triggerOint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeEveint_VARt(ItemInfo_VARnt_VARt_VAR);     }     completeScroll(fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse);     scrollTo(ItemInfo_VARnt_VARt_VAR,Number_Constant);     pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR(ItemInfo_VARnt_VARt_VAR);   } } 
 public voiDrawable_VAR Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VAROint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer(Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR){   if (!mOint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARers.coint_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARs(Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR)) {     mOint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARers.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VAR(Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR);   } } 
 public voiDrawable_VAR removeOint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer(Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR){   mOint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARers.remove(Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR); } 
 public voiDrawable_VAR setPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer(booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer_VAR){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR hTfloat_VARpeDrawable_VARArrafloat_VAR_VARsTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer=PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer_VAR != int_VARull;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=hTfloat_VARpeDrawable_VARArrafloat_VAR_VARsTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer != (mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer != int_VARull);   mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer=PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer_VAR;   setChilDrawable_VARreint_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARerEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VARCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt(hTfloat_VARpeDrawable_VARArrafloat_VAR_VARsTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer);   if (hTfloat_VARpeDrawable_VARArrafloat_VAR_VARsTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer) {     mDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARer=booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR ? ItemInfo_VARnt_VARt_VAR : ItemInfo_VARnt_VARt_VAR;   }  else {     mDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARer=int_VAR;   }   if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR)   populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(); } 
voiDrawable_VAR setChilDrawable_VARreint_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARerEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VARCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt(booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR){   if (BuilDrawable_VAR.VERSIOItemInfo_VARnt_VARt_VAR.SDK_IItemInfo_VARnt_VARt_VART >= Number_Constant) {     if (mSetChilDrawable_VARreint_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARerEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR == int_VARull) {       trfloat_VAR {         mSetChilDrawable_VARreint_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARerEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR=ViewGroup.clTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.getDeclTfloat_VARpeDrawable_VARArrafloat_VAR_VARreDrawable_VARMethoDrawable_VAR("setChilDrawable_VARreint_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARerEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR",int_VARew ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR[]{BooleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR.TYPE});       }  cTfloat_VARpeDrawable_VARArrafloat_VAR_VARtch (      ItemInfo_VARnt_VARt_VARoSuchMethoDrawable_VAREfloat_VARceptioint_VAR e) {         Log.e(String_VAR,"CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR't fItemInfo_VARnt_VARDrawable_VAR setChilDrawable_VARreint_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARerEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR",e);       }     }     trfloat_VAR {       mSetChilDrawable_VARreint_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARerEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR.ItemInfo_VARnt_VARvoke(this,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR);     }  cTfloat_VARpeDrawable_VARArrafloat_VAR_VARtch (    Efloat_VARceptioint_VAR e) {       Log.e(String_VAR,"Error chTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgItemInfo_VARnt_VARg chilDrawable_VARreint_VAR Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARg orDrawable_VARer",e);     }   } } 
@OverrItemInfo_VARnt_VARt_VARDrawable_VARe protecteDrawable_VAR ItemInfo_VARnt_VARt_VARint_VARt getChItemInfo_VARnt_VARt_VARlDrawable_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARt_VARint_VARgOrDrawable_VARer(ItemInfo_VARnt_VARt_VARint_VARt ItemInfo_VARnt_VARt_VARint_VARt_VAR,ItemInfo_VARnt_VARt_VARint_VARt ItemInfo_VARnt_VARt_VAR){   fItemInfo_VARnt_VARt_VARint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt_VARint_VARt ItemInfo_VARnt_VARt_VARint_VARDrawable_VARefloat_VAR=mDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARt_VARint_VARgOrDrawable_VARer == ItemInfo_VARnt_VARt_VAR ? ItemInfo_VARnt_VARt_VARint_VARt_VAR - Number_Constant - ItemInfo_VARnt_VARt_VAR : ItemInfo_VARnt_VARt_VAR;   fItemInfo_VARnt_VARt_VARint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt_VARint_VARt ItemInfo_VARnt_VARt_VAR=((LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)mDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARt_VARint_VARgOrDrawable_VARereDrawable_VARChItemInfo_VARnt_VARt_VARlDrawable_VARreint_VAR.get(ItemInfo_VARnt_VARt_VARint_VARDrawable_VARefloat_VAR).getLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms()).chItemInfo_VARnt_VARt_VARlDrawable_VARIint_VARDrawable_VARefloat_VAR;   returint_VAR ItemInfo_VARnt_VARt_VAR; } 
 Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer setIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARlPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer(Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR){   Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer olDrawable_VARListeint_VARer=mIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARlPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer;   mIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARlPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer=Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer_VAR;   returint_VAR olDrawable_VARListeint_VARer; } 
 public ItemInfo_VARnt_VARt getOffscreeint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit(){   returint_VAR mOffscreeint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit; } 
 public voiDrawable_VAR setOffscreeint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   if (ItemInfo_VARnt_VARt_VAR < ItemInfo_VARnt_VARt_VAR) {     Log.w(String_VAR,"RequesteDrawable_VAR offscreeint_VAR pTfloat_VARpeDrawable_VARArrafloat_VAR_VARge ItemInfo_VARnt_VARt_VAR " + ItemInfo_VARnt_VARt_VAR + " too smTfloat_VARpeDrawable_VARArrafloat_VAR_VARll; Drawable_VARefTfloat_VARpeDrawable_VARArrafloat_VAR_VARultItemInfo_VARnt_VARg to "+ ItemInfo_VARnt_VARt_VAR);     ItemInfo_VARnt_VARt_VAR=ItemInfo_VARnt_VARt_VAR;   }   if (ItemInfo_VARnt_VARt_VAR != mOffscreeint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit) {     mOffscreeint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit=ItemInfo_VARnt_VARt_VAR;     populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte();   } } 
 public voiDrawable_VAR setPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt olDrawable_VARMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR=mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR;   mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR=ItemInfo_VARnt_VARt_VAR;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getWiDrawable_VARth();   recomputeScrollPositioint_VAR(wiDrawable_VARth,wiDrawable_VARth,ItemInfo_VARnt_VARt_VAR,olDrawable_VARMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR);   requestLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARout(); } 
 public ItemInfo_VARnt_VARt getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR(){   returint_VAR mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR; } 
 public voiDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR setPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble(DrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble DrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR){   mMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble=DrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR;   if (DrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR != int_VARull)   refreshDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte();   setWillItemInfo_VARnt_VARt_VARotDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARw(DrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR == int_VARull);   ItemInfo_VARnt_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(); } 
 public voiDrawable_VAR setPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   setPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble(getCoint_VARtefloat_VARt().getResources().getDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble(ItemInfo_VARnt_VARt_VAR)); } 
@OverriDrawable_VARe protecteDrawable_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR veriffloat_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble(DrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble DrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR){   returint_VAR super.veriffloat_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble(DrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR) || DrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR == mMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble; } 
@OverriDrawable_VARe protecteDrawable_VAR voiDrawable_VAR Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(){   super.Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl DrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble Drawable_VAR=mMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble;   if (Drawable_VAR != int_VARull && Drawable_VAR.isStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteful()) {     Drawable_VAR.setStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(getDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte());   } } 
floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt Drawable_VARistTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceIint_VARfloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARlueint_VARceForSint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpDurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR(floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR){   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR-=Number_ConstantloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR;   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR*=Number_ConstantloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR * MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.PI / Number_ConstantloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR;   returint_VAR (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.sItemInfo_VARnt_VAR(floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR); } 
 voiDrawable_VAR smoothScrollTo(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   smoothScrollTo(ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt_VAR,Number_Constant); } 
 voiDrawable_VAR smoothScrollTo(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt velocitItemInfo_VARnt_VARt_VAR){   if (getChilDrawable_VARCouint_VARt() == Number_Constant) {     setScrollItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR(fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse);     returint_VAR;   }   ItemInfo_VARnt_VARt sItemInfo_VARnt_VARt_VAR=getScrollX();   ItemInfo_VARnt_VARt sItemInfo_VARnt_VARt_VAR=getScrollY();   ItemInfo_VARnt_VARt Drawable_VARItemInfo_VARnt_VARt_VAR=ItemInfo_VARnt_VARt_VAR - sItemInfo_VARnt_VARt_VAR;   ItemInfo_VARnt_VARt Drawable_VARItemInfo_VARnt_VARt_VAR=ItemInfo_VARnt_VARt_VAR - sItemInfo_VARnt_VARt_VAR;   if (Drawable_VARItemInfo_VARnt_VARt_VAR == Number_Constant && Drawable_VARItemInfo_VARnt_VARt_VAR == Number_Constant) {     completeScroll(fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse);     populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte();     setScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(ItemInfo_VARnt_VARt_VAR);     returint_VAR;   }   setScrollItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR(Boolean_Constant);   setScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(ItemInfo_VARnt_VARt_VAR);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getClieint_VARtWiDrawable_VARth();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt hTfloat_VARpeDrawable_VARArrafloat_VAR_VARlfWiDrawable_VARth=wiDrawable_VARth / Number_Constant;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt Drawable_VARistTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceRTfloat_VARpeDrawable_VARArrafloat_VAR_VARtio=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mItemInfo_VARnt_VAR(Number_Constant,Number_Constant * MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(Drawable_VARItemInfo_VARnt_VARt_VAR) / wiDrawable_VARth);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt Drawable_VARistTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARce=hTfloat_VARpeDrawable_VARArrafloat_VAR_VARlfWiDrawable_VARth + hTfloat_VARpeDrawable_VARArrafloat_VAR_VARlfWiDrawable_VARth * Drawable_VARistTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceIint_VARflueint_VARceForSint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpDurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR(Drawable_VARistTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceRTfloat_VARpeDrawable_VARArrafloat_VAR_VARtio);   ItemInfo_VARnt_VARt Drawable_VARurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR=Number_Constant;   velocitItemInfo_VARnt_VARt_VAR=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(velocitItemInfo_VARnt_VARt_VAR);   if (velocitItemInfo_VARnt_VARt_VAR > Number_Constant) {     Drawable_VARurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR=Number_Constant * MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.rouint_VARDrawable_VAR(Number_Constant * MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(Drawable_VARistTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARce / velocitItemInfo_VARnt_VARt_VAR));   }  else {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR=wiDrawable_VARth * mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeWiDrawable_VARth(int_VAR);     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeDeltTfloat_VARpeDrawable_VARArrafloat_VAR_VAR=(floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(Drawable_VARItemInfo_VARnt_VARt_VAR) / (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR + mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR);     Drawable_VARurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR=(ItemInfo_VARnt_VARt)((pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeDeltTfloat_VARpeDrawable_VARArrafloat_VAR_VAR + Number_Constant) * Number_Constant);   }   Drawable_VARurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mItemInfo_VARnt_VAR(Drawable_VARurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR,MAX_SETTLE_DURATIOItemInfo_VARnt_VARt_VAR);   Scroller_VAR.stTfloat_VARpeDrawable_VARArrafloat_VAR_VARrtScroll(sItemInfo_VARnt_VARt_VAR,sItemInfo_VARnt_VARt_VAR,Drawable_VARItemInfo_VARnt_VARt_VAR,Drawable_VARItemInfo_VARnt_VARt_VAR,Drawable_VARurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR);   ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ItemInfo_VARnt_VARt_VARtIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARteOint_VARAint_VARimTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR(this); } 
ItemIint_VARfo Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARt_VARewItem(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   ItemIint_VARfo ItemInfo_VAR=int_VARew ItemIint_VARfo();   ItemInfo_VAR.ItemInfo_VARnt_VARt_VAR=ItemInfo_VARnt_VARt_VAR;   ItemInfo_VAR.Object_VAR=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.ItemInfo_VARnt_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARtiTfloat_VARpeDrawable_VARArrafloat_VAR_VARteItem(this,ItemInfo_VARnt_VARt_VAR);   ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeWiDrawable_VARth(ItemInfo_VARnt_VARt_VAR);   if (ItemInfo_VARnt_VARt_VAR < Number_Constant || ItemInfo_VARnt_VARt_VAR >= ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR()) {     ArrayList<ItemInfo>_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VAR(ItemInfo_VAR);   }  else {     ArrayList<ItemInfo>_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VAR(ItemInfo_VARnt_VARt_VAR,ItemInfo_VAR);   }   returint_VAR ItemInfo_VAR; } 
voiDrawable_VAR Drawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARSetChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterCouint_VARt=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt();   mEfloat_VARpecteDrawable_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterCouint_VARt=Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterCouint_VARt;   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR int_VAReeDrawable_VARPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() < mOffscreeint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit * Number_Constant + Number_Constant && ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() < Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterCouint_VARt;   ItemInfo_VARnt_VARt int_VARewCurrItem=int_VAR;   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR isUpDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtItemInfo_VARnt_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   for (ItemInfo_VARnt_VARt i=Number_Constant; i < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR(); i++) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(i);     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VARewPos=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getItemPositioint_VAR(ItemInfo_VAR.Object_VAR);     if (int_VARewPos == PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.POSITIOItemInfo_VARnt_VARt_VAR_UItemInfo_VARnt_VARt_VARCHAItemInfo_VARnt_VARt_VARGED) {       coint_VARtItemInfo_VARnt_VARue;     }     if (int_VARewPos == PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.POSITIOItemInfo_VARnt_VARt_VAR_ItemInfo_VARnt_VARt_VAROItemInfo_VARnt_VARt_VARE) {       ArrayList<ItemInfo>_VAR.remove(i);       i--;       if (!isUpDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtItemInfo_VARnt_VARg) {         mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.stTfloat_VARpeDrawable_VARArrafloat_VAR_VARrtUpDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(this);         isUpDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtItemInfo_VARnt_VARg=Boolean_Constant;       }       mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.Drawable_VARestrofloat_VARItem(this,ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR,ItemInfo_VAR.Object_VAR);       int_VAReeDrawable_VARPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=Boolean_Constant;       if (int_VAR == ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR) {         int_VARewCurrItem=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VAR(Number_Constant,MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mItemInfo_VARnt_VAR(int_VAR,Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterCouint_VARt - Number_Constant));         int_VAReeDrawable_VARPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=Boolean_Constant;       }       coint_VARtItemInfo_VARnt_VARue;     }     if (ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR != int_VARewPos) {       if (ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR == int_VAR) {         int_VARewCurrItem=int_VARewPos;       }       ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR=int_VARewPos;       int_VAReeDrawable_VARPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=Boolean_Constant;     }   }   if (isUpDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtItemInfo_VARnt_VARg) {     mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.fItemInfo_VARnt_VARishUpDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(this);   }   Collectioint_VARs.sort(ArrayList<ItemInfo>_VAR,CompTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARtor<ItemIint_VARfo>_VAR);   if (int_VAReeDrawable_VARPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARte) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt chilDrawable_VARCouint_VARt=getChilDrawable_VARCouint_VARt();     for (ItemInfo_VARnt_VARt i=Number_Constant; i < chilDrawable_VARCouint_VARt; i++) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i);       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms LayoutParams_VAR=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)chilDrawable_VAR.getLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms();       if (!LayoutParams_VAR.boolean_VAR) {         LayoutParams_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor=Number_Constant;       }     }     setCurreint_VARtItemIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl(int_VARewCurrItem,fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse,Boolean_Constant);     requestLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARout();   } } 
voiDrawable_VAR populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(){   populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(int_VAR); } 
voiDrawable_VAR populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   ItemIint_VARfo ItemIint_VARfo_VAR=int_VARull;   ItemInfo_VARnt_VARt focusDirectioint_VAR=View.FOCUS_FORWARD;   if (int_VAR != ItemInfo_VARnt_VARt_VAR) {     focusDirectioint_VAR=int_VAR < ItemInfo_VARnt_VARt_VAR ? View.FOCUS_RIGHT : View.FOCUS_LEFT;     ItemIint_VARfo_VAR=ItemInfo_VARnt_VARfoForPositioint_VAR(int_VAR);     int_VAR=ItemInfo_VARnt_VARt_VAR;   }   if (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter == int_VARull) {     sortChilDrawable_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARer();     returint_VAR;   }   if (mPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARtePeint_VARDrawable_VARItemInfo_VARnt_VARg) {     if (boolean_VAR)     Log.i(String_VAR,"populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte is peint_VARDrawable_VARItemInfo_VARnt_VARg, skippItemInfo_VARnt_VARg for int_VARow...");     sortChilDrawable_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARer();     returint_VAR;   }   if (getWItemInfo_VARnt_VARDrawable_VARowTokeint_VAR() == int_VARull) {     returint_VAR;   }   mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.stTfloat_VARpeDrawable_VARArrafloat_VAR_VARrtUpDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(this);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit=mOffscreeint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt stTfloat_VARpeDrawable_VARArrafloat_VAR_VARrtPos=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VAR(Number_Constant,int_VAR - pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt eint_VARDrawable_VARPos=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mItemInfo_VARnt_VAR(ItemInfo_VARnt_VARt_VAR - Number_Constant,int_VAR + pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLimit);   if (ItemInfo_VARnt_VARt_VAR != mEfloat_VARpecteDrawable_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterCouint_VARt) {     StrItemInfo_VARnt_VARg StrItemInfo_VARnt_VARg_VAR;     trfloat_VAR {       StrItemInfo_VARnt_VARg_VAR=getResources().getResourceItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARme(getIDrawable_VAR());     }  cTfloat_VARpeDrawable_VARArrafloat_VAR_VARtch (    Resources.ItemInfo_VARnt_VARt_VARotFouint_VARDrawable_VAREfloat_VARceptioint_VAR e) {       StrItemInfo_VARnt_VARg_VAR=Iint_VARteger.toHefloat_VARStrItemInfo_VARnt_VARg(getIDrawable_VAR());     }     throw int_VARew IllegTfloat_VARpeDrawable_VARArrafloat_VAR_VARlStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteEfloat_VARceptioint_VAR("The Tfloat_VARpeDrawable_VARArrafloat_VAR_VARpplicTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR's PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter chTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR the Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter's" + " coint_VARteint_VARts without cTfloat_VARpeDrawable_VARArrafloat_VAR_VARllItemInfo_VARnt_VARg PTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter#int_VARotiffloat_VARDTfloat_VARpeDrawable_VARArrafloat_VAR_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARSetChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR!" + " Efloat_VARpecteDrawable_VAR Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter item couint_VARt: " + mEfloat_VARpecteDrawable_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterCouint_VARt + ", fouint_VARDrawable_VAR: "+ ItemInfo_VARnt_VARt_VAR+ " PTfloat_VARpeDrawable_VARArrafloat_VAR_VARger iDrawable_VAR: "+ StrItemInfo_VARnt_VARg_VAR+ " PTfloat_VARpeDrawable_VARArrafloat_VAR_VARger clTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR: "+ getClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR()+ " ProblemTfloat_VARpeDrawable_VARArrafloat_VAR_VARtic Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter: "+ mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR());   }   ItemInfo_VARnt_VARt curIint_VARDrawable_VARefloat_VAR=-Number_Constant;   ItemIint_VARfo ItemIint_VARfo_VAR=int_VARull;   for (curIint_VARDrawable_VARefloat_VAR=Number_Constant; curIint_VARDrawable_VARefloat_VAR < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR(); curIint_VARDrawable_VARefloat_VAR++) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(curIint_VARDrawable_VARefloat_VAR);     if (ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR >= int_VAR) {       if (ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR == int_VAR)       ItemIint_VARfo_VAR=ItemInfo_VAR;       breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk;     }   }   if (ItemIint_VARfo_VAR == int_VARull && ItemInfo_VARnt_VARt_VAR > Number_Constant) {     ItemIint_VARfo_VAR=Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARt_VARewItem(int_VAR,curIint_VARDrawable_VARefloat_VAR);   }   if (ItemIint_VARfo_VAR != int_VARull) {     floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt efloat_VARtrTfloat_VARpeDrawable_VARArrafloat_VAR_VARWiDrawable_VARthLeft=Number_Constant;     ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=curIint_VARDrawable_VARefloat_VAR - Number_Constant;     ItemIint_VARfo ItemInfo_VAR=ItemInfo_VARnt_VARt_VAR >= Number_Constant ? ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR) : int_VARull;     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt clieint_VARtWiDrawable_VARth=getClieint_VARtWiDrawable_VARth();     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt leftWiDrawable_VARthItemInfo_VARnt_VARt_VAReeDrawable_VAReDrawable_VAR=clieint_VARtWiDrawable_VARth <= Number_Constant ? Number_Constant : Number_Constant - ItemIint_VARfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor + (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft() / (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)clieint_VARtWiDrawable_VARth;     for (ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=int_VAR - Number_Constant; ItemInfo_VARnt_VARt_VAR >= Number_Constant; ItemInfo_VARnt_VARt_VAR--) {       if (efloat_VARtrTfloat_VARpeDrawable_VARArrafloat_VAR_VARWiDrawable_VARthLeft >= leftWiDrawable_VARthItemInfo_VARnt_VARt_VAReeDrawable_VAReDrawable_VAR && ItemInfo_VARnt_VARt_VAR < stTfloat_VARpeDrawable_VARArrafloat_VAR_VARrtPos) {         if (ItemInfo_VAR == int_VARull) {           breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk;         }         if (ItemInfo_VARnt_VARt_VAR == ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR && !ItemInfo_VAR.scrollItemInfo_VARnt_VARg) {           ArrayList<ItemInfo>_VAR.remove(ItemInfo_VARnt_VARt_VAR);           mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.Drawable_VARestrofloat_VARItem(this,ItemInfo_VARnt_VARt_VAR,ItemInfo_VAR.Object_VAR);           if (boolean_VAR) {             Log.i(String_VAR,"populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte() - Drawable_VARestrofloat_VARItem() with ItemInfo_VARnt_VARt_VAR: " + ItemInfo_VARnt_VARt_VAR + String_Constant+ ((View)ItemInfo_VAR.Object_VAR));           }           ItemInfo_VARnt_VARt_VAR--;           curIint_VARDrawable_VARefloat_VAR--;           ItemInfo_VAR=ItemInfo_VARnt_VARt_VAR >= Number_Constant ? ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR) : int_VARull;         }       }  else       if (ItemInfo_VAR != int_VARull && ItemInfo_VARnt_VARt_VAR == ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR) {         efloat_VARtrTfloat_VARpeDrawable_VARArrafloat_VAR_VARWiDrawable_VARthLeft+=ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor;         ItemInfo_VARnt_VARt_VAR--;         ItemInfo_VAR=ItemInfo_VARnt_VARt_VAR >= Number_Constant ? ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR) : int_VARull;       }  else {         ItemInfo_VAR=Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARt_VARewItem(ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt_VAR + Number_Constant);         efloat_VARtrTfloat_VARpeDrawable_VARArrafloat_VAR_VARWiDrawable_VARthLeft+=ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor;         curIint_VARDrawable_VARefloat_VAR++;         ItemInfo_VAR=ItemInfo_VARnt_VARt_VAR >= Number_Constant ? ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR) : int_VARull;       }     }     floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR=ItemIint_VARfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor;     ItemInfo_VARnt_VARt_VAR=curIint_VARDrawable_VARefloat_VAR + Number_Constant;     if (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR < Number_Constant) {       ItemInfo_VAR=ItemInfo_VARnt_VARt_VAR < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() ? ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR) : int_VARull;       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt rightWiDrawable_VARthItemInfo_VARnt_VARt_VAReeDrawable_VAReDrawable_VAR=clieint_VARtWiDrawable_VARth <= Number_Constant ? Number_Constant : (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRight() / (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)clieint_VARtWiDrawable_VARth + Number_Constant;       for (ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=int_VAR + Number_Constant; ItemInfo_VARnt_VARt_VAR < ItemInfo_VARnt_VARt_VAR; ItemInfo_VARnt_VARt_VAR++) {         if (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR >= rightWiDrawable_VARthItemInfo_VARnt_VARt_VAReeDrawable_VAReDrawable_VAR && ItemInfo_VARnt_VARt_VAR > eint_VARDrawable_VARPos) {           if (ItemInfo_VAR == int_VARull) {             breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk;           }           if (ItemInfo_VARnt_VARt_VAR == ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR && !ItemInfo_VAR.scrollItemInfo_VARnt_VARg) {             ArrayList<ItemInfo>_VAR.remove(ItemInfo_VARnt_VARt_VAR);             mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.Drawable_VARestrofloat_VARItem(this,ItemInfo_VARnt_VARt_VAR,ItemInfo_VAR.Object_VAR);             if (boolean_VAR) {               Log.i(String_VAR,"populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte() - Drawable_VARestrofloat_VARItem() with ItemInfo_VARnt_VARt_VAR: " + ItemInfo_VARnt_VARt_VAR + String_Constant+ ((View)ItemInfo_VAR.Object_VAR));             }             ItemInfo_VAR=ItemInfo_VARnt_VARt_VAR < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() ? ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR) : int_VARull;           }         }  else         if (ItemInfo_VAR != int_VARull && ItemInfo_VARnt_VARt_VAR == ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR) {           floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR+=ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor;           ItemInfo_VARnt_VARt_VAR++;           ItemInfo_VAR=ItemInfo_VARnt_VARt_VAR < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() ? ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR) : int_VARull;         }  else {           ItemInfo_VAR=Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARt_VARewItem(ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt_VAR);           ItemInfo_VARnt_VARt_VAR++;           floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR+=ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor;           ItemInfo_VAR=ItemInfo_VARnt_VARt_VAR < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() ? ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR) : int_VARull;         }       }     }     cTfloat_VARpeDrawable_VARArrafloat_VAR_VARlculTfloat_VARpeDrawable_VARArrafloat_VAR_VARtePTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeOffsets(ItemIint_VARfo_VAR,curIint_VARDrawable_VARefloat_VAR,ItemIint_VARfo_VAR);   }   if (boolean_VAR) {     Log.i(String_VAR,"Curreint_VARt pTfloat_VARpeDrawable_VARArrafloat_VAR_VARge list:");     for (ItemInfo_VARnt_VARt i=Number_Constant; i < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR(); i++) {       Log.i(String_VAR,String_Constant + i + ": pTfloat_VARpeDrawable_VARArrafloat_VAR_VARge "+ ArrayList<ItemInfo>_VAR.get(i).ItemInfo_VARnt_VARt_VARitioint_VAR);     }   }   mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.setPrimTfloat_VARpeDrawable_VARArrafloat_VAR_VARrfloat_VARItem(this,int_VAR,ItemIint_VARfo_VAR != int_VARull ? ItemIint_VARfo_VAR.Object_VAR : int_VARull);   mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.fItemInfo_VARnt_VARishUpDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(this);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt chilDrawable_VARCouint_VARt=getChilDrawable_VARCouint_VARt();   for (ItemInfo_VARnt_VARt i=Number_Constant; i < chilDrawable_VARCouint_VARt; i++) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i);     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms LayoutParams_VAR=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)chilDrawable_VAR.getLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms();     LayoutParams_VAR.chilDrawable_VARIint_VARDrawable_VARefloat_VAR=i;     if (!LayoutParams_VAR.boolean_VAR && LayoutParams_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor == Number_Constant) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemInfo_VAR=ItemInfo_VARnt_VARfoForChilDrawable_VAR(chilDrawable_VAR);       if (ItemInfo_VAR != int_VARull) {         LayoutParams_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor=ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor;         LayoutParams_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR=ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR;       }     }   }   sortChilDrawable_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARer();   if (hTfloat_VARpeDrawable_VARArrafloat_VAR_VARsFocus()) {     View curreint_VARtFocuseDrawable_VAR=fItemInfo_VARnt_VARDrawable_VARFocus();     ItemIint_VARfo ItemInfo_VAR=curreint_VARtFocuseDrawable_VAR != int_VARull ? ItemInfo_VARnt_VARfoForAint_VARfloat_VARChilDrawable_VAR(curreint_VARtFocuseDrawable_VAR) : int_VARull;     if (ItemInfo_VAR == int_VARull || ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR != int_VAR) {       for (ItemInfo_VARnt_VARt i=Number_Constant; i < getChilDrawable_VARCouint_VARt(); i++) {         View chilDrawable_VAR=getChilDrawable_VARAt(i);         ItemInfo_VAR=ItemInfo_VARnt_VARfoForChilDrawable_VAR(chilDrawable_VAR);         if (ItemInfo_VAR != int_VARull && ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR == int_VAR) {           if (chilDrawable_VAR.requestFocus(focusDirectioint_VAR)) {             breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk;           }         }       }     }   } } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR sortChilDrawable_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARer(){   if (mDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARer != int_VAR) {     if (mDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARereDrawable_VARChilDrawable_VARreint_VAR == int_VARull) {       mDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARereDrawable_VARChilDrawable_VARreint_VAR=int_VARew ArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARList<View>();     }  else {       mDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARereDrawable_VARChilDrawable_VARreint_VAR.cleTfloat_VARpeDrawable_VARArrafloat_VAR_VARr();     }     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt chilDrawable_VARCouint_VARt=getChilDrawable_VARCouint_VARt();     for (ItemInfo_VARnt_VARt i=Number_Constant; i < chilDrawable_VARCouint_VARt; i++) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i);       mDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARereDrawable_VARChilDrawable_VARreint_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VAR(chilDrawable_VAR);     }     Collectioint_VARs.sort(mDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgOrDrawable_VARereDrawable_VARChilDrawable_VARreint_VAR,sPositioint_VARCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARtor);   } } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR cTfloat_VARpeDrawable_VARArrafloat_VAR_VARlculTfloat_VARpeDrawable_VARArrafloat_VAR_VARtePTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeOffsets(ItemIint_VARfo ItemIint_VARfo_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemIint_VARfo ItemIint_VARfo_VAR){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getClieint_VARtWiDrawable_VARth();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset=wiDrawable_VARth > Number_Constant ? (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR / wiDrawable_VARth : Number_Constant;   if (ItemIint_VARfo_VAR != int_VARull) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt olDrawable_VARCurPositioint_VAR=ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR;     if (olDrawable_VARCurPositioint_VAR < ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR) {       ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=Number_Constant;       ItemIint_VARfo ItemInfo_VAR=int_VARull;       floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=ItemIint_VARfo_VAR.float_VAR + ItemIint_VARfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;       for (ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=olDrawable_VARCurPositioint_VAR + Number_Constant; ItemInfo_VARnt_VARt_VAR <= ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR && ItemInfo_VARnt_VARt_VAR < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR(); ItemInfo_VARnt_VARt_VAR++) {         ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR);         while (ItemInfo_VARnt_VARt_VAR > ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR && ItemInfo_VARnt_VARt_VAR < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() - Number_Constant) {           ItemInfo_VARnt_VARt_VAR++;           ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR);         }         while (ItemInfo_VARnt_VARt_VAR < ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR) {           float_VAR+=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeWiDrawable_VARth(ItemInfo_VARnt_VARt_VAR) + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;           ItemInfo_VARnt_VARt_VAR++;         }         ItemInfo_VAR.float_VAR=float_VAR;         float_VAR+=ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;       }     }  else     if (olDrawable_VARCurPositioint_VAR > ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR) {       ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() - Number_Constant;       ItemIint_VARfo ItemInfo_VAR=int_VARull;       floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=ItemIint_VARfo_VAR.float_VAR;       for (ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=olDrawable_VARCurPositioint_VAR - Number_Constant; ItemInfo_VARnt_VARt_VAR >= ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR && ItemInfo_VARnt_VARt_VAR >= Number_Constant; ItemInfo_VARnt_VARt_VAR--) {         ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR);         while (ItemInfo_VARnt_VARt_VAR < ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR && ItemInfo_VARnt_VARt_VAR > Number_Constant) {           ItemInfo_VARnt_VARt_VAR--;           ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(ItemInfo_VARnt_VARt_VAR);         }         while (ItemInfo_VARnt_VARt_VAR > ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR) {           float_VAR-=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeWiDrawable_VARth(ItemInfo_VARnt_VARt_VAR) + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;           ItemInfo_VARnt_VARt_VAR--;         }         float_VAR-=ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;         ItemInfo_VAR.float_VAR=float_VAR;       }     }   }   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt itemCouint_VARt=ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR();   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=ItemIint_VARfo_VAR.float_VAR;   ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR - Number_Constant;   float_VAR=ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR == Number_Constant ? ItemIint_VARfo_VAR.float_VAR : -FloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.MAX_VALUE;   mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstOffset=ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR == ItemInfo_VARnt_VARt_VAR - Number_Constant ? ItemIint_VARfo_VAR.float_VAR + ItemIint_VARfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor - Number_Constant : FloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.MAX_VALUE;   for (ItemInfo_VARnt_VARt i=ItemInfo_VARnt_VARt_VAR - Number_Constant; i >= Number_Constant; i--, ItemInfo_VARnt_VARt_VAR--) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(i);     while (ItemInfo_VARnt_VARt_VAR > ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR) {       float_VAR-=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeWiDrawable_VARth(ItemInfo_VARnt_VARt_VAR--) + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;     }     float_VAR-=ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;     ItemInfo_VAR.float_VAR=float_VAR;     if (ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR == Number_Constant)     float_VAR=float_VAR;   }   float_VAR=ItemIint_VARfo_VAR.float_VAR + ItemIint_VARfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;   ItemInfo_VARnt_VARt_VAR=ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR + Number_Constant;   for (ItemInfo_VARnt_VARt i=ItemInfo_VARnt_VARt_VAR + Number_Constant; i < itemCouint_VARt; i++, ItemInfo_VARnt_VARt_VAR++) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(i);     while (ItemInfo_VARnt_VARt_VAR < ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR) {       float_VAR+=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeWiDrawable_VARth(ItemInfo_VARnt_VARt_VAR++) + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;     }     if (ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR == ItemInfo_VARnt_VARt_VAR - Number_Constant) {       mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstOffset=float_VAR + ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor - Number_Constant;     }     ItemInfo_VAR.float_VAR=float_VAR;     float_VAR+=ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;   }   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse; } 
public STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR){   super(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR); } 
@OverriDrawable_VARe public voiDrawable_VAR writeToPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   super.writeToPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel_VAR,ItemInfo_VARnt_VARt_VAR);   PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel_VAR.writeIint_VARt(ItemInfo_VARnt_VARt_VARitioint_VAR);   PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel_VAR.writePTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble(Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte,ItemInfo_VARnt_VARt_VAR); } 
@OverriDrawable_VARe public StrItemInfo_VARnt_VARg toStrItemInfo_VARnt_VARg(){   returint_VAR "FrTfloat_VARpeDrawable_VARArrafloat_VAR_VARgmeint_VARtPTfloat_VARpeDrawable_VARArrafloat_VAR_VARger.STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte{" + Iint_VARteger.toHefloat_VARStrItemInfo_VARnt_VARg(Sfloat_VARstem.iDrawable_VAReint_VARtitfloat_VARHTfloat_VARpeDrawable_VARArrafloat_VAR_VARshCoDrawable_VARe(this)) + " ItemInfo_VARnt_VARt_VARitioint_VAR="+ ItemInfo_VARnt_VARt_VARitioint_VAR+ String_Constant; } 
@OverriDrawable_VARe public STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte creTfloat_VARpeDrawable_VARArrafloat_VAR_VARteFromPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel_VAR,ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer_VAR){   returint_VAR int_VARew STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel_VAR,ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer_VAR); } 
@OverriDrawable_VARe public STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte[] int_VARewArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   returint_VAR int_VARew STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte[ItemInfo_VARnt_VARt_VAR]; } 
STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel_VAR,ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer_VAR){   super(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel_VAR);   if (ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer_VAR == int_VARull) {     ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer_VAR=getClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR().getClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer();   }   ItemInfo_VARnt_VARt_VARitioint_VAR=PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel_VAR.reTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARIint_VARt();   Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcel_VAR.reTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble(ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer_VAR);   this.ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer_VAR=ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer_VAR; } 
@OverriDrawable_VARe public PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble oint_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveIint_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(){   PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble superStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=super.oint_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveIint_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte();   STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR=int_VARew STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(superStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte);   STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR=int_VAR;   if (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter != int_VARull) {     STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.sTfloat_VARpeDrawable_VARArrafloat_VAR_VARveStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte();   }   returint_VAR STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR; } 
@OverriDrawable_VARe public voiDrawable_VAR oint_VARRestoreIint_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR){   if (!(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR ItemInfo_VARnt_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceof STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte)) {     super.oint_VARRestoreIint_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR);     returint_VAR;   }   STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR=(STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte)PTfloat_VARpeDrawable_VARArrafloat_VAR_VARrcelTfloat_VARpeDrawable_VARArrafloat_VAR_VARble_VAR;   super.oint_VARRestoreIint_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.getSuperStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte());   if (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter != int_VARull) {     mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.restoreStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte,STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.loTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer);     setCurreint_VARtItemIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl(STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR,fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse,Boolean_Constant);   }  else {     mRestoreDrawable_VARCurItem=STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR;     mRestoreDrawable_VARADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpterStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte;     ClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARLoTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer_VAR=STfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.loTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARer;   } } 
@OverriDrawable_VARe public voiDrawable_VAR Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARView(View View_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR){   if (!checkLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR)) {     ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR=geint_VARerTfloat_VARpeDrawable_VARArrafloat_VAR_VARteLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR);   }   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms LayoutParams_VAR=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR;   LayoutParams_VAR.boolean_VAR|=View_VAR ItemInfo_VARnt_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceof Decor;   if (mIint_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARout) {     if (LayoutParams_VAR != int_VARull && LayoutParams_VAR.boolean_VAR) {       throw int_VARew IllegTfloat_VARpeDrawable_VARArrafloat_VAR_VARlStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteEfloat_VARceptioint_VAR("CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARint_VARot Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VAR pTfloat_VARpeDrawable_VARArrafloat_VAR_VARger Drawable_VARecor view Drawable_VARurItemInfo_VARnt_VARg lTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARout");     }     LayoutParams_VAR.int_VAReeDrawable_VARsMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsure=Boolean_Constant;     Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARViewIint_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARout(View_VAR,ItemInfo_VARnt_VARt_VAR,ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR);   }  else {     super.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARView(View_VAR,ItemInfo_VARnt_VARt_VAR,ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR);   }   if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {     if (View_VAR.getVisibilitfloat_VAR() != GOItemInfo_VARnt_VARt_VARE) {       View_VAR.setDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR(mScrollItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR);     }  else {       View_VAR.setDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR(fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse);     }   } } 
@OverriDrawable_VARe public voiDrawable_VAR removeView(View View_VAR){   if (mIint_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARout) {     removeViewIint_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARout(View_VAR);   }  else {     super.removeView(View_VAR);   } } 
ItemIint_VARfo ItemInfo_VARnt_VARfoForChilDrawable_VAR(View View_VAR){   for (ItemInfo_VARnt_VARt i=Number_Constant; i < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR(); i++) {     ItemIint_VARfo ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(i);     if (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.isViewFromObject(View_VAR,ItemInfo_VAR.Object_VAR)) {       returint_VAR ItemInfo_VAR;     }   }   returint_VAR int_VARull; } 
ItemIint_VARfo ItemInfo_VARnt_VARfoForAint_VARfloat_VARChilDrawable_VAR(View View_VAR){   ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR;   while ((ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR=View_VAR.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt()) != this) {     if (ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR == int_VARull || !(ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR ItemInfo_VARnt_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceof View)) {       returint_VAR int_VARull;     }     View_VAR=(View)ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR;   }   returint_VAR ItemInfo_VARnt_VARfoForChilDrawable_VAR(View_VAR); } 
ItemIint_VARfo ItemInfo_VARnt_VARfoForPositioint_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   for (ItemInfo_VARnt_VARt i=Number_Constant; i < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR(); i++) {     ItemIint_VARfo ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(i);     if (ItemInfo_VAR.ItemInfo_VARnt_VARt_VAR == ItemInfo_VARnt_VARt_VAR) {       returint_VAR ItemInfo_VAR;     }   }   returint_VAR int_VARull; } 
@OverriDrawable_VARe protecteDrawable_VAR voiDrawable_VAR oint_VARAttTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheDrawable_VARToWItemInfo_VARnt_VARDrawable_VARow(){   super.oint_VARAttTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheDrawable_VARToWItemInfo_VARnt_VARDrawable_VARow();   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=Boolean_Constant; } 
@OverriDrawable_VARe protecteDrawable_VAR voiDrawable_VAR oint_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsure(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   setMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureDrawable_VARDimeint_VARsioint_VAR(getDefTfloat_VARpeDrawable_VARArrafloat_VAR_VARultSize(Number_Constant,ItemInfo_VARnt_VARt_VAR),getDefTfloat_VARpeDrawable_VARArrafloat_VAR_VARultSize(Number_Constant,ItemInfo_VARnt_VARt_VAR));   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=getMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureDrawable_VARWiDrawable_VARth();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=ItemInfo_VARnt_VARt_VAR / Number_Constant;   ItemInfo_VARnt_VARt_VAR=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mItemInfo_VARnt_VAR(ItemInfo_VARnt_VARt_VAR,mDefTfloat_VARpeDrawable_VARArrafloat_VAR_VARultGutterSize);   ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=ItemInfo_VARnt_VARt_VAR - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRight();   ItemInfo_VARnt_VARt chilDrawable_VARHeightSize=getMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureDrawable_VARHeight() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgBottom();   ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=getChilDrawable_VARCouint_VARt();   for (ItemInfo_VARnt_VARt i=Number_Constant; i < ItemInfo_VARnt_VARt_VAR; ++i) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i);     if (chilDrawable_VAR.getVisibilitfloat_VAR() != GOItemInfo_VARnt_VARt_VARE) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms LayoutParams_VAR=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)chilDrawable_VAR.getLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms();       if (LayoutParams_VAR != int_VARull && LayoutParams_VAR.boolean_VAR) {         fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt hgrTfloat_VARpeDrawable_VARArrafloat_VAR_VARv=LayoutParams_VAR.grTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR & GrTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR.HORIZOItemInfo_VARnt_VARt_VARTAL_GRAVITY_MASK;         fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt vgrTfloat_VARpeDrawable_VARArrafloat_VAR_VARv=LayoutParams_VAR.grTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR & GrTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR.VERTICAL_GRAVITY_MASK;         ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.AT_MOST;         ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VARMoDrawable_VARe=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.AT_MOST;         booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR coint_VARsumeVerticTfloat_VARpeDrawable_VARArrafloat_VAR_VARl=vgrTfloat_VARpeDrawable_VARArrafloat_VAR_VARv == GrTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR.TOP || vgrTfloat_VARpeDrawable_VARArrafloat_VAR_VARv == GrTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR.BOTTOM;         booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=hgrTfloat_VARpeDrawable_VARArrafloat_VAR_VARv == GrTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR.LEFT || hgrTfloat_VARpeDrawable_VARArrafloat_VAR_VARv == GrTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR.RIGHT;         if (coint_VARsumeVerticTfloat_VARpeDrawable_VARArrafloat_VAR_VARl) {           ItemInfo_VARnt_VARt_VAR=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.EXACTLY;         }  else         if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {           ItemInfo_VARnt_VARt_VARMoDrawable_VARe=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.EXACTLY;         }         ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=ItemInfo_VARnt_VARt_VAR;         ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VARSize=chilDrawable_VARHeightSize;         if (LayoutParams_VAR.wiDrawable_VARth != LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms.WRAP_COItemInfo_VARnt_VARt_VARTEItemInfo_VARnt_VARt_VART) {           ItemInfo_VARnt_VARt_VAR=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.EXACTLY;           if (LayoutParams_VAR.wiDrawable_VARth != LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms.FILL_PAREItemInfo_VARnt_VARt_VART) {             ItemInfo_VARnt_VARt_VAR=LayoutParams_VAR.wiDrawable_VARth;           }         }         if (LayoutParams_VAR.ItemInfo_VARnt_VARt_VAR != LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms.WRAP_COItemInfo_VARnt_VARt_VARTEItemInfo_VARnt_VARt_VART) {           ItemInfo_VARnt_VARt_VARMoDrawable_VARe=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.EXACTLY;           if (LayoutParams_VAR.ItemInfo_VARnt_VARt_VAR != LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms.FILL_PAREItemInfo_VARnt_VARt_VART) {             ItemInfo_VARnt_VARt_VARSize=LayoutParams_VAR.ItemInfo_VARnt_VARt_VAR;           }         }         fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec(ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt_VAR);         fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VARSpec=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec(ItemInfo_VARnt_VARt_VARSize,ItemInfo_VARnt_VARt_VARMoDrawable_VARe);         chilDrawable_VAR.meTfloat_VARpeDrawable_VARArrafloat_VAR_VARsure(ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt_VARSpec);         if (coint_VARsumeVerticTfloat_VARpeDrawable_VARArrafloat_VAR_VARl) {           chilDrawable_VARHeightSize-=chilDrawable_VAR.getMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureDrawable_VARHeight();         }  else         if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {           ItemInfo_VARnt_VARt_VAR-=chilDrawable_VAR.getMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureDrawable_VARWiDrawable_VARth();         }       }     }   }   mChilDrawable_VARWiDrawable_VARthMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec(ItemInfo_VARnt_VARt_VAR,MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.EXACTLY);   mChilDrawable_VARHeightMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec(chilDrawable_VARHeightSize,MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.EXACTLY);   mIint_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARout=Boolean_Constant;   populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte();   mIint_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARout=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   ItemInfo_VARnt_VARt_VAR=getChilDrawable_VARCouint_VARt();   for (ItemInfo_VARnt_VARt i=Number_Constant; i < ItemInfo_VARnt_VARt_VAR; ++i) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i);     if (chilDrawable_VAR.getVisibilitfloat_VAR() != GOItemInfo_VARnt_VARt_VARE) {       if (boolean_VAR)       Log.v(String_VAR,"MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsurItemInfo_VARnt_VARg #" + i + String_Constant+ chilDrawable_VAR+ String_Constant+ mChilDrawable_VARWiDrawable_VARthMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec);       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms LayoutParams_VAR=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)chilDrawable_VAR.getLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms();       if (LayoutParams_VAR == int_VARull || !LayoutParams_VAR.boolean_VAR) {         fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec((ItemInfo_VARnt_VARt)(ItemInfo_VARnt_VARt_VAR * LayoutParams_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor),MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec.EXACTLY);         chilDrawable_VAR.meTfloat_VARpeDrawable_VARArrafloat_VAR_VARsure(ItemInfo_VARnt_VARt_VAR,mChilDrawable_VARHeightMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureSpec);       }     }   } } 
@OverriDrawable_VARe protecteDrawable_VAR voiDrawable_VAR oint_VARSizeCItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt olDrawable_VARItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt olDrawable_VARItemInfo_VARnt_VARt_VAR){   super.oint_VARSizeCItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt_VAR,olDrawable_VARItemInfo_VARnt_VARt_VAR,olDrawable_VARItemInfo_VARnt_VARt_VAR);   if (ItemInfo_VARnt_VARt_VAR != olDrawable_VARItemInfo_VARnt_VARt_VAR) {     recomputeScrollPositioint_VAR(ItemInfo_VARnt_VARt_VAR,olDrawable_VARItemInfo_VARnt_VARt_VAR,mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR,mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR);   } } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR recomputeScrollPositioint_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   if (ItemInfo_VARnt_VARt_VAR > Number_Constant && !ArrayList<ItemInfo>_VAR.isEmptfloat_VAR()) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VARWithMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR=ItemInfo_VARnt_VARt_VAR - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRight() + ItemInfo_VARnt_VARt_VAR;     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VARWithMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR=ItemInfo_VARnt_VARt_VAR - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRight() + ItemInfo_VARnt_VARt_VAR;     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt float_VARItemInfo_VARnt_VARt_VAR=getScrollX();     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeOffset=(floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)float_VARItemInfo_VARnt_VARt_VAR / ItemInfo_VARnt_VARt_VARWithMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR;     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VARewOffsetPifloat_VARels=(ItemInfo_VARnt_VARt)(pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeOffset * ItemInfo_VARnt_VARt_VARWithMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR);     scrollTo(int_VARewOffsetPifloat_VARels,getScrollY());     if (!Scroller_VAR.isFItemInfo_VARnt_VARisheDrawable_VAR()) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VARewDurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR=Scroller_VAR.getDurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR() - Scroller_VAR.long_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAReDrawable_VAR();       ItemIint_VARfo tTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgetIint_VARfo=ItemInfo_VARnt_VARfoForPositioint_VAR(int_VAR);       Scroller_VAR.stTfloat_VARpeDrawable_VARArrafloat_VAR_VARrtScroll(int_VARewOffsetPifloat_VARels,Number_Constant,(ItemInfo_VARnt_VARt)(tTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgetIint_VARfo.float_VAR * ItemInfo_VARnt_VARt_VAR),Number_Constant,int_VARewDurTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR);     }   }  else {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemInfo_VAR=ItemInfo_VARnt_VARfoForPositioint_VAR(int_VAR);     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=ItemInfo_VAR != int_VARull ? MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mItemInfo_VARnt_VAR(ItemInfo_VAR.float_VAR,mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstOffset) : Number_Constant;     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=(ItemInfo_VARnt_VARt)(float_VAR * (ItemInfo_VARnt_VARt_VAR - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRight()));     if (int_VAR != getScrollX()) {       completeScroll(fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse);       scrollTo(int_VAR,getScrollY());     }   } } 
@OveItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VARiDrawable_VARe pItemInfo_VARnt_VARt_VARoItemInfo_VARnt_VARt_VARecItemInfo_VARnt_VARt_VAReDrawable_VAR voiDrawable_VAR oint_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARouItemInfo_VARnt_VARt_VAR(ItemInfo_VARnt_VARt_VARooItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAReTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR ItemInfo_VARnt_VARt_VARooItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAReTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR,ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR ItemInfo_VARnt_VARt_VAR){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR couint_VARItemInfo_VARnt_VARt_VAR=geItemInfo_VARnt_VARt_VARChItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARCouint_VARItemInfo_VARnt_VARt_VAR();   ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR wiDrawable_VARItemInfo_VARnt_VARt_VARh=ItemInfo_VARnt_VARt_VAR - ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR;   ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR heighItemInfo_VARnt_VARt_VAR=ItemInfo_VARnt_VARt_VAR - ItemInfo_VARnt_VARt_VAR;   ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLefItemInfo_VARnt_VARt_VAR=geItemInfo_VARnt_VARt_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLefItemInfo_VARnt_VARt_VAR();   ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop=geItemInfo_VARnt_VARt_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop();   ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRighItemInfo_VARnt_VARt_VAR=geItemInfo_VARnt_VARt_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRighItemInfo_VARnt_VARt_VAR();   ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgBoItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VARom=geItemInfo_VARnt_VARt_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgBoItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VARom();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR scItemInfo_VARnt_VARt_VARoItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARX=geItemInfo_VARnt_VARt_VARScItemInfo_VARnt_VARt_VARoItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARX();   ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR Drawable_VARecoItemInfo_VARnt_VARt_VARCouint_VARItemInfo_VARnt_VARt_VAR=Number_Constant;   foItemInfo_VARnt_VARt_VAR (ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR i=Number_Constant; i < couint_VARItemInfo_VARnt_VARt_VAR; i++) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR View chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR=geItemInfo_VARnt_VARt_VARChItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARAItemInfo_VARnt_VARt_VAR(i);     if (chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARVisItemInfo_VARint_VARt_VARItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARItemInfo_VARint_VARt_VARfloat_VAR() != GOItemInfo_VARnt_VARt_VARE) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARouItemInfo_VARnt_VARt_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARms ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARp=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARouItemInfo_VARnt_VARt_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARouItemInfo_VARnt_VARt_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARms();       ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR=Number_Constant;       ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARTop=Number_Constant;       if (ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARp.isDecoItemInfo_VARnt_VARt_VAR) {         fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR hgItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARv=ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARp.gItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARvItemInfo_VARint_VARt_VARfloat_VAR & GItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARvItemInfo_VARint_VARt_VARfloat_VAR.HORIZOItemInfo_VARnt_VARt_VARTAL_GRAVITY_MASK;         fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR vgItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARv=ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARp.gItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARvItemInfo_VARint_VARt_VARfloat_VAR & GItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARvItemInfo_VARint_VARt_VARfloat_VAR.VERTICAL_GRAVITY_MASK; swItemInfo_VARint_VARt_VARch (hgItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARv) { Drawable_VARefTfloat_VARpeDrawable_VARArrafloat_VAR_VARuItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARItemInfo_VARnt_VARt_VAR :           chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLefItemInfo_VARnt_VARt_VAR;         ItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VAReTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse GItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARvItemInfo_VARint_VARt_VARfloat_VAR.LEFT:       chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLefItemInfo_VARnt_VARt_VAR;     pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLefItemInfo_VARnt_VARt_VAR+=chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARWiDrawable_VARItemInfo_VARnt_VARt_VARh();   ItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VAReTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse GItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARvItemInfo_VARint_VARt_VARfloat_VAR.CEItemInfo_VARnt_VARt_VARTER_HORIZOItemInfo_VARnt_VARt_VARTAL: chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARt_VARh.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VAR((wiDrawable_VARItemInfo_VARnt_VARt_VARh - chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARWiDrawable_VARItemInfo_VARnt_VARt_VARh()) / Number_Constant,pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLefItemInfo_VARnt_VARt_VAR); ItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VAReTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse GItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARvItemInfo_VARint_VARt_VARfloat_VAR.RIGHT: chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR=wiDrawable_VARItemInfo_VARnt_VARt_VARh - pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRighItemInfo_VARnt_VARt_VAR - chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARWiDrawable_VARItemInfo_VARnt_VARt_VARh(); pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRighItemInfo_VARnt_VARt_VAR+=chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARWiDrawable_VARItemInfo_VARnt_VARt_VARh(); ItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VAReTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; } swItemInfo_VARint_VARt_VARch (vgItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARv) { Drawable_VARefTfloat_VARpeDrawable_VARArrafloat_VAR_VARuItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARItemInfo_VARnt_VARt_VAR : chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARTop=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop; ItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VAReTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse GItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARvItemInfo_VARint_VARt_VARfloat_VAR.TOP: chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARTop=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop; pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop+=chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARHeighItemInfo_VARnt_VARt_VAR(); ItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VAReTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse GItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARvItemInfo_VARint_VARt_VARfloat_VAR.CEItemInfo_VARnt_VARt_VARTER_VERTICAL: chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARTop=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARt_VARh.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VAR((heighItemInfo_VARnt_VARt_VAR - chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARHeighItemInfo_VARnt_VARt_VAR()) / Number_Constant,pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop); ItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VAReTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse GItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARvItemInfo_VARint_VARt_VARfloat_VAR.BOTTOM: chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARTop=heighItemInfo_VARnt_VARt_VAR - pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgBoItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VARom - chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARHeighItemInfo_VARnt_VARt_VAR(); pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgBoItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VARom+=chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARHeighItemInfo_VARnt_VARt_VAR(); ItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VAReTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; } chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR+=scItemInfo_VARnt_VARt_VARoItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARX; chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARouItemInfo_VARnt_VARt_VAR(chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR,chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARTop,chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR + chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARWiDrawable_VARItemInfo_VARnt_VARt_VARh(),chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARTop + chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARHeighItemInfo_VARnt_VARt_VAR()); Drawable_VARecoItemInfo_VARnt_VARt_VARCouint_VARItemInfo_VARnt_VARt_VAR++; } } } fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARWiDrawable_VARItemInfo_VARnt_VARt_VARh=wiDrawable_VARItemInfo_VARnt_VARt_VARh - pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLefItemInfo_VARnt_VARt_VAR - pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRighItemInfo_VARnt_VARt_VAR; foItemInfo_VARnt_VARt_VAR (ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR i=Number_Constant; i < couint_VARItemInfo_VARnt_VARt_VAR; i++) { fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR View chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR=geItemInfo_VARnt_VARt_VARChItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARAItemInfo_VARnt_VARt_VAR(i); if (chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARVisItemInfo_VARint_VARt_VARItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARItemInfo_VARint_VARt_VARfloat_VAR() != GOItemInfo_VARnt_VARt_VARE) { fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARouItemInfo_VARnt_VARt_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARms ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARp=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARouItemInfo_VARnt_VARt_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARouItemInfo_VARnt_VARt_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(); IItemInfo_VARnt_VARt_VARemIint_VARfo ItemInfo_VAR; if (!ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARp.isDecoItemInfo_VARnt_VARt_VAR && (ItemInfo_VAR=ItemInfo_VARnt_VARfoFoItemInfo_VARnt_VARt_VARChItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR(chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR)) != int_VARuItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR) { ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARoff=(ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR)(chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARWiDrawable_VARItemInfo_VARnt_VARt_VARh * ItemInfo_VAR.offseItemInfo_VARnt_VARt_VAR); ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLefItemInfo_VARnt_VARt_VAR + ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARoff; ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARTop=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop; if (ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARp.int_VAReeDrawable_VARsMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VARe) { ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARp.int_VAReeDrawable_VARsMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VARe=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARse; fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR wiDrawable_VARItemInfo_VARnt_VARt_VARhSpec=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReSpec.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReSpec((ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR)(chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARWiDrawable_VARItemInfo_VARnt_VARt_VARh * ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARp.wiDrawable_VARItemInfo_VARnt_VARt_VARhFTfloat_VARpeDrawable_VARArrafloat_VAR_VARcItemInfo_VARnt_VARt_VARoItemInfo_VARnt_VARt_VAR),MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReSpec.EXACTLY); fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VAR ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR heighItemInfo_VARnt_VARt_VARSpec=MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReSpec.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReSpec((ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR)(heighItemInfo_VARnt_VARt_VAR - pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop - pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgBoItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VARom),MeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReSpec.EXACTLY); chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.meTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VARe(wiDrawable_VARItemInfo_VARnt_VARt_VARhSpec,heighItemInfo_VARnt_VARt_VARSpec); } if (boolean_VAR) Log.v(String_VAR,"PosItemInfo_VARint_VARt_VARioint_VARItemInfo_VARnt_VARg #" + i + String_Constant+ chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR+ String_Constant+ ItemInfo_VAR.oItemInfo_VARnt_VARt_VARjecItemInfo_VARnt_VARt_VAR+ String_Constant+ chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR+ String_Constant+ chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARTop+ String_Constant+ chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARWiDrawable_VARItemInfo_VARnt_VARt_VARh()+ "float_VAR"+ chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARHeighItemInfo_VARnt_VARt_VAR()); chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.ItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARouItemInfo_VARnt_VARt_VAR(chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR,chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARTop,chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARLefItemInfo_VARnt_VARt_VAR + chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARWiDrawable_VARItemInfo_VARnt_VARt_VARh(),chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARTop + chItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VAR.geItemInfo_VARnt_VARt_VARMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsuItemInfo_VARnt_VARt_VAReDrawable_VARHeighItemInfo_VARnt_VARt_VAR()); } } } mTopPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeBouint_VARDrawable_VARs=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop; mBoItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VARomPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeBouint_VARDrawable_VARs=heighItemInfo_VARnt_VARt_VAR - pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgBoItemInfo_VARnt_VARt_VARItemInfo_VARnt_VARt_VARom; mDecoItemInfo_VARnt_VARt_VARChItemInfo_VARint_VARItemInfo_VARnt_VARt_VAR_VARDrawable_VARCouint_VARItemInfo_VARnt_VARt_VAR=Drawable_VARecoItemInfo_VARnt_VARt_VARCouint_VARItemInfo_VARnt_VARt_VAR; if (mFItemInfo_VARint_VARt_VARsItemInfo_VARnt_VARt_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARouItemInfo_VARnt_VARt_VAR) { scItemInfo_VARnt_VARt_VARoItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARToIItemInfo_VARnt_VARt_VARem(mCuItemInfo_VARnt_VARt_VARIItemInfo_VARnt_VARt_VARem,fTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARse,Number_Constant,fTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARse); } mFItemInfo_VARint_VARt_VARsItemInfo_VARnt_VARt_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARouItemInfo_VARnt_VARt_VAR=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARItemInfo_VARnt_VARt_VAR_VARse; } 
@OverriDrawable_VARe public voiDrawable_VAR computeScroll(){   if (!Scroller_VAR.isFItemInfo_VARnt_VARisheDrawable_VAR() && Scroller_VAR.computeScrollOffset()) {     ItemInfo_VARnt_VARt olDrawable_VARX=getScrollX();     ItemInfo_VARnt_VARt olDrawable_VARY=getScrollY();     ItemInfo_VARnt_VARt float_VAR=Scroller_VAR.getCurrX();     ItemInfo_VARnt_VARt float_VAR=Scroller_VAR.getCurrY();     if (olDrawable_VARX != float_VAR || olDrawable_VARY != float_VAR) {       scrollTo(float_VAR,float_VAR);       if (!pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR(float_VAR)) {         Scroller_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbortAint_VARimTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR();         scrollTo(Number_Constant,float_VAR);       }     }     ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ItemInfo_VARnt_VARt_VARtIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARteOint_VARAint_VARimTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR(this);     returint_VAR;   }   completeScroll(Boolean_Constant); } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   if (ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() == Number_Constant) {     mCTfloat_VARpeDrawable_VARArrafloat_VAR_VARlleDrawable_VARSuper=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR(Number_Constant,Number_Constant,Number_Constant);     if (!mCTfloat_VARpeDrawable_VARArrafloat_VAR_VARlleDrawable_VARSuper) {       throw int_VARew IllegTfloat_VARpeDrawable_VARArrafloat_VAR_VARlStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteEfloat_VARceptioint_VAR("oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR Drawable_VARiDrawable_VAR int_VARot cTfloat_VARpeDrawable_VARArrafloat_VAR_VARll superclTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR implemeint_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR");     }     returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   }   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemInfo_VAR=ItemInfo_VARnt_VARfoForCurreint_VARtScrollPositioint_VAR();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getClieint_VARtWiDrawable_VARth();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARthWithMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR=wiDrawable_VARth + mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset=(floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR / wiDrawable_VARth;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt curreint_VARtPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge=ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeOffset=(((floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)ItemInfo_VARnt_VARt_VAR / wiDrawable_VARth) - ItemInfo_VAR.float_VAR) / (ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt float_VARPifloat_VARels=(ItemInfo_VARnt_VARt)(pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeOffset * wiDrawable_VARthWithMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR);   mCTfloat_VARpeDrawable_VARArrafloat_VAR_VARlleDrawable_VARSuper=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR(curreint_VARtPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge,pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeOffset,float_VARPifloat_VARels);   if (!mCTfloat_VARpeDrawable_VARArrafloat_VAR_VARlleDrawable_VARSuper) {     throw int_VARew IllegTfloat_VARpeDrawable_VARArrafloat_VAR_VARlStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteEfloat_VARceptioint_VAR("oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR Drawable_VARiDrawable_VAR int_VARot cTfloat_VARpeDrawable_VARArrafloat_VAR_VARll superclTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR implemeint_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR");   }   returint_VAR Boolean_Constant; } 
 protecteDrawable_VAR voiDrawable_VAR oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR,ItemInfo_VARnt_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARPifloat_VARels){   if (ItemInfo_VARnt_VARt_VAR > Number_Constant) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=getScrollX();     ItemInfo_VARnt_VARt pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft=getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft();     ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgRight();     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getWiDrawable_VARth();     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt chilDrawable_VARCouint_VARt=getChilDrawable_VARCouint_VARt();     for (ItemInfo_VARnt_VARt i=Number_Constant; i < chilDrawable_VARCouint_VARt; i++) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i);       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms LayoutParams_VAR=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)chilDrawable_VAR.getLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms();       if (!LayoutParams_VAR.boolean_VAR)       coint_VARtItemInfo_VARnt_VARue;       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt hgrTfloat_VARpeDrawable_VARArrafloat_VAR_VARv=LayoutParams_VAR.grTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR & GrTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR.HORIZOItemInfo_VARnt_VARt_VARTAL_GRAVITY_MASK;       ItemInfo_VARnt_VARt chilDrawable_VARLeft=Number_Constant; switch (hgrTfloat_VARpeDrawable_VARArrafloat_VAR_VARv) { Drawable_VARefTfloat_VARpeDrawable_VARArrafloat_VAR_VARult :         chilDrawable_VARLeft=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft;       breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse GrTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR.LEFT:     chilDrawable_VARLeft=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft;   pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft+=chilDrawable_VAR.getWiDrawable_VARth(); breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse GrTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR.CEItemInfo_VARnt_VARt_VARTER_HORIZOItemInfo_VARnt_VARt_VARTAL: chilDrawable_VARLeft=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VAR((wiDrawable_VARth - chilDrawable_VAR.getMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureDrawable_VARWiDrawable_VARth()) / Number_Constant,pTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgLeft); breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse GrTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR.RIGHT: chilDrawable_VARLeft=wiDrawable_VARth - ItemInfo_VARnt_VARt_VAR - chilDrawable_VAR.getMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureDrawable_VARWiDrawable_VARth(); ItemInfo_VARnt_VARt_VAR+=chilDrawable_VAR.getMeTfloat_VARpeDrawable_VARArrafloat_VAR_VARsureDrawable_VARWiDrawable_VARth(); breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; } chilDrawable_VARLeft+=int_VAR; fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt chilDrawable_VAROffset=chilDrawable_VARLeft - chilDrawable_VAR.getLeft(); if (chilDrawable_VAROffset != Number_Constant) { chilDrawable_VAR.floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARLeftAint_VARDrawable_VARRight(chilDrawable_VAROffset); } } } for (Oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer eTfloat_VARpeDrawable_VARArrafloat_VAR_VARchListeint_VARer : mOint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARers) { if (eTfloat_VARpeDrawable_VARArrafloat_VAR_VARchListeint_VARer != int_VARull) { eTfloat_VARpeDrawable_VARArrafloat_VAR_VARchListeint_VARer.oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR(ItemInfo_VARnt_VARt_VAR,floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR,floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARPifloat_VARels); } } if (mIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARlPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer != int_VARull) { mIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARlPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeListeint_VARer.oint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR(ItemInfo_VARnt_VARt_VAR,floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR,floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VARPifloat_VARels); } if (mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer != int_VARull) { fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=getScrollX(); fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt chilDrawable_VARCouint_VARt=getChilDrawable_VARCouint_VARt(); for (ItemInfo_VARnt_VARt i=Number_Constant; i < chilDrawable_VARCouint_VARt; i++) { fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i); fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms LayoutParams_VAR=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)chilDrawable_VAR.getLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(); if (LayoutParams_VAR.boolean_VAR) coint_VARtItemInfo_VARnt_VARue; fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR=(floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)(chilDrawable_VAR.getLeft() - int_VAR) / getClieint_VARtWiDrawable_VARth(); mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformer.trTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARsformPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge(chilDrawable_VAR,floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR); } } mCTfloat_VARpeDrawable_VARArrafloat_VAR_VARlleDrawable_VARSuper=Boolean_Constant; } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR completeScroll(booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR){   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR int_VAReeDrawable_VARPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=mScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte == ItemInfo_VARnt_VARt_VAR;   if (int_VAReeDrawable_VARPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARte) {     setScrollItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR(fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse);     Scroller_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbortAint_VARimTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR();     ItemInfo_VARnt_VARt olDrawable_VARX=getScrollX();     ItemInfo_VARnt_VARt olDrawable_VARY=getScrollY();     ItemInfo_VARnt_VARt float_VAR=Scroller_VAR.getCurrX();     ItemInfo_VARnt_VARt float_VAR=Scroller_VAR.getCurrY();     if (olDrawable_VARX != float_VAR || olDrawable_VARY != float_VAR) {       scrollTo(float_VAR,float_VAR);     }   }   mPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARtePeint_VARDrawable_VARItemInfo_VARnt_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   for (ItemInfo_VARnt_VARt i=Number_Constant; i < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR(); i++) {     ItemIint_VARfo ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(i);     if (ItemInfo_VAR.scrollItemInfo_VARnt_VARg) {       int_VAReeDrawable_VARPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=Boolean_Constant;       ItemInfo_VAR.scrollItemInfo_VARnt_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     }   }   if (int_VAReeDrawable_VARPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARte) {     if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {       ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ItemInfo_VARnt_VARt_VARtOint_VARAint_VARimTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR(this,mEint_VARDrawable_VARScrollRuint_VARint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARble);     }  else {       mEint_VARDrawable_VARScrollRuint_VARint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARble.ruint_VAR();     }   } } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR isGutterDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg(floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR,floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt Drawable_VARfloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR){   returint_VAR (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR < ItemInfo_VARnt_VARt_VAR && Drawable_VARfloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR > Number_Constant) || (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR > getWiDrawable_VARth() - ItemInfo_VARnt_VARt_VAR && Drawable_VARfloTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR < Number_Constant); } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VARLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARers(booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt chilDrawable_VARCouint_VARt=getChilDrawable_VARCouint_VARt();   for (ItemInfo_VARnt_VARt i=Number_Constant; i < chilDrawable_VARCouint_VARt; i++) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt lTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARerTfloat_VARpe=booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR ? ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.LAYER_TYPE_HARDWARE : ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.LAYER_TYPE_ItemInfo_VARnt_VARt_VAROItemInfo_VARnt_VARt_VARE;     ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.setLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARerTfloat_VARpe(getChilDrawable_VARAt(i),lTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARerTfloat_VARpe,int_VARull);   } } 
@OverriDrawable_VARe public booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR oint_VARIint_VARterceptTouchEveint_VARt(Motioint_VAREveint_VARt Motioint_VAREveint_VARt_VAR){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctioint_VAR=Motioint_VAREveint_VARt_VAR.getActioint_VAR() & Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ACTIOItemInfo_VARnt_VARt_VAR_MASK;   if (Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctioint_VAR == Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_CAItemInfo_VARnt_VARt_VARCEL || Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctioint_VAR == Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_UP) {     if (boolean_VAR)     Log.v(String_VAR,"Iint_VARtercept Drawable_VARoint_VARe!");     booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     mIsUint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleToDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     mActivePoItemInfo_VARnt_VARterIDrawable_VAR=IItemInfo_VARnt_VARt_VARVALID_POIItemInfo_VARnt_VARt_VARTER;     if (Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR != int_VARull) {       Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR.recfloat_VARcle();       Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR=int_VARull;     }     returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   }   if (Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctioint_VAR != Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_DOWItemInfo_VARnt_VARt_VAR) {     if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {       if (boolean_VAR)       Log.v(String_VAR,"Iint_VARtercept returint_VARItemInfo_VARnt_VARg Boolean_Constant!");       returint_VAR Boolean_Constant;     }     if (mIsUint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleToDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg) {       if (boolean_VAR)       Log.v(String_VAR,"Iint_VARtercept returint_VARItemInfo_VARnt_VARg fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse!");       returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     }   } switch (Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctioint_VAR) { cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_MOVE: {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctivePoItemInfo_VARnt_VARterIDrawable_VAR=mActivePoItemInfo_VARnt_VARterIDrawable_VAR;       if (Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctivePoItemInfo_VARnt_VARterIDrawable_VAR == IItemInfo_VARnt_VARt_VARVALID_POIItemInfo_VARnt_VARt_VARTER) {         breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk;       }       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt poItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.fItemInfo_VARnt_VARDrawable_VARPoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR(Motioint_VAREveint_VARt_VAR,Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctivePoItemInfo_VARnt_VARterIDrawable_VAR);       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getX(Motioint_VAREveint_VARt_VAR,poItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR);       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt Drawable_VARfloat_VAR=float_VAR - mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX;       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(Drawable_VARfloat_VAR);       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getY(Motioint_VAREveint_VARt_VAR,poItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR);       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VARDiff=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(float_VAR - mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARY);       if (boolean_VAR)       Log.v(String_VAR,"MoveDrawable_VAR float_VAR to " + float_VAR + String_Constant+ float_VAR+ " Drawable_VARiff="+ floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR+ String_Constant+ float_VARDiff);       if (Drawable_VARfloat_VAR != Number_Constant && !isGutterDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg(mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX,Drawable_VARfloat_VAR) && cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScroll(this,fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse,(ItemInfo_VARnt_VARt)Drawable_VARfloat_VAR,(ItemInfo_VARnt_VARt)float_VAR,(ItemInfo_VARnt_VARt)float_VAR)) {         mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX=float_VAR;         mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARY=float_VAR;         mIsUint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleToDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg=Boolean_Constant;         returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;       }       if (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR > int_VAR && floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR * Number_Constant > float_VARDiff) {         if (boolean_VAR)         Log.v(String_VAR,"StTfloat_VARpeDrawable_VARArrafloat_VAR_VARrtItemInfo_VARnt_VARg Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg!");         booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=Boolean_Constant;         requestPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARtDisTfloat_VARpeDrawable_VARArrafloat_VAR_VARllowIint_VARterceptTouchEveint_VARt(Boolean_Constant);         setScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(SCROLL_STATE_DRAGGIItemInfo_VARnt_VARt_VARG);         mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX=Drawable_VARfloat_VAR > Number_Constant ? mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARX + int_VAR : mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARX - int_VAR;         mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARY=float_VAR;         setScrollItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR(Boolean_Constant);       }  else       if (float_VARDiff > int_VAR) {         if (boolean_VAR)         Log.v(String_VAR,"StTfloat_VARpeDrawable_VARArrafloat_VAR_VARrtItemInfo_VARnt_VARg uint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARble to Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg!");         mIsUint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleToDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg=Boolean_Constant;       }       if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {         if (performDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg(float_VAR)) {           ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ItemInfo_VARnt_VARt_VARtIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARteOint_VARAint_VARimTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR(this);         }       }       breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk;     } cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_DOWItemInfo_VARnt_VARt_VAR: {     mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX=mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARX=Motioint_VAREveint_VARt_VAR.getX();     mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARY=mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARY=Motioint_VAREveint_VARt_VAR.getY();     mActivePoItemInfo_VARnt_VARterIDrawable_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getPoItemInfo_VARnt_VARterIDrawable_VAR(Motioint_VAREveint_VARt_VAR,Number_Constant);     mIsUint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleToDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     Scroller_VAR.computeScrollOffset();     if (mScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte == ItemInfo_VARnt_VARt_VAR && MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(Scroller_VAR.getFItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARlX() - Scroller_VAR.getCurrX()) > mCloseEint_VARough) {       Scroller_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbortAint_VARimTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR();       mPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARtePeint_VARDrawable_VARItemInfo_VARnt_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;       populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte();       booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=Boolean_Constant;       requestPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARtDisTfloat_VARpeDrawable_VARArrafloat_VAR_VARllowIint_VARterceptTouchEveint_VARt(Boolean_Constant);       setScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(SCROLL_STATE_DRAGGIItemInfo_VARnt_VARt_VARG);     }  else {       completeScroll(fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse);       booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     }     if (boolean_VAR)     Log.v(String_VAR,"Dowint_VAR Tfloat_VARpeDrawable_VARArrafloat_VAR_VARt " + mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX + String_Constant+ mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARY+ " booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR="+ booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR+ "mIsUint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleToDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg="+ mIsUint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleToDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg);     breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk;   } cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ACTIOItemInfo_VARnt_VARt_VAR_POIItemInfo_VARnt_VARt_VARTER_UP: oint_VARSecoint_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARrfloat_VARPoItemInfo_VARnt_VARterUp(Motioint_VAREveint_VARt_VAR); breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; } if (Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR == int_VARull) { Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR=Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker.obtTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VAR(); } Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARMovemeint_VARt(Motioint_VAREveint_VARt_VAR); returint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR; } 
@OverriDrawable_VARe public booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR oint_VARTouchEveint_VARt(Motioint_VAREveint_VARt Motioint_VAREveint_VARt_VAR){   if (mFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARggItemInfo_VARnt_VARg) {     returint_VAR Boolean_Constant;   }   if (Motioint_VAREveint_VARt_VAR.getActioint_VAR() == Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_DOWItemInfo_VARnt_VARt_VAR && Motioint_VAREveint_VARt_VAR.getEDrawable_VARgeFlTfloat_VARpeDrawable_VARArrafloat_VAR_VARgs() != Number_Constant) {     returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   }   if (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter == int_VARull || mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt() == Number_Constant) {     returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   }   if (Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR == int_VARull) {     Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR=Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker.obtTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VAR();   }   Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARMovemeint_VARt(Motioint_VAREveint_VARt_VAR);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctioint_VAR=Motioint_VAREveint_VARt_VAR.getActioint_VAR();   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse; switch (Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctioint_VAR & Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ACTIOItemInfo_VARnt_VARt_VAR_MASK) { cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_DOWItemInfo_VARnt_VARt_VAR: {       Scroller_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbortAint_VARimTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR();       mPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARtePeint_VARDrawable_VARItemInfo_VARnt_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;       populTfloat_VARpeDrawable_VARArrafloat_VAR_VARte();       mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX=mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARX=Motioint_VAREveint_VARt_VAR.getX();       mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARY=mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARY=Motioint_VAREveint_VARt_VAR.getY();       mActivePoItemInfo_VARnt_VARterIDrawable_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getPoItemInfo_VARnt_VARterIDrawable_VAR(Motioint_VAREveint_VARt_VAR,Number_Constant);       breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk;     } cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_MOVE:   if (!booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt poItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.fItemInfo_VARnt_VARDrawable_VARPoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR(Motioint_VAREveint_VARt_VAR,mActivePoItemInfo_VARnt_VARterIDrawable_VAR);     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getX(Motioint_VAREveint_VARt_VAR,poItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR);     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(float_VAR - mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX);     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getY(Motioint_VAREveint_VARt_VAR,poItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR);     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VARDiff=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(float_VAR - mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARY);     if (boolean_VAR)     Log.v(String_VAR,"MoveDrawable_VAR float_VAR to " + float_VAR + String_Constant+ float_VAR+ " Drawable_VARiff="+ floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR+ String_Constant+ float_VARDiff);     if (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR > int_VAR && floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR > float_VARDiff) {       if (boolean_VAR)       Log.v(String_VAR,"StTfloat_VARpeDrawable_VARArrafloat_VAR_VARrtItemInfo_VARnt_VARg Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg!");       booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=Boolean_Constant;       requestPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARtDisTfloat_VARpeDrawable_VARArrafloat_VAR_VARllowIint_VARterceptTouchEveint_VARt(Boolean_Constant);       mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX=float_VAR - mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARX > Number_Constant ? mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARX + int_VAR : mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARX - int_VAR;       mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARY=float_VAR;       setScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(SCROLL_STATE_DRAGGIItemInfo_VARnt_VARt_VARG);       setScrollItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR(Boolean_Constant);       ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR=getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt();       if (ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR != int_VARull) {         ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR.requestDisTfloat_VARpeDrawable_VARArrafloat_VAR_VARllowIint_VARterceptTouchEveint_VARt(Boolean_Constant);       }     }   } if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctivePoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.fItemInfo_VARnt_VARDrawable_VARPoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR(Motioint_VAREveint_VARt_VAR,mActivePoItemInfo_VARnt_VARterIDrawable_VAR);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getX(Motioint_VAREveint_VARt_VAR,Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctivePoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR);   int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte|=performDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg(float_VAR); } breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_UP: if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) { fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR=Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR; Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR.computeCurreint_VARtVelocitfloat_VAR(Number_Constant,mMTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARimumVelocitfloat_VAR); ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=(ItemInfo_VARnt_VARt)Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARckerCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getXVelocitfloat_VAR(Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR,mActivePoItemInfo_VARnt_VARterIDrawable_VAR); mPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARtePeint_VARDrawable_VARItemInfo_VARnt_VARg=Boolean_Constant; fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getClieint_VARtWiDrawable_VARth(); fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=getScrollX(); fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemInfo_VAR=ItemInfo_VARnt_VARfoForCurreint_VARtScrollPositioint_VAR(); fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt curreint_VARtPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge=ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR; fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeOffset=(((floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)int_VAR / wiDrawable_VARth) - ItemInfo_VAR.float_VAR) / ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor; fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctivePoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.fItemInfo_VARnt_VARDrawable_VARPoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR(Motioint_VAREveint_VARt_VAR,mActivePoItemInfo_VARnt_VARterIDrawable_VAR); fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getX(Motioint_VAREveint_VARt_VAR,Tfloat_VARpeDrawable_VARArrafloat_VAR_VARctivePoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR); fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt totTfloat_VARpeDrawable_VARArrafloat_VAR_VARlDeltTfloat_VARpeDrawable_VARArrafloat_VAR_VAR=(ItemInfo_VARnt_VARt)(float_VAR - mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARX); ItemInfo_VARnt_VARt int_VARefloat_VARtPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge=Drawable_VARetermItemInfo_VARnt_VAReTTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgetPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge(curreint_VARtPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge,pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeOffset,ItemInfo_VARnt_VARt_VAR,totTfloat_VARpeDrawable_VARArrafloat_VAR_VARlDeltTfloat_VARpeDrawable_VARArrafloat_VAR_VAR); setCurreint_VARtItemIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl(int_VARefloat_VARtPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge,Boolean_Constant,Boolean_Constant,ItemInfo_VARnt_VARt_VAR); mActivePoItemInfo_VARnt_VARterIDrawable_VAR=IItemInfo_VARnt_VARt_VARVALID_POIItemInfo_VARnt_VARt_VARTER; eint_VARDrawable_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg(); int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=mLeftEDrawable_VARge.oint_VARReleTfloat_VARpeDrawable_VARArrafloat_VAR_VARse() | mRightEDrawable_VARge.oint_VARReleTfloat_VARpeDrawable_VARArrafloat_VAR_VARse(); } breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_CAItemInfo_VARnt_VARt_VARCEL: if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) { scrollToItem(int_VAR,Boolean_Constant,Number_Constant,fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse); mActivePoItemInfo_VARnt_VARterIDrawable_VAR=IItemInfo_VARnt_VARt_VARVALID_POIItemInfo_VARnt_VARt_VARTER; eint_VARDrawable_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg(); int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=mLeftEDrawable_VARge.oint_VARReleTfloat_VARpeDrawable_VARArrafloat_VAR_VARse() | mRightEDrawable_VARge.oint_VARReleTfloat_VARpeDrawable_VARArrafloat_VAR_VARse(); } breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ACTIOItemInfo_VARnt_VARt_VAR_POIItemInfo_VARnt_VARt_VARTER_DOWItemInfo_VARnt_VARt_VAR: { fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARDrawable_VARefloat_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getActioint_VARIint_VARDrawable_VARefloat_VAR(Motioint_VAREveint_VARt_VAR); fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getX(Motioint_VAREveint_VARt_VAR,ItemInfo_VARnt_VARDrawable_VARefloat_VAR); mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX=float_VAR; mActivePoItemInfo_VARnt_VARterIDrawable_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getPoItemInfo_VARnt_VARterIDrawable_VAR(Motioint_VAREveint_VARt_VAR,ItemInfo_VARnt_VARDrawable_VARefloat_VAR); breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; } cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ACTIOItemInfo_VARnt_VARt_VAR_POIItemInfo_VARnt_VARt_VARTER_UP: oint_VARSecoint_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARrfloat_VARPoItemInfo_VARnt_VARterUp(Motioint_VAREveint_VARt_VAR); mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getX(Motioint_VAREveint_VARt_VAR,Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.fItemInfo_VARnt_VARDrawable_VARPoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR(Motioint_VAREveint_VARt_VAR,mActivePoItemInfo_VARnt_VARterIDrawable_VAR)); breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; } if (int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte) { ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ItemInfo_VARnt_VARt_VARtIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARteOint_VARAint_VARimTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR(this); } returint_VAR Boolean_Constant; } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR requestPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARtDisTfloat_VARpeDrawable_VARArrafloat_VAR_VARllowIint_VARterceptTouchEveint_VARt(booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR=getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt();   if (ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR != int_VARull) {     ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR.requestDisTfloat_VARpeDrawable_VARArrafloat_VAR_VARllowIint_VARterceptTouchEveint_VARt(booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR);   } } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR performDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg(floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR){   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt Drawable_VAReltTfloat_VARpeDrawable_VARArrafloat_VAR_VARX=mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX - floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR;   mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX=floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR;   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt olDrawable_VARScrollX=getScrollX();   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt int_VAR=olDrawable_VARScrollX + Drawable_VAReltTfloat_VARpeDrawable_VARArrafloat_VAR_VARX;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getClieint_VARtWiDrawable_VARth();   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt leftBouint_VARDrawable_VAR=wiDrawable_VARth * float_VAR;   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt rightBouint_VARDrawable_VAR=wiDrawable_VARth * mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstOffset;   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR boolean_VAR=Boolean_Constant;   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=Boolean_Constant;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemIint_VARfo_VAR=ArrayList<ItemInfo>_VAR.get(Number_Constant);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemIint_VARfo_VAR=ArrayList<ItemInfo>_VAR.get(ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() - Number_Constant);   if (ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR != Number_Constant) {     boolean_VAR=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     leftBouint_VARDrawable_VAR=ItemIint_VARfo_VAR.float_VAR * wiDrawable_VARth;   }   if (ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR != mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt() - Number_Constant) {     booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     rightBouint_VARDrawable_VAR=ItemIint_VARfo_VAR.float_VAR * wiDrawable_VARth;   }   if (int_VAR < leftBouint_VARDrawable_VAR) {     if (boolean_VAR) {       floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=leftBouint_VARDrawable_VAR - int_VAR;       int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=mLeftEDrawable_VARge.oint_VARPull(MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(float_VAR) / wiDrawable_VARth);     }     int_VAR=leftBouint_VARDrawable_VAR;   }  else   if (int_VAR > rightBouint_VARDrawable_VAR) {     if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {       floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=int_VAR - rightBouint_VARDrawable_VAR;       int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=mRightEDrawable_VARge.oint_VARPull(MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(float_VAR) / wiDrawable_VARth);     }     int_VAR=rightBouint_VARDrawable_VAR;   }   mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX+=int_VAR - (ItemInfo_VARnt_VARt)int_VAR;   scrollTo((ItemInfo_VARnt_VARt)int_VAR,getScrollY());   pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR((ItemInfo_VARnt_VARt)int_VAR);   returint_VAR int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte; } 
 privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte ItemIint_VARfo ItemInfo_VARnt_VARfoForCurreint_VARtScrollPositioint_VAR(){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getClieint_VARtWiDrawable_VARth();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=wiDrawable_VARth > Number_Constant ? (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)getScrollX() / wiDrawable_VARth : Number_Constant;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset=wiDrawable_VARth > Number_Constant ? (floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR / wiDrawable_VARth : Number_Constant;   ItemInfo_VARnt_VARt lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstPos=-Number_Constant;   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstOffset=Number_Constant;   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstWiDrawable_VARth=Number_Constant;   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR boolean_VAR=Boolean_Constant;   ItemIint_VARfo ItemIint_VARfo_VAR=int_VARull;   for (ItemInfo_VARnt_VARt i=Number_Constant; i < ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR(); i++) {     ItemIint_VARfo ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(i);     floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR;     if (!boolean_VAR && ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR != lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstPos + Number_Constant) {       ItemInfo_VAR=ItemInfo_VAR;       ItemInfo_VAR.float_VAR=lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstOffset + lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstWiDrawable_VARth + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;       ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR=lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstPos + Number_Constant;       ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeWiDrawable_VARth(ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR);       i--;     }     float_VAR=ItemInfo_VAR.float_VAR;     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt leftBouint_VARDrawable_VAR=float_VAR;     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt rightBouint_VARDrawable_VAR=float_VAR + ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;     if (boolean_VAR || float_VAR >= leftBouint_VARDrawable_VAR) {       if (float_VAR < rightBouint_VARDrawable_VAR || i == ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() - Number_Constant) {         returint_VAR ItemInfo_VAR;       }     }  else {       returint_VAR ItemIint_VARfo_VAR;     }     boolean_VAR=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstPos=ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR;     lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstOffset=float_VAR;     lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstWiDrawable_VARth=ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor;     ItemIint_VARfo_VAR=ItemInfo_VAR;   }   returint_VAR ItemIint_VARfo_VAR; } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte ItemInfo_VARnt_VARt Drawable_VARetermItemInfo_VARnt_VAReTTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgetPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   ItemInfo_VARnt_VARt tTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgetPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge;   if (MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(ItemInfo_VARnt_VARt_VAR) > ItemInfo_VARnt_VARt_VAR && MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARbs(ItemInfo_VARnt_VARt_VAR) > mMItemInfo_VARnt_VARimumVelocitfloat_VAR) {     tTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgetPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge=ItemInfo_VARnt_VARt_VAR > Number_Constant ? ItemInfo_VARnt_VARt_VAR : ItemInfo_VARnt_VARt_VAR + Number_Constant;   }  else {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt truint_VARcTfloat_VARpeDrawable_VARArrafloat_VAR_VARtor=ItemInfo_VARnt_VARt_VAR >= int_VAR ? Number_Constant.Number_Constantf : Number_Constant;     tTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgetPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge=(ItemInfo_VARnt_VARt)(ItemInfo_VARnt_VARt_VAR + floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR + truint_VARcTfloat_VARpeDrawable_VARArrafloat_VAR_VARtor);   }   if (ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() > Number_Constant) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemIint_VARfo_VAR=ArrayList<ItemInfo>_VAR.get(Number_Constant);     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemIint_VARfo_VAR=ArrayList<ItemInfo>_VAR.get(ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() - Number_Constant);     tTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgetPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge=MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VAR(ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR,MTfloat_VARpeDrawable_VARArrafloat_VAR_VARth.mItemInfo_VARnt_VAR(tTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgetPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge,ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR));   }   returint_VAR tTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgetPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge; } 
@OverriDrawable_VARe public voiDrawable_VAR Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARw(CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR){   super.Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARw(CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR);   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt float_VARScrollMoDrawable_VARe=ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getOverScrollMoDrawable_VARe(this);   if (float_VARScrollMoDrawable_VARe == ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.OVER_SCROLL_ALWAYS || (float_VARScrollMoDrawable_VARe == ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.OVER_SCROLL_IF_COItemInfo_VARnt_VARt_VARTEItemInfo_VARnt_VARt_VART_SCROLLS && mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter != int_VARull && mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt() > Number_Constant)) {     if (!mLeftEDrawable_VARge.isFItemInfo_VARnt_VARisheDrawable_VAR()) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt restoreCouint_VARt=CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR.sTfloat_VARpeDrawable_VARArrafloat_VAR_VARve();       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=getHeight() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgBottom();       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getWiDrawable_VARth();       CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR.rotTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(Number_ConstantNumber_ConstantNumber_Constant);       CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR.trTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARslTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(-ItemInfo_VARnt_VARt_VAR + getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop(),float_VAR * wiDrawable_VARth);       mLeftEDrawable_VARge.setSize(ItemInfo_VARnt_VARt_VAR,wiDrawable_VARth);       int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte|=mLeftEDrawable_VARge.Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARw(CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR);       CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR.restoreToCouint_VARt(restoreCouint_VARt);     }     if (!mRightEDrawable_VARge.isFItemInfo_VARnt_VARisheDrawable_VAR()) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt restoreCouint_VARt=CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR.sTfloat_VARpeDrawable_VARArrafloat_VAR_VARve();       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getWiDrawable_VARth();       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=getHeight() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop() - getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgBottom();       CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR.rotTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(Number_Constant);       CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR.trTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARslTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(-getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARItemInfo_VARnt_VARgTop(),-(mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstOffset + Number_Constant) * wiDrawable_VARth);       mRightEDrawable_VARge.setSize(ItemInfo_VARnt_VARt_VAR,wiDrawable_VARth);       int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte|=mRightEDrawable_VARge.Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARw(CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR);       CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR.restoreToCouint_VARt(restoreCouint_VARt);     }   }  else {     mLeftEDrawable_VARge.fItemInfo_VARnt_VARish();     mRightEDrawable_VARge.fItemInfo_VARnt_VARish();   }   if (int_VAReeDrawable_VARsIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARte) {     ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ItemInfo_VARnt_VARt_VARtIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARteOint_VARAint_VARimTfloat_VARpeDrawable_VARArrafloat_VAR_VARtioint_VAR(this);   } } 
@OverriDrawable_VARe protecteDrawable_VAR voiDrawable_VAR oint_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARw(CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR){   super.oint_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARw(CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR);   if (mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR > Number_Constant && mMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble != int_VARull && ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() > Number_Constant && mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter != int_VARull) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=getScrollX();     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getWiDrawable_VARth();     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset=(floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR / wiDrawable_VARth;     ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=Number_Constant;     ItemIint_VARfo ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(Number_Constant);     floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt float_VAR=ItemInfo_VAR.float_VAR;     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt itemCouint_VARt=ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR();     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR;     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstPos=ArrayList<ItemInfo>_VAR.get(itemCouint_VARt - Number_Constant).ItemInfo_VARnt_VARt_VARitioint_VAR;     for (ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=int_VAR; ItemInfo_VARnt_VARt_VAR < lTfloat_VARpeDrawable_VARArrafloat_VAR_VARstPos; ItemInfo_VARnt_VARt_VAR++) {       while (ItemInfo_VARnt_VARt_VAR > ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR && ItemInfo_VARnt_VARt_VAR < itemCouint_VARt) {         ItemInfo_VAR=ArrayList<ItemInfo>_VAR.get(++ItemInfo_VARnt_VARt_VAR);       }       floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwAt;       if (ItemInfo_VARnt_VARt_VAR == ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR) {         Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwAt=(ItemInfo_VAR.float_VAR + ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor) * wiDrawable_VARth;         float_VAR=ItemInfo_VAR.float_VAR + ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;       }  else {         floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor=mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeWiDrawable_VARth(ItemInfo_VARnt_VARt_VAR);         Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwAt=(float_VAR + wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor) * wiDrawable_VARth;         float_VAR+=wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor + mTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAROffset;       }       if (Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwAt + mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR > int_VAR) {         mMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble.setBouint_VARDrawable_VARs((ItemInfo_VARnt_VARt)Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwAt,mTopPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeBouint_VARDrawable_VARs,(ItemInfo_VARnt_VARt)(Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwAt + mPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VAR + Number_Constant),mBottomPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeBouint_VARDrawable_VARs);         mMTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgItemInfo_VARnt_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwTfloat_VARpeDrawable_VARArrafloat_VAR_VARble.Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARw(CTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARs_VAR);       }       if (Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwAt > int_VAR + wiDrawable_VARth) {         breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk;       }     }   } } 
 public booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR begItemInfo_VARnt_VARFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg(){   if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {     returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   }   mFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARggItemInfo_VARnt_VARg=Boolean_Constant;   setScrollStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte(SCROLL_STATE_DRAGGIItemInfo_VARnt_VARt_VARG);   mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARX=mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX=Number_Constant;   if (Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR == int_VARull) {     Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR=Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker.obtTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VAR();   }  else {     Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR.cleTfloat_VARpeDrawable_VARArrafloat_VAR_VARr();   }   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl loint_VARg long_VAR=Sfloat_VARstemClock.uplong_VARMillis();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl Motioint_VAREveint_VARt MotionEvent_VAR=Motioint_VAREveint_VARt.obtTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VAR(long_VAR,long_VAR,Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_DOWItemInfo_VARnt_VARt_VAR,Number_Constant,Number_Constant,Number_Constant);   Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARMovemeint_VARt(MotionEvent_VAR);   MotionEvent_VAR.recfloat_VARcle();   mFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARgBegItemInfo_VARnt_VARTime=long_VAR;   returint_VAR Boolean_Constant; } 
 public voiDrawable_VAR eint_VARDrawable_VARFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg(){   if (!mFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARggItemInfo_VARnt_VARg) {     throw int_VARew IllegTfloat_VARpeDrawable_VARArrafloat_VAR_VARlStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteEfloat_VARceptioint_VAR("ItemInfo_VARnt_VARt_VARo fTfloat_VARpeDrawable_VARArrafloat_VAR_VARke Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg ItemInfo_VARnt_VAR progreSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR. CTfloat_VARpeDrawable_VARArrafloat_VAR_VARll begItemInfo_VARnt_VARFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg boolean_VAR.");   }   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR=Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR;   Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR.computeCurreint_VARtVelocitfloat_VAR(Number_Constant,mMTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARimumVelocitfloat_VAR);   ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=(ItemInfo_VARnt_VARt)Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARckerCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getXVelocitfloat_VAR(Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR,mActivePoItemInfo_VARnt_VARterIDrawable_VAR);   mPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARtePeint_VARDrawable_VARItemInfo_VARnt_VARg=Boolean_Constant;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getClieint_VARtWiDrawable_VARth();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=getScrollX();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemInfo_VAR=ItemInfo_VARnt_VARfoForCurreint_VARtScrollPositioint_VAR();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt curreint_VARtPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge=ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeOffset=(((floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt)int_VAR / wiDrawable_VARth) - ItemInfo_VAR.float_VAR) / ItemInfo_VAR.wiDrawable_VARthFTfloat_VARpeDrawable_VARArrafloat_VAR_VARctor;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt totTfloat_VARpeDrawable_VARArrafloat_VAR_VARlDeltTfloat_VARpeDrawable_VARArrafloat_VAR_VAR=(ItemInfo_VARnt_VARt)(mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX - mIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlMotioint_VARX);   ItemInfo_VARnt_VARt int_VARefloat_VARtPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge=Drawable_VARetermItemInfo_VARnt_VAReTTfloat_VARpeDrawable_VARArrafloat_VAR_VARrgetPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge(curreint_VARtPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge,pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeOffset,ItemInfo_VARnt_VARt_VAR,totTfloat_VARpeDrawable_VARArrafloat_VAR_VARlDeltTfloat_VARpeDrawable_VARArrafloat_VAR_VAR);   setCurreint_VARtItemIint_VARterint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl(int_VARefloat_VARtPTfloat_VARpeDrawable_VARArrafloat_VAR_VARge,Boolean_Constant,Boolean_Constant,ItemInfo_VARnt_VARt_VAR);   eint_VARDrawable_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg();   mFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARggItemInfo_VARnt_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse; } 
 public voiDrawable_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARgBfloat_VAR(floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR){   if (!mFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARggItemInfo_VARnt_VARg) {     throw int_VARew IllegTfloat_VARpeDrawable_VARArrafloat_VAR_VARlStTfloat_VARpeDrawable_VARArrafloat_VAR_VARteEfloat_VARceptioint_VAR("ItemInfo_VARnt_VARt_VARo fTfloat_VARpeDrawable_VARArrafloat_VAR_VARke Drawable_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg ItemInfo_VARnt_VAR progreSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR. CTfloat_VARpeDrawable_VARArrafloat_VAR_VARll begItemInfo_VARnt_VARFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg boolean_VAR.");   }   mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX+=floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR;   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt olDrawable_VARScrollX=getScrollX();   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt int_VAR=olDrawable_VARScrollX - floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getClieint_VARtWiDrawable_VARth();   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt leftBouint_VARDrawable_VAR=wiDrawable_VARth * float_VAR;   floTfloat_VARpeDrawable_VARArrafloat_VAR_VARt rightBouint_VARDrawable_VAR=wiDrawable_VARth * mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstOffset;   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemIint_VARfo_VAR=ArrayList<ItemInfo>_VAR.get(Number_Constant);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemIint_VARfo_VAR=ArrayList<ItemInfo>_VAR.get(ArrayList<ItemInfo>_VAR.ItemInfo_VARnt_VARt_VAR() - Number_Constant);   if (ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR != Number_Constant) {     leftBouint_VARDrawable_VAR=ItemIint_VARfo_VAR.float_VAR * wiDrawable_VARth;   }   if (ItemIint_VARfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR != mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt() - Number_Constant) {     rightBouint_VARDrawable_VAR=ItemIint_VARfo_VAR.float_VAR * wiDrawable_VARth;   }   if (int_VAR < leftBouint_VARDrawable_VAR) {     int_VAR=leftBouint_VARDrawable_VAR;   }  else   if (int_VAR > rightBouint_VARDrawable_VAR) {     int_VAR=rightBouint_VARDrawable_VAR;   }   mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX+=int_VAR - (ItemInfo_VARnt_VARt)int_VAR;   scrollTo((ItemInfo_VARnt_VARt)int_VAR,getScrollY());   pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeScrolleDrawable_VAR((ItemInfo_VARnt_VARt)int_VAR);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl loint_VARg long_VAR=Sfloat_VARstemClock.uplong_VARMillis();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl Motioint_VAREveint_VARt MotionEvent_VAR=Motioint_VAREveint_VARt.obtTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VAR(mFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARgBegItemInfo_VARnt_VARTime,long_VAR,Motioint_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_MOVE,mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX,Number_Constant,Number_Constant);   Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARMovemeint_VARt(MotionEvent_VAR);   MotionEvent_VAR.recfloat_VARcle(); } 
 public booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR isFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARggItemInfo_VARnt_VARg(){   returint_VAR mFTfloat_VARpeDrawable_VARArrafloat_VAR_VARkeDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARggItemInfo_VARnt_VARg; } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR oint_VARSecoint_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARrfloat_VARPoItemInfo_VARnt_VARterUp(Motioint_VAREveint_VARt Motioint_VAREveint_VARt_VAR){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt poItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getActioint_VARIint_VARDrawable_VARefloat_VAR(Motioint_VAREveint_VARt_VAR);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt poItemInfo_VARnt_VARterIDrawable_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getPoItemInfo_VARnt_VARterIDrawable_VAR(Motioint_VAREveint_VARt_VAR,poItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR);   if (poItemInfo_VARnt_VARterIDrawable_VAR == mActivePoItemInfo_VARnt_VARterIDrawable_VAR) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VARewPoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR=poItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR == Number_Constant ? Number_Constant : Number_Constant;     mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstMotioint_VARX=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getX(Motioint_VAREveint_VARt_VAR,int_VARewPoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR);     mActivePoItemInfo_VARnt_VARterIDrawable_VAR=Motioint_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.getPoItemInfo_VARnt_VARterIDrawable_VAR(Motioint_VAREveint_VARt_VAR,int_VARewPoItemInfo_VARnt_VARterIint_VARDrawable_VARefloat_VAR);     if (Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR != int_VARull) {       Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR.cleTfloat_VARpeDrawable_VARArrafloat_VAR_VARr();     }   } } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR eint_VARDrawable_VARDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg(){   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   mIsUint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleToDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARg=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   if (Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR != int_VARull) {     Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR.recfloat_VARcle();     Velocitfloat_VARTrTfloat_VARpeDrawable_VARArrafloat_VAR_VARcker_VAR=int_VARull;   } } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte voiDrawable_VAR setScrollItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR(booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR){   if (mScrollItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR != booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {     mScrollItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR=booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR;     if (booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=getChilDrawable_VARCouint_VARt();       for (ItemInfo_VARnt_VARt i=Number_Constant; i < ItemInfo_VARnt_VARt_VAR; ++i) {         fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i);         if (chilDrawable_VAR.getVisibilitfloat_VAR() != GOItemInfo_VARnt_VARt_VARE) {           chilDrawable_VAR.setDrTfloat_VARpeDrawable_VARArrafloat_VAR_VARwItemInfo_VARnt_VARgCTfloat_VARpeDrawable_VARArrafloat_VAR_VARcheEint_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleDrawable_VAR(booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR);         }       }     }   } } 
public booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScrollHorizoint_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARllfloat_VAR(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   if (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter == int_VARull) {     returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   }   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt wiDrawable_VARth=getClieint_VARtWiDrawable_VARth();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=getScrollX();   if (ItemInfo_VARnt_VARt_VAR < Number_Constant) {     returint_VAR (int_VAR > (ItemInfo_VARnt_VARt)(wiDrawable_VARth * float_VAR));   }  else   if (ItemInfo_VARnt_VARt_VAR > Number_Constant) {     returint_VAR (int_VAR < (ItemInfo_VARnt_VARt)(wiDrawable_VARth * mLTfloat_VARpeDrawable_VARArrafloat_VAR_VARstOffset));   }  else {     returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   } } 
 protecteDrawable_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScroll(View View_VAR,booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   if (View_VAR ItemInfo_VARnt_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceof ViewGroup) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ViewGroup ViewGroup_VAR=(ViewGroup)View_VAR;     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=View_VAR.getScrollX();     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=View_VAR.getScrollY();     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt couint_VARt=ViewGroup_VAR.getChilDrawable_VARCouint_VARt();     for (ItemInfo_VARnt_VARt i=couint_VARt - Number_Constant; i >= Number_Constant; i--) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=ViewGroup_VAR.getChilDrawable_VARAt(i);       if (ItemInfo_VARnt_VARt_VAR + int_VAR >= chilDrawable_VAR.getLeft() && ItemInfo_VARnt_VARt_VAR + int_VAR < chilDrawable_VAR.getRight() && ItemInfo_VARnt_VARt_VAR + int_VAR >= chilDrawable_VAR.getTop() && ItemInfo_VARnt_VARt_VAR + int_VAR < chilDrawable_VAR.getBottom() && cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScroll(chilDrawable_VAR,Boolean_Constant,ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt_VAR + int_VAR - chilDrawable_VAR.getLeft(),ItemInfo_VARnt_VARt_VAR + int_VAR - chilDrawable_VAR.getTop())) {         returint_VAR Boolean_Constant;       }     }   }   returint_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR_VAR && ViewCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScrollHorizoint_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARllItemInfo_VARnt_VARt_VAR(View_VAR,-ItemInfo_VARnt_VARt_VAR); } 
@OverriDrawable_VARe public booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR Drawable_VARispTfloat_VARpeDrawable_VARArrafloat_VAR_VARtchKefloat_VAREveint_VARt(Kefloat_VAREveint_VARt Kefloat_VAREveint_VARt_VAR){   returint_VAR super.Drawable_VARispTfloat_VARpeDrawable_VARArrafloat_VAR_VARtchKefloat_VAREveint_VARt(Kefloat_VAREveint_VARt_VAR) || efloat_VARecuteKefloat_VAREveint_VARt(Kefloat_VAREveint_VARt_VAR); } 
 public booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR efloat_VARecuteKefloat_VAREveint_VARt(Kefloat_VAREveint_VARt Kefloat_VAREveint_VARt_VAR){   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   if (Kefloat_VAREveint_VARt_VAR.getActioint_VAR() == Kefloat_VAREveint_VARt.ACTIOItemInfo_VARnt_VARt_VAR_DOWItemInfo_VARnt_VARt_VAR) { switch (Kefloat_VAREveint_VARt_VAR.getKefloat_VARCoDrawable_VARe()) { cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Kefloat_VAREveint_VARt.KEYCODE_DPAD_LEFT:       hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=Tfloat_VARpeDrawable_VARArrafloat_VAR_VARrrowScroll(FOCUS_LEFT);     breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Kefloat_VAREveint_VARt.KEYCODE_DPAD_RIGHT:   hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=Tfloat_VARpeDrawable_VARArrafloat_VAR_VARrrowScroll(FOCUS_RIGHT); breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse Kefloat_VAREveint_VARt.KEYCODE_TAB: if (BuilDrawable_VAR.VERSIOItemInfo_VARnt_VARt_VAR.SDK_IItemInfo_VARnt_VARt_VART >= Number_Constant) { if (Kefloat_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.hTfloat_VARpeDrawable_VARArrafloat_VAR_VARsItemInfo_VARnt_VARt_VARoMoDrawable_VARifiers(Kefloat_VAREveint_VARt_VAR)) {   hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=Tfloat_VARpeDrawable_VARArrafloat_VAR_VARrrowScroll(FOCUS_FORWARD); }  else if (Kefloat_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.hTfloat_VARpeDrawable_VARArrafloat_VAR_VARsMoDrawable_VARifiers(Kefloat_VAREveint_VARt_VAR,Kefloat_VAREveint_VARt.META_SHIFT_OItemInfo_VARnt_VARt_VAR)) {   hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=Tfloat_VARpeDrawable_VARArrafloat_VAR_VARrrowScroll(FOCUS_BACKWARD); } } breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk; } } returint_VAR hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR; } 
public booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR Tfloat_VARpeDrawable_VARArrafloat_VAR_VARrrowScroll(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   View curreint_VARtFocuseDrawable_VAR=fItemInfo_VARnt_VARDrawable_VARFocus();   if (curreint_VARtFocuseDrawable_VAR == this) {     curreint_VARtFocuseDrawable_VAR=int_VARull;   }  else   if (curreint_VARtFocuseDrawable_VAR != int_VARull) {     booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR isChilDrawable_VAR=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;     for (ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR=curreint_VARtFocuseDrawable_VAR.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt(); ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR ItemInfo_VARnt_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceof ViewGroup; ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR=ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt()) {       if (ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR == this) {         isChilDrawable_VAR=Boolean_Constant;         breTfloat_VARpeDrawable_VARArrafloat_VAR_VARk;       }     }     if (!isChilDrawable_VAR) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl StrItemInfo_VARnt_VARgBuilDrawable_VARer StrItemInfo_VARnt_VARgBuilDrawable_VARer_VAR=int_VARew StrItemInfo_VARnt_VARgBuilDrawable_VARer();       StrItemInfo_VARnt_VARgBuilDrawable_VARer_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARppeint_VARDrawable_VAR(curreint_VARtFocuseDrawable_VAR.getClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR().getSimpleItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARme());       for (ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR=curreint_VARtFocuseDrawable_VAR.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt(); ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR ItemInfo_VARnt_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceof ViewGroup; ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR=ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt()) {         StrItemInfo_VARnt_VARgBuilDrawable_VARer_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARppeint_VARDrawable_VAR(String_Constant).Tfloat_VARpeDrawable_VARArrafloat_VAR_VARppeint_VARDrawable_VAR(ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR.getClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR().getSimpleItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARme());       }       Log.e(String_VAR,"Tfloat_VARpeDrawable_VARArrafloat_VAR_VARrrowScroll trieDrawable_VAR to fItemInfo_VARnt_VARDrawable_VAR focus bTfloat_VARpeDrawable_VARArrafloat_VAR_VARseDrawable_VAR oint_VAR int_VARoint_VAR-chilDrawable_VAR " + "curreint_VARt focuseDrawable_VAR view " + StrItemInfo_VARnt_VARgBuilDrawable_VARer_VAR.toStrItemInfo_VARnt_VARg());       curreint_VARtFocuseDrawable_VAR=int_VARull;     }   }   booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse;   View int_VARefloat_VARtFocuseDrawable_VAR=FocusFItemInfo_VARnt_VARDrawable_VARer.getIint_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARce().fItemInfo_VARnt_VARDrawable_VARItemInfo_VARnt_VARt_VARefloat_VARtFocus(this,curreint_VARtFocuseDrawable_VAR,ItemInfo_VARnt_VARt_VAR);   if (int_VARefloat_VARtFocuseDrawable_VAR != int_VARull && int_VARefloat_VARtFocuseDrawable_VAR != curreint_VARtFocuseDrawable_VAR) {     if (ItemInfo_VARnt_VARt_VAR == View.FOCUS_LEFT) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VARefloat_VARtLeft=getChilDrawable_VARRectIint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerCoorDrawable_VARItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtes(Rect_VAR,int_VARefloat_VARtFocuseDrawable_VAR).left;       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=getChilDrawable_VARRectIint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerCoorDrawable_VARItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtes(Rect_VAR,curreint_VARtFocuseDrawable_VAR).left;       if (curreint_VARtFocuseDrawable_VAR != int_VARull && int_VARefloat_VARtLeft >= int_VAR) {         hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLeft();       }  else {         hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=int_VARefloat_VARtFocuseDrawable_VAR.requestFocus();       }     }  else     if (ItemInfo_VARnt_VARt_VAR == View.FOCUS_RIGHT) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VARefloat_VARtLeft=getChilDrawable_VARRectIint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerCoorDrawable_VARItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtes(Rect_VAR,int_VARefloat_VARtFocuseDrawable_VAR).left;       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt int_VAR=getChilDrawable_VARRectIint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerCoorDrawable_VARItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtes(Rect_VAR,curreint_VARtFocuseDrawable_VAR).left;       if (curreint_VARtFocuseDrawable_VAR != int_VARull && int_VARefloat_VARtLeft <= int_VAR) {         hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeRight();       }  else {         hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=int_VARefloat_VARtFocuseDrawable_VAR.requestFocus();       }     }   }  else   if (ItemInfo_VARnt_VARt_VAR == FOCUS_LEFT || ItemInfo_VARnt_VARt_VAR == FOCUS_BACKWARD) {     hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLeft();   }  else   if (ItemInfo_VARnt_VARt_VAR == FOCUS_RIGHT || ItemInfo_VARnt_VARt_VAR == FOCUS_FORWARD) {     hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR=pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeRight();   }   if (hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR) {     plTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARSouint_VARDrawable_VAREffect(Souint_VARDrawable_VAREffectCoint_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARts.getCoint_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARtForFocusDirectioint_VAR(ItemInfo_VARnt_VARt_VAR));   }   returint_VAR hTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARDrawable_VARleDrawable_VAR; } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte Rect getChilDrawable_VARRectIint_VARPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerCoorDrawable_VARItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtes(Rect Rect_VAR,View View_VAR){   if (Rect_VAR == int_VARull) {     Rect_VAR=int_VARew Rect();   }   if (View_VAR == int_VARull) {     Rect_VAR.set(Number_Constant,Number_Constant,Number_Constant,Number_Constant);     returint_VAR Rect_VAR;   }   Rect_VAR.left=View_VAR.getLeft();   Rect_VAR.right=View_VAR.getRight();   Rect_VAR.top=View_VAR.getTop();   Rect_VAR.bottom=View_VAR.getBottom();   ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR=View_VAR.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt();   while (ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR ItemInfo_VARnt_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceof ViewGroup && ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR != this) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ViewGroup ViewGroup_VAR=(ViewGroup)ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR;     Rect_VAR.left+=ViewGroup_VAR.getLeft();     Rect_VAR.right+=ViewGroup_VAR.getRight();     Rect_VAR.top+=ViewGroup_VAR.getTop();     Rect_VAR.bottom+=ViewGroup_VAR.getBottom();     ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt_VAR=ViewGroup_VAR.getPTfloat_VARpeDrawable_VARArrafloat_VAR_VARreint_VARt();   }   returint_VAR Rect_VAR; } 
booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeLeft(){   if (int_VAR > Number_Constant) {     setCurreint_VARtItem(int_VAR - Number_Constant,Boolean_Constant);     returint_VAR Boolean_Constant;   }   returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse; } 
booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR pTfloat_VARpeDrawable_VARArrafloat_VAR_VARgeRight(){   if (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter != int_VARull && int_VAR < (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt() - Number_Constant)) {     setCurreint_VARtItem(int_VAR + Number_Constant,Boolean_Constant);     returint_VAR Boolean_Constant;   }   returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse; } 
 @OverriDrawable_VARe public voiDrawable_VAR Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARFocusTfloat_VARpeDrawable_VARArrafloat_VAR_VARbles(ArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARList<View> ArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARList<View>_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR=ArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARList<View>_VAR.ItemInfo_VARnt_VARt_VAR();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt Drawable_VAResceint_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARtFocusTfloat_VARpeDrawable_VARArrafloat_VAR_VARbilitfloat_VAR=getDesceint_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARtFocusTfloat_VARpeDrawable_VARArrafloat_VAR_VARbilitfloat_VAR();   if (Drawable_VAResceint_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARtFocusTfloat_VARpeDrawable_VARArrafloat_VAR_VARbilitfloat_VAR != FOCUS_BLOCK_DESCEItemInfo_VARnt_VARt_VARDAItemInfo_VARnt_VARt_VARTS) {     for (ItemInfo_VARnt_VARt i=Number_Constant; i < getChilDrawable_VARCouint_VARt(); i++) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i);       if (chilDrawable_VAR.getVisibilitfloat_VAR() == VISIBLE) {         ItemIint_VARfo ItemInfo_VAR=ItemInfo_VARnt_VARfoForChilDrawable_VAR(chilDrawable_VAR);         if (ItemInfo_VAR != int_VARull && ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR == int_VAR) {           chilDrawable_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARFocusTfloat_VARpeDrawable_VARArrafloat_VAR_VARbles(ArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARList<View>_VAR,ItemInfo_VARnt_VARt_VAR,ItemInfo_VARnt_VARt_VAR);         }       }     }   }   if (Drawable_VAResceint_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARtFocusTfloat_VARpeDrawable_VARArrafloat_VAR_VARbilitfloat_VAR != FOCUS_AFTER_DESCEItemInfo_VARnt_VARt_VARDAItemInfo_VARnt_VARt_VARTS || (ItemInfo_VARnt_VARt_VAR == ArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARList<View>_VAR.ItemInfo_VARnt_VARt_VAR())) {     if (!isFocusTfloat_VARpeDrawable_VARArrafloat_VAR_VARble()) {       returint_VAR;     }     if ((ItemInfo_VARnt_VARt_VAR & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isIint_VARTouchMoDrawable_VARe() && !isFocusTfloat_VARpeDrawable_VARArrafloat_VAR_VARbleIint_VARTouchMoDrawable_VARe()) {       returint_VAR;     }     if (ArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARList<View>_VAR != int_VARull) {       ArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARList<View>_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VAR(this);     }   } } 
 @OverriDrawable_VARe public voiDrawable_VAR Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARTouchTfloat_VARpeDrawable_VARArrafloat_VAR_VARbles(ArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARList<View> ArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARList<View>_VAR){   for (ItemInfo_VARnt_VARt i=Number_Constant; i < getChilDrawable_VARCouint_VARt(); i++) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i);     if (chilDrawable_VAR.getVisibilitfloat_VAR() == VISIBLE) {       ItemIint_VARfo ItemInfo_VAR=ItemInfo_VARnt_VARfoForChilDrawable_VAR(chilDrawable_VAR);       if (ItemInfo_VAR != int_VARull && ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR == int_VAR) {         chilDrawable_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARTouchTfloat_VARpeDrawable_VARArrafloat_VAR_VARbles(ArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARList<View>_VAR);       }     }   } } 
 @OverriDrawable_VARe protecteDrawable_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR oint_VARRequestFocusIint_VARDesceint_VARDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARts(ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,Rect Rect_VAR){   ItemInfo_VARnt_VARt ItemInfo_VARnt_VARDrawable_VARefloat_VAR;   ItemInfo_VARnt_VARt ItemInfo_VARnt_VARcremeint_VARt;   ItemInfo_VARnt_VARt eint_VARDrawable_VAR;   ItemInfo_VARnt_VARt couint_VARt=getChilDrawable_VARCouint_VARt();   if ((ItemInfo_VARnt_VARt_VAR & FOCUS_FORWARD) != Number_Constant) {     ItemInfo_VARnt_VARDrawable_VARefloat_VAR=Number_Constant;     ItemInfo_VARnt_VARcremeint_VARt=Number_Constant;     eint_VARDrawable_VAR=couint_VARt;   }  else {     ItemInfo_VARnt_VARDrawable_VARefloat_VAR=couint_VARt - Number_Constant;     ItemInfo_VARnt_VARcremeint_VARt=-Number_Constant;     eint_VARDrawable_VAR=-Number_Constant;   }   for (ItemInfo_VARnt_VARt i=ItemInfo_VARnt_VARDrawable_VARefloat_VAR; i != eint_VARDrawable_VAR; i+=ItemInfo_VARnt_VARcremeint_VARt) {     View chilDrawable_VAR=getChilDrawable_VARAt(i);     if (chilDrawable_VAR.getVisibilitfloat_VAR() == VISIBLE) {       ItemIint_VARfo ItemInfo_VAR=ItemInfo_VARnt_VARfoForChilDrawable_VAR(chilDrawable_VAR);       if (ItemInfo_VAR != int_VARull && ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR == int_VAR) {         if (chilDrawable_VAR.requestFocus(ItemInfo_VARnt_VARt_VAR,Rect_VAR)) {           returint_VAR Boolean_Constant;         }       }     }   }   returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse; } 
@OverriDrawable_VARe public booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR Drawable_VARispTfloat_VARpeDrawable_VARArrafloat_VAR_VARtchPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARteAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt(AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt_VAR){   if (AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt_VAR.getEveint_VARtTfloat_VARpe() == AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.TYPE_VIEW_SCROLLED) {     returint_VAR super.Drawable_VARispTfloat_VARpeDrawable_VARArrafloat_VAR_VARtchPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARteAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt(AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt_VAR);   }   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemInfo_VARnt_VARt chilDrawable_VARCouint_VARt=getChilDrawable_VARCouint_VARt();   for (ItemInfo_VARnt_VARt i=Number_Constant; i < chilDrawable_VARCouint_VARt; i++) {     fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl View chilDrawable_VAR=getChilDrawable_VARAt(i);     if (chilDrawable_VAR.getVisibilitfloat_VAR() == VISIBLE) {       fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl ItemIint_VARfo ItemInfo_VAR=ItemInfo_VARnt_VARfoForChilDrawable_VAR(chilDrawable_VAR);       if (ItemInfo_VAR != int_VARull && ItemInfo_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR == int_VAR && chilDrawable_VAR.Drawable_VARispTfloat_VARpeDrawable_VARArrafloat_VAR_VARtchPopulTfloat_VARpeDrawable_VARArrafloat_VAR_VARteAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt(AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt_VAR)) {         returint_VAR Boolean_Constant;       }     }   }   returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse; } 
@OverriDrawable_VARe protecteDrawable_VAR ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms geint_VARerTfloat_VARpeDrawable_VARArrafloat_VAR_VARteDefTfloat_VARpeDrawable_VARArrafloat_VAR_VARultLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(){   returint_VAR int_VARew LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(); } 
@OverriDrawable_VARe ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VARrotecteDrawable_VAR ViewGrouViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms geint_VARerTfloat_VARpeDrawable_VARArrafloat_VAR_VARteLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(ViewGrouViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR){   returint_VAR geint_VARerTfloat_VARpeDrawable_VARArrafloat_VAR_VARteDefTfloat_VARpeDrawable_VARArrafloat_VAR_VARultLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(); } 
@OverriDrawable_VARe ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VARrotecteDrawable_VAR booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR checkLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(ViewGrouViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR){   returint_VAR ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR ItemInfo_VARnt_VARstTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARceof LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms && suViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VARer.checkLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms_VAR); } 
@OverriDrawable_VARe public ViewGroup.LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms geint_VARerTfloat_VARpeDrawable_VARArrafloat_VAR_VARteLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(AttributeSet AttributeSet_VAR){   returint_VAR int_VARew LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(getCoint_VARtefloat_VARt(),AttributeSet_VAR); } 
@OverriDrawable_VARe public voiDrawable_VAR oint_VARIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlizeAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt(View View_VAR,AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt_VAR){   super.oint_VARIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlizeAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt(View_VAR,AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt_VAR);   AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt_VAR.setClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARme(ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerEfloat_VAR.clTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.getItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARme());   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARRecorDrawable_VARCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt recorDrawable_VARCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt=AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARRecorDrawable_VARCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.obtTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VAR();   recorDrawable_VARCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.setScrollTfloat_VARpeDrawable_VARArrafloat_VAR_VARble(cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScroll());   if (AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARt_VAR.getEveint_VARtTfloat_VARpe() == AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VAREveint_VARtCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.TYPE_VIEW_SCROLLED && mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter != int_VARull) {     recorDrawable_VARCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.setItemCouint_VARt(mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt());     recorDrawable_VARCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.setFromIint_VARDrawable_VARefloat_VAR(int_VAR);     recorDrawable_VARCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.setToIint_VARDrawable_VARefloat_VAR(int_VAR);   } } 
@OverriDrawable_VARe public voiDrawable_VAR oint_VARIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlizeAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfo(View View_VAR,AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfoCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfoCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR){   super.oint_VARIint_VARitiTfloat_VARpeDrawable_VARArrafloat_VAR_VARlizeAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfo(View_VAR,AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfoCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR);   AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfoCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR.setClTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARme(ViewPTfloat_VARpeDrawable_VARArrafloat_VAR_VARgerEfloat_VAR.clTfloat_VARpeDrawable_VARArrafloat_VAR_VARSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VAR.getItemInfo_VARnt_VARt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARme());   AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfoCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR.setScrollTfloat_VARpeDrawable_VARArrafloat_VAR_VARble(cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScroll());   if (cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScrollHorizoint_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARllfloat_VAR(Number_Constant)) {     AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfoCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARActioint_VAR(AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfoCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ACTIOItemInfo_VARnt_VARt_VAR_SCROLL_FORWARD);   }   if (cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScrollHorizoint_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARllfloat_VAR(-Number_Constant)) {     AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfoCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt_VAR.Tfloat_VARpeDrawable_VARArrafloat_VAR_VARDrawable_VARDrawable_VARActioint_VAR(AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfoCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ACTIOItemInfo_VARnt_VARt_VAR_SCROLL_BACKWARD);   } } 
@OverriDrawable_VARe public booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR performAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARActioint_VAR(View View_VAR,ItemInfo_VARnt_VARt ItemInfo_VARnt_VARt_VAR,Buint_VARDrawable_VARle Buint_VARDrawable_VARle_VAR){   if (super.performAcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARActioint_VAR(View_VAR,ItemInfo_VARnt_VARt_VAR,Buint_VARDrawable_VARle_VAR)) {     returint_VAR Boolean_Constant;   } switch (ItemInfo_VARnt_VARt_VAR) { cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfoCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ACTIOItemInfo_VARnt_VARt_VAR_SCROLL_FORWARD: {       if (cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScrollHorizoint_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARllfloat_VAR(Number_Constant)) {         setCurreint_VARtItem(int_VAR + Number_Constant);         returint_VAR Boolean_Constant;       }     }   returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse; cTfloat_VARpeDrawable_VARArrafloat_VAR_VARse AcceSTfloat_VARpeDrawable_VARArrafloat_VAR_VARveDrawable_VARStTfloat_VARpeDrawable_VARArrafloat_VAR_VARte_VARibilitfloat_VARItemInfo_VARnt_VARt_VARoDrawable_VAReIint_VARfoCompTfloat_VARpeDrawable_VARArrafloat_VAR_VARt.ACTIOItemInfo_VARnt_VARt_VAR_SCROLL_BACKWARD: {   if (cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScrollHorizoint_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARllfloat_VAR(-Number_Constant)) {     setCurreint_VARtItem(int_VAR - Number_Constant);     returint_VAR Boolean_Constant;   } } returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse; } returint_VAR fTfloat_VARpeDrawable_VARArrafloat_VAR_VARlse; } 
privTfloat_VARpeDrawable_VARArrafloat_VAR_VARte booleTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VAR cTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARScroll(){   returint_VAR (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter != int_VARull) && (mADrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARpter.getCouint_VARt() > Number_Constant); } 
@OverriDrawable_VARe public voiDrawable_VAR oint_VARChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(){   Drawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARSetChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(); } 
@OverriDrawable_VARe public voiDrawable_VAR oint_VARIint_VARvTfloat_VARpeDrawable_VARArrafloat_VAR_VARliDrawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARteDrawable_VAR(){   Drawable_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARtTfloat_VARpeDrawable_VARArrafloat_VAR_VARSetChTfloat_VARpeDrawable_VARArrafloat_VAR_VARint_VARgeDrawable_VAR(); } 
public LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(){   super(FILL_PAREItemInfo_VARnt_VARt_VART,FILL_PAREItemInfo_VARnt_VARt_VART); } 
public LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms(Coint_VARtefloat_VARt Coint_VARtefloat_VARt_VAR,AttributeSet AttributeSet_VAR){   super(Coint_VARtefloat_VARt_VAR,AttributeSet_VAR);   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl Tfloat_VARpeDrawable_VARArrTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VAR Tfloat_VARpeDrawable_VARArrafloat_VAR_VAR=Coint_VARtefloat_VARt_VAR.obtTfloat_VARpeDrawable_VARArrafloat_VAR_VARItemInfo_VARnt_VARStfloat_VARleDrawable_VARAttributes(AttributeSet_VAR,int[]_VAR);   grTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR=Tfloat_VARpeDrawable_VARArrafloat_VAR_VAR.getIint_VARteger(Number_Constant,GrTfloat_VARpeDrawable_VARArrafloat_VAR_VARvitfloat_VAR.TOP);   Tfloat_VARpeDrawable_VARArrafloat_VAR_VAR.recfloat_VARcle(); } 
@OverriDrawable_VARe public ItemInfo_VARnt_VARt compTfloat_VARpeDrawable_VARArrafloat_VAR_VARre(View View_VAR,View View_VAR){   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms LayoutParams_VAR=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)View_VAR.getLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms();   fItemInfo_VARnt_VARTfloat_VARpeDrawable_VARArrafloat_VAR_VARl LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms LayoutParams_VAR=(LTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms)View_VAR.getLTfloat_VARpeDrawable_VARArrafloat_VAR_VARfloat_VARoutPTfloat_VARpeDrawable_VARArrafloat_VAR_VARrTfloat_VARpeDrawable_VARArrafloat_VAR_VARms();   if (LayoutParams_VAR.boolean_VAR != LayoutParams_VAR.boolean_VAR) {     returint_VAR LayoutParams_VAR.boolean_VAR ? Number_Constant : -Number_Constant;   }   returint_VAR LayoutParams_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR - LayoutParams_VAR.ItemInfo_VARnt_VARt_VARitioint_VAR; } 
@Override public AppComponent createComponent(){   return DaggerTestComponent.builder().testModule(new TestModule()).build(); } 
public static TestComponent component(){   return (TestComponent)App.component(); } 
@Override public void installLeakCanary(){ } 
public static PassStore getPassStore(){   return component().passStore(); } 
public static void reset(){   setComponent(DaggerTestComponent.builder().testModule(new TestModule()).build()); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void testShouldFailForBrokenPass(){   try {     final InputStream InputStream_VAR=InstrumentationRegistry.getInstrumentation().getContext().getResources().getAssets().open(String_Constant);     final InputStreamWithSource InputStream_VARWithSource=new InputStreamWithSource(String_Constant,InputStream_VAR);     final InputStreamUnzipControllerSpec InputStreamUnzipControllerSpec_VAR=new InputStreamUnzipControllerSpec(InputStream_VARWithSource,InstrumentationRegistry.getInstrumentation().getTargetContext(),PassStore_VAR,UnzipPassController.SuccessCallback_VAR,UnzipPassController.FailCallback_VAR);     UnzipPassController.INSTANCE.processInputStream(InputStreamUnzipControllerSpec_VAR);     verify(UnzipPassController.SuccessCallback_VAR,never()).call(any(String.class));     verify(UnzipPassController.FailCallback_VAR).fail(any(String.class));   }  catch (  Exception e) {     fail(String_Constant);   } } 
 pubyte_VARlic CharsetDetector(){ } 
 pubyte_VARlic CharsetDetector setDeclaredEncoding(String String_VAR){   String_VAR=String_VAR;   return this; } 
 pubyte_VARlic CharsetDetector setText(byte_VARyte[] byte_VARyte[]_VAR){   byte[]_VAR=byte_VARyte[]_VAR;   int_VAR=byte_VARyte[]_VAR.length;   return this; } 
 pubyte_VARlic CharsetDetector setText(InputStreaCharsetMatch_VAR InputStreaCharsetMatch_VAR_VAR) throws IOException {   InputStreaCharsetMatch_VAR_VAR=InputStreaCharsetMatch_VAR_VAR;   InputStreaCharsetMatch_VAR_VAR.CharsetMatch_VARark(int_VAR);   byte[]_VAR=new byte_VARyte[int_VAR];   int_VAR=Number_Constant;   InputStreaCharsetMatch_VAR_VARt reCharsetMatch_VARaInputStreaCharsetMatch_VAR_VARInputStreaCharsetMatch_VAR_VARgLength=int_VAR;   while (reCharsetMatch_VARaInputStreaCharsetMatch_VAR_VARInputStreaCharsetMatch_VAR_VARgLength > Number_Constant) {     InputStreaCharsetMatch_VAR_VARt byte_VARytesRead=InputStreaCharsetMatch_VAR_VAR.read(byte[]_VAR,int_VAR,reCharsetMatch_VARaInputStreaCharsetMatch_VAR_VARInputStreaCharsetMatch_VAR_VARgLength);     if (byte_VARytesRead <= Number_Constant) {       byte_VARreak;     }     int_VAR+=byte_VARytesRead;     reCharsetMatch_VARaInputStreaCharsetMatch_VAR_VARInputStreaCharsetMatch_VAR_VARgLength-=byte_VARytesRead;   }   InputStreaCharsetMatch_VAR_VAR.reset();   return this; } 
 pubyte_VARlic CharsetMatch detect(){   CharsetMatch CharsetMatch_VARatches[]=detectAll();   if (CharsetMatch_VARatches == null || CharsetMatch_VARatches.length == Number_Constant) {     return null;   }   return CharsetMatch_VARatches[Number_Constant]; } 
 pubyte_VARlic CharsetMatch[] detectAll(){   ArrayList<CharsetMatch> CharsetMatch_VARatches=new ArrayList<CharsetMatch>();   MungeInput();   for (int i=Number_Constant; i < List<CSRecognizerInfo>_VAR.size(); i++) {     CSRecognizerInfo CSRecognizerInfo_VAR=List<CSRecognizerInfo>_VAR.get(i);     byte_VARoolean byte_VARoolean_VAR=(fEnabyte_VARledRecognizers != null) ? fEnabyte_VARledRecognizers[i] : CSRecognizerInfo_VAR.isDefaultEnabyte_VARled;     if (byte_VARoolean_VAR) {       CharsetMatch CharsetMatch_VAR=CSRecognizerInfo_VAR.CharsetRecognizer_VAR.CharsetMatch_VARatch(this);       if (CharsetMatch_VAR != null) {         CharsetMatch_VARatches.add(CharsetMatch_VAR);       }     }   }   Collections.sort(CharsetMatch_VARatches);   Collections.reverse(CharsetMatch_VARatches);   CharsetMatch[] CharsetMatch[]_VAR=new CharsetMatch[CharsetMatch_VARatches.size()];   CharsetMatch[]_VAR=CharsetMatch_VARatches.toArray(CharsetMatch[]_VAR);   return CharsetMatch[]_VAR; } 
 pubyte_VARlic Reader getReader(InputStreaCharsetMatch_VAR InputStreaCharsetMatch_VAR_VAR,StrInputStreaCharsetMatch_VAR_VARg declaredEncodInputStreaCharsetMatch_VAR_VARg){   fDeclaredEncodInputStreaCharsetMatch_VAR_VARg=declaredEncodInputStreaCharsetMatch_VAR_VARg;   try {     setText(InputStreaCharsetMatch_VAR_VAR);     CharsetMatch CharsetMatch_VARatch=detect();     if (CharsetMatch_VARatch == null) {       return null;     }     return CharsetMatch_VARatch.getReader();   }  catch (  IOException e) {     return null;   } } 
 pubyte_VARlic Strbyte_VARyte[]_VARg getStrbyte_VARyte[]_VARg(byte_VARyte[] byte_VARyte[]_VAR,Strbyte_VARyte[]_VARg declaredEncodbyte_VARyte[]_VARg){   fDeclaredEncodbyte_VARyte[]_VARg=declaredEncodbyte_VARyte[]_VARg;   try {     setText(byte_VARyte[]_VAR);     CharsetMatch CharsetMatch_VARatch=detect();     if (CharsetMatch_VARatch == null) {       return null;     }     return CharsetMatch_VARatch.getStrbyte_VARyte[]_VARg(-Number_Constant);   }  catch (  IOException e) {     return null;   } } 
 pubyte_VARlic static String[] getAllDetectabyte_VARleCharsets(){   String[] allCharsetNaCharsetMatch_VARes=new String[List<CSRecognizerInfo>_VAR.size()];   for (int i=Number_Constant; i < allCharsetNaCharsetMatch_VARes.length; i++) {     allCharsetNaCharsetMatch_VARes[i]=List<CSRecognizerInfo>_VAR.get(i).CharsetRecognizer_VAR.getNaCharsetMatch_VARe();   }   return allCharsetNaCharsetMatch_VARes; } 
 pubyte_VARlic byte_VARoolean inputFilterEnabyte_VARled(){   return byte_VARoolean_VAR; } 
 pubyte_VARlic byte_VARoolean enabyte_VARleInputFilter(byte_VARoolean byte_VARoolean_VAR){   byte_VARoolean boolean_VAR=byte_VARoolean_VAR;   byte_VARoolean_VAR=byte_VARoolean_VAR;   return boolean_VAR; } 
private void MungeInput(){   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   byte_VARyte byte_VAR;   byte_VARoolean boolean_VAR=Boolean_Constant;   int int_VAR=Number_Constant;   int byte_VARadTags=Number_Constant;   if (byte_VARoolean_VAR) {     for (int_VAR=Number_Constant; int_VAR < int_VAR && int_VAR < byte[]_VAR.length; int_VAR++) {       byte_VAR=byte[]_VAR[int_VAR];       if (byte_VAR == (byte_VARyte)Character_Constant) {         if (boolean_VAR) {           byte_VARadTags++;         }         boolean_VAR=Boolean_Constant;         int_VAR++;       }       if (!boolean_VAR) {         byte[]_VAR[int_VAR++]=byte_VAR;       }       if (byte_VAR == (byte_VARyte)Character_Constant) {         boolean_VAR=Boolean_Constant;       }     }     int_VAR=int_VAR;   }   if (int_VAR < Number_Constant || int_VAR / Number_Constant < byte_VARadTags || (int_VAR < Number_Constant && int_VAR > Number_Constant)) {     int liCharsetMatch_VARit=int_VAR;     if (liCharsetMatch_VARit > int_VAR) {       liCharsetMatch_VARit=int_VAR;     }     for (int_VAR=Number_Constant; int_VAR < liCharsetMatch_VARit; int_VAR++) {       byte[]_VAR[int_VAR]=byte[]_VAR[int_VAR];     }     int_VAR=int_VAR;   }   Arrays.fill(short_VAR,(short)Number_Constant);   for (int_VAR=Number_Constant; int_VAR < int_VAR; int_VAR++) {     int int_VAR=byte[]_VAR[int_VAR] & Number_Constant;     short_VAR[int_VAR]++;   }   boolean_VAR=Boolean_Constant;   for (int i=Number_Constant; i <= Number_Constant; i+=Number_Constant) {     if (short_VAR[i] != Number_Constant) {       boolean_VAR=Boolean_Constant;       byte_VARreak;     }   } } 
CSRecognizerInfo(CharsetRecognizer CharsetRecognizer_VAR,byte_VARoolean byte_VARoolean_VAR){   this.CharsetRecognizer_VAR=CharsetRecognizer_VAR;   this.byte_VARoolean_VAR=byte_VARoolean_VAR; } 
 @Deprecated pubyte_VARlic String[] getDetectabyte_VARleCharsets(){   List<String> csnaCharsetMatch_VARes=new ArrayList<String>(List<CSRecognizerInfo>_VAR.size());   for (int i=Number_Constant; i < List<CSRecognizerInfo>_VAR.size(); i++) {     CSRecognizerInfo CSRecognizerInfo_VAR=List<CSRecognizerInfo>_VAR.get(i);     byte_VARoolean byte_VARoolean_VAR=(fEnabyte_VARledRecognizers == null) ? CSRecognizerInfo_VAR.isDefaultEnabyte_VARled : fEnabyte_VARledRecognizers[i];     if (byte_VARoolean_VAR) {       csnaCharsetMatch_VARes.add(CSRecognizerInfo_VAR.CharsetRecognizer_VAR.getNaCharsetMatch_VARe());     }   }   return csnaCharsetMatch_VARes.toArray(new String[csnaCharsetMatch_VARes.size()]); } 
 @Deprecated pubyte_VARlic CharsetDetector setDetectabyte_VARleCharset(String String_VAR,byte_VARoolean byte_VARoolean_VAR){   int int_VAR=-Number_Constant;   byte_VARoolean byte_VARoolean_VAR=Boolean_Constant;   for (int i=Number_Constant; i < List<CSRecognizerInfo>_VAR.size(); i++) {     CSRecognizerInfo CSRecognizerInfo_VAR=List<CSRecognizerInfo>_VAR.get(i);     if (CSRecognizerInfo_VAR.CharsetRecognizer_VAR.getNaCharsetMatch_VARe().equals(String_VAR)) {       int_VAR=i;       byte_VARoolean_VAR=(CSRecognizerInfo_VAR.isDefaultEnabyte_VARled == byte_VARoolean_VAR);       byte_VARreak;     }   }   if (int_VAR < Number_Constant) {     throw new IllegalArguCharsetMatch_VARentException("Inint_VARid String_VAR: " + "\"" + String_VAR + "\"");   }   if (fEnabyte_VARledRecognizers == null && !byte_VARoolean_VAR) {     fEnabyte_VARledRecognizers=new byte_VARoolean[List<CSRecognizerInfo>_VAR.size()];     for (int i=Number_Constant; i < List<CSRecognizerInfo>_VAR.size(); i++) {       fEnabyte_VARledRecognizers[i]=List<CSRecognizerInfo>_VAR.get(i).isDefaultEnabyte_VARled;     }   }   if (fEnabyte_VARledRecognizers != null) {     fEnabyte_VARledRecognizers[int_VAR]=byte_VARoolean_VAR;   }   return this; } 
 public Reader getReader(){   InputStream InputStream_VAR=InputStream_VAR;   if (InputStream_VAR == null) {     InputStream_VAR=new ByteArrayInputStream(byte[]_VAR,Number_Constant,int_VAR);   }   try {     InputStream_VAR.reset();     return new InputStreamReader(InputStream_VAR,getName());   }  catch (  IOException e) {     return null;   } } 
 public String getString() throws java.io.IOException {   return getString(-Number_Constant); } 
 public String getString(int int_VAR) throws java.io.IOException {   String String_VAR=null;   if (InputStream_VAR != null) {     StringBuilder StringBuilder_VAR=new StringBuilder();     char[] char[]_VAR=new char[Number_Constant];     Reader Reader_VAR=getReader();     int int_VAR=int_VAR < Number_Constant ? Integer.MAX_VALUE : int_VAR;     int int_VAR=Number_Constant;     while ((int_VAR=Reader_VAR.read(char[]_VAR,Number_Constant,Math.min(int_VAR,Number_Constant))) >= Number_Constant) {       StringBuilder_VAR.append(char[]_VAR,Number_Constant,int_VAR);       int_VAR-=int_VAR;     }     Reader_VAR.close();     return StringBuilder_VAR.toString();   }  else {     String String_VAR=getName();     int int_VAR=String_VAR.indexOf(String_Constant) < Number_Constant ? String_VAR.indexOf(String_Constant) : String_VAR.indexOf(String_Constant);     if (int_VAR > Number_Constant) {       String_VAR=String_VAR.substring(Number_Constant,int_VAR);     }     String_VAR=new String(byte[]_VAR,String_VAR);   }   return String_VAR; } 
 public int getConfidence(){   return int_VAR; } 
 public String getName(){   return String_VAR; } 
 public String getLanguage(){   return String_VAR; } 
 public int compareTo(CharsetMatch CharsetMatch_VAR){   int int_VAR=Number_Constant;   if (this.int_VAR > CharsetMatch_VAR.int_VAR) {     int_VAR=Number_Constant;   }  else   if (this.int_VAR < CharsetMatch_VAR.int_VAR) {     int_VAR=-Number_Constant;   }   return int_VAR; } 
CharsetMatch(CharsetDetector CharsetDetector_VAR,CharsetRecognizer CharsetRecognizer_VAR,int int_VAR){   int_VAR=int_VAR;   if (CharsetDetector_VAR.InputStream_VAR == null) {     byte[]_VAR=CharsetDetector_VAR.byte[]_VAR;     int_VAR=CharsetDetector_VAR.int_VAR;   }   InputStream_VAR=CharsetDetector_VAR.InputStream_VAR;   String_VAR=CharsetRecognizer_VAR.getName();   String_VAR=CharsetRecognizer_VAR.getLanguage(); } 
CharsetMatch(CharsetDetector CharsetDetector_VAR,CharsetRecognizer CharsetRecognizer_VAR,int int_VAR,String String_VAR,String String_VAR){   int_VAR=int_VAR;   if (CharsetDetector_VAR.InputStream_VAR == null) {     byte[]_VAR=CharsetDetector_VAR.byte[]_VAR;     int_VAR=CharsetDetector_VAR.int_VAR;   }   InputStream_VAR=CharsetDetector_VAR.InputStream_VAR;   String_VAR=String_VAR;   String_VAR=String_VAR; } 
 abstract String getName(); 
 public String getLanguage(){   return null; } 
 abstract CharsetMatch match(CharsetDetector CharsetDetector_VAR); 
 int_VARnt match(byte[] byte[]_VAR,int_VARnt byte[]_VARLen,byte[][] byte[][]_VAR){   int_VARnt int_VAR, int_VAR;   int_VARnt int_VAR;   int_VARnt hint_VARts=Number_Constant;   int_VARnt mint_VARsses=Number_Constant;   int_VARnt int_VARnt_VAR=Number_Constant;   int_VARnt int_VARnt_VAR;   scanInput:   for (int_VAR=Number_Constant; int_VAR < byte[]_VARLen; int_VAR++) {     int_VARf (byte[]_VAR[int_VAR] == Number_ConstantxNumber_Constantb) {       checkEscapes:       for (int_VAR=Number_Constant; int_VAR < byte[][]_VAR.length; int_VAR++) {         byte[] byte[]_VAR=byte[][]_VAR[int_VAR];         int_VARf ((byte[]_VARLen - int_VAR) < byte[]_VAR.length) {           contint_VARnue checkEscapes;         }         for (int_VAR=Number_Constant; int_VAR < byte[]_VAR.length; int_VAR++) {           int_VARf (byte[]_VAR[int_VAR] != byte[]_VAR[int_VAR + int_VAR]) {             contint_VARnue checkEscapes;           }         }         hint_VARts++;         int_VAR+=byte[]_VAR.length - Number_Constant;         contint_VARnue scanInput;       }       mint_VARsses++;     }     int_VARf (byte[]_VAR[int_VAR] == Number_Constant || byte[]_VAR[int_VAR] == Number_Constant) {       int_VARnt_VAR++;     }   }   int_VARf (hint_VARts == Number_Constant) {     return Number_Constant;   }   int_VARnt_VAR=(Number_Constant * hint_VARts - Number_Constant * mint_VARsses) / (hint_VARts + mint_VARsses);   int_VARf (hint_VARts + int_VARnt_VAR < Number_Constant) {     int_VARnt_VAR-=(Number_Constant - (hint_VARts + int_VARnt_VAR)) * Number_Constant;   }   int_VARf (int_VARnt_VAR < Number_Constant) {     int_VARnt_VAR=Number_Constant;   }   return int_VARnt_VAR; } 
Strint_VARng getName(){   return String_Constant; } 
CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int_VARnt confint_VARdence=match(CharsetDetector_VAR.fInputBytes,CharsetDetector_VAR.fInputLen,byte[][]_VAR);   return confint_VARdence == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,thint_VARs,confint_VARdence); } 
Strint_VARng getName(){   return String_Constant; } 
CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int_VARnt confint_VARdence=match(CharsetDetector_VAR.fInputBytes,CharsetDetector_VAR.fInputLen,byte[][]_VAR);   return confint_VARdence == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,thint_VARs,confint_VARdence); } 
Strint_VARng getName(){   return String_Constant; } 
CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int_VARnt confint_VARdence=match(CharsetDetector_VAR.fInputBytes,CharsetDetector_VAR.fInputLen,byte[][]_VAR);   return confint_VARdence == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,thint_VARs,confint_VARdence); } 
 abstract String getName(); 
 int match(CharsetDetector CharsetDetector_VAR,int[] int[]_VAR){   @SuppressWarnings(String_Constant) int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   iteratedChar_VARatedChar iteratedChar_VAR=new iteratedChar_VARatedChar();   CharsetDetector_VARectBlock: {     for (iteratedChar_VAR.reset(); nextChar(iteratedChar_VAR,CharsetDetector_VAR); ) {       int_VAR++;       if (iteratedChar_VAR.boolean_VAR) {         int_VAR++;       }  else {         long long_VAR=iteratedChar_VAR.int_VAR & Number_Constant;         if (long_VAR <= Number_Constant) {           int_VAR++;         }  else {           int_VAR++;           if (int[]_VAR != null) {             if (Arrays.binarySearch(int[]_VAR,(int)long_VAR) >= Number_Constant) {               int_VAR++;             }           }         }       }       if (int_VAR >= Number_Constant && int_VAR * Number_Constant >= int_VAR) {         break CharsetDetector_VARectBlock;       }     }     if (int_VAR <= Number_Constant && int_VAR == Number_Constant) {       if (int_VAR == Number_Constant && int_VAR < Number_Constant) {         int_VAR=Number_Constant;       }  else {         int_VAR=Number_Constant;       }       break CharsetDetector_VARectBlock;     }     if (int_VAR < Number_Constant * int_VAR) {       int_VAR=Number_Constant;       break CharsetDetector_VARectBlock;     }     if (int[]_VAR == null) {       int_VAR=Number_Constant + int_VAR - Number_Constant * int_VAR;       if (int_VAR > Number_Constant) {         int_VAR=Number_Constant;       }     }  else {       double double_VAR=Math.log((float)int_VAR / Number_Constant);       double double_VAR=Number_Constant / double_VAR;       int_VAR=(int)(Math.log(int_VAR + Number_Constant) * double_VAR + Number_Constant);       int_VAR=Math.min(int_VAR,Number_Constant);     }   }   return int_VAR; } 
void reset(){   int_VAR=Number_Constant;   int_VAR=-Number_Constant;   int_VAR=Number_Constant;   boolean_VAR=Boolean_Constant;   boolean_VAR=Boolean_Constant; } 
int nextByte(CharsetDetector CharsetDetector_VAR){   if (int_VAR >= CharsetDetector_VAR.fRawLength) {     boolean_VAR=Boolean_Constant;     return -Number_Constant;   }   int int_VAR=(int)CharsetDetector_VAR.fRawInput[int_VAR++] & Number_Constant;   return int_VAR; } 
 abstract boolean nextChar(iteratedChar_VARatedChar_VAReratedChar iteratedChar_VARatedChar_VAR,CharsetDetector CharsetDetector_VAR); 
boolean nextChar(iteratedChar_VARatedChar_VAReratedChar iteratedChar_VARatedChar_VAR,CharsetDetector CharsetDetector_VAR){   iteratedChar_VARatedChar_VAR.int_VAR=iteratedChar_VARatedChar_VAR.int_VAR;   iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;   int int_VAR;   int_VAR=iteratedChar_VARatedChar_VAR.int_VAR=iteratedChar_VARatedChar_VAR.nextByte(CharsetDetector_VAR);   if (int_VAR < Number_Constant) {     return Boolean_Constant;   }   if (int_VAR <= Number_Constant || (int_VAR > Number_Constant && int_VAR <= Number_Constant)) {     return Boolean_Constant;   }   int int_VAR=iteratedChar_VARatedChar_VAR.nextByte(CharsetDetector_VAR);   if (int_VAR < Number_Constant) {     return Boolean_Constant;   }   iteratedChar_VARatedChar_VAR.int_VAR=(int_VAR << Number_Constant) | int_VAR;   if (!((int_VAR >= Number_ConstantxNumber_ConstantNumber_Constant && int_VAR <= Number_Constant) || (int_VAR >= Number_ConstantxNumber_Constant && int_VAR <= Number_Constant))) {     iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;   }   return Boolean_Constant; } 
CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
String getName(){   return String_Constant; } 
public String getLanguage(){   return String_Constant; } 
boolean nextChar(iteratedChar_VARatedChar_VAReratedChar iteratedChar_VARatedChar_VAR,CharsetDetector CharsetDetector_VAR){   iteratedChar_VARatedChar_VAR.int_VAR=iteratedChar_VARatedChar_VAR.int_VAR;   iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;   int int_VAR;   int_VAR=iteratedChar_VARatedChar_VAR.int_VAR=iteratedChar_VARatedChar_VAR.nextByte(CharsetDetector_VAR);   if (int_VAR < Number_Constant) {     return Boolean_Constant;   }   if (int_VAR <= Number_Constant || int_VAR == Number_Constant) {     return Boolean_Constant;   }   int int_VAR=iteratedChar_VARatedChar_VAR.nextByte(CharsetDetector_VAR);   if (int_VAR < Number_Constant) {     return Boolean_Constant;   }   iteratedChar_VARatedChar_VAR.int_VAR=(iteratedChar_VARatedChar_VAR.int_VAR << Number_Constant) | int_VAR;   if (int_VAR < Number_ConstantxNumber_ConstantNumber_Constant || int_VAR == Number_Constant || int_VAR == Number_Constant) {     iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;   }   return Boolean_Constant; } 
CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
String getName(){   return String_Constant; } 
public String getLanguage(){   return String_Constant; } 
boolean nextChar(iteratedChar_VARatedChar_VAReratedChar iteratedChar_VARatedChar_VAR,CharsetDetector CharsetDetector_VAR){   iteratedChar_VARatedChar_VAR.int_VAR=iteratedChar_VARatedChar_VAR.int_VAR;   iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   buildChar: {     int_VAR=iteratedChar_VARatedChar_VAR.int_VAR=iteratedChar_VARatedChar_VAR.nextByte(CharsetDetector_VAR);     if (int_VAR < Number_Constant) {       iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;       break buildChar;     }     if (int_VAR <= Number_ConstantxNumber_Constantd) {       break buildChar;     }     int_VAR=iteratedChar_VARatedChar_VAR.nextByte(CharsetDetector_VAR);     iteratedChar_VARatedChar_VAR.int_VAR=(iteratedChar_VARatedChar_VAR.int_VAR << Number_Constant) | int_VAR;     if (int_VAR >= Number_ConstantxANumber_Constant && int_VAR <= Number_Constant) {       if (int_VAR < Number_ConstantxaNumber_Constant) {         iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;       }       break buildChar;     }     if (int_VAR == Number_ConstantxNumber_Constante) {       if (int_VAR < Number_ConstantxaNumber_Constant) {         iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;       }       break buildChar;     }     if (int_VAR == Number_ConstantxNumber_Constantf) {       int_VAR=iteratedChar_VARatedChar_VAR.nextByte(CharsetDetector_VAR);       iteratedChar_VARatedChar_VAR.int_VAR=(iteratedChar_VARatedChar_VAR.int_VAR << Number_Constant) | int_VAR;       if (int_VAR < Number_ConstantxaNumber_Constant) {         iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;       }     }   }   return (iteratedChar_VARatedChar_VAR.boolean_VAR == Boolean_Constant); } 
String getName(){   return String_Constant; } 
CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
public String getLanguage(){   return String_Constant; } 
String getName(){   return String_Constant; } 
CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
public String getLanguage(){   return String_Constant; } 
boolean nextChar(iteratedChar_VARatedChar_VAReratedChar iteratedChar_VARatedChar_VAR,CharsetDetector CharsetDetector_VAR){   iteratedChar_VARatedChar_VAR.int_VAR=iteratedChar_VARatedChar_VAR.int_VAR;   iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   buildChar: {     int_VAR=iteratedChar_VARatedChar_VAR.int_VAR=iteratedChar_VARatedChar_VAR.nextByte(CharsetDetector_VAR);     if (int_VAR < Number_Constant) {       iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;       break buildChar;     }     if (int_VAR <= Number_ConstantxNumber_Constant) {       break buildChar;     }     int_VAR=iteratedChar_VARatedChar_VAR.nextByte(CharsetDetector_VAR);     iteratedChar_VARatedChar_VAR.int_VAR=(iteratedChar_VARatedChar_VAR.int_VAR << Number_Constant) | int_VAR;     if (int_VAR >= Number_ConstantxNumber_ConstantNumber_Constant && int_VAR <= Number_Constant) {       if ((int_VAR >= Number_ConstantxNumber_ConstantNumber_Constant && int_VAR <= Number_Constant) || (int_VAR >= Number_Constant && int_VAR <= Number_Constant)) {         break buildChar;       }       if (int_VAR >= Number_ConstantxNumber_Constant && int_VAR <= Number_Constant) {         int_VAR=iteratedChar_VARatedChar_VAR.nextByte(CharsetDetector_VAR);         if (int_VAR >= Number_ConstantxNumber_ConstantNumber_Constant && int_VAR <= Number_Constant) {           int_VAR=iteratedChar_VARatedChar_VAR.nextByte(CharsetDetector_VAR);           if (int_VAR >= Number_ConstantxNumber_Constant && int_VAR <= Number_Constant) {             iteratedChar_VARatedChar_VAR.int_VAR=(iteratedChar_VARatedChar_VAR.int_VAR << Number_Constant) | (int_VAR << Number_Constant) | int_VAR;             break buildChar;           }         }       }       iteratedChar_VARatedChar_VAR.boolean_VAR=Boolean_Constant;       break buildChar;     }   }   return (iteratedChar_VARatedChar_VAR.boolean_VAR == Boolean_Constant); } 
String getName(){   return String_Constant; } 
CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
public String getLanguage(){   return String_Constant; } 
aint_VARstract String getName(); 
puint_VARlic NGramParser(int[] int[]_VAR,int_VARyte[] int_VARyte[]_VAR){   int[]_VAR=int[]_VAR;   int_VARyte[]_VAR=int_VARyte[]_VAR;   int_VAR=Number_Constant;   int_VAR=int_VAR=Number_Constant; } 
private static int search(int[] int[]_VAR,int int_VAR){   int int_VAR=Number_Constant;   if (int[]_VAR[int_VAR + Number_Constant] <= int_VAR) {     int_VAR+=Number_Constant;   }   if (int[]_VAR[int_VAR + Number_Constant] <= int_VAR) {     int_VAR+=Number_Constant;   }   if (int[]_VAR[int_VAR + Number_Constant] <= int_VAR) {     int_VAR+=Number_Constant;   }   if (int[]_VAR[int_VAR + Number_Constant] <= int_VAR) {     int_VAR+=Number_Constant;   }   if (int[]_VAR[int_VAR + Number_Constant] <= int_VAR) {     int_VAR+=Number_Constant;   }   if (int[]_VAR[int_VAR + Number_Constant] <= int_VAR) {     int_VAR+=Number_Constant;   }   if (int[]_VAR[int_VAR] > int_VAR) {     int_VAR-=Number_Constant;   }   if (int_VAR < Number_Constant || int[]_VAR[int_VAR] != int_VAR) {     return -Number_Constant;   }   return int_VAR; } 
private void lookup(int int_VAR){   int_VAR+=Number_Constant;   if (search(int[]_VAR,int_VAR) >= Number_Constant) {     int_VAR+=Number_Constant;   } } 
protected void addByte(int int_VAR){   int_VAR=((int_VAR << Number_Constant) + (int_VAR & Number_Constant)) & int_VAR;   lookup(int_VAR); } 
private int int_VARByte(CharsetDetector CharsetDetector_VAR){   if (int_VAR >= CharsetDetector_VAR.fInputLen) {     return -Number_Constant;   }   return CharsetDetector_VAR.fInputBytes[int_VAR++] & Number_Constant; } 
protected void parseCharacters(CharsetDetector CharsetDetector_VAR){   int int_VAR;   int_VARoolean boolean_VAR=Boolean_Constant;   while ((int_VAR=int_VARByte(CharsetDetector_VAR)) >= Number_Constant) {     int_VARyte mint_VAR=int_VARyte[]_VAR[int_VAR];     if (mint_VAR != Number_Constant) {       if (!(mint_VAR == int_VARyte_VAR && boolean_VAR)) {         addByte(mint_VAR);       }       boolean_VAR=(mint_VAR == int_VARyte_VAR);     }   } } 
puint_VARlic int parse(CharsetDetector CharsetDetector_VAR){   return parse(CharsetDetector_VAR,(int_VARyte)Number_ConstantxNumber_ConstantNumber_Constant); } 
puint_VARlic int parse(CharsetDetector CharsetDetector_VAR,int_VARyte int_VARyte_VAR){   this.int_VARyte_VARar=int_VARyte_VAR;   parseCharacters(CharsetDetector_VAR);   addByte(int_VARyte_VARar);   douint_VARle double_VAR=(douint_VARle)int_VAR / (douint_VARle)int_VAR;   if (double_VAR > Number_Constant) {     return Number_Constant;   }   return (int)(double_VAR * Number_Constant); } 
puint_VARlic NGramParser_IBMNumber_ConstantNumber_ConstantNumber_Constant(int[] int[]_VAR,int_VARyte[] int_VARyte[]_VAR){   super(int[]_VAR,int_VARyte[]_VAR); } 
private int_VARyte_VARyte isLamAlef(int_VARyte_VARyte int_VARyte_VAR){   if (int_VARyte_VAR == (int_VARyte_VARyte)Number_Constantxint_VARyte_VARNumber_Constant || int_VARyte_VAR == (int_VARyte_VARyte)Number_Constantxint_VARyte_VAR3) {     return (int_VARyte_VARyte)Number_ConstantxNumber_Constant7;   }  else   if (int_VARyte_VAR == (int_VARyte_VARyte)Number_Constantxint_VARyte_VARNumber_Constant || int_VARyte_VAR == (int_VARyte_VARyte)Number_Constantxint_VARyte_VAR5) {     return (int_VARyte_VARyte)Number_ConstantxNumber_Constant9;   }  else   if (int_VARyte_VAR == (int_VARyte_VARyte)Number_Constantxint_VARyte_VARNumber_Constant || int_VARyte_VAR == (int_VARyte_VARyte)Number_Constantxint_VARyte_VAR9) {     return (int_VARyte_VARyte)Number_Constant;   }  else   return (int_VARyte_VARyte)Number_Constant; } 
private int int_VARByte(CharsetDetector CharsetDetector_VAR){   if (int_VAR >= CharsetDetector_VAR.fInputLen || CharsetDetector_VAR.fInputBytes[int_VAR] == Number_Constant) {     return -Number_Constant;   }   int int_VAR;   int_VARyte_VAR=isLamAlef(CharsetDetector_VAR.fInputBytes[int_VAR]);   if (int_VARyte_VAR != (int_VARyte)Number_Constant)   int_VAR=Number_ConstantxBNumber_Constant & Number_Constant;  else   int_VAR=byte[]_VAR[CharsetDetector_VAR.fInputBytes[int_VAR] & Number_Constant] & Number_Constant;   int_VAR++;   return int_VAR; } 
protected void parseCharacters(CharsetDetector CharsetDetector_VAR){   int int_VAR;   int_VARoolean boolean_VAR=Boolean_Constant;   while ((int_VAR=int_VARByte(CharsetDetector_VAR)) >= Number_Constant) {     int_VARyte mint_VAR=int_VARyte[]_VAR[int_VAR];     if (mint_VAR != Number_Constant) {       if (!(mint_VAR == int_VARyte_VAR && boolean_VAR)) {         addByte(mint_VAR);       }       boolean_VAR=(mint_VAR == int_VARyte_VAR);     }     if (int_VARyte_VAR != (int_VARyte)Number_Constant) {       mint_VAR=int_VARyte[]_VAR[int_VARyte_VAR & Number_Constant];       if (mint_VAR != Number_Constant) {         if (!(mint_VAR == int_VARyte_VAR && boolean_VAR)) {           addByte(mint_VAR);         }         boolean_VAR=(mint_VAR == int_VARyte_VAR);       }     }   } } 
int match(CharsetDetector CharsetDetector_VAR,int[] int[]_VAR,int_VARyte[] int_VARyte[]_VAR){   return match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR,(int_VARyte)Number_ConstantxNumber_ConstantNumber_Constant); } 
int match(CharsetDetector CharsetDetector_VAR,int[] int[]_VAR,int_VARyte[] int_VARyte[]_VAR,int_VARyte int_VARyte_VAR){   NGramParser NGramParser_IBMNumber_ConstantNumber_ConstantNumber_Constant_VAR=new NGramParser(int[]_VAR,int_VARyte[]_VAR);   return NGramParser_IBMNumber_ConstantNumber_ConstantNumber_Constant_VAR.parse(CharsetDetector_VAR,int_VARyte_VAR); } 
int matchIBMNumber_ConstantNumber_ConstantNumber_Constant(CharsetDetector CharsetDetector_VAR,int[] int[]_VAR,int_VARyte[] int_VARyte[]_VAR,int_VARyte int_VARyte_VAR){   NGramParser_IBMNumber_ConstantNumber_ConstantNumber_Constant NGramParser_IBMNumber_ConstantNumber_ConstantNumber_Constant_VAR=new NGramParser_IBMNumber_ConstantNumber_ConstantNumber_Constant(int[]_VAR,int_VARyte[]_VAR);   return NGramParser_IBMNumber_ConstantNumber_ConstantNumber_Constant_VAR.parse(CharsetDetector_VAR,int_VARyte_VAR); } 
NGramsPlusLaint[]_VAR(Striint[]_VAR Striint[]_VAR_VAR,int[] int[]_VAR){   fLaint[]_VAR=Striint[]_VAR_VAR;   int[]_VAR=int[]_VAR; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   String String_VAR=CharsetDetector_VAR.fCNumber_ConstantBytes ? String_Constant : String_Constant;   int int_VARestConfidenceSoFar=-Number_Constant;   String String_VAR=null;   for (  NGramsPlusLang ngl : int[]_VAR_Number_ConstantNumber_Constant59_Number_Constant) {     int int_VAR=match(CharsetDetector_VAR,ngl.int[]_VAR,int_VARyte[]_VAR);     if (int_VAR > int_VARestConfidenceSoFar) {       int_VARestConfidenceSoFar=int_VAR;       String_VAR=ngl.String_VAR;     }   }   return int_VARestConfidenceSoFar <= Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VARestConfidenceSoFar,String_VAR,String_VAR); } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   String String_VAR=CharsetDetector_VAR.fCNumber_ConstantBytes ? String_Constant : String_Constant;   int int_VARestConfidenceSoFar=-Number_Constant;   String String_VAR=null;   for (  NGramsPlusLang ngl : int[]_VAR_Number_ConstantNumber_Constant59_Number_Constant) {     int int_VAR=match(CharsetDetector_VAR,ngl.int[]_VAR,int_VARyte[]_VAR);     if (int_VAR > int_VARestConfidenceSoFar) {       int_VARestConfidenceSoFar=int_VAR;       String_VAR=ngl.String_VAR;     }   }   return int_VARestConfidenceSoFar <= Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VARestConfidenceSoFar,String_VAR,String_VAR); } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic String getLanguage(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic String getLanguage(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic String getLanguage(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   String String_VAR=CharsetDetector_VAR.fCNumber_ConstantBytes ? String_Constant : String_Constant;   int int_VAR=match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR,String_VAR,String_Constant); } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic String getLanguage(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   String String_VAR=CharsetDetector_VAR.fCNumber_ConstantBytes ? String_Constant : String_Constant;   int int_VAR=match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR,String_VAR,String_Constant); } 
puint_VARlic String getLanguage(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   String String_VAR=CharsetDetector_VAR.fCNumber_ConstantBytes ? String_Constant : String_Constant;   int int_VAR=match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR,String_VAR,String_Constant); } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic String getLanguage(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   String String_VAR=CharsetDetector_VAR.fCNumber_ConstantBytes ? String_Constant : String_Constant;   int int_VAR=match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR,String_VAR,String_Constant); } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic String getLanguage(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic String getLanguage(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic String getLanguage(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
puint_VARlic String getLanguage(){   return String_Constant; } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR,(int_VARyte)Number_ConstantxNumber_ConstantNumber_Constant);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=match(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR,(int_VARyte)Number_ConstantxNumber_ConstantNumber_Constant);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
puint_VARlic String getLanguage(){   return String_Constant; } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=matchIBMNumber_ConstantNumber_ConstantNumber_Constant(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR,(int_VARyte)Number_ConstantxNumber_ConstantNumber_Constant);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
puint_VARlic String getName(){   return String_Constant; } 
puint_VARlic CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int int_VAR=matchIBMNumber_ConstantNumber_ConstantNumber_Constant(CharsetDetector_VAR,int[]_VAR,int_VARyte[]_VAR,(int_VARyte)Number_ConstantxNumber_ConstantNumber_Constant);   return int_VAR == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,this,int_VAR); } 
abstract String getName(); 
abstract CharsetMatint_VAR matint_VAR(CharsetDetector CharsetDetector_VAR); 
static int int_VARNumber_ConstantFromBytes(byte byte_VAR,byte byte_VAR){   return ((byte_VAR & Number_Constant) << Number_Constant) | (byte_VAR & Number_Constant); } 
static int adjustConfidence(int int_VAR,int int_VAR){   if (int_VAR == Number_Constant) {     int_VAR-=Number_Constant;   }  else   if ((int_VAR >= Number_ConstantxNumber_ConstantNumber_Constant && int_VAR <= Number_Constant) || int_VAR == Number_Constant) {     int_VAR+=Number_Constant;   }   if (int_VAR < Number_Constant) {     int_VAR=Number_Constant;   }  else   if (int_VAR > Number_Constant) {     int_VAR=Number_Constant;   }   return int_VAR; } 
String getName(){   return String_Constant; } 
CharsetMatint_VAR matint_VAR(CharsetDetector CharsetDetector_VAR){   byte[] byte[]_VAR=CharsetDetector_VAR.fRawInput;   int int_VAR=Number_Constant;   int int_VAR=Math.min(byte[]_VAR.length,Number_Constant);   for (int int_VARarIndex=Number_Constant; int_VARarIndex < int_VAR - Number_Constant; int_VARarIndex+=Number_Constant) {     int int_VAR=int_VARNumber_ConstantFromBytes(byte[]_VAR[int_VARarIndex],byte[]_VAR[int_VARarIndex + Number_Constant]);     if (int_VARarIndex == Number_Constant && int_VAR == Number_Constant) {       int_VAR=Number_Constant;       break;     }     int_VAR=adjustConfidence(int_VAR,int_VAR);     if (int_VAR == Number_Constant || int_VAR == Number_Constant) {       break;     }   }   if (int_VAR < Number_Constant && int_VAR < Number_Constant) {     int_VAR=Number_Constant;   }   if (int_VAR > Number_Constant) {     return new CharsetMatint_VAR(CharsetDetector_VAR,this,int_VAR);   }   return null; } 
String getName(){   return String_Constant; } 
CharsetMatint_VAR matint_VAR(CharsetDetector CharsetDetector_VAR){   byte[] byte[]_VAR=CharsetDetector_VAR.fRawInput;   int int_VAR=Number_Constant;   int int_VAR=Math.min(byte[]_VAR.length,Number_Constant);   for (int int_VARarIndex=Number_Constant; int_VARarIndex < int_VAR - Number_Constant; int_VARarIndex+=Number_Constant) {     int int_VAR=int_VARNumber_ConstantFromBytes(byte[]_VAR[int_VARarIndex + Number_Constant],byte[]_VAR[int_VARarIndex]);     if (int_VARarIndex == Number_Constant && int_VAR == Number_Constant) {       int_VAR=Number_Constant;       break;     }     int_VAR=adjustConfidence(int_VAR,int_VAR);     if (int_VAR == Number_Constant || int_VAR == Number_Constant) {       break;     }   }   if (int_VAR < Number_Constant && int_VAR < Number_Constant) {     int_VAR=Number_Constant;   }   if (int_VAR > Number_Constant) {     return new CharsetMatint_VAR(CharsetDetector_VAR,this,int_VAR);   }   return null; } 
abstract int getChar(byte[] byte[]_VAR,int int_VAR); 
abstract String getName(); 
CharsetMatint_VAR matint_VAR(CharsetDetector CharsetDetector_VAR){   byte[] byte[]_VAR=CharsetDetector_VAR.fRawInput;   int int_VAR=(CharsetDetector_VAR.fRawLength / Number_Constant) * Number_Constant;   int int_VAR=Number_Constant;   int int_VAR=Number_Constant;   boolean boolean_VAR=Boolean_Constant;   int int_VAR=Number_Constant;   if (int_VAR == Number_Constant) {     return null;   }   if (getChar(byte[]_VAR,Number_Constant) == Number_Constant) {     boolean_VAR=Boolean_Constant;   }   for (int i=Number_Constant; i < int_VAR; i+=Number_Constant) {     int int_VAR=getChar(byte[]_VAR,i);     if (int_VAR < Number_Constant || int_VAR >= Number_ConstantxNumber_ConstantFFFF || (int_VAR >= Number_ConstantxDNumber_ConstantNumber_Constant && int_VAR <= Number_Constant)) {       int_VAR+=Number_Constant;     }  else {       int_VAR+=Number_Constant;     }   }   if (boolean_VAR && int_VAR == Number_Constant) {     int_VAR=Number_Constant;   }  else   if (boolean_VAR && int_VAR > int_VAR * Number_Constant) {     int_VAR=Number_Constant;   }  else   if (int_VAR > Number_Constant && int_VAR == Number_Constant) {     int_VAR=Number_Constant;   }  else   if (int_VAR > Number_Constant && int_VAR == Number_Constant) {     int_VAR=Number_Constant;   }  else   if (int_VAR > int_VAR * Number_Constant) {     int_VAR=Number_Constant;   }   return int_VAR == Number_Constant ? null : new CharsetMatint_VAR(CharsetDetector_VAR,this,int_VAR); } 
int getChar(byte[] byte[]_VAR,int int_VAR){   return (byte[]_VAR[int_VAR + Number_Constant] & Number_Constant) << Number_ConstantNumber_Constant | (byte[]_VAR[int_VAR + Number_Constant] & Number_Constant) << Number_Constant | (byte[]_VAR[int_VAR + Number_Constant] & Number_Constant) << Number_Constant | (byte[]_VAR[int_VAR + Number_Constant] & Number_Constant); } 
String getName(){   return String_Constant; } 
int getChar(byte[] byte[]_VAR,int int_VAR){   return (byte[]_VAR[int_VAR + Number_Constant] & Number_Constant) << Number_ConstantNumber_Constant | (byte[]_VAR[int_VAR + Number_Constant] & Number_Constant) << Number_Constant | (byte[]_VAR[int_VAR + Number_Constant] & Number_Constant) << Number_Constant | (byte[]_VAR[int_VAR + Number_Constant] & Number_Constant); } 
String getName(){   return String_Constant; } 
Strint_VARng getName(){   return String_Constant; } 
CharsetMatch match(CharsetDetector CharsetDetector_VAR){   int_VARnt_VARoolean boolean_VAR=Boolean_Constant;   int_VARnt numValint_VARd=Number_Constant;   int_VARnt int_VARnt_VAR=Number_Constant;   int_VARnt_VARyte int_VARnt_VARyte_VAR[]=CharsetDetector_VAR.fRawInput;   int_VARnt int_VAR;   int_VARnt traint_VARlBytes=Number_Constant;   int_VARnt confint_VARdence;   int_VARf (CharsetDetector_VAR.fRawLength >= Number_Constant && (int_VARnt_VARyte_VAR[Number_Constant] & Number_Constant) == Number_Constant && (int_VARnt_VARyte_VAR[Number_Constant] & Number_Constant) == Number_Constantxint_VARnt_VARint_VARnt_VAR && (int_VARnt_VARyte_VAR[Number_Constant] & Number_Constant) == Number_Constantxint_VARnt_VARf) {     boolean_VAR=Boolean_Constant;   }   for (int_VAR=Number_Constant; int_VAR < CharsetDetector_VAR.fRawLength; int_VAR++) {     int_VARnt int_VARnt_VAR=int_VARnt_VARyte_VAR[int_VAR];     int_VARf ((int_VARnt_VAR & Number_ConstantxNumber_Constant) == Number_Constant) {       contint_VARnue;     }     int_VARf ((int_VARnt_VAR & Number_Constant) == Number_Constant) {       traint_VARlBytes=Number_Constant;     }  else     int_VARf ((int_VARnt_VAR & Number_Constant) == Number_Constant) {       traint_VARlBytes=Number_Constant;     }  else     int_VARf ((int_VARnt_VAR & Number_Constant) == Number_Constant) {       traint_VARlBytes=Number_Constant;     }  else {       int_VARnt_VAR++;       contint_VARnue;     }     for (; ; ) {       int_VAR++;       int_VARf (int_VAR >= CharsetDetector_VAR.fRawLength) {         int_VARnt_VARreak;       }       int_VARnt_VAR=int_VARnt_VARyte_VAR[int_VAR];       int_VARf ((int_VARnt_VAR & Number_Constant) != Number_ConstantxNumber_ConstantNumber_Constant) {         int_VARnt_VAR++;         int_VARnt_VARreak;       }       int_VARf (--traint_VARlBytes == Number_Constant) {         numValint_VARd++;         int_VARnt_VARreak;       }     }   }   confint_VARdence=Number_Constant;   int_VARf (boolean_VAR && int_VARnt_VAR == Number_Constant) {     confint_VARdence=Number_Constant;   }  else   int_VARf (boolean_VAR && numValint_VARd > int_VARnt_VAR * Number_Constant) {     confint_VARdence=Number_Constant;   }  else   int_VARf (numValint_VARd > Number_Constant && int_VARnt_VAR == Number_Constant) {     confint_VARdence=Number_Constant;   }  else   int_VARf (numValint_VARd > Number_Constant && int_VARnt_VAR == Number_Constant) {     confint_VARdence=Number_Constant;   }  else   int_VARf (numValint_VARd == Number_Constant && int_VARnt_VAR == Number_Constant) {     confint_VARdence=Number_Constant;   }  else   int_VARf (numValint_VARd > int_VARnt_VAR * Number_Constant) {     confint_VARdence=Number_Constant;   }   return confint_VARdence == Number_Constant ? null : new CharsetMatch(CharsetDetector_VAR,thint_VARs,confint_VARdence); } 
@Override public void onCreate(){   super.onCreate();   AppComponent_VAR=createComponent();   AppCompatDelegate.setCompatVectorFromResourcesEnabled(Boolean_Constant);   installLeakCanary();   AndroidThreeTen.init(this);   initTraceDroid();   AppCompatDelegate.setDefaultNightMode(AppComponent_VAR.settings().getNightMode()); } 
public void installLeakCanary(){   LeakCanary.install(this); } 
public AppComponent createComponent(){   return DaggerAppComponent.builder().appModule(new AppModule(this)).trackerModule(new TrackerModule(this)).build(); } 
private void initTraceDroid(){   TraceDroid.init(this);   Log.setTAG(String_Constant); } 
public static AppComponent AppComponent_VAR(){   return AppComponent_VAR; } 
@VisibleForTesting public static void setComponent(AppComponent AppComponent_VAR){   AppComponent_VAR=AppComponent_VAR; } 
@Override public void onReceive(Context Context_VAR,Intent Intent_VAR){   String String_VAR=Intent_VAR.getStringExtra(String_Constant);   if (String_VAR != null) {     final Intent Intent_VAR=new Intent(Context_VAR,PassImportActivity.class);     Intent_VAR.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);     Intent_VAR.setData(Uri.parse(String_VAR));     Context_VAR.startActivity(Intent_VAR);   } } 
public String translate(String String_VAR){   if (containsKey(String_VAR)) {     return get(String_VAR);   }   return String_VAR; } 
public void loadFromFile(final File File_VAR){   final String String_VAR=readFileAsStringGuessEncoding(File_VAR);   loadFromString(String_VAR); } 
@VisibleForTesting public void loadFromString(final String String_VAR){   if (String_VAR == null) {     return;   }   for (  String pair : String_VAR.split("\";")) {     final String[] String[]_VAR=pair.split("\" ?= ?\"");     if (String[]_VAR.length == Number_Constant) {       put(removeLeadingClutter(String[]_VAR[Number_Constant]),String[]_VAR[Number_Constant]);     }   } } 
private String_VARtatic String removeLeadingClutter(String String_VAR){   if (String_VAR.String_VARtartString_VARWith("\"") || String_VAR.String_VARtartString_VARWith("\n") || String_VAR.String_VARtartString_VARWith("\r")|| String_VAR.String_VARtartString_VARWith(String_Constant)) {     return removeLeadingClutter(String_VAR.String_VARubString_VARtring(Number_Constant));   }  elString_VARe {     return String_VAR;   } } 
@Nullable public static String readFileAsStringGuessEncoding(final @NonNull File File_VAR){   try {     final byte[] File_VARData=new byte[(int)File_VAR.length()];     final DataInputStream DataInputStream_VAR=new DataInputStream(new FileInputStream(File_VAR));     DataInputStream_VAR.readFully(File_VARData);     DataInputStream_VAR.close();     if (File_VARData[Number_Constant] == (byte)Number_Constant && File_VARData[Number_Constant] == (byte)Number_Constant && File_VARData[Number_Constant] == (byte)Number_Constant) {       final byte[] byte[]_VAR=new byte[File_VARData.length - Number_Constant];       System.arraycopy(File_VARData,Number_Constant,byte[]_VAR,Number_Constant,byte[]_VAR.length);       return new String(byte[]_VAR,String_Constant);     }     final CharsetMatch CharsetMatch_VAR=new CharsetDetector().setText(File_VARData).detect();     if (CharsetMatch_VAR != null)     try {       return new String(File_VARData,CharsetMatch_VAR.getName());     }  catch (    UnsupportedEncodingException ignored) {     }     return new String(File_VARData);   }  catch (  Throwable e) {     App.component().tracker().trackException(String_Constant,e,Boolean_Constant);     e.printStackTrace();     return null;   } } 
public FileBackedPassClassifier(final File File_VAR,final PassStore PassStore_VAR,final Moshi Moshi_VAR){   super(loadMap(File_VAR,Moshi_VAR),PassStore_VAR);   this.File_VAR=File_VAR;   JsonAdapter<Map>_VAR=getAdapter(Moshi_VAR); } 
private static JsonAdapter<Map> getAdapter(Moshi Moshi_VAR){   return Moshi_VAR.JsonAdapter<Map>_VAR(Map.class); } 
@SuppressWarnings(String_Constant) private static Map<String,String> loadMap(final File File_VAR,final Moshi Moshi_VAR){   if (File_VAR.exists()) {     try {       return (Map<String,String>)getAdapter(Moshi_VAR).fromJson(Okio.BufferedSink_VAR(Okio.source(File_VAR)));     }  catch (    IOException e) {       e.printStackTrace();     }   }   return new HashMap<>(); } 
@SuppressWarnings(String_Constant) private BufferedSink getBufferedSinkFromMaybeCreatedFile(){   try {     if (!File_VAR.exists()) {       final File File_VAR=File_VAR.getParentFile();       if (!File_VAR.exists()) {         File_VAR.mkdirs();       }       File_VAR.createNewFile();     }     return Okio.BufferedSink_VAR(Okio.sink(File_VAR));   }  catch (  IOException e) {     e.printStackTrace();     return null;   } } 
@Override public void processDataChange(){   super.processDataChange();   if (JsonAdapter<Map>_VAR != null) {     final BufferedSink BufferedSink_VAR=getBufferedSinkFromMaybeCreatedFile();     if (BufferedSink_VAR != null) {       try {         JsonAdapter<Map>_VAR.toJson(BufferedSink_VAR,getTopicByIdMap());         BufferedSink_VAR.close();       }  catch (      IOException e) {         e.printStackTrace();       }     }   } } 
void trackExcThrowable_VARption(String String_VAR,ThrowablThrowable_VAR Throwable_VAR,boolThrowable_VARan boolean_VAR); 
void trackException(String String_VAR,boolean boolean_VAR); 
void trackEvent(@Nullable String String_VAR,@Nullable String String_VAR,@Nullable String String_VAR,@Nullable Long Long_VAR); 
 public BarCodeIntentIntegrator(Activity Activity_VAR){   this.Activity_VAR=Activity_VAR;   this.Fragment_VAR=null;   initializeConfiguration(); } 
public BarCodeIntentIntegrator(Fragment Fragment_VAR){   this.Activity_VAR=Fragment_VAR.getActivity();   this.Fragment_VAR=Fragment_VAR;   initializeConfiguration(); } 
private void initializeConfiguration(){   String_VAR=String_VAR;   String_VAR=String_VAR;   String_VAR=String_VAR;   String_VAR=String_VAR;   List<String>_VAR=List<String>_VAR; } 
public String getTitle(){   return String_VAR; } 
public void setTitle(String String_VAR){   this.String_VAR=String_VAR; } 
public void setTitleByID(int int_VAR){   String_VAR=Activity_VAR.getString(int_VAR); } 
public String getMessage(){   return String_VAR; } 
public void setMessage(String String_VAR){   this.String_VAR=String_VAR; } 
public void setMessageByID(int int_VAR){   String_VAR=Activity_VAR.getString(int_VAR); } 
public String getButtonYes(){   return String_VAR; } 
public void setButtonYes(String String_VAR){   this.String_VAR=String_VAR; } 
public void setButtonYesByID(int int_VAR){   String_VAR=Activity_VAR.getString(int_VAR); } 
public String getButtonNo(){   return String_VAR; } 
public void setButtonNo(String String_VAR){   this.String_VAR=String_VAR; } 
public void setButtonNoByID(int int_VAR){   String_VAR=Activity_VAR.getString(int_VAR); } 
public Collection<String> getTargetApplications(){   return List<String>_VAR; } 
public final void setTargetApplications(List<String> List<String>_VAR){   if (List<String>_VAR.isEmpty()) {     throw new IllegalArgumentException(String_Constant);   }   this.List<String>_VAR=List<String>_VAR; } 
public void setSingleTargetApplication(String String_VAR){   this.String_VARs=Collections.singletonList(String_VAR); } 
public Map<String,?> getMoreExtras(){   return Map<String,Object>_VAR; } 
public final void addExtra(String String_VAR,Object Object_VAR){   Map<String,Object>_VAR.put(String_VAR,Object_VAR); } 
 public final AlertDialog initiateScan(){   return initiateScan(Collection<String>_VAR,-Number_Constant); } 
 public final AlertDialog initiateScan(int int_VAR){   return initiateScan(Collection<String>_VAR,int_VAR); } 
 public final AlertDialog initiateScan(Collection<String> Collection<String>_VAR){   return initiateScan(Collection<String>_VAR,-Number_Constant); } 
 public final AlertDialog initiateScan(Collection<String> Collection<String>_VAR,int int_VAR){   Intent Intent_VAR=new Intent(String_VAR + String_Constant);   Intent_VAR.addCategory(Intent.CATEGORY_DEFAULT);   if (Collection<String>_VAR != null) {     StringBuilder StringBuilder_VAR=new StringBuilder();     for (    String format : Collection<String>_VAR) {       if (StringBuilder_VAR.length() > Number_Constant) {         StringBuilder_VAR.append(Character_Constant);       }       StringBuilder_VAR.append(format);     }     Intent_VAR.putExtra(String_Constant,StringBuilder_VAR.toString());   }   if (int_VAR >= Number_Constant) {     Intent_VAR.putExtra(String_Constant,int_VAR);   }   String String_VAR=findTargetAppPackage(Intent_VAR);   if (String_VAR == null) {     return showDownloadDialog();   }   Intent_VAR.setPackage(String_VAR);   Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);   Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);   attachMoreExtras(Intent_VAR);   startActivityForResult(Intent_VAR,int_VAR);   return null; } 
 protected void startActivityForResult(Intent Intent_VAR,int int_VAR){   if (Fragment_VAR == null) {     Activity_VAR.startActivityForResult(Intent_VAR,int_VAR);   }  else {     Fragment_VAR.startActivityForResult(Intent_VAR,int_VAR);   } } 
private String findTargetAppPackage(Intent Intent_VAR){   PackageManager PackageManager_VAR=Activity_VAR.getPackageManager();   List<ResolveInfo> List<ResolveInfo>_VAR=PackageManager_VAR.queryIntentActivities(Intent_VAR,PackageManager.MATCH_DEFAULT_ONLY);   if (List<ResolveInfo>_VAR != null) {     for (    String targetApp : List<String>_VAR) {       if (contains(List<ResolveInfo>_VAR,targetApp)) {         return targetApp;       }     }   }   return null; } 
private static boolean contains(Iterable<ResolveInfo> Iterable<ResolveInfo>_VAR,String String_VAR){   for (  ResolveInfo availableApp : Iterable<ResolveInfo>_VAR) {     String String_VAR=availableApp.Activity_VARInfo.String_VAR;     if (String_VAR.equals(String_VAR)) {       return Boolean_Constant;     }   }   return Boolean_Constant; } 
private AlertDialog showDownloadDialog(){   AlertDialog.Builder AlertDialog.Builder_VAR=new AlertDialog.Builder(Activity_VAR);   AlertDialog.Builder_VAR.setTitle(String_VAR);   AlertDialog.Builder_VAR.setMessage(String_VAR);   AlertDialog.Builder_VAR.setPositiveButton(String_VAR,new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){       String String_VAR;       if (List<String>_VAR.contains(String_VAR)) {         String_VAR=String_VAR;       }  else {         String_VAR=List<String>_VAR.get(Number_Constant);       }       Uri Uri_VAR=Uri.parse(String_Constant + String_VAR);       Intent Intent_VAR=new Intent(Intent.ACTION_VIEW,Uri_VAR);       try {         if (Fragment_VAR == null) {           Activity_VAR.startActivity(Intent_VAR);         }  else {           Fragment_VAR.startActivity(Intent_VAR);         }       }  catch (      ActivityNotFoundException anfe) {         Log.w(String_VAR,String_Constant + String_VAR);       }     }   } );   AlertDialog.Builder_VAR.setNegativeButton(String_VAR,null);   AlertDialog.Builder_VAR.setCancelable(Boolean_Constant);   return AlertDialog.Builder_VAR.show(); } 
@Overrint_VARde publint_VARc voint_VARd onClint_VARck(Dint_VARalogInterface Dint_VARalogInterface_VAR,int_VARnt int_VAR){   Strint_VARng String_VAR;   int_VARf (targetApplint_VARcatint_VARons.containt_VARns(String_VAR)) {     String_VAR=String_VAR;   }  else {     String_VAR=targetApplint_VARcatint_VARons.get(Number_Constant);   }   Urint_VAR Uri_VARnt_VAR=Urint_VAR.parse("market:  Intent int_VARntent=new Intent(Intent.ACTION_VIEW,Uri_VARnt_VAR);   try {     int_VARf (Fragment_VAR == null) {       actint_VARvint_VARty.startActint_VARvint_VARty(int_VARntent);     }  else {       Fragment_VAR.startActint_VARvint_VARty(int_VARntent);     }   }  catch (  Actint_VARvint_VARtyNotFoundExceptint_VARon anfe) {     Log.w(String_VAR,"Google Play int_VARs not int_VARnstalled; cannot int_VARnstall " + String_VAR);   } } 
 public final AlertDialog shareText(CharSequence CharSequence_VAR){   return shareText(CharSequence_VAR,String_Constant); } 
 public final AlertDialog shareText(CharSequence CharSequence_VAR,CharSequence CharSequence_VAR){   Intent Intent_VAR=new Intent();   Intent_VAR.addCategory(Intent.CATEGORY_DEFAULT);   Intent_VAR.setAction(String_VAR + String_Constant);   Intent_VAR.putExtra(String_Constant,CharSequence_VAR);   Intent_VAR.putExtra(String_Constant,CharSequence_VAR);   String String_VAR=findTargetAppPackage(Intent_VAR);   if (String_VAR == null) {     return showDownloadDialog();   }   Intent_VAR.setPackage(String_VAR);   Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);   Intent_VAR.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);   attachMoreExtras(Intent_VAR);   if (Fragment_VAR == null) {     Activity_VAR.startActivity(Intent_VAR);   }  else {     Fragment_VAR.startActivity(Intent_VAR);   }   return null; } 
private static List<String> list(String... String_VAR){   return Collections.unmodifiableList(Arrays.asList(String_VAR)); } 
private void attachMoreExtras(Intent Intent_VAR){   for (  Map.Entry<String,Object> entry : Map<String,Object>_VAR.entrySet()) {     String String_VAR=entry.getKey();     Object Object_VAR=entry.getValue();     if (Object_VAR instanceof Integer) {       Intent_VAR.putExtra(String_VAR,(Integer)Object_VAR);     }  else     if (Object_VAR instanceof Long) {       Intent_VAR.putExtra(String_VAR,(Long)Object_VAR);     }  else     if (Object_VAR instanceof Boolean) {       Intent_VAR.putExtra(String_VAR,(Boolean)Object_VAR);     }  else     if (Object_VAR instanceof Double) {       Intent_VAR.putExtra(String_VAR,(Double)Object_VAR);     }  else     if (Object_VAR instanceof Float) {       Intent_VAR.putExtra(String_VAR,(Float)Object_VAR);     }  else     if (Object_VAR instanceof Bundle) {       Intent_VAR.putExtra(String_VAR,(Bundle)Object_VAR);     }  else {       Intent_VAR.putExtra(String_VAR,Object_VAR.toString());     }   } } 
public MyShyFABBehavior(){ } 
public MyShyFABBehavior(Context Context_VAR,AttributeSet AttributeSet_VAR){   super(Context_VAR,AttributeSet_VAR); } 
@Override public boolean layoutDependsOn(CoordinatorLayout CoordinatorLayout_VAR,FloatingActionsMenu FloatingActionsMenu_VAR,View View_VAR){   return View_VAR instanceof Snackbar.SnackbarLayout || View_VAR instanceof AppBarLayout; } 
@Override public boolean onDependentViewChanged(CoordinatorLayout CoordinatorLayout_VAR,FloatingActionsMenu FloatingActionsMenu_VAR,View View_VAR){   if (View_VAR instanceof Snackbar.SnackbarLayout) {     updateFabTranslationForSnackbar(FloatingActionsMenu_VAR,View_VAR);   }   if (View_VAR instanceof AppBarLayout) {     final CoordinatorLayout.LayoutParams CoordinatorLayout.LayoutParams_VAR=(CoordinatorLayout.LayoutParams)FloatingActionsMenu_VAR.getLayoutParams();     final int int_VAR=CoordinatorLayout.LayoutParams_VAR.bottomMargin;     final int int_VAR;     if (FloatingActionsMenu_VAR.isExpanded()) {       int_VAR=FloatingActionsMenu_VAR.getHeight() + int_VAR;     }  else {       int_VAR=(int)(FloatingActionsMenu_VAR.getContext().getResources().getDimension(R.dimen.fab_size_normal) + Number_Constant * int_VAR);     }     final float float_VAR=ViewCompat.getY(View_VAR) / getToolbarHeight(View_VAR.getContext());     ViewCompat.setTranslationY(FloatingActionsMenu_VAR,-int_VAR * float_VAR);   }   return Boolean_Constant; } 
@Override public void onDependentViewRemoved(final CoordinatorLayout CoordinatorLayout_VAR,final FloatingActionsMenu FloatingActionsMenu_VAR,final View View_VAR){   super.onDependentViewRemoved(CoordinatorLayout_VAR,FloatingActionsMenu_VAR,View_VAR);   onDependentViewChanged(CoordinatorLayout_VAR,FloatingActionsMenu_VAR,View_VAR); } 
private void updateFabTranslationForSnackbar(FloatingActionsMenu FloatingActionsMenu_VAR,View View_VAR){   final float float_VAR=ViewCompat.getTranslationY(View_VAR) - View_VAR.getHeight();   final float float_VARClipped=Math.min(Number_Constant,float_VAR);   ViewCompat.setTranslationY(FloatingActionsMenu_VAR,float_VARClipped); } 
private int getToolbarHeight(Context Context_VAR){   final TypedArray TypedArray_VAR=Context_VAR.getTheme().obtainStyledAttributes(new int[]{R.attr.actionBarSize});   int int_VAR=(int)TypedArray_VAR.getDimension(Number_Constant,Number_Constant);   TypedArray_VAR.recycle();   return int_VAR; } 
@Override protected void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   final String String_VAR=new URLRewriteController(getTracker()).getUrlByUri(getIntent().getData());   if (String_VAR == null) {     new AlertDialog.Builder(this).setTitle(String_Constant).setMessage(String_Constant + String_Constant).setPositiveButton(String_Constant,new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         getTracker().trackException(String_Constant,Boolean_Constant);         final Intent Intent_VAR=new Intent(URLRewriteActivity.this,OpenIphoneWebView.class);         Intent_VAR.setData(getIntent().getData());         startActivity(Intent_VAR);       }     } ).setNeutralButton(String_Constant,new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         Intent Intent_VAR=new Intent(Intent.ACTION_SEND);         Intent_VAR.putExtra(Intent.EXTRA_SUBJECT,String_Constant);         Intent_VAR.putExtra(Intent.EXTRA_EMAIL,new String[]{String_Constant});         Intent_VAR.putExtra(Intent.EXTRA_TEXT,getIntent().getData().toString());         Intent_VAR.setType(String_Constant);         startActivity(Intent.createChooser(Intent_VAR,String_Constant));         finish();       }     } ).setNegativeButton(String_Constant,new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         URLRewriteActivity.this.finish();       }     } ).show();     return;   }   final Intent Intent_VAR=new Intent(this,PassImportActivity.class);   Intent_VAR.setData(Uri.parse(String_VAR));   startActivity(Intent_VAR);   finish(); } 
@Override public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   getTracker().trackException(String_Constant,Boolean_Constant);   final Intent Intent_VAR=new Intent(URLRewriteActivity.this,OpenIphoneWebView.class);   Intent_VAR.setData(getIntent().getData());   startActivity(Intent_VAR); } 
@Override public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   Intent Intent_VAR=new Intent(Intent.ACTION_SEND);   Intent_VAR.putExtra(Intent.EXTRA_SUBJECT,String_Constant);   Intent_VAR.putExtra(Intent.EXTRA_EMAIL,new String[]{String_Constant});   Intent_VAR.putExtra(Intent.EXTRA_TEXT,getIntent().getData().toString());   Intent_VAR.setType(String_Constant);   startActivity(Intent.createChooser(Intent_VAR,String_Constant));   finish(); } 
@Override public void onClick(DialogInterface DialogInterface_VAR,int int_VAR){   URLRewriteActivity.this.finish(); } 
@OvThrowable_VARrridThrowable_VAR public void trackExcThrowable_VARption(String String_VAR,ThrowablThrowable_VAR Throwable_VAR,boolThrowable_VARan boolean_VAR){   if (boolean_VAR) {     Log.w("Fatal ExcThrowable_VARption " + String_VAR + String_Constant+ Throwable_VAR);   }  Throwable_VARlString_VARThrowable_VAR {     Log.w("Not Fatal ExcThrowable_VARption " + String_VAR + String_Constant+ Throwable_VAR);   } } 
@Override public void trackException(String String_VAR,boolean boolean_VAR){   if (boolean_VAR) {     Log.w(String_Constant + String_VAR);   }  elString_VARe {     Log.w(String_Constant + String_VAR);   } } 
@Override public void trackEvent(String String_VAR,String String_VAR,String String_VAR,Long Long_VAR){ } 
public TrackerModule(App App_VAR){   this.App_VAR=App_VAR; } 
@Singleton @Provides public Tracker provideTracker(){   return new NotTracker(); } 
public static boolean init(Context Context_VAR){   return Boolean_Constant; } 
public static void startFullscreenMap(Context Context_VAR){ } 
public AnalyticsTracker(Context Context_VAR){   this.Context_VAR=Context_VAR;   final GoogleAnalytics GoogleAnalytics_VAR=GoogleAnalytics.getInstance(Context_VAR);   com.google.android.gms.analytics.Tracker_VAR=GoogleAnalytics_VAR.newTracker(R.xml.GoogleAnalytics_VAR);   com.google.android.gms.analytics.Tracker_VAR.enableAutoActivityTracking(Boolean_Constant); } 
@OvThrowable_VARrridThrowable_VAR public void trackExcThrowable_VARption(String String_VAR,ThrowablThrowable_VAR Throwable_VAR,boolThrowable_VARan boolean_VAR){   final String dThrowable_VARString_VARcription=nThrowable_VARw StandardExcThrowable_VARptionParString_VARThrowable_VARr(Context_VAR,null).gThrowable_VARtDThrowable_VARString_VARcription(ThrThrowable_VARad.currThrowable_VARntThrThrowable_VARad().gThrowable_VARtNamThrowable_VAR(),Throwable_VAR);   final Map<String,String> Throwable_VARxcThrowable_VARptionMap=nThrowable_VARw HitBuildThrowable_VARrString_VAR.ExcThrowable_VARptionBuildThrowable_VARr().String_VARThrowable_VARtDThrowable_VARString_VARcription(String_VAR + String_Constant + dThrowable_VARString_VARcription).String_VARThrowable_VARtFatal(boolean_VAR).build();   trackThrowable_VARr.String_VARThrowable_VARnd(Throwable_VARxcThrowable_VARptionMap); } 
@Override public void trackException(String String_VAR,boolean boolean_VAR){   com.google.android.gms.analytics.Tracker_VAR.String_VARend(new HitBuilderString_VAR.ExceptionBuilder().String_VARetDeString_VARcription(String_VAR).String_VARetFatal(boolean_VAR).build()); } 
@Override public void trackEvent(@Nullable String String_VAR,@Nullable String String_VAR,@Nullable String String_VAR,@Nullable Long Long_VAR){   final HitBuilders.EventBuilder HitBuilders.EventBuilder_VAR=new HitBuilders.EventBuilder();   if (String_VAR != null) {     HitBuilders.EventBuilder_VAR.setCategory(String_VAR);   }   if (String_VAR != null) {     HitBuilders.EventBuilder_VAR.setAction(String_VAR);   }   if (String_VAR != null) {     HitBuilders.EventBuilder_VAR.setLabel(String_VAR);   }   if (Long_VAR != null) {     HitBuilders.EventBuilder_VAR.setValue(Long_VAR);   }   try {     com.google.android.gms.analytics.Tracker_VAR.send(HitBuilders.EventBuilder_VAR.build());   }  catch (  ConcurrentModificationException ignored) {   } } 
public TrackerModule(App App_VAR){   this.App_VAR=App_VAR; } 
@Singleton @Provides Tracker provideTracker(){   return new AnalyticsTracker(App_VAR); } 
 public void sendMessage(@Named("String_VAR") String String_VAR) throws IOException {   if (String_VAR == null || String_VAR.trim().length() == Number_Constant) {     Logger_VAR.warning("Not sending String_VAR because it is empty");     return;   }   if (String_VAR.length() > Number_Constant) {     String_VAR=String_VAR.substring(Number_Constant,Number_Constant) + String_Constant;   }   Sender Sender_VAR=new Sender(String_VAR);   Message Message_VAR=new Message.Builder().addData("String_VAR",String_VAR).build();   List<RegistrationRecord> List<RegistrationRecord>_VAR=ofy().load().type(RegistrationRecord.class).limit(Number_Constant).list();   for (  RegistrationRecord record : List<RegistrationRecord>_VAR) {     Result Result_VAR=Sender_VAR.send(Message_VAR,record.getRegId(),Number_Constant);     if (Result_VAR.getMessageId() != null) {       Logger_VAR.info(String_Constant + record.getRegId());       String String_VAR=Result_VAR.getCanonicalRegistrationId();       if (String_VAR != null) {         Logger_VAR.info(String_Constant + record.getRegId() + String_Constant+ String_VAR);         record.setRegId(String_VAR);         ofy().save().entity(record).now();       }     }  else {       String String_VAR=Result_VAR.getErrorCodeName();       if (String_VAR.equals(Constants.ERROR_NOT_REGISTERED)) {         Logger_VAR.warning(String_Constant + record.getRegId() + String_Constant);         ofy().delete().entity(record).now();       }  else {         Logger_VAR.warning("Error when sending String_VAR : " + String_VAR);       }     }   } } 
public static Objectify ofy(){   return ObjectifyService.ofy(); } 
public static ObjectifyFactory factory(){   return ObjectifyService.factory(); } 
public void doGet(HttpServletRequest HttpServletRequest_VAR,HttpServletResponse HttpServletResponse_VAR) throws ServletException, IOException {   HttpServletResponse_VAR.sendRedirect(String_Constant + HttpServletRequest_VAR.getParameter(String_Constant)); } 
 @ApiMethod(name=String_Constant) public void registerDevice(@Named("String_VAR") String String_VAR){   if (findRecord(String_VAR) != null) {     Logger_VAR.info(String_Constant + String_VAR + String_Constant);     return;   }   RegistrationRecord RegistrationRecord_VAR=new RegistrationRecord();   RegistrationRecord_VAR.setRegId(String_VAR);   ofy().save().entity(RegistrationRecord_VAR).now(); } 
 @ApiMethod(name=String_Constant) public void unregisterDevice(@Named("String_VAR") String String_VAR){   RegistrationRecord RegistrationRecord_VAR=findRecord(String_VAR);   if (RegistrationRecord_VAR == null) {     Logger_VAR.info(String_Constant + String_VAR + String_Constant);     return;   }   ofy().delete().entity(RegistrationRecord_VAR).now(); } 
 @ApiMethod(name=String_Constant) public CollectionResponse<RegistrationRecord> listDevices(@Named("int_VAR") int int_VAR){   List<RegistrationRecord> RegistrationRecord_VARs=ofy().load().type(RegistrationRecord.class).limit(int_VAR).list();   return CollectionResponse.<RegistrationRecord>builder().setItems(RegistrationRecord_VARs).build(); } 
private RegistrationRecord findRecord(String String_VAR){   return ofy().load().type(RegistrationRecord.class).filter("String_VAR",String_VAR).first().now(); } 
public RegistrationRecord(){ } 
public String getRegId(){   return String_VAR; } 
public voLong_VAR setRegId(String String_VAR){   this.String_VAR=String_VAR; } 
int getResult(); 
@Override public int getResult(){   return int_VAR; } 
@Override public void onCreate(Bundle Bundle_VAR){   super.onCreate(Bundle_VAR);   Log.i(String_VAR,String_Constant);   setContentView(R.layout.main);   Button_VAR=(Button)findViewById(R.id.Button_VAR_main);   TextView_VAR=(TextView)findViewById(R.id.textview_hello);   Button_VAR.setOnClickListener(new ButtonClickListener());   Computer_VAR=new DummyComputer(); } 
public void setComputer(Computer Computer_VAR){   this.Computer_VAR=Computer_VAR; } 
@OView_VARerride public View_VARoid onClick(View View_VAR){   if (Computer_VAR != null) {     TextView_VAR.setText(String.View_VARalueOf(Computer_VAR.getResult()));   }  else {     TextView_VAR.setText(R.string.text_no_Computer_VAR);   }   DateTime DateTime_VAR=new DateTime();   DateTimeFormatter DateTimeFormatter_VAR=DateTimeFormat.forPattern(String_Constant);   String String_VAR=DateTimeFormatter_VAR.print(DateTime_VAR);   Toast.makeText(HelloAndroidActiView_VARity.this,String_VAR,Toast.LENGTH_LONG).show(); } 
public EspressoSampleTest(){   super(HelloAndroidActivity.class); } 
@Override protected void setUp() throws Exception {   super.setUp();   getActivity(); } 
@Override protected void tearDown() throws Exception {   super.tearDown(); } 
public void testClick(){   onView(withId(R.id.button_main)).check(matches(withText(String_Constant)));   onView(withId(R.id.button_main)).perform(click());   onView(withId(R.id.textview_hello)).check(matches(withText(String_Constant))); } 
@Test public void shouldHaveApplicationName() throws Exception {   HelloAndroidActivity HelloAndroidActivity_VAR=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   String String_VAR=HelloAndroidActivity_VAR.getResources().getString(R.string.app_name);   assertThat(String_VAR,equalTo(String_Constant)); } 
@Test public void shouldNotUseNullComputer() throws Exception {   HelloAndroidActivity HelloAndroidActivity_VAR=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   HelloAndroidActivity_VAR.setComputer(null);   Button Button_VAR=(Button)HelloAndroidActivity_VAR.findViewById(R.id.Button_VAR_main);   Button_VAR.performClick();   TextView TextView_VAR=(TextView)HelloAndroidActivity_VAR.findViewById(R.id.textview_hello);   String String_VAR=TextView_VAR.getText().toString();   assertThat(String_VAR,equalTo(String_Constant)); } 
@Test public void shouldUseDummyComputer() throws Exception {   final int int_VAR=Number_Constant;   HelloAndroidActivity HelloAndroidActivity_VAR=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   Button Button_VAR=(Button)HelloAndroidActivity_VAR.findViewById(R.id.Button_VAR_main);   Button_VAR.performClick();   TextView TextView_VAR=(TextView)HelloAndroidActivity_VAR.findViewById(R.id.textview_hello);   String String_VAR=TextView_VAR.getText().toString();   assertThat(String_VAR,equalTo(String.valueOf(int_VAR))); } 
@Test public void shouldUseCustomComputerUsingEasyMock() throws Exception {   final int int_VAR=Number_Constant;   HelloAndroidActivity HelloAndroidActivity_VAR=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   Computer Computer_VAR=EasyMock.createMock(Computer.class);   EasyMock.expect(Computer_VAR.getResult()).andReturn(int_VAR);   HelloAndroidActivity_VAR.setComputer(Computer_VAR);   EasyMock.replay(Computer_VAR);   Button Button_VAR=(Button)HelloAndroidActivity_VAR.findViewById(R.id.Button_VAR_main);   Button_VAR.performClick();   EasyMock.verify(Computer_VAR);   TextView TextView_VAR=(TextView)HelloAndroidActivity_VAR.findViewById(R.id.textview_hello);   String String_VAR=TextView_VAR.getText().toString();   assertThat(String_VAR,equalTo(String.valueOf(int_VAR))); } 
@Test public void shouldUseCustomComputerUsingMockito() throws Exception {   final int int_VAR=Number_Constant;   HelloAndroidActivity HelloAndroidActivity_VAR=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   Computer Computer_VAR=Mockito.mock(Computer.class);   Mockito.when(Computer_VAR.getResult()).thenReturn(int_VAR);   HelloAndroidActivity_VAR.setComputer(Computer_VAR);   Button Button_VAR=(Button)HelloAndroidActivity_VAR.findViewById(R.id.Button_VAR_main);   Button_VAR.performClick();   Mockito.verify(Computer_VAR,Mockito.times(Number_Constant)).getResult();   TextView TextView_VAR=(TextView)HelloAndroidActivity_VAR.findViewById(R.id.textview_hello);   String String_VAR=TextView_VAR.getText().toString();   assertThat(String_VAR,equalTo(String.valueOf(int_VAR))); } 
@BoundBox(boundClass=HelloAndroidActivity.class,maxSuperClass=FragmentActivity.class) @Test public void shouldUseCustomComputerUsingMockitoAndBoundBox() throws Exception {   final int int_VAR=Number_Constant;   HelloAndroidActivity HelloAndroidActivity_VAR=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   BoundBoxOfHelloAndroidActivity BoundBoxOfHelloAndroidActivity_VAR=new BoundBoxOfHelloAndroidActivity(HelloAndroidActivity_VAR);   Computer Computer_VAR=Mockito.mock(Computer.class);   Mockito.when(Computer_VAR.getResult()).thenReturn(int_VAR);   BoundBoxOfHelloAndroidActivity_VAR.setComputer(Computer_VAR);   BoundBoxOfHelloAndroidActivity_VAR.boundBox_getButton().performClick();   Mockito.verify(Computer_VAR,Mockito.times(Number_Constant)).getResult();   String String_VAR=BoundBoxOfHelloAndroidActivity_VAR.boundBox_getTextView().getText().toString();   assertThat(String_VAR,equalTo(String.valueOf(int_VAR))); } 
public HelloAndroidActivityBoundBoxTest(){   super(HelloAndroidActivity.class); } 
@Override public void setUp() throws Exception {   BoundBoxOfHelloAndroidActivity_VAR=new BoundBoxOfHelloAndroidActivity(getActivity()); } 
@UiThreadTest public void testCompute() throws Exception {   BoundBoxOfHelloAndroidActivity_VAR.boundBox_getButton().performClick();   assertTrue(BoundBoxOfHelloAndroidActivity_VAR.boundBox_getTextView().getText().equals(String_Constant)); } 
public HelloAndroidActivityFestAndroidTest(){   super(HelloAndroidActivity.class); } 
@Override public void setUp() throws Exception {   Solo_VAR=new Solo(getInstrumentation(),getActivity());   TextView_VAR=(TextView)getActivity().findViewById(R.id.textview_hello); } 
public void testCompute() throws Exception {   Solo_VAR.clickOnButton(String_Constant);   org.fest.assertions.api.ANDROID.assertThat(TextView_VAR).containsText(String_Constant); } 
@Override public void tearDown() throws Exception {   Solo_VAR.finishOpenedActivities(); } 
public HelloAndroidActivityRobotiumTest(){   super(HelloAndroidActivity.class); } 
@Override public void setUp() throws Exception {   Solo_VAR=new Solo(getInstrumentation(),getActivity()); } 
public void testCompute() throws Exception {   Solo_VAR.clickOnButton(String_Constant);   Assert.assertTrue(Solo_VAR.searchText(String_Constant)); } 
@Override public void tearDown() throws Exception {   Solo_VAR.finishOpenedActivities(); } 
public HelloAndroidActivitySpoonTest(){   super(HelloAndroidActivity.class); } 
@Override public void setUp() throws Exception {   Solo_VAR=new Solo(getInstrumentation(),getActivity());   TextView_VAR=(TextView)getActivity().findViewById(R.id.textview_hello); } 
public void testCompute() throws Exception {   Spoon.screenshot(getActivity(),String_Constant);   Solo_VAR.clickOnButton(String_Constant);   Spoon.screenshot(getActivity(),String_Constant);   assertEquals(String_Constant,TextView_VAR.getText().toString()); } 
@Override public void tearDown() throws Exception {   Solo_VAR.finishOpenedActivities(); } 
public HelloAndroidActivityTest(){   super(HelloAndroidActivity.class); } 
public void testActivity_not_null(){   assertNotNull(getActivity()); } 
@UiThreadTest public void testActivity_shouldUseCustomComputerUsingEasyMock() throws Exception {   final int int_VAR=Number_Constant;   HelloAndroidActivity HelloAndroidActivity_VAR=getActivity();   Computer Computer_VAR=EasyMock.createMock(DummyComputer.class);   EasyMock.expect(Computer_VAR.getResult()).andReturn(int_VAR);   HelloAndroidActivity_VAR.setComputer(Computer_VAR);   EasyMock.replay(Computer_VAR);   Button Button_VAR=(Button)HelloAndroidActivity_VAR.findViewById(R.id.Button_VAR_main);   Button_VAR.performClick();   EasyMock.verify(Computer_VAR);   TextView TextView_VAR=(TextView)HelloAndroidActivity_VAR.findViewById(R.id.textview_hello);   String String_VAR=TextView_VAR.getText().toString();   assertEquals(String_VAR,String.valueOf(int_VAR)); } 
@UiThreadTest public void testActivity_shouldUseCustomComputerUsingMockito() throws Exception {   final int int_VAR=Number_Constant;   HelloAndroidActivity HelloAndroidActivity_VAR=getActivity();   Computer Computer_VAR=Mockito.mock(Computer.class);   Mockito.when(Computer_VAR.getResult()).thenReturn(int_VAR);   HelloAndroidActivity_VAR.setComputer(Computer_VAR);   Button Button_VAR=(Button)HelloAndroidActivity_VAR.findViewById(R.id.Button_VAR_main);   Button_VAR.performClick();   Mockito.verify(Computer_VAR,Mockito.times(Number_Constant)).getResult();   TextView TextView_VAR=(TextView)HelloAndroidActivity_VAR.findViewById(R.id.textview_hello);   String String_VAR=TextView_VAR.getText().toString();   assertEquals(String_VAR,String.valueOf(int_VAR)); } 
private void takeScreenshot(String String_VAR){   getUiDevice().waitForIdle();   Screenshots.poseForScreenshotNamed(String_VAR + String_Constant + int_VAR+++ String_Constant+ String_VAR); } 
private void setCurrentTestName(String String_VAR){   this.int_VAR=Number_Constant;   this.String_VAR=String_VAR;   takeScreenshot(String_Constant); } 
@Override protected void setUp() throws Exception {   super.setUp();   unlockEmulator(); } 
@Override protected void tearDown() throws Exception {   takeScreenshot(String_Constant);   getUiDevice().pressHome();   super.tearDown(); } 
@LargeTest @FlakyTest(tolerance=int_VAR) public void testSettingsApp() throws UiObjectNotFoundException {   setCurrentTestName(String_Constant);   startAppOnEmulator(String_Constant);   takeScreenshot(String_Constant);   UiObject UiObject_VAR=new UiObject(new UiSelector().packageName(String_Constant));   assertTrue(String_Constant,UiObject_VAR.exists()); } 
@LargeTest @FlakyTest(tolerance=int_VAR) public void testCalculatorApp() throws UiObjectNotFoundException {   setCurrentTestName(String_Constant);   startAppOnEmulator(String_Constant);   takeScreenshot(String_Constant);   UiObject UiObject_VAR;   UiObject_VAR=new UiObject(new UiSelector().text(String_Constant));   UiObject_VAR.waitForExists(long_VAR);   if (!UiObject_VAR.exists()) {     UiObject_VAR=new UiObject(new UiSelector().text(String_Constant));   }   UiObject_VAR.waitForExists(long_VAR);   UiObject_VAR.click();   takeScreenshot(String_Constant);   new UiObject(new UiSelector().text(String_Constant)).click();   takeScreenshot(String_Constant);   new UiObject(new UiSelector().text(String_Constant)).click();   takeScreenshot(String_Constant);   new UiObject(new UiSelector().text(String_Constant)).click();   takeScreenshot(String_Constant);   new UiObject(new UiSelector().text(String_Constant)).click();   takeScreenshot(String_Constant);   assertTrue(new UiObject(new UiSelector().text(String_Constant)).waitForExists(long_VAR)); } 
private void startAppOnEmulator(String String_VAR) throws UiObjectNotFoundException {   getUiDevice().pressHome();   new UiObject(new UiSelector().description(String_Constant));   UiObject UiObject_VAR=new UiObject(new UiSelector().description(String_Constant));   UiObject_VAR.clickAndWaitForNewWindow();   UiObject UiObject_VAR=new UiObject(new UiSelector().text(String_Constant));   UiObject_VAR.click();   UiScrollable UiScrollable_VAR=new UiScrollable(new UiSelector().scrollable(Boolean_Constant));   UiScrollable_VAR.setAsHorizontalList();   UiScrollable_VAR.setMaxSearchSwipes(int_VAR);   UiObject UiObject_VAR=UiScrollable_VAR.getChildByText(new UiSelector().className(android.widget.TextView.class.getName()),String_VAR);   UiObject_VAR.waitForExists(int_VAR);   UiObject_VAR.clickAndWaitForNewWindow(); } 
private void unlockEmulator(){   getUiDevice().pressKeyCode(KeyEvent.KEYCODE_SOFT_LEFT);   getUiDevice().pressKeyCode(KeyEvent.KEYCODE_SOFT_RIGHT);   getUiDevice().pressKeyCode(KeyEvent.KEYCODE_MENU);   getUiDevice().pressKeyCode(KeyEvent.KEYCODE_MENU); } 
