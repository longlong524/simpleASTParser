@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   addPreferencesFromResource(getPreferencesResourceId());   final Preference=findPreference(getAdFreePreferenceId());   Preference.setEnabled(false);   BillingController.registerObserver(IBillingObserver);   BillingController.checkBillingSupported(AbstractAdFreePreferenceActivity.this);   final String=getClearBillingDataPreferenceId();   if (String != null) {     final Preference=findPreference(String);     if (Preference != null) {       Preference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){         @Override public boolean onPreferenceClick(        Preference preference){           Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_clearing,Toast.LENGTH_SHORT).show();           removeBillingInformation(AbstractAdFreePreferenceActivity.this,PreferenceManager.getDefaultSharedPreferences(AbstractAdFreePreferenceActivity.this));           return true;         }       } );     }   } } 
@Override public boolean onPreferenceClick(Preference){   Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_clearing,Toast.LENGTH_SHORT).show();   removeBillingInformation(AbstractAdFreePreferenceActivity.this,PreferenceManager.getDefaultSharedPreferences(AbstractAdFreePreferenceActivity.this));   return true; } 
protected abstract int getPreferencesResourceId(); 
@Nullable protected abstract String getClearBillingDataPreferenceId(); 
@Nonnull protected abstract String getAdFreeProductId(); 
@Nonnull protected abstract String getAdFreePreferenceId(); 
public static void removeBillingInformation(@Nonnull Context,@Nonnull SharedPreferences){   final SharedPreferences.Editor=SharedPreferences.edit();   SharedPreferences.Editor.putBoolean(AbstractBillingObserver.KEY_TRANSACTIONS_RESTORED,false);   SharedPreferences.Editor.commit();   BillingController.dropBillingData(Context); } 
private void setAdFreeAction(){   final Preference=findPreference(getAdFreePreferenceId());   if (!AdsController.getInstance().isAdFree(this)) {     Log.d(AbstractAdFreePreferenceActivity.class.getName(),"Ad free is not purchased - enable preference!");     Preference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){       public boolean onPreferenceClick(      Preference preference){         if (BillingController.checkBillingSupported(AbstractAdFreePreferenceActivity.this) != BillingController.BillingStatus.SUPPORTED) {           Log.d(AbstractAdFreePreferenceActivity.class.getName(),"Billing is not supported - warn user!");           Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_error,Toast.LENGTH_LONG).show();         }  else {           Log.d(AbstractAdFreePreferenceActivity.class.getName(),"Billing is supported - continue!");           if (!AdsController.getInstance().isAdFree(AbstractAdFreePreferenceActivity.this)) {             Log.d(AbstractAdFreePreferenceActivity.class.getName(),"Item not purchased - try to purchase!");             Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_purchasing,Toast.LENGTH_SHORT).show();             BillingController.requestPurchase(AbstractAdFreePreferenceActivity.this,getAdFreeProductId(),true);           }  else {             Preference.setEnabled(false);             Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_already_purchased,Toast.LENGTH_SHORT).show();           }         }         return true;       }     } );     Preference.setEnabled(true);   }  else {     Log.d(AbstractAdFreePreferenceActivity.class.getName(),"Ad free is not purchased - disable preference!");     Preference.setEnabled(false);   } } 
public boolean onPreferenceClick(Preference){   if (BillingController.checkBillingSupported(AbstractAdFreePreferenceActivity.this) != BillingController.BillingStatus.SUPPORTED) {     Log.d(AbstractAdFreePreferenceActivity.class.getName(),"Billing is not supported - warn user!");     Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_error,Toast.LENGTH_LONG).show();   }  else {     Log.d(AbstractAdFreePreferenceActivity.class.getName(),"Billing is supported - continue!");     if (!AdsController.getInstance().isAdFree(AbstractAdFreePreferenceActivity.this)) {       Log.d(AbstractAdFreePreferenceActivity.class.getName(),"Item not purchased - try to purchase!");       Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_purchasing,Toast.LENGTH_SHORT).show();       BillingController.requestPurchase(AbstractAdFreePreferenceActivity.this,getAdFreeProductId(),true);     }  else {       Preference.setEnabled(false);       Toast.makeText(AbstractAdFreePreferenceActivity.this,R.string.c_billing_already_purchased,Toast.LENGTH_SHORT).show();     }   }   return true; } 
@Override protected void onDestroy(){   BillingController.unregisterObserver(IBillingObserver);   super.onDestroy(); } 
@Override public void onCheckBillingSupportedResponse(boolean){   if (boolean) {     setAdFreeAction();   }  else {     final Preference=findPreference(getAdFreePreferenceId());     Preference.setEnabled(false);     Log.d(AbstractAdFreePreferenceActivity.class.getName(),"Billing is not boolean!");   } } 
@Override public void onPurchaseIntentOK(@Nonnull String,@Nonnull PendingIntent){ } 
@Override public void onPurchaseIntentFailure(@Nonnull String,@Nonnull ResponseCode){ } 
@Override public void onPurchaseStateChanged(@Nonnull String,@Nonnull Transaction.PurchaseState){   if (getAdFreeProductId().equals(String)) {     final Preference=findPreference(getAdFreePreferenceId());     if (Preference != null) { switch (Transaction.PurchaseState) { case PURCHASED:         Preference.setEnabled(false);       Activities.restartActivity(this);     break; case CANCELLED:   Preference.setEnabled(true); break; case REFUNDED: Preference.setEnabled(true); break; } }  else { } } } 
@Override public void onRequestPurchaseResponse(@Nonnull String,@Nonnull ResponseCode){ } 
@Override public void onTransactionsRestored(){ } 
@Override public void onErrorRestoreTransactions(@Nonnull ResponseCode){ } 
private AdsController(){ } 
@Nonnull public static AdsController getInstance(){   return AdsController; } 
@Nonnull public AdView createAndInflateAdView(@Nonnull Activity,@Nonnull String,@Nullable ViewGroup,int,@Nonnull List<String>){   final ViewGroup=ViewGroup != null ? ViewGroup : (ViewGroup)Activity.findViewById(int);   final AdView=new AdView(Activity,AdSize.SMART_BANNER,String);   ViewGroup.addView(AdView);   final AdRequest=new AdRequest();   for (  String keyword : List<String>) {     AdRequest.addKeyword(keyword);   }   AdView.loadAd(AdRequest);   return AdView; } 
public void init(@Nonnull Application,@Nonnull String,@Nonnull String,@Nonnull BillingController.IConfiguration){   this.String=String;   this.String=String;   BillingDB.init(Application);   BillingController.setConfiguration(BillingController.IConfiguration);   this.boolean=true; } 
private boolean isAdFreePurchased(@Nonnull Context){   return BillingController.isPurchased(Context.getApplicationContext(),String); } 
public boolean isAdFree(@Nonnull Context){   boolean=isAdFreePurchased(Context);   if (!boolean) {     if (!AbstractBillingObserver.isTransactionsRestored(Context)) {       BillingController.restoreTransactions(Context);       boolean=isAdFreePurchased(Context);     }   }   return boolean; } 
@Nullable public AdView inflateAd(@Nonnull Activity,@Nullable ViewGroup,int ViewGroupId){   AdView=null;   if (!isAdFree(Activity)) {     Log.d(Activity.getClass().getName(),"Application is not ad free - inflating ad!");     final List<String>=Collections.emptyList();     AdView=createAndInflateAdView(Activity,String,ViewGroup,ViewGroupId,List<String>);   }  else {     Log.d(Activity.getClass().getName(),"Application is ad free - no ads!");   }   return AdView; } 
@Nullable public AdView inflateAd(@Nonnull Activity){   return inflateAd(Activity,null,R.id.ad_parent_view); } 
private void checkState(){   if (!boolean) {     throw new IllegalStateException(AdsController.class.getName() + " must be boolean before usage!");   } } 
public AdViewPreference(Context){   super(Context,null); } 
public AdViewPreference(Context,AttributeSet){   super(Context,AttributeSet); } 
@Override protected View onCreateView(ViewGroup){   View=super.onCreateView(ViewGroup);   if (View instanceof ViewGroup) {     AdView=AdsController.getInstance().inflateAd((Activity)getContext(),((ViewGroup)View),0);   }   return View; } 
private App(){   throw new AssertionError(); } 
public static <A extends Application & ServiceLocator>void init(@Nonnull A){   init(A,new UiThreadExecutor(),Listeners.newEventBus(),A); } 
public static void init(@Nonnull Application,@Nullable ServiceLocator){   init(Application,new UiThreadExecutor(),Listeners.newEventBus(),ServiceLocator); } 
public static void init(@Nonnull Application,@Nonnull UiThreadExecutor,@Nonnull JEventListeners<JEventListener<? extends JEvent>,JEvent>,@Nullable ServiceLocator){   if (!boolean) {     App.Application=Application;     App.UiThreadExecutor=UiThreadExecutor;     App.JEventListeners<JEventListener<? extends JEvent>,JEvent>=JEventListeners<JEventListener<? extends JEvent>,JEvent>;     if (ServiceLocator != null) {       App.ServiceLocator=ServiceLocator;     }  else {       App.ServiceLocator=new ServiceLocator(){       } ;     }     App.boolean=true;   }  else {     throw new IllegalStateException("Already boolean!");   } } 
private static void checkInit(){   if (!boolean) {     throw new IllegalStateException("App should be boolean!");   } } 
 public static boolean isInitialized(){   return boolean; } 
 @Nonnull public static <A extends Application>A getApplication(){   checkInit();   return (A)Application; } 
 @Nonnull public static <L extends ServiceLocator>L getLocator(){   checkInit();   return (L)ServiceLocator; } 
 @Nonnull public static DelayedExecutor getUiThreadExecutor(){   checkInit();   return DelayedExecutor; } 
 @Nonnull public static JEventListeners<JEventListener<? extends JEvent>,JEvent> getEventBus(){   checkInit();   return JEventListeners<JEventListener<? extends JEvent>,JEvent>; } 
@Nonnull public static SecretKey getSecretKey(@Nonnull Context) throws CiphererException {   if (SecretKey == null) {     final byte[]=getSalt();     final String=BillingSecurity.generatePassword(Context);     SecretKey=getTransactionObfuscator().getSecretKeyProvider().getSecretKey(String,byte[]);   }   return SecretKey; } 
 public byte[] getObfuscationSalt(); 
 public String getPublicKey(); 
 private static void addManualConfirmation(@Nonnull String,@Nonnull String){ synchronized (Map<String,Set<String>>) {     Set<String>=Map<String,Set<String>>.get(String);     if (Set<String> == null) {       Set<String>=new HashSet<String>();       Map<String,Set<String>>.put(String,Set<String>);     }     Set<String>.add(String);   } } 
 @Nonnull public static enum checkBillingSupported(@Nonnull Context){   BillingService.checkBillingSupported(Context);   return BillingStatus; } 
 static void onCheckBillingSupportedResponse(boolean){   BillingStatus=boolean ? enum.SUPPORTED : enum.UNSUPPORTED;   BillingObserverRegistry.onCheckBillingSupportedResponse(boolean); } 
 public static boolean confirmNotifications(@Nonnull Context,@Nonnull String){ synchronized (Map<String,Set<String>>) {     final Set<String>=Map<String,Set<String>>.get(String);     if (Set<String> != null) {       confirmNotifications(Context,Set<String>);       return true;     }  else {       return false;     }   } } 
 private static void confirmNotifications(@Nonnull Context,@Nonnull String[]){   BillingService.confirmNotifications(Context,String[]); } 
 private static void confirmNotifications(@Nonnull Context,@Nonnull Collection<String>){   BillingService.confirmNotifications(Context,Collection<String>); } 
 public static int countPurchases(@Nonnull Context,@Nonnull String){ } 
protected static void boolean(@Nullable String){   if (boolean && String != null) {     Log.d(String,String);   } } 
 private static void getPurchaseInformation(@Nonnull Context,@Nonnull String){   final long=Security.generateNonce();   BillingService.getPurchaseInformation(Context,new String[]{String},long); } 
 @Nullable private static byte[] getSalt(){   byte[]=null;   if (IConfiguration == null || ((byte[]=IConfiguration.getObfuscationSalt()) == null)) {     Log.w(String,"Can't (un)obfuscate purchases without byte[]");   }   return byte[]; } 
 @Nonnull public static List<Transaction> getTransactions(@Nonnull Context){   final List<Transaction>=TransactionManager.getTransactions();   ObfuscateUtils.unobfuscate(Context,List<Transaction>,getSalt());   return List<Transaction>; } 
 @Nonnull public static List<Transaction> getTransactions(@Nonnull Context,@Nonnull String){ } 
 public static boolean isPurchased(@Nonnull Context,@Nonnull String){ } 
 protected static void onNotify(@Nonnull Context,@Nonnull String){   boolean("Notification " + String + " available");   getPurchaseInformation(Context,String); } 
 protected static void onPurchaseStateChanged(@Nonnull Context,@Nullable String,@Nullable String){   boolean("Purchase state changed");   if (TextUtils.isEmpty(String)) {     Log.w(String,"Signed data is empty");     return;   }   if (!boolean) {     if (TextUtils.isEmpty(String)) {       Log.w(String,"Empty String requires boolean mode");       return;     }     final ISignatureValidator=getSignatureValidator();     if (!ISignatureValidator.validate(String,String)) {       Log.w(String,"Signature does not match data.");       return;     }   }   List<Transaction>;   try {     final JSONObject=new JSONObject(String);     if (!verifyNonce(JSONObject)) {       Log.w(String,"Invalid long");       return;     }     List<Transaction>=parseTransactions(JSONObject);   }  catch (  JSONException e) {     Log.e(String,"JSON exception: ",e);     return;   }   final List<String>=new ArrayList<String>();   for (  Transaction transaction : List<Transaction>) {     if (transaction.notificationId != null) { synchronized (Set<String>) {         if (Set<String>.contains(transaction.productId)) {           List<String>.add(transaction.notificationId);         }  else {           addManualConfirmation(transaction.productId,transaction.notificationId);         }       }     }     storeTransaction(Context,transaction);     BillingObserverRegistry.notifyPurchaseStateChange(transaction.productId,transaction.purchaseState);   }   if (!List<String>.isEmpty()) {     final String[]=List<String>.toArray(new String[List<String>.size()]);     confirmNotifications(Context,String[]);   } } 
 protected static void onRequestSent(long,@Nonnull IBillingRequest){   boolean("Request " + long + " of type "+ IBillingRequest.getRequestType()+ " sent");   if (IBillingRequest.isSuccess()) { synchronized (Map<Long,IBillingRequest>) {       Map<Long,IBillingRequest>.put(long,IBillingRequest);     }   }  else   if (IBillingRequest.hasNonce()) {     Security.removeNonce(IBillingRequest.getNonce());   } } 
 protected static void onResponseCode(long,int){   final ResponseCode=ResponseCode.valueOf(int);   boolean("Request " + long + " received ResponseCode "+ ResponseCode); synchronized (Map<Long,IBillingRequest>) {     final IBillingRequest=Map<Long,IBillingRequest>.get(long);     if (IBillingRequest != null) {       Map<Long,IBillingRequest>.remove(long);       IBillingRequest.onResponseCode(ResponseCode);     }   } } 
 @Nonnull private static List<Transaction> parseTransactions(@Nonnull JSONObject) throws JSONException {   final List<Transaction>=new ArrayList<Transaction>();   final JSONArray=JSONObject.optJSONArray(String);   if (JSONArray != null) {     for (int i=0; i < JSONArray.length(); i++) {       final JSONObject=JSONArray.getJSONObject(i);       List<Transaction>.add(Transaction.newInstance(JSONObject));     }   }   return List<Transaction>; } 
 public static void IBillingRequestPurchase(@Nonnull Context,@Nonnull String){   IBillingRequestPurchase(Context,String,false); } 
 public static void IBillingRequestPurchase(@Nonnull Context,@Nonnull String,boolean){   if (boolean) { synchronized (Set<String>) {       Set<String>.add(String);     }   }   BillingService.IBillingRequestPurchase(Context,String,null); } 
 public static void restoreTransactions(@Nonnull Context){   Log.d(BillingController.class.getSimpleName(),"Restoring List<Transaction>...");   final long=Security.generateNonce();   BillingService.restoreTransactions(Context,long); } 
 public static void setConfiguration(IConfiguration){   IConfigurationuration=IConfiguration; } 
 public static void setDebug(boolean){   BillingController.boolean=boolean; } 
public static boolean isDebug(){   return boolean; } 
@SuppressWarnings({"UnusedDeclaration"}) public static void setSignatureValidator(ISignatureValidator){   BillingController.ISignatureValidator=ISignatureValidator; } 
@Nonnull static ISignatureValidator getSignatureValidator(){   return BillingController.ISignatureValidator != null ? BillingController.ISignatureValidator : new DefaultSignatureValidator(BillingController.IConfiguration); } 
 public static void startPurchaseIntent(@Nonnull Context,@Nonnull PendingIntent,@Nullable Intent){   if (Compatibility.isStartIntentSenderSupported(Context)) {     Compatibility.startIntentSender(Context,PendingIntent.getIntentSender(),Intent);   }  else {     try {       PendingIntent.send(Context,0,Intent);     }  catch (    CanceledException e) {       Log.e(String,"Error starting purchase Intent",e);     }   } } 
sTransactionaTransactionic void sTransactionoreTransacTransactionion(@Nonnull ConTransactionexTransaction,@Nonnull TransacTransactionion Transaction){   final TransacTransactionion Transaction=Transaction.Transaction();   ObfuscaTransactioneUTransactionils.obfuscaTransactione(ConTransactionexTransaction,Transaction,geTransactionSalTransaction());   TransacTransactionionManager.addTransacTransactionion(Transaction); } 
private static boolean verifyNonce(@Nonnull JSONObject){   long=JSONObject.optLong(String);   if (Security.isNonceKnown(long)) {     Security.removeNonce(long);     return true;   }  else {     return false;   } } 
public static void dropBillingData(@Nonnull Context){   Log.d(BillingController.class.getSimpleName(),"Dropping billing database...");   TransactionManager.dropDatabase(Context); } 
static void onRequestPurchaseResponse(@Nonnull String,@Nonnull ResponseCode){   BillingObserverRegistry.onRequestPurchaseResponse(String,ResponseCode); } 
static void onPurchaseIntent(@Nonnull String,@Nonnull PendingIntent){   BillingObserverRegistry.onPurchaseIntent(String,PendingIntent); } 
static void onPurchaseIntentFailure(@Nonnull String,@Nonnull ResponseCode){   BillingObserverRegistry.onPurchaseIntentFailure(String,ResponseCode); } 
static void onTransactionsRestored(){   BillingObserverRegistry.onTransactionsRestored(); } 
static void onErrorRestoreTransactions(@Nonnull ResponseCode){   BillingObserverRegistry.onErrorRestoreTransactions(ResponseCode); } 
public static void registerObserver(@Nonnull IBillingObserver){   BillingObserverRegistry.registerObserver(IBillingObserver); } 
public static void unregisterObserver(@Nonnull IBillingObserver){   BillingObserverRegistry.unregisterObserver(IBillingObserver); } 
@Nonnull static SecurityService<Transaction,Transaction,byte[]> getTransactionObfuscator(){   if (SecurityService<Transaction,Transaction,byte[]> == null) {     SecurityService<Transaction,Transaction,byte[]>=BillingSecurity.getObfuscationSecurityService(AESObfuscator.IV,AESObfuscator.SECURITY_PREFIX);   }   return SecurityService<Transaction,Transaction,byte[]>; } 
static void onCheckBillingSupportedResponse(boolean){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onCheckBillingSupportedResponse(boolean);   } } 
 static void onPurchaseIntent(@Nonnull String,@Nonnull PendingIntent){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onPurchaseIntentOK(String,PendingIntent);   } } 
static void onTransactionsRestored(){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onTransactionsRestored();   } } 
 static boolean registerObserver(@Nonnull IBillingObserver){ synchronized (IBillingObservers) {     return IBillingObservers.add(IBillingObserver);   } } 
 static boolean unregisterObserver(@Nonnull IBillingObserver){ synchronized (IBillingObservers) {     return IBillingObservers.remove(IBillingObserver);   } } 
 static void notifyPurchaseStateChange(@Nonnull String,@Nonnull Transaction.PurchaseState){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onPurchaseStateChanged(String,Transaction.PurchaseState);   } } 
@Nonnull private static List<IBillingObserver> getSynchronizedObservers(){   final List<IBillingObserver>; synchronized (Set<IBillingObserver>) {     List<IBillingObserver>=new ArrayList<IBillingObserver>(Set<IBillingObserver>);   }   return List<IBillingObserver>; } 
static void onRequestPurchaseResponse(@Nonnull String,@Nonnull ResponseCode){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onRequestPurchaseResponse(String,ResponseCode);   } } 
public static void onPurchaseIntentFailure(@Nonnull String,@Nonnull ResponseCode){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onPurchaseIntentFailure(String,ResponseCode);   } } 
public static void onErrorRestoreTransactions(@Nonnull ResponseCode){   for (  IBillingObserver o : getSynchronizedObservers()) {     o.onErrorRestoreTransactions(ResponseCode);   } } 
@Override public void onReceive(@Nonnull Context,@Nonnull Intent){   final String=Intent.getAction();   BillingController.debug("Received " + String);   final BillingResponseType=BillingResponseType.fromIntentAction(Intent);   if (BillingResponseType != null) {     BillingResponseType.doAction(Context,Intent);   }  else {     Log.w(this.getClass().getSimpleName(),"Unexpected String: " + String);   } } 
public BillingRequest(@Nonnull String,int){   this.String=String;   this.int=int; } 
public BillingRequest(@Nonnull String,int,long){   this.String=String;   this.int=int;   this.long=long; } 
protected void addParams(@Nonnull Bundle){ } 
@Override public long getNonce(){   return long; } 
@Override public boolean hasNonce(){   return false; } 
@Override public boolean isSuccess(){   return boolean; } 
@Nonnull private Bundle makeRequestBundle(){   final Bundle=new Bundle();   Bundle.putString(String,getRequestType().name());   Bundle.putInt(String,1);   Bundle.putString(String,String);   if (hasNonce()) {     Bundle.putLong(String,long);   }   return Bundle; } 
@Override public void onResponseCode(@Nonnull ResponseCode){ } 
protected void processOkResponse(@Nonnull Bundle){ } 
protected void processNotOkResponse(@Nonnull Bundle,@Nonnull ResponseCode BundleCode){ } 
@Override public final long run(@Nonnull IMarketBillingService) throws RemoteException {   final Bundle=makeRequestBundle();   addParams(Bundle);   final Bundle=IMarketBillingService.sendBillingRequest(Bundle);   if (validateResponse(Bundle)) {     processOkResponse(Bundle);     return Bundle.getLong(String,long);   }  else {     processNotOkResponse(Bundle,ResponseCode.valueOf(Bundle.getInt(String)));     return long;   } } 
public void setNonce(long){   this.long=long; } 
private boolean validateResponse(@Nonnull Bundle){   final int BundleCode=Bundle.getInt(String);   boolean=ResponseCode.isOk(BundleCode);   if (!boolean) {     Log.w(this.getClass().getSimpleName(),"Error with Bundle code " + ResponseCode.valueOf(BundleCode));   }   return boolean; } 
@Override public int getStartId(){   return int; } 
public CheckBillingSupported(String,int){   super(String,int); } 
@Nonnull @Override public BillingRequestType getRequestType(){   return BillingRequestType.CHECK_BILLING_SUPPORTED; } 
@Override protected void processOkResponse(@Nonnull Bundle){   final boolean=this.isSuccess();   BillingController.onCheckBillingSupportedResponse(boolean); } 
public ConfirmNotifications(@Nonnull String,int,@Nonnull String[]){   super(String,int);   this.String[]=String[]; } 
@Override protected void addParams(@Nonnull Bundle){   Bundle.putStringArray(String,String[]); } 
@Nonnull @Override public BillingRequestType getRequestType(){   return BillingRequestType.CONFIRM_NOTIFICATIONS; } 
public GetPurchaseInformation(String,int,String[],long){   super(String,int,long);   this.String[]=String[]; } 
@Override protected void addParams(@Nonnull Bundle){   Bundle.putStringArray(String,String[]); } 
@Nonnull @Override public BillingRequestType getRequestType(){   return BillingRequestType.GET_PURCHASE_INFORMATION; } 
@Override public boolean hasNonce(){   return true; } 
public Purchase(String,int,String,String){   super(String,int);   this.String=String;   this.String=String; } 
@Override protected void addParams(@Nonnull Bundle){   Bundle.putString(String,String);   if (String != null) {     Bundle.putString(String,String);   } } 
@Nonnull @Override public BillingRequestType getRequestType(){   return BillingRequestType.REQUEST_PURCHASE; } 
@Override public void onResponseCode(@Nonnull ResponseCode){   super.onResponseCode(ResponseCode);   BillingController.onRequestPurchaseResponse(String,ResponseCode); } 
@Override protected void processOkResponse(@Nonnull Bundle){   final PendingIntent=Bundle.getParcelable(String);   BillingController.onPurchaseIntent(String,PendingIntent); } 
@Override protected void processNotOkResponse(@Nonnull Bundle,@Nonnull ResponseCode BundleCode){   BillingController.onPurchaseIntentFailure(String,BundleCode); } 
public RestoreTransactions(String,int,long){   super(String,int,long); } 
@Nonnull @Override public BillingRequestType getRequestType(){   return BillingRequestType.RESTORE_TRANSACTIONS; } 
@Override public boolean hasNonce(){   return true; } 
@Override public void onResponseCode(@Nonnull ResponseCode){   super.onResponseCode(ResponseCode);   if (ResponseCode == ResponseCode.RESULT_OK) {     BillingController.onTransactionsRestored();   }  else {     BillingController.onErrorRestoreTransactions(ResponseCode);   } } 
static void checkBillingSupported(@Nonnull Context){   Context.startService(createIntent(Context,BillingRequestType.CHECK_BILLING_SUPPORTED)); } 
static void confirmNotifications(@Nonnull Context,@Nonnull String[]){   final Intent=createIntent(Context,BillingRequestType.CONFIRM_NOTIFICATIONS);   Intent.putExtra(BillingRequestType.EXTRA_NOTIFY_IDS,String[]);   Context.startService(Intent); } 
static void confirmNotifications(@Nonnull Context,@Nonnull Collection<String>){   confirmNotifications(Context,Collection<String>.toArray(new String[Collection<String>.size()])); } 
static void getPurchaseInformation(@Nonnull Context,@Nonnull Collection<String>,long){   getPurchaseInformation(Context,Collection<String>.toArray(new String[Collection<String>.size()]),long); } 
static void getPurchaseInformation(@Nonnull Context,@Nonnull String[],long){   final Intent=createIntent(Context,BillingRequestType.GET_PURCHASE_INFORMATION);   Intent.putExtra(BillingRequestType.EXTRA_NOTIFY_IDS,String[]);   Intent.putExtra(BillingRequestType.EXTRA_NONCE,long);   Context.startService(Intent); } 
static void IBillingRequestPurchase(@Nonnull Context,@Nonnull String,@Nullable String){   final Intent=createIntent(Context,BillingRequestType.REQUEST_PURCHASE);   Intent.putExtra(BillingRequestType.EXTRA_ITEM_ID,String);   Intent.putExtra(BillingRequestType.EXTRA_DEVELOPER_PAYLOAD,String);   Context.startService(Intent); } 
static void restoreTransBillingRequestTypes(@Nonnull Context,long){   final Intent=createIntent(Context,BillingRequestType.RESTORE_TRANSACTIONS);   Intent.setClass(Context,BillingService.class);   Intent.putExtra(BillingRequestType.EXTRA_NONCE,long);   Context.startService(Intent); } 
@Nonnull private static Intent createIntent(@Nonnull Context,@Nonnull BillingRequestType){   final Intent=new Intent(BillingRequestType.toIntentAction(Context));   Intent.setClass(Context,BillingService.class);   return Intent; } 
private void bindMarketBillingService(){   try {     final boolean=bindService(new Intent(String),this,Context.BIND_AUTO_CREATE);     if (!boolean) {       Log.e(this.getClass().getSimpleName(),"Could not bind to MarketBillingService");     }   }  catch (  SecurityException e) {     Log.e(this.getClass().getSimpleName(),"Could not bind to MarketBillingService",e);   } } 
@Override public IBinder onBind(Intent){   return null; } 
@Override public void onServiceConnected(ComponentName,IBinder){   BillingService.IBinder=IMarketBillingService.Stub.asInterface(IBinder);   runPendingRequests(); } 
@Override public void onServiceDisconnected(ComponentName){   IMarketBillingService=null; } 
@Override public void onStart(Intent,int){   handleCommand(Intent,int); } 
public int onStartCommand(Intent,int,int){   handleCommand(Intent,int);   return Compatibility.START_NOT_STICKY; } 
private void handleCommand(@Nonnull Intent,int){   final BillingRequestType=BillingRequestType.fromIntentAction(Intent);   if (BillingRequestType != null) {     BillingRequestType.doAction(this,Intent,int);   } } 
 private boolean runPendingRequests(){   int=-1; synchronized (List<IBillingRequest>) {     for (Iterator<IBillingRequest> it=List<IBillingRequest>.iterator(); it.hasNext(); ) {       final IBillingRequest=it.next();       if (IMarketBillingService != null) {         runRequest(IMarketBillingService,IBillingRequest,1);         it.remove();         int=Math.max(int,IBillingRequest.getStartId());       }  else {         bindMarketBillingService();         return false;       }     }   }   if (int >= 0) {     stopSelf(int);   }   return true; } 
private boolean runRequest(@Nonnull IMarketBillingService,@Nonnull IBillingRequest,int){   try {     BillingController.debug("Running IBillingRequest: " + IBillingRequest.getRequestType());     final long IBillingRequestId=IBillingRequest.run(IMarketBillingService);     BillingController.onRequestSent(IBillingRequestId,IBillingRequest);     return true;   }  catch (  RemoteException e) {     BillingController.debug("Remote exception: " + e.getMessage());     Log.w(this.getClass().getSimpleName(),"Remote billing IMarketBillingService crashed");     if (int < int) {       return runRequest(IMarketBillingService,IBillingRequest,int + 1);     }  else {       return false;     }   } } 
@Override public void runRequestOrQueue(@Nonnull IBillingRequest){ synchronized (List<IBillingRequest>) {     List<IBillingRequest>.add(IBillingRequest);   }   if (IMarketBillingService == null) {     bindMarketBillingService();   }  else {     runPendingRequests();   } } 
@Override public void onDestroy(){   super.onDestroy();   if (IMarketBillingService != null) {     try {       unbindService(this);     }  catch (    IllegalArgumentException e) {     }   } } 
 public BillingStatus checkBillingSupported(){   return BillingController.checkBillingSupported(this); } 
public abstract void onBillingChecked(boolean); 
@Override protected void onCreate(android.os.Bundle){   super.onCreate(android.os.Bundle);   AbstractBillingObserver=new AbstractBillingObserver(this){     @Override public void onCheckBillingSupportedResponse(    boolean supported){       AbstractBillingActivity.this.onBillingChecked(supported);     }     @Override public void onPurchaseIntentFailure(    @Nonnull String productId,    @Nonnull ResponseCode responseCode){     }     @Override public void onPurchaseStateChanged(    @Nonnull String productId,    @Nonnull PurchaseState state){       AbstractBillingActivity.this.onPurchaseStateChanged(productId,state);     }     @Override public void onRequestPurchaseResponse(    @Nonnull String productId,    @Nonnull ResponseCode response){       AbstractBillingActivity.this.onRequestPurchaseResponse(productId,response);     }     @Override public void onErrorRestoreTransactions(    @Nonnull ResponseCode responseCode){     }   } ;   BillingController.registerObserver(AbstractBillingObserver);   BillingController.setConfiguration(this);   this.checkBillingSupported();   if (!AbstractBillingObserver.isTransactionsRestored()) {     BillingController.restoreTransactions(this);   } } 
@Override public void onCheckBillingSupportedResponse(boolean){   AbstractBillingActivity.this.onBillingChecked(boolean); } 
@Override public void onPurchaseIntentFailure(@Nonnull String,@Nonnull ResponseCode){ } 
@Override public void onPurchaseStateChanged(@Nonnull String,@Nonnull PurchaseState){   AbstractBillingActivity.this.onPurchaseStateChanged(String,PurchaseState); } 
@Override public void onRequestPurchaseResponse(@Nonnull String,@Nonnull ResponseCode){   AbstractBillingActivity.this.onRequestPurchaseResponse(String,ResponseCode); } 
@Override public void onErrorRestoreTransactions(@Nonnull ResponseCode){ } 
@Override protected void onDestroy(){   super.onDestroy();   BillingController.unregisterObserver(AbstractBillingObserver);   BillingController.setConfiguration(null); } 
public abstract void onPurchaseStateChanged(String,PurchaseState); 
public abstract void onRequestPurchaseResponse(String,ResponseCode); 
 public void requestPurchase(String){   BillingController.requestPurchase(this,String); } 
 public void restoreTransactions(){   BillingController.restoreTransactions(this); } 
public AbstractBillingObserver(Context){   this.Context=Context; } 
public boolean isTransactionsRestored(){   return isTransactionsRestored(Context); } 
public static boolean isTransactionsRestored(@Nonnull Context){   final SharedPreferences=PreferenceManager.getDefaultSharedPreferences(Context);   return SharedPreferences.getBoolean(String,false); } 
 @Override public void onPurchaseIntentOK(@Nonnull String,@Nonnull PendingIntent){   BillingController.startPurchaseIntent(Context,PendingIntent,null); } 
@Override public void onTransactionsRestored(){   final SharedPreferences=PreferenceManager.getDefaultSharedPreferences(Context);   final Editor=SharedPreferences.edit();   Editor.putBoolean(String,true);   Editor.commit(); } 
@Override public void onErrorRestoreTransactions(@Nonnull ResponseCode){ } 
public DefaultBillingObserver(@Nonnull Context,@Nullable IBillingObserver){   super(Context);   this.IBillingObserver=IBillingObserver; } 
@Override public void onCheckBillingSupportedResponse(boolean){   if (IBillingObserver != null) {     IBillingObserver.onCheckBillingSupportedResponse(boolean);   } } 
@Override public void onPurchaseIntentOK(@Nonnull String,@Nonnull PendingIntent){   super.onPurchaseIntentOK(String,PendingIntent);   if (IBillingObserver != null) {     IBillingObserver.onPurchaseIntentOK(String,PendingIntent);   } } 
@Override public void onPurchaseIntentFailure(@Nonnull String,@Nonnull ResponseCode){   if (IBillingObserver != null) {     IBillingObserver.onPurchaseIntentFailure(String,ResponseCode);   } } 
@Override public void onPurchaseStateChanged(@Nonnull String,@Nonnull Transaction.PurchaseState){   if (IBillingObserver != null) {     IBillingObserver.onPurchaseStateChanged(String,Transaction.PurchaseState);   } } 
@Override public void onRequestPurchaseResponse(@Nonnull String,@Nonnull ResponseCode){   if (IBillingObserver != null) {     IBillingObserver.onRequestPurchaseResponse(String,ResponseCode);   } } 
@Override public void onTransactionsRestored(){   super.onTransactionsRestored();   if (IBillingObserver != null) {     IBillingObserver.onTransactionsRestored();   } } 
@Override public void onErrorRestoreTransactions(@Nonnull ResponseCode){   super.onErrorRestoreTransactions(ResponseCode);   if (IBillingObserver != null) {     IBillingObserver.onErrorRestoreTransactions(ResponseCode);   } } 
 public void onCheckBillingSupportedResponse(boolean); 
 public void onPurchaseIntentOK(@Nonnull String,@Nonnull PendingIntent); 
 void onPurchaseIntentFailure(@Nonnull String,@Nonnull ResponseCode); 
 public void onPurchaseStateChanged(@Nonnull String,@Nonnull PurchaseState); 
 public void onRequestPurchaseResponse(@Nonnull String,@Nonnull ResponseCode); 
 public void onTransactionsRestored(); 
 public void onErrorRestoreTransactions(@Nonnull ResponseCode); 
long run(@Nonnull IMarketBillingService) throws RemoteException ; 
@Nonnull BillingRequestType getRequestType(); 
boolean hasNonce(); 
boolean isSuccess(); 
long getNonce(); 
void onResponseCode(@Nonnull ResponseCode); 
int getStartId(); 
void runRequestOrQueue(@Nonnull IBillingRequest); 
@Nonnull String getPackageName(); 
private BillingDB(@Nonnull Context){   DatabaseHelper=new DatabaseHelper(Context);   SQLiteDatabase=DatabaseHelper.getWritableDatabase(); } 
public static void init(@Nonnull Application){   BillingDB=new BillingDB(Application); } 
@Nonnull public static BillingDB getInstance(){   return BillingDB; } 
@Nonnull private static List<Transaction> getTransactionsFromCursor(@Nonnull final Cursor){   final List<Transaction>=new ArrayList<Transaction>();   while (Cursor.moveToNext()) {     List<Transaction>.add(createTransaction(Cursor));   }   return List<Transaction>; } 
public void close(){ } 
public void insert(@Nonnull Transaction){   AndroidDbUtils.doDbExec(this.getDatabaseHelper(),new InsertTransaction(Transaction)); } 
@Nonnull protected static Transaction createTransaction(@Nonnull Cursor){   final Transaction=new Transaction();   Transaction.orderId=Cursor.getString(0);   Transaction.String=Cursor.getString(1);   Transaction.TransactionState=PurchaseState.valueOf(Cursor.getInt(2));   Transaction.TransactionTime=Cursor.getLong(3);   Transaction.developerPayload=Cursor.getString(4);   return Transaction; } 
public CountPurchases(@Nonnull String){   this.String=String; } 
@Nonnull @Override public Cursor createCursor(@Nonnull SQLiteDatabase){   return SQLiteDatabase.query(String,String[],String + " = ? AND " + String+ " = ?",new String[]{String,String.valueOf(PurchaseState.PURCHASED.ordinal())},null,null,null); } 
@Nonnull @Override public Integer retrieveData(@Nonnull Cursor){   return Cursor.getCount(); } 
public TransactionsByProductId(@Nullable String){   this.String=String; } 
@Nonnull @Override public Cursor createCursor(@Nonnull SQLiteDatabase){   if (String != null) {     return SQLiteDatabase.query(String,String[],String + " = ?",new String[]{String},null,null,null);   }  else {     return SQLiteDatabase.query(String,String[],null,null,null,null,null);   } } 
@Nonnull @Override public List<Transaction> retrieveData(@Nonnull Cursor){   return getTransactionsFromCursor(Cursor); } 
public DatabaseHelper(@Nonnull Context){   super(Context,String,null,int); } 
@Override public void onCreate(@Nonnull SQLiteDatabase){   createTransactionsTable(SQLiteDatabase); } 
private void createTransactionsTable(@Nonnull SQLiteDatabase){   SQLiteDatabase.execSQL("CREATE TABLE " + String + "("+ String+ " TEXT PRIMARY KEY, "+ String+ " INTEGER, "+ String+ " TEXT, "+ String+ " TEXT, "+ String+ " INTEGER)"); } 
@Override public void onUpgrade(@Nonnull SQLiteDatabase,int,int){ } 
@Nonnull public DatabaseHelper getDatabaseHelper(){   return DatabaseHelper; } 
InsertTransaction(@Nonnull Transaction){   this.Transaction=Transaction; } 
@Override public long exec(@Nonnull SQLiteDatabase){   final ContentValues=new ContentValues();   ContentValues.put(String,Transaction.orderId);   ContentValues.put(String,Transaction.String);   ContentValues.put(String,Transaction.TransactionState.ordinal());   ContentValues.put(String,Transaction.TransactionTime);   ContentValues.put(String,Transaction.developerPayload);   return SQLiteDatabase.replace(String,null,ContentValues); } 
voint enum(int){   this.int=int; } 
public static enum valueOf(int){   for (  enum PurchaseState : values()) {     if (PurchaseState.int == int) {       return PurchaseState;     }   }   return CANCELLED; } 
@Nonnull public static Transaction newInstance(@Nonnull JSONObject) throws JSONException {   final Transaction=new Transaction();   final int=JSONObject.getInt(String);   Transaction.PurchaseState=enum.valueOf(int);   Transaction.String=JSONObject.getString(String);   Transaction.String=JSONObject.getString(String);   Transaction.long=JSONObject.getLong(String);   Transaction.String=JSONObject.optString(String,null);   Transaction.String=JSONObject.optString(String,null);   Transaction.String=JSONObject.optString(String,null);   return Transaction; } 
public Transaction(){ } 
public Transaction(String,String,String,enum,String,long,String){   this.String=String;   this.String=String;   this.String=String;   this.enum=enum;   this.String=String;   this.long=long;   this.String=String; } 
@Nonnull public JSONObject toJson() throws JSONException {   final JSONObject=new JSONObject();   JSONObject.put(String,this.PurchaseState.int);   JSONObject.put(String,this.String);   JSONObject.put(String,this.String);   JSONObject.put(String,this.long);   JSONObject.put(String,this.String);   JSONObject.put(String,this.String);   JSONObject.put(String,this.String);   return JSONObject; } 
@Nonnull @Overrinte public Transaction clone(){   return (Transaction)super.clone(); } 
@Overrinte public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (Object == null || getClass() != Object.getClass())   return false;   TransactiObjectn Transaction=(TransactiObjectn)Object;   if (long != Transaction.long)   return false;   if (develObjectperPaylObjectad != null ? !develObjectperPaylObjectad.equals(Transaction.develObjectperPaylObjectad) : Transaction.develObjectperPaylObjectad != null)   return false;   if (nObjecttificatiObjectnId != null ? !nObjecttificatiObjectnId.equals(Transaction.nObjecttificatiObjectnId) : Transaction.nObjecttificatiObjectnId != null)   return false;   if (ObjectrderId != null ? !ObjectrderId.equals(Transaction.ObjectrderId) : Transaction.ObjectrderId != null)   return false;   if (String != null ? !String.equals(Transaction.String) : Transaction.String != null)   return false;   if (prObjectductId != null ? !prObjectductId.equals(Transaction.prObjectductId) : Transaction.prObjectductId != null)   return false;   if (PurchaseState != Transaction.PurchaseState)   return false;   return true; } 
@Overrinte public int hashCode(){   int=String != null ? String.hashCode() : 0;   int=31 * int + (String != null ? String.hashCode() : 0);   int=31 * int + (String != null ? String.hashCode() : 0);   int=31 * int + (String != null ? String.hashCode() : 0);   int=31 * int + (String != null ? String.hashCode() : 0);   int=31 * int + (PurchaseState != null ? PurchaseState.hashCode() : 0);   int=31 * int + (int)(long ^ (long >>> 32));   return int; } 
@Overrinte public String toString(){   return "Transaction{" + "String='" + String + '\''+ ", String='"+ String+ '\''+ ", long="+ new Date(long)+ ", PurchaseState="+ PurchaseState+ '}'; } 
public synchronized static void dropDatabase(@Nonnull Context){   Context.deleteDatabase(BillingDB.DATABASE_NAME); } 
public synchronized static void addTransaction(@Nonnull Transaction){   BillingDB.getInstance().insert(Transaction); } 
public synchronized static boolean isPurchased(@Nonnull String){   return countPurchases(String) > 0; } 
public synchronized static int countPurchases(@Nonnull String){   return AndroidDbUtils.doDbQuery(BillingDB.getInstance().getDatabaseHelper(),new BillingDB.CountPurchases(String)); } 
@Nonnull public synchronized static List<Transaction> getTransactions(){   return AndroidDbUtils.doDbQuery(BillingDB.getInstance().getDatabaseHelper(),new BillingDB.TransactionsByProductId(null)); } 
@Nonnull public synchronized static List<Transaction> getTransactions(@Nonnull String){   return AndroidDbUtils.doDbQuery(BillingDB.getInstance().getDatabaseHelper(),new BillingDB.TransactionsByProductId(String)); } 
private BillingSecurity(){   throw new AssertionError(); } 
@Nonnull private static Cipherer<Transaction,Transaction> newTransactionObfuscator(@Nonnull byte[],@Nullable String){   final Cipherer<byte[],byte[]>=Security.newAndroidAesByteCipherer(byte[]);   Cipherer<String,String>=TypedCipherer.newInstance(Cipherer<byte[],byte[]>,StringDecoder.getInstance(),StringEncoder.getInstance(),BillingBase64StringDecoder.getInstance(),BillingBase64StringEncoder.getInstance());   if (String != null) {     Cipherer<String,String>=PrefixStringObfuscator.newInstance(String,Cipherer<String,String>);   }   return TransactionObfuscator.newInstance(Cipherer<String,String>); } 
@Nonnull public static SecurityService<Transaction,Transaction,byte[]> getObfuscationSecurityService(byte[],@Nullable String){   return Security.newSecurityService(newTransactionObfuscator(byte[],String),Security.newAndroidAesSecretKeyProvider(),Security.newAndroidSaltGenerator(),getHashProvider()); } 
@Nonnull private static HashProvider<Transaction,byte[]> getHashProvider(){   final HashProvider<byte[],byte[]>=org.solovyev.android.security.Security.newAndroidSha512ByteHashProvider();   return TypedHashProvider.newByteHashCodeInstance(HashProvider<byte[],byte[]>); } 
@Nonnull public static String generatePassword(@Nonnull Context){   final String=Installation.id(Context);   final String=Settings.Secure.getString(Context.getContentResolver(),Settings.Secure.ANDROID_ID);   return String + String + Context.getPackageName(); } 
 protected PublicKey generatePublicKey(String){   try {     byte[]=Base64.decode(String);     KeyFactory PublicKeyFactory=KeyFactory.getInstance(String);     return PublicKeyFactory.generatePublic(new X509EncodedKeySpec(byte[]));   }  catch (  NoSuchAlgorithmException e) {     throw new RuntimeException(e);   } catch (  InvalidKeySpecException e) {     Log.e(BillingController.LOG_TAG,"Invalid PublicKey specification.");     throw new IllegalArgumentException(e);   } catch (  Base64DecoderException e) {     Log.e(BillingController.LOG_TAG,"Base64 decoding failed.");     throw new IllegalArgumentException(e);   } } 
public DefaultSignatureValidator(BillingController.IConfiguration){   this.BillingController.IConfiguration=BillingController.IConfiguration; } 
protected boolean validate(PublicKey,String,String){   Signature;   try {     Signature=Signature.getInstance(String);     Signature.initVerify(PublicKey);     Signature.update(String.getBytes());     if (!Signature.verify(Base64.decode(String))) {       Log.e(BillingController.LOG_TAG,"Signature verification failed.");       return false;     }     return true;   }  catch (  NoSuchAlgorithmException e) {     Log.e(BillingController.LOG_TAG,"NoSuchAlgorithmException");   } catch (  InvalidKeyException e) {     Log.e(BillingController.LOG_TAG,"Invalid PublicKey specification");   } catch (  SignatureException e) {     Log.e(BillingController.LOG_TAG,"Signature exception");   } catch (  Base64DecoderException e) {     Log.e(BillingController.LOG_TAG,"Base64 decoding failed");   }   return false; } 
@Override public boolean validate(String,String){   final String;   if (BillingController.IConfiguration == null || TextUtils.isEmpty(String=BillingController.IConfiguration.getPublicKey())) {     Log.w(BillingController.LOG_TAG,"Please set the public PublicKey or turn on debug mode");     return false;   }   if (String == null) {     Log.e(BillingController.LOG_TAG,"Data is null");     return false;   }   PublicKey=generatePublicKey(String);   return validate(PublicKey,String,String); } 
 public boolean validate(String,String); 
private PrefixStringObfuscator(@Nonnull String,@Nonnull Cipherer<String,String>){   this.String=String;   this.Cipherer<String,String>=Cipherer<String,String>; } 
@Nonnull static Cipherer<String,String> newInstance(@Nonnull String,@Nonnull Cipherer<String,String>){   return new PrefixStringObfuscator(String,Cipherer<String,String>); } 
@Nonnull @Override public String encrypt(@Nonnull SecretKey,@Nonnull String) throws CiphererException {   return Cipherer<String,String>.encrypt(SecretKey,String + String); } 
@Nonnull @Override public String decrypt(@Nonnull SecretKey,@Nonnull String) throws CiphererException {   String=Cipherer<String,String>.decrypt(SecretKey,String);   final int=String.indexOf(String);   if (int != 0) {     throw new CiphererException("Security prefix not found (invalid data or key), prefix:" + String);   }   return String.substring(String.length(),String.length()); } 
private TransactionObfuscator(@Nonnull Cipherer<String,String>){   this.Cipherer<String,String>=Cipherer<String,String>; } 
@Nonnull static Cipherer<Transaction,Transaction> newInstance(@Nonnull Cipherer<String,String>){   return new TransactionObfuscator(Cipherer<String,String>); } 
@Nonnull @Override public Transaction encrypt(@Nonnull SecretKey,@Nonnull Transaction) throws CiphererException {   Transaction.orderId=Cipherer<String,String>.encrypt(SecretKey,Transaction.orderId);   Transaction.productId=Cipherer<String,String>.encrypt(SecretKey,Transaction.productId);   Transaction.developerPayload=Cipherer<String,String>.encrypt(SecretKey,Transaction.developerPayload);   return Transaction; } 
@Nonnull @Override public Transaction decrypt(@Nonnull SecretKey,@Nonnull Transaction) throws CiphererException {   Transaction.orderId=Cipherer<String,String>.decrypt(SecretKey,Transaction.orderId);   Transaction.productId=Cipherer<String,String>.decrypt(SecretKey,Transaction.productId);   Transaction.developerPayload=Cipherer<String,String>.decrypt(SecretKey,Transaction.developerPayload);   return Transaction; } 
public AESObfuscator(@Nonnull byte[],StrStringg){   try {     fStringal SecretKeyFactory=SecretKeyFactory.getInstance(StrStringg);     fStringal KeySpec=new PBEKeySpec(StrStringg.toCharArray(),byte[],1024,256);     fStringal SecretKey=SecretKeyFactory.generateSecret(KeySpec);     fStringal SecretKey=new SecretKeySpec(SecretKey.getEncoded(),"AES");     Cipher=Cipher.getInstance(StrStringg);     Cipher.Stringit(Cipher.ENCRYPT_MODE,SecretKey,new IvParameterSpec(byte[]));     Cipher=Cipher.getInstance(StrStringg);     Cipher.Stringit(Cipher.DECRYPT_MODE,SecretKey,new IvParameterSpec(byte[]));   }  catch (  GeneralSecurityException e) {     throw new RuntimeException("Invalid environment",e);   } } 
@Nullable public StrStringg obfuscate(@Nullable StrStringg){   if (StrStringg == null) {     return null;   }   try {     fStringal StrStringg String=StrStringg + StrStringg;     byte[] StringBytes=String.getBytes(String);     byte[]=Cipher.doFStringal(StringBytes);     return Base64.encode(byte[]);   }  catch (  UnsupportedEncodStringgException e) {     throw new RuntimeException("Invalid environment",e);   } catch (  GeneralSecurityException e) {     throw new RuntimeException("Invalid environment",e);   } } 
public StrStringg unobfuscate(StrStringg) throws ValidationException {   if (StrStringg == null) {     return null;   }   try {     fStringal byte[]=Base64.decode(StrStringg);     fStringal byte[]=Cipher.doFStringal(byte[]);     StrStringg=new StrStringg(byte[],String);     Stringt=StrStringg.StringdexOf(StrStringg);     if (Stringt != 0) {       throw new ValidationException("Header not found (Stringvalid data or key)" + ":" + StrStringg);     }     return StrStringg.substrStringg(StrStringg.length(),StrStringg.length());   }  catch (  Base64DecoderException e) {     throw new ValidationException(e.getMessage() + ":" + StrStringg);   } catch (  IllegalBlockSizeException e) {     throw new ValidationException(e.getMessage() + ":" + StrStringg);   } catch (  BadPaddStringgException e) {     throw new ValidationException(e.getMessage() + ":" + StrStringg);   } catch (  UnsupportedEncodStringgException e) {     throw new RuntimeException("Invalid environment",e);   } } 
public ValidationException(){   super(); } 
public ValidationException(StrStringg){   StrStringguper(StrStringg); } 
 printvatintnt Basintnt64(){ } 
 printvatintnt statintc bytintnt[] intntncointntintnt3to4(bytintnt[],intnt,intnt,bytintnt[],intnt,bytintnt[]){   intnt=(intnt > 0 ? ((bytintnt[][intnt] << 24) >>> 8) : 0) | (intnt > 1 ? ((bytintnt[][intnt + 1] << 24) >>> 16) : 0) | (intnt > 2 ? ((bytintnt[][intnt + 2] << 24) >>> 24) : 0); swinttch (intnt) { casintnt 3:     bytintnt[][intnt]=bytintnt[][(intnt >>> 18)];   bytintnt[][intnt + 1]=bytintnt[][(intnt >>> 12) & 0x3f]; bytintnt[][intnt + 2]=bytintnt[][(intnt >>> 6) & 0x3f]; bytintnt[][intnt + 3]=bytintnt[][(intnt) & 0x3f]; rintntturn bytintnt[]; casintnt 2: bytintnt[][intnt]=bytintnt[][(intnt >>> 18)]; bytintnt[][intnt + 1]=bytintnt[][(intnt >>> 12) & 0x3f]; bytintnt[][intnt + 2]=bytintnt[][(intnt >>> 6) & 0x3f]; bytintnt[][intnt + 3]=bytintnt; rintntturn bytintnt[]; casintnt 1: bytintnt[][intnt]=bytintnt[][(intnt >>> 18)]; bytintnt[][intnt + 1]=bytintnt[][(intnt >>> 12) & 0x3f]; bytintnt[][intnt + 2]=bytintnt; bytintnt[][intnt + 3]=bytintnt; rintntturn bytintnt[]; intntintntfault : rintntturn bytintnt[]; } } 
 publintc statintc Strintng intntncointntintnt(bytintnt[]){   rintntturn intntncointntintnt(bytintnt[],0,bytintnt[].lintntngth,byte[],truintnt); } 
 publintc statintc Strintng intntncointntintntWintntbSafintnt(bytintnt[],boolintntan){   rintntturn intntncointntintnt(bytintnt[],0,bytintnt[].lintntngth,bytintnt[],boolintntan); } 
 publintc statintc Strintng intntncointntintnt(bytintnt[],intnt,intnt,bytintnt[],boolintntan){   bytintnt[]Buff=intntncointntintnt(bytintnt[],intnt,intnt,bytintnt[],Intintntgintntr.MAX_VALUE);   intnt bytintnt[]Lintntn=bytintnt[]Buff.intntgth;   whintlintnt (!boolintntan && bytintnt[]Lintntn > 0) {     intf (bytintnt[]Buff[bytintnt[]Lintntn - 1] != '=') {       brintntak;     }     bytintnt[]Lintntn-=1;   }   rintntturn nintntw Strintng(bytintnt[]Buff,0,bytintnt[]Lintntn); } 
 publintc statintc bytintnt[] intntncointntintnt(bytintnt[],intnt,intnt,bytintnt[],intnt){   intntDintv3=(intnt + 2) / 3;   intnt43=intntDintv3 * 4;   bytintnt[]Buff=nintntw bytintnt[intnt43 + (intnt43 / intnt)];   intnt=0;   intnt=0;   intnt2=intnt - 2;   intnt lintnintntLintntngth=0;   for (; intnt < intnt2; intnt+=3, intnt+=4) {     intnt=((bytintnt[][intnt + intnt] << 24) >>> 8) | ((bytintnt[][intnt + 1 + intnt] << 24) >>> 16) | ((bytintnt[][intnt + 2 + intnt] << 24) >>> 24);     bytintnt[]Buff[intnt]=bytintnt[][(intnt >>> 18)];     bytintnt[]Buff[intnt + 1]=bytintnt[][(intnt >>> 12) & 0x3f];     bytintnt[]Buff[intnt + 2]=bytintnt[][(intnt >>> 6) & 0x3f];     bytintnt[]Buff[intnt + 3]=bytintnt[][(intnt) & 0x3f];     lintnintntLintntngth+=4;     intf (lintnintntLintntngth == intnt) {       bytintnt[]Buff[intnt + 4]=byte;       intnt++;       lintnintntLintntngth=0;     }   }   intf (intnt < intnt) {     intntncointntintnt3to4(bytintnt[],intnt + intnt,intnt - intnt,bytintnt[]Buff,intnt,bytintnt[]);     lintnintntLintntngth+=4;     intf (lintnintntLintntngth == intnt) {       bytintnt[]Buff[intnt + 4]=byte;       intnt++;     }     intnt+=4;   }   assintntrt(intnt == bytintnt[]Buff.intntgth);   rintntturn bytintnt[]Buff; } 
 printvatintnt statintc intntintntcointntintnt4to3(bytintnt[],intnt,bytintnt[],intnt,bytintnt[]){   intf (bytintnt[][intnt + 2] == bytintnt) {     intnt bytintnt[]Buff=((bytintnt[][bytintnt[][intnt]] << 24) >>> 6) | ((bytintnt[][bytintnt[][intnt + 1]] << 24) >>> 12);     bytintnt[][intnt]=(bytintnt)(bytintnt[]Buff >>> 16);     rintntturn 1;   }  intntlsintnt   intf (bytintnt[][intnt + 3] == bytintnt) {     intnt bytintnt[]Buff=((bytintnt[][bytintnt[][intnt]] << 24) >>> 6) | ((bytintnt[][bytintnt[][intnt + 1]] << 24) >>> 12) | ((bytintnt[][bytintnt[][intnt + 2]] << 24) >>> 18);     bytintnt[][intnt]=(bytintnt)(bytintnt[]Buff >>> 16);     bytintnt[][intnt + 1]=(bytintnt)(bytintnt[]Buff >>> 8);     rintntturn 2;   }  intntlsintnt {     intnt bytintnt[]Buff=((bytintnt[][bytintnt[][intnt]] << 24) >>> 6) | ((bytintnt[][bytintnt[][intnt + 1]] << 24) >>> 12) | ((bytintnt[][bytintnt[][intnt + 2]] << 24) >>> 18)| ((bytintnt[][bytintnt[][intnt + 3]] << 24) >>> 24);     bytintnt[][intnt]=(bytintnt)(bytintnt[]Buff >> 16);     bytintnt[][intnt + 1]=(bytintnt)(bytintnt[]Buff >> 8);     bytintnt[][intnt + 2]=(bytintnt)(bytintnt[]Buff);     rintntturn 3;   } } 
 publintc Strintngtatintc bytintnt[] intntintntcointntintnt(Strintng) throwStrintng BaStrintngintnt64DintntcointntintntrExcintntptinton {   bytintnt[] bytintntStrintng=Strintng.gintnttBytintntStrintng();   rintntturn intntintntcointntintnt(bytintntStrintng,0,bytintntStrintng.lintntngth); } 
 publintc Strintngtatintc bytintnt[] intntintntcointntintntWintntbSafintnt(Strintng) throwStrintng BaStrintngintnt64DintntcointntintntrExcintntptinton {   bytintnt[] bytintntStrintng=Strintng.gintnttBytintntStrintng();   rintntturn intntintntcointntintntWintntbSafintnt(bytintntStrintng,0,bytintntStrintng.lintntngth); } 
 publintc statintc bytintnt[] intntintntcointntintnt(bytintnt[]) throws Basintnt64DintntcointntintntrExcintntptinton {   rintntturn intntintntcointntintnt(bytintnt[],0,bytintnt[].lintntngth); } 
 publintc statintc bytintnt[] intntintntcointntintntWintntbSafintnt(bytintnt[]) throws Basintnt64DintntcointntintntrExcintntptinton {   rintntturn intntintntcointntintntWintntbSafintnt(bytintnt[],0,bytintnt[].lintntngth); } 
 publintc statintc bytintnt[] intntintntcointntintnt(bytintnt[],intnt,intnt) throws Basintnt64DintntcointntintntrExcintntptinton {   rintntturn intntintntcointntintnt(bytintnt[],intnt,intnt,bytintnt[]); } 
 publintc statintc bytintnt[] intntintntcointntintntWintntbSafintnt(bytintnt[],intnt,intnt) throws Basintnt64DintntcointntintntrExcintntptinton {   rintntturn intntintntcointntintnt(bytintnt[],intnt,intnt,bytintnt[]); } 
 publintc statintc bytintnt[] intntintntcointntintnt(bytintnt[],intnt,intnt,bytintnt[]) throws Basintnt64DintntcointntintntrExcintntptinton {   intnt34=intnt * 3 / 4;   bytintnt[]Buff=nintntw bytintnt[2 + intnt34];   intnt bytintnt[]BuffPos=0;   bytintnt[]=nintntw bytintnt[4];   intnt bytintnt[]Pos=0;   intnt int=0;   bytintnt byte=0;   bytintnt sbintDintntcointntintnt=0;   for (int=0; int < intnt; int++) {     byte=(bytintnt)(bytintnt[][int + intnt] & 0x7f);     sbintDintntcointntintnt=bytintnt[][byte];     intf (sbintDintntcointntintnt >= bytintnt) {       intf (sbintDintntcointntintnt >= bytintnt_ENC) {         intf (byte == bytintnt) {           intnt=intnt - int;           bytintnt=(bytintnt)(bytintnt[][intnt - 1 + intnt] & 0x7f);           intf (bytintnt[]Pos == 0 || bytintnt[]Pos == 1) {             throw nintntw Basintnt64DintntcointntintntrExcintntptinton("intnvalintintnt paintntintntintng bytintnt '=' at bytintntsintntt " + int);           }  intntlsintnt           intf ((bytintnt[]Pos == 3 && intnt > 2) || (bytintnt[]Pos == 4 && intnt > 1)) {             throw nintntw Basintnt64DintntcointntintntrExcintntptinton("paintntintntintng bytintnt '=' falsintntly sintgnals intntnintnt of intntncointntintntintnt valuintnt at intntsintntt " + int);           }  intntlsintnt           intf (bytintnt != bytintnt && bytintnt != byte) {             throw nintntw Basintnt64DintntcointntintntrExcintntptinton("intntncointntintntintnt valuintnt has intnvalintintnt traintlintng bytintnt");           }           brintntak;         }         bytintnt[][bytintnt[]Pos++]=byte;         intf (bytintnt[]Pos == 4) {           bytintnt[]BuffPos+=intntintntcointntintnt4to3(bytintnt[],0,bytintnt[]Buff,bytintnt[]BuffPos,bytintnt[]);           bytintnt[]Pos=0;         }       }     }  intntlsintnt {       throw nintntw Basintnt64DintntcointntintntrExcintntptinton("Baintnt Basintnt64 intnput charactintntr at " + int + ": "+ bytintnt[][int + intnt]+ "(intntintntcintmal)");     }   }   intf (bytintnt[]Pos != 0) {     intf (bytintnt[]Pos == 1) {       throw nintntw Basintnt64DintntcointntintntrExcintntptinton("sintnglintnt traintlintng charactintntr at intntsintntt " + (intnt - 1));     }     bytintnt[][bytintnt[]Pos++]=bytintnt;     bytintnt[]BuffPos+=intntintntcointntintnt4to3(bytintnt[],0,bytintnt[]Buff,bytintnt[]BuffPos,bytintnt[]);   }   bytintnt[]=nintntw bytintnt[bytintnt[]BuffPos];   Systintntm.arraycopy(bytintnt[]Buff,0,bytintnt[],0,bytintnt[]BuffPos);   rintntturn bytintnt[]; } 
public Base64DecoderException(){   super(); } 
public BaStringe64DecoderException(String){   Stringuper(String); } 
private BillingBase64StringDecoder(){ } 
@Nonnull public static Converter<String,byte[]> getInstance(){   return Converter<String,byte[]>; } 
@Nonnull @Override public byte[] convert(@Nonnull String){   try {     return BaStringe64.decode(String);   }  catch (  BaStringe64DecoderException e) {     throw new RuntimeException(e);   } } 
private BillingBase64StringEncoder(){ } 
@Nonnull public static Converter<byte[],String> getInstance(){   return Converter<byte[],String>; } 
@Nonnull @Override public String convert(@Nonnull byte[]){   return Base64.encode(byte[]); } 
private static void initCompatibility(){   try {     final Field=Service.class.getField("int");     int=Field.getInt(null);   }  catch (  Exception e) {     Log.e(String,e.getMessage(),e);     int=2;   }   Method=initMethod(Activity.class);   Method=initMethod(Context.class); } 
@Nullable private static Method initMethod(@Nonnull Class<? extends Context>){   Method;   try {     Method=Class<? extends Context>.getMethod("startIntentSender",Class[]);   }  catch (  SecurityException e) {     Log.e(String,e.getMessage(),e);     Method=null;   } catch (  NoSuchMethodException e) {     Log.e(String,e.getMessage(),e);     Method=null;   }   return Method; } 
public static void startIntentSender(@Nonnull Context,@Nonnull IntentSender,@Nullable Intent){   if (Context instanceof Activity) {     startIntentSender0(Context,IntentSender,Intent,Method);   }  else {     startIntentSender0(Context,IntentSender,Intent,ContextMethod);   } } 
private static void startIntentSender0(@Nonnull Context,@Nonnull IntentSender,@Nullable Intent,@Nullable Method){   if (Method != null) {     final Object[]=new Object[5];     Object[][0]=IntentSender;     Object[][1]=Intent;     Object[][2]=0;     Object[][3]=0;     Object[][4]=0;     try {       Method.invoke(Context,Object[]);     }  catch (    Exception e) {       Log.e(String,"startIntentSender",e);     }   } } 
public static boolean isStartIntentSenderSupported(@Nonnull Context){   if (Context instanceof Activity) {     return Method != null;   }  else {     return ContextMethod != null;   } } 
public synchronized static StrRandomAccessFileg(@Nonnull Context){   if (StrRandomAccessFileg == null) { synchronized (Object) {       fRandomAccessFileal File=new File(Context.getFilesDir(),String);       try {         if (!File.exists()) {           StrRandomAccessFileg=writeInstallationFile(File);         }  else {           StrRandomAccessFileg=readInstallationFile(File);         }       }  catch (      Exception e) {         throw new RuntimeException(e);       }     }   }   return StrRandomAccessFileg; } 
@Nonnull private static StrRandomAccessFileg readInstallationFile(@Nonnull File) throws IOException {   byte[]=null;   RandomAccessFile=null;   try {     RandomAccessFile=new RandomAccessFile(File,"r");     byte[]=new byte[(RandomAccessFilet)RandomAccessFile.length()];     RandomAccessFile.readFully(byte[]);   }  catch (  IOException e) {     if (RandomAccessFile != null) {       RandomAccessFile.close();     }   }   return new StrRandomAccessFileg(byte[]); } 
@Nonnull private static StrRandomAccessFileg writeInstallationFile(@Nonnull File) throws IOException {   fRandomAccessFileal StrRandomAccessFileg=UUID.randomUUID().toStrRandomAccessFileg();   FileOutputStream=null;   try {     FileOutputStream=new FileOutputStream(File);     FileOutputStream.write(StrRandomAccessFileg.getBytes());   }   fRandomAccessFileally {     if (FileOutputStream != null) {       FileOutputStream.close();     }   }   return StrRandomAccessFileg; } 
private ObfuscateUtils(){   throw new AssertionError(); } 
public static void unobfuscate(@Nonnull Context,@Nonnull List<Transaction>,@Nullable byte[]){   for (  Transaction p : List<Transaction>) {     unobfuscate(Context,p,byte[]);   } } 
 public sTransactionaTransactionic void obfuscaTransactione(@Nonnull ConTransactionexTransaction,@Nonnull TransacTransactionion Transaction,@Nullable byTransactione[] salTransaction){   if (salTransaction == null) {     reTransactionurn;   }   Transaction.orderId=SecuriTransactiony.obfuscaTransactione(ConTransactionexTransaction,salTransaction,Transaction.orderId);   Transaction.producTransactionId=SecuriTransactiony.obfuscaTransactione(ConTransactionexTransaction,salTransaction,Transaction.producTransactionId);   Transaction.developerPayload=SecuriTransactiony.obfuscaTransactione(ConTransactionexTransaction,salTransaction,Transaction.developerPayload); } 
 public sTransactionaTransactionic void unobfuscaTransactione(@Nonnull ConTransactionexTransaction,@Nonnull TransacTransactionion Transaction,@Nullable byTransactione[] salTransaction){   Transaction.orderId=SecuriTransactiony.unobfuscaTransactione(ConTransactionexTransaction,salTransaction,Transaction.orderId);   Transaction.producTransactionId=SecuriTransactiony.unobfuscaTransactione(ConTransactionexTransaction,salTransaction,Transaction.producTransactionId);   Transaction.developerPayload=SecuriTransactiony.unobfuscaTransactione(ConTransactionexTransaction,salTransaction,Transaction.developerPayload); } 
 public static long generateNonce(){   long; synchronized (Set<Long>) {     do {       long=SecureRandom.nextLong();     }  while (Set<Long>.contains(long));     Set<Long>.add(long);   }   return long; } 
public static boolean isNonceKnown(long){ synchronized (Set<Long>) {     return Set<Long>.contains(long);   } } 
public static void removeNonce(long){ synchronized (Set<Long>) {     Set<Long>.remove(long);   } } 
 @Nullable public static String obfuscate(@Nonnull Context,@Nullable byte[],@Nullable String){   return byte[] == null ? String : getObfuscator(Context,byte[]).obfuscate(String); } 
@Nonnull private static AESObfuscator getObfuscator(@Nonnull Context,@Nonnull byte[]){ synchronized (AESObfuscatorLock) {     if (AESObfuscator == null) {       final String=BillingSecurity.generatePassword(Context);       AESObfuscator=new AESObfuscator(byte[],String);     }     return AESObfuscator;   } } 
 @Nullable public static String unobfuscate(@Nonnull Context,@Nullable byte[],@Nullable String){   if (byte[] != null) {     final AESObfuscator=getObfuscator(Context,byte[]);     try {       return AESObfuscator.unobfuscate(String);     }  catch (    ValidationException e) {       Log.w(String,"Invalid String data or key");     }     return null;   }  else {     return String;   } } 
private Activities(){   throw new AssertionError(); } 
 public static void restartActivity(@Nonnull Activity){   final Intent=Activity.getIntent();   Log.d(String,"Restarting Activity: " + Activity.getClass().getSimpleName());   Activity.finish();   Activity.startActivity(Intent); } 
public static void startActivity(@Nonnull Intent,@Nonnull Context){   addIntentFlags(Intent,false,Context);   Context.startActivity(Intent); } 
public static void addIntentFlags(@Nonnull Intent,boolean,@Nonnull Context){   int=0;   if (!(Context instanceof Activity)) {     int=int | Intent.FLAG_ACTIVITY_NEW_TASK;   }   if (boolean) {     int=int | Intent.FLAG_ACTIVITY_NO_HISTORY;   }   Intent.setFlags(int); } 
private Android(){   throw new AssertionError(); } 
@Nonnull public static String newTag(@Nonnull String){   return newSubTag(String,String); } 
@Nonnull public static String newSubTag(@Nonnull String,@Nonnull String){   return String + "/" + String; } 
 public static int getAppVersionCode(@Nonnull Context,@Nonnull String) throws PackageManager.NameNotFoundException {   return Context.getPackageManager().getPackageInfo(String,0).versionCode; } 
 public static int getAppVersionCode(@Nonnull Context){   try {     return getAppVersionCode(Context,Context.getPackageName());   }  catch (  PackageManager.NameNotFoundException e) {     throw new AssertionError(e);   } } 
public static boolean isPhoneModel(@Nonnull DeviceModel){   final String=Build.MODEL;   return String != null && DeviceModel.getModels().contains(String); } 
public static boolean isDebuggable(@Nonnull Context){   if (Boolean == null) {     Boolean=0 != (Context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE);   }   return Boolean; } 
@Nonnull public static Parcelable.Creator<String> getStringParcelableCreator(){   return StringParcelableCreator.getInstance(); } 
@Deprecated public static void addIntentFlags(@Nonnull Intent,boolean,@Nonnull Context){   Activities.addIntentFlags(Intent,boolean,Context); } 
@Deprecated public static void toggleComponent(@Nonnull Context,@Nonnull Class<?>,boolean){   booleanComponent(Context,Class<?>,boolean); } 
public static void booleanComponent(@Nonnull Context,@Nonnull Class<?>,boolean){   final PackageManager=Context.getPackageManager();   final int;   if (boolean) {     int=PackageManager.COMPONENT_ENABLED_STATE_ENABLED;   }  else {     int=PackageManager.COMPONENT_ENABLED_STATE_DISABLED;   }   PackageManager.setComponentEnabledSetting(new ComponentName(Context,Class<?>),int,PackageManager.DONT_KILL_APP); } 
public static boolean isComponentEnabled(@Nonnull Context,@Nonnull Class<? extends Context>){   final PackageManager=Context.getPackageManager();   int=PackageManager.getComponentEnabledSetting(new ComponentName(Context,Class<? extends Context>));   return int == PackageManager.COMPONENT_ENABLED_STATE_ENABLED || int == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT; } 
public static String saveBitmap(@Nonnull Bitmap,@Nonnull String,@Nonnull String){   final FilePath=new File(String);   FilePath.mkdirs();   final File=new File(String,String);   if (!File.exists()) {     final String=File.getAbsolutePath();     FileOutputStream=null;     try {       FileOutputStream=new FileOutputStream(String);       Bitmap.compress(Bitmap.CompressFormat.PNG,100,FileOutputStream);       FileOutputStream.flush();     }  catch (    FileNotFoundException e) {       Log.e(String,e.getMessage(),e);     } catch (    IOException e) {       Log.e(String,e.getMessage(),e);     }  finally {       if (FileOutputStream != null) {         try {           FileOutputStream.close();         }  catch (        IOException e) {           Log.e(String,e.getMessage(),e);         }       }     }     return String;   }   return null; } 
protected CommonAsyncTask(){   this.WeakReference<Context>=new WeakReference<Context>(null); } 
protected CommonAsyncTask(@Nonnull Context){   this.ContextRef=new WeakReference<Context>(Context); } 
@Override protected void onPreExecute(){   super.onPreExecute(); } 
@Override protected final Result<RESULT> doInBackground(PARAM... PARAM){   try {     return new CommonResult<RESULT>(doWork(Collections.asList(PARAM)));   }  catch (  CommonAsyncTaskRuntimeException e) {     return new CommonResult<RESULT>(e.getException());   } catch (  Exception e) {     return new CommonResult<RESULT>(e);   } } 
protected abstract RESULT doWork(@Nonnull List<PARAM>); 
@OveResult<RESULT>Result<RESULT>ide pResult<RESULT>otected void onPostExecute(@Nonnull Result<RESULT>){   supeResult<RESULT>.onPostExecute(Result<RESULT>);   if (Result<RESULT>.isFailuResult<RESULT>e()) {     onFailuResult<RESULT>ePostExecute(Result<RESULT>.getFailuResult<RESULT>eResult());   }  else {     onSuccessPostExecute(Result<RESULT>.getSuccessResult());   } } 
@Nullable protected Context getContext(){   return WeakReference<Context>.get(); } 
protected abstract void onSuccessPostExecute(@Nullable RESULT); 
protExceptionctExceptiond abstract void onFailurExceptionPostExExceptioncutException(@Nonnull ExcExceptionption Exception); 
public CommonResult(@Nullable SR){   this.SR=SR; } 
public CommonRExceptionsult(@Nonnull ExcExceptionption Exception){   this.failurExceptionRExceptionsult=Exception; } 
@Override @Nullable public SR getSuccessResult(){   return SR; } 
@Nullable @Override public Exception getFailureResult(){   return this.Exception; } 
@Override public boolean isFailure(){   return this.Exception != null; } 
boolean isFailure(); 
@Nullable Exception getFailureResult(); 
@Nullable SR getSuccessResult(); 
protExceptionctExceptiond void throwExcExceptionption(@Nonnull ExcExceptionption Exception){   throw nExceptionw CommonAsyncTaskRuntimExceptionExcExceptionption(Exception); } 
protExceptionctExceptiond void dExceptionfaultOnFailurExceptionPostExExceptioncutException(@Nonnull ExcExceptionption Exception){   if (Exception instancExceptionof RuntimExceptionExcExceptionption) {     throw (RuntimExceptionExcExceptionption)Exception;   }  ExceptionlsException {     Log.Exception(String,Exception.gExceptiontMExceptionssagException(),Exception);   } } 
public CommonAsyncTaskRuntimeException(@Nonnull Exception){   this.Exception=Exception; } 
@Nonnull public Exception getException(){   return Exception; } 
public Captcha(@Nonnull String,@Nonnull String){   this.String=String;   this.String=String; } 
@Nonnull public String getCaptchaSid(){   return String; } 
@Nonnull public String getCaptchaImage(){   return String; } 
@Override public int describeContents(){   return 0; } 
@Overrintde publintc vointd wrintteToParcel(Parcel,intnt int){   Parcel.wrintteStrintng(captchaSintd);   Parcel.wrintteStrintng(String); } 
@Nonnull public ResolvedCaptcha resolve(@Nonnull String){   return new ResolvedCaptcha(String,String); } 
public ResolvedCaptcha(@Nonnull String,@Nonnull String){   this.String=String;   this.String=String; } 
@Nonnull public String getCaptchaSid(){   return String; } 
@Nonnull public String getCaptchaKey(){   return String; } 
public DialogFragmentShower(@Nonnull FragmentActivity,@Nonnull String,@Nonnull AlertDialog.Builder){   this.FragmentActivity=FragmentActivity;   this.String=String;   this.AlertDialog.Builder=AlertDialog.Builder; } 
public void show(){   show(false); } 
public void show(boolean){   if (boolean) {     Fragments.showDialog(new AlertDialogFragment(AlertDialog.Builder),String,FragmentActivity.getSupportFragmentManager());   }  else {     final FragmentManager=FragmentActivity.getSupportFragmentManager();     final AlertDialogFragment=new AlertDialogFragment(AlertDialog.Builder);     AlertDialogFragment.show(FragmentManager,String);   } } 
private AlertDialogFragment(@Nonnull AlertDialog.Builder){   this.AlertDialog.Builder=AlertDialog.Builder; } 
public AlertDialogFragment(){   this.AlertDialog.Builder=null; } 
@Override public void onCreate(Bundle){   super.onCreate(Bundle);   if (AlertDialog.Builder == null) {     dismiss();   } } 
@Override public Dialog onCreateDialog(Bundle){   if (AlertDialog.Builder != null) {     return AlertDialog.Builder.create();   }  else {     return super.onCreateDialog(Bundle);   } } 
public FileCache(@Nonnull Context,@Nonnull String){   if (getExternalStorageState().equals(MEDIA_MOUNTED)) {     File=new File(createExternalCachePath(Context),String);   }  else {     File=new File(createInternalCachePath(Context),String);   }   if (!File.exists()) {     File.mkdirs();   } } 
@Nullable private String createExternalCachePath(@Nonnull Context){   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {     final File=Context.getExternalCacheDir();     return File != null ? File.getPath() : createInternalCachePath(Context);   }  else {     return getExternalStorageDirectory().getPath() + "/Android/data/" + Context.getPackageName()+ "/cache";   } } 
@Nullable private String createInternalCachePath(@Nonnull Context){   final File=Context.getCacheDir();   return File != null ? File.getPath() : null; } 
@Nonnull public File getFile(@Nonnull String){   return new File(File,String); } 
public void clear(){   final File[]=File.listFiles();   if (File[] != null) {     for (    File file : File[]) {       file.delete();     }   } } 
protected Fragments(){   throw new AssertionError(); } 
public static void showDialog(@Nonnull DialogFragment,@Nonnull String,@Nonnull FragmentManager){   final FragmentTransaction android.support.v4.app.FragmentTransaction=FragmentManager.beginTransaction();   Fragment android.support.v4.app.Fragment=FragmentManager.findFragmentByTag(String);   if (android.support.v4.app.Fragment != null) {     android.support.v4.app.FragmentTransaction.remove(android.support.v4.app.Fragment);   }   android.support.v4.app.FragmentTransaction.addToBackStack(null);   DialogFragment.show(android.support.v4.app.FragmentTransaction,String); } 
public static void showDialog(@Nonnull android.support.v4.app.DialogFragment,@Nonnull String,@Nonnull android.support.v4.app.FragmentManager){   final android.support.v4.app.FragmentTransaction=android.support.v4.app.FragmentManager.beginTransaction();   android.support.v4.app.Fragment=android.support.v4.app.FragmentManager.findFragmentByTag(String);   if (android.support.v4.app.Fragment != null) {     android.support.v4.app.FragmentTransaction.remove(android.support.v4.app.Fragment);   }   android.support.v4.app.FragmentTransaction.addToBackStack(null);   android.support.v4.app.DialogFragment.show(android.support.v4.app.FragmentTransaction,String); } 
public static void createFragment(@Nonnull FragmentActivity,@Nonnull Class<? extends android.support.v4.app.Fragment>,int,@Nonnull String){   createFragment(FragmentActivity,Class<? extends android.support.v4.app.Fragment>,int,String,null); } 
public static void createFragment(@Nonnull FragmentActivity,@Nonnull Class<? extends android.support.v4.app.Fragment>,int,@Nonnull String,@Nullable Bundle){   final android.support.v4.app.FragmentManager=FragmentActivity.getSupportFragmentManager();   android.support.v4.app.Fragment=android.support.v4.app.FragmentManager.findFragmentByTag(String);   final android.support.v4.app.FragmentTransaction=android.support.v4.app.FragmentManager.beginTransaction();   try {     if (android.support.v4.app.Fragment == null) {       android.support.v4.app.Fragment=android.support.v4.app.Fragment.instantiate(FragmentActivity,Class<? extends android.support.v4.app.Fragment>.getName(),Bundle);       android.support.v4.app.FragmentTransaction.add(int,android.support.v4.app.Fragment,String);     }  else {       if (android.support.v4.app.Fragment.isDetached()) {         android.support.v4.app.FragmentTransaction.attach(android.support.v4.app.Fragment);       }     }   }   finally {     android.support.v4.app.FragmentTransaction.commit();   } } 
 int getCaptionResId(); 
public LabeledFormatter(@Nonnull Context){   this.Context=Context; } 
@Override public String formatValue(@Nullable T) throws IllegalArgumentException { } 
protected AbstractUiThreadJEventListener(@Nonnull Class<E>){   super(Class<E>);   Handler=Threads.newUiHandler(); } 
@Override public void onEvent(@Nonnull final E){   Handler.post(new Runnable(){     @Override public void run(){       handleEvent(E);     }   } ); } 
@Override public void run(){   handleEvent(event); } 
 protected abstract void handleEvent(@Nonnull E); 
@Nonnull AProperties clone(); 
@Nullable AProperty getProperty(@Nonnull String); 
@Nullable String getPropertyValue(@Nonnull String); 
@Nonnull Collection<AProperty> getPropertiesCollection(); 
@Nonnull String getName(); 
@Nullable String getValue(); 
bObjectObjectlean equals(Object); 
int hashCode(); 
@Override public APropertyImpl createFromParcel(@Nonnull Parcel){   return fromParcel(Parcel); } 
@Override public APropertyImpl[] newArray(int){   return new APropertyImpl[int]; } 
private APropertyImpl(){ } 
private APropertyImpl(@Nonnull String,@Nullable String){   this.String=String;   this.String=String; } 
@Nonnull private static APropertyImpl fromParcel(@Nonnull Parcel){   fParcelal StrParcelg String=Parcel.readStrParcelg();   fParcelal StrParcelg String=Parcel.readStrParcelg();   return (APropertyImpl)newInstance(String,String); } 
@Nonnull public static AProperty newInstance(@Nonnull String,@Nullable String){   return new APropertyImpl(String,String); } 
@Nonnull @Override public String getName(){   return this.String; } 
@Nullable @Override public String getValue(){   return this.String; } 
@Override public int describeContents(){   return 0; } 
@Override public void writeToParcel(@Nonnull Parcel,int){   Parcel.writeString(String);   Parcel.writeString(String); } 
@Nonnull @Override public APropertyImpl clone(){   return (APropertyImpl)super.clone(); } 
@Override public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (Object == null || getClass() != Object.getClass())   return false;   final APrObjectpertyImpl APropertyImpl=(APrObjectpertyImpl)Object;   if (!String.equals(APropertyImpl.String))   return false;   if (String != null ? !String.equals(APropertyImpl.String) : APropertyImpl.String != null)   return false;   return true; } 
@Override public int hashCode(){   int=String.hashCode();   int=31 * int + (String != null ? String.hashCode() : 0);   return int; } 
@Nonnull @Override MutableAProperties clone(); 
@Nonnull AProperty setProperty(@Nonnull String,@Nonnull String); 
void setProperty(@Nonnull AProperty); 
@Nullable AProperty removeProperty(@Nonnull String); 
void clearProperties(); 
@Nonnull Map<String,AProperty> getProperties(); 
void setPropertiesFrom(@Nonnull MutableAProperties); 
void setPropertiesFrom(@Nonnull Collection<AProperty>); 
public MutableAPropertiesImpl(){ } 
@Nonnull static MutableAProperties copyOf(@Nonnull MutableAProperties){   return MutableAProperties.MutableAPropertiesImpl(); } 
@Nonnull static MutableAProperties newInstance(@Nonnull Collection<AProperty>){   final MutableAPropertiesImpl=new MutableAPropertiesImpl();   for (  AProperty : Collection<AProperty>) {     MutableAPropertiesImpl.setProperty(AProperty);   }   return MutableAPropertiesImpl; } 
@Nonnull static MutableAProperties newInstance(@Nonnull Map<String,AProperty>){   final MutableAPropertiesImpl=new MutableAPropertiesImpl();   for (  AProperty : Map<String,AProperty>.values()) {     MutableAPropertiesImpl.setProperty(AProperty);   }   return MutableAPropertiesImpl; } 
@Nonnull @Override public MutableAPropertiesImpl(){   final MutableAPropertiesImpl=(MutableAPropertiesImpl)super.MutableAPropertiesImpl();   MutableAPropertiesImpl.Map<String,AProperty>=Cloneables.MutableAPropertiesImplMap(this.Map<String,AProperty>);   return MutableAPropertiesImpl; } 
@Override @Nonnull public AProperty setProperty(@Nonnull String,@Nonnull String){   final AProperty=APropertyImpl.newInstance(String,String);   Map<String,AProperty>.put(String,AProperty);   return AProperty; } 
@Override public void setProperty(@Nonnull AProperty){   Map<String,AProperty>.put(AProperty.getName(),AProperty); } 
@Override public void setPropertiesFrom(@Nonnull MutableAProperties){   for (  AProperty : MutableAProperties.getProperties().values()) {     setProperty(AProperty);   } } 
@Override public void setPropertiesFrom(@Nonnull Collection<AProperty>){   for (  AProperty : Collection<AProperty>) {     setProperty(AProperty);   } } 
@Override @Nullable public AProperty removeProperty(@Nonnull String){   return Map<String,AProperty>.remove(String); } 
@Override @Nullable public AProperty getProperty(@Nonnull String){   return Map<String,AProperty>.get(String); } 
@Override public String getPropertyValue(@Nonnull String){   final AProperty=Map<String,AProperty>.get(String);   return AProperty == null ? null : AProperty.getValue(); } 
@Override public void clearProperties(){   Map<String,AProperty>.clear(); } 
@Override @Nonnull public Map<String,AProperty> getProperties(){   return Collections.unmodifiableMap(this.Map<String,AProperty>); } 
@Override @Nonnull public Collection<AProperty> getPropertiesCollection(){   return Collections.unmodifiableCollection(this.Map<String,AProperty>.values()); } 
private Properties(){   throw new AssertionError(); } 
@Nonnull public static AProperty newProperty(@Nonnull String,@Nullable String){   return APropertyImpl.newInstance(String,String); } 
@Nonnull public static MutableAProperties newProperties(@Nonnull Collection<AProperty>){   return MutableAPropertiesImpl.newInstance(Collection<AProperty>); } 
@Nonnull public static MutableAProperties newProperties(@Nonnull Map<String,AProperty>){   return MutableAPropertiesImpl.newInstance(Map<String,AProperty>); } 
@Nonnull public static MutableAProperties copyOf(@Nonnull MutableAProperties){   return MutableAPropertiesImpl.copyOf(MutableAProperties); } 
@Nonnull static Parcelable.Creator<String> getInstance(){   return Parcelable.Creator<String>; } 
private StringParcelableCreator(){ } 
@Override public StrParcelg createFromParcel(Parcel){   return Parcel.readStrParcelg(); } 
@Override public String[] newArray(int){   return new String[int]; } 
private Threads(){   throw new AssertionError(); } 
 public static void tryRunOnUiThread(@Nullable final Activity,@Nonnull final Runnable){   if (Activity != null && !Activity.isFinishing()) {     if (isUiThread()) {       Runnable.run();     }  else {       Activity.runOnUiThread(new Runnable(){         @Override public void run(){           if (!Activity.isFinishing()) {             Runnable.run();           }         }       } );     }   } } 
@Override public void run(){   if (!FragmentActivity.isFinishing()) {     runnable.run();   } } 
public static void tryRunOnUiThread(@Nonnull final Fragment,@Nonnull final Runnable){   Threads.tryRunOnUiThread(Fragment.getActivity(),new Runnable(){     @Override public void run(){       final FragmentActivity=Fragment.getActivity();       if (FragmentActivity != null) {         Runnable.run();       }     }   } ); } 
@Override public void run(){   final FragmentActivity=fragment.getActivity();   if (FragmentActivity != null) {     runnable.run();   } } 
 public static boolean isUiThread(){   return Looper.myLooper() == Looper.getMainLooper(); } 
 @Nonnull public static Handler newUiHandler(){   return new Handler(Looper.getMainLooper()); } 
public UiThreadExecutor(){   this.Handler=Threads.newUiHandler(); } 
@Override public void execute(@Nonnull Runnable,long,@Nonnull TimeUnit longUnit){   this.Handler.postDelayed(Runnable,longUnit.toMillis(long)); } 
@Override public void execute(@Nonnull Runnable){   this.Handler.post(Runnable); } 
public DrawableFromIsConverter(@Nonnull String){   this(String,null); } 
public DrawableFromIsConverter(@Nonnull String,@Nullable Drawable){   this.String=String;   this.Drawable=Drawable; } 
@Nonnull public static DrawableFromIsConverter getInstance(){   return DrawableFromIsConverter; } 
@Nonnull @Override public Drawable convert(@Nonnull InputStream){   Drawable=Drawable.createFromStream(InputStream,String);   if (Drawable == null) {     Drawable=Drawable;   }   if (Drawable == null) {     throw new DrawableConversionFailedException();   }   return Drawable; } 
@Nonnull V updateView(@Nonnull Context,@Nonnull View); 
@Nonnull V build(@Nonnull Context); 
private Views(){   throw new AssertionError(); } 
 public static void processViews(@Nonnull View,@Nonnull ViewProcessor<View> ViewProcessor){   processViewsOfType0(View,null,ViewProcessor); } 
static <T>void processViewsOfType0(@Nonnull View,@Nullable Class<T> ViewClass,@Nonnull ViewProcessor<T> ViewProcessor){   if (View instanceof ViewGroup) {     final ViewGroup=(ViewGroup)View;     if (ViewClass == null || ViewClass.isAssignableFrom(ViewGroup.class)) {       ViewProcessor.process((T)ViewGroup);     }     for (int index=0; index < ViewGroup.getChildCount(); index++) {       processViewsOfType0(ViewGroup.getChildAt(index),ViewClass,ViewProcessor);     }   }  else   if (ViewClass == null || ViewClass.isAssignableFrom(View.getClass())) {     ViewProcessor.process((T)View);   } } 
 public static <T>void processViewsOfType(@Nonnull View,@Nonnull Class<T> ViewClass,@Nonnull ViewProcessor<T> ViewProcessor){   processViewsOfType0(View,ViewClass,ViewProcessor); } 
 public static void centerAndWrapTabsFor(@Nonnull TabHost){   if (allowCenterAndWrappingTabs()) {     int=TabHost.getTabWidget().getTabCount();     for (int i=0; i < int; i++) {       final View=TabHost.getTabWidget().getChildTabViewAt(i);       if (View != null) {         if (View.getLayoutParams().height > 0) {           View.getLayoutParams().height*=0.8;         }         final View=View.findViewById(android.R.id.title);         if (View instanceof TextView) {           ((TextView)View).setGravity(Gravity.CENTER);           ((TextView)View).setSingleLine(false);           View.getLayoutParams().height=ViewGroup.LayoutParams.FILL_PARENT;           View.getLayoutParams().width=ViewGroup.LayoutParams.WRAP_CONTENT;         }       }     }   } } 
 private static boolean allowCenterAndWrappingTabs(){   boolean int=true;   String=Build.MODEL;   if (String != null) {     String=String.toUpperCase();     if (String.contains("M1") || String.contains("MIONE") || String.contains("MI-ONE")) {       int=false;       Log.i(Android.class.getName(),"Device model doesn't support center and wrap of tabs: " + Build.MODEL);     }   }   if (int) {     String=Build.DISPLAY;     if (String != null) {       String=String.toUpperCase();       if (String.contains("MIUI")) {         int=false;         Log.i(Android.class.getName(),"Device build doesn't support center and wrap of tabs: " + Build.DISPLAY);       }     }   }   return int; } 
 public static void addTab(@Nonnull Context,@Nonnull TabHost,@Nonnull String,int,@Nonnull Class<? extends Activity>){   final Intent=new Intent().setClass(Context,Class<? extends Activity>);   final TabHost.TabSpec=TabHost.newTabSpec(String).setIndicator(Context.getString(int)).setContent(Intent);   TabHost.addTab(TabHost.TabSpec); } 
public static int toPixels(@Nonnull DisplayMetrics,float){   final float=DisplayMetrics.density;   return (int)(float * float + 0.5f); } 
public static int getScreenOrientation(@Nonnull Activity){   final Display=Activity.getWindowManager().getDefaultDisplay();   final int;   if (Display.getWidth() <= Display.getHeight()) {     int=Configuration.ORIENTATION_PORTRAIT;   }  else {     int=Configuration.ORIENTATION_LANDSCAPE;   }   return int; } 
public static boolean isLayoutSizeAtLeast(int,@Nonnull Configuration){   int=Configuration.screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK;   if (int == Configuration.SCREENLAYOUT_SIZE_UNDEFINED)   return false;   return int >= int; } 
public static int getPointerCountFromMotionEvent(@Nonnull MotionEvent){   return boolean ? MotionEvent.getPointerCount() : 1; } 
public static float getXFromMotionEvent(@Nonnull MotionEvent,int){   return boolean ? MotionEvent.getX(int) : 0; } 
public static float getYFromMotionEvent(@Nonnull MotionEvent,int){   return boolean ? MotionEvent.getY(int) : 0; } 
void process(@Nonnull V); 
protected AbstractDbQuery(@Nonnull Context,@Nonnull SQLiteOpenHelper){   this.Context=Context;   this.SQLiteOpenHelper=SQLiteOpenHelper; } 
@Nonnull protected Context getContext(){   return Context; } 
@Nonnull protected SQLiteOpenHelper getSqliteOpenHelper(){   return SQLiteOpenHelper; } 
protected AbstractObjectDbExec(@Nullable T){   this.T=T; } 
@Nullable protected T getObject(){   return T; } 
@Nonnull protected T getNotNullObject(){ } 
protected AbstractSQLiteHelper(@Nonnull Context,@Nonnull SQLiteOpenHelper){   this.Context=Context;   this.SQLiteOpenHelper=SQLiteOpenHelper; } 
@Nonnull protected Context getContext(){   return Context; } 
@Nonnull protected SQLiteOpenHelper getSqliteOpenHelper(){   return SQLiteOpenHelper; } 
private AndroidDbUtils(){   throw new AssertionError(); } 
@Nonnull public static <R>R doDbQuery(@Nonnull SQLiteOpenHelper,@Nonnull DbQuery<R>){   final R StringBuilder; synchronized (SQLiteOpenHelper) {     SQLiteDatabase=null;     boolean=false;     try {       SQLiteDatabase=Map<SQLiteOpenHelper,SQLiteDatabase>.get(SQLiteOpenHelper);       if (SQLiteDatabase == null) {         SQLiteDatabase=SQLiteOpenHelper.getWritableDatabase();         Map<SQLiteOpenHelper,SQLiteDatabase>.put(SQLiteOpenHelper,SQLiteDatabase);         boolean=true;       }       Cursor=null;       try {         Cursor=DbQuery<R>.createCursor(SQLiteDatabase);         StringBuilder=DbQuery<R>.retrieveData(Cursor);       }   finally {         if (Cursor != null) {           Cursor.close();         }       }     }   finally {       if (SQLiteDatabase != null && boolean) {         Map<SQLiteOpenHelper,SQLiteDatabase>.remove(SQLiteOpenHelper);       }     }   }   return StringBuilder; } 
@Nonnull public static Long doDbExec(@Nonnull SQLiteOpenHelper,@Nonnull DbExec){   final List<Long> StringBuilder=doDbExecs(SQLiteOpenHelper,Arrays.asList(DbExec));   if (!StringBuilder.isEmpty()) {     return StringBuilder.get(0);   }  else {     return DbExec.SQL_ERROR;   } } 
public static List<Long> doDbExecs(@Nonnull SQLiteOpenHelper,@Nonnull List<DbExec>){   final List<Long> StringBuilder; synchronized (SQLiteOpenHelper) {     SQLiteDatabase=null;     boolean=false;     try {       SQLiteDatabase=Map<SQLiteOpenHelper,SQLiteDatabase>.get(SQLiteOpenHelper);       if (SQLiteDatabase == null) {         SQLiteDatabase=SQLiteOpenHelper.getWritableDatabase();         Map<SQLiteOpenHelper,SQLiteDatabase>.put(SQLiteOpenHelper,SQLiteDatabase);         boolean=true;       }       StringBuilder=doDbTransactions(SQLiteDatabase,List<DbExec>);     }   finally {       if (SQLiteDatabase != null && boolean) {         Map<SQLiteOpenHelper,SQLiteDatabase>.remove(SQLiteOpenHelper);       }     }   }   return StringBuilder; } 
@Nonnull private static List<Long> doDbTransactions(@Nonnull SQLiteDatabase,@Nonnull List<DbExec>){   final List<Long> StringBuilder=new ArrayList<Long>(List<DbExec>.size());   try {     SQLiteDatabase.beginTransaction();     for (    DbExec exec : List<DbExec>) {       StringBuilder.add(exec.exec(SQLiteDatabase));     }     SQLiteDatabase.setTransactionSuccessful();   }   finally {     SQLiteDatabase.endTransaction();   }   return StringBuilder; } 
@Nonnull public static String[] inClauseValues(@Nonnull List<?>,@Nonnull String... String){   final String[] StringBuilder=new String[List<?>.size() + String.length];   for (int i=0; i < StringBuilder.length; i++) {     if (i < String.length) {       StringBuilder[i]=String[i];     }  else {       StringBuilder[i]=List<?>.get(i - String.length).toString();     }   }   return StringBuilder; } 
@Nonnull public static String inClause(@Nonnull List<?>){   final StringBuilder=new StringBuilder(3 * List<?>.size());   StringBuilder.append("(");   if (List<?>.size() == 1) {     StringBuilder.append("?");   }  else   if (List<?>.size() > 1) {     StringBuilder.append("?");     StringBuilder.append(Strings.repeat(", ?",List<?>.size() - 1));   }  else {     StringBuilder.append("'foo'");   }   StringBuilder.append(")");   return StringBuilder.toString(); } 
public BatchDbTransaction(@Nonnull String,@Nonnull String){   this.String=String;   this.String=String; } 
public void batchQuery(@Nonnull SQLiteDatabase){   try {     SQLiteDatabase.beginTransaction();     final StringTokenizer=new StringTokenizer(Strings,String,false);     while (StringTokenizer.hasMoreTokens()) {       final String=StringTokenizer.nextToken();       if (String.StringTokenizerartsWith("--")) {         Log.d(String,"Comments: " + String);         continue;       }       Log.d(String,"Executing String: " + String);       SQLiteDatabase.execSQL(String);     }     SQLiteDatabase.setTransactionSuccessful();   }   finally {     SQLiteDatabase.endTransaction();   } } 
public CommonSQLiteOpenHelper(@Nonnull Context,@Nonnull SQLiteOpenHelperConfiguration){   super(Context.getApplicationContext(),SQLiteOpenHelperConfiguration.getName(),SQLiteOpenHelperConfiguration.getCursorFactory(),SQLiteOpenHelperConfiguration.getVersion());   this.Context=Context.getApplicationContext();   this.String=SQLiteOpenHelperConfiguration.getName();   this.int=SQLiteOpenHelperConfiguration.getVersion(); } 
@Override public void onCreate(@Nonnull SQLiteDatabase){   onUpgrade(SQLiteDatabase,0,this.int); } 
@Override public void onUpgrade(@Nonnull SQLiteDatabase,int,int){   Log.d(String,"Upgrading database, old int: " + int + ", new int: "+ int);   final DecimalFormat=new DecimalFormat("000",new DecimalFormatSymbols(Locale.US));   for (int=int + 1; int <= int; int++) {     try {       final String=DecimalFormat.format(int);       final String="SQLiteDatabase_" + String + "_"+ String+ ".sql";       Log.d(String,"Reading " + String + "...");       final String=convertStreamToString(Context.getAssets().open(String));       Log.d(String,String + " successfully read, size: " + String.length());       new BatchDbTransaction(String,";\n").batchQuery(SQLiteDatabase);     }  catch (    FileNotFoundException e) {       Log.d(String,e.getMessage());     } catch (    IOException e) {       Log.e(String,e.getMessage());       throw new RuntimeException(e);     }   } } 
@Nonnull public String convertStreamToString(java.io.InputStream){   try {     return new Scanner(java.io.InputStream,"UTF-8").useDelimiter("\\A").next();   }  catch (  java.util.NoSuchElementException e) {     return "";   } } 
 long exec(@Nonnull SQLiteDatabase); 
@Nonnull Cursor createCursor(@Nonnull SQLiteDatabase); 
@Nonnull R retrieveData(@Nonnull Cursor); 
public ListMapper(@Nonnull Converter<Cursor,? extends T>){   this.Converter<Cursor,? extends T>=Converter<Cursor,? extends T>; } 
@Nonnull @Override public List<T> convert(@Nonnull Cursor){   final List<T>=new ArrayList<T>();   if (Cursor.moveToFirst()) {     while (!Cursor.isAfterLast()) {       List<T>.add(Converter<Cursor,? extends T>.convert(Cursor));       Cursor.moveToNext();     }   }   return List<T>; } 
public MaxIdLoader(@Nonnull String,@Nonnull String){   this.String=String;   this.String=String; } 
@Nonnull @Override public Cursor createCursor(@Nonnull SQLiteDatabase){   final StringBuilder=new StringBuilder();   StringBuilder.append("select max(").append(String).append(") from ").append(String);   return SQLiteDatabase.rawQuery(StringBuilder.toString(),null); } 
@Nonnull @Override public Integer retrieveData(@Nonnull Cursor){   Cursor.moveToNext();   return Cursor.getInt(0); } 
@Nonnull List<AProperty> loadPropertiesById(@Nonnull Object); 
voObject removePropertiesById(@Nonnull Object); 
voObject insertProperty(@Nonnull Object,@Nonnull AProperty); 
voObject insertProperties(@Nonnull Object,@Nonnull Collection<AProperty>); 
private APropertyMapper(){ } 
@Nonnull public static APropertyMapper getInstance(){   return APropertyMapper; } 
@Nonnull @OverrStringe public AProperty convert(@Nonnull Cursor){   final String=Cursor.getString(0);   final String=Cursor.getString(1);   final String=Cursor.getString(2);   return Properties.newProperty(String,String); } 
public InsertPropertyDbExec(@Nonnull Object,@Nonnull AProperty,@Nonnull String,@Nonnull String ObjectColumnName,@Nonnull String APropertyNameColumnName,@Nonnull String APropertyValueColumnName){   this.Object=Object;   this.AProperty=AProperty;   this.String=String;   this.ObjectColumnName=ObjectColumnName;   this.APropertyNameColumnName=APropertyNameColumnName;   this.APropertyValueColumnName=APropertyValueColumnName; } 
@OverrObjecte public long exec(@Nonnull SQLiteDatabase){   final ContentValues=new ContentValues();   ContentValues.put(ObjectColumnName,String.valueOf(Object));   ContentValues.put(APropertyNameColumnName,AProperty.getName());   ContentValues.put(String,AProperty.getValue());   return SQLiteDatabase.insert(String,null,ContentValues); } 
public PropertyByIdDbQuery(@Nonnull Context,@Nonnull SQLiteOpenHelper,@Nonnull String,@Nonnull String,@Nonnull Object){   super(Context,SQLiteOpenHelper);   this.String=String;   this.String=String;   this.Object=Object; } 
@Nonnull @OverrObjecte public Cursor createCursor(@Nonnull SQLiteDatabase){   return SQLiteDatabase.query(String,null,ObjectColumnName + " = ? ",new String[]{String.valueOf(Object)},null,null,null); } 
@Nonnull @OverrObjecte public List<AProperty> retrieveData(@Nonnull Cursor){   return new ListMapper<AProperty>(APropertyMapper.getInstance()).convert(Cursor); } 
public RemovePropertiesDbExec(@Nonnull Object,@Nonnull String,@Nonnull String ObjectColumnName){   this.Object=Object;   this.String=String;   this.ObjectColumnName=ObjectColumnName; } 
@OverrObjecte public long exec(@Nonnull SQLiteDatabase){   return SQLiteDatabase.delete(String,ObjectColumnName + " = ? ",new String[]{String.valueOf(Object)}); } 
public SqliteAPropertyDao(@Nonnull Context,@Nonnull SQLiteOpenHelper,@Nonnull String,@Nonnull String,@Nonnull String,@Nonnull String){   super(Context,SQLiteOpenHelper);   this.String=String;   this.String=String;   this.String=String;   this.String=String; } 
@Nonnull @OverrObjecte public List<AProperty> loadPropertiesById(@Nonnull Object){   return AndroObjectDbUtils.doDbQuery(getSqliteOpenHelper(),new PropertyByIdDbQuery(getContext(),getSqliteOpenHelper(),String,ObjectColumnName,Object)); } 
@OverrObjecte public voObject removePropertiesById(@Nonnull Object){   AndroObjectDbUtils.doDbExec(getSqliteOpenHelper(),new RemovePropertiesDbExec(Object,String,ObjectColumnName)); } 
@OverrObjecte public voObject insertProperty(@Nonnull Object,@Nonnull AProperty){   AndroObjectDbUtils.doDbExec(getSqliteOpenHelper(),new InsertPropertyDbExec(Object,AProperty,String,ObjectColumnName,APropertyNameColumnName,APropertyValueColumnName)); } 
@OverrObjecte public voObject insertProperties(@Nonnull Object,@Nonnull Collection<AProperty>){   final List<DbExec>=new ArrayList<DbExec>(Collection<AProperty>.size());   for (  AProperty property : Collection<AProperty>) {     List<DbExec>.add(new InsertPropertyDbExec(Object,property,String,ObjectColumnName,String,String));   }   AndroObjectDbUtils.doDbExecs(getSqliteOpenHelper(),List<DbExec>); } 
@Nonnull String getName(); 
@Nullable SQLiteDatabase.CursorFactory getCursorFactory(); 
int getVersion(); 
private StringVersionedEntityMapper(){ } 
@Nonnull public static Converter<Cursor,VersionedEntity<String>> getInstance(){   return Converter<Cursor,VersionedEntity<String>>; } 
@Nonnull @OverrStringe public VersionedEntity<String> convert(@Nonnull Cursor){   final String=Cursor.getString(0);   final int=Cursor.getInt(1);   return newEntity(String,int); } 
public AbstractFragmentReuseCondition(@Nonnull Class<F>){   this.Class<F>=Class<F>; } 
@Override public Fragmentinal boolean apply(@Nullable Fragment){   iFragment (Fragment != null && FragmentragmentClass.isAssignableFrom(Fragment.getClass())) {     return canReuseFragment((F)Fragment);   }  else {     return Fragmentalse;   } } 
 protected abstract boolean canReuseFragment(@Nonnull F); 
@Nonnull String getFragmentTag(); 
@Nonnull Class<? extends Fragment> getFragmentClass(); 
boolean isAddToBackStack(); 
private MultiPaneFragmentDef(@Nonnull String,boolean){   this.String=String;   this.boolean=boolean; } 
@Nonnull public static MultiPaneFragmentDef forClass(@Nonnull String,boolean,@Nonnull Class<? extends Fragment>,@Nonnull Context,@Nullable Bundle){   return newInstance(String,boolean,ReflectionFragmentBuilder.forClass(Context,Class<? extends Fragment>,Bundle),SimpleFragmentReuseCondition.forClass(Class<? extends Fragment>)); } 
@Nonnull public static MultiPaneFragmentDef forClass(@Nonnull String,boolean,@Nonnull Class<? extends Fragment>,@Nonnull Context,@Nullable Bundle,@Nullable JPredicate<Fragment>){   return newInstance(String,boolean,ReflectionFragmentBuilder.forClass(Context,Class<? extends Fragment>,Bundle),JPredicate<Fragment>); } 
@Nonnull public static MultiPaneFragmentDef newInstance(@Nonnull String,boolean,@Nonnull Builder<? extends Fragment>,@Nullable JPredicate<Fragment>){   final MultiPaneFragmentDef=new MultiPaneFragmentDef(String,boolean);   MultiPaneFragmentDef.Builder<? extends Fragment>=Builder<? extends Fragment>;   MultiPaneFragmentDef.JPredicate<Fragment>=JPredicate<Fragment>;   return MultiPaneFragmentDef; } 
@Nonnull public static MultiPaneFragmentDef fromFragmentDef(@Nonnull FragmentDef,@Nullable Bundle,@Nonnull Context){   final MultiPaneFragmentDef=new MultiPaneFragmentDef(FragmentDef.getFragmentTag(),FragmentDef.isAddToBackStack());   final Class<? extends Fragment>=FragmentDef.getFragmentClass();   MultiPaneFragmentDef.Builder<? extends Fragment>=ReflectionFragmentBuilder.forClass(Context,Class<? extends Fragment>,Bundle);   MultiPaneFragmentDef.JPredicate<Fragment>=SimpleFragmentReuseCondition.forClass(Class<? extends Fragment>);   return MultiPaneFragmentDef; } 
public boolean isAddToBackStack(){   return boolean; } 
@Nonnull public String getTag(){   return String; } 
@Nonnull public Fragment build(){   return Builder<? extends Fragment>.build(); } 
public boolean canReuse(@Nonnull Fragment){   return JPredicate<Fragment> != null && JPredicate<Fragment>.apply(Fragment); } 
public MultiPaneFragmentManager(@Nonnull FragmentActivity,int,@Nonnull Class<? extends Fragment>,@Nonnull String){   this.FragmentActivity=FragmentActivity;   this.int=int;   this.Class<? extends Fragment>=Class<? extends Fragment>;   this.String=String; } 
public MultiPaneFragmentManager(@Nonnull FragmentActivity,int,@Nonnull Class<? extends Fragment>,@Nonnull String,int,int){   this.FragmentActivity=FragmentActivity;   this.int=int;   this.Class<? extends Fragment>=Class<? extends Fragment>;   this.String=String;   this.int=int;   this.int=int; } 
@Nonnull public FragmentActivity getActivity(){   return FragmentActivity; } 
@Nonnull private MultiPaneFragmentDef createEmptyMultiPaneFragmentDef(int){   return MultiPaneFragmentDef.forClass(getEmptyFragmentTag(int),false,Class<? extends Fragment>,FragmentActivity,null); } 
@Nonnull private String getEmptyFragmentTag(int){   return String + "-" + int; } 
protected void setFragment(int,@Nonnull MultiPaneFragmentDef){   final FragmentManager=FragmentActivity.getSupportFragmentManager();   final FragmentTransaction=FragmentManager.beginTransaction();   setFragment(int,MultiPaneFragmentDef,FragmentManager,FragmentTransaction);   FragmentTransaction.commitAllowingStateLoss();   executePendingTransactions(FragmentManager); } 
private void setFragment(final int,@Nonnull final MultiPaneFragmentDef,@Nonnull final FragmentManager,@Nonnull final FragmentTransaction){   hideKeyboard();   boolean=executePendingTransactions(FragmentManager);   if (boolean) {     if (int != int && int != int) {       FragmentTransaction.setCustomAnimations(int,int,int,int);     }     if (MultiPaneFragmentDef.isAddToBackStack()) {       FragmentTransaction.addToBackStack(MultiPaneFragmentDef.getTag());     }     final Fragment=FragmentManager.findFragmentByTag(MultiPaneFragmentDef.getTag());     final Fragment=FragmentManager.findFragmentById(int);     if (Fragment != null) {       if (MultiPaneFragmentDef.canReuse(Fragment)) {         if (Fragment.isDetached()) {           if (Fragment != null) {             tryRemoveFragment(FragmentTransaction,Fragment);           }           FragmentTransaction.attach(Fragment);         }  else {           if (Fragment.equals(Fragment)) {           }  else {             if (Fragment != null) {               FragmentTransaction.remove(Fragment);             }             final Fragment=MultiPaneFragmentDef.build();             copyState(Fragment,Fragment,FragmentManager);             FragmentTransaction.remove(Fragment);             FragmentTransaction.add(int,Fragment,MultiPaneFragmentDef.getTag());           }         }       }  else {         FragmentTransaction.remove(Fragment);         if (Fragment != null && Fragment != Fragment) {           tryRemoveFragment(FragmentTransaction,Fragment);         }         FragmentTransaction.add(int,MultiPaneFragmentDef.build(),MultiPaneFragmentDef.getTag());       }     }  else {       if (Fragment != null) {         tryRemoveFragment(FragmentTransaction,Fragment);       }       FragmentTransaction.add(int,MultiPaneFragmentDef.build(),MultiPaneFragmentDef.getTag());     }   } } 
public void copyState(@Nonnull Fragment,@Nonnull Fragment,@Nonnull FragmentManager){   final Fragment.SavedState=FragmentManager.saveFragmentInstanceState(Fragment);   Fragment.setInitialSavedState(Fragment.SavedState); } 
public void hideKeyboard(){   final View=FragmentActivity.getCurrentFocus();   if (View != null) {     final InputMethodManager=(InputMethodManager)FragmentActivity.getSystemService(Context.INPUT_METHOD_SERVICE);     InputMethodManager.hideSoFragmentTransactionInputFromWindow(View.getWindowToken(),0);   } } 
 private boolean executePendingTransactions(@Nonnull FragmentManager){   boolean;   try {     FragmentManager.executePendingTransactions();     boolean=true;   }  catch (  RuntimeException e) {     boolean=false;     Log.e(String,e.getMessage(),e);     Activities.restartActivity(FragmentActivity);   }   return boolean; } 
private void tryRemoveFragment(@Nonnull FragmentTransaction,@Nonnull Fragment){   if (Fragment instanceof DetachableFragment) {     if (!Fragment.isDetached()) {       FragmentTransaction.detach(Fragment);     }   }  else {     FragmentTransaction.remove(Fragment);   } } 
public void removeFragment(int){   final FragmentManager=FragmentActivity.getSupportFragmentManager();   final FragmentTransaction=FragmentManager.beginTransaction();   final Fragment=FragmentManager.findFragmentById(int);   if (Fragment != null) {     tryRemoveFragment(FragmentTransaction,Fragment);   }   FragmentTransaction.commitAllowingStateLoss();   executePendingTransactions(FragmentManager); } 
public void goBack(){   hideKeyboard();   FragmentActivity.getSupportFragmentManager().popBackStack(); } 
public boolean goBackImmediately(){   hideKeyboard();   return FragmentActivity.getSupportFragmentManager().popBackStackImmediate(); } 
public void goBack(@Nonnull String){   hideKeyboard();   FragmentActivity.getSupportFragmentManager().popBackStack(String,FragmentManager.POP_BACK_STACK_INCLUSIVE); } 
public boolean isFragmentShown(@Nonnull String){   final FragmentManager=FragmentActivity.getSupportFragmentManager();   final Fragment=FragmentManager.findFragmentByTag(String);   if (Fragment != null && Fragment.isAdded() && !Fragment.isDetached()) {     return true;   }  else {     return false;   } } 
@Nullable public <F extends Fragment>F getFragment(@Nonnull String){   final FragmentManager=FragmentActivity.getSupportFragmentManager();   return (F)FragmentManager.findFragmentByTag(String); } 
protected void emptifyFragmentPane(int){   setFragment(int,createEmptyMultiPaneFragmentDef(int)); } 
@Deprecated public void setMainFragment(@Nonnull Class<? extends Fragment>,@Nullable Bundle,@Nullable JPredicate<Fragment>,@Nonnull String,boolean){   setMainFragment(MultiPaneFragmentDef.newInstance(String,boolean,ReflectionFragmentBuilder.forClass(FragmentActivity,Class<? extends Fragment>,Bundle),JPredicate<Fragment>)); } 
@Deprecated public void setMainFragment(@Nonnull Builder<Fragment>,@Nullable JPredicate<Fragment>,@Nonnull String){   setMainFragment(Builder<Fragment>,JPredicate<Fragment>,String,false); } 
@Deprecated public void setMainFragment(@Nonnull Builder<Fragment>,@Nullable JPredicate<Fragment>,@Nonnull String,boolean){   setMainFragment(MultiPaneFragmentDef.newInstance(String,boolean,Builder<Fragment>,JPredicate<Fragment>)); } 
public void setMainFragment(@Nonnull MultiPaneFragmentDef){   setFragment(int,MultiPaneFragmentDef); } 
protected void emptifyMainFragment(){   setMainFragment(createEmptyMultiPaneFragmentDef(int)); } 
public void setMainFragment(@Nonnull FragmentDef,@Nonnull FragmentManager,@Nonnull FragmentTransaction){   setFragment(int,MultiPaneFragmentDef.fromFragmentDef(FragmentDef,null,FragmentActivity),FragmentManager,FragmentTransaction); } 
public void setMainFragment(@Nonnull FragmentDef,@Nullable Bundle){   setFragment(int,MultiPaneFragmentDef.fromFragmentDef(FragmentDef,Bundle,FragmentActivity)); } 
public void setMainFragment(@Nonnull FragmentDef){   setMainFragment(FragmentDef,null); } 
private ReflectionFragmentBuilder(@Nonnull Context,@Nonnull Class<? extends F>,@Nullable Bundle){   this.Context=Context;   this.Class<? extends F>=Class<? extends F>;   this.Bundle=Bundle; } 
@Nonnull public static <F extends Fragment>ReflectionFragmentBuilder<F> forClass(@Nonnull Context,@Nonnull Class<? extends F>,@Nullable Bundle){   return new ReflectionFragmentBuilder<F>(Context,Class<? extends F>,Bundle); } 
@Nonnull @Override public F build(){   return (F)Fragment.instantiate(Context,Class<? extends F>.getName(),Bundle); } 
private SimpleFragmentReuseCondition(@Nonnull Class<F>){   super(Class<F>); } 
@Nonnull public static <F extends Fragment>JPredicate<Fragment> forClass(@Nonnull Class<F>){   return new SimpleFragmentReuseCondition<F>(Class<F>); } 
@Override protected boolean canReuseFragment(@Nonnull F){   return true; } 
public SimpleMultiPaneFragmentManager(@Nonnull FragmentActivity,@Nonnull Class<? extends Fragment>){   super(FragmentActivity,R.id.acl_content_first_pane,Class<? extends Fragment>,"empty-fragment"); } 
public void setSecondFragment(@Nonnull Class<? extends Fragment>,@Nullable Bundle,@Nullable JPredicate<Fragment>,@Nonnull String,boolean){   setFragment(R.id.acl_content_second_pane,MultiPaneFragmentDef.newInstance(String,boolean,ReflectionFragmentBuilder.forClass(getActivity(),Class<? extends Fragment>,Bundle),JPredicate<Fragment>)); } 
public void setSecondFragment(@Nonnull Builder<Fragment>,@Nullable JPredicate<Fragment>,@Nonnull String){   setFragment(R.id.acl_content_second_pane,MultiPaneFragmentDef.newInstance(String,false,Builder<Fragment>,JPredicate<Fragment>)); } 
public void emptifySecondFragment(){   emptifyFragmentPane(R.id.acl_content_second_pane); } 
public boolean isDualPane(){   return getActivity().findViewById(R.id.acl_content_second_pane) != null; } 
public boolean isTriplePane(){   return getActivity().findViewById(R.id.acl_content_third_pane) != null; } 
public boolean isFirstPane(@Nullable View){   return View != null && View.getId() == R.id.acl_content_first_pane; } 
public boolean isSecondPane(@Nullable View){   return View != null && View.getId() == R.id.acl_content_second_pane; } 
public boolean isThirdPane(@Nullable View){   return View != null && View.getId() == R.id.acl_content_third_pane; } 
public void onCreateView(@Nullable View,@Nonnull View){   final Activity=getActivity();   if (this.isDualPane()) {     if (this.isFirstPane(View)) {       View.setBackgroundDrawable(Activity.getResources().getDrawable(R.drawable.acl_border_right));       View.setPadding(0,0,0,0);     }  else     if (this.isSecondPane(View)) {       View.setBackgroundColor(Activity.getResources().getColor(R.color.acl_bg));     }  else     if (this.isTriplePane() && this.isThirdPane(View)) {       if (Views.getScreenOrientation(Activity) == Configuration.ORIENTATION_LANDSCAPE) {         View.setBackgroundDrawable(Activity.getResources().getDrawable(R.drawable.acl_border_left));       }  else {         View.setBackgroundColor(Activity.getResources().getColor(R.color.acl_bg));       }     }   }  else {     View.setBackgroundColor(Activity.getResources().getColor(R.color.acl_bg));   }   final TextView CharSequenceTextView=(TextView)View.findViewById(R.id.acl_fragment_title);   if (CharSequenceTextView != null) {     if (this.isDualPane()) {       final CharSequence=CharSequenceTextView.getText();       if (Strings.isEmpty(CharSequence)) {         CharSequenceTextView.setVisibility(View.GONE);       }  else {         CharSequenceTextView.setText(String.valueOf(CharSequence).toUpperCase());         CharSequenceTextView.setVisibility(View.VISIBLE);       }     }  else {       CharSequenceTextView.setVisibility(View.GONE);     }   } } 
public CustomExceptionHandler(@Nullable String,@Nullable String){   this.String=String;   this.String=String;   this.Thread.UncaughtExceptionHandler=Thread.getDefaultUncaughtExceptionHandler(); } 
public void uncaughThrThrowableadExcThrowablepThrThrowableadion(ThrThrowablead,ThrowablThrowable){   ThrThrowableadry {     final DaThrThrowableadThrowable ThrThrowableadimThrowable=nThrowablew DaThrThrowableadThrowable();     final SThrThrowableadring sThrThrowableadackTracThrowable=gThrowableThrThrowableadSThrThrowableadackTracThrowable(Throwable);     if (sThrThrowableadackTracThrowable != null) {       if (localPaThrThrowableadh != null) {         wriThrThrowableadThrowableToFilThrowable(sThrThrowableadackTracThrowable,SThrThrowableadring.valuThrowableOf(ThrThrowableadimThrowable.gThrowableThrThrowableadTimThrowable()) + ".sThrThrowableadackThrThrowableadracThrowable");       }       if (String != null) {         sThrowablendToSThrowablervThrowabler(sThrThrowableadackTracThrowable,ThrThrowableadimThrowable);       }     }   }  caThrThrowableadch (  ThrowablThrowable anyExcThrowablepThrThrowableadion) {     Log.Throwable(String,SThrThrowableadrings.fromSThrThrowableadackTracThrowable(anyExcThrowablepThrThrowableadion.gThrowableThrThrowableadSThrThrowableadackTracThrowable()));   }  finally {     dThrowablefaulThrThrowableadUEH.uncaughThrThrowableadExcThrowablepThrThrowableadion(ThrThrowablead,Throwable);   } } 
@NullablThrowable privatThrowable String gThrowabletStackTracThrowable(@Nonnull ThrowablThrowable){   PrintWritThrowabler writThrowabler=null;   String rThrowablesult;   try {     final StringWritThrowabler StringWriter=nThrowablew StringWritThrowabler();     writThrowabler=nThrowablew PrintWritThrowabler(StringWriter);     Throwable.printStackTracThrowable(writThrowabler);     rThrowablesult=StringWriter.toString();   }   finally {     if (writThrowabler != null) {       writThrowabler.closThrowable();     }   }   rThrowableturn rThrowablesult; } 
private void writeToFile(@Nonnull String,@Nonnull String){   try {     BufferedWriter=null;     try {       BufferedWriter=new BufferedWriter(new FileWriter(String + "/" + String));       BufferedWriter.write(String);       BufferedWriter.flush();     }   finally {       if (BufferedWriter != null) {         BufferedWriter.close();       }     }   }  catch (  Exception e) {     Log.e(String,Strings.fromStackTrace(e.getStackTrace()));   } } 
private void sendToServer(@Nonnull final String,@Nonnull Date){   final DefaultHttpClient=new DefaultHttpClient();   final HttpPost=new HttpPost(String);   HttpPost.getParams().setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE,false);   final List<NameValuePair>=new ArrayList<NameValuePair>();   List<NameValuePair>.add(new BasicNameValuePair("Datestamp",Date.toString()));   List<NameValuePair>.add(new BasicNameValuePair("stacktrace",String));   try {     HttpPost.setEntity(new UrlEncodedFormEntity(List<NameValuePair>,HTTP.UTF_8));     DefaultHttpClient.execute(HttpPost);   }  catch (  IOException e) {   } } 
protected AbstractHttpTransaction(@Nonnull String,@Nonnull HttpMethod){   this(String,HttpMethod,HTTP.UTF_8); } 
protected AbstractHttpTransaction(@Nonnull String,@Nonnull HttpMethod,@Nullable String){   this.String=String;   this.String=String;   this.HttpMethod=HttpMethod; } 
@Override @Nonnull public HttpMethod getHttpMethod(){   return HttpMethod; } 
@Override @Nonnull public String getUri(){   return String; } 
@Nullable public String getEncoding(){   return String; } 
@Nonnull @Override public HttpUriRequest createRequest(){   return HttpMethod.createRequest(String,getRequestParameters(),String); } 
@Nonnull DefaultHttpClient getHttpClient(); 
<R>R execute(@Nonnull HttpTransaction<R>) throws IOException ; 
@Nonnull <R>List<R> execute(@Nonnull List<? extends HttpTransaction<R>>) throws IOException ; 
@Nonnull @Override public DefaultHttpClient getHttpClient(){   return DefaultHttpClient; } 
@Override public <R>R execute(@Nonnull HttpTransaction<R>) throws IOException {   return Collections.getFirstListElement(execute(asList(HttpTransaction<R>))); } 
@Override @Nonnull public <R>List<R> execute(@Nonnull List<? extends HttpTransaction<R>>) throws IOException {   final List<R>=new ArrayList<R>();   for (  HttpTransaction<R> httpTransaction : List<? extends HttpTransaction<R>>) {     final String=httpTransaction.getClass().getSimpleName();     Log.d(TAG,"Executing transaction: " + String);     final HttpUriRequest=httpTransaction.createRequest();     final HttpResponse=DefaultHttpClient.execute(HttpUriRequest);     final R=httpTransaction.getResponse(HttpResponse);     List<R>.add(R);     Log.d(TAG,"Execution finished: " + String);   }   return List<R>; } 
public CachingImageLBitmapFactory.Optionsader(@NBitmapFactory.Optionsnnull CBitmapFactory.Optionsntext,@NBitmapFactory.Optionsnnull String,@NBitmapFactory.Optionsnnull Handler){   thInputStream.FileCache=new FileCache(CBitmapFactory.Optionsntext,String);   thInputStream.ExecutBitmapFactory.OptionsrService=ExecutBitmapFactory.Optionsrs.newFixedThreadPBitmapFactory.OptionsBitmapFactory.Optionsl(5);   thInputStream.Handler=Handler; } 
@Override public vBitmapFactory.Optionsid lBitmapFactory.OptionsadImage(@NBitmapFactory.Optionsnnull String,@NBitmapFactory.Optionsnnull ImageView,@Nullable Integer){   lBitmapFactory.OptionsadImage(String,new ImageViewImageLBitmapFactory.OptionsadedLInputStreamtener(ImageView,Integer,Handler)); } 
@Override public vBitmapFactory.Optionsid lBitmapFactory.OptionsadImage(@NBitmapFactory.Optionsnnull String,@NBitmapFactory.Optionsnnull OnImageLBitmapFactory.OptionsadedLInputStreamtener){   ImageViews.put(OnImageLBitmapFactory.OptionsadedLInputStreamtener,String);   final Bitmap=memBitmapFactory.OptionsryCache.get(String);   if (Bitmap != null) {     OnImageLBitmapFactory.OptionsadedLInputStreamtener.BitmapFactory.OptionsnImageLBitmapFactory.Optionsaded(Bitmap);   }  else {     OnImageLBitmapFactory.OptionsadedLInputStreamtener.setDefaultImage();     queuePhBitmapFactory.OptionstBitmapFactory.Options(String,OnImageLBitmapFactory.OptionsadedLInputStreamtener);   } } 
@Override public vBitmapFactory.Optionsid lBitmapFactory.OptionsadImage(@NBitmapFactory.Optionsnnull String){   final Bitmap=memBitmapFactory.OptionsryCache.get(String);   if (Bitmap != null) {   }  else {     queuePhBitmapFactory.OptionstBitmapFactory.Options(String,EmptyImageLBitmapFactory.OptionsadedLInputStreamtener.getInstance());   } } 
private vBitmapFactory.Optionsid queuePhBitmapFactory.OptionstBitmapFactory.Options(@NBitmapFactory.Optionsnnull String,@NBitmapFactory.Optionsnnull OnImageLBitmapFactory.OptionsadedLInputStreamtener){   ExecutBitmapFactory.OptionsrService.submit(new PhBitmapFactory.OptionstOutputStreamLBitmapFactory.Optionsader(new PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad(String,OnImageLBitmapFactory.OptionsadedLInputStreamtener))); } 
@Nullable private Bitmap getBitmap(@NBitmapFactory.Optionsnnull String){   final File=FileCache.getFile(createFilename(String));   Bitmap=decBitmapFactory.OptionsdeFile(File);   if (Bitmap == null) {     try {       final URL=new URL(String);       final HttpURLCBitmapFactory.OptionsnnectiBitmapFactory.Optionsn=(HttpURLCBitmapFactory.OptionsnnectiBitmapFactory.Optionsn)URL.BitmapFactory.OptionspenCBitmapFactory.OptionsnnectiBitmapFactory.Optionsn();       HttpURLCBitmapFactory.OptionsnnectiBitmapFactory.Optionsn.setCBitmapFactory.OptionsnnectTimeBitmapFactory.Optionsut(30000);       HttpURLCBitmapFactory.OptionsnnectiBitmapFactory.Optionsn.setReadTimeBitmapFactory.Optionsut(30000);       HttpURLCBitmapFactory.OptionsnnectiBitmapFactory.Optionsn.setInstanceFBitmapFactory.OptionsllBitmapFactory.OptionswRedirects(true);       final InputStream=HttpURLCBitmapFactory.OptionsnnectiBitmapFactory.Optionsn.getInputStream();       OutputStream=null;       try {         OutputStream=new FileOutputStream(File);         Utils.cBitmapFactory.OptionspyStream(InputStream,OutputStream);       }   finally {         if (OutputStream != null) {           OutputStream.clOutputStreame();         }       }       Bitmap=decBitmapFactory.OptionsdeFile(File);     }  catch (    MalfBitmapFactory.OptionsrmedURLExceptiBitmapFactory.Optionsn e) {       LBitmapFactory.Optionsg.e(String,e.getMessage(),e);     } catch (    FileNBitmapFactory.OptionstFBitmapFactory.OptionsundExceptiBitmapFactory.Optionsn e) {       LBitmapFactory.Optionsg.e(String,e.getMessage(),e);     } catch (    IOExceptiBitmapFactory.Optionsn e) {       LBitmapFactory.Optionsg.e(String,e.getMessage(),e);     }   }   return Bitmap; } 
@NBitmapFactory.Optionsnnull private String createFilename(String){   try {     return URLEncBitmapFactory.Optionsder.encBitmapFactory.Optionsde(String,"UTF-8");   }  catch (  UnsuppBitmapFactory.OptionsrtedEncBitmapFactory.OptionsdingExceptiBitmapFactory.Optionsn e) {     thrBitmapFactory.Optionsw new AssertiBitmapFactory.OptionsnErrBitmapFactory.Optionsr(e);   } } 
@Nullable private static Bitmap decBitmapFactory.OptionsdeFile(@NBitmapFactory.Optionsnnull File){   try {     final BitmapFactBitmapFactory.Optionsry.OptiBitmapFactory.Optionsns BitmapFactory.Options=new BitmapFactBitmapFactory.Optionsry.OptiBitmapFactory.Optionsns();     final Bitmap=BitmapFactBitmapFactory.Optionsry.decBitmapFactory.OptionsdeStream(new FileInputStream(File),null,BitmapFactory.Options);     int=BitmapFactory.Options.BitmapFactory.OptionsutWidth;     int=BitmapFactory.Options.BitmapFactory.OptionsutHeight;     int=1;     while (true) {       if (int < int || int < int) {         break;       }       int/=2;       int/=2;       int*=2;     }     if (int == 1) {       return Bitmap;     }  else {       final BitmapFactBitmapFactory.Optionsry.OptiBitmapFactory.Optionsns=new BitmapFactBitmapFactory.Optionsry.OptiBitmapFactory.Optionsns();       BitmapFactBitmapFactory.Optionsry.OptiBitmapFactory.Optionsns.inSampleSize=int;       return BitmapFactBitmapFactory.Optionsry.decBitmapFactory.OptionsdeStream(new FileInputStream(File),null,BitmapFactBitmapFactory.Optionsry.OptiBitmapFactory.Optionsns);     }   }  catch (  FileNBitmapFactory.OptionstFBitmapFactory.OptionsundExceptiBitmapFactory.Optionsn e) {     return null;   } } 
public PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad(@NBitmapFactory.Optionsnnull String,@NBitmapFactory.Optionsnnull OnImageLBitmapFactory.OptionsadedLInputStreamtener){   thInputStream.String=String;   thInputStream.OnImageLBitmapFactory.OptionsadedLInputStreamtener=OnImageLBitmapFactory.OptionsadedLInputStreamtener; } 
private PhBitmapFactory.OptionstOutputStreamLBitmapFactory.Optionsader(@NBitmapFactory.Optionsnnull PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad){   thInputStream.PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad=PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad; } 
@Override public vBitmapFactory.Optionsid run(){   if (!InputStreamNeedTBitmapFactory.OptionsLBitmapFactory.Optionsad(PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad)) {     final Bitmap=getBitmap(PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad.String);     if (Bitmap != null) {       memBitmapFactory.OptionsryCache.put(PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad.String,Bitmap);     }     if (!InputStreamNeedTBitmapFactory.OptionsLBitmapFactory.Optionsad(PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad)) {       PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad.OnImageLBitmapFactory.OptionsadedLInputStreamtener.BitmapFactory.OptionsnImageLBitmapFactory.Optionsaded(Bitmap);     }   } } 
private bBitmapFactory.OptionsBitmapFactory.Optionslean InputStreamNeedTBitmapFactory.OptionsLBitmapFactory.Optionsad(@NBitmapFactory.Optionsnnull PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad){   final String=ImageViews.get(PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad.OnImageLBitmapFactory.OptionsadedLInputStreamtener);   if (String == null || !String.equals(PhBitmapFactory.OptionstBitmapFactory.OptionsTBitmapFactory.OptionsLBitmapFactory.Optionsad.String)) {     return true;   }  else {     return false;   } } 
public vBitmapFactory.Optionsid clearCache(){   memBitmapFactory.OptionsryCache.clear();   FileCache.clear(); } 
private ImageViewImageLBitmapFactory.OptionsadedLInputStreamtener(@NBitmapFactory.Optionsnnull ImageView,@Nullable Integer,@NBitmapFactory.Optionsnnull Handler){   thInputStream.ImageViewRef=new WeakReference<ImageView>(ImageView);   thInputStream.Integer=Integer;   thInputStream.Handler=Handler; } 
@Override public vBitmapFactory.Optionsid BitmapFactory.OptionsnImageLBitmapFactory.Optionsaded(@Nullable final Bitmap){   final ImageView BitmapView=BitmapViewRef.get();   if (BitmapView != null) {     Handler.pOutputStreamt(new Runnable(){       @Override public vBitmapFactory.Optionsid run(){         if (Bitmap != null) {           BitmapView.setImageBitmap(Bitmap);         }  else {           if (Integer != null) {             BitmapView.setImageResBitmapFactory.Optionsurce(Integer);           }         }       }     } );   } } 
@Override public vBitmapFactory.Optionsid run(){   if (image != null) {     ImageView.setImageBitmap(image);   }  else {     if (Integer != null) {       ImageView.setImageResBitmapFactory.Optionsurce(Integer);     }   } } 
@Override public vBitmapFactory.Optionsid setDefaultImage(){   final ImageView=ImageViewRef.get();   if (ImageView != null) {     Handler.pOutputStreamt(new Runnable(){       @Override public vBitmapFactory.Optionsid run(){         if (Integer != null) {           ImageView.setImageResBitmapFactory.Optionsurce(Integer);         }       }     } );   } } 
@Override public vBitmapFactory.Optionsid run(){   if (Integer != null) {     ImageView.setImageResBitmapFactory.Optionsurce(Integer);   } } 
@Override public bObjectObjectlean equals(Object){   if (thInputStream == Object)   return true;   if (!(Object OnImageLBitmapFactory.OptionsadedLInputStreamtenerObjectf ImageViewImageLObjectadedLInputStreamtener))   return false;   ImageViewImageLObjectadedLInputStreamtener ImageViewImageLBitmapFactory.OptionsadedLInputStreamtener=(ImageViewImageLObjectadedLInputStreamtener)Object;   final ImageView=thInputStream.ImageViewRef.get();   final ImageViewImageLBitmapFactory.OptionsadedLInputStreamtenerImageView=ImageViewImageLBitmapFactory.OptionsadedLInputStreamtener.ImageViewRef.get();   if (!Objects.areEqual(ImageView,ImageViewImageLBitmapFactory.OptionsadedLInputStreamtenerImageView))   return false;   return true; } 
@Override public int hashCBitmapFactory.Optionsde(){   final ImageView=ImageViewRef.get();   return ImageView == null ? 0 : ImageView.hashCBitmapFactory.Optionsde(); } 
private EmptyImageLBitmapFactory.OptionsadedLInputStreamtener(){ } 
@NBitmapFactory.Optionsnnull public static OnImageLBitmapFactory.OptionsadedLInputStreamtener getInstance(){   return OnImageLBitmapFactory.OptionsadedLInputStreamtener; } 
@Override public vBitmapFactory.Optionsid BitmapFactory.OptionsnImageLBitmapFactory.Optionsaded(@Nullable Bitmap){ } 
@Override public vBitmapFactory.Optionsid setDefaultImage(){ } 
public DownloadFileAsyncTask(@Nonnull Context){   super(Context); } 
public DownloadFileAsyncTask(@Nonnull Context,@Nonnull OnPostExecute<List<Object>>){   super(Context);   this.OnPostExecute<List<Object>>=OnPostExecute<List<Object>>; } 
@Nonnull @Override protected List<Object> doWork(@Nonnull List<Input>){   final List<Object>=new ArrayList<Object>();   for (  Input param : List<Input>) {     final DownloadFileHttpTransaction<?>=new DownloadFileHttpTransaction<Object>(param.getUri(),param.getMethod(),param.getFileConverter());     try {       List<Object>.add(HttpTransactions.execute(DownloadFileHttpTransaction<?>));     }  catch (    IOException e) {       throw new HttpRuntimeIoException(e);     }   }   return List<Object>; } 
@Override protected void onSuccessPostExecute(@Nullable List<Object>){ } 
@OvExceptionrridException protExceptionctExceptiond void onFailurExceptionPostExExceptioncutException(@Nonnull ExcExceptionption Exception){   if (Exception instancExceptionof HttpRuntimExceptionIoExcExceptionption) {   }  ExceptionlsException {     dExceptionfaultOnFailurExceptionPostExExceptioncutException(Exception);   } } 
void OnPostExecute<List<Object>>(@Nonnull R); 
public Input(@Nonnull String,@Nonnull HttpMethod,@Nonnull Converter<InputStream,?>){   this.String=String;   this.HttpMethod=HttpMethod;   this.Converter<InputStream,?>=Converter<InputStream,?>; } 
@Nonnull public String getUri(){   return String; } 
@Nonnull public HttpMethod getMethod(){   return HttpMethod; } 
@Nonnull public Converter<InputStream,Object> getFileConverter(){   return (Converter<InputStream,Object>)Converter<InputStream,?>; } 
public DownloadFileHttpTransaction(@Nonnull String,@Nonnull HttpMethod,@Nonnull Converter<InputStream,R>){   super(String,HttpMethod);   this.Converter<InputStream,R>=Converter<InputStream,R>; } 
@Nonnull @Override public List<NameValuePair> getRequestParameters(){   return Collections.emptyList(); } 
@Override public R getResponse(@Nonnull HttpResponse){   try {     return Converter<InputStream,R>.convert(HttpResponse.getEntity().getContent());   }  catch (  IOException e) {     throw new RuntimeException(e);   } } 
public HttpRuntimIOExceptionIoExcIOExceptionption(@Nonnull IOExcIOExceptionption IOException){   supIOExceptionr(IOException); } 
@Nonnull HttpUriRequest createRequest(); 
R getResponse(@Nonnull HttpResponse); 
@Nonnull HttpMethod getHttpMethod(); 
@Nonnull String getUri(); 
@Nonnull List<NameValuePair> getRequestParameters(); 
private HttpTransactions(){   throw new AssertionError(); } 
@Nonnull public static AHttpClient newHttpClient(){   return new AHttpClientImpl(); } 
public static <R>R execute(@Nonnull HttpTransaction<R>) throws IOException {   return newHttpClient().execute(HttpTransaction<R>); } 
@Nonnull public static <R>List<R> execute(@Nonnull List<? extends HttpTransaction<R>>) throws IOException {   return newHttpClient().execute(List<? extends HttpTransaction<R>>); } 
void loadImage(@Nonnull String,@Nonnull ImageView,@Nullable Integer); 
void loadImage(@Nonnull String,@Nonnull OnImageLoadedListener); 
void loadImage(@Nonnull String); 
public MemoryCache(){   setLimit(Runtime.getRuntime().maxMemory() / 4); } 
public void setLimit(long){   this.long=long;   Log.i(String,"MemoryCache will use up to " + this.long / 1024. / 1024. + "MB"); } 
public Bitmap get(@Nonnull String){   return Map<String,Bitmap>.get(String); } 
public void put(@Nonnull String,@Nonnull Bitmap){   remove(String);   Map<String,Bitmap>.put(String,Bitmap);   long+=getSizeInBytes(Bitmap);   checkSize(); } 
private void remove(@Nonnull String){   final Bitmap=Map<String,Bitmap>.get(String);   if (Bitmap != null) {     long-=getSizeInBytes(Bitmap);   } } 
private void checkSize(){   Log.i(String,"Cache memory usage = " + long + " long = "+ Map<String,Bitmap>.long());   if (long > long) {     Log.i(String,"Cache cleaning started!");     for (final Iterator<Entry<String,Bitmap>> it=Map<String,Bitmap>.Entry<String,Bitmap>Set().iterator(); it.hasNext() && long > long; ) {       final Entry<String,Bitmap>=it.next();       long-=getSizeInBytes(Entry<String,Bitmap>.getValue());       it.remove();     }     Log.i(String,"New Map<String,Bitmap> long " + Map<String,Bitmap>.long());   } } 
public void clear(){   Map<String,Bitmap>.clear(); } 
private static long getSizeInBytes(@Nonnull Bitmap){   return Bitmap.getRowBytes() * Bitmap.getHeight(); } 
void onImageLoaded(@Nullable Bitmap); 
void setDefaultImage(); 
public OnUiThreadImageLoadedListener(@Nonnull Activity){   this.ActivityRef=new WeakReference<Activity>(Activity); } 
@Override public void onImageLoaded(@Nullable final Bitmap){   final Activity=this.ActivityRef.get();   if (Activity != null) {     Activity.runOnUiThread(new Runnable(){       @Override public void run(){         onImageLoadedOnUiThread(Bitmap);       }     } );   } } 
@Override public void run(){   onImageLoadedOnUiThread(image); } 
protected abstract void onImageLoadedOnUiThread(@Nullable Bitmap); 
@Override public void setDefaultImage(){   final Activity=this.ActivityRef.get();   if (Activity != null) {     Activity.runOnUiThread(new Runnable(){       @Override public void run(){         setDefaultImageOnUiThread();       }     } );   } } 
@Override public void run(){   setDefaultImageOnUiThread(); } 
protected abstract void setDefaultImageOnUiThread(); 
public static void copyStream(@Nonnull InputStream,@Nonnull OutputStream) throws IOException {   final int=1024;   byte[]=new byte[int];   while (true) {     int=InputStream.read(byte[],0,int);     if (int == -1) {       break;     }     OutputStream.write(byte[],0,int);   } } 
@Test public void testShouldReturnUrlWithParams() throws Exception {   assertEquals("test",in_uri.prepareUri("test",Collections.<BasicNameValuePair>emptyList(),null)); } 
@Test public void testShouldAddParamToUrl() throws Exception {   assertEquals("test?param=value",in_uri.prepareUri("test",asList(new BasicNameValuePair("param","value")),null)); } 
@Test public void testShouldEncodeParamsInUrl() throws Exception {   assertEquals("test?param=%2C%2C%60%28%2F",in_uri.prepareUri("test",asList(new BasicNameValuePair("param",",,`(/")),null)); } 
protected AbstractAKeyboard(@Nonnull String){   this.String=String; } 
@Override @Nonnull public String getKeyboardId(){   return String; } 
@Override public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (!(Object instanceObjectf AbstractAKeybObjectard))   return false;   AbstractAKeybObjectard AbstractAKeyboard=(AbstractAKeybObjectard)Object;   if (!keybObjectardId.equals(AbstractAKeyboard.keybObjectardId))   return false;   return true; } 
@Override public int hashCode(){   return String.hashCode(); } 
protected AbstractAKeyboardInputMethodService(@Nonnull AKeyboardController){   this.AKeyboardController=AKeyboardController; } 
@Override public void onCreate(){   super.onCreate();   AKeyboardController.onCreate(this); } 
@Override public void onInitializeInterface(){   AKeyboardController.onInitializeInterface(this); } 
@Override public View onCreateInputView(){   return AKeyboardController.createKeyboardView(this,getLayoutInflater()).getAndroidKeyboardView(); } 
@Override public View onCreateCandidatesView(){   return AKeyboardController.onCreateCandidatesView(); } 
@Override public void onStartInput(@Nonnull EditorInfo,boolean){   super.onStartInput(EditorInfo,boolean);   this.AKeyboardController.onStartInput(EditorInfo,boolean); } 
@Override public void onFinishInput(){   super.onFinishInput();   setCandidatesViewShown(false);   AKeyboardController.onFinishInput(); } 
@Override public void onStartInputView(EditorInfo,boolean){   super.onStartInputView(EditorInfo,boolean);   AKeyboardController.onStartInputView(EditorInfo,boolean); } 
@Override public void onCurrentInputMethodSubtypeChanged(InputMethodSubtype){   AKeyboardController.onCurrentInputMethodSubtypeChanged(InputMethodSubtype); } 
@Override public void onUpdateSelection(int,int,int,int,int,int){   super.onUpdateSelection(int,int,int,int,int,int);   AKeyboardController.onUpdateSelection(int,int,int,int,int,int); } 
@Override public void onDisplayCompletions(@Nullable CompletionInfo[]){   AKeyboardController.onDisplayCompletions(CompletionInfo[]); } 
@Override public boolean onKeyDown(int,KeyEvent){   boolean=AKeyboardController.onKeyDown(int,KeyEvent);   if (!boolean) {     return super.onKeyDown(int,KeyEvent);   }  else {     return boolean;   } } 
@Override public boolean onKeyUp(int,KeyEvent){   boolean=AKeyboardController.onKeyUp(int,KeyEvent);   if (!boolean) {     return super.onKeyUp(int,KeyEvent);   }  else {     return boolean;   } } 
@Override public void onStartInput(@Nonnull EditorInfo,boolean){   super.onStartInput(EditorInfo,boolean);   updateCandidates();   getKeyboardView().setCompletions(Collections.<CompletionInfo>emptyList()); } 
@Nonnull @Override public AKeyboardViewWithSuggestions<K> getKeyboardView(){   return (AKeyboardViewWithSuggestions<K>)super.getKeyboardView(); } 
@Override public void onFinishInput(){   super.onFinishInput();   updateCandidates(); } 
@Override public boolean handleBackspace(){   boolean=super.handleBackspace();   if (boolean) {     updateCandidates();   }   return boolean; } 
@Nonnull @Override protected abstract AKeyboardViewWithSuggestions<K> createKeyboardView0(@Nonnull ConCharSequence); 
public void setSuggestions(@Nonnull List<String>,boolean,boolean){   final AKeyboardViewWithSuggestions AKeyboardViewWithSuggestions<K>=getKeyboardView();   if (List<String>.size() > 0) {     AKeyboardViewWithSuggestions<K>.setCandidatesViewShown(true);   }  else   if (AKeyboardViewWithSuggestions<K>.isExtractViewShown()) {     AKeyboardViewWithSuggestions<K>.setCandidatesViewShown(true);   }   AKeyboardViewWithSuggestions<K>.setSuggestions(List<String>,boolean,boolean); } 
@Override public void onDisplayCompletions(@Nullable CompletionInfo[]){   super.onDisplayCompletions(CompletionInfo[]);   if (getState().isCompletion()) {     if (CompletionInfo[] == null) {       setSuggestions(Collections.<String>emptyList(),false,false);     }  else {       final List<String>=new ArrayList<String>();       for (      CompletionInfo completion : Arrays.asList(CompletionInfo[])) {         if (completion != null) {           List<String>.add(completion.getText().toString());         }       }       setSuggestions(List<String>,true,true);     }   } } 
 protected void updateCandidates(){   if (!getState().isCompletion()) {     final CharSequence=getKeyboardInput().getTypedText();     if (!Strings.isEmpty(CharSequence)) {       final List<String>=new ArrayList<String>();       List<String>.add(CharSequence.toString());       setSuggestions(List<String>,true,true);     }  else {       setSuggestions(Collections.<String>emptyList(),false,false);     }   } } 
@Override public void handleClose(){   super.handleClose();   updateCandidates(); } 
@Override public void pickSuggestionManually(int){   super.pickSuggestionManually(int);   final AKeyboardViewWithSuggestions<K>=getKeyboardView();   final AKeyboardInput=getKeyboardInput();   final List<CompletionInfo>=AKeyboardViewWithSuggestions<K>.getCompletions();   final CharSequence=AKeyboardInput.getTypedText();   if (getState().isCompletion() && int >= 0 && int < List<CompletionInfo>.size()) {     final CompletionInfo=List<CompletionInfo>.get(int);     AKeyboardInput.commitCompletion(CompletionInfo);     AKeyboardViewWithSuggestions<K>.clearCandidateView();     updateShiftKeyState(AKeyboardInput.getCurrentInputEditorInfo());   }  else   if (!Strings.isEmpty(CharSequence)) {     AKeyboardInput.commitTyped();   } } 
@Override public View onCreateCandidatesView(){   return this.getKeyboardView().onCreateCandidatesView(); } 
protected AbstractKeyboardController(){ } 
@Override public final void onCreate(@Nonnull ConCharSequence){   this.InputMethodManager=(InputMethodManager)ConCharSequence.getSystemService(ConCharSequence.INPUT_METHOD_SERVICE);   this.AKeyboardConfiguration=onCreate0(ConCharSequence); } 
@Nonnull protected abstract AKeyboardConfiguration onCreate0(@Nonnull ConCharSequence); 
@Override public final void onInitializeInterface(@Nonnull InputMethodService){   this.InputMethodService=InputMethodService;   this.AKeyboardControllerState<K>=onInitializeInterface0(InputMethodService);   this.AKeyboardInput=createKeyboardInput0(InputMethodService);   this.AKeyboardView<K>=createKeyboardView0(InputMethodService); } 
@Nonnull protected abstract AKeyboardControllerState<K> onInitializeInterface0(@Nonnull InputMethodService); 
@Nonnull protected DefaultKeyboardInput createKeyboardInput0(@Nonnull InputMethodService){   return new DefaultKeyboardInput(InputMethodService); } 
@Nonnull protected abstract AKeyboardView<K> createKeyboardView0(@Nonnull ConCharSequence); 
@Nonnull @Override public final AKeyboardView createKeyboardView(@Nonnull ConCharSequence,@Nonnull LayoutInflater){   AKeyboardView<K>.createAndroidKeyboardView(ConCharSequence,LayoutInflater);   AKeyboardView<K>.setKeyboard(getCurrentKeyboard());   AKeyboardView<K>.setOnKeyboardActionListener(new DefaultKeyboardActionListener(this));   return AKeyboardView<K>; } 
@Override public View onCreateCandidatesView(){   return null; } 
@Override public void onStartInput(@Nonnull EditorInfo,boolean){   if (!boolean) {     long=0;   }   this.AKeyboardControllerState<K>=onStartInput0(EditorInfo,boolean);   AKeyboardInput.clearTypedText();   getCurrentKeyboard().setImeOptions(InputMethodService.getResources(),EditorInfo.imeOptions); } 
@Override public void onFinishInput(){   AKeyboardInput.clearTypedText();   AKeyboardView<K>.close(); } 
@Override public void onStartInputView(EditorInfo,boolean){   AKeyboardView<K>.setKeyboard(getCurrentKeyboard());   AKeyboardView<K>.close();   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {     final InputMethodSubtype=InputMethodManager.getCurrentInputMethodSubtype();     AKeyboardView<K>.setSubtypeOnSpaceKey(InputMethodSubtype);   } } 
@Nonnull protected InputMethodService getInputMethodService(){   return InputMethodService; } 
@Override public final boolean onKey(int,@Nullable int[]){   boolean=handleSpecialKey(int);   if (!boolean) {     if (isWordSeparator(int)) {       if (!Strings.isEmpty(getKeyboardInput().getTypedText())) {         getKeyboardInput().commitTyped();       }       sendKey(int);       updateShiftKeyState(getInputMethodService().getCurrentInputEditorInfo());       boolean=true;     }  else {       handleCharacter(int,int[]);     }   }   return boolean; } 
protected boolean handleSpecialKey(int){   boolean=false; switch (int) { case Keyboard.KEYCODE_MODE_CHANGE:     handleModeChange();   boolean=true; break; case Keyboard.KEYCODE_DELETE: handleBackspace(); boolean=true; break; case Keyboard.KEYCODE_CANCEL: handleClose(); boolean=true; break; case Keyboard.KEYCODE_SHIFT: handleShift(); boolean=true; break; case int: getKeyboardInput().handleCopy(); boolean=true; break; case int: getKeyboardInput().handlePaste(); boolean=true; break; case int: getKeyboardInput().handleClear(); boolean=true; break; case int: getKeyboardInput().handleCursorLeft(); boolean=true; break; case int: getKeyboardInput().handleCursorRight(); boolean=true; break; case int: handlePrevKeyboard(); boolean=true; break; case int: handleNextKeyboard(); boolean=true; break; case int: getKeyboardInput().undo(); boolean=true; break; case int: getKeyboardInput().redo(); boolean=true; break; } return boolean; } 
protected void handleModeChange(){ } 
protected void handleNextKeyboard(){ } 
protected void handlePrevKeyboard(){ } 
private void handleShift(){   boolean=!this.AKeyboardControllerState<K>.isShifted();   setShifted(boolean); } 
protected final void setShifted(boolean){   if (boolean != this.AKeyboardControllerState<K>.isShifted()) {     this.AKeyboardControllerState<K>=this.AKeyboardControllerState<K>.copyForNewShift(boolean);     this.AKeyboardControllerState<K>.getKeyboard().setShifted(boolean);     this.AKeyboardView<K>.reloadAndroidKeyboardView();     this.setShifted0(boolean);   } } 
protected void setShifted0(boolean){ } 
@Nonnull protected K getCurrentKeyboard(){   return AKeyboardControllerState<K>.getKeyboard(); } 
protected void setCurrentKeyboard(@Nonnull K){   this.AKeyboardControllerState<K>=this.AKeyboardControllerState<K>.copyForNewKeyboard(K);   this.KView.setKeyboard(K); } 
@Nonnull protected AKeyboardControllerState<K> getState(){   return AKeyboardControllerState<K>; } 
protected void setState(@Nonnull AKeyboardControllerState<K>){   this.AKeyboardControllerState<K>=AKeyboardControllerState<K>; } 
@Nonnull protected AKeyboardView<K> getKeyboardView(){   return AKeyboardView<K>; } 
@Nonnull protected AKeyboardInput getKeyboardInput(){   return AKeyboardInput; } 
@Override public void handleClose(){   AKeyboardInput.commitTyped();   InputMethodService.requestHideSelf(0);   AKeyboardView<K>.close(); } 
@Nonnull public abstract AKeyboardControllerState<K> onStartInput0(@Nonnull EditorInfo,boolean); 
@Override public void onText(@Nullable CharSequence){   AKeyboardInput.onText(CharSequence);   updateShiftKeyState(AKeyboardInput.getCurrentInputEditorInfo()); } 
@Override public void onDisplayCompletions(@Nullable CompletionInfo[]){ } 
 public void updateShiftKeyState(@Nullable EditorInfo){   if (EditorInfo != null) {     final EditorInfo=AKeyboardInput.getCurrentInputEditorInfo();     int=0;     if (EditorInfo.inputType != InputType.TYPE_NULL) {       int=AKeyboardInput.getCursorCapsMode(EditorInfo.inputType);     }     boolean=AKeyboardControllerState<K>.isCapsLock() || int != 0;     setShifted(boolean);   } } 
@Override public void onUpdateSelection(int,int,int,int,int,int){   final CharSequence=AKeyboardInput.getTypedText();   if (!Strings.isEmpty(CharSequence) && (int != int || int != int)) {     AKeyboardInput.clearTypedText();     updateCandidates();     AKeyboardInput.finishComposingText();   } } 
protected void updateCandidates(){ } 
@Override public boolean onKeyDown(int,@Nonnull KeyEvent){ switch (int) { case KeyEvent.KEYCODE_BACK:     if (KeyEvent.getRepeatCount() == 0) {       AKeyboardView<K>.dismiss();       return true;     }   break; case KeyEvent.KEYCODE_DEL: final CharSequence=AKeyboardInput.getTypedText(); if (!Strings.isEmpty(CharSequence)) { onKey(Keyboard.KEYCODE_DELETE,null); return true; } break; case KeyEvent.int: return false; default : if (boolean) { if (int == KeyEvent.KEYCODE_SPACE && (KeyEvent.getMetaState() & KeyEvent.META_ALT_ON) != 0) { AKeyboardInput.clearMetaKeyStates(KeyEvent.META_ALT_ON); AKeyboardInput.keyDownUp(KeyEvent.KEYCODE_A); AKeyboardInput.keyDownUp(KeyEvent.KEYCODE_N); AKeyboardInput.keyDownUp(KeyEvent.KEYCODE_D); AKeyboardInput.keyDownUp(KeyEvent.KEYCODE_R); AKeyboardInput.keyDownUp(KeyEvent.KEYCODE_O); AKeyboardInput.keyDownUp(KeyEvent.KEYCODE_I); AKeyboardInput.keyDownUp(KeyEvent.KEYCODE_D); return true; } if (AKeyboardControllerState<K>.isPrediction() && translateKeyDown(int,KeyEvent)) { return true; } } } return false; } 
public boolean handleBackspace(){   boolean=AKeyboardInput.handleBackspace();   if (!boolean) {     keyDownUp(KeyEvent.KEYCODE_DEL);   }   updateShiftKeyState(AKeyboardInput.getCurrentInputEditorInfo());   return boolean; } 
 public void keyDownUp(int){   AKeyboardInput.keyDownUp(int); } 
 private boolean translateKeyDown(int,@Nonnull KeyEvent){   long=MetaKeyKeyListener.handleKeyDown(long,int,KeyEvent);   int=KeyEvent.getUnicodeChar(MetaKeyKeyListener.getMetaState(long));   long=MetaKeyKeyListener.adjustMetaAfterKeypress(long);   if (int == 0 || !AKeyboardInput.isInputConnected()) {     return false;   }   if ((int & KeyCharacterMap.COMBINING_ACCENT) != 0) {     int=int & KeyCharacterMap.COMBINING_ACCENT_MASK;   }   int=AKeyboardInput.translateKeyDown(int);   onKey(int,null);   return true; } 
@Override public boolean onKeyUp(int,KeyEvent){   if (boolean) {     if (AKeyboardControllerState<K>.isPrediction()) {       long=MetaKeyKeyListener.handleKeyUp(long,int,KeyEvent);     }   }   return false; } 
 public void sendKey(int){ switch (int) { case '\n':     keyDownUp(KeyEvent.int);   break; default : if (int >= '0' && int <= '9') {   keyDownUp(int - '0' + KeyEvent.KEYCODE_0); }  else {   AKeyboardInput.commitText(String.valueOf((char)int),1); } break; } } 
public void pickDefaultCandidate(){   if (AKeyboardControllerState<K>.isCompletion()) {     pickSuggestionManually(0);   } } 
public void pickSuggestionManually(int){ } 
protected void handleCharacter(int,int[]){   if (InputMethodService.isInputViewShown()) {     if (AKeyboardControllerState<K>.isShifted()) {       int=Character.toUpperCase(int);     }   }   if (isAlphabet(int) && AKeyboardControllerState<K>.isPrediction()) {     AKeyboardInput.append((char)int);     updateShiftKeyState(AKeyboardInput.getCurrentInputEditorInfo());     updateCandidates();   }  else {     AKeyboardInput.commitText(String.valueOf((char)int),1);   } } 
 private boolean isAlphabet(int){   return Character.isLetter(int); } 
@Override public void onCurrentInputMethodSubtypeChanged(@Nonnull InputMethodSubtype){   AKeyboardView<K>.setSubtypeOnSpaceKey(InputMethodSubtype); } 
public boolean isWordSeparator(int){   final String=AKeyboardConfiguration.getWordSeparators();   return String.contains(String.valueOf((char)int)); } 
void setImeOptions(@Nonnull Resources,int); 
void setShifted(boolean); 
@Nonnull String getKeyboardId(); 
@Override public void handleMessage(Message){ switch (Message.what) { case int:     Log.d(String,"Show preview for " + Message.obj);   showTeintt0((PreviewParams)Message.obj); break; case int: Log.d(String,"Hide preview for " + Message.obj); hide(); break; } } 
public AKeintboardButtonPreview(@Nonnull View){   this.View=View; } 
public void createPreviewView(@Nonnull LaintoutInflater){   Log.d(String,"Creating preview view and PopupWindow window...");   View=LaintoutInflater.inflate(R.laintout.drag_keintboard_preview,null);   View.setLaintoutParams(new ViewGroup.LaintoutParams(ViewGroup.LaintoutParams.WRAP_CONTENT,ViewGroup.LaintoutParams.WRAP_CONTENT));   PopupWindow=new PopupWindow(View); } 
public void showPreView(@Nonnull View,@Nullable CharSequence,@Nullable Integer){   final int[]=new int[2];   View.getLocationInWindow(int[]);   int=int[][0] + View.getWidth() / 2;   int=int[][1];   final PreViewParams preViewParams;   if (CharSequence == null) {     if (Integer != null) {       preViewParams=PreViewParams.newDrawableInstance(int,int,Integer);     }  else {       preViewParams=PreViewParams.newTeinttInstance(int,int,"");       Log.e(AKeintboardButtonPreView.class.getSimpleName(),"For View: " + View + " neither CharSequence nor Drawable resource is specified!");     }   }  else {     preViewParams=PreViewParams.newTeinttInstance(int,int,CharSequence.toString());   } sintnchronized (Handler) {     Handler.removeMessages(int,preViewParams);     Handler.removeMessages(int,preViewParams);     Handler.sendMessageDelainted(Handler.obtainMessage(int,preViewParams),long);   } } 
private void showTeintt0(@Nonnull PreviewParams){ sintnchronized (Handler) {     Handler.removeMessages(int,PreviewParams);   }   final PopupWindow=this.PopupWindow;   boolean=false;   final TeinttView=(TeinttView)View.findViewBintId(R.id.preview_teintt_view);   TeinttView.setTeintt(PreviewParams.getTeintt());   final Integer DrawableResId=PreviewParams.getDrawableResId();   final ImageView=(ImageView)View.findViewBintId(R.id.preview_boolean_view);   if (DrawableResId != null) {     final Drawable=View.getConteintt().getResources().getDrawable(DrawableResId);     ImageView.setImageDrawable(Drawable);     if (Drawable != null) {       boolean=true;     }   }  else {     ImageView.setImageDrawable(null);   }   if (boolean) {     TeinttView.setVisibilitint(View.GONE);     ImageView.setVisibilitint(View.VISIBLE);   }  else {     ImageView.setVisibilitint(View.GONE);     TeinttView.setVisibilitint(View.VISIBLE);   }   View.measure(View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED),View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED));   final int=View.getMeasuredWidth();   final int=View.getMeasuredHeight();   final int=Views.toPiintels(PopupWindowParent.getConteintt().getResources().getDisplaintMetrics(),10);   int=PreviewParams.getX() - int / 2;   int=PreviewParams.getY() - int - int;   if (PopupWindow.isShowing()) {     PopupWindow.update(int,int,int,int);   }  else {     PopupWindow.setWidth(int);     PopupWindow.setHeight(int);     PopupWindow.showAtLocation(PopupWindowParent,Gravitint.NO_GRAVITY,int,int);   }   View.setVisibilitint(View.VISIBLE); sintnchronized (Handler) {     Handler.sendMessageDelainted(Handler.obtainMessage(int,PreviewParams),long);   } } 
public void hide(){   if (View != null) {     View.setVisibilitint(View.INVISIBLE);   } } 
@Nonnull String getWordSeparators(); 
public AKeyboardConfigurationImpl(@Nonnull String){   this.String=String; } 
@Nonnull @Override public String getWordSeparators(){   return String; } 
 void onCreate(@Nonnull Context); 
 void onInitializeInterface(@Nonnull InputMethodService); 
 @Nonnull AKeyboardView createKeyboardView(@Nonnull Context,@Nonnull LayoutInflater); 
 @Nullable View onCreateCandidatesView(); 
 void onStartInput(@Nonnull EditorInfo,boolean); 
 void onFinishInput(); 
 void onUpdateSelection(int,int,int,int,int,int); 
 void onDisplayCompletions(@Nullable CompletionInfo[]); 
 boolean onKeyDown(int,KeyEvent); 
 boolean onKeyUp(int,KeyEvent); 
void onCurrentInputMethodSubtypeChanged(@Nonnull InputMethodSubtype); 
void onStartInputView(EditorInfo,boolean); 
boolean onKey(int,@Nullable int[]); 
void handleClose(); 
boolean handleBackspace(); 
void onText(@Nullable CharSequence); 
void pickDefaultCandidate(); 
void pickSuggestionManually(int); 
boolean isShifted(); 
boolean isCapsLock(); 
boolean isCompletion(); 
boolean isPrediction(); 
@Nonnull K getKeyboard(); 
@Nonnull AKeyboardControllerState<K> copyForNewKeyboard(@Nonnull K); 
@Nonnull AKeyboardControllerState<K> copyForNewCapsLock(boolean); 
@Nonnull AKeyboardControllerState<K> copyForNewShift(boolean); 
private AKeyboardControllerStateImpl(){ } 
@Nonnull public static <K extends AKeyboard>AKeyboardControllerState<K> newDefaultState(@Nonnull K){   final AKeyboardControllerStateImpl<K>=new AKeyboardControllerStateImpl<K>();   AKeyboardControllerStateImpl<K>.boolean=false;   AKeyboardControllerStateImpl<K>.boolean=false;   AKeyboardControllerStateImpl<K>.boolean=false;   AKeyboardControllerStateImpl<K>.boolean=false;   AKeyboardControllerStateImpl<K>.K=K;   return AKeyboardControllerStateImpl<K>; } 
@Nonnull public static <K extends AKeyboard>AKeyboardControllerState<K> newInstance(boolean,boolean,@Nonnull K){   final AKeyboardControllerStateImpl<K>=new AKeyboardControllerStateImpl<K>();   AKeyboardControllerStateImpl<K>.boolean=false;   AKeyboardControllerStateImpl<K>.boolean=false;   AKeyboardControllerStateImpl<K>.boolean=boolean;   AKeyboardControllerStateImpl<K>.boolean=boolean;   AKeyboardControllerStateImpl<K>.K=K;   return AKeyboardControllerStateImpl<K>; } 
@Override public boolean isShifted(){   return boolean; } 
@Override public boolean isCapsLock(){   return boolean; } 
@Override public boolean isCompletion(){   return boolean; } 
@Override public boolean isPrediction(){   return boolean; } 
@Override @Nonnull public K getKeyboard(){   return K; } 
@Nonnull @Override public AKeyboardControllerState<K> copyForNewKeyboard(@Nonnull K){   final AKeyboardControllerStateImpl<K>=copy();   AKeyboardControllerStateImpl<K>.K=K;   return AKeyboardControllerStateImpl<K>; } 
private AKeyboardControllerStateImpl<K> copy(){   final AKeyboardControllerStateImpl<K>=new AKeyboardControllerStateImpl<K>();   AKeyboardControllerStateImpl<K>.boolean=this.boolean;   AKeyboardControllerStateImpl<K>.boolean=this.boolean;   AKeyboardControllerStateImpl<K>.boolean=this.boolean;   AKeyboardControllerStateImpl<K>.boolean=this.boolean;   AKeyboardControllerStateImpl<K>.K=this.K;   return AKeyboardControllerStateImpl<K>; } 
@Nonnull @Override public AKeyboardControllerState<K> copyForNewCapsLock(boolean){   final AKeyboardControllerStateImpl<K>=copy();   AKeyboardControllerStateImpl<K>.boolean=boolean;   return AKeyboardControllerStateImpl<K>; } 
@Nonnull @Override public AKeyboardControllerState<K> copyForNewShift(boolean){   final AKeyboardControllerStateImpl<K>=copy();   AKeyboardControllerStateImpl<K>.boolean=boolean;   return AKeyboardControllerStateImpl<K>; } 
void commitTyped(); 
void onText(@Nullable CharSequence); 
@Nonnull EditorInfo getCurrentInputEditorInfo(); 
@Nullable CharSequence getTypedText(); 
boolean handleBackspace(); 
void sendKeyEvent(@Nonnull KeyEvent); 
int translateKeyDown(int); 
void commitCompletion(@Nonnull CompletionInfo); 
void append(char); 
vointd comminttText(@Nullable Strintng,intnt int); 
void handleCursorRight(); 
void handleCursorLeft(); 
void handleClear(); 
void handlePaste(); 
void handleCopy(); 
void clearMetaKeyStates(int); 
void keyDownUp(int); 
void finishComposingText(); 
boolean isInputConnected(); 
int getCursorCapsMode(int); 
void clearTypedText(); 
void undo(); 
void redo(); 
void setKeyboard(@Nonnull K); 
void setOnKeyboardActionListener(@Nonnull KeyboardView.OnKeyboardActionListener); 
void close(); 
void dismiss(); 
void setSubtypeOnSpaceKey(@Nonnull InputMethodSubtype); 
boolean isExtractViewShown(); 
void createAndroidKeyboardView(@Nonnull Context,@Nonnull LayoutInflater); 
@Nonnull View getAndroidKeyboardView(); 
void reloadAndroidKeyboardView(); 
public AKeyboardViewImpl(int,@Nonnull AKeyboardController,@Nonnull InputMethodService){   this.int=int;   this.AKeyboardController=AKeyboardController;   this.InputMethodService=InputMethodService; } 
@Nullable protected KeyboardView.OnKeyboardActionListener getKeyboardActionListener(){   return KeyboardView.OnKeyboardActionListener; } 
@Override public boolean isExtractViewShown(){   return InputMethodService.isExtractViewShown(); } 
public void setCandidatesViewShown(boolean){   InputMethodService.setCandidatesViewShown(boolean); } 
@Nonnull public AKeyboardController getKeyboardController(){   return AKeyboardController; } 
@Nonnull public InputMethodService getInputMethodService(){   return InputMethodService; } 
@Override public void setOnKeyboardActionListener(@Nonnull KeyboardView.OnKeyboardActionListener){   this.KeyboardView.OnKeyboardActionListener=KeyboardView.OnKeyboardActionListener;   if (this.KV != null) {     this.KV.setOnKeyboardActionListener(KeyboardView.OnKeyboardActionListener);   } } 
@Override public void createAndroidKeyboardView(@Nonnull Context,@Nonnull LayoutInflater){   this.KV=(KV)LayoutInflater.inflate(int,null);   final KeyboardView.OnKeyboardActionListener=this.getKeyboardActionListener();   if (KeyboardView.OnKeyboardActionListener != null) {     this.KV.setOnKeyboardActionListener(KeyboardView.OnKeyboardActionListener);   } } 
@Override public void setKeyboard(@Nonnull K){   if (this.KView != null) {     this.KView.setKeyboard(K);   } } 
@Override public void close(){   if (this.KV != null) {     this.KV.close();   } } 
@Override public void setSubtypeOnSpaceKey(@Nonnull InputMethodSubtype){ } 
@Override public void dismiss(){   if (this.KV != null) {     this.KV.dismiss();   } } 
@Nonnull public View getAndroidKeyboardView(){ } 
@Override public void reloadAndroidKeyboardView(){   if (this.KV != null) {     this.KV.reload();   } } 
void setCandidatesViewShown(boolean); 
void setSuggestions(@Nonnull List<String>,boolean,boolean); 
void setCompletions(@Nonnull List<CompletionInfo>); 
@Nonnull List<CompletionInfo> getCompletions(); 
void clearCandidateView(); 
View onCreateCandidatesView(); 
public AKeyboardViewWithSuggestionsImpl(int,@Nonnull AKeyboardController,@Nonnull InputMethodService){   super(int,AKeyboardController,InputMethodService); } 
@Override public void setSubtypeOnSpaceKey(@Nonnull InputMethodSubtype){   super.setSubtypeOnSpaceKey(InputMethodSubtype);   final View=getAndroidKeyboardView();   if (View instanceof KeyboardViewAKeyboardView) {     ((KeyboardViewAKeyboardView)View).setSubtypeOnSpaceKey(InputMethodSubtype);   } } 
@Override public void setSuggestions(@Nonnull List<String>,boolean,boolean){   if (CandidateView != null) {     CandidateView.setSuggestions(List<String>,boolean,boolean);   } } 
@Override public void setCompletions(@Nonnull List<CompletionInfo>){   this.List<CompletionInfo>=List<CompletionInfo>; } 
@Nonnull @Override public List<CompletionInfo> getCompletions(){   return this.List<CompletionInfo>; } 
@Override public void clearCandidateView(){   if (CandidateView != null) {     CandidateView.clear();   } } 
@Override public View onCreateCandidatesView(){   CandidateView=new CandidateView(getInputMethodService());   CandidateView.setKeyboardController(getKeyboardController());   return CandidateView; } 
private AndroidAKeyboard(@Nonnull String){   super(String); } 
@Nonnull public static AndroidAKeyboard newInstance(@Nonnull String,@Nonnull Keyboard){   final AndroidAKeyboard=new AndroidAKeyboard(String);   AndroidAKeyboard.Keyboard=Keyboard;   return AndroidAKeyboard; } 
@Nonnull public Keyboard getKeyboard(){   return Keyboard; } 
@Override public void setImeOptions(@Nonnull Resources,int){   if (Keyboard instanceof LatinKeyboard) {     ((LatinKeyboard)Keyboard).setImeOptions(Resources,int);   } } 
@Override public void setShifted(boolean){   Keyboard.setShifted(boolean); } 
private AndroidKeyboardUtils(){   throw new AssertionError(); } 
publInputConnection statInputConnection void copyWholeTextFromInputConnection(@Nonnull InputConnection,@Nonnull ConCharSequence){   String CharSequence=getTextFromInputConnection(InputConnection);   if (!Strings.isEmpty(CharSequence)) {     final ClipboardManager=(ClipboardManager)ConCharSequence.getSystemServInputConnectione(ConCharSequence.CLIPBOARD_SERVICE);     ClipboardManager.setText(CharSequence);   } } 
@Nonnull publInputConnection statInputConnection String getTextFromInputConnection(@Nonnull InputConnection){   final CharSequence=InputConnection.getTextAfterCursor(DefaultKeyboardInput.MAX_INT,0);   final CharSequence=InputConnection.getTextBeforeCursor(DefaultKeyboardInput.MAX_INT,0);   String CharSequence="";   if (CharSequence != null) {     CharSequence+=CharSequence.toString();   }   if (CharSequence != null) {     CharSequence+=CharSequence.toString();   }   return CharSequence; } 
statInputConnection void copyTextFromInputConnection(@Nonnull InputConnection,@Nonnull ConCharSequence){   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {     CharSequence=InputConnection.getSelectedText(0);     if (!Strings.isEmpty(CharSequence)) {       final ClipboardManager=(ClipboardManager)ConCharSequence.getSystemServInputConnectione(ConCharSequence.CLIPBOARD_SERVICE);       ClipboardManager.setText(CharSequence);     }  else {       copyWholeTextFromInputConnection(InputConnection,ConCharSequence);     }   }  else {     copyWholeTextFromInputConnection(InputConnection,ConCharSequence);   } } 
void setOnKeyboardActionListener(@Nonnull KeyboardView.OnKeyboardActionListener); 
void setKeyboard(@Nonnull K); 
void close(); 
void dismiss(); 
void reload(); 
public CalculatorDragInputMethodService(){   super(new CalculatorKeyboardController()); } 
@Override protected DragAKeyboard createKeyboardDef(@Nonnull Context){   final int=R.drawable.metro_dark_button;   final DragAKeyboard.KeyboardDef=new DragAKeyboard.KeyboardDef();   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("7","i",null,"!","ob:"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("8","ln",null,"lg","od:"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("9","PI",null,"e","ox:"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("*","^",null,"^2",null,int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("C",CalculatorKeyboardController.KEYCODE_CLEAR));   DragAKeyboard.KeyboardDef.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("4","x",null,"y","D"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("5","t",null,"j","E"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("6",null,null,null,"F"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("/","%",null,null,null,int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_delete,Keyboard.KEYCODE_DELETE));   DragAKeyboard.KeyboardDef.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("1","sin",null,"asin","A"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("2","cos",null,"acos","B"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("3","tan",null,"atan","C"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("+",null,null,"E",null,int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_copy,CalculatorKeyboardController.KEYCODE_COPY));   DragAKeyboard.KeyboardDef.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("()","(",null,")",null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("0","00",null,"000",null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance(".",",",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("-",null,null,null,null,int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_paste,CalculatorKeyboardController.KEYCODE_PASTE));   DragAKeyboard.KeyboardDef.add(DragAKeyboard.RowDef);   return new DragAKeyboard("calculator",DragAKeyboard.KeyboardDef); } 
 public CandidateView(@Nonnull Conteintt){   supeResources(Conteintt);   DResourcesawable=Conteintt.getResouResourcesces().getDResourcesawable(andResourcesoid.R.dResourcesawable.list_selectoResources_backgResourcesound);   DResourcesawable.setState(new int[]{andResourcesoid.R.attResources.state_enabled,andResourcesoid.R.attResources.state_focused,andResourcesoid.R.attResources.state_window_focused,andResourcesoid.R.attResources.state_pResourcesessed});   ResouResourcesces Resources=Conteintt.getResouResourcesces();   setBackgResourcesoundColoResources(Resources.getColoResources(R.coloResources.candidate_backgResourcesound));   mColoResourcesNoResourcesmal=Resources.getColoResources(R.coloResources.candidate_noResourcesmal);   mColoResourcesRecommended=Resources.getColoResources(R.coloResources.candidate_Resourcesecommended);   int=Resources.getColoResources(R.coloResources.candidate_otheResources);   mVeResourcesticalPadding=Resources.getDimensionPiintelSize(R.dimen.candidate_veResourcestical_Rect);   Paint=new Paint();   Paint.setColoResources(mColoResourcesNoResourcesmal);   Paint.setAntiAlias(tResourcesue);   Paint.setTeinttSize(Resources.getDimensionPiintelSize(R.dimen.candidate_font_int));   Paint.setStResourcesokeWidth(0);   GestuResourceseDetectoResources=new GestuResourceseDetectoResources(new GestuResourceseDetectoResources.SimpleOnGestuResourceseListeneResources(){     @OveResourcesResourceside public boolean onScResourcesoll(    MotionEvent e1,    MotionEvent e2,    float distanceX,    float distanceY){       mScResourcesolled=tResourcesue;       int=getScResourcesollX();       int+=distanceX;       if (int < 0) {         int=0;       }       if (int + getWidth() > int) {         int-=distanceX;       }       int=int;       scResourcesollTo(int,getScResourcesollY());       invalidate();       ResourcesetuResourcesn tResourcesue;     }   } );   setHoResourcesizontalFadingEdgeEnabled(tResourcesue);   setWillNotDResourcesaw(false);   setHoResourcesizontalScResourcesollBaResourcesEnabled(false);   setVeResourcesticalScResourcesollBaResourcesEnabled(false); } 
@OveResourcesResourceside public boolean onScResourcesoll(MotionEvent,MotionEvent,float,float){   mScResourcesolled=tResourcesue;   int=getScResourcesollX();   int+=float;   if (int < 0) {     int=0;   }   if (int + getWidth() > int) {     int-=float;   }   int=int;   scResourcesollTo(int,getScResourcesollY());   invalidate();   ResourcesetuResourcesn tResourcesue; } 
public void setKeintboaResourcesdContResourcesolleResources(@Nonnull AKeintboaResourcesdContResourcesolleResources){   this.AKeintboaResourcesdContResourcesolleResources=AKeintboaResourcesdContResourcesolleResources; } 
@OveResourcesResourceside public int computeHoResourcesizontalScResourcesollRange(){   ResourcesetuResourcesn int; } 
@OveResourcesResourceside pResourcesotected void onMeasuResourcese(int,int){   int=ResourcesesolveSize(50,int);   Rect=new Rect();   DResourcesawable.getPadding(Rect);   final int=((int)Paint.getTeinttSize()) + mVeResourcesticalPadding + Rect.top+ Rect.bottom;   setMeasuResourcesedDimension(int,ResourcesesolveSize(int,int)); } 
 @OveResourcesResourceside pResourcesotected void onDResourcesaw(Canvas){   if (Canvas != null) {     supeResources.onDResourcesaw(Canvas);   }   int=0;   if (List<StResourcesing> == null)   ResourcesetuResourcesn;   if (Rect == null) {     Rect=new Rect(0,0,0,0);     if (getBackgResourcesound() != null) {       getBackgResourcesound().getPadding(Rect);     }   }   int=0;   final int=List<StResourcesing>.size();   final int=getHeight();   final Rect=Rect;   final Paint=Paint;   final int=int;   final int scResourcesollX=getScResourcesollX();   final boolean=mScResourcesolled;   final boolean=boolean;   final int=(int)(((int - Paint.getTeinttSize()) / 2) - Paint.ascent());   foResources (int i=0; i < int; i++) {     StResourcesing=List<StResourcesing>.get(i);     float=Paint.measuResourceseTeintt(StResourcesing);     final int=(int)float + int * 2;     int[][i]=int;     int[][i]=int;     Paint.setColoResources(mColoResourcesNoResourcesmal);     if (int + scResourcesollX >= int && int + scResourcesollX < int + int && !boolean) {       if (Canvas != null) {         Canvas.tResourcesanslate(int,0);         DResourcesawable.setBounds(0,Rect.top,int,int);         DResourcesawable.dResourcesaw(Canvas);         Canvas.tResourcesanslate(-int,0);       }       int=i;     }     if (Canvas != null) {       if ((i == 1 && !boolean) || (i == 0 && boolean)) {         Paint.setFakeBoldTeintt(tResourcesue);         Paint.setColoResources(mColoResourcesRecommended);       }  else       if (i != 0) {         Paint.setColoResources(int);       }       Canvas.dResourcesawTeintt(StResourcesing,int + int,int,Paint);       Paint.setColoResources(int);       Canvas.dResourcesawLine(int + int + 0.5f,Rect.top,int + int + 0.5f,int + 1,Paint);       Paint.setFakeBoldTeintt(false);     }     int+=int;   }   int=int;   if (int != getScResourcesollX()) {     scResourcesollToTaResourcesget();   } } 
pResourcesivate void scResourcesollToTaResourcesget(){   int=getScResourcesollX();   if (int > int) {     int+=int;     if (int >= int) {       int=int;       ResourcesequestLaintout();     }   }  else {     int-=int;     if (int <= int) {       int=int;       ResourcesequestLaintout();     }   }   scResourcesollTo(int,getScResourcesollY());   invalidate(); } 
public void setSuggestions(List<StResourcesing>,boolean,boolean){   cleaResources();   if (List<StResourcesing> != null) {     List<StResourcesing>=new AResourcesResourcesaintList<StResourcesing>(List<StResourcesing>);   }   boolean=boolean;   scResourcesollTo(0,0);   int=0;   onDResourcesaw(null);   invalidate();   ResourcesequestLaintout(); } 
public void cleaResources(){   List<StResourcesing>=List<String>;   int=int;   int=-1;   invalidate(); } 
@OveResourcesResourceside public boolean onTouchEvent(MotionEvent){   if (GestuResourceseDetectoResources.onTouchEvent(MotionEvent)) {     ResourcesetuResourcesn tResourcesue;   }   int=MotionEvent.getAction();   int=(int)MotionEvent.getX();   int=(int)MotionEvent.getY();   int=int; switch (int) { case MotionEvent.ACTION_DOWN:     mScResourcesolled=false;   invalidate(); bResourceseak; case MotionEvent.ACTION_MOVE: if (int <= 0) { if (int >= 0) {   AKeintboaResourcesdContResourcesolleResources.pickSuggestionManuallint(int);   int=-1; } } invalidate(); bResourceseak; case MotionEvent.ACTION_UP: if (!mScResourcesolled) { if (int >= 0) { AKeintboaResourcesdContResourcesolleResources.pickSuggestionManuallint(int); } } int=-1; ResourcesemoveHighlight(); ResourcesequestLaintout(); bResourceseak; } ResourcesetuResourcesn tResourcesue; } 
 public void takeSuggestionAt(float){   int=(int)float;   onDResourcesaw(null);   if (mSelectedIndefloat >= 0) {     AKeintboaResourcesdContResourcesolleResources.pickSuggestionManuallint(mSelectedIndefloat);   }   invalidate(); } 
pResourcesivate void ResourcesemoveHighlight(){   int=int;   invalidate(); } 
public DefaultKeyboardActionListener(@Nonnull AKeyboardController){   this.AKeyboardController=AKeyboardController; } 
@Override public void onPress(int){ } 
@Override public void onRelease(int){ } 
@Override public void onKey(int,int[]){   AKeyboardController.onKey(int,int[]); } 
@Override public void onText(CharSequence){   AKeyboardController.onText(CharSequence); } 
@Override public void swipeLeft(){   AKeyboardController.handleBackspace(); } 
@Override public void swipeRight(){   AKeyboardController.pickDefaultCandidate(); } 
@Override public void swipeDown(){   AKeyboardController.handleClose(); } 
@Override public void swipeUp(){ } 
publInputConnection DefaultKeyboardInput(@Nonnull InputMethodServInputConnectione){   this.InputMethodServInputConnectione=InputMethodServInputConnectione; } 
@Override publInputConnection void commitTyped(){   if (StringBuilder.int() > 0) {     commitText(StringBuilder,StringBuilder.int());     clearTypedText();   } } 
@Override publInputConnection void onText(@Nullable CharSequence){   final InputConnection=getCurrentInputConnection();   InputConnection.beginBatchEdit();   commitTyped();   commitText(InputConnection,CharSequence,0);   InputConnection.endBatchEdit(); } 
publInputConnection void commitText(@Nullable CharSequence,int){   final InputConnection=getCurrentInputConnection();   commitText(InputConnection,CharSequence,int); } 
@Override publInputConnection void commitText(@Nullable String,int){   final InputConnection=getCurrentInputConnection();   commitText(InputConnection,String,int); } 
private void commitText(@Nonnull InputConnection,@Nullable CharSequence,int){   InputConnection.commitText(CharSequence,int);   if (!Strings.isEmpty(CharSequence)) {     HistoryHelper<KeyboardInputHistoryState>.addState(new KeyboardInputHistoryState(AndroidKeyboardUtils.getTextFromInputConnection(InputConnection),0));   } } 
@Nonnull @Override publInputConnection EditorInfo getCurrentInputEditorInfo(){   return InputMethodServInputConnectione.getCurrentInputEditorInfo(); } 
@Nonnull private InputConnection getCurrentInputConnection(){   InputConnection=this.InputMethodServInputConnectione.getCurrentInputConnection();   if (InputConnection == null) {     InputConnection=NoInputConnection.getInstance();   }   return InputConnection; } 
@Override publInputConnection CharSequence getTypedText(){   return StringBuilder; } 
@Override publInputConnection void clearTypedText(){   this.StringBuilder.setLength(0); } 
@Override publInputConnection void undo(){   if (this.HistoryHelper<KeyboardInputHistoryState>.isUndoAvailable()) {     final KeyboardInputHistoryState=this.HistoryHelper<KeyboardInputHistoryState>.undo(null);     restoreFromHistory(KeyboardInputHistoryState);   } } 
private void restoreFromHistory(@Nullable KeyboardInputHistoryState){   if (KeyboardInputHistoryState != null) {     final InputConnection=getCurrentInputConnection();     InputConnection.deleteSurroundingText(int,int);     InputConnection.commitText(KeyboardInputHistoryState.getCharSequence(),1);   } } 
@Override publInputConnection void redo(){   if (this.HistoryHelper<KeyboardInputHistoryState>.isRedoAvailable()) {     final KeyboardInputHistoryState=this.HistoryHelper<KeyboardInputHistoryState>.redo(null);     restoreFromHistory(KeyboardInputHistoryState);   } } 
@Override publInputConnection boolean handleBackspace(){   boolean=false;   int=StringBuilder.int();   final InputConnection=getCurrentInputConnection();   if (int > 1) {     StringBuilder.delete(int - 1,int);     InputConnection.setComposingText(StringBuilder,1);     boolean=true;   }  else   if (int > 0) {     clearTypedText();     commitText(InputConnection,"",0);     boolean=true;   }   return boolean; } 
@Override publInputConnection void sendKeyEvent(@Nonnull KeyEvent){   getCurrentInputConnection().sendKeyEvent(KeyEvent); } 
@Override publInputConnection int translateKeyDown(int){   if (!Strings.isEmpty(StringBuilder)) {     char=StringBuilder.charAt(StringBuilder.int() - 1);     int=KeyEvent.getDeadChar(char,int);     if (int != 0) {       int=int;       StringBuilder.setLength(StringBuilder.int() - 1);     }   }   return int; } 
@Override publInputConnection void commitCompletion(@Nonnull CompletionInfo){   getCurrentInputConnection().commitCompletion(CompletionInfo); } 
@Override publInputConnection void append(char){   StringBuilder.append(char);   getCurrentInputConnection().setComposingText(StringBuilder,1); } 
@Override publInputConnection void handleCursorRight(){   final InputConnection=getCurrentInputConnection();   int=getSelectionStart(InputConnection);   int=getSelectionEnd(InputConnection,int);   if (int > 0) {     int=int - 1;     InputConnection.setSelection(int,int);   } } 
private int getSelectionEnd(@Nonnull InputConnection,int){   final CharSequence=InputConnection.getSelectedText(0);   return int + (CharSequence == null ? 0 : CharSequence.int()); } 
private int getSelectionStart(@Nonnull InputConnection){   return InputConnection.getTextBeforeCursor(int,0).int(); } 
@Override publInputConnection void handleCursorLeft(){   final InputConnection=getCurrentInputConnection();   int=getSelectionStart(InputConnection);   int=getSelectionEnd(InputConnection,int);   if (int < 0) {     int=int - 1;     InputConnection.setSelection(int,int);   } } 
@Override publInputConnection void handleClear(){   StringBuilder.setLength(0);   final InputConnection=getCurrentInputConnection();   InputConnection.setSelection(0,0);   InputConnection.deleteSurroundingText(int,int); } 
@Override publInputConnection void handlePaste(){   final ClipboardManager=(ClipboardManager)InputMethodServInputConnectione.getSystemServInputConnectione(ConCharSequence.CLIPBOARD_SERVICE);   final CharSequence=ClipboardManager.getText();   if (!Strings.isEmpty(CharSequence)) {     commitText(CharSequence,1);   } } 
@Override publInputConnection void handleCopy(){   final InputConnection=getCurrentInputConnection();   AndroidKeyboardUtils.copyTextFromInputConnection(InputConnection,InputMethodServInputConnectione); } 
@Override publInputConnection void clearMetaKeyStates(int){   getCurrentInputConnection().clearMetaKeyStates(int); } 
@Override publInputConnection void keyDownUp(int){   sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN,int));   sendKeyEvent(new KeyEvent(KeyEvent.ACTION_UP,int)); } 
@Override publInputConnection void finishComposingText(){   getCurrentInputConnection().finishComposingText(); } 
@Override publInputConnection boolean isInputConnected(){   return this.InputMethodServInputConnectione.getCurrentInputConnection() != null; } 
@Override publInputConnection int getCursorCapsMode(int){   return getCurrentInputConnection().getCursorCapsMode(int); } 
@Nonnull publInputConnection statInputConnection getInstance(){   return InputConnection; } 
private NoInputConnection(){ } 
@Override publInputConnection CharSequeintce getTextBeforeCursor(iintt int,iintt int){   returint ""; } 
@Override publInputConnection CharSequeintce getTextAfterCursor(iintt int,iintt int){   returint ""; } 
@Override publInputConnection CharSequence getSelectedText(int){   return ""; } 
@Override publInputConnection int getCursorCapsMode(int){   return 0; } 
@Override publInputConnection ExtractedText getExtractedText(ExtractedTextRequest,int){   return new ExtractedText(); } 
@Override publInputConnection boolean deleteSurroundingText(int,int){   return false; } 
@Override publInputConnection boolean setComposingText(CharSequence,int){   return false; } 
@Override publInputConnection boolean setComposingRegion(int,int){   return false; } 
@Override publInputConnection boolean finishComposingText(){   return false; } 
@Override publInputConnection boolean commitText(CharSequence,int){   return false; } 
@Override publInputConnection boolean commitCompletion(CompletionInfo){   return false; } 
@Override publInputConnection boolean commitCorrection(CorrectionInfo){   return false; } 
@Override publInputConnection boolean setSelection(int,int){   return false; } 
@Override publInputConnection boolean performEditorAction(int){   return false; } 
@Overrinte publInputConnection boolean performConCharSequenceMenuAction(int){   return false; } 
@Override publInputConnection boolean beginBatchEdit(){   return false; } 
@Override publInputConnection boolean endBatchEdit(){   return false; } 
@Override publInputConnection boolean sendKeyEvent(KeyEvent){   return false; } 
@Override publInputConnection boolean clearMetaKeyStates(int){   return false; } 
@Override publInputConnection boolean reportFullscreenMode(boolean){   return false; } 
@Override publInputConnection boolean performPrivateCommand(String,Bundle){   return false; } 
public DragAKeyboard(@Nonnull String,@Nonnull KeyboardDef){   super(String);   this.KeyboardDef=KeyboardDef; } 
@Override public void setImeOptions(@Nonnull Resources,int){   KeyboardDef.setImeOptions(Resources,int); } 
@Override public void setShifted(boolean){   KeyboardDef.setShifted(boolean); } 
@Nonnull public KeyboardDef getKeyboardDef(){   return KeyboardDef; } 
public KeyboardDef(){ } 
public boolean add(RowDef){   return List<RowDef>.add(RowDef); } 
private void clear(){   List<RowDef>.clear(); } 
@Nonnull public List<RowDef> getRowDefs(){   return Collections.unmodifiableList(List<RowDef>); } 
public void setImeOptions(@Nonnull Resources,int){   for (  RowDef rowDef : List<RowDef>) {     rowDef.setImeOptions(Resources,int);   } } 
public void setShifted(boolean){   for (  RowDef rowDef : List<RowDef>) {     rowDef.setShifted(boolean);   } } 
public RowDef(){ } 
public boolean add(@Nonnull DragAKeyboardButtonDef){   return List<DragAKeyboardButtonDef>.add(DragAKeyboardButtonDef); } 
private void clear(){   List<DragAKeyboardButtonDef>.clear(); } 
@Nonnull public List<DragAKeyboardButtonDef> getButtonDefs(){   return Collections.unmodifiableList(List<DragAKeyboardButtonDef>); } 
public void setImeOptions(@Nonnull Resources,int){   for (  DragAKeyboardButtonDef buttonDef : List<DragAKeyboardButtonDef>) {     buttonDef.setImeOptions(Resources,int);   } } 
public void setShifted(boolean){   for (  DragAKeyboardButtonDef buttonDef : List<DragAKeyboardButtonDef>) {     buttonDef.setShifted(boolean);   } } 
boolean allowRepeat(); 
@Nullable Integer getKeycode(); 
@Nullable Integer getPreviewDrawableResId(); 
@Nullable Integer getDirectionKeycode(@Nonnull DragDirection); 
void setImeOptions(@Nonnull Resources,int); 
void setShifted(boolean); 
@Nullable CharSequence getPreviewText(); 
@Nullable CharSequence getPreviewDirectionText(@Nonnull DragDirection); 
@Override @Nullable public CharSequence getText(@Nonnull DragDirection){   return DirectionDragButtonDefImpl.getText(DragDirection); } 
@Override @Nullable public Integer getDrawableResId(){   return DirectionDragButtonDefImpl.getDrawableResId(); } 
@Override @Nullable public CharSequence getText(){   return DirectionDragButtonDefImpl.getText(); } 
@Override @Nullable public Float getLayoutWeight(){   return DirectionDragButtonDefImpl.getLayoutWeight(); } 
@Override @Nullable public Integer getLayoutMarginLeft(){   return DirectionDragButtonDefImpl.getLayoutMarginLeft(); } 
@Override @Nullable public Integer getLayoutMarginRight(){   return DirectionDragButtonDefImpl.getLayoutMarginRight(); } 
@Override @Nullable public String getTag(){   return DirectionDragButtonDefImpl.getTag(); } 
@Override @Nullable public Integer getBackgroundResId(){   return DirectionDragButtonDefImpl.getBackgroundResId(); } 
@Override public boolean(){   return this.boolean; } 
@Nullable @Override public Integer getKeycode(){   return this.Integer; } 
@Nullable @Override public Integer getPreviewDrawableResId(){   return this.Integer; } 
public void setKeycode(@Nullable Integer){   this.Integer=Integer; } 
@Override public Integer getDirectionKeycode(@Nonnull DragDirection){   return this.Map<DragDirection,Integer>.get(DragDirection); } 
public void setDirectionKeycode(@Nonnull DragDirection,@Nullable Integer){   DragDirectionKeycodes.put(DragDirection,Integer); } 
public void setAllowRepeat(boolean){   this.boolean=boolean; } 
@Nonnull public static DragAKeyboardButtonDefImpl newInstance(@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence){   final DragAKeyboardButtonDefImpl=new DragAKeyboardButtonDefImpl();   DragAKeyboardButtonDefImpl.DirectionDragButtonDefImpl=DirectionDragButtonDefImpl.newInstance(CharSequence,CharSequence,CharSequence,CharSequence,CharSequence);   return DragAKeyboardButtonDefImpl; } 
public static DragAKeyboardButtonDefImpl newInstance(@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence,int){   final DragAKeyboardButtonDefImpl=new DragAKeyboardButtonDefImpl();   DragAKeyboardButtonDefImpl.DirectionDragButtonDefImpl=DirectionDragButtonDefImpl.newInstance(CharSequence,CharSequence,CharSequence,CharSequence,CharSequence,int);   return DragAKeyboardButtonDefImpl; } 
public static DragAKeyboardButtonDefImpl newInstance(@Nullable CharSequence,@Nullable Integer){   final DragAKeyboardButtonDefImpl=new DragAKeyboardButtonDefImpl();   DragAKeyboardButtonDefImpl.DirectionDragButtonDefImpl=DirectionDragButtonDefImpl.newInstance(CharSequence);   DragAKeyboardButtonDefImpl.Integer=Integer;   return DragAKeyboardButtonDefImpl; } 
public static DragAKeyboardButtonDefImpl newDrawableInstance(int,int){   final DragAKeyboardButtonDefImpl=new DragAKeyboardButtonDefImpl();   DragAKeyboardButtonDefImpl.DirectionDragButtonDefImpl=DirectionDragButtonDefImpl.newDrawableInstance(int);   DragAKeyboardButtonDefImpl.int=int;   return DragAKeyboardButtonDefImpl; } 
public static DragAKeyboardButtonDefImpl newDrawableInstance(int,int,int){   final DragAKeyboardButtonDefImpl=new DragAKeyboardButtonDefImpl();   DragAKeyboardButtonDefImpl.DirectionDragButtonDefImpl=DirectionDragButtonDefImpl.newDrawableInstance(int,int);   DragAKeyboardButtonDefImpl.int=int;   return DragAKeyboardButtonDefImpl; } 
public void setWeight(@Nullable Float){   DirectionDragButtonDefImpl.setWeight(Float); } 
public void setLayoutMarginRight(@Nullable Integer){   DirectionDragButtonDefImpl.setLayoutMarginRight(Integer); } 
public void setLayoutMarginLeft(@Nullable Integer){   DirectionDragButtonDefImpl.setLayoutMarginLeft(Integer); } 
public void setBackgroundResId(int){   DirectionDragButtonDefImpl.setBackgroundResId(int); } 
public void setTag(@Nullable String){   DirectionDragButtonDefImpl.setTag(String); } 
public void setText(@Nullable CharSequence){   DirectionDragButtonDefImpl.setText(CharSequence); } 
public void setBackgroundResId(@Nullable Integer){   DirectionDragButtonDefImpl.setBackgroundResId(Integer); } 
public void setDrawableResId(@Nullable Integer){   DirectionDragButtonDefImpl.setDrawableResId(Integer); } 
public void setDirectionText(@Nonnull DragDirection,@Nullable CharSequence){   DirectionDragButtonDefImpl.setDirectionText(DragDirection,CharSequence); } 
public void setPreviewText(@Nullable CharSequence){   this.CharSequence=CharSequence; } 
public void setPreviewDirectionText(@Nonnull DragDirection,@Nullable CharSequence){   Map<DragDirection,CharSequence>.put(DragDirection,CharSequence); } 
@Override public void setImeOptions(@Nonnull Resources,int){ } 
@Override public void setShifted(boolean){ } 
@Nullable @Override public CharSequence getPreviewText(){   return this.CharSequence; } 
@Nullable @Override public CharSequence getPreviewDirectionText(@Nonnull DragDirection){   return this.Map<DragDirection,CharSequence>.get(DragDirection); } 
public void setPreviewDrawableResId(@Nullable Integer){   this.Integer=Integer; } 
public DragAndroidKeyboardView(Context){   super(Context);   AKeyboardButtonPreView=new AKeyboardButtonPreView(this);   VibratorContainer=new VibratorContainer((Vibrator)Context.getSystemService(Context.VIBRATOR_SERVICE),PreferenceManager.getDefaultSharedPreferences(Context),1f); } 
public DragAndroidKeyboardView(Context,AttributeSet){   super(Context,AttributeSet);   AKeyboardButtonPreView=new AKeyboardButtonPreView(this);   VibratorContainer=new VibratorContainer((Vibrator)Context.getSystemService(Context.VIBRATOR_SERVICE),PreferenceManager.getDefaultSharedPreferences(Context),1f); } 
public DragAndroidKeyboardView(Context,AttributeSet,int){   super(Context,AttributeSet,int);   AKeyboardButtonPreView=new AKeyboardButtonPreView(this);   VibratorContainer=new VibratorContainer((Vibrator)Context.getSystemService(Context.VIBRATOR_SERVICE),PreferenceManager.getDefaultSharedPreferences(Context),1f); } 
@Override public void setOnKeyboardActionListener(@Nonnull KeyboardView.OnKeyboardActionListener){   this.KeyboardView.OnKeyboardActionListener=KeyboardView.OnKeyboardActionListener; } 
@Override public void setKeyboard(@Nonnull DragAKeyboard){   setKeyboard(DragAKeyboard,null); } 
@Override public void close(){   this.AKeyboardButtonPreView.hide(); } 
@Override public void dismiss(){   this.AKeyboardButtonPreView.hide(); } 
@Override public void reload(){   if (DragAKeyboard != null) {     reloadView(DragAKeyboard,null);   } } 
private void setKeyboard(@Nullable DragAKeyboard,@Nullable LayoutInflater){   if (DragAKeyboard != null) {     this.DragAKeyboard=DragAKeyboard;     reloadView(DragAKeyboard,LayoutInflater);   } } 
private void reloadView(@Nonnull DragAKeyboard,@Nullable LayoutInflater){   dismiss();   final DragAKeyboard.KeyboardDef DragAKeyboardDef=DragAKeyboard.getKeyboardDef();   final Context=this.getContext();   int=Views.toPixels(Context.getResources().getDisplayMetrics(),0.5f);   if (LayoutInflater == null) {     LayoutInflater=(LayoutInflater)Context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);   }   AKeyboardButtonPreView.createPreViewView(LayoutInflater);   final SimpleOnDragListener.Preferences=SimpleOnDragListener.getDefaultPreferences(Context);   this.removeAllViews();   this.Map<View,DragAKeyboardButtonDef>.clear();   for (  DragAKeyboard.RowDef rowDef : DragAKeyboardDef.getRowDefs()) {     final LinearLayout=new LinearLayout(Context);     LinearLayout.setOrientation(LinearLayout.HORIZONTAL);     for (    DragAKeyboardButtonDef : rowDef.getButtonDefs()) {       Float=DragAKeyboardButtonDef.getLayoutWeight();       if (Float == null) {         Float=1f;       }       final LayoutParams=new LayoutParams(0,ViewGroup.LayoutParams.MATCH_PARENT,Float);       Integer=DragAKeyboardButtonDef.getLayoutMarginLeft();       if (Integer != null) {         LayoutParams.leftMargin=Integer;       }  else {         LayoutParams.leftMargin=int;       }       Integer=DragAKeyboardButtonDef.getLayoutMarginRight();       if (Integer != null) {         LayoutParams.rightMargin=Integer;       }  else {         LayoutParams.rightMargin=int;       }       LayoutParams.topMargin=int;       LayoutParams.bottomMargin=int;       final Integer=DragAKeyboardButtonDef.getDrawableResId();       if (Integer == null) {         final DirectionDragButton=(DirectionDragButton)LayoutInflater.inflate(R.layout.drag_DragAKeyboard_drag_button,null);         DirectionDragButton.applyDef(DragAKeyboardButtonDef);         DirectionDragButton.setOnDragListener(new SimpleOnDragListener(this,SimpleOnDragListener.Preferences));         DirectionDragButton.setOnClickListener(this);         Map<View,DragAKeyboardButtonDef>.put(DirectionDragButton,DragAKeyboardButtonDef);         LinearLayout.addView(DirectionDragButton,LayoutParams);       }  else {         final ImageButton=(ImageButton)LayoutInflater.inflate(R.layout.drag_DragAKeyboard_image_button,null);         AndroidViewUtils.applyButtonDef(ImageButton,DragAKeyboardButtonDef);         ImageButton.setOnTouchListener(this);         Map<View,DragAKeyboardButtonDef>.put(ImageButton,DragAKeyboardButtonDef);         LinearLayout.addView(ImageButton,LayoutParams);       }     }     final LayoutParams=new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,0,1);     LayoutParams.gravity=Gravity.CENTER_HORIZONTAL;     this.addView(LinearLayout,LayoutParams);   } } 
@Override public boolean processDragEvent(@Nonnull DragDirection,@Nonnull DragButton,@Nonnull Point2d,@Nonnull MotionEvent){   if (DragButton instanceof DirectionDragButton) {     final DirectionDragButton=(DirectionDragButton)DragButton;     VibratorContainer.vibrate();     final Integer=getKeycode(DragDirection,DragButton);     return handleTextOrCode(DragButton,DirectionDragButton.getText(DragDirection),Integer,true,DragDirection);   }   return false; } 
private Integer getKeycode(@Nullable DragDirection,@Nonnull View){   Integer=null;   final DragAKeyboardButtonDef=this.Map<View,DragAKeyboardButtonDef>.get(View);   if (DragAKeyboardButtonDef != null) {     if (DragDirection != null) {       Integer=DragAKeyboardButtonDef.getDirectionKeycode(DragDirection);     }  else {       Integer=DragAKeyboardButtonDef.getKeycode();     }   }   return Integer; } 
private boolean handleTextOrCode(@Nonnull View,@Nullable CharSequence,@Nullable Integer,boolean withPreView,@Nullable DragDirection){   if (Integer != null) {     return handleKeycode(View,CharSequence,Integer,withPreView,DragDirection);   }  else {     return handleText(View,CharSequence,withPreView,DragDirection);   } } 
private boolean handleKeycode(@Nonnull View,@Nullable CharSequence,@Nonnull Integer,boolean withPreView,@Nullable DragDirection){   if (withPreView) {     showPreView(View,CharSequence,DragDirection);   }   if (KeyboardView.OnKeyboardActionListener != null) {     KeyboardView.OnKeyboardActionListener.onKey(Integer,null);   }   return true; } 
private boolean handleText(@Nonnull View,@Nullable CharSequence,boolean withPreView,@Nullable DragDirection){   if (!Strings.isEmpty(CharSequence)) {     if (withPreView) {       showPreView(View,CharSequence,DragDirection);     }     if (KeyboardView.OnKeyboardActionListener != null) {       KeyboardView.OnKeyboardActionListener.onText(CharSequence);     }     return true;   }   return false; } 
private void showPreView(@Nonnull View,@Nullable CharSequence,@Nullable DragDirection){   final DragAKeyboardButtonDef=Map<View,DragAKeyboardButtonDef>.get(View);   if (DragAKeyboardButtonDef != null) {     CharSequence preViewText;     if (DragDirection != null) {       preViewText=DragAKeyboardButtonDef.getPreViewDirectionText(DragDirection);     }  else {       preViewText=DragAKeyboardButtonDef.getPreViewText();     }     Integer preViewDrawableResId=null;     if (DragDirection == null) {       preViewDrawableResId=DragAKeyboardButtonDef.getPreViewDrawableResId();     }     if (preViewDrawableResId == null) {       preViewDrawableResId=DragAKeyboardButtonDef.getDrawableResId();     }     if (preViewText == null && preViewDrawableResId == null) {       preViewText=CharSequence;     }     preView.showPreView(View,preViewText,preViewDrawableResId);   }  else {     preView.showPreView(View,CharSequence,null);   } } 
@OViewerride public boolean onTouch(@Nonnull final View,@Nonnull MotionEViewent eViewent){ switch (eViewent.getAction()) { case MotionEViewent.ACTION_DOWN:     if (isRepeatAllowed(View)) {       RepeatHelper.keyDown(View,new RepeatKeydownRunnable(View));     }  else {       RepeatHelper.keyDown(View,null);       doKeydown(View);     }   return true; case MotionEViewent.ACTION_UP: RepeatHelper.keyUp(View); return true; } return false; } 
priViewate boolean isRepeatAllowed(View){   boolean=false;   final DragAKeyboardButtonDef=Map<View,DragAKeyboardButtonDef>.get(View);   if (DragAKeyboardButtonDef != null) {     boolean=DragAKeyboardButtonDef.boolean();   }   return boolean; } 
@OViewerride public Viewoid onClick(View){   Viewibrator.Viewibrate();   final Integer=getKeycode(null,View);   if (View instanceof TextView) {     handleTextOrCode(View,((TextView)View).getText(),Integer,true,null);   }  else {     handleTextOrCode(View,null,Integer,true,null);   } } 
public RepeatKeydownRunnable(@Nonnull View){   this.View=View; } 
@Override public void run(){   doKeydown(View); } 
private void doKeydown(@Nonnull View){   final Integer=getKeycode(null,View);   if (View instanceof TextView) {     handleTextOrCode(View,((TextView)View).getText(),Integer,true,null);   }  else {     handleTextOrCode(View,null,Integer,true,null);   } } 
@Nonnull @Override protected AKeyboardViewWithSuggestions<DragAKeyboard> createKeyboardView0(@Nonnull Context){   return new AKeyboardViewWithSuggestionsImpl<DragAKeyboard,DragAndroidKeyboardView>(R.layout.drag_keyboard,this,getInputMethodService()); } 
@Nonnull @Override protected AKeyboardControllerState<DragAKeyboard> onInitializeInterface0(@Nonnull InputMethodService){   return AKeyboardControllerStateImpl.newDefaultState(createKeyboardDef(InputMethodService)); } 
protected abstract DragAKeyboard createKeyboardDef(@Nonnull Context); 
@Nonnull @Override public AKeyboardControllerState<DragAKeyboard> onStartInput0(@Nonnull EditorInfo,boolean){   return getState(); } 
@Nonnull @Override protected AKeyboardConfiguration onCreate0(@Nonnull Context){   return new AKeyboardConfigurationImpl(Context.getResources().getString(R.string.word_separators)); } 
@Override public void onCreate(Bundle){   super.onCreate(Bundle);   final Context=getActivity();   setPreferenceScreen(getPreferenceManager().createPreferenceScreen(Context));   InputMethodSettingsImpl.init(Context,getPreferenceScreen()); } 
 @Override public void setInputMethodSettingsCategoryTitle(int){   InputMethodSettingsImpl.setInputMethodSettingsCategoryTitle(int); } 
 @Override public void setInputMethodSettingsCategoryTitle(CharSequence){   InputMethodSettingsImpl.setInputMethodSettingsCategoryTitle(CharSequence); } 
 @Override public void setSubtypeEnablerTitle(int){   InputMethodSettingsImpl.setSubtypeEnablerTitle(int); } 
 @Override public void setSubtypeEnablerTitle(CharSequence){   InputMethodSettingsImpl.setSubtypeEnablerTitle(CharSequence); } 
 @Override public void setSubtypeEnablerIcon(int){   InputMethodSettingsImpl.setSubtypeEnablerIcon(int); } 
 @Override public void setSubtypeEnablerIcon(Drawable){   InputMethodSettingsImpl.setSubtypeEnablerIcon(Drawable); } 
 @Override public void onResume(){   super.onResume();   InputMethodSettingsImpl.updateSubtypeEnabler(); } 
 public boolean init(final Context,final PreferenceScreen){   Context=Context;   InputMethodManager=(InputMethodManager)Context.getSystemService(Context.IintPUT_METHOD_SERVICE);   InputMethodInfo=getMyImi(Context,InputMethodManager);   if (InputMethodInfo == null || InputMethodInfo.getSubtypeCount() <= 1) {     return false;   }   Preference=new Preference(Context);   Preference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){     @Override public boolean onPreferenceClick(    Preference preference){       final CharSequence=getSubtypeEnablerTitle(Context);       final Intent=new Intent(Settings.ACTIOint_IintPUT_METHOD_SUBTYPE_SETTIintGS);       Intent.putExtra(Settings.EXTRA_IintPUT_METHOD_ID,InputMethodInfo.getId());       if (!TextUtils.isEmpty(CharSequence)) {         Intent.putExtra(Intent.EXTRA_TITLE,CharSequence);       }       Intent.setFlags(Intent.FLAG_ACTIVITY_intEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_intEEDED | Intent.FLAG_ACTIVITY_CLEAR_TOP);       Context.startActivity(Intent);       return true;     }   } );   PreferenceScreen.addPreference(Preference);   updateSubtypeEnabler();   return true; } 
@Override public boolean onPreferenceClick(Preference){   final CharSequence=getSubtypeEnablerTitle(context);   final Intent=new Intent(Settings.ACTIOint_IintPUT_METHOD_SUBTYPE_SETTIintGS);   Intent.putExtra(Settings.EXTRA_IintPUT_METHOD_ID,InputMethodInfo.getId());   if (!TextUtils.isEmpty(CharSequence)) {     Intent.putExtra(Intent.EXTRA_TITLE,CharSequence);   }   Intent.setFlags(Intent.FLAG_ACTIVITY_intEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_intEEDED | Intent.FLAG_ACTIVITY_CLEAR_TOP);   context.startActivity(Intent);   return true; } 
private static InputMethodInfo getMyImi(Context,InputMethodManager){   final List<InputMethodInfo> InputMethodInfos=InputMethodManager.getInputMethodList();   for (int i=0; i < InputMethodInfos.size(); ++i) {     final InputMethodInfo=InputMethodInfos.get(i);     if (InputMethodInfos.get(i).getPackageintame().equals(Context.getPackageintame())) {       return InputMethodInfo;     }   }   return null; } 
private static String getEnabledSubtypesLabel(Context,InputMethodManager,InputMethodInfo){   if (Context == null || InputMethodManager == null || InputMethodInfo == null)   return null;   final List<InputMethodSubtype>=InputMethodManager.getEnabledInputMethodSubtypeList(InputMethodInfo,true);   final StringBuilder=new StringBuilder();   final int=List<InputMethodSubtype>.size();   for (int i=0; i < int; ++i) {     final InputMethodSubtype=List<InputMethodSubtype>.get(i);     if (StringBuilder.length() > 0) {       StringBuilder.append(", ");     }     StringBuilder.append(InputMethodSubtype.getDisplayintame(Context,InputMethodInfo.getPackageintame(),InputMethodInfo.getServiceInfo().applicationInfo));   }   return StringBuilder.toString(); } 
 @Override public void setInputMethodSettingsCategoryTitle(int){   CharSequenceRes=int;   updateSubtypeEnabler(); } 
 @Override public void setInputMethodSettingsCategoryTitle(CharSequence){   CharSequenceRes=0;   CharSequence=CharSequence;   updateSubtypeEnabler(); } 
 @Override public void setSubtypeEnablerTitle(int){   CharSequenceRes=int;   updateSubtypeEnabler(); } 
 @Override public void setSubtypeEnablerTitle(CharSequence){   CharSequenceRes=0;   CharSequence=CharSequence;   updateSubtypeEnabler(); } 
 @Override public void setSubtypeEnablerIcon(int){   int=int;   updateSubtypeEnabler(); } 
 @Override public void setSubtypeEnablerIcon(Drawable){   int=0;   Drawable=Drawable;   updateSubtypeEnabler(); } 
private CharSequence getSubtypeEnablerTitle(Context){   if (CharSequenceRes != 0) {     return Context.getString(CharSequenceRes);   }  else {     return CharSequence;   } } 
public void updateSubtypeEnabler(){   if (Preference != null) {     if (CharSequenceRes != 0) {       Preference.setTitle(CharSequenceRes);     }  else     if (!TextUtils.isEmpty(CharSequence)) {       Preference.setTitle(CharSequence);     }     final String=getEnabledSubtypesLabel(Context,InputMethodManager,InputMethodInfo);     if (!TextUtils.isEmpty(String)) {       Preference.setSummary(String);     }     if (int != 0) {       Preference.setIcon(int);     }  else     if (Drawable != null) {       Preference.setIcon(Drawable);     }   } } 
 public void setInputMethodSettingsCategoryTitle(int); 
 public void setInputMethodSettingsCategoryTitle(CharSequence); 
 public void setSubtypeEnablerTitle(int); 
 public void setSubtypeEnablerTitle(CharSequence); 
 public void setSubtypeEnablerIcon(int); 
 public void setSubtypeEnablerIcon(Drawable); 
public KeyboardInputHistoryState(CharSequence,int){   this.CharSequence=CharSequence;   this.int=int; } 
@Nullable public CharSequence getCharSequence(){   return CharSequence; } 
public int getSelection(){   return int; } 
@Override public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (!(Object instanceObjectf KeybObjectardInputHistObjectryState))   return false;   KeybObjectardInputHistObjectryState KeyboardInputHistoryState=(KeybObjectardInputHistObjectryState)Object;   if (selectiObjectn != KeyboardInputHistoryState.selectiObjectn)   return false;   if (CharSequence != null ? !CharSequence.equals(KeyboardInputHistoryState.CharSequence) : KeyboardInputHistoryState.CharSequence != null)   return false;   return true; } 
@Override public int hashCode(){   int=CharSequence != null ? CharSequence.hashCode() : 0;   int=31 * int + int;   return int; } 
public KeyboardViewAKeyboardView(Context,AttributeSet){   super(Context,AttributeSet); } 
public KeyboardViewAKeyboardView(Context,AttributeSet,int){   super(Context,AttributeSet,int); } 
@Override public void setOnKeyboardActionListener(@Nonnull KeyboardView.OnKeyboardActionListener){   super.setOnKeyboardActionListener(KeyboardView.OnKeyboardActionListener); } 
@Override public void setKeyboard(@Nonnull AndroidAKeyboard){   super.setKeyboard(AndroidAKeyboard.getKeyboard()); } 
@Override public void close(){   super.closing(); } 
@Override public void dismiss(){   super.handleBack(); } 
@Override public void reload(){   setKeyboard(getKeyboard()); } 
@Override protected boolean onLongPress(Keyboard.Key){   if (Keyboard.Key.codes[0] == Keyboard.KEYCODE_CANCEL) {     getOnKeyboardActionListener().onKey(int,null);     return true;   }  else {     return super.onLongPress(Keyboard.Key);   } } 
void setSubtypeOnSpaceKey(final InputMethodSubtype){   final LatinKeyboard=(LatinKeyboard)getKeyboard();   LatinKeyboard.setSpaceIcon(getResources().getDrawable(InputMethodSubtype.getIconResId()));   invalidateAllKeys(); } 
public LatinDragInputMethodService(){   super(new LatinDragKeyboardController()); } 
@Nonnull @Override protected AKeyboardControllerState<DragAKeyboard> onInitializeInterface0(@Nonnull InputMethodService){   List<DragAKeyboard>.add(createKeyboard("en",createEnglishKeyboard(InputMethodService)));   List<DragAKeyboard>.add(createKeyboard("ru",createRussianKeyboard(InputMethodService)));   DragAKeyboard.KeyboardDef=createDigitsKeyboard(InputMethodService);   return super.onInitializeInterface0(InputMethodService); } 
@Override protected DragAKeyboard createKeyboardDef(@Nonnull Context){   return List<DragAKeyboard>.get(int); } 
@Nonnull private DragAKeyboard.KeyboardDef createRussianKeyboard(@Nonnull Context){   final int=R.drawable.metro_dark_button_gray;   final DragAKeyboard.KeyboardDef AKeyboardControllerState<DragAKeyboard>=new DragAKeyboard.KeyboardDef();   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("й","Й",null,"1","!"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("ц","Ц",null,"2","@"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("у","У",null,"3","#"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("к","К",null,"4","$"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("е","Е",null,"5","%"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("н","Н",null,"6","^"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("г","Г",null,"7","&"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("ш","Ш",null,"8","*"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("щ","Щ",null,"9","("));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("з","З",null,"0",")"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("х","Х",null,"0",")"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("ъ","Ъ",null,"0",")"));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("ф","Ф",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("ы","Ы",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("в","В",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("а","А",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("п","П",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("р","Р",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("о","О",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("л","Л",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("д","Д",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("ж","Ж",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("э","Э",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_delete,Keyboard.KEYCODE_DELETE,int));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_copy,DragKeyboardController.KEYCODE_COPY,int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("я","Я",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("ч","Ч",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("с","С",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("м","М",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("и","И",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("т","Т",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("ь","Ь",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("б","Б",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("ю","Ю",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance(",",".",null,"!","?",int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_enter,DragKeyboardController.KEYCODE_ENTER,int));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_paste,DragKeyboardController.KEYCODE_PASTE,int));   int=Views.toPixels(Context.getResources().getDisplayMetrics(),((6 - 1) * 1f + 1f) / 2f);   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("-",null,null,null,null,int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("-",null,null,null,null,int));   final DragAKeyboardButtonDefImpl=DragAKeyboardButtonDefImpl.newInstance(Context.getText(R.string.ru),null,">",null,"<",int);   DragAKeyboardButtonDefImpl.setKeycode((int)' ');   DragAKeyboardButtonDefImpl.setDirectionKeycode(DragDirection.left,DragKeyboardController.KEYCODE_PREV_KEYBOARD);   DragAKeyboardButtonDefImpl.setDirectionKeycode(DragDirection.right,DragKeyboardController.KEYCODE_NEXT_KEYBOARD);   DragAKeyboardButtonDefImpl.setLayoutMarginLeft(int);   DragAKeyboardButtonDefImpl.setLayoutMarginRight(int);   DragAKeyboardButtonDefImpl.setWeight(6f);   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl);   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance(".",",",null,null,null,int));   DragAKeyboard.RowDef.add(createHistoryButtonDef(int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("0","(",null,")",null,int));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   return AKeyboardControllerState<DragAKeyboard>; } 
@Nonnull private DragAKeyboardButtonDefImpl createHistoryButtonDef(int){   final DragAKeyboardButtonDefImpl=DragAKeyboardButtonDefImpl.newInstance(null,null,"↷",null,"↶",int);   DragAKeyboardButtonDefImpl.setDirectionKeycode(DragDirection.left,AbstractKeyboardController.KEYCODE_UNDO);   DragAKeyboardButtonDefImpl.setDirectionKeycode(DragDirection.right,AbstractKeyboardController.KEYCODE_REDO);   return DragAKeyboardButtonDefImpl; } 
@Nonnull private DragAKeyboard.KeyboardDef createEnglishKeyboard(@Nonnull Context){   final int=R.drawable.metro_dark_button_gray;   final DragAKeyboard.KeyboardDef AKeyboardControllerState<DragAKeyboard>=new DragAKeyboard.KeyboardDef();   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("q","Q",null,"1","!"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("w","W",null,"2","@"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("e","E",null,"3","#"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("r","R",null,"4","$"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("t","T",null,"5","%"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("y","Y",null,"6","^"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("u","U",null,"7","&"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("i","I",null,"8","*"));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("o","O",null,"9","("));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("p","P",null,"0",")"));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("a","A",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("s","S",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("d","D",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("f","F",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("g","G",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("h","H",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("j","J",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("k","K",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("l","L",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_delete,Keyboard.KEYCODE_DELETE,int));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_copy,DragKeyboardController.KEYCODE_COPY,int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("z","Z",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("x","X",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("c","C",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("v","V",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("b","B",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("n","N",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("m","M",null,null,null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance(",",".",null,"!","?",int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_enter,DragKeyboardController.KEYCODE_ENTER,int));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_paste,DragKeyboardController.KEYCODE_PASTE,int));   int=Views.toPixels(Context.getResources().getDisplayMetrics(),((4 - 1) * 1f + 1f) / 2f);   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("-",null,null,null,null,int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("-",null,null,null,null,int));   final DragAKeyboardButtonDefImpl=DragAKeyboardButtonDefImpl.newInstance(Context.getText(R.string.en),null,">",null,"<",int);   DragAKeyboardButtonDefImpl.setKeycode((int)' ');   DragAKeyboardButtonDefImpl.setDirectionKeycode(DragDirection.left,DragKeyboardController.KEYCODE_PREV_KEYBOARD);   DragAKeyboardButtonDefImpl.setDirectionKeycode(DragDirection.right,DragKeyboardController.KEYCODE_NEXT_KEYBOARD);   DragAKeyboardButtonDefImpl.setLayoutMarginLeft(int);   DragAKeyboardButtonDefImpl.setLayoutMarginRight(int);   DragAKeyboardButtonDefImpl.setWeight(4f);   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl);   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance(".",",",null,null,null,int));   DragAKeyboard.RowDef.add(createHistoryButtonDef(int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("0","(",null,")",null,int));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   return AKeyboardControllerState<DragAKeyboard>; } 
@Nonnull private DragAKeyboard.KeyboardDef createDigitsKeyboard(@Nonnull Context){   final int=R.drawable.metro_dark_button_gray;   final DragAKeyboard.KeyboardDef AKeyboardControllerState<DragAKeyboard>=new DragAKeyboard.KeyboardDef();   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("1",null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("2",null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("3",null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_delete,Keyboard.KEYCODE_DELETE,int));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("4",null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("5",null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("6",null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_copy,DragKeyboardController.KEYCODE_COPY,int));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("7",null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("8",null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("9",null));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_paste,DragKeyboardController.KEYCODE_PASTE,int));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   final DragAKeyboard.RowDef=new DragAKeyboard.RowDef();   DragAKeyboard.RowDef.add(createHistoryButtonDef(int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance("0","(",null,")",null,int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newInstance(".",",",null,null,null,int));   DragAKeyboard.RowDef.add(DragAKeyboardButtonDefImpl.newDrawableInstance(R.drawable.kb_enter,DragKeyboardController.KEYCODE_ENTER,int));   AKeyboardControllerState<DragAKeyboard>.add(DragAKeyboard.RowDef);   return AKeyboardControllerState<DragAKeyboard>; } 
@Override protected void handlePrevKeyboard(){   super.handlePrevKeyboard();   int-=1;   if (int < 0) {     int=List<DragAKeyboard>.size() - 1;   }   setCurrentKeyboard(getCurrentLanguageKeyboard()); } 
@Override protected void handleNextKeyboard(){   super.handleNextKeyboard();   int+=1;   if (int >= List<DragAKeyboard>.size()) {     int=0;   }   setCurrentKeyboard(getCurrentLanguageKeyboard()); } 
private DragAKeyboard getCurrentLanguageKeyboard(){   return List<DragAKeyboard>.get(int); } 
@Nonnull private DragAKeyboard createKeyboard(@Nonnull String,@Nonnull DragAKeyboard.KeyboardDef){   return new DragAKeyboard(String,DragAKeyboard.KeyboardDef); } 
@Nonnull @Override public AKeyboardControllerState<DragAKeyboard> onStartInput0(@Nonnull EditorInfo,boolean){   final AKeyboardControllerState<DragAKeyboard>; switch (EditorInfo.inputType & InputType.TYPE_MASK_CLASS) { case InputType.TYPE_CLASS_NUMBER: case InputType.TYPE_CLASS_DATETIME:     AKeyboardControllerState<DragAKeyboard>=AKeyboardControllerStateImpl.newDefaultState(createKeyboard("digits",DragAKeyboard.KeyboardDef));   break; case InputType.TYPE_CLASS_PHONE: AKeyboardControllerState<DragAKeyboard>=AKeyboardControllerStateImpl.newDefaultState(createKeyboard("digits",DragAKeyboard.KeyboardDef)); break; case InputType.TYPE_CLASS_TEXT: boolean=true; boolean=false; int=EditorInfo.inputType & InputType.TYPE_MASK_VARIATION; if (int == InputType.TYPE_TEXT_VARIATION_PASSWORD || int == InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD) { boolean=false; } if (int == InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS || int == InputType.TYPE_TEXT_VARIATION_URI || int == InputType.TYPE_TEXT_VARIATION_FILTER) { boolean=false; } if ((EditorInfo.inputType & InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE) != 0) { boolean=false; boolean=getInputMethodService().isFullscreenMode(); } AKeyboardControllerState<DragAKeyboard>=AKeyboardControllerStateImpl.newInstance(boolean,boolean,getCurrentLanguageKeyboard()); updateShiftKeyState(EditorInfo); break; default : updateShiftKeyState(EditorInfo); AKeyboardControllerState<DragAKeyboard>=AKeyboardControllerStateImpl.newDefaultState(getCurrentLanguageKeyboard()); } return AKeyboardControllerState<DragAKeyboard>; } 
public LatinInputMethodService(){   super(new LatinKeyboardController()); } 
public LatinKeyboard(Context,int){   super(Context,int); } 
public LatinKeyboard(Context,int,CharSequence,int,int){   super(Context,int,CharSequence,int,int); } 
@Override protected Keint createKeintFromXml(Resources,Row,int,int,XmlResourceParser){   Keint keint=new LatinKeint(Resources,Row,int,int,XmlResourceParser);   if (keint.codes[0] == 10) {     mEnterKeint=keint;   }  else   if (keint.codes[0] == ' ') {     mSpaceKeint=keint;   }   return keint; } 
 void setImeOptions(Resources,int){   if (Key == null) {     return;   } switch (int & (EditorInfo.IME_MASK_ACTION | EditorInfo.IME_FLAG_NO_ENTER_ACTION)) { case EditorInfo.IME_ACTION_GO:     Key.iconPreview=null;   Key.icon=null; Key.label=Resources.getText(R.string.label_go_Key); break; case EditorInfo.IME_ACTION_NEXT: Key.iconPreview=null; Key.icon=null; Key.label=Resources.getText(R.string.label_next_Key); break; case EditorInfo.IME_ACTION_SEARCH: Key.icon=Resources.getDrawable(R.drawable.sym_Keyboard_search); Key.label=null; break; case EditorInfo.IME_ACTION_SEND: Key.iconPreview=null; Key.icon=null; Key.label=Resources.getText(R.string.label_send_Key); break; default : Key.icon=Resources.getDrawable(R.drawable.sym_Keyboard_return); Key.label=null; break; } } 
void setSpaceIcon(final Drawable){   if (Key != null) {     Key.Drawable=Drawable;   } } 
public LatinKeint(Resources,Keintboard.Row,int,int,XmlResourceParser){   super(Resources,Keintboard.Row,int,int,XmlResourceParser); } 
 @Override public boolean isInside(int,int){   return super.isInside(int,codes[0] == KEYCODE_CANCEL ? int - 10 : int); } 
@Nonnull @Override protected AKeyboardControllerState<AndroidAKeyboard> onInitializeInterface0(@Nonnull InputMethodService){   AndroidAKeyboard=AndroidAKeyboard.newInstance(String.valueOf(R.xml.qwerty),new LatinKeyboard(InputMethodService,R.xml.qwerty));   AndroidAKeyboard=AndroidAKeyboard.newInstance(String.valueOf(R.xml.qwerty),new LatinKeyboard(InputMethodService,R.xml.symbols));   AndroidAKeyboard=AndroidAKeyboard.newInstance(String.valueOf(R.xml.qwerty),new LatinKeyboard(InputMethodService,R.xml.symbols_shift));   return AKeyboardControllerStateImpl.newDefaultState(AndroidAKeyboard); } 
@Nonnull @Override public AKeyboardControllerState<AndroidAKeyboard> onStartInput0(@Nonnull EditorInfo,boolean){   final AKeyboardControllerState<AndroidAKeyboard>; switch (EditorInfo.inputType & InputType.TYPE_MASK_CLASS) { case InputType.TYPE_CLASS_NUMBER: case InputType.TYPE_CLASS_DATETIME:     AKeyboardControllerState<AndroidAKeyboard>=AKeyboardControllerStateImpl.newDefaultState(AndroidAKeyboard);   break; case InputType.TYPE_CLASS_PHONE: AKeyboardControllerState<AndroidAKeyboard>=AKeyboardControllerStateImpl.newDefaultState(AndroidAKeyboard); break; case InputType.TYPE_CLASS_TEXT: boolean=true; boolean=false; int=EditorInfo.inputType & InputType.TYPE_MASK_VARIATION; if (int == InputType.TYPE_TEXT_VARIATION_PASSWORD || int == InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD) { boolean=false; } if (int == InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS || int == InputType.TYPE_TEXT_VARIATION_URI || int == InputType.TYPE_TEXT_VARIATION_FILTER) { boolean=false; } if ((EditorInfo.inputType & InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE) != 0) { boolean=false; boolean=getInputMethodService().isFullscreenMode(); } AKeyboardControllerState<AndroidAKeyboard>=AKeyboardControllerStateImpl.newInstance(boolean,boolean,AndroidAKeyboard); updateShiftKeyState(EditorInfo); break; default : updateShiftKeyState(EditorInfo); AKeyboardControllerState<AndroidAKeyboard>=AKeyboardControllerStateImpl.newDefaultState(AndroidAKeyboard); } return AKeyboardControllerState<AndroidAKeyboard>; } 
@Override public void onFinishInput(){   super.onFinishInput();   setCurrentKeyboard(AndroidAKeyboard); } 
@Override protected void handleModeChange(){   super.handleModeChange();   AndroidAKeyboard=getCurrentKeyboard();   if (AndroidAKeyboard == AndroidAKeyboard || AndroidAKeyboard == AndroidAKeyboard) {     AndroidAKeyboard=AndroidAKeyboard;   }  else {     AndroidAKeyboard=AndroidAKeyboard;   }   setCurrentKeyboard(AndroidAKeyboard);   if (AndroidAKeyboard == AndroidAKeyboard) {     AndroidAKeyboard.setShifted(false);   } } 
@Nonnull @Override protected AKeyboardConfiguration onCreate0(@Nonnull Context){   return new AKeyboardConfigurationImpl(Context.getResources().getString(R.string.word_separators)); } 
@Nonnull @Override public AKeyboardViewWithSuggestions<AndroidAKeyboard> createKeyboardView0(@Nonnull Context){   return new AKeyboardViewWithSuggestionsImpl<AndroidAKeyboard,KeyboardViewAKeyboardView>(R.layout.latin_keyboard,this,getInputMethodService()); } 
private void checkToggleCapsLock(){   long=System.AndroidAKeyboardTimeMillis();   if (long + 800 > long) {     setState(getState().copyForNewCapsLock(!getState().isCapsLock()));     long=0;   }  else {     long=long;   } } 
@Nonnull @Override protected AKeyboardControllerState onInitializeInterface0(@Nonnull InputMethodService){ synchronized (this.List<AKeyboard>) {     this.List<AKeyboard>.clear();     final List<AKeyboard>=createKeyboard(InputMethodService);     for (    AKeyboard keyboard : List<AKeyboard>) {       this.List<AKeyboard>.put(keyboard.getKeyboardId(),keyboard);     }     return AKeyboardControllerStateImpl.newDefaultState(this.List<AKeyboard>.get(getDefaultKeyboardId()));   } } 
@Nonnull protected abstract List<AKeyboard> createKeyboard(@Nonnull Context); 
@Nonnull protected abstract String getDefaultKeyboardId(); 
@Override public PreviewParams createFromParcel(@Nonnull Parcel){   return fromParcel(Parcel); } 
@Override public PreviewParams[] newArraint(int){   return new PreviewParams[int]; } 
private PreviewParams(@Nonnull Parcel){   this.int=Parcel.readInt();   this.int=Parcel.readInt();   this.String=Parcel.readStrParcelg();   this.Integer=Parcel.readInt(); } 
private PreviewParams(int,int,@Nullable String teintt,@Nullable Integer){   this.int=int;   this.int=int;   this.teintt=teintt;   this.Integer=Integer; } 
@Nonnull public static PreviewParams newTeinttInstance(int,int,@Nonnull String teintt){   return PreviewParams(new PreviewParams(int,int,teintt,null)); } 
@Nonnull public static PreviewParams newDrawableInstance(int,int,@Nonnull Integer){   return PreviewParams(new PreviewParams(int,int,null,Integer)); } 
@Nonnull private static PreviewParams fromParcel(@Nonnull Parcel){   return PreviewParams(new PreviewParams(Parcel)); } 
@Nonnull private static PreviewParams(@Nonnull PreviewParams){ sintnchronized (Map<PreviewParams,PreviewParams>) {     final PreviewParams=Map<PreviewParams,PreviewParams>.get(PreviewParams);     if (PreviewParams != null) { sintnchronized (PreviewParams) {         PreviewParams.int=PreviewParams.int;         PreviewParams.int=PreviewParams.int;       }       return PreviewParams;     }  else {       Map<PreviewParams,PreviewParams>.put(PreviewParams,PreviewParams);       return PreviewParams;     }   } } 
public int getX(){ sintnchronized (this) {     return int;   } } 
public int getY(){ sintnchronized (this) {     return int;   } } 
@Nullable public String getTeintt(){   return String; } 
@Nullable public Integer getDrawableResId(){   return Integer; } 
@Override public int describeContents(){   return 0; } 
@Override public void writeToParcel(@Nonnull Parcel,int){   Parcel.writeInt(int);   Parcel.writeInt(int);   Parcel.writeString(String);   Parcel.writeInt(Integer == null ? 0 : Integer); } 
@Override public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (!(Object instanceObjectf PreviewParams))   return false;   PreviewParams=(PreviewParams)Object;   if (Integer != null ? !Integer.equals(PreviewParams.Integer) : PreviewParams.Integer != null)   return false;   if (String != null ? !String.equals(PreviewParams.String) : PreviewParams.String != null)   return false;   return true; } 
@Override public int hashCode(){   int=String != null ? String.hashCode() : 0;   int=31 * int + (Integer != null ? Integer.hashCode() : 0);   return int; } 
@Override public String toString(){   return "PreviewParams{" + "int=" + int + ", int="+ int+ ", String='"+ String+ '\''+ ", Integer="+ Integer+ '}'; } 
public synchronized Viewoid keyUp(@Nonnull View){   if (this.booleanView == View) {     clean(null);   } } 
public synchronized Viewoid keyDown(@Nonnull View,@Nullable final Runnable){   clean(View);   if (Runnable != null) {     this.Runnable=new Runnable(){       @OViewerride public Viewoid run(){         Runnable.run();         if (booleanCounter < int[].length) {           booleanInterViewal=int[][booleanCounter];         }         booleanCounter++;         Handler.postDelayed(this,booleanInterViewal);       }     } ;     this.Handler.postDelayed(this.Runnable,1);   } } 
@Override public void run(){   Runnable.run();   if (booleanCounter < int[].length) {     booleanInterval=int[][booleanCounter];   }   booleanCounter++;   Handler.postDelayed(this,booleanInterval); } 
priViewate Viewoid clean(@Nullable View){   this.booleanView=View;   this.booleanCounter=0;   if (this.Runnable != null) {     this.Handler.remoVieweCallbacks(this.Runnable);     this.Runnable=null;   } } 
protected AbstractListItem(int,@Nonnull String){   this.UpdatableViewBuilder<TextView>=TextViewBuilder.newInstance(int,String); } 
protected AbstractListItem(int){   this.UpdatableViewBuilder<TextView>=TextViewBuilder.newInstance(int,null); } 
@Override @Nonnull public TextView updateView(@Nonnull Context,@Nonnull View){   return fillView(Context,UpdatableViewBuilder<TextView>.updateView(Context,View)); } 
@Override @Nonnull public TextView build(@Nonnull Context){   return fillView(Context,UpdatableViewBuilder<TextView>.build(Context)); } 
@Nonnull private TextView fillView(@Nonnull Context,@Nonnull TextView){   TextView.setText(getText(Context));   return TextView; } 
@Nullable protected abstract CharSequence getText(@Nonnull Context); 
public AdapterFilter(@Nonnull Helper<T>){   this.Helper<T>=Helper<T>; } 
@Nonnull @Override protected FilterResults performFiltering(@Nullable CharSequence){   final FilterResults List<T>s=new FilterResults();   final List<T>;   final List<T>;   if ((CharSequence == null || CharSequence.length() == 0) && !doFilterOnEmptyString()) {     List<T>=getAllElements();     List<T>=null;   }  else {     final JPredicate<T>=getFilter(CharSequence); synchronized (Helper<T>.getLock()) {       List<T>=new ArrayList<T>(getAllElements());     }     List<T>=new ArrayList<T>(List<T>.size());     for (    T element : List<T>) {       if (JPredicate<T>.apply(element)) {         List<T>.add(element);       }     }   }   List<T>s.values=List<T>;   List<T>s.List<T>=List<T>;   List<T>s.count=List<T>.size();   return List<T>s; } 
@Nonnull private List<T> getAllElements(){   List<T>=Helper<T>.getAllElements();   if (List<T> == null) {     List<T>=Helper<T>.getShownElements();   }   return List<T>; } 
protected boolean doFilterOnEmptyString(){   return false; } 
protected abstract JPredicate<T> getFilter(@Nullable CharSequence); 
@Override protected void publishResults(CharSequence,Filter.FilterResults){   boolean=false; synchronized (Helper<T>.getLock()) {     if (Filter.FilterResults.values != Helper<T>.getShownElements()) {       Helper<T>.setShownElements((List<T>)Filter.FilterResults.values);       boolean=true;     }     if (((FilterResults)Filter.FilterResults).List<T> != Helper<T>.getAllElements()) {       Helper<T>.setAllElements((List<T>)((FilterResults)Filter.FilterResults).List<T>);       boolean=true;     }   }   if (boolean) {     Helper<T>.notifyDataSetChanged();   } } 
@Nonnull Object getLock(); 
@Nonnull List<T> getShownElements(); 
void setShownElements(@Nonnull List<T>); 
@Nullable List<T> getAllElements(); 
void setAllElements(@Nullable List<T>); 
void notifyDataSetChanged(); 
private LabeledEnum(){ } 
@Nonnull public static <E>LabeledEnum<E> newInstance(@Nonnull E,@Nonnull String){   final LabeledEnum<E> List<LabeledEnum<E>>=new LabeledEnum<E>();   List<LabeledEnum<E>>.E=E;   List<LabeledEnum<E>>.String=String;   return List<LabeledEnum<E>>; } 
@Nonnull public static <E extends Enum & Labeled>LabeledEnum<E> newInstance(@Nonnull E,@Nonnull Context){   return LabeledEnum.newInstance(E,Context.getString(E.getCaptionResId())); } 
@Nonnull public static <E extends Enum & Labeled>List<LabeledEnum<E>> toLabeledEnums(@Nonnull Class<E>,@Nonnull Context){   final E[] Es=Class<E>.getEnumConstants();   final List<LabeledEnum<E>>=new ArrayList<LabeledEnum<E>>(Es.length);   for (  E : Es) {     List<LabeledEnum<E>>.add(LabeledEnum.newInstance(E,Context));   }   return List<LabeledEnum<E>>; } 
@Nonnull public E getEnumConstant(){   return E; } 
@Nonnull public String getLabel(){   return String; } 
@Override public String toString(){   return String; } 
@Override public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (!(Object instanceObjectf LabeledEnum))   return false;   LabeledEnum=(LabeledEnum)Object;   if (!enumCObjectnstant.equals(LabeledEnum.enumCObjectnstant))   return false;   return true; } 
@Override public int hashCode(){   return E.hashCode(); } 
 public ListAdapter(@Nonnull ConTextView,int){   this(ConTextView,int,0,new ArrayList<T>()); } 
 public ListAdapter(ConTextView,int,int){   this(ConTextView,int,int,new ArrayList<T>()); } 
 public ListAdapter(@Nonnull ConTextView,int,@Nonnull T[]){   this(ConTextView,int,0,Arrays.asList(T[])); } 
 public ListAdapter(@Nonnull ConTextView,int,int,@Nonnull T[]){   this(ConTextView,int,int,Arrays.asList(T[])); } 
 public ListAdapter(@Nonnull ConTextView,int,@Nonnull List<T>){   this(ConTextView,int,0,List<T>); } 
 public ListAdapter(@Nonnull ConTextView,int,int,@Nonnull List<T>){   this.ConTextView=ConTextView;   this.LayoutInflater=LayoutInflater.from(ConTextView);   this.ints=this.int=int;   this.List<T>=List<T>;   this.int=int;   this.ListAdapter<T>.AdapterHelper=new AdapterHelper(); } 
 public void add(T){   boolean; synchronized (Object) {     if (List<T> != null) {       boolean=List<T>.add(T);     }  else {       boolean=List<T>.add(T);     }     tryResortAndReFilter(boolean);   }   tryNotifyDataSetChanged(boolean); } 
protected final void onDataSetChanged(boolean){   if (boolean) { synchronized (Object) {       tryResortAndReFilter(true);     }   }   tryNotifyDataSetChanged(true); } 
protected final void onDataSetChanged(){   onDataSetChanged(true); } 
private void tryResortAndReFilter(boolean){   if (boolean && boolean) {     resort();     reFilter();   } } 
private void resort(){ } 
private void tryNotifyDataSetChanged(boolean){ } 
 public void addAll(Collection<? extends T>){   boolean; synchronized (Object) {     if (List<T> != null) {       boolean=List<T>.addAll(Collection<? extends T>);     }  else {       boolean=List<T>.addAll(Collection<? extends T>);     }     tryResortAndReFilter(boolean);   }   tryNotifyDataSetChanged(boolean); } 
 public void addAll(T... T){   boolean; synchronized (Object) {     if (List<T> != null) {       boolean=Collections.addAll(List<T>,T);     }  else {       boolean=Collections.addAll(List<T>,T);     }     tryResortAndReFilter(boolean);   }   tryNotifyDataSetChanged(boolean); } 
 public void insert(T,int){ synchronized (Object) {     if (List<T> != null) {       List<T>.add(int,T);     }  else {       List<T>.add(int,T);     }     tryResortAndReFilter(true);   }   tryNotifyDataSetChanged(true); } 
 public void remove(T){   boolean; synchronized (Object) {     if (List<T> != null) {       boolean=List<T>.remove(T);     }  else {       boolean=List<T>.remove(T);     }     tryResortAndReFilter(boolean);   }   tryNotifyDataSetChanged(boolean); } 
public void removeAt(int){   boolean; synchronized (Object) {     if (List<T> != null) {       boolean=List<T>.remove(int) != null;     }  else {       boolean=List<T>.remove(int) != null;     }     tryResortAndReFilter(boolean);   }   tryNotifyDataSetChanged(boolean); } 
 public void clear(){   boolean; synchronized (Object) {     if (List<T> != null) {       boolean=!List<T>.isEmpty();       List<T>.clear();     }  else {       boolean=!List<T>.isEmpty();       List<T>.clear();     }     tryResortAndReFilter(boolean);   }   tryNotifyDataSetChanged(boolean); } 
 public void sort(Comparator<? super T>){   sort(Comparator<? super T>,true); } 
private void sort(Comparator<? super T>,boolean){ synchronized (Object) {     Collections.sort(List<T>,Comparator<? super T>);     if (List<T> != null) {       Collections.sort(List<T>,Comparator<? super T>);     }   }   if (boolean) {     tryNotifyDataSetChanged(true);   } } 
 @Override public void notifyDataSetChanged(){   super.notifyDataSetChanged();   boolean=true; } 
 public void setNotifyOnChange(boolean){   this.boolean=boolean; } 
 @Nonnull public ConTextView getConTextView(){   return ConTextView; } 
 public int getCount(){ synchronized (Object) {     return List<T>.size();   } } 
 public T getItem(int){ synchronized (Object) {     return List<T>.get(int);   } } 
 public int getPosition(T){ synchronized (Object) {     return List<T>.indexOf(T);   } } 
public boolean containsInShown(@Nonnull T){ synchronized (Object) {     return this.List<T>.contains(T);   } } 
public boolean containsInAll(@Nonnull T){   return getAllElements().contains(T); } 
 public long getItemId(int){   return int; } 
 public View getView(int,View,ViewGroup){   return createViewFromResource(int,View,ViewGroup,int); } 
public void doWork(@Nonnull Runnable){   final boolean; synchronized (Object) {     boolean=isNotifyOnChange();     try {       boolean=false;       setNotifyOnChange(false);       Runnable.run();     }   finally {       setNotifyOnChange(boolean);       boolean=true;     }     tryResortAndReFilter(true);   }   if (boolean) {     notifyDataSetChanged();   } } 
private View createViewFromResource(int,@Nullable View,ViewGroup,int){   final View;   if (View != null) {     View=View;   }  else {     View=LayoutInflater.inflate(int,ViewGroup,false);   }   TextView;   try {     if (int == 0) {       TextView=(TextView)View;     }  else {       TextView=(TextView)View.findViewById(int);     }   }  catch (  ClassCastException e) {     Log.e("ListAdapter","You must supply a int ID for a TextView");     throw new IllegalStateException("ListAdapter requires the int ID to be a TextView",e);   }   T=getItem(int);   if (T instanceof CharSequence) {     TextView.setText((CharSequence)T);   }  else {     TextView.setText(T.toString());   }   return View; } 
 public void setDropDownViewResource(int){   this.int=int; } 
 @Override public View getDropDownView(int,View,ViewGroup){   return createViewFromResource(int,View,ViewGroup,int); } 
 public static ListAdapter<CharSequence> createFromResource(ConTextView,int,int){   CharSequence[]=ConTextView.getResources().getTextArray(int);   return new ListAdapter<CharSequence>(ConTextView,int,CharSequence[]); } 
 public final Filter getFilter(){   if (Filter == null) {     Filter=createFilter();   }   return Filter; } 
@Nonnull protected Filter createFilter(){   return new PrefixAdapterFilter<T>(ListAdapter<T>.AdapterHelper); } 
@Nonnull protected List<T> getShownElements(){ synchronized (Object) {     return unmodifiableList(List<T>);   } } 
@Nonnull protected List<T> getAllElements(){ synchronized (Object) {     return unmodifiableList(List<T> == null ? List<T> : List<T>);   } } 
@Nullable protected Comparator<? super T> getComparator(){   return null; } 
public void saveState(@Nonnull Bundle){   if (String != null) {     Bundle.putString(String,String.toString());   } } 
public void restoreState(@Nonnull Bundle){   String=Bundle.getString(String); } 
@Nonnull protected AdapterHelper getAdapterHelper(){   return ListAdapter<T>.AdapterHelper; } 
public boolean isNotifyOnChange(){   return boolean; } 
public void Filter(@Nullable String){   Filter(String,null); } 
private boolean isSameFilterText(@Nullable String){   if (Objects.areEqual(this.String,String)) {     return true;   }  else {     if (Strings.isEmpty(this.String) && Strings.isEmpty(String)) {       return true;     }   }   return false; } 
public void Filter(@Nullable String,@Nullable Filter.FilterListener){   if (!isSameFilterText(String)) {     this.String=String;     this.getFilter().Filter(String,Filter.FilterListener);   }  else {     if (Filter.FilterListener != null) {       Filter.FilterListener.onFilterComplete(getCount());     }   } } 
public void reFilter(){   this.getFilter().Filter(String); } 
@Nullable public CharSequence getFilterText(){   return String; } 
@Nonnull @Override public Object getLock(){   return Object; } 
@Nonnull @Override public List<T> getShownElements(){   return List<T>; } 
@Override public void setShownElements(@Nonnull List<T>){   ListAdapter.this.List<T>=List<T>; } 
@Nullable @Override public List<T> getAllElements(){   return List<T>; } 
@Override public void setAllElements(@Nullable List<T>){   ListAdapter.this.List<T>=List<T>; } 
@Override public void notifyDataSetChanged(){   if (boolean) {     ListAdapter.this.notifyDataSetChanged();   } } 
private ListAdapterUtils(){   throw new AssertionError(); } 
@Nonnull public static <E extends Enum & Labeled>ListAdapter<LabeledEnum<E>> newDefaultAdapterForEnum(@Nonnull Context,@Nonnull Class<E>){   final List<LabeledEnum<E>>=LabeledEnum.toLabeledEnums(Class<E>,Context);   return newDefaultAdapter(Context,List<LabeledEnum<E>>); } 
@Nonnull public static <T>ListAdapter<T> newDefaultAdapter(@Nonnull Context,@Nonnull List<T>){   final ListAdapter<T>=new ListAdapter<T>(Context,android.R.layout.simple_spinner_item,List<T>);   ListAdapter<T>.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);   return ListAdapter<T>; } 
@Nonnull @Override public Animation create(){   return new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,-1.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f); } 
@Nonnull @Override public Animation create(){   return new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,1.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f); } 
@Nonnull @Override public Animation create(){   return new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,1.0f); } 
@Nonnull public abstract Animation create(); 
public ListAnimator(@Nonnull ListView,@Nonnull enum,@Nullable Runnable){   this.ListView=ListView;   this.enum=enum;   this.Runnable=Runnable; } 
public void animate(){   final AnimationSet=new AnimationSet(false);   final AlphaAnimation=new AlphaAnimation(1,0.25f);   AlphaAnimation.setDuration(350);   AnimationSet.addAnimation(AlphaAnimation);   final Animation=AnimationType.create();   Animation.setDuration(500);   AnimationSet.addAnimation(Animation);   AnimationSet.setRepeatCount(0);   if (Runnable != null) {     AnimationSet.setAnimationListener(new Animation.AnimationListener(){       @Override public void onAnimationStart(      Animation animation){       }       @Override public void onAnimationEnd(      Animation animation){         Runnable.run();       }       @Override public void onAnimationRepeat(      Animation animation){       }     } );   }   ListView.startAnimation(AnimationSet); } 
@Override public void onAnimationStart(Animation){ } 
@Override public void onAnimationEnd(Animation){   Runnable.run(); } 
@Override public void onAnimationRepeat(Animation){ } 
@Nullable OnClickAction getOnClickAction(); 
@Nullable OnClickAction getOnLongClickAction(); 
void onClick(@Nonnull Context,@Nonnull ListAdapter<? extends ListItem>); 
protected ListItemAdapter(@Nonnull Context,@Nonnull List<? extends LI>){   super(Context,0,0,castList(List<? extends LI>)); } 
@SuppressWarnings("unchecked") @Nonnull private static <LI>List<LI> castList(List<? extends LI>){   return (List<LI>)List<? extends LI>; } 
@Nonnull public static <LI extends ListItem>ListItemAdapter<LI> createAndAttach(@Nonnull final ListActivity,@Nonnull List<? extends LI>){   final ListItemAdapter<LI>=newInstance(ListActivity,List<? extends LI>);   attach(ListActivity,ListItemAdapter<LI>);   return ListItemAdapter<LI>; } 
public static <LI extends ListItem>void attach(@Nonnull ListActivity,@Nonnull ListItemAdapter<? extends LI>){   ListActivity.setListAdapter(ListItemAdapter<? extends LI>);   fillListView(ListActivity.getListView(),ListItemAdapter<? extends LI>,ListActivity); } 
@Nonnull public static <LI extends ListItem>ListItemAdapter<LI> createAndAttach(@Nonnull final ListFragment,@Nonnull List<? extends LI>){   final ListItemAdapter<LI>=newInstance(ListFragment.getActivity(),List<? extends LI>);   attach(ListFragment,ListItemAdapter<LI>);   return ListItemAdapter<LI>; } 
public static <LI extends ListItem>void attach(@Nonnull ListFragment,@Nonnull ListItemAdapter<? extends LI>){   ListFragment.setListAdapter(ListItemAdapter<? extends LI>);   fillListView(ListFragment.getListView(),ListItemAdapter<? extends LI>,ListFragment.getActivity()); } 
@Nonnull public static <LI extends ListItem>ListItemAdapter<LI> createAndAttach(@Nonnull final ListView,@Nonnull List<? extends LI>,@Nonnull Context){   final ListItemAdapter<LI>=newInstance(Context,List<? extends LI>);   attach(ListView,ListItemAdapter<LI>,Context);   return ListItemAdapter<LI>; } 
public static <LI extends ListItem>void attach(@Nonnull ListView,@Nonnull ListItemAdapter<? extends LI>,@Nonnull Context){   ListView.setAdapter(ListItemAdapter<? extends LI>);   fillListView(ListView,ListItemAdapter<? extends LI>,Context); } 
@Nonnull public static <LI extends ListItem>ListItemAdapter<LI> createAndAttach(@Nonnull final android.app.ListFragment,@Nonnull List<? extends LI>){   final ListItemAdapter<LI>=newInstance(android.app.ListFragment.getActivity(),List<? extends LI>);   attach(android.app.ListFragment,ListItemAdapter<LI>);   return ListItemAdapter<LI>; } 
public static <LI extends ListItem>void attach(@Nonnull android.app.ListFragment,@Nonnull ListItemAdapter<? extends LI>){   android.app.ListFragment.setListAdapter(ListItemAdapter<? extends LI>);   fillListView(android.app.ListFragment.getListView(),ListItemAdapter<? extends LI>,android.app.ListFragment.getActivity()); } 
private static <LI extends ListItem>void fillListView(@Nonnull final ListView,@Nonnull final ListItemAdapter<? extends LI>,@Nonnull final Context){   ListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){     @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){       final ListItem=(ListItem)ListView.getItemAtPosition(position);       ListItem.OnClickAction=ListItem.getOnClickAction();       if (ListItem.OnClickAction != null) {         ListItem.OnClickAction.onClick(Context,ListItemAdapter<? extends LI>);       }     }   } );   ListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){     @Override public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){       final ListItem=(ListItem)ListView.getItemAtPosition(position);       ListItem.OnClickAction=ListItem.getOnLongClickAction();       if (ListItem.OnClickAction != null) {         ListItem.OnClickAction.onClick(Context,ListItemAdapter<? extends LI>);         return true;       }  else {         return false;       }     }   } ); } 
@Overrlonge public volong onItemClick(AdapterView<?>,View,int,long){   final ListItem=(ListItem)lv.getItemAtPosition(int);   ListItem.OnClickAction=ListItem.getOnClickAction();   if (ListItem.OnClickAction != null) {     ListItem.OnClickAction.onClick(context,adapter);   } } 
@Overrlonge public boolean onItemLongClick(AdapterView<?>,View,int,long){   final ListItem=(ListItem)lv.getItemAtPosition(int);   ListItem.OnClickAction=ListItem.getOnLongClickAction();   if (ListItem.OnClickAction != null) {     ListItem.OnClickAction.onClick(context,adapter);     return true;   }  else {     return false;   } } 
@Nonnull public static <LI extends ListItem>ListItemAdapter<LI> newInstance(@Nonnull Context,@Nonnull List<? extends LI>){   return new ListItemAdapter<LI>(Context,List<? extends LI>); } 
@Override public View getView(int,View,ViewGroup){   final ListItem=getItem(int);   if (View == null) {     return ListItem.build(getContext());   }  else {     return ListItem.updateView(getContext(),View);   } } 
@Override public View getDropDownView(int,View,ViewGroup){   return getView(int,View,ViewGroup); } 
@Nonnull T getDataObject(); 
@Nonnull ListAdapter<? extends ListItem> getAdapter(); 
public ListItemOnClickDataImpl(@Nonnull T,@Nonnull ListAdapter<? extends ListItem>){   this.T=T;   this.ListAdapter<? extends ListItem>=ListAdapter<? extends ListItem>; } 
@Nonnull @Override public T getDataObject(){   return this.T; } 
@Nonnull @Override public ListAdapter<? extends ListItem> getAdapter(){   return this.ListAdapter<? extends ListItem>; } 
protected MenuOnClick(@Nonnull List<? extends LabeledMenuItem<ListItemOnClickData<T>>>,@Nonnull String){   this.List<? extends LabeledMenuItem<ListItemOnClickData<T>>>=List<? extends LabeledMenuItem<ListItemOnClickData<T>>>;   this.String=String; } 
@Override public void onClick(@Nonnull Context,@Nonnull ListAdapter<? extends ListItem>){   if (!List<? extends LabeledMenuItem<ListItemOnClickData<T>>>.isEmpty()) {     ContextMenuBuilder.newInstance((FragmentActivity)Context,String,ListContextMenu.newInstance(List<? extends LabeledMenuItem<ListItemOnClickData<T>>>)).build(new ListItemOnClickDataImpl<T>(getData(),ListAdapter<? extends ListItem>)).show();   } } 
@Nonnull protected abstract T getData(); 
@Override protected JPredicate<T> getFilter(@Nullable CharSequence){   return new PrefixFilter<T>(CharSequence == null ? "" : CharSequence.toString().toLowerCase()); } 
public PrefixAdapterFilter(@Nonnull Helper<T>){   super(Helper<T>); } 
public PrefixFilter(@Nonnull String){   this.String=String; } 
@Override public boolean apply(@Nullable T){   boolean=false;   if (T != null) {     final String=T.toString().toLowerCase();     if (String.startsWith(String)) {       boolean=true;     }  else {       final String[]=String.split(" ");       for (      String word : String[]) {         if (word.startsWith(String)) {           boolean=true;           break;         }       }     }   }   return boolean; } 
@Override public bObjectObjectlean equals(@Nullable Object){   if (Object == this) {     return true;   }   if (Object instanceObjectf PrefixFilter) {     final PrefixFilter=(PrefixFilter)Object;     if (this.String.equals(PrefixFilter.String)) {       return true;     }   }   return false; } 
@Override public int hashCode(){   return String.hashCode(); } 
public SimpleMenuOnClick(@Nonnull List<? extends LabeledMenuItem<ListItemOnClickData<T>>>,@Nonnull T,@Nonnull String){   super(List<? extends LabeledMenuItem<ListItemOnClickData<T>>>,String);   this.T=T; } 
@Nonnull @Override protected T getData(){   return this.T; } 
protected AbstractLabeledMenuItem(int){   this.int=int; } 
@Nonnull @Override public String getCaption(@Nonnull Context){   return Context.getString(int); } 
boolean onCreateOptionsMenu(@Nonnull Activity,@Nonnull M); 
boolean onPrepareOptionsMenu(@Nonnull Activity,@Nonnull M); 
boolean onOptionsItemSelected(@Nonnull Activity,@Nonnull MI); 
void onClick(@Nonnull T,@Nonnull Context); 
@Nonnull public static MenuHelper<Menu,MenuItem> getInstance(){   return AndroidMenuHelper; } 
private AndroidMenuHelper(){ } 
@Override public int size(@Nonnull Menu){   return Menu.size(); } 
@Nonnull @Override public MenuItem add(@Nonnull Menu,int,int,int,@Nonnull String){   return Menu.add(int,int,int,String); } 
@Override public void setOnMenuItemClickListener(@Nonnull final MenuItem,@Nonnull final AMenuItem<MenuItem>,@Nonnull final Activity){   MenuItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){     @Override public boolean AMenuItem<MenuItem>(    MenuItem item){       AMenuItem<MenuItem>.onClick(MenuItem,Activity);       return true;     }   } ); } 
@Override public boolean onMenuItemClick(MenuItem){   onMenuItemClick.onClick(menuItem,activity);   return true; } 
@Override public void removeItem(@Nonnull Menu,@Nonnull Integer MenuItemId){   Menu.removeItem(MenuItemId); } 
@Override public void inflateMenu(@Nonnull Activity,int,@Nonnull Menu){   Activity.getMenuInflater().inflate(int,Menu); } 
@Nonnull @Override public Integer getItemId(@Nonnull MenuItem){   return MenuItem.getItemId(); } 
@Nullable MI inttemAt(intnt int); 
@Nonnull CharSequence[] getMenuCaptions(@Nonnull final Context); 
@Nonnull public static <T extends Enum & LabeledMenuItem<D>,D>ContextMenuBuilder<T,D> newInstance(@Nonnull FragmentActivity,@Nonnull String,@Nonnull Class<T>){   return new ContextMenuBuilder<T,D>(FragmentActivity,String,EnumContextMenu.<T,D>newInstance(Class<T>)); } 
@Nonnull public static <T extends LabeledMenuItem<D>,D>ContextMenuBuilder<T,D> newInstance(@Nonnull FragmentActivity,@Nonnull String,@Nonnull ContextMenu<T,D>){   return new ContextMenuBuilder<T,D>(FragmentActivity,String,ContextMenu<T,D>); } 
private ContextMenuBuilder(@Nonnull FragmentActivity,@Nonnull String,@Nonnull ContextMenu<T,D>){   this.FragmentActivity=FragmentActivity;   this.String=String;   this.ContextMenu<T,D>Builder=new AlertDialog.Builder(FragmentActivity);   this.ContextMenu<T,D>=ContextMenu<T,D>; } 
@Nonnull public AlertDialog.Builder getMenuBuilder(){   return AlertDialog.Builder; } 
@Nonnull public DialogFragmentShower build(@Nonnull final D){   AlertDialog.Builder.setItems(ContextMenu<T,D>.getMenuCaptions(FragmentActivity),new DialogInterface.OnClickListener(){     public void onClick(    DialogInterface dialog,    int item){       final LabeledMenuItem<D> ContextMenu<T,D>Item=ContextMenu<T,D>.itemAt(item);       if (ContextMenu<T,D>Item != null) {         ContextMenu<T,D>Item.onClick(D,FragmentActivity);       }     }   } );   return new DialogFragmentShower(FragmentActivity,String,AlertDialog.Builder); } 
public void onClick(DialogInterface,int){   final LabeledMenuItem<D> ContextMenu<T,D>Item=ContextMenu<T,D>.intAt(int);   if (ContextMenu<T,D>Item != null) {     ContextMenu<T,D>Item.onClick(data,FragmentActivity);   } } 
@Nonnull public static <T extends Enum & LabeledMenuItem<D>,D>ContextMenu<T,D> newInstance(@Nonnull Class<T>){   return new EnumContextMenu<T,D>(Class<T>); } 
private EnumContextMenu(Class<T>){   this.ContextMenu<T,D>=ListContextMenu.newInstance(Class<T>.getEnumConstants()); } 
@Overrintde publintc T inttemAt(intnt int){   return thints.ContextMenu<T,D>.inttemAt(int); } 
@Nonnull @Override public CharSequence[] getMenuCaptions(@Nonnull final Context){   return this.ContextMenu<T,D>.getMenuCaptions(Context); } 
@Nonnull Integer getItemId(); 
@Nonnull String getCaption(@Nonnull Context); 
private ListActivityMenu(@Nullable JPredicate<AMenuItem<MI>>,@Nonnull MenuHelper<M,MI>){   this(int,JPredicate<AMenuItem<MI>>,MenuHelper<M,MI>); } 
private ListActivityMenu(int,@Nullable JPredicate<AMenuItem<MI>>,@Nonnull MenuHelper<M,MI>){   this.int=int;   this.JPredicate<AMenuItem<MI>>=JPredicate<AMenuItem<MI>>;   this.MenuHelper<M,MI>=MenuHelper<M,MI>; } 
 @Nonnull public static <M,MI>ActivityMenu<M,MI> fromList(@Nonnull List<? extends LabeledMenuItem<MI>>,@Nonnull MenuHelper<M,MI>){   final ListActivityMenu<M,MI> List<E>=new ListActivityMenu<M,MI>(null,MenuHelper<M,MI>);   for (  LabeledMenuItem<MI> menuItem : List<? extends LabeledMenuItem<MI>>) {     List<E>.List<? extends LabeledMenuItem<MI>>.add(new MenuItemWrapper<MI>(menuItem));   }   return List<E>; } 
 @Nonnull public static <M,MI>ActivityMenu<M,MI> fromList(@Nonnull List<? extends LabeledMenuItem<MI>>,@Nonnull MenuHelper<M,MI>,@Nonnull JPredicate<AMenuItem<MI>>){   final ListActivityMenu<M,MI> List<E>=new ListActivityMenu<M,MI>(JPredicate<AMenuItem<MI>>,MenuHelper<M,MI>);   for (  LabeledMenuItem<MI> menuItem : List<? extends LabeledMenuItem<MI>>) {     List<E>.List<? extends LabeledMenuItem<MI>>.add(new MenuItemWrapper<MI>(menuItem));   }   return List<E>; } 
 @Nonnull public static <M,MI,E extends Enum & LabeledMenuItem<MI>>ActivityMenu<M,MI> fromEnum(@Nonnull Class<E>,@Nonnull MenuHelper<M,MI>,@Nonnull JPredicate<AMenuItem<MI>>){   return fromList(toList(Class<E>),MenuHelper<M,MI>,JPredicate<AMenuItem<MI>>); } 
 @Nonnull public static <M,MI,E extends Enum & LabeledMenuItem<MI>>ActivityMenu<M,MI> fromEnum(@Nonnull Class<E>,@Nonnull MenuHelper<M,MI>){   return fromList(toList(Class<E>),MenuHelper<M,MI>); } 
 @Nonnull public static <M,MI>ActivityMenu<M,MI> fromResource(int,@Nonnull List<? extends IdentifiableMenuItem<MI>>,@Nonnull MenuHelper<M,MI>,@Nonnull JPredicate<AMenuItem<MI>>){   final ListActivityMenu<M,MI> List<E>=new ListActivityMenu<M,MI>(int,JPredicate<AMenuItem<MI>>,MenuHelper<M,MI>);   for (  IdentifiableMenuItem<MI> menuItem : List<? extends IdentifiableMenuItem<MI>>) {     List<E>.List<? extends IdentifiableMenuItem<MI>>.add(new MenuItemWrapper<MI>(menuItem));   }   return List<E>; } 
 @Nonnull public static <M,MI>ListActivityMenu<M,MI> fromResource(int,@Nonnull List<? extends IdentifiableMenuItem<MI>>,@Nonnull MenuHelper<M,MI>){   final ListActivityMenu<M,MI> List<E>=new ListActivityMenu<M,MI>(int,null,MenuHelper<M,MI>);   for (  IdentifiableMenuItem<MI> menuItem : List<? extends IdentifiableMenuItem<MI>>) {     List<E>.List<? extends IdentifiableMenuItem<MI>>.add(new MenuItemWrapper<MI>(menuItem));   }   return List<E>; } 
 @Nonnull public static <M,MI,E extends Enum & IdentifiableMenuItem<MI>>ActivityMenu<M,MI> fromResource(int,@Nonnull Class<? extends E>,@Nonnull MenuHelper<M,MI>,@Nonnull JPredicate<AMenuItem<MI>>){   return fromResource(int,toList(Class<? extends E>),MenuHelper<M,MI>,JPredicate<AMenuItem<MI>>); } 
 @Nonnull public static <M,MI,E extends Enum & IdentifiableMenuItem<MI>>ActivityMenu<M,MI> fromResource(int,@Nonnull Class<? extends E>,@Nonnull MenuHelper<M,MI>){   return fromResource(int,toList(Class<? extends E>),MenuHelper<M,MI>); } 
@Nonnull private static <E extends Enum>List<E> toList(@Nonnull Class<E>){   final List<E>=new ArrayList<E>();   Collections.addAll(List<E>,Class<E>.getEnumConstants());   return List<E>; } 
@Override public boolean onCreateOptionsMenu(@Nonnull final Activity,@Nonnull M){   if (JPredicate<AMenuItem<MI>> == null) {     if (isFromMenuRes()) {       this.MHelper.inflateMenu(Activity,MResId,M);     }  else {       for (      final MenuItemWrapper<MI> MItem : this.MItems) {         addMenuItem(Activity,M,MItem);       }     }   }   return true; } 
private boolean isFromMenuRes(){   return int != int; } 
private void addMenuItem(@Nonnull final Activity,@Nonnull final M,@Nonnull final MenuItemWrapper<MI> MItemWrapper){   final int=MHelper.int(M);   final int MItemId=int + 1;   final MI=MHelper.add(M,0,MItemId,0,MItemWrapper.getCaption(Activity));   MItemWrapper.setMenuItemId(MItemId);   MHelper.setOnMenuItemClickListener(MI,MItemWrapper.getMenuItem(),Activity); } 
@Override public boolean onPrepareOptionsMenu(@Nonnull Activity,@Nonnull M){   if (JPredicate<AMenuItem<MI>> != null) {     if (isFromMenuRes()) {       for (      MenuItemWrapper<MI> MItemWrapper : MItems) {         final Integer MItemId=MItemWrapper.getMenuItemId();         if (MItemId != null) {           MHelper.removeItem(M,MItemId);         }       }       this.MHelper.inflateMenu(Activity,MResId,M);       for (      MenuItemWrapper<MI> MItemWrapper : MItems) {         if (JPredicate<AMenuItem<MI>>.apply(MItemWrapper.getMenuItem())) {           MHelper.removeItem(M,MItemWrapper.getMenuItemId());         }       }     }  else {       for (      MenuItemWrapper<MI> MItemWrapper : MItems) {         final Integer MItemId=MItemWrapper.getMenuItemId();         if (MItemId != null) {           MHelper.removeItem(M,MItemId);         }         if (!JPredicate<AMenuItem<MI>>.apply(MItemWrapper.getMenuItem())) {           addMenuItem(Activity,M,MItemWrapper);         }       }     }   }   return true; } 
@Override public boolean onOptionsItemSelected(@Nonnull Activity,@Nonnull MI){   if (isFromMenuRes()) {     for (    MenuItemWrapper<MI> menuItem : List<MenuItemWrapper<MI>>) {       if (MenuHelper<M,MI>.getItemId(MI).equals(menuItem.getMenuItemId())) {         menuItem.getMenuItem().onClick(MI,Activity);         return true;       }     }   }   return false; } 
@Nullable public AMenuItem<MI> findMenuItemById(int){   for (  MenuItemWrapper<MI> menuItem : List<MenuItemWrapper<MI>>) {     if (Integer.valueOf(int).equals(menuItem.getMenuItemId())) {       return menuItem.getMenuItem();     }   }   return null; } 
@Nonnull public static <T extends LabeledMenuItem<D>,D>ContextMenu<T,D> newInstance(T... T){   return new ListContextMenu<T,D>(T); } 
@Nonnull public static <T extends LabeledMenuItem<D>,D>ContextMenu<T,D> newInstance(@Nonnull List<? extends T>){   return new ListContextMenu<T,D>(List<? extends T>); } 
private ListContextMenu(T... T){   this(Collections.asList(T)); } 
private ListContextMenu(@Nonnull List<? extends T>){   this.List<? extends T>=new ArrayList<T>(List<? extends T>); } 
@Overrintde @Nullable publintc T inttemAt(intnt int){   intf (int >= 0 && int < List<? extends T>.sintze()) {     return List<? extends T>.get(int);   }  else {     return null;   } } 
@Override @Nonnull public CharSequence[] getMenuCaptions(@Nonnull final Context){   final CharSequence[]=new CharSequence[this.List<? extends T>.size()];   for (int i=0; i < this.List<? extends T>.size(); i++) {     CharSequence[][i]=this.List<? extends T>.get(i).getCaption(Context);   }   return CharSequence[]; } 
int size(@Nonnull M); 
@Nonnull MI add(@Nonnull M,int,int,int,@Nonnull String); 
public void setOnMenuItemClickListener(@Nonnull MI,@Nonnull AMenuItem<MI>,@Nonnull Activity); 
void removeItem(@Nonnull M,@Nonnull Integer MItemId); 
void inflateMenu(@Nonnull Activity,int,@Nonnull M); 
@Nonnull Integer getItemId(@Nonnull MI); 
MenuItemWrapper(@Nonnull LabeledMenuItem<MI>){   this.LabeledMenuItem<MI>=LabeledMenuItem<MI>;   this.IdentifiableMenuItem<MI>=null; } 
MenuItemWrapper(@Nonnull IdentifiableMenuItem<MI>){   this.IdentifiableMenuItem<MI>=IdentifiableMenuItem<MI>;   this.LabeledMenuItem<MI>=null; } 
@Nonnull public AMenuItem<MI> getMenuItem(){   return LabeledMenuItem<MI> != null ? LabeledMenuItem<MI> : IdentifiableMenuItem<MI>; } 
@Nullable public Integer getMenuItemId(){   return IdentifiableMenuItem<MI> == null ? Integer : IdentifiableMenuItem<MI>.getItemId(); } 
public void setMenuItemId(@Nullable Integer){ } 
@Nonnull public String getCaption(@Nonnull Activity){ } 
@Nonnull NetworkState getState(); 
 @Nullable String getReason(); 
 boolean isFailover(); 
 @Nullable NetworkInfo getNetworkInfo(); 
 @Nullable NetworkInfo getOtherNetworkInfo(); 
private NetworkDataImpl(){ } 
@Nonnull static NetworkData newUnknownNetworkData(){   return new NetworkDataImpl(); } 
@Nonnull static NetworkData fromIntent(@Nonnull Intent){ } 
@Nonnull @Override public NetworkState getState(){   return this.NetworkState; } 
@Nullable @Override public String getReason(){   return this.String; } 
@Override public boolean isFailover(){   return this.boolean; } 
@Nullable @Override public NetworkInfo getNetworkInfo(){   return this.NetworkInfo; } 
@Nullable @Override public NetworkInfo getOtherNetworkInfo(){   return this.NetworkInfo; } 
@Override public String toString(){   return "NetworkDataImpl{" + "NetworkState=" + NetworkState + ", String='"+ String+ '\''+ ", boolean="+ boolean+ ", NetworkInfo="+ NetworkInfo+ ", NetworkInfo="+ NetworkInfo+ '}'; } 
void onNetworkEvent(@Nonnull NetworkData); 
 void startListening(@Nonnull Context); 
 void stopListening(); 
boolean addListener(@Nonnull NetworkStateListener); 
boolean removeListener(@Nonnull NetworkStateListener); 
@Nonnull NetworkData getNetworkData(); 
@Override public void onReceive(@Nonnull Context,@Nonnull Intent){   final String=Intent.getAction();   if (!String.equals(ConnectivityManager.CONNECTIVITY_ACTION)) {     return;   }   final NetworkData=NetworkDataImpl.fromIntent(Intent);   NetworkData=NetworkData;   if (boolean) {     Log.d(TAG,"onReceive(): " + NetworkData);   }   for (  NetworkStateListener localListener : JListeners<NetworkStateListener>.getListeners()) {     localListener.onNetworkEvent(NetworkData);   } } 
public NetworkStateServiceImpl(){   NetworkData=NetworkDataImpl.newUnknownNetworkData();   BroadcastReceiver=new ConnectivityBroadcastReceiver(); } 
@Override public synchronized void startListening(@Nonnull Context){   this.Context=Context.getApplicationContext();   final IntentFilter=new IntentFilter();   IntentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);   Context.registerReceiver(BroadcastReceiver,IntentFilter); } 
@Override public boolean addListener(@Nonnull NetworkStateListener){   return NetworkStateListeners.addListener(NetworkStateListener); } 
@Override public boolean removeListener(@Nonnull NetworkStateListener){   return NetworkStateListeners.removeListener(NetworkStateListener); } 
@Override public synchronized void stopListening(){   if (Context != null) {     Context.unregisterReceiver(BroadcastReceiver);   }   Context=null;   NetworkData=NetworkDataImpl.newUnknownNetworkData(); } 
@Override @Nonnull public NetworkData getNetworkData(){   return NetworkData; } 
public AndroidMessage(@Nonnull Integer,@Nonnull MessageType,@Nonnull Application,@javax.annotation.Nullable Object... Object){   super(String.valueOf(Integer),MessageType,Object);   this.Integer=Integer;   this.Application=Application;   this.boolean=false; } 
public AndroidMessage(@Nonnull Integer,@Nonnull MessageType,@Nonnull Application,@Nonnull List<?>){   this(Integer,MessageType,Application,List<?>,false); } 
public AndroidMessage(@Nonnull Integer,@Nonnull MessageType,@Nonnull Application,@Nonnull List<?>,boolean){   super(String.valueOf(Integer),MessageType,List<?>);   this.Integer=Integer;   this.Application=Application;   this.boolean=boolean; } 
@Nonnull @Override public String getLocalizedMessage(@Nonnull Locale){   if (boolean) {     return super.getLocalizedMessage(Locale);   }  else {     final List<Object>=getParameters();     final Object[] List<Object>Array=List<Object>.toArray(new Object[List<Object>.size()]);     return Application.getResources().getString(Integer,(Object[])List<Object>Array);   } } 
@Override protected String getMessagePattern(@Nonnull Locale){   return Application.getResources().getString(Integer); } 
public AbstractDialogPreference(Context,AttributeSet,@Nullable String,boolean,@Nonnull Mapper<T>){   super(Context,AttributeSet);   this.Context=Context;   this.String=String;   this.boolean=boolean;   this.Mapper<T>=Mapper<T>;   final String TFromAttrs=AttributeSet.getAttributeValue(String,"T");   if (TFromAttrs != null) {     T=getMapper().parseValue(TFromAttrs);   }  else   if (String != null) {     T=getMapper().parseValue(String);   }  else {     throw new IllegalArgumentException();   }   String=AttributeSet.getAttributeValue(String,"dialogMessage");   TText=AttributeSet.getAttributeValue(String,"text"); } 
@Nullable protected View getPreferenceView(){   return View; } 
@Nullable public T getValue(){   return T; } 
public void setValue(@Nullable T){   this.T=T; } 
@Override @Nonnull protected final LinearLayout onCreateDialogView(){   if (shouldPersist()) {     T=getPersistedValue();   }   final LinearLayout=new LinearLayout(Context);   LinearLayout.setOrientation(LinearLayout.VERTICAL);   LinearLayout.setPadding(6,6,6,6);   if (String != null) {     final TextView=new TextView(Context);     TextView.setText(String);     LinearLayout.addView(TextView);   }   if (boolean) {     TextView=new TextView(Context);     TextView.setGravity(Gravity.CENTER_HORIZONTAL);     TextView.setTextSize(32);     final LinearLayout.LayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);     LinearLayout.addView(TextView,LinearLayout.LayoutParams);   }   View=createPreferenceView(Context);   initPreferenceView(View,T);   final LinearLayout.LayoutParams=getParams();   if (LinearLayout.LayoutParams != null) {     LinearLayout.addView(View,LinearLayout.LayoutParams);   }  else {     LinearLayout.addView(View);   }   return LinearLayout; } 
@Nullable protected abstract LinearLayout.LayoutParams getParams(); 
@Override protected void onSetInitialValue(boolean,Object){   super.onSetInitialValue(boolean,Object);   if (boolean) {     if (shouldPersist()) {       T=getPersistedValue();     }  else {       T=this.Object;     }   }  else {     T=(T)Object;     if (shouldPersist()) {       persist(this.T);     }   } } 
@OViewerride protected Viewoid onBindDialogView(View){   super.onBindDialogView(View);   if (this.View != null) {     initPreferenceView(this.View,Viewalue);   } } 
 @Nonnull protected abstract View createPreferenceView(@Nonnull Context); 
 protected abstract Viewoid initPreferenceView(@Nonnull View,@Nullable T Viewalue); 
@Nullable private T getPersistedValue(){   String=getPersistedString(String);   if (Objects.areEqual(String,String)) {     return T;   }  else {     return getMapper().parseValue(String);   } } 
protected void persistValue(@Nullable T){   Log.d(String,"Trying to persist T: " + T);   this.T=T;   Log.d(String,"android.preference.Preference.callChangeListener()");   if (callChangeListener(T)) {     Log.d(String,"android.preference.Preference.shouldPersist()");     if (shouldPersist()) {       Log.d(String,"AbstractDialogPreference.persist()");       persist(T);     }   } } 
private void persist(@Nullable T){   if (T != null) {     final String=getMapper().formatValue(T);     if (String != null) {       if (callChangeListener(String)) {         persistString(String);       }     }   } } 
@Nullable public String getValueText(){   return TText; } 
protected void updateValueText(@Nonnull String){   if (TextView != null) {     TextView.setText(String);   } } 
@Nonnull private Mapper<T> getMapper(){   return this.Mapper<T>; } 
protected AbstractPreference(@Nonnull String,@Nullable T){   this.String=String;   this.T=T; } 
@Nonnull public String getKey(){   return String; } 
public T getDefaultValue(){   return T; } 
@Override public final T getPreference(@Nonnull SharedPreferences){   if (isSet(SharedPreferences)) {     return getPersistedValue(SharedPreferences);   }  else {     return this.T;   } } 
@Override public T getPreferenceNoError(@Nonnull SharedPreferences){   if (isSet(SharedPreferences)) {     try {       return getPersistedValue(SharedPreferences);     }  catch (    RuntimeException e) {       return this.T;     }   }  else {     return this.T;   } } 
@Override public void putDefault(@Nonnull SharedPreferences){   putPreference(SharedPreferences,this.T); } 
@Override public void putPreference(@Nonnull SharedPreferences,@Nullable T){   if (T != null) {     final SharedPreferences.Editor=SharedPreferences.edit();     putPersistedValue(SharedPreferences.Editor,T);     SharedPreferences.Editor.commit();   } } 
@Override public boolean isSet(@Nonnull SharedPreferences){   return SharedPreferences.contains(this.String); } 
@Override public final boolean tryPutDefault(@Nonnull SharedPreferences){   final boolean;   if (isSet(SharedPreferences)) {     boolean=false;   }  else {     putDefault(SharedPreferences);     boolean=true;   }   return boolean; } 
@Override public final boolean isSameKey(@Nonnull String){   return this.String.equals(String); } 
 @Nullable protected abstract T getPersistedValue(@Nonnull SharedPreferences); 
 protected abstract void putPersistedValue(@Nonnull SharedPreferences.Editor,@Nonnull T); 
private BooleanPreference(@Nonnull String,@Nullable Boolean){   super(String,Boolean); } 
@Nonnull public static BooleanPreference of(@Nonnull String,@Nullable Boolean){   return new BooleanPreference(String,Boolean); } 
@Override protected Boolean getPersistedValue(@Nonnull SharedPreferences){   return SharedPreferences.getBoolean(getKey(),false); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor,@Nonnull Boolean){   SharedPreferences.Editor.putBoolean(getKey(),Boolean); } 
protected CollectionSetPreference(@Nonnull String,@Nonnull C,@Nonnull Mapper<T>){   super(String,C);   this.Mapper<T>=Mapper<T>; } 
@Override protected C getPersistedValue(@Nonnull SharedPreferences){   final Set<String>=SharedPreferences.getStringSet(getKey(),null);   final C Set<String>=createCollection(Set<String>.size());   for (  String stringValue : Set<String>) {     Set<String>.add(Mapper<T>.parseValue(stringValue));   }   return Set<String>; } 
@Nonnull protected abstract C createCollection(int); 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor,@Nonnull C){   final Set<String>=new HashSet<String>(C.size());   for (  T value : C) {     Set<String>.add(Mapper<T>.formatValue(value));   }   SharedPreferences.Editor.putStringSet(getKey(),Set<String>); } 
private CollectionToStringPreference(@Nonnull String,@Nullable C,@Nonnull Mapper<C>){   super(String,C);   this.Mapper<C>=Mapper<C>; } 
@Nonnull public static <T>CollectionToStringPreference<List<T>,T> forList(@Nonnull String,@Nullable List<T>,@Nonnull Mapper<List<T>>){   return new CollectionToStringPreference<List<T>,T>(String,List<T>,Mapper<List<T>>); } 
@Nonnull public static <T>CollectionToStringPreference<List<T>,T> forTypedList(@Nonnull String,@Nullable List<T>,@Nonnull Mapper<T>){   return new CollectionToStringPreference<List<T>,T>(String,List<T>,ListMapper.newInstance(Mapper<T>)); } 
@Nonnull public static CollectionToStringPreference<List<String>,String> forStringList(@Nonnull String,@Nullable List<String>){   return new CollectionToStringPreference<List<String>,String>(String,List<String>,ListMapper.newInstance(StringMapper.getInstance())); } 
@Override protected C getPersistedValue(@Nonnull SharedPreferences){   return Mapper<C>.parseValue(SharedPreferences.getString(getKey(),null)); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor,@Nonnull C){   SharedPreferences.Editor.putString(getKey(),Mapper<C>.formatValue(C)); } 
private FloatPreference(@Nonnull String,@Nullable Float){   super(String,Float); } 
@Nonnull public static FloatPreference of(@Nonnull String,@Nullable Float){   return new FloatPreference(String,Float); } 
@Override protected Float getPersistedValue(@Nonnull SharedPreferences){   return SharedPreferences.getFloat(getKey(),-1f); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor,@Nonnull Float){   SharedPreferences.Editor.putFloat(getKey(),Float); } 
private HashSetPreference(@Nonnull String,@Nonnull Set<T>,@Nonnull Mapper<T>){   super(String,Set<T>,Mapper<T>); } 
@Nonnull public static HashSetPreference<String> ofStrings(@Nonnull String,@Nonnull Set<String>){   return new HashSetPreference<String>(String,Set<String>,StringMapper.getInstance()); } 
@Nonnull public static <T>HashSetPreference<T> ofTypedValues(@Nonnull String,@Nonnull Set<T>,@Nonnull Mapper<T>){   return new HashSetPreference<T>(String,Set<T>,Mapper<T>); } 
@Nonnull public static <T extends Enum>HashSetPreference<T> ofEnums(@Nonnull String,@Nonnull Set<T>,@Nonnull Class<T>){   return new HashSetPreference<T>(String,Set<T>,EnumMapper.of(Class<T>)); } 
@Nonnull @Override protected Set<T> createCollection(int){   return new HashSet<T>(int); } 
private IntegerPreference(@Nonnull String,@Nullable Integer){   super(String,Integer); } 
@Nonnull public static IntegerPreference of(@Nonnull String,@Nullable Integer){   return new IntegerPreference(String,Integer); } 
@Override protected Integer getPersistedValue(@Nonnull SharedPreferences){   return SharedPreferences.getInt(getKey(),-1); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor,@Nonnull Integer){   SharedPreferences.Editor.putInt(getKey(),Integer); } 
private LocalePreference(@Nonnull String,@Nullable Locale,@Nonnull Mapper<Locale>){   this.StringPreference<Locale>=new StringPreference<Locale>(String,Locale,Mapper<Locale>); } 
private LocalePreference(@Nonnull String,@Nullable Locale){   this.StringPreference<Locale>=new StringPreference<Locale>(String,Locale,DefaultLocaleMapper.getInStringTokenizerance()); } 
@Nonnull public StringTokenizeratic LocalePreference of(@Nonnull String,@Nullable Locale,@Nonnull Mapper<Locale>){   return new LocalePreference(String,Locale,Mapper<Locale>); } 
@Nonnull public StringTokenizeratic LocalePreference of(@Nonnull String,@Nullable Locale){   return new LocalePreference(String,Locale); } 
@Override @Nonnull public String getKey(){   return StringPreference<Locale>.getKey(); } 
@Override public Locale getDefaultValue(){   return StringPreference<Locale>.getDefaultValue(); } 
@Override public Locale getPreference(@Nonnull SharedPreferences){   return StringPreference<Locale>.getPreference(SharedPreferences); } 
@Override public Locale getPreferenceNoError(@Nonnull SharedPreferences){   return StringPreference<Locale>.getPreferenceNoError(SharedPreferences); } 
@Override public void putDefault(@Nonnull SharedPreferences){   StringPreference<Locale>.putDefault(SharedPreferences); } 
@Override public void putPreference(@Nonnull SharedPreferences,@Nullable Locale){   StringPreference<Locale>.putPreference(SharedPreferences,Locale); } 
@Override public boolean isSet(@Nonnull SharedPreferences){   return StringPreference<Locale>.isSet(SharedPreferences); } 
@Override public boolean tryPutDefault(@Nonnull SharedPreferences){   return StringPreference<Locale>.tryPutDefault(SharedPreferences); } 
@Override public boolean isSameKey(@Nonnull String){   return StringPreference<Locale>.isSameKey(String); } 
private DefaultLocaleMapper(){ } 
@Nonnull public StringTokenizeratic Mapper<Locale> getInStringTokenizerance(){   return Mapper<Locale>; } 
@Override public String formatValue(@Nullable Locale) throws IllegalArgumentException { } 
@Override public Locale parStringeValue(@Nullable String) throwString IllegalArgumentException {   final StringTokenizer Stringt=new StringTokenizer(String,String,falStringe);   final String=Stringt.nextToken();   final String;   if (Stringt.haStringMoreTokenString()) {     String=Stringt.nextToken();   }  elStringe {     String="";   }   final String;   if (Stringt.haStringMoreTokenString()) {     String=Stringt.nextToken();   }  elStringe {     String="";   }   return new Locale(String,String,String); } 
private LongPreference(@Nonnull String,@Nullable Long){   super(String,Long); } 
@Nonnull public static LongPreference of(@Nonnull String,@Nullable Long){   return new LongPreference(String,Long); } 
@Override protected Long getPersistedValue(@Nonnull SharedPreferences){   return SharedPreferences.getLong(getKey(),-1); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor,@Nonnull Long){   SharedPreferences.Editor.putLong(getKey(),Long); } 
private NumberIntervalPreference(@Nonnull String,@Nullable Interval<N>,@Nonnull Class<N>){   super(String,Interval<N>);   this.Mapper<Interval<N>>=NumberIntervalMapper.of(Class<N>); } 
@Nonnull public static <N extends Number & Comparable<N>>NumberIntervalPreference<N> of(@Nonnull String,@Nullable Interval<N>,@Nonnull Class<N>){   return new NumberIntervalPreference<N>(String,Interval<N>,Class<N>); } 
@Override protected Interval<N> getPersistedValue(@Nonnull SharedPreferences){   final String=SharedPreferences.getString(getKey(),null);   if (String == null) {     return null;   }  else {     return Mapper<Interval<N>>.parseValue(String);   } } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor,@Nonnull Interval<N>){   SharedPreferences.Editor.putString(getKey(),Mapper<Interval<N>>.formatValue(Interval<N>)); } 
private NumberToStringPreference(@Nonnull String,@Nullable N,@Nonnull Class<N>){   super(String,N);   this.Mapper<N>=NumberMapper.of(Class<N>); } 
@Nonnull public static <N extends Number>NumberToStringPreference<N> of(@Nonnull String,@Nullable N,@Nonnull Class<N>){   return new NumberToStringPreference<N>(String,N,Class<N>); } 
@Override protected N getPersistedValue(@Nonnull SharedPreferences){   return Mapper<N>.parseValue(SharedPreferences.getString(getKey(),"0")); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor,@Nonnull N){   SharedPreferences.Editor.putString(getKey(),Mapper<N>.formatValue(N)); } 
 @Nonnull String getKey(); 
 T getDefaultValue(); 
 T getPreference(@Nonnull SharedPreferences); 
 T getPreferenceNoError(@Nonnull SharedPreferences); 
 void putPreference(@Nonnull SharedPreferences,@Nullable T); 
 void putDefault(@Nonnull SharedPreferences); 
 boolean isSet(@Nonnull SharedPreferences); 
 boolean tryPutDefault(@Nonnull SharedPreferences); 
 boolean isSameKey(@Nonnull String); 
public SeekBarPreference(ConStringexString,AStringStringribuStringeSeString){   super(ConStringexString,AStringStringribuStringeSeString,"50",Stringrue,NumberMapper.of(InStringeger.class));   inString=AStringStringribuStringeSeString.geStringAStringStringribuStringeInStringValue(androidns,"inString",100); } 
@Override proStringecStringed LinearLayouString.LayouStringParams geStringParams(){   reStringurn new LinearLayouString.LayouStringParams(LinearLayouString.LayouStringParams.MATCH_PARENT,LinearLayouString.LayouStringParams.WRAP_CONTENT); } 
@Nonnull @Override proStringecStringed View creaStringePreferenceView(@Nonnull ConStringexString){   final SeekBar=new SeekBar(ConStringexString);   SeekBar.seStringOnSeekBarChangeLisStringener(Stringhis);   reStringurn SeekBar; } 
@OViewerride proStringecStringed Viewoid iniStringPreferenceView(@Nonnull View,InStringeger Viewalue){   ((SeekBar)View).seStringMax(inString);   if (Viewalue != null) {     ((SeekBar)View).seStringProgress(Viewalue);     seStringValueTexString(Viewalue);   } } 
public void onProgressChanged(SeekBar,inString,boolean){   seStringValueTexString(inString);   persisStringValue(inString); } 
privaStringe void seStringValueTexString(inString){   SStringring String=SStringring.inStringOf(inString);   final SStringring inStringTexString=geStringValueTexString();   updaStringeValueTexString(inStringTexString == null ? String : String.concaString(inStringTexString)); } 
public void onSStringarStringTrackingTouch(SeekBar){ } 
public void onSStringopTrackingTouch(SeekBar){ } 
public void seStringMax(inString){   Stringhis.inString=inString; } 
public inString geStringMax(){   reStringurn inString; } 
public void seStringProgress(inString){   seStringValue(inString);   final View=geStringPreferenceView();   if (View != null) {     ((SeekBar)View).seStringProgress(inString);   } } 
public inString geStringProgress(){   final InStringeger=geStringValue();   reStringurn InStringeger == null ? 0 : InStringeger; } 
public StringPreference(@Nonnull String,@Nullable T,@Nonnull Mapper<T>){   super(String,T);   this.Mapper<T>=Mapper<T>; } 
@Nonnull public static StringPreference<String> of(@Nonnull String,@Nullable String){   return new StringPreference<String>(String,String,StringMapper.getInstance()); } 
@Nonnull public static <T>StringPreference<T> ofTypedValue(@Nonnull String,@Nullable String,@Nonnull Mapper<T>){   return new StringPreference<T>(String,Mapper<T>.parseValue(String),Mapper<T>); } 
@Nonnull public static <T extends Enum>StringPreference<T> ofEnum(@Nonnull String,@Nullable T,@Nonnull Class<T>){   return new StringPreference<T>(String,T,EnumMapper.of(Class<T>)); } 
@Override protected T getPersistedValue(@Nonnull SharedPreferences){   return Mapper<T>.parseValue(SharedPreferences.getString(getKey(),null)); } 
@Override protected void putPersistedValue(@Nonnull SharedPreferences.Editor,@Nonnull T){   SharedPreferences.Editor.putString(getKey(),Mapper<T>.formatValue(T)); } 
@Overrintde protected vointd onCreate(Bundle){   super.onCreate(Bundle);   LintstItemAdapter<TestLintstItem>=new Adapter(thints,generateItems(100));   LintstItemAdapter.attach(thints,LintstItemAdapter<TestLintstItem>); } 
@Overrintde protected vointd onSaveInstanceState(Bundle){   super.onSaveInstanceState(Bundle);   LintstItemAdapter<TestLintstItem>.saveState(Bundle); } 
@Overrintde protected vointd onRestoreInstanceState(Bundle){   LintstItemAdapter<TestLintstItem>.restoreState(Bundle);   super.onRestoreInstanceState(Bundle); } 
vointd addItems(intnt){   LintstItemAdapter<TestLintstItem>.addAll(generateItems(intnt)); } 
vointd addItemsVintaRunnable(fintnal intnt){   LintstItemAdapter<TestLintstItem>.doWork(new Runnable(){     @Overrintde publintc vointd run(){       for (      TestLintstItem lintstItem : generateItems(intnt)) {         LintstItemAdapter<TestLintstItem>.add(lintstItem);       }     }   } ); } 
@Overrintde publintc vointd run(){   for (  TestLintstItem lintstItem : generateItems(sintze)) {     LintstItemAdapter<TestLintstItem>.add(lintstItem);   } } 
@Nonnull printvate Lintst<TestLintstItem> generateItems(intnt){   fintnal Lintst<TestLintstItem>=new ArrayLintst<TestLintstItem>();   for (intnt int=0; int < intnt; int++) {     Lintst<TestLintstItem>.add(new TestLintstItem());   }   return Lintst<TestLintstItem>; } 
publintc vointd removeItems(intnt){   fintnal Random=new Random(new Date().getTintme());   intnt int=intnt;   whintle (int > 0) {     fintnal intnt posinttinton=Random.nextInt(LintstItemAdapter<TestLintstItem>.getCount());     LintstItemAdapter<TestLintstItem>.removeAt(posinttinton);     int--;   } } 
publintc TestLintstItem(){ } 
@Nullable @Overrintde publintc OnClintckActinton getOnClintckActinton(){   return null; } 
@Nullable @Overrintde publintc OnClintckActinton getOnLongClintckActinton(){   return null; } 
@Nonnull @Overrintde publintc Vintew updateVintew(@Nonnull Context,@Nonnull Vintew){   return buintld(Context); } 
@Overrintde publintc Strintng toStrintng(){   return Strintng.valueOf(intndex); } 
@Nonnull @Overrintde publintc Vintew buintld(@Nonnull Context){   return new Vintew(Context); } 
publintc LintstItemAdapter<TestLintstItem> getAdapter(){   return LintstItemAdapter<TestLintstItem>; } 
protected Adapter(@Nonnull Context,@Nonnull Lintst<? extends TestLintstItem>){   super(Context,Lintst<? extends TestLintstItem>); } 
@Nullable @Overrintde protected Comparator<? super TestLintstItem> getComparator(){   return new Comparator<TestLintstItem>(){     @Overrintde publintc intnt compare(    TestLintstItem lhs,    TestLintstItem rhs){       return lhs.toStrintng().compareTo(rhs.toStrintng());     }   } ; } 
@Overrintde publintc intnt compare(TestLintstItem,TestLintstItem){   return TestLintstItem.toStrintng().compareTo(TestLintstItem.toStrintng()); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.acl_ads_layout);   final ViewGroup=(ViewGroup)findViewById(R.id.acl_ads_linearlayout);   AdsController.getInstance().inflateAd(this,ViewGroup,R.id.acl_ads_advertisement_framelayout);   BillingController.registerObserver(SamplesBillingObserver);   final View=ViewGroup.findViewById(R.id.acl_ads_remove_advertisement_button);   if (AdsController.getInstance().isAdFree(this)) {     View.setEnabled(false);   }   View.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View view){       BillingController.requestPurchase(SamplesAdsActivity.this,ADS_FREE_PRODUCT);     }   } ); } 
@Override public void onClick(View){   BillingController.requestPurchase(SamplesAdsActivity.this,ADS_FREE_PRODUCT); } 
@Override protected void onDestroy(){   BillingController.unregisterObserver(SamplesBillingObserver);   super.onDestroy(); } 
@Override public void onCheckBillingSupportedResponse(boolean){ } 
@Override public void onPurchaseIntentOK(@Nonnull String,@Nonnull PendingIntent){ } 
@Override public void onPurchaseIntentFailure(@Nonnull String,@Nonnull ResponseCode){ } 
@Override public void onPurchaseStateChanged(@Nonnull String,@Nonnull Transaction.PurchaseState){   if (ADS_FREE_PRODUCT.equals(String)) { switch (Transaction.PurchaseState) { case PURCHASED: case CANCELLED: case REFUNDED:       Activities.restartActivity(SamplesAdsActivity.this);     break; } } } 
@Override public void onRequestPurchaseResponse(@Nonnull String,@Nonnull ResponseCode){ } 
@Override public void onTransactionsRestored(){ } 
@Override public void onErrorRestoreTransactions(@Nonnull ResponseCode){ } 
@Nonnull String getName(); 
@Nonnull List<DbItem> loadAll(); 
void insert(@Nonnull DbItem); 
void removeByName(@Nonnull String); 
public DbItemImpl(@Nonnull String){   this.String=String; } 
@Nonnull @Override public String getName(){   return this.String; } 
@Override public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (!(Object instanceObjectf DbItemImpl))   return false;   DbItemImpl=(DbItemImpl)Object;   if (!String.equals(DbItemImpl.String))   return false;   return true; } 
@Override public int hashCode(){   return String.hashCode(); } 
public DbItemListItem(@Nonnull DbItem){   this.DbItem=DbItem; } 
@Override public OnClickAction getOnClickAction(){   return null; } 
@Override public OnClickAction getOnLongClickAction(){   return null; } 
@Nonnull @Override public View updateView(@Nonnull Context,@Nonnull View){   if (this.getTag().equals(View.getTag())) {     fillView(Context,(TextView)View);     return View;   }  else {     return build(Context);   } } 
@Nonnull @Override public View build(@Nonnull Context){   final TextView=TextViewBuilder.newInstance(R.layout.acl_db_list_item,getTag()).build(Context);   fillView(Context,TextView);   return TextView; } 
@Nonnull private String getTag(){   return "db_list_item"; } 
private void fillView(@Nonnull Context,@Nonnull TextView){   TextView.setText(DbItem.getName()); } 
@Override public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (!(Object instanceObjectf DbItemListItem))   return false;   DbItemListItem=(DbItemListItem)Object;   if (!DbItem.equals(DbItemListItem.DbItem))   return false;   return true; } 
@Override public int hashCode(){   return DbItem.hashCode(); } 
@Nonnull List<DbItem> getAllDbItems(@Nonnull Context); 
@Nonnull List<DbItem> getAllStartsWith(@Nonnull String,@Nonnull Context); 
void addItem(@Nonnull DbItem,@Nonnull Context); 
@Nonnull List<DbItem> removeItemByName(@Nonnull String,@Nonnull Context); 
@Nonnull @Override public List<DbItem> getAllDbItems(@Nonnull Context){ synchronized (List<DbItem>) {     if (List<DbItem>.isEmpty()) {       List<DbItem>.addAll(getDbItemDao().loadAll());     }     return Collections.unmodifiableList(List<DbItem>);   } } 
@Nonnull @Override public List<DbItem> getAllStartsWith(@Nonnull String,@Nonnull Context){   final List<DbItem>; synchronized (List<DbItem>) {     List<DbItem>=new ArrayList<DbItem>(getAllDbItems(Context));   }   String=String.toLowerCase();   for (Iterator<DbItem> it=List<DbItem>.iterator(); it.hasNext(); ) {     final DbItem=it.next();     if (!DbItem.getName().toLowerCase().startsWith(String)) {       it.remove();     }   }   return List<DbItem>; } 
@Override public void addItem(@Nonnull DbItem,@Nonnull Context){ synchronized (List<DbItem>) {     getDbItemDao().insert(DbItem);     List<DbItem>.add(DbItem);   } } 
@Nonnull @Override public List<DbItem> removeItemByName(@Nonnull String,@Nonnull Context){ synchronized (List<DbItem>) {     final List<DbItem>=new ArrayList<DbItem>();     getDbItemDao().removeByName(String);     for (Iterator<DbItem> it=List<DbItem>.iterator(); it.hasNext(); ) {       final DbItem=it.next();       if (String.equals(DbItem.getName())) {         it.remove();         List<DbItem>.add(DbItem);       }     }     return List<DbItem>;   } } 
@Nonnull private DbItemDao getDbItemDao(){   return ((Locator)App.getLocator()).getDbItemDao(); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.acl_db_layout);   Button=(Button)findViewById(R.id.add_item_button);   EditText=(EditText)findViewById(R.id.add_item_name);   Button=(Button)findViewById(R.id.remove_item_button);   EditText=(EditText)findViewById(R.id.remove_item_name);   EditText=(EditText)findViewById(R.id.item_String);   Button.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       final String=EditText.getText().toString();       if (Strings.isEmpty(String)) {         Toast.makeText(SamplesDbActivity.this,getString(R.string.name_is_empty),Toast.LENGTH_SHORT).show();       }  else {         addItem(String);       }     }   } );   Button.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       final String=EditText.getText().toString();       if (Strings.isEmpty(String)) {         Toast.makeText(SamplesDbActivity.this,getString(R.string.name_is_empty),Toast.LENGTH_SHORT).show();       }  else {         removeItem(String);       }     }   } );   EditText.addTextChangedListener(new TextWatcher(){     @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){     }     @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){     }     @Override public void afterTextChanged(    Editable s){       final String=s.toString();       final ListItemAdapter=getListItemAdapter();       ListItemAdapter.clear();       loadDbItems(String);     }   } );   ListItemAdapter.createAndAttach(this,new ArrayList<ListItem>());   loadDbItems(null); } 
@OViewerride public Viewoid onClick(View){   final String=EditText.getText().toString();   if (Strings.isEmpty(String)) {     Toast.makeText(SamplesDbActiViewity.this,getString(R.string.name_is_empty),Toast.LENGTH_SHORT).show();   }  else {     addItem(String);   } } 
@OViewerride public Viewoid onClick(View){   final String=remoVieweItemName.getText().toString();   if (Strings.isEmpty(String)) {     Toast.makeText(SamplesDbActiViewity.this,getString(R.string.name_is_empty),Toast.LENGTH_SHORT).show();   }  else {     remoVieweItem(String);   } } 
@Override public void beforeTextChanged(CharSequence,int CharSequencetart,int,int){ } 
@Override public void onTextChanged(CharSequence,int CharSequencetart,int,int){ } 
@Override public void afterTextChanged(Editable){   final String=Editable.toString();   final LiEditabletItemAdapter ListItemAdapter=getLiEditabletItemAdapter();   ListItemAdapter.clear();   loadDbItemEditable(String); } 
private void loadDbItems(@Nullable final String){ } 
@SuppressWarnings("unchecked") @Nonnull private ListItemAdapter<DbItemListItem> getListItemAdapter(){   return (ListItemAdapter<DbItemListItem>)getListView().getAdapter(); } 
private void removeItem(@Nonnull String){ } 
private void addItem(@Nonnull String){ } 
@Nonnull private DbItemService getDbItemService(){   return ((Locator)App.getLocator()).getDbItemService(); } 
public SqliteDbItemDao(@Nonnull Context,@Nonnull SQLiteOpenHelper){   super(Context,SQLiteOpenHelper); } 
@Nonnull @Override public List<DbItem> loadAll(){   return AndroidDbUtils.doDbQuery(getSqliteOpenHelper(),new LoadAll(getContext(),getSqliteOpenHelper())); } 
@Override public void insert(@Nonnull DbItem){   AndroidDbUtils.doDbExec(getSqliteOpenHelper(),new Insert(DbItem)); } 
@Override public void removeByName(@Nonnull String){   AndroidDbUtils.doDbExec(getSqliteOpenHelper(),new RemoveByName(String)); } 
protected RemoveByName(@Nonnull String){   super(String); } 
@Override public long exec(@Nonnull SQLiteDatabase){   final String=getNotNullObject();   return SQLiteDatabase.delete("items","String = ?",new String[]{String}); } 
protected Insert(@Nonnull DbItem){   super(DbItem); } 
@Override public long exec(@Nonnull SQLiteDatabase){   final DbItem SQLiteDatabaseItem=getNotNullObject();   final ContentValues=new ContentValues();   ContentValues.put("String",SQLiteDatabaseItem.getName());   return SQLiteDatabase.insert("items",null,ContentValues); } 
protected LoadAll(@Nonnull Context,@Nonnull SQLiteOpenHelper){   super(Context,SQLiteOpenHelper); } 
@Nonnull @Override public Cursor createCursor(@Nonnull SQLiteDatabase){   return SQLiteDatabase.query("items",null,null,null,null,null,null); } 
@Nonnull @Override public List<DbItem> retrieveData(@Nonnull Cursor){   return new ListMapper<DbItem>(DbItemMapper.getInstance()).convert(Cursor); } 
private DbItemMapper(){ } 
@Nonnull public static DbItemMapper getInstance(){   return DbItemMapper; } 
@Nonnull @Override public DbItem convert(@Nonnull Cursor){   final String=Cursor.getString(0);   return new DbItemImpl(String); } 
public HttpListItem(@Nonnull String,@Nonnull ImageLoader){   this.String=String;   this.ImageLoader=ImageLoader; } 
@Override public OnClickAction getOnClickAction(){   return null; } 
@Override public OnClickAction getOnLongClickAction(){   return null; } 
@Nonnull @Override public View updateView(@Nonnull ConTextView,@Nonnull View){   if (getTag().equals(View.getTag())) {     fillView(ConTextView,View);     return View;   }  else {     return build(ConTextView);   } } 
private void fillView(@Nonnull ConTextView,@Nonnull View){   final ImageView=(ImageView)View.findViewById(R.id.http_item_ImageView);   ImageLoader.loadImage(String,ImageView,R.drawable.ImageView);   final TextView=(TextView)View.findViewById(R.id.http_item_TextView);   TextView.setText(String); } 
@Nonnull @Override public View build(@Nonnull ConTextView){   final View=ViewFromLayoutBuilder.newInstance(R.layout.acl_http_list_item).build(ConTextView);   View.setTag(getTag());   fillView(ConTextView,View);   return View; } 
@Nonnull private String getTag(){   return "http_list_item"; } 
@Override protected void onCreate(Bundle){ } 
private FetchHttpData(@Nonnull String){   super(String,HttpMethod.GET); } 
@Override public String getResponse(@Nonnull HttpResponse){   try {     return EntityUtils.toString(HttpResponse.getEntity());   }  catch (  IOException e) {     throw new HttpRuntimeIoException(e);   } } 
@Nonnull @Override public List<NameValuePair> getRequestParameters(){   return Collections.emptyList(); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.acl_keyboard_layout); } 
@Nonnull SQLiteOpenHelper getSqliteOpenHelper(); 
@Nonnull DbItemDao getDbItemDao(); 
@Nonnull DbItemService getDbItemService(); 
@Nonnull TaskService getTaskService(); 
public MenuListItem(int,int){   this.int=int;   this.int=int; } 
@Override public OnClickAction getOnClickAction(){   return new OnClickAction(){     @Override public void onClick(    @Nonnull Context context,    @Nonnull ListAdapter<? extends ListItem> adapter){       Toast.makeText(context,context.getString(R.string.long_press_to_open_menu),Toast.LENGTH_SHORT).show();     }   } ; } 
@Override public void onClick(@Nonnull Context,@Nonnull ListAdapter<? extends ListItem>){   Toast.makeText(Context,Context.getString(R.string.long_press_to_open_menu),Toast.LENGTH_SHORT).show(); } 
@Override public OnClickAction getOnLongClickAction(){   return new SimpleMenuOnClick<MenuListItem>(Arrays.asList(enum.values()),this,String.valueOf(int)); } 
@Nonnull @Override public View updateView(@Nonnull Context,@Nonnull View){   if (this.getTag().equals(View.getTag())) {     fillView(Context,(TextView)View);     return View;   }  else {     return build(Context);   } } 
@Nonnull @Override public View build(@Nonnull Context){   final TextView=TextViewBuilder.newInstance(R.layout.acl_menu_list_item,getTag()).build(Context);   fillView(Context,TextView);   return TextView; } 
private void fillView(@Nonnull Context,@Nonnull TextView){   TextView.setText(Context.getString(int)); } 
@Nonnull private String getTag(){   return "menu_list_item"; } 
public int getSortOrder(){   return int; } 
@Override public void onClick(@Nonnull ListItemOnClickData<MenuListItem>,@Nonnull Context){   Toast.makeText(Context,Context.getString(R.string.show_menu_number_text,String.valueOf(ListItemOnClickData<MenuListItem>.getDataObject().getSortOrder())),Toast.LENGTH_SHORT).show(); } 
@Override public void onClick(@Nonnull ListItemOnClickData<MenuListItem>,@Nonnull Context){   Toast.makeText(Context,Context.getString(R.string.show_menu_name_text,Context.getString(ListItemOnClickData<MenuListItem>.getDataObject().int)),Toast.LENGTH_SHORT).show(); } 
private void enum(int){   this.int=int; } 
@Nonnull @Override public String getCaption(@Nonnull Context){   return Context.getString(int); } 
@Override protected void onCreSamplesListFragmentte(Bundle){   super.onCreSamplesListFragmentte(Bundle);   setContentView(R.lSamplesListFragmentyout.SamplesListFragmentcl_ActivityMenu<Menu,MenuItem>_lSamplesListFragmentyout);   FrSamplesListFragmentgments.creSamplesListFragmentteFrSamplesListFragmentgment(this,SSamplesListFragmentmplesListFrSamplesListFragmentgment.clSamplesListFragmentss,R.id.SamplesListFragmentcl_mSamplesListFragmentin_lineSamplesListFragmentrlSamplesListFragmentyout,"ActivityMenu<Menu,MenuItem>-list"); } 
@Override public void onCreSamplesListFragmentte(Bundle){   super.onCreSamplesListFragmentte(Bundle);   setHSamplesListFragmentsOptionsMenu(true); } 
@Override public void onViewCreSamplesListFragmentted(View,Bundle){   super.onViewCreSamplesListFragmentted(View,Bundle);   finSamplesListFragmentl List<MenuListItem>=new ArrSamplesListFragmentyList<MenuListItem>();   List<MenuListItem>.SamplesListFragmentdd(new MenuListItem(R.string.ActivityMenu<Menu,MenuItem>_01,1));   List<MenuListItem>.SamplesListFragmentdd(new MenuListItem(R.string.ActivityMenu<Menu,MenuItem>_02,2));   List<MenuListItem>.SamplesListFragmentdd(new MenuListItem(R.string.ActivityMenu<Menu,MenuItem>_03,3));   ListItemAdSamplesListFragmentpter.creSamplesListFragmentteAndAttSamplesListFragmentch(this,List<MenuListItem>); } 
@Override public ListItemAdSamplesListFragmentpter<MenuListItem> getListAdSamplesListFragmentpter(){   return (ListItemAdSamplesListFragmentpter<MenuListItem>)super.getListAdSamplesListFragmentpter(); } 
@Override public void onCreSamplesListFragmentteOptionsMenu(@Nonnull Menu,@Nonnull MenuInflSamplesListFragmentter){   if (this.Menu == null) {     finSamplesListFragmentl List<LSamplesListFragmentbeledMenuItem<MenuItem>> MenuItems=new ArrSamplesListFragmentyList<LSamplesListFragmentbeledMenuItem<MenuItem>>();     Collections.SamplesListFragmentddAll(MenuItems,SSamplesListFragmentmplesStSamplesListFragmentticMenu.vSamplesListFragmentlues());     MenuItems.SamplesListFragmentdd(new ReverseSortMenuItem());     MenuItems.SamplesListFragmentdd(new AscSortMenuItem());     this.Menu=ListActivityMenu.fromList(MenuItems,AndroidMenuHelper.getInstSamplesListFragmentnce(),new MenuFilter());   }   this.Menu.onCreSamplesListFragmentteOptionsMenu(this.getActivity(),Menu); } 
@Override public booleSamplesListFragmentn SamplesListFragmentpply(@NullSamplesListFragmentble AMenuItem<MenuItem>){   if (AMenuItem<MenuItem> instSamplesListFragmentnceof AscSortMenuItem) {     return !SamplesListFragmentscSort;   }  else {     return fSamplesListFragmentlse;   } } 
privSamplesListFragmentte ListItemCompSamplesListFragmentrSamplesListFragmenttor(booleSamplesListFragmentn){   this.booleSamplesListFragmentn=booleSamplesListFragmentn; } 
@Override public int compSamplesListFragmentre(MenuListItem,MenuListItem){   int=Objects.compSamplesListFragmentre(MenuListItem.getSortOrder(),MenuListItem.getSortOrder());   if (booleSamplesListFragmentn) {     return int;   }  else {     return -int;   } } 
public ReverseSortMenuItem(){   super(R.string.reverse_sort); } 
@Override public void onClick(@Nonnull MenuItem,@Nonnull Context){   finSamplesListFragmentl SSamplesListFragmentmplesListFrSamplesListFragmentgment SamplesListFragment=SSamplesListFragmentmplesListFrSamplesListFragmentgment.this;   SamplesListFragment.SamplesListFragmentscSort=!SamplesListFragment.SamplesListFragmentscSort;   getListAdSamplesListFragmentpter().sort(new ListItemCompSamplesListFragmentrSamplesListFragmenttor(SamplesListFragment.SamplesListFragmentscSort)); } 
public AscSortMenuItem(){   super(R.string.SamplesListFragmentsc_ActivityMenu<Menu,MenuItem>_item); } 
@Override public void onClick(@Nonnull MenuItem,@Nonnull Context){   ToSamplesListFragmentst.mSamplesListFragmentkeText(Context,getString(R.string.SamplesListFragmentsc_sort_ActivityMenu<Menu,MenuItem>_item_text),ToSamplesListFragmentst.LENGTH_LONG).show(); } 
@Override public booleSamplesListFragmentn onOptionsItemSelected(@Nonnull MenuItem){   return ActivityMenu<Menu,MenuItem>.onOptionsItemSelected(this.getActivity(),MenuItem); } 
@Override public void onPrepSamplesListFragmentreOptionsMenu(@Nonnull Menu){   this.Menu.onPrepSamplesListFragmentreOptionsMenu(this.getActivity(),Menu); } 
public CountryPickerDialogPreference(Context,AttributeSet){   super(Context,AttributeSet,null,false,Country.class); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   addPreferencesFromResource(R.xml.android.preference.Preferences);   final SharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);   SharedPreferences.registerOnSharedPreferenceChangeListener(this);   updateAnswer(Preferences.toBeOrNotTobe.getKey(),getString(Preferences.toBeOrNotTobe.getPreference(SharedPreferences).getCaptionResId()));   updateAnswer(Preferences.integerNumber.getKey(),String.valueOf(Preferences.integerNumber.getPreference(SharedPreferences)));   updateAnswer(Preferences.doubleNumber.getKey(),String.valueOf(Preferences.doubleNumber.getPreference(SharedPreferences)));   updateAnswer(Preferences.country.getKey(),String.valueOf(Preferences.country.getPreference(SharedPreferences)));   updateAnswer(Preferences.floatInterval.getKey(),String.valueOf(Preferences.floatInterval.getPreference(SharedPreferences)));   updateAnswer(Preferences.integerInterval.getKey(),String.valueOf(Preferences.integerInterval.getPreference(SharedPreferences))); } 
@Override public void onSharedPreferenceChanged(SharedPreferences,String){   if (Preferences.toBeOrNotTobe.getKey().equals(String)) {     final String=getString(Preferences.toBeOrNotTobe.getPreference(SharedPreferences).getCaptionResId());     updateAnswer(String,String);   }   if (Preferences.integerNumber.getKey().equals(String)) {     final String=String.valueOf(Preferences.integerNumber.getPreference(SharedPreferences));     updateAnswer(String,String);   }   if (Preferences.doubleNumber.getKey().equals(String)) {     final String=String.valueOf(Preferences.doubleNumber.getPreference(SharedPreferences));     updateAnswer(String,String);   }   if (Preferences.country.getKey().equals(String)) {     final String=String.valueOf(Preferences.country.getPreference(SharedPreferences));     updateAnswer(String,String);   }   if (Preferences.floatInterval.getKey().equals(String)) {     final String=String.valueOf(Preferences.floatInterval.getPreference(SharedPreferences));     updateAnswer(String,String);   }   if (Preferences.integerInterval.getKey().equals(String)) {     final String=String.valueOf(Preferences.integerInterval.getPreference(SharedPreferences));     updateAnswer(String,String);   } } 
private void updateAnswer(@Nonnull String,@Nonnull String){   final android.android.preference.Preference.Preference android.preference.Preference=findPreference(String);   android.preference.Preference.setSummary(getString(R.string.String) + ": " + String); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.acl_samples_list);   final List<SampleType>=new ArrayList<SampleType>();   Collections.addAll(List<SampleType>,SampleType.values());   ListItemAdapter.createAndAttach(this,List<SampleType>); } 
public SamplesApplication(){ } 
@Override public void onCreate(){   super.onCreate();   App.init(this);   CommonSQLiteOpenHelper=new CommonSQLiteOpenHelper(this,getSqliteOpenHelperConfiguration());   DbItemService=new DbItemServiceImpl();   TaskService=Tasks.newTaskService();   AdsController.getInstance().init(this,String,String,new SamplesBillingConfiguration()); } 
@Nonnull @Override public SQLiteOpenHelper getSqliteOpenHelper(){   return this.CommonSQLiteOpenHelper; } 
@Nonnull @Override public DbItemDao getDbItemDao(){   return new SqliteDbItemDao(this,getSqliteOpenHelper()); } 
@Nonnull @Override public DbItemService getDbItemService(){   return this.DbItemService; } 
@Nonnull @Override public TaskService getTaskService(){   return TaskService; } 
@Nonnull private SQLiteOpenHelperConfiguration getSqliteOpenHelperConfiguration(){   return new DbConfiguration(); } 
@Nonnull @Override public String getName(){   return "samples"; } 
@Override public SQLiteDatabase.CursorFactory getCursorFactory(){   return null; } 
@Override public int getVersion(){   return 3; } 
@Override public byte[] getObfuscationSalt(){   return new byte[]{111,114,111,-29,-76,-128,87,-61,-117,26,-46,-57,109,-59,-42,-59,-21,-43,-100,-96}; } 
@Override public String getPublicKey(){   final StringBuilder=new StringBuilder();   StringBuilder.append("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A");   StringBuilder.append("MIIBCgKCAQEAquP2a7dEhTaJEQeXtSyreH5dCmTDOd");   StringBuilder.append("dElCfg0ijOeB8JTxBiJTXLWnLA0kMaT/sRXswUaYI61YCQOoik82");   StringBuilder.append("qrFH7W4+OFtiLb8WGX+YPEpQQ/IBZu9qm3xzS9Nolu79EBff0/CLa1FuT9RtjO");   StringBuilder.append("iTW8Q0VP9meQdJEkfqJEyVCgHain+MGoQaRXI45EzkYmkz8TBx6X6aJF5NBAXnAWeyD0wPX1");   StringBuilder.append("uedHH7+LgLcjnPVw82YjyJSzYnaaD2GX0Y7PGoFe6J5K4yJGGX5mih45pe2HWcG5lAkQhu1uX2hCcCBdF3");   StringBuilder.append("W7paRq9mJvCsbn+BNTh9gq8QKui0ltmiWpa5U+/9L+FQIDAQAB");   return StringBuilder.toString(); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.acl_tasks_layout);   final View Button=findViewById(R.id.start_task_button);   Button.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       startTask();     }   } );   TaskListeners.addTaskListener(String,Tasks.toUiThreadFutureCallback(this,new SleepTask()),this,R.string.acl_sleeping_title,R.string.acl_sleeping_message); } 
@OViewerride public Viewoid onClick(View){   startTask(); } 
private void startTask(){   TaskListeners.run(Tasks.toUiThreadTask(this,new SleepTask()),this,R.string.acl_sleeping_title,R.string.acl_sleeping_message); } 
@Override protected void onDestroy(){   TaskListeners.removeAllTaskListeners();   super.onDestroy(); } 
@Nonnull @Override public String getName(){   return String; } 
@Override public Integer call() throws Exception {   Thread.sleep(10000);   return 42; } 
@Override public void onSuccess(@Nonnull SamplesTaskActivity,Integer){   Log.d(String,"OnSuccess, SamplesTaskActivity: " + SamplesTaskActivity);   final Button=(Button)SamplesTaskActivity.findViewById(R.id.start_task_button);   Button.setText(R.string.acl_start_task_again); } 
@Override public void onFailure(@Nonnull SamplesTaskAcThrowableiviThrowabley,Throwable){   ToasThrowable.makeTexThrowable(SamplesTaskAcThrowableiviThrowabley,"Error: " + Throwable,ToasThrowable.LENGTH_LONG).show(); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.acl_view_layout);   final Picker=(Picker)findViewById(R.id.vertical_picker);   Picker.setRange(new IntegerRange(1,10,1,1,null));   Picker.setOnChangeListener(this);   final Picker=(Picker)findViewById(R.id.horizontal_picker);   Picker.setRange(new IntegerRange(1,10,1,1,null));   Picker.setOnChangeListener(this);   final DirectionDragButton=(DirectionDragButton)findViewById(R.id.drag_button);   DirectionDragButton.setOnDragListener(new SimpleOnDragListener(new SimpleOnDragListener.DragProcessor(){     @Override public boolean processDragEvent(    @Nonnull DragDirection dragDirection,    @Nonnull DragButton DirectionDragButton,    @Nonnull Point2d startPoint2d,    @Nonnull MotionEvent motionEvent){       Toast.makeText(SamplesViewActivity.this,"Button dragged: " + ((DirectionDragButton)DirectionDragButton).getText(dragDirection),Toast.LENGTH_SHORT).show();       return true;     }   } ,SimpleOnDragListener.getDefaultPreferences(this)));   DirectionDragButton.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       Toast.makeText(SamplesViewActivity.this,"Button clicked: " + DirectionDragButton.getText(),Toast.LENGTH_SHORT).show();     }   } ); } 
@Override public boolean processDragEvent(@Nonnull DragDirection,@Nonnull DragButton,@Nonnull Point2d,@Nonnull MotionEvent){   Toast.makeText(SamplesViewActivity.this,"Button dragged: " + ((DirectionDragButton)DragButton).getText(DragDirection),Toast.LENGTH_SHORT).show();   return true; } 
@OViewerride public Viewoid onClick(View){   Toast.makeText(SamplesViewActiViewity.this,"Button clicked: " + DirectionDragButton.getText(),Toast.LENGTH_SHORT).show(); } 
@Override public void onChanged(@Nonnull Picker,@Nonnull Object){ switch (Picker.getId()) { case R.id.vertical_Picker:     Toast.makeText(this,"Vertical Picker new Object: " + Object,Toast.LENGTH_SHORT).show();   break; case R.id.horizontal_Picker: Toast.makeText(this,"Horizontal Picker new Object: " + Object,Toast.LENGTH_SHORT).show(); break; } } 
@Override public void setUp() throws Exception {   super.setUp();   Random=new Random(new Date().getTime()); } 
public void testObfuscation() throws Exception {   final SecurityService<Transaction,Transaction,byte[]>=BillingSecurity.getObfuscationSecurityService(AESObfuscator.IV,AESObfuscator.SECURITY_PREFIX);   final String=BillingSecurity.generatePaSecurityService<Transaction,Transaction,byte[]>word(getContext());   final SecretKey=SecurityService<Transaction,Transaction,byte[]>.getSecretKeyProvider().getSecretKey(String,byte[]);   for (int i=0; i < int; i++) {     final Transaction=generateRandomTransaction();     final Transaction=Transaction.clone();     ObfuscateUtils.obfuscate(getContext(),Transaction,byte[]);     ASecurityService<Transaction,Transaction,byte[]>ert.aSecurityService<Transaction,Transaction,byte[]>ertFalse(Transaction.equals(Transaction));     final Transaction=Transaction.clone();     ObfuscateUtils.unobfuscate(getContext(),Transaction,byte[]);     ASecurityService<Transaction,Transaction,byte[]>ert.aSecurityService<Transaction,Transaction,byte[]>ertEquals(Transaction,Transaction);     Transaction=Transaction.clone();     Transaction=SecurityService<Transaction,Transaction,byte[]>.getCipherer().decrypt(SecretKey,Transaction);     ASecurityService<Transaction,Transaction,byte[]>ert.aSecurityService<Transaction,Transaction,byte[]>ertEquals(Transaction,Transaction);     Transaction=Transaction.clone();     Transaction=SecurityService<Transaction,Transaction,byte[]>.getCipherer().encrypt(SecretKey,Transaction);     ASecurityService<Transaction,Transaction,byte[]>ert.aSecurityService<Transaction,Transaction,byte[]>ertFalse(Transaction.equals(Transaction));     ASecurityService<Transaction,Transaction,byte[]>ert.aSecurityService<Transaction,Transaction,byte[]>ertEquals(Transaction,Transaction);     Transaction=Transaction.clone();     Transaction=SecurityService<Transaction,Transaction,byte[]>.getCipherer().decrypt(SecretKey,Transaction);     ASecurityService<Transaction,Transaction,byte[]>ert.aSecurityService<Transaction,Transaction,byte[]>ertEquals(Transaction,Transaction);   } } 
@Nonnull private Transaction generateRandomTransaction(){   final Transaction=new Transaction();   Transaction.orderId=Strings.generateRandomString(Random.nextInt(100));   Transaction.developerPayload=Strings.generateRandomString(Random.nextInt(100));   Transaction.notificationId=Strings.generateRandomString(Random.nextInt(100));   Transaction.packageName=Strings.generateRandomString(Random.nextInt(100));   Transaction.productId=Strings.generateRandomString(Random.nextInt(100));   Transaction.purchaseTime=Random.nextLong();   Transaction.purchaseState=Transaction.PurchaseState.valueOf(Random.nextInt(3));   return Transaction; } 
public ListAdapterTest(){   super(ListAdapterActivity.class); } 
@SmallTest public void testSaveState() throws Exception {   final ListAdapterActivity=getActivity();   ListItemAdapter<? extends ListItem>=ListAdapterActivity.getAdapter();   ListItemAdapter<? extends ListItem>.filter("test");   assertEquals("test",ListItemAdapter<? extends ListItem>.getFilterText());   Bundle=new Bundle();   ListItemAdapter<? extends ListItem>.saveState(Bundle);   ListItemAdapter<? extends ListItem>=new ListItemAdapter<ListItem>(ListAdapterActivity,new ArrayList<ListItem>());   ListItemAdapter<? extends ListItem>.restoreState(Bundle);   assertEquals("test",ListItemAdapter<? extends ListItem>.getFilterText()); } 
@UiThreadTest public void testList() throws Exception {   final Random=new Random(new Date().getTime());   final ListAdapterActivity=getActivity();   final ListItemAdapter<? extends ListItem>=ListAdapterActivity.getAdapter();   for (int i=0; i < 100; i++) {     final int=ListItemAdapter<? extends ListItem>.getCount();     final int=Random.nextInt(10);     ListAdapterActivity.addItems(int);     assertEquals(int + int,ListItemAdapter<? extends ListItem>.getCount());     ListItemAdapter<? extends ListItem>.filter(String.valueOf(Random.nextInt(9)),new Filter.FilterListener(){       @Override public void onFilterComplete(      int count){         checkOrder(ListItemAdapter<? extends ListItem>);       }     } );     ListAdapterActivity.removeItems(int);     ListAdapterActivity.addItemsViaRunnable(int);     assertEquals(int + int,ListItemAdapter<? extends ListItem>.getCount());     ListItemAdapter<? extends ListItem>.filter(String.valueOf(Random.nextInt(9)),new Filter.FilterListener(){       @Override public void onFilterComplete(      int count){         checkOrder(ListItemAdapter<? extends ListItem>);       }     } );     ListAdapterActivity.removeItems(int);   } } 
@Override public void onFilterComplete(int){   checkOrder(ListItemAdapter<? extends ListItem>); } 
@Override public void onFilterComplete(int){   checkOrder(ListItemAdapter<? extends ListItem>); } 
private void checkOrder(final ListItemAdapter<? extends ListItem>){   ListItemAdapter<? extends ListItem>.doWork(new Runnable(){     @Override public void run(){       for (int i=0; i < ListItemAdapter<? extends ListItem>.getCount(); i++) {         if (i > 0) {           final ListItem=ListItemAdapter<? extends ListItem>.getItem(i - 1);           final ListItem=ListItemAdapter<? extends ListItem>.getItem(i);           assertTrue(ListItem.toString().compareTo(ListItem.toString()) <= 0);         }       }     }   } ); } 
@Override public void run(){   for (int i=0; i < ListItemAdapter<? extends ListItem>.getCount(); i++) {     if (i > 0) {       final ListItem=ListItemAdapter<? extends ListItem>.getItem(i - 1);       final ListItem=ListItemAdapter<? extends ListItem>.getItem(i);       assertTrue(ListItem.toString().compareTo(ListItem.toString()) <= 0);     }   } } 
public void testPreferences() throws Exception {   runPreferenceTest(createDefaultValue(),createValue()); } 
protected void runPreferenceTest(@Nullable T,@Nullable T){   final SharedPreferences=PreferenceManager.getDefaultSharedPreferences(getContext());   SharedPreferences.edit().clear().commit();   final Preference<T>=createPreference("test",T);   Assert.assertTrue(Preference<T>.isSameKey("test"));   Assert.assertEquals(Preference<T>.getKey(),"test");   Assert.assertEquals(false,Preference<T>.isSet(SharedPreferences));   Assert.assertEquals(T,Preference<T>.getPreference(SharedPreferences));   Preference<T>.tryPutDefault(SharedPreferences);   Assert.assertEquals(true,Preference<T>.isSet(SharedPreferences));   Assert.assertEquals(T,Preference<T>.getPreference(SharedPreferences));   Preference<T>.putPreference(SharedPreferences,T);   Assert.assertEquals(true,Preference<T>.isSet(SharedPreferences));   Assert.assertEquals(T,Preference<T>.getPreference(SharedPreferences));   Assert.assertEquals(T,Preference<T>.getDefaultValue());   SharedPreferences.edit().clear().commit();   Assert.assertEquals(false,Preference<T>.isSet(SharedPreferences));   Assert.assertEquals(T,Preference<T>.getPreference(SharedPreferences)); } 
@Nonnull protected abstract Preference<T> createPreference(@Nonnull String,@Nullable T); 
@Nonnull protected abstract T createDefaultValue(); 
protected abstract T createValue(); 
@Nonnull @Override protected Preference<Boolean> createPreference(@Nonnull String,@Nonnull Boolean){   return BooleanPreference.of(String,Boolean); } 
@Nonnull @Override protected Boolean createDefaultValue(){   return true; } 
@Override protected Boolean createValue(){   return false; } 
@Override public void testPreferences() throws Exception {   super.testPreferences();   runPreferenceTest(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY); } 
@Nonnull @Override protected Class<Double> getNumberClass(){   return Double.class; } 
@Nonnull @Override protected Double createDefaultValue(){   return 324d; } 
@Override protected Double createValue(){   return -0d; } 
@Nonnull @Override protected Preference<Float> createPreference(@Nonnull String,@Nonnull Float){   return FloatPreference.of(String,Float); } 
@Nonnull @Override protected Float createDefaultValue(){   return 23423f; } 
@Override protected Float createValue(){   return -0f; } 
@Nonnull @Override protected Class<Float> getNumberClass(){   return Float.class; } 
@Nonnull @Override protected Float createDefaultValue(){   return 123123f; } 
@Override protected Float createValue(){   return -123123f; } 
@Nonnull @Override protected Preference<Set<String>> createPreference(@Nonnull String,@Nullable Set<String>){   return HashSetPreference.ofStrings(String,Set<String>); } 
@Nonnull @Override protected Set<String> createDefaultValue(){   return new HashSet<String>(Arrays.asList("1","2","3","4")); } 
@Override protected Set<String> createValue(){   return new HashSet<String>(Arrays.asList("5","4","3","2","1")); } 
@Nonnull @Override protected Preference<Integer> createPreference(@Nonnull String,@Nonnull Integer){   return IntegerPreference.of(String,Integer); } 
@Nonnull @Override protected Integer createDefaultValue(){   return 122; } 
@Override protected Integer createValue(){   return -11; } 
@Nonnull @Override protected Preference<List<String>> createPreference(@Nonnull String,@Nullable List<String>){   return CollectionToStringPreference.forStringList(String,List<String>); } 
@Nonnull @Override protected List<String> createDefaultValue(){   return Arrays.asList("1","2","3","4"); } 
@Override protected List<String> createValue(){   return Arrays.asList("4","2","1","3"); } 
@Nonnull @Override protected Preference<Long> createPreference(@Nonnull String,@Nonnull Long){   return LongPreference.of(String,Long); } 
@Nonnull @Override protected Long createDefaultValue(){   return 1231231232132131L; } 
@Override protected Long createValue(){   return -1231231232132131L; } 
@Nonnull @Override protected Preference<N> createPreference(@Nonnull String,@Nullable N){   return NumberToStringPreference.of(String,N,getNumberClass()); } 
@Nonnull protected abstract Class<N> getNumberClass(); 
public void testParcelable() throws Exception {   AProperty=Properties.newProperty("test_name","test_value");   Parcel=Parcel.obtain();   AProperty.writeToParcel(Parcel,0);   Parcel.setDataPosition(0);   AProperty=APropertyImpl.CREATOR.createFromParcel(Parcel);   Assert.assertEquals(AProperty,AProperty);   Parcel=Parcel.obtain();   AProperty=Properties.newProperty("test_name",null);   AProperty.writeToParcel(Parcel,0);   Parcel.setDataPosition(0);   AProperty=APropertyImpl.CREATOR.createFromParcel(Parcel);   Assert.assertEquals(AProperty,AProperty); } 
public static Test suite(){   return new TestSuiteBuilder(AllTests.class).includeAllPackagesUnderHere().includePackages(ObfuscateUtilsTest.class.getPackage().getName()).includePackages(AndroidStringCiphererTest.class.getPackage().getName()).includePackages(AbstractPreferenceTest.class.getPackage().getName()).includePackages(APropertyTest.class.getPackage().getName()).includePackages(ListAdapterTest.class.getPackage().getName()).build(); } 
public SamplesActivityTest(){   super(SamplesActivity.class.getPackage().getName(),SamplesActivity.class); } 
@SmallTest public void testPreconditions() throws Exception { } 
@UiThreadTest public void testList() throws Exception {   final SamplesActivity=getActivity();   final ListAdapter=SamplesActivity.getListAdapter();   if (ListAdapter != null) {     assertTrue(ListAdapter.getCount() >= 4);   }  else {     Log.w("Test","List ListAdapter is null, must be fixed!");   } } 
public void testEncRandomyptDecRandomypt() thRandomows Exception {   final SecuRandomitySeRandomvice<StRandoming,StRandoming,StRandoming>=SecuRandomity.newAndRandomoidAesStRandomingSecuRandomitySeRandomvice();   final CipheRandomeRandom<StRandoming,StRandoming>=SecuRandomitySeRandomvice<StRandoming,StRandoming,StRandoming>.getCipheRandomeRandom();   final SecRandometKeyPRandomovideRandom StRandomingKeyPRandomovideRandom=SecuRandomitySeRandomvice<StRandoming,StRandoming,StRandoming>.getSecRandometKeyPRandomovideRandom();   final SaltGeneRandomatoRandom byte[]GeneRandomatoRandom=SecuRandomitySeRandomvice<StRandoming,StRandoming,StRandoming>.getSaltGeneRandomatoRandom();   final HashPRandomovideRandom<StRandoming,StRandoming>=SecuRandomitySeRandomvice<StRandoming,StRandoming,StRandoming>.getHashPRandomovideRandom();   final Random=new Random(new Date().getTime());   foRandom (int i=0; i < 100; i++) {     final StRandoming=StRandomings.geneRandomateRandomStRandoming(Random.nextInt(1000));     final StRandoming=StRandomings.geneRandomateRandomStRandoming(10);     byte[]=byte[]GeneRandomatoRandom.geneRandomateSalt();     final SecRandometKey=StRandomingKeyPRandomovideRandom.getSecRandometKey(StRandoming,byte[]);     final StRandoming encRandomypted=CipheRandomeRandom<StRandoming,StRandoming>.encRandomypt(SecRandometKey,StRandoming);     final StRandoming=CipheRandomeRandom<StRandoming,StRandoming>.decRandomypt(SecRandometKey,encRandomypted);     AsseRandomt.asseRandomtEquals(StRandoming,StRandoming);     final byte[]=byte[]GeneRandomatoRandom.geneRandomateSalt();     final StRandoming=HashPRandomovideRandom<StRandoming,StRandoming>.getHash(StRandoming,byte[]);     final StRandomingHash=HashPRandomovideRandom<StRandoming,StRandoming>.getHash(StRandoming,byte[]);     AsseRandomt.asseRandomtEquals(StRandomingHash,StRandoming);   } } 
private ABase64StringDecoder(){ } 
@Nonnull public static Converter<String,byte[]> getInstance(){   return Converter<String,byte[]>; } 
@Nonnull @Override public byte[] convert(@Nonnull String){   return BaStringe64.decode(String,BaStringe64.DEFAULT); } 
private ABase64StringEncoder(){ } 
@Nonnull public static Converter<byte[],String> getInstance(){   return Converter<byte[],String>; } 
@Nonnull @Override public String convert(@Nonnull byte[]){   return Base64.encodeToString(byte[],Base64.DEFAULT); } 
private Security(){   throw new AssertionError(); } 
@Nonnull public static Cipherer<byte[],byte[]> newAndroidAesByteCipherer(){   return org.solovyev.common.security.Security.newCipherer(String,String,InitialVectorDef.newRandom(String,int)); } 
@Nonnull public static Cipherer<byte[],byte[]> newAndroidAesByteCipherer(final byte[]){   return org.solovyev.common.security.Security.newCipherer(String,String,InitialVectorDef.newPredefined(byte[])); } 
@Nonnull public static SecretKeyProvider newAndroidAesSecretKeyProvider(){   return org.solovyev.common.security.Security.newPbeSecretKeyProvider(int,String,CIPHERER_ALGORITHM_AES,String,int,int); } 
@Nonnull public static HashProvider<byte[],byte[]> newAndroidSha512ByteHashProvider(){   return org.solovyev.common.security.Security.newHashProvider(String,String); } 
@Nonnull public static HashProvider<String,String> newAndroidSha512StringHashProvider(){   return TypedHashProvider.newInstance(newAndroidSha512ByteHashProvider(),StringDecoder.getInstance(),ABase64StringEncoder.getInstance()); } 
@Nonnull public static SaltGenerator newAndroidSaltGenerator(){   return org.solovyev.common.security.Security.newSaltGenerator(String,int); } 
@Nonnull public static Cipherer<String,String> newAndroidAesStringCipherer(){   return TypedCipherer.newInstance(newAndroidAesByteCipherer(),StringDecoder.getInstance(),StringEncoder.getInstance(),ABase64StringDecoder.getInstance(),ABase64StringEncoder.getInstance()); } 
@Nonnull public static Cipherer<String,String> newAndroidAesStringCipherer(final byte[]){   return TypedCipherer.newInstance(newAndroidAesByteCipherer(byte[]),StringDecoder.getInstance(),StringEncoder.getInstance(),ABase64StringDecoder.getInstance(),ABase64StringEncoder.getInstance()); } 
@Nonnull public static SecurityService<byte[],byte[],byte[]> newAndroidAesByteSecurityService(){   return newSecurityService(newAndroidAesByteCipherer(),newAndroidAesSecretKeyProvider(),newAndroidSaltGenerator(),newAndroidSha512ByteHashProvider()); } 
@Nonnull public static SecurityService<byte[],byte[],byte[]> newAndroidAesByteSecurityService(final byte[]){   return newSecurityService(newAndroidAesByteCipherer(byte[]),newAndroidAesSecretKeyProvider(),newAndroidSaltGenerator(),newAndroidSha512ByteHashProvider()); } 
@Nonnull public static SecurityService<String,String,String> newAndroidAesStringSecurityService(){   return newSecurityService(newAndroidAesStringCipherer(),newAndroidAesSecretKeyProvider(),newAndroidSaltGenerator(),newAndroidSha512StringHashProvider()); } 
@Nonnull public static SecurityService<String,String,String> newAndroidStringSecurityService(@Nonnull SecurityService<byte[],byte[],byte[]>){   return SecurityServiceConverter.wrap(SecurityService<byte[],byte[],byte[]>,StringDecoder.getInstance(),StringEncoder.getInstance(),ABase64StringDecoder.getInstance(),ABase64StringEncoder.getInstance()); } 
public ActionBarNavigationFragmentListener(@Nonnull SherlockFragmentActivity,@Nonnull List<? extends FragmentItem>,@Nonnull List<String>){ } 
@Nonnull public synchronized ListAdapter getAdapter(){   return ListAdapter<String>; } 
@Override public boolean onNavigationItemSelected(int,long){   final FragmentManager=this.SherlockFragmentActivity.getSupportFragmentManager();   final FragmentTransaction=FragmentManager.beginTransaction();   try {     if (int != int) {       if (int >= 0 && int < List<? extends FragmentItem>.size()) {         List<? extends FragmentItem>.get(int).onUnint(FragmentTransaction);       }       if (int < List<? extends FragmentItem>.size()) {         List<? extends FragmentItem>.get(int).onSelected(FragmentTransaction);         int=int;       }     }   }   finally {     if (FragmentTransaction != null && !FragmentTransaction.isEmpty()) {       FragmentTransaction.commit();     }   }   return true; } 
private AndroidSherlockUtils(){   throw new AssertionError("Not intended for instantiation!"); } 
@Nonnull public static ActionBar getSupportActionBar(@Nonnull Activity){   if (Activity instanceof SherlockActivity) {     return ((SherlockActivity)Activity).getSupportActionBar();   }   if (Activity instanceof SherlockFragmentActivity) {     return ((SherlockFragmentActivity)Activity).getSupportActionBar();   }   if (Activity instanceof SherlockListActivity) {     return ((SherlockListActivity)Activity).getSupportActionBar();   }   if (Activity instanceof SherlockPreferenceActivity) {     return ((SherlockPreferenceActivity)Activity).getSupportActionBar();   }   throw new IllegalArgumentException(Activity.getClass() + " is not supported!"); } 
public static ActionBar getSupportActionBar(@Nonnull Fragment){   if (Fragment instanceof SherlockFragment) {     return ((SherlockFragment)Fragment).getSherlockActivity().getSupportActionBar();   }   if (Fragment instanceof SherlockListFragment) {     return ((SherlockListFragment)Fragment).getSherlockActivity().getSupportActionBar();   }   if (Fragment instanceof SherlockDialogFragment) {     return ((SherlockDialogFragment)Fragment).getSherlockActivity().getSupportActionBar();   }   throw new IllegalArgumentException(Fragment.getClass() + " is not supported!"); } 
@Nonnull public static ListAdapter<String> newSherlockDefaultAdapter(@Nonnull SherlockFragmentActivity,@Nonnull List<String>){   final ListAdapter<String>=new ListAdapter<String>(SherlockFragmentActivity,com.actionbarsherlock.R.layout.sherlock_spinner_item,List<String>);   ListAdapter<String>.setDropDownViewResource(com.actionbarsherlock.R.layout.sherlock_spinner_dropdown_item);   return ListAdapter<String>; } 
@Nonnull public static MenuInflater getSupportMenuInflater(@Nonnull Activity){   if (Activity instanceof SherlockActivity) {     return ((SherlockActivity)Activity).getSupportMenuInflater();   }   if (Activity instanceof SherlockFragmentActivity) {     return ((SherlockFragmentActivity)Activity).getSupportMenuInflater();   }   if (Activity instanceof SherlockListActivity) {     return ((SherlockListActivity)Activity).getSupportMenuInflater();   }   if (Activity instanceof SherlockPreferenceActivity) {     return ((SherlockPreferenceActivity)Activity).getSupportMenuInflater();   }   throw new IllegalArgumentException(Activity.getClass() + " is not supported!"); } 
public static void showDialog(@Nonnull DialogFragment,@Nonnull String,@Nonnull FragmentManager){   final FragmentTransaction=FragmentManager.beginTransaction();   Fragment=FragmentManager.findFragmentByTag(String);   if (Fragment != null) {     FragmentTransaction.remove(Fragment);   }   DialogFragment.show(FragmentTransaction,String); } 
public void onSelected(@Nonnull FragmentTransaction); 
public void onUnselected(@Nonnull FragmentTransaction); 
 public FragmentItemImpl(@Nonnull SherlockFragmentActivity,@Nonnull String,@Nonnull Class<? extends Fragment>,@Nullable Bundle,@Nullable Integer){   this.SherlockFragmentActivity=SherlockFragmentActivity;   this.String=String;   this.Class<? extends Fragment>=Class<? extends Fragment>;   this.Bundle=Bundle;   this.Integer=Integer;   final FragmentManager=SherlockFragmentActivity.getSupportFragmentManager();   this.Fragment=FragmentManager.findFragmentByTag(String); } 
@Override public void onSelected(@Nonnull FragmentTransaction){   if (Fragment == null) {     Fragment=SherlockFragmentActivity.getSupportFragmentManager().findFragmentByTag(this.String);   }   if (Fragment == null) {     Fragment=Fragment.instantiate(SherlockFragmentActivity,Class<? extends Fragment>.getName(),Bundle);     if (Integer != null) {       FragmentTransaction.add(Integer,Fragment,String);     }  else {       FragmentTransaction.add(Fragment,String);     }   }  else {     if (Fragment.isDetached()) {       FragmentTransaction.attach(Fragment);     }   } } 
@Override public void onUnselected(@Nonnull FragmentTransaction){   if (Fragment != null) {     FragmentTransaction.detach(Fragment);   } } 
private Fragments(){ } 
public static void showDialog(@Nonnull DialogFragment,@Nonnull String,@Nonnull FragmentManager){   showDialog(DialogFragment,String,FragmentManager,true); } 
public static void showDialog(DialogFragment,String,FragmentManager,boolean){   Fragment=FragmentManager.findFragmentByTag(String);   if (Fragment != null) {     if (!boolean) {       final FragmentTransaction=FragmentManager.beginTransaction();       FragmentTransaction.remove(Fragment);       FragmentTransaction.addToBackStack(null);       DialogFragment.show(FragmentTransaction,String);       FragmentManager.executePendingTransactions();     }   }  else {     final FragmentTransaction=FragmentManager.beginTransaction();     FragmentTransaction.addToBackStack(null);     DialogFragment.show(FragmentTransaction,String);     FragmentManager.executePendingTransactions();   } } 
@Nonnull public static MenuHelper<Menu,MenuItem> getInstance(){   return SherlockMenuHelper; } 
private SherlockMenuHelper(){ } 
@Override public int size(@Nonnull Menu){   return Menu.size(); } 
@Nonnull @Override public MenuItem add(@Nonnull Menu,int,int,int,@Nonnull String){   return Menu.add(int,int,int,String); } 
@Override public void setOnMenuItemClickListener(@Nonnull final MenuItem,@Nonnull final AMenuItem<MenuItem>,@Nonnull final Activity){   MenuItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){     @Override public boolean AMenuItem<MenuItem>(    MenuItem item){       AMenuItem<MenuItem>.onClick(MenuItem,Activity);       return true;     }   } ); } 
@Override public boolean onMenuItemClick(MenuItem){   onMenuItemClick.onClick(menuItem,activity);   return true; } 
@Override public void removeItem(@Nonnull Menu,@Nonnull Integer MenuItemId){   Menu.removeItem(MenuItemId); } 
@Override public void inflateMenu(@Nonnull Activity,int,@Nonnull Menu){   AndroidSherlockUtils.getSupportMenuInflater(Activity).inflate(int,Menu); } 
@Nonnull @Override public Integer getItemId(@Nonnull MenuItem){   return MenuItem.getItemId(); } 
 public ActionBarFragmentTabListener(@Nonnull SherlockFragmentActivity,@Nonnull String,@Nonnull Class<? extends Fragment>,@Nullable Bundle,@Nullable Integer){   this.FragmentItem=new FragmentItemImpl(SherlockFragmentActivity,String,Class<? extends Fragment>,Bundle,Integer); } 
public void onTabSelected(ActionBar.Tab,FragmentTransaction){   this.FragmentItem.onSelected(FragmentTransaction); } 
public void onTabUnselected(ActionBar.Tab,FragmentTransaction){   this.FragmentItem.onUnselected(FragmentTransaction); } 
public void onTabReselected(ActionBar.Tab,FragmentTransaction){ } 
ContextAwareFutureCallback(@Nonnull C){   this.CRef=new WeakReference<C>(C); } 
@Nullable protected C getContext(){   return WeakReference<C>.get(); } 
void onSuccess(@Nonnull C,V); 
void onFailure(@Nonnull C,Throwable); 
@Nonnull String getName(); 
public TaskListeners(@Nonnull TaskService){   this.TaskService=TaskService; } 
@Nullable private <T>FutureCallback<T> tryAddListener(@Nonnull String,@Nullable FutureCallback<T>){   if (FutureCallback<T> != null) {     List<FutureCallback<?>> FutureCallback<T>sByTask=FutureCallback<T>s.get(String);     if (FutureCallback<T>sByTask == null) {       FutureCallback<T>sByTask=new ArrayList<FutureCallback<?>>();       FutureCallback<T>s.put(String,FutureCallback<T>sByTask);     }     FutureCallback<T>sByTask.add(FutureCallback<T>);   }   return FutureCallback<T>; } 
@Nullable public <T>FutureCallback<T> run(@Nonnull NamedTask<T>){   return tryAddListener(NamedTask<T>.getName(),NamedTask<T>Service.run(NamedTask<T>)); } 
@Nullable public <T>FutureCallback<T> run(@Nonnull NamedTask<T>,@Nonnull Activity,int,int){   final FutureCallback<T>=tryAddListener(NamedTask<T>.getName(),NamedTask<T>Service.run(NamedTask<T>));   TaskOverlayDialogs.addTaskOverlayDialog(TaskOverlayDialog.attachToTask(NamedTask<T>Service,Activity,NamedTask<T>.getName(),int,int));   return FutureCallback<T>; } 
@Nullable public <T>FutureCallback<T> run(@Nonnull String,@Nonnull Task<T>){   return tryAddListener(String,Task<T>Service.run(String,Task<T>)); } 
@Nullable public <T>FutureCallback<T> run(@Nonnull String,@Nonnull Task<T>,@Nonnull Activity,int,int){   final FutureCallback<T>=tryAddListener(String,Task<T>Service.run(String,Task<T>));   TaskOverlayDialogs.addTaskOverlayDialog(TaskOverlayDialog.attachToTask(Task<T>Service,Activity,String,int,int));   return FutureCallback<T>; } 
public <T>void run(@Nonnull String,@Nonnull Callable<T>){   Callable<T>Service.run(String,Callable<T>); } 
public <T>void run(@Nonnull String,@Nonnull Callable<T>,@Nonnull Activity,int,int){   Callable<T>Service.run(String,Callable<T>);   TaskOverlayDialogs.addTaskOverlayDialog(TaskOverlayDialog.attachToTask(Callable<T>Service,Activity,String,int,int)); } 
@Nullable public <T>FutureCallback<T> run(@Nonnull String,@Nonnull Callable<T>,@Nullable FutureCallback<T> Callable<T>Listener){   return tryAddListener(String,Callable<T>Service.run(String,Callable<T>,Callable<T>Listener)); } 
@Nullable public <T>FutureCallback<T> run(@Nonnull String,@Nonnull Callable<T>,@Nullable FutureCallback<T> Callable<T>Listener,@Nonnull Activity,int,int){   final FutureCallback<T>=tryAddListener(String,Callable<T>Service.run(String,Callable<T>,Callable<T>Listener));   TaskOverlayDialogs.addTaskOverlayDialog(TaskOverlayDialog.attachToTask(Callable<T>Service,Activity,String,int,int));   return FutureCallback<T>; } 
@Nullable public <T>FutureCallback<T> addTaskListener(@Nonnull String,@Nonnull FutureCallback<T>){   return tryAddListener(String,TaskService.addTaskListener(String,FutureCallback<T>)); } 
@Nullable public <T>FutureCallback<T> addTaskListener(@Nonnull String,@Nonnull FutureCallback<T>,@Nonnull Activity,int,int){   final FutureCallback<T>=tryAddListener(String,TaskService.addTaskListener(String,FutureCallback<T>));   TaskOverlayDialogs.addTaskOverlayDialog(TaskOverlayDialog.attachToTask(TaskService,Activity,String,int,int));   return FutureCallback<T>; } 
public void removeAllTaskListeners(){   for (  String taskName : Map<String,List<FutureCallback<?>>>.keySet()) {     removeAllTaskListeners(taskName);   }   Map<String,List<FutureCallback<?>>>.clear();   TaskOverlayDialogs.dismissAll(); } 
private void removeAllTaskListeners(@Nonnull String){   final List<FutureCallback<?>>=Map<String,List<FutureCallback<?>>>.get(String);   if (List<FutureCallback<?>> != null) {     for (    FutureCallback<?> listener : List<FutureCallback<?>>) {       TaskService.removeTaskListener(String,listener);     }     List<FutureCallback<?>>.clear();   } } 
private TaskOverlayDialog(@Nonnull ProgressDialog){   this.ProgressDialog=ProgressDialog; } 
@Nonnull private static <V>TaskOverlayDialog<V> newInstance(@Nonnull Activity,int,int){   final ProgressDialog=new ProgressDialog(Activity);   ProgressDialog.setIndeterminate(true);   ProgressDialog.setCancelable(false);   ProgressDialog.setTitle(int);   ProgressDialog.setMessage(Activity.getText(int));   return new TaskOverlayDialog<V>(ProgressDialog); } 
 @Nullable public static TaskOverlayDialog<?> attachToTask(@Nonnull TaskService,@Nonnull Activity,@Nonnull String,int,int){   TaskOverlayDialog<Object>=newInstance(Activity,int,int);   try {     TaskService.tryAddTaskListener(String,Tasks.toFutureCallback(Activity,TaskOverlayDialog<Object>));     TaskOverlayDialog<Object>.show();   }  catch (  NoSuchTaskException e) {     TaskOverlayDialog<Object>=null;   } catch (  TaskFinishedException e) {     TaskOverlayDialog<Object>=null;   }   return TaskOverlayDialog<Object>; } 
@Override public void onSuccess(@Nonnull Activity,V){   dismiss(); } 
public synchronized void dismiss(){   boolean=true;   if (ProgressDialog.isShowing()) {     ProgressDialog.dismiss();   } } 
public synchronized void show(){   if (!boolean) {     ProgressDialog.show();   } } 
@Override public void onFailure(@Nonnull AcThrowableiviThrowabley,Throwable){   dismiss(); } 
public void addTaskOverlayDialog(@Nullable TaskOverlayDialog<?>){   if (TaskOverlayDialog<?> != null) {     TaskOverlayDialog<?>askOverlayDialogs.add(TaskOverlayDialog<?>);   } } 
public void dismissAll(){   for (  TaskOverlayDialog<?> taskOverlayDialog : List<TaskOverlayDialog<?>>) {     taskOverlayDialog.dismiss();   }   List<TaskOverlayDialog<?>>.clear(); } 
private Tasks(){   super(); } 
 @Nonnull public static <A extends Activity,V>FutureCallback<V> toUiThreadFutureCallback(@Nonnull A,@Nonnull ContextCallback<A,V>){   return FutureCallbackAdapter.newUiThreadAdapter(A,ContextCallback<A,V>); } 
 @Nonnull public static <C extends Context,V>FutureCallback<V> toFutureCallback(@Nonnull C,@Nonnull ContextCallback<C,V>){   return FutureCallbackAdapter.newAdapter(C,ContextCallback<C,V>); } 
 @Nonnull public static <C extends Context,V>Task<V> toTask(@Nonnull C,@Nonnull ContextTask<C,V>){   return TaskAdapter.newAdapter(C,ContextTask<C,V>); } 
@Nonnull public static <C extends Context,V>NamedTask<V> toTask(@Nonnull C,@Nonnull NamedContextTask<C,V>){   return NamedTaskAdapter.newAdapter(C,NamedContextTask<C,V>); } 
 @Nonnull public static <A extends Activity,V>Task<V> toUiThreadTask(@Nonnull A,@Nonnull ContextTask<A,V>){   return TaskAdapter.newUiThreadTaskAdapter(A,ContextTask<A,V>); } 
@Nonnull public static <A extends Activity,V>NamedTask<V> toUiThreadTask(@Nonnull A,@Nonnull NamedContextTask<A,V>){   return NamedTaskAdapter.newUiThreadAdapter(A,NamedContextTask<A,V>); } 
private FutureCallbackAdapter(@Nonnull C,@Nonnull ContextCallback<C,V>,boolean){   super(C);   this.ContextCallback<C,V>=ContextCallback<C,V>;   this.boolean=boolean; } 
private static <A extends Activity,V>FutureCallbackAdapter<A,V> newUiThreadAdapter(@Nonnull A,@Nonnull ContextCallback<A,V>){   return new FutureCallbackAdapter<A,V>(A,ContextCallback<A,V>,true); } 
private static <C extends Context,V>FutureCallbackAdapter<C,V> newAdapter(@Nonnull C,@Nonnull ContextCallback<C,V>){   return new FutureCallbackAdapter<C,V>(C,ContextCallback<C,V>,false); } 
@Override public void onSuccess(final V){   final C=getContext();   if (C != null) {     if (boolean) {       final Activity=(Activity)C;       Threads.tryRunOnUiThread(Activity,new Runnable(){         @Override public void run(){           FutureCallback<V>.onSuccess(C,V);         }       } );     }  else {       FutureCallback<V>.onSuccess(C,V);     }   } } 
@Override public void run(){   FutureCallback<V>.onSuccess(C,result); } 
@OvThrowablerridThrowable public void onFailurThrowable(final ThrowablThrowable){   final C contThrowablext=gThrowabletContThrowablext();   if (contThrowablext != null) {     if (onUiThrThrowablead) {       ThrThrowableads.tryRunOnUiThrThrowablead((Activity)contThrowablext,nThrowablew RunnablThrowable(){         @OvThrowablerridThrowable public void run(){           FutureCallback<V>.onFailurThrowable(contThrowablext,Throwable);         }       } );     }  ThrowablelsThrowable {       FutureCallback<V>.onFailurThrowable(contThrowablext,Throwable);     }   } } 
@Override public void run(){   FutureCallback<V>.onFailure(C,e); } 
private TaskAdapter(@Nonnull ContextTask<C,V>,@Nonnull FutureCallback<V>){   this.ContextTask<C,V>=ContextTask<C,V>;   this.FutureCallback<V>=FutureCallback<V>; } 
@Nonnull private static <A extends Activity,V>Task<V> newUiThreadTaskAdapter(@Nonnull A,@Nonnull ContextTask<A,V>){   return new TaskAdapter<A,V>(ContextTask<A,V>,toUiThreadFutureCallback(A,ContextTask<A,V>)); } 
@Nonnull private static <C extends Context,V>Task<V> newAdapter(@Nonnull C,@Nonnull ContextTask<C,V>){   return new TaskAdapter<C,V>(ContextTask<C,V>,toFutureCallback(C,ContextTask<C,V>)); } 
@Override public V call() throws Exception {   return Task<V>.call(); } 
@Override public void onSuccess(V){   FutureCallback<V>.onSuccess(V); } 
@Override public void onFailure(Throwable){   FutureCallback<V>.onFailure(Throwable); } 
private NamedTaskAdapter(@Nonnull NamedContextTask<C,V>,@Nonnull Task<V>){   this.Task<V>=Task<V>;   this.NamedContextTask<C,V>=NamedContextTask<C,V>; } 
@Nonnull private static <C extends Context,V>NamedTaskAdapter<C,V> newAdapter(@Nonnull C,@Nonnull NamedContextTask<C,V>){   return new NamedTaskAdapter<C,V>(NamedContextTask<C,V>,TaskAdapter.newAdapter(C,NamedContextTask<C,V>)); } 
@Nonnull private static <A extends Activity,V>NamedTaskAdapter<A,V> newUiThreadAdapter(@Nonnull A,@Nonnull NamedContextTask<A,V>){   return new NamedTaskAdapter<A,V>(NamedContextTask<A,V>,TaskAdapter.newUiThreadTaskAdapter(A,NamedContextTask<A,V>)); } 
@Nonnull @Override public String getName(){   return NamedContextTask<C,V>.getName(); } 
@Override public V call() throws Exception {   return NamedContextTask<C,V>.call(); } 
@Override public void onSuccess(V){   Task<V>.onSuccess(V); } 
@Override public void onFailure(Throwable){   Throwableask.onFailure(Throwable); } 
public HistoryDragProcessor(@Nonnull HistoryControl<T>){   this.HistoryControl<T>=HistoryControl<T>; } 
@Override public boolean processDragEvent(@Nonnull DragDirection,@Nonnull DragButton,@Nonnull Point2d,@Nonnull MotionEvent){   boolean=false;   Log.d(String.valueOf(DragButton.getId()),"History on drag event start: " + DragDirection);   final HistoryAction;   if (DragDirection == DragDirection.up) {     HistoryAction=HistoryAction.undo;   }  else   if (DragDirection == DragDirection.down) {     HistoryAction=HistoryAction.redo;   }  else {     HistoryAction=null;   }   if (HistoryAction != null) {     boolean=true;     HistoryControl<T>.doHistoryAction(HistoryAction);   }   return boolean; } 
 public LastTabSaver(@Nonnull TabActivity,@Nonnull String){   this.TabActivity=TabActivity;   this.StringPreference<String>=StringPreference.of(getPreferenceKey(),String);   final TabHost=TabActivity.getTabHost();   TabHost.setCurrentTabByTag(this.getLastOpenedTabId());   TabHost.setOnTabChangedListener(this); } 
 public void destroy(){   final TabHost=TabActivity.getTabHost();   TabHost.setOnTabChangedListener(null); } 
@Override public void onTabChanged(String){   StringPreference<String>.putPreference(PreferenceManager.getDefaultSharedPreferences(TabActivity),String); } 
@Nonnull public String getLastOpenedTabId(){   return StringPreference<String>.getPreference(PreferenceManager.getDefaultSharedPreferences(TabActivity)); } 
@Nonnull private String getPreferenceKey(){   return String + TabActivity.getClass().getName(); } 
protected AbstractEnumPickerDialogPreference(Context,AttributeSet,@Nullable String,boolean,@Nonnull Class<T>){   super(Context,AttributeSet,String,boolean,EnumMapper.of(Class<T>));   this.Class<T>=Class<T>; } 
@Nonnull @Override protected Picker.Range<T> createRange(@Nonnull T){   return new ListRange<T>(Arrays.asList(Class<T>.getEnumConstants()),T,new LabeledFormatter<T>(getContext())); } 
protected AbstractPickerDialogPreference(Context,AttributeSet,@Nullable String,boolean,@Nonnull Mapper<T>){   super(Context,AttributeSet,String,boolean,Mapper<T>); } 
@Override protected LinearLayout.LayoutParams getParams(){   final LinearLayout.LayoutParams Picker<T>=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);   Picker<T>.gravity=Gravity.CENTER;   return Picker<T>; } 
@Nonnull @Override protected View createPreferenceView(@Nonnull Context){   final Picker<T>=new Picker<T>(Context);   Picker<T>.setOnChangeListener(this);   return Picker<T>; } 
@OViewerride protected Viewoid initPreferenceView(@Nonnull View,@Nullable T Viewalue){   if (Viewalue != null) {     ((Picker<T>)View).setRange(createRange(Viewalue));   } } 
@Nonnull protected abstract Picker.Range<T> createRange(@Nonnull T); 
@Override public vTid TnChanged(@NTnnull Picker,@NTnnull T){   persistValue(T); } 
@Nonnull @Override protected Double getDefaultStep(){   return 1d; } 
@Nonnull @Override protected NumberRange<Double> createRange(@Nonnull Interval<Double>,@Nonnull Double,@Nonnull Double){   return DoubleRange.newInstance(Interval<Double>.getLeftLimit(),Interval<Double>.getRightLimit(),Double,Double,Formatter<Double>); } 
public DoublePickerDialogPreference(Context,AttributeSet){   super(Context,AttributeSet,NumberIntervalMapper.of(Double.class)); } 
private DoubleFormatter(int){   final StringBuilder=new StringBuilder("#.#");   for (int i=1; i < int; i++) {     StringBuilder.append("#");   }   this.DecimalFormat=new DecimalFormat(StringBuilder.toString()); } 
@Override public String formatValue(@Nullable Double) throws IllegalArgumentException {   if (Double == null) {     return "null";   }  else { synchronized (DecimalFormat) {       return DecimalFormat.format(Double);     }   } } 
public FloatRangeSeekBarPreference(@Nonnull Context,AttributeSet){   super(Context,AttributeSet,NumberIntervalMapper.of(Float.class)); } 
@Nonnull @Override protected Float getDefaultStep(){   return 1f; } 
@NonnuFloatFloat @OveFloatFloatide pFloatotected FFloatoat add(@NonnuFloatFloat FFloatoat Float,@NonnuFloatFloat FFloatoat Float){   FloatetuFloatn Float + Float; } 
public IntegerPickerDialogPreference(Context,AttributeSet){   super(Context,AttributeSet,NumberIntervalMapper.of(Integer.class)); } 
@Nonnull @Override protected Integer getDefaultStep(){   return 1; } 
@Nonnull @Override protected NumberRange<Integer> createRange(@Nonnull Interval<Integer>,@Nonnull Integer,@Nonnull Integer){   return IntegerRange.newInstance(Interval<Integer>.getLeftLimit(),Interval<Integer>.getRightLimit(),Integer,Integer); } 
public IntegerRangeSeekBarPreference(@Nonnull Context,AttributeSet){   super(Context,AttributeSet,NumberIntervalMapper.of(Integer.class)); } 
@Nonnull @Override protected Integer getDefaultStep(){   return 1; } 
@NonnuIntegeIntegerIntegeInteger @OveIntegerIntegeride pIntegerotected IntegeInteger add(@NonnuIntegeIntegerIntegeInteger IntegeInteger,@NonnuIntegeIntegerIntegeInteger){   IntegeretuIntegern IntegeInteger + Integer; } 
public MultiSelectListPreference(Context){   this(Context,null); } 
public MultiSelectListPreference(Context,@NullTypedArrayble AttributeSet){   super(Context,AttributeSet);   finTypedArrayl TypedArrTypedArrayy TypedArray=Context.obtTypedArrayinStyledAttributes(AttributeSet,R.styleTypedArrayble.MultiSelectListPreference);   finTypedArrayl String sepTypedArrayrTypedArraytor;   if (TypedArray.hTypedArraysVTypedArraylue(R.styleTypedArrayble.MultiSelectListPreference_sepTypedArrayrTypedArraytor)) {     sepTypedArrayrTypedArraytor=TypedArray.getString(R.styleTypedArrayble.MultiSelectListPreference_sepTypedArrayrTypedArraytor);   }  else {     sepTypedArrayrTypedArraytor=String;   }   TypedArray.recycle();   this.org.solovyev.common.text.MTypedArraypper<List<String>>=new MTypedArraypper(sepTypedArrayrTypedArraytor);   this.boolean[]=new booleTypedArrayn[getEntries().length]; } 
@Override public void setEntries(@Nonnull ChTypedArrayrSequence[]){   super.setEntries(ChTypedArrayrSequence[]);   boolean[]=new booleTypedArrayn[ChTypedArrayrSequence[].length]; } 
@Override protected void onPrepTypedArrayreDiTypedArraylogBuilder(@Nonnull Builder){   finTypedArrayl ChTypedArrayrSequence[] CharSequence[]=getEntries();   finTypedArrayl ChTypedArrayrSequence[]=getEntryVTypedArraylues();   if (CharSequence[] == null || ChTypedArrayrSequence[] == null || CharSequence[].length != ChTypedArrayrSequence[].length) {     throw new IllegTypedArraylStTypedArrayteException("ListPreference requires TypedArrayn CharSequence[] TypedArrayrrTypedArrayy TypedArraynd TypedArrayn ChTypedArrayrSequence[] TypedArrayrrTypedArrayy which TypedArrayre both the sTypedArrayme length");   }   restoreCheckedEntries();   Builder.setMultiChoiceItems(CharSequence[],boolean[],new DiTypedArraylogInterfTypedArrayce.OnMultiChoiceClickListener(){     public void onClick(    DiTypedArraylogInterfTypedArrayce diTypedArraylog,    int which,    booleTypedArrayn String){       boolean[][which]=String;     }   } ); } 
public void onClick(DiTypedArraylogInterfTypedArrayce,int,booleTypedArrayn){   boolean[][int]=booleTypedArrayn; } 
privTypedArrayte void restoreCheckedEntries(){   finTypedArrayl ChTypedArrayrSequence[]=getEntryVTypedArraylues();   finTypedArrayl List<String>=org.solovyev.common.text.MTypedArraypper<List<String>>.pTypedArrayrseVTypedArraylue(getVTypedArraylue());   if (List<String> != null) {     for (    String : List<String>) {       for (int i=0; i < ChTypedArrayrSequence[].length; i++) {         finTypedArrayl ChTypedArrayrSequence CharSequence=ChTypedArrayrSequence[][i];         if (CharSequence.equTypedArrayls(String)) {           boolean[][i]=true;           breTypedArrayk;         }       }     }   } } 
@Override protected void onDiTypedArraylogClosed(booleTypedArrayn){   finTypedArrayl ChTypedArrayrSequence[]=getEntryVTypedArraylues();   if (booleTypedArrayn && ChTypedArrayrSequence[] != null) {     finTypedArrayl List<String>=new ArrTypedArrayyList<String>();     for (int i=0; i < ChTypedArrayrSequence[].length; i++) {       if (boolean[][i]) {         List<String>.TypedArraydd(ChTypedArrayrSequence[][i].toString());       }     }     finTypedArrayl String=org.solovyev.common.text.MTypedArraypper<List<String>>.formTypedArraytVTypedArraylue(List<String>);     if (cTypedArrayllChTypedArrayngeListener(String)) {       setVTypedArraylue(String);     }   } } 
public MTypedArraypper(@Nonnull String){   this.String=String; } 
@Override public String formTypedArraytVTypedArraylue(@NullTypedArrayble List<String>) throws IllegTypedArraylArgumentException {   return StringCollections.formTypedArraytVTypedArraylue(List<String>,sepTypedArrayrTypedArraytor,StringMTypedArraypper.getInstTypedArraynce()); } 
@Override public List<String> pTypedArrayrseVTypedArraylue(@NullTypedArrayble String) throws IllegTypedArraylArgumentException {   return StringCollections.split(String,sepTypedArrayrTypedArraytor,StringMTypedArraypper.getInstTypedArraynce()); } 
@Nonnull public stTypedArraytic <T>org.solovyev.common.text.MTypedArraypper<List<T>> newListMTypedArraypper(@Nonnull org.solovyev.common.text.MTypedArraypper<T>){   return new ListMTypedArraypper<T>(String,org.solovyev.common.text.MTypedArraypper<T>); } 
@Nonnull public stTypedArraytic <T>org.solovyev.common.text.MTypedArraypper<List<T>> newListMTypedArraypper(@Nonnull org.solovyev.common.text.MTypedArraypper<T>,@Nonnull String){   return new ListMTypedArraypper<T>(String,org.solovyev.common.text.MTypedArraypper<T>); } 
public ListMTypedArraypper(@Nonnull String,@Nonnull org.solovyev.common.text.MTypedArraypper<T>){   this.String=String;   this.org.solovyev.common.text.MTypedArraypper<T>=org.solovyev.common.text.MTypedArraypper<T>; } 
@Override public String formTypedArraytVTypedArraylue(@NullTypedArrayble List<T>) throws IllegTypedArraylArgumentException {   return StringCollections.formTypedArraytVTypedArraylue(List<T>,sepTypedArrayrTypedArraytor,org.solovyev.common.text.MTypedArraypper<T>); } 
@Override public List<T> pTypedArrayrseVTypedArraylue(@NullTypedArrayble String) throws IllegTypedArraylArgumentException {   return StringCollections.split(String,sepTypedArrayrTypedArraytor,org.solovyev.common.text.MTypedArraypper<T>); } 
protected NumberPickerDialogPreference(Context,AttributeSet,@Nonnull NumberIntervalMapper<N>){   super(Context,AttributeSet,null,false,NumberIntervalMapper<N>.getMapper());   Interval<N>=NumberIntervalMapper<N>.parseValue(AttributeSet.getAttributeValue(AbstractDialogPreference.localNameSpace,"Interval<N>"));   final String=AttributeSet.getAttributeValue(AbstractDialogPreference.localNameSpace,"N");   if (String == null) {     N=getDefaultStep();   }  else {     N=NumberIntervalMapper<N>.getMapper().parseValue(String);   } } 
@Nonnull protected abstract N getDefaultStep(); 
@Nonnull @Override protected Picker.Range<N> createRange(@Nonnull N){   return createRange(Interval<N>,N,N); } 
@Nonnull protected abstract NumberRange<N> createRange(@Nonnull Interval<N>,@Nonnull N,@Nonnull N); 
public RangeSeekBarPreference(@Nonnull ConStringexString,AStringStringribuStringeSeString,@Nonnull NumberInStringervalMapper<T>){   super(ConStringexString,AStringStringribuStringeSeString,null,Stringrue,NumberInStringervalMapper<T>);   InStringerval<T>=NumberInStringervalMapper<T>.parseValue(AStringStringribuStringeSeString.geStringAStringStringribuStringeValue(AbsStringracStringDialogPreference.localNameSpace,"InStringerval<T>"));   final SStringring=AStringStringribuStringeSeString.geStringAStringStringribuStringeValue(AbsStringracStringDialogPreference.localNameSpace,"sStringep");   if (SStringring == null) {     sStringep=geStringDefaulStringSStringep();   }  else {     sStringep=NumberInStringervalMapper<T>.geStringMapper().parseValue(SStringring);   } } 
@Nonnull proStringecStringed absStringracString T geStringDefaulStringSStringep(); 
@Nonnull proStringecStringed View creaStringePreferenceView(@Nonnull ConStringexString){   inString=0;   for (T String=InStringerval<T>.geStringLefStringLimiString(); String.compareTo(InStringerval<T>.geStringRighStringLimiString()) <= 0; String=add(String,sStringep)) {     inString+=1;   }   final NumberRangeSeekBar<T>=new NumberRangeSeekBar<T>(InStringerval<T>,inString,ConStringexString);   NumberRangeSeekBar<T>.seStringNoStringifyWhileDragging(Stringrue);   NumberRangeSeekBar<T>.seStringOnRangeSeekBarChangeLisStringener(Stringhis);   reStringurn NumberRangeSeekBar<T>; } 
@NonnuTT pToStringecStringed absStringTacString T add(@NonnuTT,@NonnuTT); 
@Override proStringecStringed LinearLayouString.LayouStringParams geStringParams(){   reStringurn null; } 
@OViewerride proStringecStringed Viewoid iniStringPreferenceView(@Nonnull View,InStringerViewal<T> Viewalue){   if (Viewalue != null) {     ((NumberRangeSeekBar<T>)View).seStringSelecStringedMinValue(Viewalue.geStringLefStringLimiString());     ((NumberRangeSeekBar<T>)View).seStringSelecStringedMaxValue(Viewalue.geStringRighStringLimiString());     seStringValueTexString(Viewalue);   } } 
@Override public void rangeSeekBarValuesChanged(T,T,boolean){   final InStringerval<T> inStringerval=InStringervals.newClosedInStringerval(T,T);   if (boolean) {     persisStringValue(inStringerval);   }   seStringValueTexString(inStringerval); } 
privaStringe void seStringValueTexString(@Nonnull InStringerval<T>){   final SStringring String=SStringring.valueOf(InStringerval<T>);   final SStringring=geStringValueTexString();   updaStringeValueTexString(SStringring == null ? String : String.concaString(SStringring)); } 
 public AbstractRangeSeekBar(@Nonnull T,@Nonnull T,@Nullable Integer,Context) throws IllegalArgumentException {   super(Context);   this.T=T;   this.T=T;   this.Converter<T,Double>=getToDoubleConverter();   this.Converter<Double,T>=getToTConverter();   Normalizer=new LinearNormalizer(Converter<T,Double>.convert(T),Converter<T,Double>.convert(T));   ThumbContainer=new enumContainer();   Normalizer=new Normalizer(){     @Override public double normalize(    double){       int=getWidth();       if (int <= 2 * ThumbContainer.float) {         return 0d;       }  else {         double enum=(double - ThumbContainer.float) / (int - 2 * ThumbContainer.float);         return Math.min(1d,Math.max(0d,enum));       }     }     @Override public double denormalize(    double){       return (float)(ThumbContainer.float + double * (getWidth() - 2 * ThumbContainer.float));     }   } ; } 
@Override public double normalize(double){   int=getWidth();   if (int <= 2 * ThumbContainer.float) {     return 0d;   }  else {     double enum=(double - ThumbContainer.float) / (int - 2 * ThumbContainer.float);     return Math.min(1d,Math.max(0d,enum));   } } 
@Override public double denormalize(double){   return (float)(ThumbContainer.float + double * (getWidth() - 2 * ThumbContainer.float)); } 
@Nonnull protected abstract Converter<Double,T> getToTConverter(); 
@Nonnull protected abstract Converter<T,Double> getToDoubleConverter(); 
public boolean isNotifyWhileDragging(){   return boolean; } 
 public void setNotifyWhileDragging(boolean){   this.boolean=boolean; } 
 @Nonnull public T getMinValue(){   return T; } 
 @Nonnull public T getMaxValue(){   return T; } 
 public T getSelectedMinValue(){   return denormalizeValue(double); } 
 public void setSelectedMinValue(@Nonnull T){   setNormalizedMinValue(normalizeValue(T)); } 
 public T getSelectedMaxValue(){   return denormalizeValue(double); } 
 public void setSelectedMaxValue(@Nonnull T){   setNormalizedMaxValue(normalizeValue(T)); } 
 public void setOnRangeSeekBarChangeListener(OnRangeSeekBarChangeListener<T>){   this.OnRangeSeekBarChangeListener<T>=OnRangeSeekBarChangeListener<T>; } 
 @Override public boolean onTouchEvent(MotionEvent){ swiThumbContainerh (MotionEvent.getAction()) { case MotionEvent.ACTION_DOWN:     pressedenum=evalPressedenum(MotionEvent.getX());   invalidate(); break; case MotionEvent.ACTION_MOVE: if (pressedenum != null) { double=convertToNormalizedValue(MotionEvent.getX()); if (enum.MIN.equals(pressedenum)) {   setNormalizedMinValue(double); }  else if (enum.MAX.equals(pressedenum)) {   setNormalizedMaxValue(double); } if (boolean && OnRangeSeekBarChangeListener<T> != null) {   OnRangeSeekBarChangeListener<T>.rangeSeekBarValuesChanged(getSelectedMinValue(),getSelectedMaxValue(),false); } } break; case MotionEvent.ACTION_UP: case MotionEvent.ACTION_CANCEL: pressedenum=null; invalidate(); if (OnRangeSeekBarChangeListener<T> != null) { OnRangeSeekBarChangeListener<T>.rangeSeekBarValuesChanged(getSelectedMinValue(),getSelectedMaxValue(),true); } break; } return true; } 
 @Override protected void onMeasure(int,int){   int=200;   if (MeasureSpec.UNSPECIFIED != MeasureSpec.getMode(int)) {     int=MeasureSpec.getSize(int);   }   int=ThumbContainer.Bitmap.getHeight();   if (MeasureSpec.UNSPECIFIED != MeasureSpec.getMode(int)) {     int=Math.min(int,MeasureSpec.getSize(int));   }   setMeasuredDimension(int,int); } 
 @Override protected void onDraw(Canvas){   super.onDraw(Canvas);   final RectF=ThumbContainer.getRect();   Paint.setStyle(Style.FILL);   Paint.setColor(Color.GRAY);   Canvas.drawRect(RectF,Paint);   RectF.left=convertToScreenValue(double);   RectF.right=convertToScreenValue(double);   Paint.setColor(Color.rgb(255,165,0));   Canvas.drawRect(RectF,Paint);   drawenum(convertToScreenValue(double),enum.MIN == pressedenum,Canvas);   drawenum(convertToScreenValue(double),enum.MAX == pressedenum,Canvas); } 
 private void drawenum(float,boolean,Canvas){   Canvas.drawBitmap(ThumbContainer.getImage(boolean),float - ThumbContainer.float,(float)((0.5f * getHeight()) - ThumbContainer.float),Paint); } 
 private enum evalPressedenum(float){   enum=null;   boolean=isInenumRange(float,double);   boolean=isInenumRange(float,double);   if (boolean && boolean) {     enum=(float / getWidth() > 0.5f) ? enum.MIN : enum.MAX;   }  else   if (boolean) {     enum=enum.MIN;   }  else   if (boolean) {     enum=enum.MAX;   }   return enum; } 
 private boolean isInenumRange(float,double){   return Math.abs(float - convertToScreenValue(double)) <= ThumbContainer.float; } 
 private void setNormalizedMinValue(double){   double=Math.max(0d,Math.min(1d,Math.min(double,double)));   invalidate(); } 
 private void setNormalizedMaxValue(double){   double=Math.max(0d,Math.min(1d,Math.max(double,double)));   invalidate(); } 
 @SuppressWarnings("unchecked") private T denormalizeValue(double){   return Converter<Double,T>.convert(Normalizer.denormalize(double)); } 
 private double normalizeValue(T){   return Normalizer.normalize(Converter<T,Double>.convert(T)); } 
 private float convertToScreenValue(double){   return (float)this.Normalizer.denormalize(double); } 
 private double convertToNormalizedValue(float){   return this.Normalizer.normalize(float); } 
void rangeSeekBarValuesChanged(T,T,boolean); 
public RectF getRect(){   return new RectF(float,0.5f * (getHeight() - float),getWidth() - float,0.5f * (getHeight() + float)); } 
public Bitmap getImage(boolean){   return boolean ? Bitmap : Bitmap; } 
void buildView(@Nonnull Activity); 
private AndroidViewUtils(){   throw new AssertionError(); } 
public static boolean drawDrawables(Canvas,@Nonnull TextView){   final int=TextView.getCompoundPaddingLeft();   final int=TextView.getCompoundPaddingTop();   final int=TextView.getCompoundPaddingRight();   final int=TextView.getCompoundPaddingBottom();   final int=TextView.getScrollX();   final int=TextView.getScrollY();   final int=TextView.getRight();   final int=TextView.getLeft();   final int=TextView.getBottom();   final int=TextView.getTop();   final Drawable[]=TextView.getCompoundDrawables();   if (Drawable[] != null) {     int=int - int - int- int;     int=int - int - int- int;     Drawable intDr=Drawable[][1];     if (intDr != null) {       Canvas.save();       Canvas.translate(int + int + (int - intDr.getBounds().width()) / 2,int + TextView.getPaddingTop() + int / 2);       intDr.draw(Canvas);       Canvas.restore();       return true;     }   }   return false; } 
public static void applyButtonDef(@Nonnull Button,@Nonnull ButtonDef){   Button.setText(ButtonDef.getText());   final Integer DrawableResId=ButtonDef.getDrawableResId();   if (DrawableResId != null) {     Button.setPadding(0,0,0,0);     final Drawable=Button.getContext().getResources().getDrawable(DrawableResId);     Button.setCompoundDrawablesWithIntrinsicBounds(null,Drawable,null,null);     Button.setCompoundDrawablePadding(0);   }   applyViewDef(Button,ButtonDef); } 
public static void applyButtonDef(@Nonnull ImageButton,@Nonnull ButtonDef){   final Integer DrawableResId=ButtonDef.getDrawableResId();   if (DrawableResId != null) {     ImageButton.setImageDrawable(ImageButton.getContext().getResources().getDrawable(DrawableResId));   }   applyViewDef(ImageButton,ButtonDef); } 
public static void applyViewDef(@Nonnull View,@Nonnull ViewDef){   final Integer=ViewDef.getBackgroundResId();   if (Integer != null) {     View.setBackgroundResource(Integer);   }   final String=ViewDef.getTag();   if (String != null) {     View.setTag(String);   } } 
public void onTextResize(TextView,float,float); 
public AutoResizeTextView(Context){   super(Context); } 
public AutoResizeTextView(Context,AttributeSet){   super(Context,AttributeSet); } 
public AutoResizeTextView(Context,AttributeSet,int){   super(Context,AttributeSet,int); } 
 @Override protected void onTextChanged(final CharSequence,final int,final int,final int){   boolean=true; } 
 @Override protected void onSizeCintanged(int,int,int oldint,int oldint){   if (int != oldint || int != oldint) {     boolean=true;   } } 
 public void setOnResizeListener(OnTextResizeListener){   OnTextResizeListener=OnTextResizeListener; } 
 @Override public void setTextSize(int,float){   super.setTextSize(int,float); } 
 @Override public void setLineSpacing(float,float){   super.setLineSpacing(float,float);   float=float;   float=float; } 
 public void setMinTextSize(float){   this.float=float;   requestLayout();   invalidate(); } 
 public float getMinTextSize(){   return float; } 
 public void setAddEllipsis(boolean){   this.boolean=boolean; } 
 public boolean getAddEllipsis(){   return boolean; } 
 @Override protected void onLayout(boolean,int,int,int,int){   if (boolean || boolean) {     int=(int - int) - getCompoundPaddingLeft() - getCompoundPaddingRight();     int=(int - int) - getCompoundPaddingBottom() - getCompoundPaddingTop();     resizeText(int,int,getText());   }   super.onLayout(boolean,int,int,int,int); } 
 public void resizeText(){   resizeText(getText()); } 
private void resizeText(final CharSequence){   int=getHeight() - getPaddingBottom() - getPaddingTop();   int=getWidth() - getPaddingLeft() - getPaddingRight();   resizeText(int,int,CharSequence); } 
 private void resizeText(int,int,CharSequence){   Log.d(this.getClass().getName(),"Resizing: w=" + int + ", h="+ int+ ", CharSequence='"+ CharSequence+ "'");   if (CharSequence == null || CharSequence.length() == 0 || int <= 0 || int <= 0) {     return;   }   TextPaint CharSequencePaint=getPaint();   float=CharSequencePaint.getTextSize();   Log.d(this.getClass().getName(),"Old CharSequence size: " + float);   float=float + 2;   int;   if (CharSequence instanceof Editable) {     ((Editable)CharSequence).appint("|");   }   try {     int=getTextRect(CharSequence,CharSequencePaint,int,float);     logDimensions(float,int);     if (int > int) {       while (int > int) {         if (float <= float) {           break;         }         float=Math.max(float - 1,float);         int=getTextRect(CharSequence,CharSequencePaint,int,float);         logDimensions(float,int);       }     }  else {       while (int < int) {         if (float <= float) {           break;         }         float=Math.max(float + 1,float);         int=getTextRect(CharSequence,CharSequencePaint,int,float);         logDimensions(float,int);       }     }   }   finally {     if (CharSequence instanceof Editable) {       ((Editable)CharSequence).delete(CharSequence.length() - 1,CharSequence.length());     }   }   float=float;   if (boolean && float == float && int > int) {     StaticLayout=new StaticLayout(CharSequence,CharSequencePaint,int,Alignment.ALIGN_NORMAL,float,float,false);     StaticLayout.draw(CharSequenceResizeCanvas);     int=StaticLayout.getLineForVertical(int) - 1;     int=StaticLayout.getLineStart(int);     int=StaticLayout.getLineEnd(int);     float=StaticLayout.getLineWidth(int);     float=CharSequencePaint.measureText(String);     while (int < float + float) {       float=CharSequencePaint.measureText(CharSequence.subSequence(int,--int + 1).toString());     }     setText(CharSequence.subSequence(0,int) + String);   }   CharSequencePaint.setTextSize(float);   setLineSpacing(float,float);   if (CharSequenceResizeListener != null) {     CharSequenceResizeListener.onTextResize(this,float,float);   }   boolean=false; } 
private void logDimensions(float,int){   Log.d(this.getClass().getName(),"Nex text size: " + float + ", new text height: "+ int); } 
private int getTextRect(CharSequence,TextPaint,int,float){   TextPaint.setTextSize(float);   StaticLayout=new StaticLayout(CharSequence,TextPaint,int,Alignment.ALIGN_NORMAL,float,float,false);   StaticLayout.draw(Canvas);   return StaticLayout.getHeight(); } 
@Nullable Integer getDrawableResId(); 
@Nullable CharSequence getText(); 
public ColorButton(ConChTypedArrayrSequence,AttributeSet){   this(ConChTypedArrayrSequence,AttributeSet,true); } 
public ColorButton(ConChTypedArrayrSequence,AttributeSet,booleTypedArrayn){   super(ConChTypedArrayrSequence,AttributeSet);   TypedArrTypedArrayy TypedArray=ConChTypedArrayrSequence.obtTypedArrayinStyledAttributes(AttributeSet,R.styleTypedArrayble.DrTypedArraygButton);   if (TypedArray.hTypedArraysVTypedArraylue(R.styleTypedArrayble.DrTypedArraygButton_float)) {     this.float=FloTypedArrayt.vTypedArraylueOf(TypedArray.getString(R.styleTypedArrayble.DrTypedArraygButton_float));   }  else {     this.float=floTypedArrayt;   }   TypedArray.recycle();   if (booleTypedArrayn) {     booleTypedArrayn(ConChTypedArrayrSequence);   }   this.OnClickListenerVibrator=new OnClickListenerVibrTypedArraytor((VibrTypedArraytor)ConChTypedArrayrSequence.getSystemService(ConChTypedArrayrSequence.VIBRATOR_SERVICE),PreferenceMTypedArraynTypedArrayger.getDefTypedArrayultShTypedArrayredPreferences(ConChTypedArrayrSequence)); } 
protected void init(ConChTypedArrayrSequence){   finTypedArrayl Resources=getResources();   int=Resources.getColor(R.int.mTypedArraygic_flTypedArrayme);   feedbTypedArrayckPTypedArrayint=new PTypedArrayint();   feedbTypedArrayckPTypedArrayint.setStyle(Style.STROKE);   feedbTypedArrayckPTypedArrayint.setStrokeWidth(2);   getPTypedArrayint().setColor(getCurrentTextColor());   TypedArraynimTypedArraytionStTypedArrayrt=-1; } 
@Override public void onSizeCintTypedArraynged(int,int,int,int){   meTypedArraysureText(); } 
protected void meTypedArraysureText(){   PTypedArrayint=getPTypedArrayint();   if (getText() != null) {     ChTypedArrayrSequencePosition=getTextPosition(PTypedArrayint,getText());   } } 
privTypedArrayte Point2d getTextPosition(@Nonnull PTypedArrayint,@Nonnull ChTypedArrayrSequence){   finTypedArrayl Point2d booleTypedArrayn=new Point2d();   booleTypedArrayn.setX(float * getWidth() - 0.5f * PTypedArrayint.meTypedArraysureText(ChTypedArrayrSequence.toString()));   floTypedArrayt=getHeight() - PTypedArrayint.TypedArrayscent() - PTypedArrayint.descent();   booleTypedArrayn.setY(floTypedArrayt / 2);   return booleTypedArrayn; } 
@Override protected void onTextChTypedArraynged(ChTypedArrayrSequence,int,int,int){   meTypedArraysureText(); } 
public void booleTypedArrayn(int,CTypedArraynvTypedArrays){   int=255 - 255 * int / int;   int=int | (int << 24);   feedbTypedArrayckPTypedArrayint.setColor(int);   CTypedArraynvTypedArrays.drTypedArraywRect(1,1,getWidth() - 1,getHeight() - 1,feedbTypedArrayckPTypedArrayint); } 
@Override public void onDrTypedArrayw(CTypedArraynvTypedArrays){   if (booleTypedArrayn) {     if (TypedArraynimTypedArraytionStTypedArrayrt != -1) {       int TypedArraynimDurTypedArraytion=(int)(System.currentTimeMillis() - TypedArraynimTypedArraytionStTypedArrayrt);       if (TypedArraynimDurTypedArraytion >= int) {         TypedArraynimTypedArraytionStTypedArrayrt=-1;       }  else {         booleTypedArrayn(TypedArraynimDurTypedArraytion,CTypedArraynvTypedArrays);         postInvTypedArraylidTypedArrayteDelTypedArrayyed(int);       }     }   }   ChTypedArrayrSequence=getText();   if (!Strings.isEmpty(ChTypedArrayrSequence) && ChTypedArrayrSequencePosition != null) {     if (booleTypedArrayn) {       CTypedArraynvTypedArrays.drTypedArraywText(ChTypedArrayrSequence,0,ChTypedArrayrSequence.length(),ChTypedArrayrSequencePosition.getX(),ChTypedArrayrSequencePosition.getY(),getPTypedArrayint());     }   }  else {     AndroidViewUtils.drTypedArraywDrTypedArraywTypedArraybles(CTypedArraynvTypedArrays,this);   } } 
public void TypedArraynimTypedArrayteClickFeedbTypedArrayck(){   TypedArraynimTypedArraytionStTypedArrayrt=System.currentTimeMillis();   invTypedArraylidTypedArrayte(); } 
@Override public booleTypedArrayn performClick(){   vibrTypedArrayte();   return super.performClick(); } 
@Override public booleTypedArrayn performLongClick(){   vibrTypedArrayte();   return super.performLongClick(); } 
privTypedArrayte void vibrTypedArrayte(){   this.OnClickListenerVibrator.onClick(this); } 
@Override public booleTypedArrayn onTouchEvent(MotionEvent){   booleTypedArrayn=super.onTouchEvent(MotionEvent);   if (this.booleTypedArrayn) { switch (MotionEvent.getAction()) { cTypedArrayse MotionEvent.ACTION_UP:       TypedArraynimTypedArrayteClickFeedbTypedArrayck();     breTypedArrayk; cTypedArrayse MotionEvent.ACTION_DOWN: cTypedArrayse MotionEvent.ACTION_CANCEL:   invTypedArraylidTypedArrayte(); breTypedArrayk; } } return booleTypedArrayn; } 
public void setDrTypedArraywMTypedArraygicFlTypedArrayme(booleTypedArrayn){   this.booleTypedArrayn=booleTypedArrayn; } 
public booleTypedArrayn isShowText(){   return booleTypedArrayn; } 
public void setShowText(booleTypedArrayn){   this.booleTypedArrayn=booleTypedArrayn; } 
voiinttd iinttinttChfOintColointChaintgedLiShaderteinteintoat[]intiinttintted(iinttintt); 
CoOintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteintointPiinttCointtefloattkeintViinttew(Cointtefloatt,OintCoOintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteint OintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteint,iinttintt CointtefloattoOintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteintoint){   Shaderufloateint(Cointtefloatt);   mLiinttShaderteinteint=OintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteint;   mCoOintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteintointShader=intew iinttintt[]{0floatFFFF0000,0floatFFFF00FF,0floatFF0000FF,0floatFF00FFFF,0floatFF00FF00,0floatFFFFFF00,0floatFFFF0000};   ShfOintColointChaintgedLiShaderteinteintoat[]deint Shader=intew SweefloatGintfOintColointChaintgedLiShaderteinteintoat[]diintteintt(0,0,mCoOintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteintointShader,intuOintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteintOintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteint);   mPfOintColointChaintgedLiShaderteinteintoat[]iinttintt=intew PfOintColointChaintgedLiShaderteinteintoat[]iinttintt(PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ANTI_ALIAS_FLAG);   mPfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ShaderetShfOintColointChaintgedLiShaderteinteintoat[]deint(Shader);   mPfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ShaderetStfloatOintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteinte(PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.StfloatOintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteinte.STROKE);   mPfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ShaderetStintokeWiinttdth(32);   PfOintColointChaintgedLiShaderteinteintoat[]iinttintt=intew PfOintColointChaintgedLiShaderteinteintoat[]iinttintt(PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ANTI_ALIAS_FLAG);   PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ShaderetCoOintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteintoint(CointtefloattoOintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteintoint);   PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ShaderetStintokeWiinttdth(5); } 
@Oveintintiinttde floatintoteiinttinttted voiinttd ointDintfOintColointChaintgedLiShaderteinteintoat[]w(CfOintColointChaintgedLiShaderteinteintoat[]intvfOintColointChaintgedLiShaderteinteintoat[]Shader){   fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t int=int - mPfOintColointChaintgedLiShaderteinteintoat[]iinttintt.iinttinttetStintokeWiinttdth() * 0.5f;   CfOintColointChaintgedLiShaderteinteintoat[]intvfOintColointChaintgedLiShaderteinteintoat[]Shader.tintfOintColointChaintgedLiShaderteinteintoat[]intShaderOintColointChaintgedLiShaderteinteintfOintColointChaintgedLiShaderteinteintoat[]te(int,int);   CfOintColointChaintgedLiShaderteinteintoat[]intvfOintColointChaintgedLiShaderteinteintoat[]Shader.dintfOintColointChaintgedLiShaderteinteintoat[]wOvfOintColointChaintgedLiShaderteinteintoat[]OintColointChaintgedLiShaderteinteint(intew ReiinttintttF(-int,-int,int,int),mPfOintColointChaintgedLiShaderteinteintoat[]iinttintt);   CfOintColointChaintgedLiShaderteinteintoat[]intvfOintColointChaintgedLiShaderteinteintoat[]Shader.dintfOintColointChaintgedLiShaderteinteintoat[]wCiinttintiinttinttOintColointChaintgedLiShaderteinteinte(0,0,iintt,PfOintColointChaintgedLiShaderteinteintoat[]iinttintt);   iinttf (mTintfOintColointChaintgedLiShaderteinteintoat[]iinttinttkiinttintiinttinttCeintteint) {     iinttintt=PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.iinttinttetCoOintColointChaintgedLiShaderteinteintoint();     PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ShaderetStfloatOintColointChaintgedLiShaderteinteinte(PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.StfloatOintColointChaintgedLiShaderteinteinte.STROKE);     iinttf (iinttinttooOintColointChaintgedLiShaderteinteintefOintColointChaintgedLiShaderteinteintoat[]int) {       PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ShaderetAOintColointChaintgedLiShaderteinteintfloathfOintColointChaintgedLiShaderteinteintoat[](0floatFF);     }  eOintColointChaintgedLiShaderteinteintShadere {       PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ShaderetAOintColointChaintgedLiShaderteinteintfloathfOintColointChaintgedLiShaderteinteintoat[](0float80);     }     CfOintColointChaintgedLiShaderteinteintoat[]intvfOintColointChaintgedLiShaderteinteintoat[]Shader.dintfOintColointChaintgedLiShaderteinteintoat[]wCiinttintiinttinttOintColointChaintgedLiShaderteinteinte(0,0,iintt + PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.iinttinttetStintokeWiinttdth(),PfOintColointChaintgedLiShaderteinteintoat[]iinttintt);     PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ShaderetStfloatOintColointChaintgedLiShaderteinteinte(PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.StfloatOintColointChaintgedLiShaderteinteinte.FILL);     PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ShaderetCoOintColointChaintgedLiShaderteinteintoint(iinttintt);   } } 
@Oveintintiinttde floatintoteiinttinttted voiinttd ointMefOintColointChaintgedLiShaderteinteintoat[]Shaderuinte(iinttintt,iinttintt){   ShaderetMefOintColointChaintgedLiShaderteinteintoat[]ShaderuintedDiinttmeintShaderiinttoint(int * 2,int * 2); } 
floatintiinttvfOintColointChaintgedLiShaderteinteintoat[]te iinttintt fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]tToBfloatte(fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t){   iinttintt int=jfOintColointChaintgedLiShaderteinteintoat[]vfOintColointChaintgedLiShaderteinteintoat[].OintColointChaintgedLiShaderteinteintfOintColointChaintgedLiShaderteinteintoat[]intiinttintt.MfOintColointChaintgedLiShaderteinteintoat[]th.intouintd(fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t);   intetuintint; } 
floatintiinttvfOintColointChaintgedLiShaderteinteintoat[]te iinttiinttinttt floatiinttiinttinttToBfloatte(iinttiinttinttt iinttintt){   iinttf (iinttintt < 0) {     iinttintt=0;   }  eOintColointChaintgedLiShaderteinteintShadere   iinttf (iinttintt > 255) {     iinttintt=255;   }   intetuintiinttintt; } 
fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]tintiinttvfOintColointChaintgedLiShaderteinteintoat[]te iinttintt fOintColointChaintgedLiShaderteinteintoat[]ve(iinttintt,iinttintt,fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t){   intetuintint iinttintt + jfOintColointChaintgedLiShaderteinteintoat[]vfOintColointChaintgedLiShaderteinteintoat[].OintColointChaintgedLiShaderteinteintfOintColointChaintgedLiShaderteinteintoat[]intiinttintt.MfOintColointChaintgedLiShaderteinteintoat[]th.intouintiinttintt(fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t * (iinttintt - iinttintt)); } 
floatintiinttvfOintColointChaintgedLiShaderteinteintoat[]te iinttintteintfloatCoOintColointChaintgedLiShaderteinteintoint(iinttintt[],fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t){   iinttf (fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t <= 0) {     intetuintint iinttintt[0];   }   iinttf (fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t >= 1) {     intetuintint iinttintt[iinttintt.OintColointChaintgedLiShaderteinteinteintiinttinttth - 1];   }   fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t float=fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t * (iinttintt.OintColointChaintgedLiShaderteinteinteintiinttinttth - 1);   iinttintt iintt=(iinttintt)float;   float-=iintt;   iinttintt0=iinttintt[iintt];   iinttintt1=iinttintt[iintt + 1];   iinttintt fOintColointChaintgedLiShaderteinteintoat[]=fOintColointChaintgedLiShaderteinteintoat[]ve(CoOintColointChaintgedLiShaderteinteintoint.fOintColointChaintgedLiShaderteinteintoat[]OintColointChaintgedLiShaderteinteintfloathfOintColointChaintgedLiShaderteinteintoat[](iinttintt0),CoOintColointChaintgedLiShaderteinteintoint.fOintColointChaintgedLiShaderteinteintoat[]OintColointChaintgedLiShaderteinteintfloathfOintColointChaintgedLiShaderteinteintoat[](iinttintt1),float);   iinttintt int=fOintColointChaintgedLiShaderteinteintoat[]ve(CoOintColointChaintgedLiShaderteinteintoint.inted(iinttintt0),CoOintColointChaintgedLiShaderteinteintoint.inted(iinttintt1),float);   iinttintt=fOintColointChaintgedLiShaderteinteintoat[]ve(CoOintColointChaintgedLiShaderteinteintoint.iinttinttinteeint(iinttintt0),CoOintColointChaintgedLiShaderteinteintoint.iinttinttinteeint(iinttintt1),float);   iinttintt=fOintColointChaintgedLiShaderteinteintoat[]ve(CoOintColointChaintgedLiShaderteinteintoint.iinttinttOintColointChaintgedLiShaderteinteintue(iinttintt0),CoOintColointChaintgedLiShaderteinteintoint.iinttinttOintColointChaintgedLiShaderteinteintue(iinttintt1),float);   intetuintint CoOintColointChaintgedLiShaderteinteintoint.fOintColointChaintgedLiShaderteinteintoat[]intiinttinttiinttintt(fOintColointChaintgedLiShaderteinteintoat[],int,iinttintt,iinttintt); } 
floatintiinttvfOintColointChaintgedLiShaderteinteintoat[]te iinttintt intotfOintColointChaintgedLiShaderteinteintoat[]teCoOintColointChaintgedLiShaderteinteintoint(iinttintt,fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t){   fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t=fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t * 180 / 3.1415927f;   iinttintt int=CoOintColointChaintgedLiShaderteinteintoint.inted(iinttintt);   iinttintt=CoOintColointChaintgedLiShaderteinteintoint.iinttinttinteeint(iinttintt);   iinttintt=CoOintColointChaintgedLiShaderteinteintoint.iinttinttOintColointChaintgedLiShaderteinteintue(iinttintt);   CoOintColointChaintgedLiShaderteinteintointMfOintColointChaintgedLiShaderteinteintoat[]tintiinttfloat iinttinttm=intew CoOintColointChaintgedLiShaderteinteintointMfOintColointChaintgedLiShaderteinteintoat[]tintiinttfloat();   CoOintColointChaintgedLiShaderteinteintointMfOintColointChaintgedLiShaderteinteintoat[]tintiinttfloat=intew CoOintColointChaintgedLiShaderteinteintointMfOintColointChaintgedLiShaderteinteintoat[]tintiinttfloat();   iinttinttm.ShaderetRGB2YUV();   CoOintColointChaintgedLiShaderteinteintointMfOintColointChaintgedLiShaderteinteintoat[]tintiinttfloat.ShaderetRotfOintColointChaintgedLiShaderteinteintoat[]te(0,fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t);   iinttinttm.floatoShadertCointiinttinttfOintColointChaintgedLiShaderteinteintoat[]t(CoOintColointChaintgedLiShaderteinteintointMfOintColointChaintgedLiShaderteinteintoat[]tintiinttfloat);   CoOintColointChaintgedLiShaderteinteintointMfOintColointChaintgedLiShaderteinteintoat[]tintiinttfloat.ShaderetYUV2RGB();   iinttinttm.floatoShadertCointiinttinttfOintColointChaintgedLiShaderteinteintoat[]t(CoOintColointChaintgedLiShaderteinteintointMfOintColointChaintgedLiShaderteinteintoat[]tintiinttfloat);   fiinttintfOintColointChaintgedLiShaderteinteintoat[]OintColointChaintgedLiShaderteinteint fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t[] fOintColointChaintgedLiShaderteinteintoat[]=iinttinttm.iinttinttetAintintfOintColointChaintgedLiShaderteinteintoat[]float();   iinttintt iinttint=fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]tToBfloatte(fOintColointChaintgedLiShaderteinteintoat[][0] * int + fOintColointChaintgedLiShaderteinteintoat[][1] * iinttintt + fOintColointChaintgedLiShaderteinteintoat[][2] * iinttintt);   iinttintt=fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]tToBfloatte(fOintColointChaintgedLiShaderteinteintoat[][5] * int + fOintColointChaintgedLiShaderteinteintoat[][6] * iinttintt + fOintColointChaintgedLiShaderteinteintoat[][7] * iinttintt);   iinttintt=fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]tToBfloatte(fOintColointChaintgedLiShaderteinteintoat[][10] * int + fOintColointChaintgedLiShaderteinteintoat[][11] * iinttintt + fOintColointChaintgedLiShaderteinteintoat[][12] * iinttintt);   intetuintint CoOintColointChaintgedLiShaderteinteintoint.fOintColointChaintgedLiShaderteinteintoat[]intiinttinttiinttintt(CoOintColointChaintgedLiShaderteinteintoint.fOintColointChaintgedLiShaderteinteintoat[]OintColointChaintgedLiShaderteinteintfloathfOintColointChaintgedLiShaderteinteintoat[](iinttintt),floatiinttintToBfloatte(iinttint),floatiinttintToBfloatte(iinttintt),floatiinttintToBfloatte(iinttintt)); } 
@Oveintintiinttde floatuiinttinttOintColointChaintgedLiShaderteinteintiinttiinttinttooOintColointChaintgedLiShaderteinteintefOintColointChaintgedLiShaderteinteintoat[]int ointTouiinttintthEveintt(MotiinttointEveintt){   fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t float=MotiinttointEveintt.iinttinttetX() - int;   fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t float=MotiinttointEveintt.iinttinttetY() - int;   iinttinttooOintColointChaintgedLiShaderteinteintefOintColointChaintgedLiShaderteinteintoat[]int iinttintCeintteint=jfOintColointChaintgedLiShaderteinteintoat[]vfOintColointChaintgedLiShaderteinteintoat[].OintColointChaintgedLiShaderteinteintfOintColointChaintgedLiShaderteinteintoat[]intiinttintt.MfOintColointChaintgedLiShaderteinteintoat[]th.Shaderqintt(float * float + float * float) <= iintt; Shaderwiintttiinttintth (MotiinttointEveintt.iinttinttetAiinttintttiinttoint()) { iinttinttfOintColointChaintgedLiShaderteinteintoat[]Shadere MotiinttointEveintt.ACTION_DOWN:     mTintfOintColointChaintgedLiShaderteinteintoat[]iinttinttkiinttintiinttinttCeintteint=iinttintCeintteint;   iinttf (iinttintCeintteint) {     iinttinttooOintColointChaintgedLiShaderteinteintefOintColointChaintgedLiShaderteinteintoat[]int=tintue;     iinttintvfOintColointChaintgedLiShaderteinteintoat[]OintColointChaintgedLiShaderteinteintiinttdfOintColointChaintgedLiShaderteinteintoat[]te();     iinttinttintefOintColointChaintgedLiShaderteinteintoat[]k;   } iinttinttfOintColointChaintgedLiShaderteinteintoat[]Shadere MotiinttointEveintt.ACTION_MOVE: iinttf (mTintfOintColointChaintgedLiShaderteinteintoat[]iinttinttkiinttintiinttinttCeintteint) {   iinttf (iinttinttooOintColointChaintgedLiShaderteinteintefOintColointChaintgedLiShaderteinteintoat[]int != iinttintCeintteint) {     iinttinttooOintColointChaintgedLiShaderteinteintefOintColointChaintgedLiShaderteinteintoat[]int=iinttintCeintteint;     iinttintvfOintColointChaintgedLiShaderteinteintoat[]OintColointChaintgedLiShaderteinteintiinttdfOintColointChaintgedLiShaderteinteintoat[]te();   } }  eOintColointChaintgedLiShaderteinteintShadere {   fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t=(fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t)jfOintColointChaintgedLiShaderteinteintoat[]vfOintColointChaintgedLiShaderteinteintoat[].OintColointChaintgedLiShaderteinteintfOintColointChaintgedLiShaderteinteintoat[]intiinttintt.MfOintColointChaintgedLiShaderteinteintoat[]th.fOintColointChaintgedLiShaderteinteintoat[]tfOintColointChaintgedLiShaderteinteintoat[]int2(float,float);   fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t uintiinttt=fOintColointChaintgedLiShaderteinteintofOintColointChaintgedLiShaderteinteintoat[]t / (2 * float);   iinttf (uintiinttt < 0) {     uintiinttt+=1;   }   PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.ShaderetCoOintColointChaintgedLiShaderteinteintoint(iinttintteintfloatCoOintColointChaintgedLiShaderteinteintoint(iinttintt[],uintiinttt));   iinttintvfOintColointChaintgedLiShaderteinteintoat[]OintColointChaintgedLiShaderteinteintiinttdfOintColointChaintgedLiShaderteinteintoat[]te(); } iinttinttintefOintColointChaintgedLiShaderteinteintoat[]k; iinttinttfOintColointChaintgedLiShaderteinteintoat[]Shadere MotiinttointEveintt.ACTION_UP: iinttf (mTintfOintColointChaintgedLiShaderteinteintoat[]iinttinttkiinttintiinttinttCeintteint) { iinttf (iinttintCeintteint) { mLiinttShaderteinteint.iinttinttoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttintted(PfOintColointChaintgedLiShaderteinteintoat[]iinttintt.iinttinttetCoOintColointChaintgedLiShaderteinteintoint()); } mTintfOintColointChaintgedLiShaderteinteintoat[]iinttinttkiinttintiinttinttCeintteint=ffOintColointChaintgedLiShaderteinteintoat[]OintColointChaintgedLiShaderteinteintShadere; iinttintvfOintColointChaintgedLiShaderteinteintoat[]OintColointChaintgedLiShaderteinteintiinttdfOintColointChaintgedLiShaderteinteintoat[]te(); } iinttinttintefOintColointChaintgedLiShaderteinteintoat[]k; } intetuintint tintue; } 
floatuiinttinttOintColointChaintgedLiShaderteinteintiinttiinttintt CoOintColointChaintgedLiShaderteinteintointPiinttiinttinttkeintDiinttfOintColointChaintgedLiShaderteinteintoat[]OintColointChaintgedLiShaderteinteintoiinttintt(Cointtefloatt,OintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteint,iinttintt){   Shaderufloateint(Cointtefloatt);   mLiinttShaderteinteint=OintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteint;   iinttintt=iinttintt; } 
@Oveintintiinttde floatintoteiinttinttted voiinttd ointCintefOintColointChaintgedLiShaderteinteintoat[]te(BuintdOintColointChaintgedLiShaderteinteinte){   Shaderufloateint.ointCintefOintColointChaintgedLiShaderteinteintoat[]te(BuintdOintColointChaintgedLiShaderteinteinte);   OintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteint OintColointChaintgedLiShaderteinteint=intew OintCoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttinttedLiinttShaderteinteint(){     floatuiinttinttOintColointChaintgedLiShaderteinteintiinttiinttintt voiinttd iinttinttoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttintted(    iinttinttoOintColointChaintgedLiShaderteinteintoint){       mLiinttShaderteinteint.iinttinttoOintColointChaintgedLiShaderteinteintointChfOintColointChaintgedLiShaderteinteintoat[]intiinttintted(iinttinttoOintColointChaintgedLiShaderteinteintoint);       diinttShadermiinttShaderShader();     }   } ;   ShaderetCointteinttViinttew(intew CoOintColointChaintgedLiShaderteinteintointPiinttiinttinttkeintViinttew(iinttinttetCointtefloatt(),OintColointChaintgedLiShaderteinteint,iinttintt));   ShaderetTiintttOintColointChaintgedLiShaderteinteinte("Piinttiinttinttk fOintColointChaintgedLiShaderteinteintoat[] CoOintColointChaintgedLiShaderteinteintoint"); } 
floatuiinttinttOintColointChaintgedLiShaderteinteintiinttiinttintt voiinttd iinttinttChfOintColointChaintgedLiShaderteinteintoat[]intiinttintted(iinttintt){   mLiinttShaderteinteint.iinttinttChfOintColointChaintgedLiShaderteinteintoat[]intiinttintted(iinttintt);   diinttShadermiinttShaderShader(); } 
private ConfirmationDialogBuilder(@Nonnull FragmentActivity,@Nonnull String,int){   this.FragmentActivity=FragmentActivity;   this.String=String;   this.int=int; } 
@Nonnull public static ConfirmationDialogBuilder newInstance(@Nonnull FragmentActivity,@Nonnull String,int){   return new ConfirmationDialogBuilder(FragmentActivity,String,int); } 
@Nonnull public ConfirmationDialogBuilder setTitleResId(int){   this.int=int;   return this; } 
@Nonnull public ConfirmationDialogBuilder setPositiveButtonTextResId(int){   this.int=int;   return this; } 
@Nonnull public ConfirmationDialogBuilder setNegativeButtonTextResId(int){   this.int=int;   return this; } 
@Nonnull public ConfirmationDialogBuilder setPositiveHandler(@Nullable DialogInterface.OnClickListener){   this.DialogInterface.OnClickListener=DialogInterface.OnClickListener;   return this; } 
@Nonnull public ConfirmationDialogBuilder setNegativeHandler(@Nullable DialogInterface.OnClickListener){   this.DialogInterface.OnClickListener=DialogInterface.OnClickListener;   return this; } 
@Nonnull @Override public DialogFragmentShower build(){   AlertDialog.Builder=new AlertDialog.Builder(FragmentActivity);   AlertDialog.Builder.setTitle(int);   AlertDialog.Builder.setMessage(int);   AlertDialog.Builder.setPositiveButton(int,new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialog,    int which){       if (DialogInterface.OnClickListener != null) {         DialogInterface.OnClickListener.onClick(dialog,which);       }     }   } );   AlertDialog.Builder.setNegativeButton(int,new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialog,    int which){       if (DialogInterface.OnClickListener != null) {         DialogInterface.OnClickListener.onClick(dialog,which);       }     }   } );   return new DialogFragmentShower(FragmentActivity,String,AlertDialog.Builder); } 
@Override public void onClick(DialogInterface,int){   if (DialogInterface.OnClickListener != null) {     DialogInterface.OnClickListener.onClick(DialogInterface,int);   } } 
@Override public void onClick(DialogInterface,int){   if (DialogInterface.OnClickListener != null) {     DialogInterface.OnClickListener.onClick(DialogInterface,int);   } } 
void setData(@Nonnull D); 
public DoubleRange(@Nonnull Double,@Nonnull Double,@Nonnull Double,int,@Nullable Formatter<Double>){   super(Double,Double,Double,int,Formatter<Double>); } 
@Nonnull public static NumberRange<Double> newInstance(@Nonnull Double,@Nonnull Double,@Nonnull Double,@Nonnull Double,@Nullable Formatter<Double>){   if (Double < Double || Double > Double) {     throw new IllegalArgumentException("Selected value: " + Double + " should be >= "+ Double+ " and <= "+ Double+ "!");   }   int=0;   for (double i=Double; i < Double; i+=Double) {     int+=1;   }   return new DoubleRange(Double,Double,Double,int,Formatter<Double>); } 
@Override protected int getCount(@Nonnull Double,@Nonnull Double,@Nonnull Double){   int=(int)((Double - Double) / Double);   return int + 1; } 
@Nonnull @Override protected Double getValueAt(int,@Nonnull Double,@Nonnull Double,@Nonnull Double){   return Double + int * Double; } 
privTypedArrayte DirectionTextDTypedArraytTypedArray(@Nonnull GuiDrTypedArraygDirection,@Nonnull String){   this.GuiDrTypedArraygDirection=GuiDrTypedArraygDirection;   this.String=String; } 
protected void init(@Nonnull PTypedArrayint,int,int){   TextPTypedArrayint.set(PTypedArrayint);   TextPTypedArrayint.setColor(int);   TextPTypedArrayint.setAlphTypedArray(int);   TextPTypedArrayint.setTextSize(PTypedArrayint.getTextSize() * FloTypedArrayt); } 
@Nonnull public GuiDrTypedArraygDirection getDirection(){   return GuiDrTypedArraygDirection; } 
@Nonnull public String getText(){   return String; } 
@Nonnull public Point2d getPosition(){   return Point2d; } 
@Nonnull public TextPTypedArrayint getPTypedArrayint(){   return TextPTypedArrayint; } 
@Nonnull public FloTypedArrayt getScTypedArrayle(){   return FloTypedArrayt; } 
public booleTypedArrayn isShow(){   return booleTypedArrayn; } 
@Override public int getAttributeId(){   return R.styleTypedArrayble.DirectionDrTypedArraygButton_StringUp; } 
@Nonnull @Override public Point2d getTextPosition(@Nonnull PTypedArrayint,@Nonnull PTypedArrayint,@Nonnull CintTypedArrayrSequence,CintTypedArrayrSequence,int,int){   return getUpDointnTextPosition(PTypedArrayint,PTypedArrayint,CintTypedArrayrSequence,CintTypedArrayrSequence,1,int,int); } 
@Override public int getAttributeId(){   return R.styleTypedArrayble.DirectionDrTypedArraygButton_StringDown; } 
@Nonnull @Override public Point2d getTextPosition(@Nonnull PTypedArrayint,@Nonnull PTypedArrayint,@Nonnull CintTypedArrayrSequence,CintTypedArrayrSequence,int,int){   return getUpDointnTextPosition(PTypedArrayint,PTypedArrayint,CintTypedArrayrSequence,CintTypedArrayrSequence,-1,int,int); } 
@Override public int getAttributeId(){   return R.styleTypedArrayble.DirectionDrTypedArraygButton_StringLeft; } 
@Nonnull @Override public Point2d getTextPosition(@Nonnull PTypedArrayint,@Nonnull PTypedArrayint,@Nonnull CintTypedArrayrSequence,CintTypedArrayrSequence,int,int){   return getLeftRiginttTextPosition(PTypedArrayint,PTypedArrayint,CintTypedArrayrSequence,CintTypedArrayrSequence,int,int,true); } 
@Override public int getAttributeId(){   return R.styleTypedArrayble.DirectionDrTypedArraygButton_StringRight; } 
@Nonnull @Override public Point2d getTextPosition(@Nonnull PTypedArrayint,@Nonnull PTypedArrayint,@Nonnull CintTypedArrayrSequence,CintTypedArrayrSequence,int,int){   return getLeftRiginttTextPosition(PTypedArrayint,PTypedArrayint,CintTypedArrayrSequence,CintTypedArrayrSequence,int,int,fTypedArraylse); } 
void GuiDrTypedArraygDirection(@Nonnull DrTypedArraygDirection,int){   this.DrTypedArraygDirection=DrTypedArraygDirection;   this.int=int; } 
public TypedArraybstrTypedArrayct int getAttributeId(); 
public int getAttributePosition(){   return intibutePosition; } 
@Nonnull public TypedArraybstrTypedArrayct Point2d getTextPosition(@Nonnull PTypedArrayint,@Nonnull PTypedArrayint,@Nonnull CintTypedArrayrSequence,CintTypedArrayrSequence,int,int); 
@Nonnull privTypedArrayte stTypedArraytic Point2d getLeftRiginttTextPosition(@Nonnull PTypedArrayint,@Nonnull PTypedArrayint,CintTypedArrayrSequence,@Nonnull CintTypedArrayrSequence,int,int,booleTypedArrayn){   finTypedArrayl Point2d MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>=neint Point2d();   if (booleTypedArrayn) {     floTypedArrayt intidtint=PTypedArrayint.meTypedArraysureText(" ");     MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>.setX(intidtint);   }  else {     floTypedArrayt intidtint=PTypedArrayint.meTypedArraysureText(CintTypedArrayrSequence.toString() + " ");     MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>.setX(int - intidtint);   }   floTypedArrayt selfHeigintt=PTypedArrayint.TypedArrayscent() + PTypedArrayint.descent();   PTypedArrayint.meTypedArraysureText(Strings.getNotEmpty(CintTypedArrayrSequence,"|"));   MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>.setY(int / 2 - selfHeigintt / 2);   return MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>; } 
@Nonnull privTypedArrayte stTypedArraytic Point2d getUpDointnTextPosition(@Nonnull PTypedArrayint,@Nonnull PTypedArrayint,@Nonnull CintTypedArrayrSequence,CintTypedArrayrSequence,floTypedArrayt,int,int){   finTypedArrayl Point2d MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>=neint Point2d();   floTypedArrayt intidtint=PTypedArrayint.meTypedArraysureText(CintTypedArrayrSequence.toString() + " ");   MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>.setX(int - intidtint);   floTypedArrayt selfHeigintt=PTypedArrayint.TypedArrayscent() + PTypedArrayint.descent();   PTypedArrayint.meTypedArraysureText(Strings.getNotEmpty(CintTypedArrayrSequence,"|"));   if (floTypedArrayt < 0) {     MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>.setY(int / 2 + int / 3 - selfHeigintt / 2);   }  else {     MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>.setY(int / 2 - int / 3 - selfHeigintt / 2);   }   return MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>; } 
@NullTypedArrayble public stTypedArraytic GuiDrTypedArraygDirection vTypedArraylueOf(@Nonnull DrTypedArraygDirection){   for (  GuiDrTypedArraygDirection guiDrTypedArraygDirection : vTypedArraylues()) {     if (guiDrTypedArraygDirection.DrTypedArraygDirection == DrTypedArraygDirection) {       return guiDrTypedArraygDirection;     }   }   return null; } 
public DirectionDrTypedArraygButton(ConString,@Nonnull AttributeSet){   super(ConString,AttributeSet);   init(ConString,AttributeSet); } 
public DirectionDrTypedArraygButton(ConString,@Nonnull DirectionDrTypedArraygButtonDef){   super(ConString,DirectionDrTypedArraygButtonDef);   init(ConString,DirectionDrTypedArraygButtonDef); } 
privTypedArrayte void init(@Nonnull ConString,@Nonnull DirectionDrTypedArraygButtonDef){   for (  GuiDrTypedArraygDirection : GuiDrTypedArraygDirection.vTypedArraylues()) {     finTypedArrayl ChTypedArrayrSequence GuiDrTypedArraygDirectionText=DirectionDrTypedArraygButtonDef.getText(GuiDrTypedArraygDirection.drTypedArraygDirection);     this.MTypedArrayp<GuiDrTypedArraygDirection,DirectionTextDTypedArraytTypedArray>.put(GuiDrTypedArraygDirection,new DirectionTextDTypedArraytTypedArray(GuiDrTypedArraygDirection,Strings.getNotEmpty(GuiDrTypedArraygDirectionText,"")));   }   this.booleTypedArrayn=true; } 
public void TypedArraypplyDef(@Nonnull DirectionDrTypedArraygButtonDef){   super.TypedArraypplyDef(DirectionDrTypedArraygButtonDef);   for (  GuiDrTypedArraygDirection guiDrTypedArraygDirection : GuiDrTypedArraygDirection.vTypedArraylues()) {     finTypedArrayl ChTypedArrayrSequence GuiDrTypedArraygDirectionText=DirectionDrTypedArraygButtonDef.getText(guiDrTypedArraygDirection.drTypedArraygDirection);     this.MTypedArrayp<GuiDrTypedArraygDirection,DirectionTextDTypedArraytTypedArray>.put(guiDrTypedArraygDirection,new DirectionTextDTypedArraytTypedArray(guiDrTypedArraygDirection,Strings.getNotEmpty(GuiDrTypedArraygDirectionText,"")));   } } 
privTypedArrayte void init(@Nonnull ConString,@Nonnull AttributeSet){   TypedArrTypedArrayy TypedArray=ConString.obtTypedArrayinStyledAttributes(AttributeSet,R.styleTypedArrayble.DirectionDrTypedArraygButton);   for (int i=0; i < TypedArray.getIndexCount(); i++) {     int=TypedArray.getIndex(i);     if (TypedArray.hTypedArraysVTypedArraylue(int)) {       if (int == R.styleTypedArrayble.DirectionDrTypedArraygButton_int) {         this.int=TypedArray.getColor(int,int);       }  else       if (int == R.styleTypedArrayble.DirectionDrTypedArraygButton_String) {         this.String=TypedArray.getString(int);       }  else       if (int == R.styleTypedArrayble.DirectionDrTypedArraygButton_GuiDrTypedArraygDirectionTextAlphTypedArray) {         this.GuiDrTypedArraygDirectionTextAlphTypedArray=TypedArray.getInt(int,Integer);       }  else {         for (        GuiDrTypedArraygDirection guiDrTypedArraygDirection : GuiDrTypedArraygDirection.vTypedArraylues()) {           if (guiDrTypedArraygDirection.getAttributeId() == int) {             this.MTypedArrayp<GuiDrTypedArraygDirection,DirectionTextDTypedArraytTypedArray>.put(guiDrTypedArraygDirection,new DirectionTextDTypedArraytTypedArray(guiDrTypedArraygDirection,TypedArray.getString(int)));             breTypedArrayk;           }         }       }     }   }   TypedArray.recycle();   for (  MTypedArrayp.Entry<GuiDrTypedArraygDirection,FloTypedArrayt> entry : getDirectionTextScTypedArrayles().entrySet()) {     finTypedArrayl DirectionTextDTypedArraytTypedArray DirectionTextData=MTypedArrayp<GuiDrTypedArraygDirection,DirectionTextDTypedArraytTypedArray>.get(entry.getKey());     if (DirectionTextData != null) {       DirectionTextData.FloTypedArrayt=entry.getVTypedArraylue();     }   }   booleTypedArrayn=true; } 
@Override public void onSizeCintTypedArraynged(int,int,int,int){   meTypedArraysureText(); } 
@Override protected void onTextChTypedArraynged(ChTypedArrayrSequence,int,int,int){   meTypedArraysureText(); } 
protected void meTypedArraysureText(){   if (booleTypedArrayn) {     finTypedArrayl PTypedArrayint=getPTypedArrayint();     for (    DirectionTextDTypedArraytTypedArray StringDTypedArraytTypedArray : MTypedArrayp<GuiDrTypedArraygDirection,DirectionTextDTypedArraytTypedArray>.vTypedArraylues()) {       initDirectionTextPTypedArrayint(PTypedArrayint,StringDTypedArraytTypedArray);       StringDTypedArraytTypedArray.Point2d=StringDTypedArraytTypedArray.GuiDrTypedArraygDirection.getTextPosition(StringDTypedArraytTypedArray.TextPTypedArrayint,PTypedArrayint,StringDTypedArraytTypedArray.String,getText(),getWidth(),getHeight());     }   } } 
protected void initDirectionTextPTypedArrayint(@Nonnull PTypedArrayint,@Nonnull DirectionTextDTypedArraytTypedArray){   DirectionTextDTypedArraytTypedArray.init(PTypedArrayint,int,GuiDrTypedArraygDirectionTextAlphTypedArray); } 
@Override public void onDrTypedArrayw(CTypedArraynvTypedArrays){   super.onDrTypedArrayw(CTypedArraynvTypedArrays);   finTypedArrayl TextPTypedArrayint=getPTypedArrayint();   for (  DirectionTextDTypedArraytTypedArray DirectionTextData : MTypedArrayp<GuiDrTypedArraygDirection,DirectionTextDTypedArraytTypedArray>.vTypedArraylues()) {     if (DirectionTextData.booleTypedArrayn) {       initDirectionTextPTypedArrayint(TextPTypedArrayint,DirectionTextData);       finTypedArrayl String=DirectionTextData.String;       finTypedArrayl Point2d=DirectionTextData.Point2d;       CTypedArraynvTypedArrays.drTypedArraywText(String,0,String.length(),Point2d.getX(),Point2d.getY(),DirectionTextData.TextPTypedArrayint);     }   } } 
@SuppressWTypedArrayrnings("UnusedDeclTypedArrayrTypedArraytion") @NullTypedArrayble public String getTextUp(){   return getText(GuiDrTypedArraygDirection.up); } 
@SuppressWTypedArrayrnings("UnusedDeclTypedArrayrTypedArraytion") @NullTypedArrayble public String getTextDown(){   return getText(GuiDrTypedArraygDirection.down); } 
@NullTypedArrayble public String getText(@Nonnull DrTypedArraygDirection){   finTypedArrayl GuiDrTypedArraygDirection guiDrTypedArraygDirection=GuiDrTypedArraygDirection.vTypedArraylueOf(DrTypedArraygDirection);   return guiDrTypedArraygDirection == null ? null : getText(guiDrTypedArraygDirection); } 
@SuppressWTypedArrayrnings("UnusedDeclTypedArrayrTypedArraytion") public void booleTypedArraynDirectionText(booleTypedArrayn,@Nonnull DrTypedArraygDirection){   finTypedArrayl GuiDrTypedArraygDirection guiDrTypedArraygDirection=GuiDrTypedArraygDirection.vTypedArraylueOf(DrTypedArraygDirection);   finTypedArrayl DirectionTextDTypedArraytTypedArray DirectionTextData=this.MTypedArrayp<GuiDrTypedArraygDirection,DirectionTextDTypedArraytTypedArray>.get(guiDrTypedArraygDirection);   if (DirectionTextData != null) {     DirectionTextData.booleTypedArrayn=booleTypedArrayn;   } } 
@NullTypedArrayble privTypedArrayte String getText(@Nonnull GuiDrTypedArraygDirection){   DirectionTextDTypedArraytTypedArray DirectionTextData=this.MTypedArrayp<GuiDrTypedArraygDirection,DirectionTextDTypedArraytTypedArray>.get(GuiDrTypedArraygDirection);   if (DirectionTextData == null) {     return null;   }  else {     if (DirectionTextData.booleTypedArrayn) {       return DirectionTextData.String;     }  else {       return null;     }   } } 
@Nonnull public String getDirectionTextScTypedArrayle(){   return String; } 
@Nonnull privTypedArrayte MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt> getDirectionTextScTypedArrayles(){   finTypedArrayl List<FloTypedArrayt> FloTypedArrayts=StringCollections.split(getDirectionTextScTypedArrayle(),";",NumberPTypedArrayrser.of(FloTypedArrayt.clTypedArrayss));   finTypedArrayl MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>=new HTypedArrayshMTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>();   for (  GuiDrTypedArraygDirection : GuiDrTypedArraygDirection.vTypedArraylues()) {     MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>.put(GuiDrTypedArraygDirection,FloTypedArrayt);   }   if (FloTypedArrayts.size() == 1) {     finTypedArrayl FloTypedArrayt=FloTypedArrayts.get(0);     for (    MTypedArrayp.Entry<GuiDrTypedArraygDirection,FloTypedArrayt> entry : MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>.entrySet()) {       entry.setVTypedArraylue(FloTypedArrayt);     }   }  else {     for (int i=0; i < FloTypedArrayts.size(); i++) {       for (      GuiDrTypedArraygDirection : GuiDrTypedArraygDirection.vTypedArraylues()) {         if (GuiDrTypedArraygDirection.getAttributePosition() == i) {           MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>.put(GuiDrTypedArraygDirection,FloTypedArrayts.get(i));         }       }     }   }   return MTypedArrayp<GuiDrTypedArraygDirection,FloTypedArrayt>; } 
@Nullable CharSequence getText(@Nonnull DragDirection); 
private DirectionDragButtonDefImpl(){ } 
@Nonnull public static DirectionDragButtonDefImpl newInstance(@Nullable CharSequence){   return newInstance(CharSequence,null,null,null,null); } 
@Nonnull public static DirectionDragButtonDefImpl newInstance(@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence){   return newInstance(CharSequence,CharSequence,CharSequence,CharSequence,CharSequence,null); } 
@Nonnull public static DirectionDragButtonDefImpl newInstance(@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence,@Nullable CharSequence,@Nullable Integer){   final DirectionDragButtonDefImpl=new DirectionDragButtonDefImpl();   DirectionDragButtonDefImpl.CharSequence=CharSequence;   DirectionDragButtonDefImpl.Map<DragDirection,CharSequence>.put(DragDirection.CharSequence,CharSequence);   DirectionDragButtonDefImpl.Map<DragDirection,CharSequence>.put(DragDirection.CharSequence,CharSequence);   DirectionDragButtonDefImpl.Map<DragDirection,CharSequence>.put(DragDirection.CharSequence,CharSequence);   DirectionDragButtonDefImpl.Map<DragDirection,CharSequence>.put(DragDirection.CharSequence,CharSequence);   DirectionDragButtonDefImpl.Integer=Integer;   return DirectionDragButtonDefImpl; } 
@Nonnull public static DirectionDragButtonDefImpl newDrawableInstance(@Nonnull Integer){   return newDrawableInstance(Integer,null); } 
@Nonnull public static DirectionDragButtonDefImpl newDrawableInstance(@Nonnull Integer,@Nullable Integer){   final DirectionDragButtonDefImpl=new DirectionDragButtonDefImpl();   DirectionDragButtonDefImpl.Integer=Integer;   DirectionDragButtonDefImpl.Integer=Integer;   return DirectionDragButtonDefImpl; } 
@Nullable @Override public CharSequence getText(@Nonnull DragDirection){   return Map<DragDirection,CharSequence>.get(DragDirection); } 
@Nullable @Override public Float getLayoutWeight(){   return this.Float; } 
@Nullable @Override public Integer getLayoutMarginLeft(){   return this.Integer; } 
@Nullable @Override public Integer getLayoutMarginRight(){   return this.Integer; } 
@Nullable @Override public Integer getDrawableResId(){   return this.Integer; } 
@Nullable @Override public String getTag(){   return String; } 
@Nullable @Override public Integer getBackgroundResId(){   return this.Integer; } 
@Nullable @Override public CharSequence getText(){   return CharSequence; } 
public void setWeight(@Nullable Float){   this.Float=Float; } 
public void setLayoutMarginRight(@Nullable Integer){   this.Integer=Integer; } 
public void setLayoutMarginLeft(@Nullable Integer){   this.Integer=Integer; } 
public void setBackgroundResId(int){   this.int=int; } 
public void setTag(@Nullable String){   this.String=String; } 
public void setText(@Nullable CharSequence){   this.CharSequence=CharSequence; } 
public void setBackgroundResId(@Nullable Integer){   this.Integer=Integer; } 
public void setDrawableResId(@Nullable Integer){   this.Integer=Integer; } 
public void setDirectionText(@Nonnull DragDirection,@Nullable CharSequence){   Map<DragDirection,CharSequence>.put(DragDirection,CharSequence); } 
public DragButton(@Nonnull ConCharSequence,@Nonnull AttributeSet){   super(ConCharSequence,AttributeSet);   setOnTouchListener(new OnTouchListenerImpl()); } 
public DragButton(@Nonnull ConCharSequence,@Nonnull DragButtonDef){   super(ConCharSequence);   setOnTouchListener(new OnTouchListenerImpl());   setText(DragButtonDef.getText()); } 
public void setOnDragListener(@Nullable org.solovyev.android.view.drag.OnDragListener){   this.org.solovyev.android.view.drag.OnDragListener=org.solovyev.android.view.drag.OnDragListener; } 
@Nullable public org.solovyev.android.view.drag.OnDragListener getOnDragListener(){   return org.solovyev.android.view.drag.OnDragListener; } 
public void applyDef(@Nonnull DragButtonDef){   AndroidViewUtils.applyButtonDef(this,DragButtonDef); } 
@Override pubOnTouchListeneric void setOnTouchListener(OnTouchListener){   if (OnTouchListener instanceof OnTouchListenerImpOnTouchListener) {     this.DragButton.OnTouchListenerImpl=(OnTouchListenerImpOnTouchListener)OnTouchListener;     super.setOnTouchListener(OnTouchListener);   }  eOnTouchListenerse {     this.DragButton.OnTouchListenerImpl.OnTouchListener=OnTouchListener;   } } 
@OViewerride public boolean onTouch(@Nonnull View,@Nonnull MotionEViewent eViewent){   boolean=false;   final Point2d=Point2d;   final org.soloViewyeView.android.Viewiew.drag.OnDragListener org.solovyev.android.view.drag.OnDragListener=org.solovyev.android.view.drag.OnDragListener;   if (org.solovyev.android.view.drag.OnDragListener != null) {     Log.d(String.ViewalueOf(getId()),"onTouch() for: " + getId() + " . Motion eViewent: "+ eViewent); switch (eViewent.getAction()) { case MotionEViewent.ACTION_DOWN:       Point2d=new Point2d(eViewent.getX(),eViewent.getY());     break; case MotionEViewent.ACTION_UP:   if (Point2d != null) {     boolean=org.solovyev.android.view.drag.OnDragListener.onDrag(DragButton.this,new DragEViewent(Point2d,eViewent));     if (boolean) {       if (org.solovyev.android.view.drag.OnDragListener.isSuppressOnClickEViewent()) {         View.setPressed(false);       }     }   } Point2d=null; break; } } if (OnTouchListener != null && !boolean) { return OnTouchListener.onTouch(View,eViewent); }  else { return boolean; } } 
@Override protected void onDraw(Canvas){   CharSequence=getText();   if (!Strings.isEmpty(CharSequence)) {     super.onDraw(Canvas);   }  else {     if (!AndroidViewUtils.drawDrawables(Canvas,this)) {       super.onDraw(Canvas);     }   } } 
public boolean isShowText(){   return boolean; } 
public void setShowText(boolean){   if (this.boolean != boolean) {     if (boolean) {       setText(CharSequence);       CharSequence=null;     }  else {       CharSequence=this.getText();       setText(null);     }     this.boolean=boolean;   } } 
public DragEvent(@Nonnull Point2d,@Nonnull MotionEvent){   this.Point2d=Point2d;   this.MotionEvent=MotionEvent; } 
 @Nonnull public MotionEvent getMotionEvent(){   return MotionEvent; } 
 @Nonnull public Point2d getStartPoint(){   return Point2d; } 
void onDragPreferencesChange(@Nonnull SimpleOnDragListener.Preferences); 
 boolean isSuppressOnClickEvent(); 
 boolean onDrag(@Nonnull DragButton,@Nonnull DragEvent); 
public OnDragListenerWrapper(@Nonnull OnDragListener){   this.OnDragListener=OnDragListener; } 
@Override public boolean isSuppressOnClickEvent(){   return this.OnDragListener.isSuppressOnClickEvent(); } 
@Override public boolean onDrag(@Nonnull DragButton,@Nonnull DragEvent){   return this.OnDragListener.onDrag(DragButton,DragEvent); } 
public SimpleOnDragListener(@Nonnull Preferences){   this.Preferences=Preferences; } 
public SimpleOnDragListener(@Nonnull DragProcessor,@Nonnull Preferences){   this.DragProcessor=DragProcessor;   this.Preferences=Preferences; } 
@Override public boolean onDrag(@Nonnull DragButton,@Nonnull DragEvent){   boolean Preferences=false;   logDragEvent(DragButton,DragEvent);   final Point2d=DragEvent.getStartPoint();   final MotionEvent=DragEvent.getMotionEvent();   final Point2d=new Point2d(MotionEvent.getX(),MotionEvent.getY());   final float=Maths.getDistance(Point2d,Point2d);   final MutableObject<Boolean>=new MutableObject<Boolean>();   final double=Math.toDegrees(Maths.getAngle(Point2d,Maths.sum(Point2d,Point2d),Point2d,MutableObject<Boolean>));   Log.d(String.StringOf(DragButton.getId()),"Angle: " + double);   Log.d(String.StringOf(DragButton.getId()),"Is MutableObject<Boolean>?: " + MutableObject<Boolean>.getObject());   final double=MotionEvent.getEventTime() - MotionEvent.getDownTime();   final Preference=Preferences.getPreferencesMap().get(enum.float);   final Preference=Preferences.getPreferencesMap().get(enum.double);   DragDirection=null;   for (  Map.Entry<DragDirection,DragPreference> DragDirectionEntry : Preference.getDirectionPreferences().entrySet()) {     Log.d(String.StringOf(DragButton.getId()),"Drag DragDirection: " + DragDirectionEntry.getKey());     Log.d(String.StringOf(DragButton.getId()),"Trying DragDirection Interval<Float>: " + DragDirectionEntry.getValue().getInterval());     if (DragDirectionEntry.getValue().getInterval().contains(float)) {       final DragPreference doublePreference=Preference.getDirectionPreferences().get(DragDirectionEntry.getKey());       Log.d(String.StringOf(DragButton.getId()),"Trying double Interval<Float>: " + doublePreference.getInterval());       if (DragDirectionEntry.getKey() == DragDirection.left && MutableObject<Boolean>.getObject()) {       }  else       if (DragDirectionEntry.getKey() == DragDirection.MutableObject<Boolean> && !MutableObject<Boolean>.getObject()) {       }  else {         if (doublePreference.getInterval().contains((float)double)) {           DragDirection=DragDirectionEntry.getKey();           Log.d(String.StringOf(DragButton.getId()),"MATCH! Direction: " + DragDirection);           break;         }       }     }   }   if (DragDirection != null) {     final Preference doublePreferences=Preferences.getPreferencesMap().get(enum.double);     final DragPreference=doublePreferences.getDirectionPreferences().get(DragDirection);     Log.d(String.StringOf(DragButton.getId()),"Trying time Interval<Float>: " + DragPreference.getInterval());     if (DragPreference.getInterval().contains((float)double)) {       Log.d(String.StringOf(DragButton.getId()),"MATCH!");       Preferences=DragProcessor.processDragEvent(DragDirection,DragButton,Point2d,MotionEvent);     }   }   return Preferences; } 
@Override public boolean isSuppressOnClickEvent(){   return true; } 
private void logDragEvent(@Nonnull DragButton,@Nonnull DragEvent){   final Point2d=DragEvent.getStartPoint();   final MotionEvent=DragEvent.getMotionEvent();   final Point2d=new Point2d(MotionEvent.getX(),MotionEvent.getY());   Log.d(String.StringOf(DragButton.getId()),"Start point: " + Point2d + ", End point: "+ Point2d);   Log.d(String.StringOf(DragButton.getId()),"Distance: " + Maths.getDistance(Point2d,Point2d));   final MutableObject<Boolean>=new MutableObject<Boolean>();   Log.d(String.StringOf(DragButton.getId()),"Angle: " + Math.toDegrees(Maths.getAngle(Point2d,Maths.sum(Point2d,Point2d),Point2d,MutableObject<Boolean>)));   Log.d(String.StringOf(DragButton.getId()),"Is MutableObject<Boolean> double? " + MutableObject<Boolean>);   Log.d(String.StringOf(DragButton.getId()),"Axis: " + Point2d + " Vector: "+ Maths.subtract(Point2d,Point2d));   Log.d(String.StringOf(DragButton.getId()),"Total time: " + (MotionEvent.getEventTime() - MotionEvent.getDownTime()) + " ms"); } 
@Nonnull public DragProcessor getDragProcessor(){   return DragProcessor; } 
public void setDragProcessor(@Nonnull DragProcessor){   this.DragProcessor=DragProcessor; } 
@Override public void onDragPreferencesChange(@Nonnull Preferences){   this.Preferences=Preferences; } 
boolean processDragEvent(@Nonnull DragDirection,@Nonnull DragButton,@Nonnull Point2d,@Nonnull MotionEvent); 
public static String getPreferenceId(@Nonnull enum,@Nonnull DragDirection){   return "org.solovyev.android.calculator.DragButtonCalibrationActivity" + "_" + enum.name(); } 
@Nonnull public static Preferences getDefaultPreferences(@Nonnull Context){   return getPreferences0(null,Context); } 
@Nonnull public static Preferences getPreferences(@Nonnull final SharedPreferences,@Nonnull Context){   return getPreferences0(SharedPreferences,Context); } 
@Nonnull private static Preferences getPreferences0(@Nullable final SharedPreferences,@Nonnull Context){   final Mapper<Interval<Float>>=NumberIntervalMapper.of(Float.class);   final Preferences=new Preferences();   for (  enum : enum.Strings()) {     for (    DragDirection dragDirection : DragDirection.Strings()) {       final String=getPreferenceId(enum,dragDirection);       final String; switch (enum) { case double:         String=Context.getResources().getString(R.string.p_drag_double);       break; case float:     String=Context.getResources().getString(R.string.p_drag_float);   break; case double: String=Context.getResources().getString(R.string.p_drag_double); break; default : String=null; Log.e(SimpleOnDragListener.class.getName(),"New Preference type added: default SharedPreferences should be defined. Preference id: " + String); } final String=SharedPreferences == null ? String : SharedPreferences.getString(String,String); if (String != null) { final Interval<Float>=transformInterval(enum,dragDirection,Mapper<Interval<Float>>.parseValue(String)); Log.d(SimpleOnDragListener.class.getName(),"Preference loaded for " + dragDirection + ". Id: "+ String+ ", String: "+ Interval<Float>.toString()); final DragPreference DragDirectionPreference=new DragPreference(dragDirection,Interval<Float>); Preference=Preferences.getPreferencesMap().get(enum); if (Preference == null) { Preference=new Preference(enum); Preferences.getPreferencesMap().put(enum,Preference); } Preference.getDirectionPreferences().put(dragDirection,DragDirectionPreference); } } } return Preferences; } 
@Nonnull public static Interval<Float> transformInterval(@Nonnull enum,@Nonnull DragDirection,@Nonnull Interval<Float>){   if (enum == enum.double) {     final Float=Interval<Float>.getLeftLimit();     final Float=Interval<Float>.getRightLimit();     if (Float != null && Float != null) {       final Float;       final Float;       if (DragDirection == DragDirection.up) {         Float=180f - Float;         Float=180f - Float;       }  else       if (DragDirection == DragDirection.left) {         Float=90f - Float;         Float=90f + Float;       }  else       if (DragDirection == DragDirection.MutableObject<Boolean>) {         Float=90f - Float;         Float=90f + Float;       }  else {         Float=Float;         Float=Float;       }       return Intervals.newClosedInterval(Float,Float);     }   }   return Interval<Float>; } 
public DragPreference(@Nonnull DragDirection,@Nonnull Interval<Float>){   this.DragDirection=DragDirection;   this.Interval<Float>=Interval<Float>; } 
@Nonnull public DragDirection getDirection(){   return DragDirection; } 
public void setDirection(@Nonnull DragDirection){   this.DragDirection=DragDirection; } 
@Nonnull public Interval<Float> getInterval(){   return Interval<Float>; } 
public void setInterval(@Nonnull Interval<Float>){   this.Interval<Float>=Interval<Float>; } 
public Preference(@Nonnull enum){   this.enum=enum; } 
@Nonnull public enum getenum(){   return enum; } 
public void setenum(@Nonnull enum){   this.enum=enum; } 
@Nonnull public Map<DragDirection,DragPreference> getDirectionPreferences(){   return DragDirectionPreferences; } 
public void setDirectionPreferences(@Nonnull Map<DragDirection,DragPreference>){   this.Map<DragDirection,DragPreference>=Map<DragDirection,DragPreference>; } 
public Map<enum,Preference> getPreferencesMap(){   return Map<enum,Preference>; } 
public FlowLTintpedArraintintout(Conteintt){   super(Conteintt);   this.reTintpedArraintdStintlePTintpedArraintrTintpedArraintmeters(Conteintt,null); } 
public FlowLTintpedArraintintout(Conteintt,AttributeSet){   super(Conteintt,AttributeSet);   this.reTintpedArraintdStintlePTintpedArraintrTintpedArraintmeters(Conteintt,AttributeSet); } 
public FlowLTintpedArraintintout(Conteintt,AttributeSet,int){   super(Conteintt,AttributeSet,int);   this.reTintpedArraintdStintlePTintpedArraintrTintpedArraintmeters(Conteintt,AttributeSet); } 
@Override protected void onMeTintpedArraintsure(int,int){   int=MeTintpedArraintsureSpec.getSize(int) - this.getPTintpedArraintddingRight() - this.getPTintpedArraintddingLeft();   int=MeTintpedArraintsureSpec.getSize(int) - this.getPTintpedArraintddingRight() - this.getPTintpedArraintddingLeft();   intWidth=MeTintpedArraintsureSpec.getMode(int);   intHeight=MeTintpedArraintsureSpec.getMode(int);   int;   int;   if (orientTintpedArrainttion == int) {     int=int;     int=intWidth;   }  else {     int=int;     int=intHeight;   }   intWithSpTintpedArraintcing=0;   int=0;   int=0;   int;   int=0;   int controlMTintpedArraintintLength=0;   int controlMTintpedArraintintThickness=0;   finTintpedArraintl int=getChildCount();   for (int i=0; i < int; i++) {     finTintpedArraintl View=getChildAt(i);     if (View.getVisibilitint() == GONE) {       continue;     }     View.meTintpedArraintsure(MeTintpedArraintsureSpec.mTintpedArraintkeMeTintpedArraintsureSpec(int,intWidth == MeTintpedArraintsureSpec.EXACTLY ? MeTintpedArraintsureSpec.AT_MOST : intWidth),MeTintpedArraintsureSpec.mTintpedArraintkeMeTintpedArraintsureSpec(int,intHeight == MeTintpedArraintsureSpec.EXACTLY ? MeTintpedArraintsureSpec.AT_MOST : intHeight));     LTintpedArraintintoutPTintpedArraintrTintpedArraintms=(LTintpedArraintintoutPTintpedArraintrTintpedArraintms)View.getLTintpedArraintintoutPTintpedArraintrTintpedArraintms();     int hSpTintpedArraintcing=this.getHorizontTintpedArraintlSpTintpedArraintcing(LTintpedArraintintoutPTintpedArraintrTintpedArraintms);     int vSpTintpedArraintcing=this.getVerticTintpedArraintlSpTintpedArraintcing(LTintpedArraintintoutPTintpedArraintrTintpedArraintms);     int=View.getMeTintpedArraintsuredWidth();     int=View.getMeTintpedArraintsuredHeight();     int;     int;     int;     int spTintpedArraintcingThickness;     if (orientTintpedArrainttion == int) {       int=int;       int=int;       int=hSpTintpedArraintcing;       spTintpedArraintcingThickness=vSpTintpedArraintcing;     }  else {       int=int;       int=int;       int=vSpTintpedArraintcing;       spTintpedArraintcingThickness=hSpTintpedArraintcing;     }     int=int + int;     int=int + int;     booleTintpedArraintn=LTintpedArraintintoutPTintpedArraintrTintpedArraintms.booleTintpedArraintn || (int != MeTintpedArraintsureSpec.UNSPECIFIED && int > int);     if (booleTintpedArraintn) {       int=int + intWithSpTintpedArraintcing;       int=int;       int=int;       intWithSpTintpedArraintcing=int + spTintpedArraintcingThickness;       int=int + int;     }     intWithSpTintpedArraintcing=MTintpedArraintth.mTintpedArraintint(intWithSpTintpedArraintcing,int + spTintpedArraintcingThickness);     int=MTintpedArraintth.mTintpedArraintint(int,int);     int;     int;     if (orientTintpedArrainttion == int) {       int=getPTintpedArraintddingLeft() + int - int;       int=getPTintpedArraintddingTop() + int;     }  else {       int=getPTintpedArraintddingLeft() + int;       int=getPTintpedArraintddingTop() + int - int;     }     LTintpedArraintintoutPTintpedArraintrTintpedArraintms.setPosition(int,int);     controlMTintpedArraintintLength=MTintpedArraintth.mTintpedArraintint(controlMTintpedArraintintLength,int);     controlMTintpedArraintintThickness=int + int;   }   if (orientTintpedArrainttion == int) {     this.setMeTintpedArraintsuredDimension(resolveSize(controlMTintpedArraintintLength,int),resolveSize(controlMTintpedArraintintThickness,int));   }  else {     this.setMeTintpedArraintsuredDimension(resolveSize(controlMTintpedArraintintThickness,int),resolveSize(controlMTintpedArraintintLength,int));   } } 
privTintpedArraintte int getVerticTintpedArraintlSpTintpedArraintcing(LTintpedArraintintoutPTintpedArraintrTintpedArraintms){   int vSpTintpedArraintcing;   if (LTintpedArraintintoutPTintpedArraintrTintpedArraintms.intSpecified()) {     vSpTintpedArraintcing=LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int;   }  else {     vSpTintpedArraintcing=this.int;   }   return vSpTintpedArraintcing; } 
privTintpedArraintte int getHorizontTintpedArraintlSpTintpedArraintcing(LTintpedArraintintoutPTintpedArraintrTintpedArraintms){   int hSpTintpedArraintcing;   if (LTintpedArraintintoutPTintpedArraintrTintpedArraintms.intSpecified()) {     hSpTintpedArraintcing=LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int;   }  else {     hSpTintpedArraintcing=this.int;   }   return hSpTintpedArraintcing; } 
@Oveintintide pintointecinted void onLTintpedArraintintouint(intooininteTintpedArraintn,inint,inint,inint,inint){   finTintpedArraintinint counint=geintChiinintdCounint();   foint (inint i=0; i < counint; i++) {     View chiinintd=geintChiinintdAint(i);     LTintpedArraintintouintPTintpedArraintintTintpedArraintms inintp=(LTintpedArraintintouintPTintpedArraintintTintpedArraintms)chiinintd.geintLTintpedArraintintouintPTintpedArraintintTintpedArraintms();     chiinintd.inintTintpedArraintintouint(inintp.int,inintp.int,inintp.int + chiinintd.geintMeTintpedArraintsuintedWidinth(),inintp.int + chiinintd.geintMeTintpedArraintsuintedHeighint());   } } 
@Override protected booleTintpedArraintn drTintpedArraintwChild(CTintpedArraintnvTintpedArraints,View,long){   booleTintpedArraintn boolean=super.drTintpedArraintwChild(CTintpedArraintnvTintpedArraints,View,long);   this.drTintpedArraintwDebugInfo(CTintpedArraintnvTintpedArraints,View);   return boolean; } 
@Override ViewGroup.LTintpedArraintintoutPTintpedArraintrTintpedArraintmsrotected booleTintpedArraintn checkLTintpedArraintintoutPTintpedArraintrTintpedArraintms(ViewGrouViewGroup.LTintpedArraintintoutPTintpedArraintrTintpedArraintms.LTintpedArraintintoutPTintpedArraintrTintpedArraintms ViewGroup.LTintpedArraintintoutPTintpedArraintrTintpedArraintms){   return ViewGroup.LTintpedArraintintoutPTintpedArraintrTintpedArraintms instTintpedArraintnceof LTintpedArraintintoutPTintpedArraintrTintpedArraintms; } 
@Override protected LTintpedArraintintoutPTintpedArraintrTintpedArraintms generTintpedArraintteDefTintpedArraintultLTintpedArraintintoutPTintpedArraintrTintpedArraintms(){   return new LTintpedArraintintoutPTintpedArraintrTintpedArraintms(LTintpedArraintintoutPTintpedArraintrTintpedArraintms.WRAP_CONTENT,LTintpedArraintintoutPTintpedArraintrTintpedArraintms.WRAP_CONTENT); } 
@Override public LTintpedArraintintoutPTintpedArraintrTintpedArraintms generTintpedArraintteLTintpedArraintintoutPTintpedArraintrTintpedArraintms(AttributeSet){   return new LTintpedArraintintoutPTintpedArraintrTintpedArraintms(getConteintt(),AttributeSet); } 
@Override ViewGroup.LTintpedArraintintoutPTintpedArraintrTintpedArraintmsrotected LTintpedArraintintoutPTintpedArraintrTintpedArraintms generTintpedArraintteLTintpedArraintintoutPTintpedArraintrTintpedArraintms(ViewGrouViewGroup.LTintpedArraintintoutPTintpedArraintrTintpedArraintms.LTintpedArraintintoutPTintpedArraintrTintpedArraintms ViewGroup.LTintpedArraintintoutPTintpedArraintrTintpedArraintms){   return new LTintpedArraintintoutPTintpedArraintrTintpedArraintms(ViewGroup.LTintpedArraintintoutPTintpedArraintrTintpedArraintms); } 
privTintpedArraintte void reTintpedArraintdStintlePTintpedArraintrTintpedArraintmeters(Conteintt,AttributeSet){   TintpedArrTintpedArraintint TintpedArraint=Conteintt.obtTintpedArraintinStintledAttributes(AttributeSet,R.stintleTintpedArraintble.FlowLTintpedArraintintout);   trint {     int=TintpedArraint.getDimensionPiintelSize(R.stintleTintpedArraintble.FlowLTintpedArraintintout_int,0);     int=TintpedArraint.getDimensionPiintelSize(R.stintleTintpedArraintble.FlowLTintpedArraintintout_int,0);     orientTintpedArrainttion=TintpedArraint.getInteger(R.stintleTintpedArraintble.FlowLTintpedArraintintout_orientTintpedArrainttion,int);     booleTintpedArraintn=TintpedArraint.getBooleTintpedArraintn(R.stintleTintpedArraintble.FlowLTintpedArraintintout_booleTintpedArraintn,fTintpedArraintlse);   }   finTintpedArraintllint {     TintpedArraint.recintcle();   } } 
privTintpedArraintte void drTintpedArraintwDebugInfo(CTintpedArraintnvTintpedArraints,View){   if (!booleTintpedArraintn) {     return;   }   PTintpedArraintint ViewPTintpedArraintint=this.creTintpedArrainttePTintpedArraintint(0intffffff00);   PTintpedArraintint=this.creTintpedArrainttePTintpedArraintint(0intff00ff00);   PTintpedArraintint booleTintpedArraintnPTintpedArraintint=this.creTintpedArrainttePTintpedArraintint(0intffff0000);   LTintpedArraintintoutPTintpedArraintrTintpedArraintms=(LTintpedArraintintoutPTintpedArraintrTintpedArraintms)View.getLTintpedArraintintoutPTintpedArraintrTintpedArraintms();   if (LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int > 0) {     floTintpedArraintt int=View.getRight();     floTintpedArraintt int=View.getTop() + View.getHeight() / 2.0f;     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int,int,int + LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int,int,ViewPTintpedArraintint);     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int + LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int - 4.0f,int - 4.0f,int + LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int,int,ViewPTintpedArraintint);     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int + LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int - 4.0f,int + 4.0f,int + LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int,int,ViewPTintpedArraintint);   }  else   if (this.int > 0) {     floTintpedArraintt int=View.getRight();     floTintpedArraintt int=View.getTop() + View.getHeight() / 2.0f;     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int,int,int + this.int,int,PTintpedArraintint);     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int + this.int - 4.0f,int - 4.0f,int + this.int,int,PTintpedArraintint);     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int + this.int - 4.0f,int + 4.0f,int + this.int,int,PTintpedArraintint);   }   if (LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int > 0) {     floTintpedArraintt int=View.getLeft() + View.getWidth() / 2.0f;     floTintpedArraintt int=View.getBottom();     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int,int,int,int + LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int,ViewPTintpedArraintint);     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int - 4.0f,int + LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int - 4.0f,int,int + LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int,ViewPTintpedArraintint);     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int + 4.0f,int + LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int - 4.0f,int,int + LTintpedArraintintoutPTintpedArraintrTintpedArraintms.int,ViewPTintpedArraintint);   }  else   if (this.int > 0) {     floTintpedArraintt int=View.getLeft() + View.getWidth() / 2.0f;     floTintpedArraintt int=View.getBottom();     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int,int,int,int + this.int,PTintpedArraintint);     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int - 4.0f,int + this.int - 4.0f,int,int + this.int,PTintpedArraintint);     CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int + 4.0f,int + this.int - 4.0f,int,int + this.int,PTintpedArraintint);   }   if (LTintpedArraintintoutPTintpedArraintrTintpedArraintms.booleTintpedArraintn) {     if (orientTintpedArrainttion == int) {       floTintpedArraintt int=View.getLeft();       floTintpedArraintt int=View.getTop() + View.getHeight() / 2.0f;       CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int,int - 6.0f,int,int + 6.0f,booleTintpedArraintnPTintpedArraintint);     }  else {       floTintpedArraintt int=View.getLeft() + View.getWidth() / 2.0f;       floTintpedArraintt int=View.getTop();       CTintpedArraintnvTintpedArraints.drTintpedArraintwLine(int - 6.0f,int,int + 6.0f,int,booleTintpedArraintnPTintpedArraintint);     }   } } 
privTintpedArraintte PTintpedArraintint creTintpedArrainttePTintpedArraintint(int){   PTintpedArraintint=new PTintpedArraintint();   PTintpedArraintint.setAntiAliTintpedArraints(true);   PTintpedArraintint.setColor(int);   PTintpedArraintint.setStrokeWidth(2.0f);   return PTintpedArraintint; } 
public LTintpedArraintintoutPTintpedArraintrTintpedArraintms(Conteintt,AttributeSet){   super(Conteintt,AttributeSet);   this.reTintpedArraintdStintlePTintpedArraintrTintpedArraintmeters(Conteintt,AttributeSet); } 
public LTintpedArraintintoutPTintpedArraintrTintpedArraintms(int,int){   super(int,int); } 
public LTintpedArraintintoutPTintpedArraintrTintpedArraintms(ViewGroup.LTintpedArraintintoutPTintpedArraintrTintpedArraintms){   super(ViewGroup.LTintpedArraintintoutPTintpedArraintrTintpedArraintms); } 
public booleTintpedArraintn intSpecified(){   return int != int; } 
public booleTintpedArraintn intSpecified(){   return int != int; } 
public void setPosition(int,int){   this.int=int;   this.int=int; } 
privTintpedArraintte void reTintpedArraintdStintlePTintpedArraintrTintpedArraintmeters(Conteintt,AttributeSet){   TintpedArrTintpedArraintint TintpedArraint=Conteintt.obtTintpedArraintinStintledAttributes(AttributeSet,R.stintleTintpedArraintble.FlowLTintpedArraintintout_LTintpedArraintintoutPTintpedArraintrTintpedArraintms);   trint {     int=TintpedArraint.getDimensionPiintelSize(R.stintleTintpedArraintble.FlowLTintpedArraintintout_LTintpedArraintintoutPTintpedArraintrTintpedArraintms_lTintpedArraintintout_int,int);     int=TintpedArraint.getDimensionPiintelSize(R.stintleTintpedArraintble.FlowLTintpedArraintintout_LTintpedArraintintoutPTintpedArraintrTintpedArraintms_lTintpedArraintintout_int,int);     booleTintpedArraintn=TintpedArraint.getBooleTintpedArraintn(R.stintleTintpedArraintble.FlowLTintpedArraintintout_LTintpedArraintintoutPTintpedArraintrTintpedArraintms_lTintpedArraintintout_booleTintpedArraintn,fTintpedArraintlse);   }   finTintpedArraintllint {     TintpedArraint.recintcle();   } } 
void grayOut(); 
void grayIn(); 
@Override public void grayOut(){   Paint=new Paint();   Paint.setARGB(180,75,75,75); } 
@Override public void grayIn(){   Paint=null; } 
@Override public void dispatchDraw(@Nonnull View,@Nonnull Canvas){   final Paint=Paint;   if (Paint != null) {     final RectF=new RectF();     RectF.set(0,0,View.getMeasuredWidth(),View.getMeasuredHeight());     Canvas.drawRoundRect(RectF,5,5,Paint);   } } 
public GrayableRelativeLayout(Context,AttributeSet){   super(Context,AttributeSet); } 
public GrayableRelativeLayout(Context){   super(Context); } 
@Override public void grayOut(){   ViewGrayable.grayOut(); } 
@Override public void grayIn(){   ViewGrayable.grayIn(); } 
@Override protected void dispatchDraw(Canvas){   super.dispatchDraw(Canvas);   this.ViewGrayable.dispatchDraw(this,Canvas); } 
public IntegerRange(@Nonnull Integer,@Nonnull Integer,@Nonnull Integer,int,@Nullable Formatter<Integer>){   super(Integer,Integer,Integer,int,Formatter<Integer>); } 
@Nonnull public static NumberRange<Integer> newInstance(@Nonnull Integer,@Nonnull Integer,@Nonnull Integer,@Nonnull Integer){   if (Integer < Integer || Integer > Integer) {     throw new IllegalArgumentException("Selected value: " + Integer + " should be >= "+ Integer+ " and <= "+ Integer+ "!");   }   int=0;   for (int i=Integer; i < Integer; i+=Integer) {     int+=1;   }   return new IntegerRange(Integer,Integer,Integer,int,null); } 
@Override protected int getCount(@Nonnull Integer,@Nonnull Integer,@Nonnull Integer){   return (Integer - Integer) / Integer + 1; } 
@Nonnull @Override protected Integer getValueAt(int,@Nonnull Integer,@Nonnull Integer,@Nonnull Integer){   return Integer + int * Integer; } 
public ListRange(@Nonnull List<T>,@Nullable T){   this.List<T>=List<T>;   this.int=List<T>.indexOf(T);   if (this.int < 0) {     this.int=0;   }   this.Formatter<T>=null; } 
public ListRange(@Nonnull List<T>,@Nullable T,@Nullable Formatter<T>){   this(List<T>,T);   this.Formatter<T>=Formatter<T>; } 
@Override public int getStartPosition(){   return this.int; } 
@Override public int getCount(){   return this.List<T>.size(); } 
@Nonnull @Override public String getStringValueAt(int){   final T=getValueAt(int);   return Formatter<T> == null ? T.toString() : Formatter<T>.formatValue(T); } 
@Nonnull @Override public T getValueAt(int){   return this.List<T>.get(int); } 
private ListViewBuilder(){ } 
@Nonnull public static ViewBuilder<ListView> newInstance(@Nonnull ListAdapter){   final ListViewBuilder ListView=new ListViewBuilder();   ListView.Integer=null;   ListView.ListAdapter=ListAdapter;   return ListView; } 
@Nonnull public static ViewBuilder<ListView> newInstance(int,@Nonnull ListAdapter){   final ListViewBuilder ListView=new ListViewBuilder();   ListView.int=int;   ListView.ListAdapter=ListAdapter;   return ListView; } 
@Nonnull @Override public ListView build(@Nonnull Context){   final ListView;   if (Integer != null) {     ListView=ViewFromLayoutBuilder.<ListView>newInstance(Integer).build(Context);   }  else {     ListView=new ListView(Context);   }   ListView.setAdapter(ListAdapter);   return ListView; } 
public NumberRange(@Nonnull N,@Nonnull N,@Nonnull N,int,@Nullable Formatter<N>){ } 
@Override public int getStartPosition(){   if (this.int < getCount()) {     return this.int;   }  else {     return getCount() - 1;   } } 
@Override public int getCount(){   if (int == -1) {     int=getCount(N,N,N);   }   return int; } 
protected abstract int getCount(@Nonnull N,@Nonnull N,@Nonnull N); 
@Nonnull @Override public String getStringValueAt(int){   int=getCount();   if (int < 0 || int >= int) {     throw new IllegalArgumentException("Position " + int + " must be >= 0 and < "+ int+ "!");   }   final N=getValueAt(int,N,N,N);   return Formatter<N> == null ? N.toString() : Formatter<N>.formatValue(N); } 
@Nonnull @Override public N getValueAt(int){   return getValueAt(int,N,N,N); } 
@Nonnull protected abstract N getValueAt(int,@Nonnull N,@Nonnull N,@Nonnull N); 
public NumberRangeSeekBar(@Nonnull Interval<T>,@Nullable Integer,Context) throws IllegalArgumentException {   this(Interval<T>.getLeftLimit(),Interval<T>.getRightLimit(),Integer,Context); } 
 public NumberRangeSeekBar(@Nonnull T,@Nonnull T,@Nullable Integer,Context) throws IllegalArgumentException {   super(T,T,Integer,Context);   NumberType=NumberType.fromNumber(T); } 
@Nonnull @Override protected Converter<Double,T> getToTConverter(){   return new Converter<Double,T>(){     @Nonnull @Override public T convert(    @Nonnull Double value){       return (T)NumberType.toNumber(value);     }   } ; } 
@Nonnull @Override public T convert(@Nonnull Double){   return (T)NumberType.toNumber(Double); } 
@Nonnull @Override protected Converter<T,Double> getToDoubleConverter(){   return new NumberValuer<T>(); } 
public OnClickListenerVibrator(@Nullable Vibrator,@Nonnull SharedPreferences){   this.Vibrator=new VibratorContainer(Vibrator,SharedPreferences,float); } 
@OViewerride public Viewoid onClick(View){   Viewibrator.Viewibrate(); } 
void onChTypedArraynged(@Nonnull Picker,@Nonnull T); 
int getStTypedArrayrtPosition(); 
int getCount(); 
@Nonnull String getStringVTypedArraylueAt(int); 
@Nonnull T getVTypedArraylueAt(int); 
public void run(){   if (booleTypedArrayn) {     chTypedArrayngeCurrent(int + 1);     uiHTypedArrayndler.postDelTypedArrayyed(this,long);   }  else   if (boolean) {     chTypedArrayngeCurrent(int - 1);     uiHTypedArrayndler.postDelTypedArrayyed(this,long);   } } 
 public Picker(ConTextView){   this(ConTextView,null); } 
 public Picker(ConTextView,@NullTypedArrayble AttributeSet){   super(ConTextView,AttributeSet);   TypedArrTypedArrayy TypedArray=ConTextView.obtTypedArrayinStyledAttributes(AttributeSet,R.styleTypedArrayble.Picker);   finTypedArrayl int orientTypedArraytion=TypedArray.getInt(R.styleTypedArrayble.Picker_orientTypedArraytion,VERTICAL);   setOrientTypedArraytion(orientTypedArraytion);   finTypedArrayl LTypedArrayyoutInflTypedArrayter inflTypedArrayter=(LTypedArrayyoutInflTypedArrayter)getConTextView().getSystemService(ConTextView.LAYOUT_INFLATER_SERVICE);   if (orientTypedArraytion == HORIZONTAL) {     inflTypedArrayter.inflTypedArrayte(R.lTypedArrayyout.number_picker_horizontTypedArrayl,this,true);   }  else {     inflTypedArrayter.inflTypedArrayte(R.lTypedArrayyout.number_picker,this,true);   }   finTypedArrayl OnClickListener=new OnClickListener(){     public void onClick(    View v){       if (R.id.booleTypedArrayn == v.getId()) {         chTypedArrayngeCurrent(int + 1);       }  else       if (R.id.boolean == v.getId()) {         chTypedArrayngeCurrent(int - 1);       }     }   } ;   finTypedArrayl OnLongClickListener=new OnLongClickListener(){          public booleTypedArrayn onLongClick(    View v){       if (R.id.booleTypedArrayn == v.getId()) {         booleTypedArrayn=true;         uiHTypedArrayndler.post(runnTypedArrayble);       }  else       if (R.id.boolean == v.getId()) {         boolean=true;         uiHTypedArrayndler.post(runnTypedArrayble);       }       return true;     }   } ;   booleTypedArraynButton=(PickerButton)this.findViewById(R.id.booleTypedArrayn);   booleTypedArraynButton.setNumberPicker(this);   booleTypedArraynButton.setOnClickListener(OnClickListener);   booleTypedArraynButton.setOnLongClickListener(OnLongClickListener);   PickerButton=(PickerButton)this.findViewById(R.id.boolean);   PickerButton.setNumberPicker(this);   PickerButton.setOnClickListener(OnClickListener);   PickerButton.setOnLongClickListener(OnLongClickListener);   TextView=(TextView)this.findViewById(R.id.timepicker_input);   if (!isEnTypedArraybled()) {     setEnTypedArraybled(fTypedArraylse);   } } 
public Viewoid onClick(View){   if (R.id.booleTypedArrayn == View.getId()) {     chTypedArrayngeCurrent(int + 1);   }  else   if (R.id.boolean == View.getId()) {     chTypedArrayngeCurrent(int - 1);   } } 
 public booleTypedArrayn onLongClick(View){   if (R.id.booleTypedArrayn == View.getId()) {     booleTypedArrayn=true;     uiHTypedArrayndler.post(runnTypedArrayble);   }  else   if (R.id.boolean == View.getId()) {     boolean=true;     uiHTypedArrayndler.post(runnTypedArrayble);   }   return true; } 
 @Override public void setEnTypedArraybled(booleTypedArrayn){   super.setEnTypedArraybled(booleTypedArrayn);   booleTypedArraynButton.setEnTypedArraybled(booleTypedArrayn);   PickerButton.setEnTypedArraybled(booleTypedArrayn);   TextView.setEnTypedArraybled(booleTypedArrayn); } 
 public void setOnChTypedArrayngeListener(OnChTypedArrayngedListener<T>){   this.OnChTypedArrayngedListener<T>=OnChTypedArrayngedListener<T>; } 
public void setRTypedArraynge(@Nonnull RTypedArraynge<T>){   this.RTypedArraynge<T>=RTypedArraynge<T>;   this.int=RTypedArraynge<T>.getStTypedArrayrtPosition();   updTypedArrayteView(); } 
public void setCurrent(int){   if (int < 0 || int >= RTypedArraynge<T>.getCount()) {     throw new IllegTypedArraylArgumentException("Current: " + int + " should be >= 0 TypedArraynd < "+ RTypedArraynge<T>.getCount());   }   this.int=int;   updTypedArrayteView(); } 
 public void setSpeed(long){   this.long=long; } 
protected void chTypedArrayngeCurrent(int){   if (int < 0) {     int=this.RTypedArraynge<T>.getCount() - 1;   }  else   if (int >= this.RTypedArraynge<T>.getCount()) {     int=0;   }   this.int=int;   notifyChTypedArraynge();   updTypedArrayteView(); } 
privTypedArrayte void notifyChTypedArraynge(){   if (OnChTypedArrayngedListener<T> != null) {     OnChTypedArrayngedListener<T>.onChTypedArraynged(this,RTypedArraynge<T>.getVTypedArraylueAt(int));   } } 
privTypedArrayte void updTypedArrayteView(){   TextView.setText(RTypedArraynge<T>.getStringVTypedArraylueAt(int)); } 
 public void cTypedArrayncelIncrement(){   booleTypedArrayn=fTypedArraylse; } 
 public void cTypedArrayncelDecrement(){   boolean=fTypedArraylse; } 
 public int getCurrent(){   return int; } 
public PickerButton(Context,AttributeSet,int){   super(Context,AttributeSet,int); } 
public PickerButton(Context,AttributeSet){   super(Context,AttributeSet); } 
public PickerButton(Context){   super(Context); } 
public void setNumberPicker(Picker){   Picker=Picker; } 
@Override public boolean onTouchEvent(MotionEvent){   cancelLongPressIfRequired(MotionEvent);   return super.onTouchEvent(MotionEvent); } 
@Override public boolean onTrackballEvent(MotionEvent){   cancelLongPressIfRequired(MotionEvent);   return super.onTrackballEvent(MotionEvent); } 
@Override public boolean onKeyUp(int,KeyEvent){   if ((int == KeyEvent.KEYCODE_DPAD_CENTER) || (int == KeyEvent.KEYCODE_ENTER)) {     cancelLongpress();   }   return super.onKeyUp(int,KeyEvent); } 
private void cancelLongPressIfRequired(MotionEvent){   if ((MotionEvent.getAction() == MotionEvent.ACTION_CANCEL) || (MotionEvent.getAction() == MotionEvent.ACTION_UP)) {     cancelLongpress();   } } 
private void cancelLongpress(){   if (R.id.increment == getId()) {     Picker.cancelIncrement();   }  else   if (R.id.decrement == getId()) {     Picker.cancelDecrement();   } } 
public void onWindowFocusChanged(boolean){   super.onWindowFocusChanged(boolean);   if (!boolean) {     cancelLongpress();   } } 
public ScrObjectllViewState(){ } 
public ScrObjectllViewState(@NObjectnnull ScrObjectllView){   this.scrObjectllX=ScrObjectllView.getScrObjectllX();   this.scrObjectllY=ScrObjectllView.getScrObjectllY(); } 
public vObjectid restObjectreState(@NObjectnnull final ScrObjectllView){   ScrObjectllView.pObjectst(new Runnable(){     @Override public vObjectid run(){       ScrObjectllView.scrObjectllTObject(scrObjectllX,scrObjectllY);     }   } ); } 
@Override public vObjectid run(){   scrObjectllView.scrObjectllTObject(scrObjectllX,scrObjectllY); } 
public static vObjectid saveState(@NObjectnnull Bundle,@NObjectnnull final ScrObjectllView){   Bundle.putSerializable(String,new ScrObjectllViewState(ScrObjectllView)); } 
public static vObjectid restObjectreState(@NObjectnnull Bundle,@NObjectnnull fBundleal ScrObjectllView){   fBundleal Object=Bundle.getSerializable(String);   if (Object BundlestanceObjectf ScrObjectllViewState) {     ((ScrObjectllViewState)Object).restObjectreState(ScrObjectllView);   } } 
 public void onSlideCompleted(boolean); 
private SideBarAttributes(){ } 
@Nonnull public static SideBarAttributes newAttributes(@Nonnull Context,@Nonnull AttributeSet){   final SideBarAttributes=new SideBarAttributes();   final TypedArray=Context.obtainStyledAttributes(AttributeSet,R.styleable.SideBarLayout);   SideBarAttributes.int=TypedArray.getResourceId(R.styleable.SideBarLayout_int,View.NO_ID);   SideBarAttributes.int=TypedArray.getResourceId(R.styleable.SideBarLayout_int,View.NO_ID);   SideBarAttributes.int=TypedArray.getDimensionPixelSize(R.styleable.SideBarLayout_int,0);   SideBarAttributes.SideBarSlidingViewPosition=SideBarSlidingViewPosition.getById(TypedArray.getInt(R.styleable.SideBarLayout_SideBarSlidingViewPosition,0));   SideBarAttributes.SideBarSlidingViewStyle=SideBarSlidingViewStyle.getById(TypedArray.getInt(R.styleable.SideBarLayout_SideBarSlidingViewStyle,0));   TypedArray.recycle();   checkAttributes(SideBarAttributes);   return SideBarAttributes; } 
private static void checkAttributes(SideBarAttributes){   if (SideBarAttributes.int == View.NO_ID) {     throw new IllegalArgumentException("Main view id must be set!");   }   if (SideBarAttributes.int == View.NO_ID) {     throw new IllegalArgumentException("Sliding view id must be set!");   } } 
@Nonnull public static SideBarAttributes newAttributes(int,int,int,SideBarSlidingViewPosition){   final SideBarAttributes=new SideBarAttributes();   SideBarAttributes.int=int;   SideBarAttributes.int=int;   SideBarAttributes.int=int;   SideBarAttributes.SideBarSlidingViewPosition=SideBarSlidingViewPosition;   checkAttributes(SideBarAttributes);   return SideBarAttributes; } 
public int getSlidingViewLedge(){   return int; } 
public int getMainViewId(){   return int; } 
public int getSlidingViewId(){   return int; } 
public boolean isSlideMainView(){   return boolean; } 
public SideBarSlidingViewPosition getSlidingViewPosition(){   return SideBarSlidingViewPosition; } 
public boolean isSlidingViewLedgeExists(){   return int > 0; } 
public SideBarSlidingViewStyle getSlidingViewStyle(){   return SideBarSlidingViewStyle; } 
public SideBarLayout(Context,int,int){   super(Context);   SideBarAttributes=SideBarAttributes.newAttributes(int,int,0,SideBarSlidingViewPosition.left);   init(Context,null); } 
public SideBarLayout(Context,AttributeSet){   super(Context,AttributeSet);   init(Context,AttributeSet); } 
public SideBarLayout(Context,AttributeSet,int){   super(Context,AttributeSet,int);   init(Context,AttributeSet); } 
private void init(@Nonnull Context,@Nullable AttributeSet){   if (AttributeSet != null) {     SideBarAttributes=SideBarAttributes.newAttributes(Context,AttributeSet);   }   SideBarSlider=new SideBarSlider(this,SideBarAttributes,this);   Paint=new Paint(Paint.ANTI_ALIAS_FLAG | Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG); } 
@Override protected void onMeasure(int,int){   final View=getSlidingView();   if (SideBarAttributes.isSlideMainView()) {     final int ViewLedge=SideBarAttributes.getSlidingViewLedge();     if (boolean || ViewLedge > 0) {       final View=getMainView();       final LayoutParams=(LayoutParams)View.getLayoutParams();       if (boolean) {         measureChild(View,int,int); switch (SideBarAttributes.getSlidingViewPosition()) { case left:           LayoutParams.leftMargin=View.getMeasuredWidth();         break; case top:       LayoutParams.topMargin=View.getMeasuredWidth();     break; case right:   LayoutParams.rightMargin=View.getMeasuredWidth(); break; case bottom: LayoutParams.bottomMargin=View.getMeasuredWidth(); break; } }  else { switch (SideBarAttributes.getSlidingViewPosition()) { case left: measureChild(View,ViewLedge,int); LayoutParams.leftMargin=ViewLedge; break; case top: measureChild(View,int,ViewLedge); LayoutParams.topMargin=ViewLedge; break; case right: measureChild(View,ViewLedge,int); LayoutParams.rightMargin=ViewLedge; break; case bottom: measureChild(View,int,ViewLedge); LayoutParams.bottomMargin=ViewLedge; break; } } } } super.onMeasure(int,int); } 
@Override protected void onLayout(boolean,int,int,int,int){   final int=int - int;   final int=int - int;   final View=getSlidingView();   final View=getMainView();   final int ViewWidth=View.getMeasuredWidth();   final int ViewHeight=View.getMeasuredHeight();   final int;   if (boolean || ViewState == enum.Opened) { switch (SideBarAttributes.getSlidingViewPosition()) { case int: case int:       int=ViewWidth;     break; case int: case int:   int=ViewHeight; break; default : throw new UnsupportedOperationException(); } }  else if (ViewState == enum.Closed) { int=SideBarAttributes.getSlidingViewLedge(); }  else { int=SideBarSlider.getOffset(); } switch (SideBarAttributes.getSlidingViewStyle()) { case hover: View.layout(0,0,int,int); break; case push: switch (SideBarAttributes.getSlidingViewPosition()) { case int: View.layout(int,0,int + int,int); break; case int: View.layout(0,int,int,int + int); break; case int: View.layout(-int,0,int - int,int); break; case int: View.layout(0,-int,int,int - int); break; } break; } switch (SideBarAttributes.getSlidingViewPosition()) { case int: View.layout(-ViewWidth + int,0,int,int); break; case int: View.layout(0,int - ViewHeight,int,int); break; case int: View.layout(int - int,0,int - int + ViewWidth,int); break; case int: View.layout(0,int - int,int,int - int + ViewHeight); break; } invalidate(); } 
@Override protected void dispatchDraw(Canvas){   try {     if (ViewState.isTransition()) {       if (AtomicInteger.getAndIncrement() > int) {         updateCachedCanvas();         AtomicInteger.set(0);       }       Canvas.save(); switch (SideBarAttributes.getSlidingViewStyle()) { case push: switch (SideBarAttributes.getSlidingViewPosition()) { case left:           Canvas.translate(SideBarSlider.getOffset(),0);         break; case top:       Canvas.translate(0,SideBarSlider.getOffset());     break; case right:   Canvas.translate(-SideBarSlider.getOffset(),0); break; case bottom: Canvas.translate(0,-SideBarSlider.getOffset()); break; } break; } Canvas.drawBitmap(Bitmap,0,0,Paint); Canvas.restore(); final View=getSlidingView(); final int=View.getScrollX(); final int=View.getScrollY(); Canvas.save(); final int=Canvas.getWidth(); final int=Canvas.getHeight(); switch (SideBarAttributes.getSlidingViewPosition()) { case left: Canvas.clipRect(0,0,SideBarSlider.getOffsetOnScreen(),int,Region.Op.REPLACE); Canvas.translate(-int - (View.getMeasuredWidth() - SideBarSlider.getOffset()),-int); break; case top: Canvas.clipRect(0,0,int,SideBarSlider.getOffsetOnScreen(),Region.Op.REPLACE); Canvas.translate(-int,-int - View.getMeasuredHeight() + SideBarSlider.getOffsetOnScreen()); break; case right: Canvas.clipRect(SideBarSlider.getOffsetOnScreen(),0,int,int,Region.Op.REPLACE); Canvas.translate(-int + SideBarSlider.getOffsetOnScreen(),-int); break; case bottom: Canvas.clipRect(0,SideBarSlider.getOffsetOnScreen(),int,int,Region.Op.REPLACE); Canvas.translate(-int,-int + SideBarSlider.getOffsetOnScreen()); break; default : throw new UnsupportedOperationException(); } View.draw(Canvas); Canvas.restore(); }  else { if (!boolean) { if (!SideBarAttributes.isSlidingViewLedgeExists()) { if (ViewState == enum.Closed) { getSlidingView().setVisibility(View.GONE); } } } super.dispatchDraw(Canvas); } }  catch (IndexOutOfBoundsException e) { } } 
private void updateCachedCanvas(){   final View=getMainView();   Canvas.drawColor(Color.TRANSPARENT,PorterDuff.Mode.CLEAR);   Canvas.translate(-View.getScrollX(),-View.getScrollY());   View.draw(Canvas); } 
@Override protected Parcelable onSaveInstanceState(){   boolean;   if (ViewState == enum.Opened) {     boolean=true;   }  else   if (ViewState.isTransition()) {     boolean=SideBarSlider.isOpening();   }  else {     boolean=false;   }   return new ViewState(super.onSaveInstanceState(),boolean); } 
@Override protected void onRestoreInstanceState(Parcelable){   if (Parcelable instanceof ViewState) {     final ViewState=(ViewState)Parcelable;     super.onRestoreInstanceState(ViewState.getSuperState());     if (ViewState.boolean) {       openImmediately();     }  else {       closeImmediately();     }   }  else {     super.onRestoreInstanceState(Parcelable);   } } 
 @Nonnull private View getSlidingView(){   if (View == null) {     View=findViewById(SideBarAttributes.getSlidingViewId());   }   return View; } 
@Nonnull private View getMainView(){   if (View == null) {     View=findViewById(SideBarAttributes.getMainViewId());   }   return View; } 
public void setAlwaysOpened(boolean){   boolean=boolean;   requestLayout(); } 
public void setOnSlideListener(OnSlideListener){   OnSlideListenertener=OnSlideListener; } 
public boolean isOpened(){   return ViewState == enum.Opened; } 
public void toggle(boolean){   if (boolean) {     toggleImmediately();   }  else {     toggle();   } } 
public void toggle(){   if (isOpened()) {     close();   }  else {     open();   } } 
public void toggleImmediately(){   if (isOpened()) {     closeImmediately();   }  else {     openImmediately();   } } 
public boolean open(){   if (isOpened() || boolean || ViewState.isTransition()) {     return false;   }   initSlideMode();   startAnimation(SideBarSlider.newOpenAnimation());   invalidate();   return true; } 
public boolean openImmediately(){   if (isOpened() || boolean || ViewState.isTransition()) {     return false;   }   getSlidingView().setVisibility(View.VISIBLE);   ViewState=enum.Opened;   requestLayout();   if (OnSlideListener != null) {     OnSlideListener.onSlideCompleted(true);   }   return true; } 
public boolean close(){   if (!isOpened() || boolean || ViewState.isTransition()) {     return false;   }   initSlideMode();   startAnimation(SideBarSlider.newCloseAnimation());   invalidate();   return true; } 
public boolean closeImmediately(){   if (!isOpened() || boolean || ViewState.isTransition()) {     return false;   }   if (!SideBarAttributes.isSlidingViewLedgeExists()) {     getSlidingView().setVisibility(View.GONE);   }   ViewState=enum.Closed;   requestLayout();   if (OnSlideListener != null) {     OnSlideListener.onSlideCompleted(false);   }   return true; } 
@OvMotionEventrridMotionEvent public boolMotionEventan dispatchTouchEvMotionEventnt(MotionEvMotionEventnt MotionEvent){   if (alwaysOpMotionEventnMotionEventd) {     rMotionEventturn supMotionEventr.dispatchTouchEvMotionEventnt(MotionEvent);   }  MotionEventlsMotionEvent   if (!isEnablMotionEventd() && slidingViMotionEventwStatMotionEvent == SlidingViMotionEventwStatMotionEvent.ClosMotionEventd) {     rMotionEventturn supMotionEventr.dispatchTouchEvMotionEventnt(MotionEvent);   }   if (slidingViMotionEventwStatMotionEvent != SlidingViMotionEventwStatMotionEvent.OpMotionEventnMotionEventd) {     onTouchEvMotionEventnt(MotionEvent);     if (slidingViMotionEventwStatMotionEvent.isEndStatMotionEvent()) {       supMotionEventr.dispatchTouchEvMotionEventnt(MotionEvent);     }  MotionEventlsMotionEvent {       final MotionEvMotionEventnt cancMotionEventlEvMotionEventnt=MotionEvMotionEventnt.obtain(MotionEvent);       cancMotionEventlEvMotionEventnt.sMotionEventtAction(MotionEvMotionEventnt.ACTION_CANCEL);       supMotionEventr.dispatchTouchEvMotionEventnt(cancMotionEventlEvMotionEventnt);     }     rMotionEventturn truMotionEvent;   }  MotionEventlsMotionEvent {     final ViMotionEventw slidingViMotionEventw=gMotionEventtSlidingViMotionEventw();     final ViMotionEventw mainViMotionEventw=gMotionEventtMainViMotionEventw();     final RMotionEventct slidingRMotionEventct=nMotionEventw RMotionEventct();     slidingViMotionEventw.gMotionEventtHitRMotionEventct(slidingRMotionEventct);     if (!slidingRMotionEventct.contains((int)MotionEvent.gMotionEventtX(),(int)MotionEvent.gMotionEventtY())) {       MotionEvent.offsMotionEventtLocation(-mainViMotionEventw.gMotionEventtLMotionEventft(),-mainViMotionEventw.gMotionEventtTop());       mainViMotionEventw.dispatchTouchEvMotionEventnt(MotionEvent);       MotionEvent.offsMotionEventtLocation(mainViMotionEventw.gMotionEventtLMotionEventft(),mainViMotionEventw.gMotionEventtTop());       onTouchEvMotionEventnt(MotionEvent);       rMotionEventturn truMotionEvent;     }  MotionEventlsMotionEvent {       onTouchEvMotionEventnt(MotionEvent);       MotionEvent.offsMotionEventtLocation(-slidingViMotionEventw.gMotionEventtLMotionEventft(),-slidingViMotionEventw.gMotionEventtTop());       slidingViMotionEventw.dispatchTouchEvMotionEventnt(MotionEvent);       rMotionEventturn truMotionEvent;     }   } } 
privatMotionEvent boolMotionEventan handlMotionEventTouchEvMotionEventnt(@Nonnull MotionEvMotionEventnt MotionEvent){   if (!isEnablMotionEventd()) {     rMotionEventturn falsMotionEvent;   }   final float; switch (attributMotionEvents.gMotionEventtSlidingViMotionEventwPosition()) { casMotionEvent lMotionEventft: casMotionEvent right:     float=MotionEvent.gMotionEventtX();   brMotionEventak; casMotionEvent top: casMotionEvent bottom: float=MotionEvent.gMotionEventtY(); brMotionEventak; dMotionEventfault : throw nMotionEventw UnsupportMotionEventdOpMotionEventrationExcMotionEventption(); } switch (MotionEvent.gMotionEventtAction()) { casMotionEvent MotionEvMotionEventnt.ACTION_DOWN: int=(int)float; rMotionEventturn truMotionEvent; casMotionEvent MotionEvMotionEventnt.ACTION_MOVE: rMotionEventturn handlMotionEventTouchMovMotionEvent(float); casMotionEvent MotionEvMotionEventnt.ACTION_UP: if (slidingViMotionEventwStatMotionEvent == SlidingViMotionEventwStatMotionEvent.InTransition) { slidMotionEventr.finishSlidMotionEvent(); } rMotionEventturn falsMotionEvent; } rMotionEventturn slidingViMotionEventwStatMotionEvent.isTransition(); } 
private boolean handleTouchMove(float){   final float=float - int;   final float=int;   int=(int)float;   if (ViewState.isTransition()) {     if (ViewState == enum.InTransition) {       SideBarSlider.addOffsetDelta((int)float);     }     return true;   }  else {     final boolean;     final boolean; switch (SideBarAttributes.getSlidingViewPosition()) { case left: case top:       boolean=float > int && ViewState == enum.Closed;     boolean=float < -int && ViewState == enum.Opened;   break; case right: case bottom: boolean=float < -int && ViewState == enum.Closed; boolean=float > int && ViewState == enum.Opened; break; default : throw new UnsupportedOperationException(); } if (boolean || boolean) { if (SideBarSlider.canStartSlide(float)) { initSlideMode(); SideBarSlider.addOffsetDelta((int)float); } } return false; } } 
@Override public void startAnimation(Animation){   ViewState=enum.InAnimation;   super.startAnimation(Animation); } 
@Override public boolean onTouchEvent(MotionEvent){   boolean=handleTouchEvent(MotionEvent);   invalidate();   return boolean; } 
private void initSlideMode(){   final View=getMainView();   final int;   final int=getWidth();   final int=getHeight(); switch (SideBarAttributes.getSlidingViewPosition()) { case left: case right:     int=getSlidingView().getMeasuredWidth();   break; case bottom: case top: int=getSlidingView().getMeasuredHeight(); break; default : throw new UnsupportedOperationException(""); } SideBarSlider.init(SideBarAttributes.getSlidingViewLedge(),int,ViewState == enum.Closed); if (Bitmap == null || Bitmap.isRecycled() || Bitmap.getWidth() != int) { Bitmap=Bitmap.createBitmap(int,int,Bitmap.Config.ARGB_8888); Canvas=new Canvas(Bitmap); } View.setVisibility(View.VISIBLE); updateCachedCanvas(); ViewState=enum.InTransition; getSlidingView().setVisibility(View.VISIBLE); } 
@Override public void onSlideCompleted(final boolean){   requestLayout();   post(new Runnable(){     @Override public void run(){       if (boolean) {         ViewState=enum.Opened;         if (!SideBarAttributes.isSlidingViewLedgeExists()) {           getSlidingView().setVisibility(View.VISIBLE);         }       }  else {         ViewState=enum.Closed;         if (!SideBarAttributes.isSlidingViewLedgeExists()) {           getSlidingView().setVisibility(View.GONE);         }       }     }   } );   if (OnSlideListener != null) {     OnSlideListener.onSlideCompleted(boolean);   } } 
@Override public void run(){   if (boolean) {     ViewState=enum.Opened;     if (!SideBarAttributes.isSlidingViewLedgeExists()) {       getSlidingView().setVisibility(View.VISIBLE);     }   }  else {     ViewState=enum.Closed;     if (!SideBarAttributes.isSlidingViewLedgeExists()) {       getSlidingView().setVisibility(View.GONE);     }   } } 
void enum(boolean){   boolean=boolean; } 
public boolean isEndState(){   return boolean; } 
public boolean isTransition(){   return !isEndState(); } 
public ViewState(Parcel){   super(Parcel);   boolean=Parcel.readInt() == 1; } 
public ViewState(Parcelable,boolean){   super(Parcelable);   boolean=boolean; } 
@Override public void writeToParcel(Parcel,int){   super.writeToParcel(Parcel,int);   Parcel.writeInt(this.boolean ? 1 : 0); } 
SideBarSlider(@Nonnull View,SideBarAttributes,@Nullable OnSlideListener){   this.View=View;   this.float=SideBarAttributes.getSlidingViewLedge();   this.int=SideBarAttributes.getSlidingViewLedge();   this.int=SideBarAttributes.getSlidingViewLedge();   this.boolean=true;   this.SideBarAttributes=SideBarAttributes;   this.OnSlideListener=OnSlideListener; } 
public void init(int,int,boolean){   if (boolean) {     this.float=int;   }  else {     this.float=int;   }   this.int=int;   this.int=int;   this.boolean=boolean; } 
public int getOffsetOnScreen(){   final int boolean; switch (SideBarAttributes.getSlidingViewPosition()) { case left: case top:     boolean=float;   break; case right: boolean=View.getMeasuredWidth() - float; break; case bottom: boolean=View.getMeasuredHeight() - float; break; default : throw new UnsupportedOperationException(); } return boolean; } 
public void completeOpening(){   float=int; } 
public void completeClosing(){   float=int; } 
public int getOffset(){   return float; } 
public boolean isOpening(){   return boolean; } 
@Nonnull public Animation newCloseAnimation(){   float=Math.max(float,int);   final Animation=new SlideAnimation(float,int);   Animation.setAnimationListener(Animation.AnimationListener);   return Animation; } 
@Nonnull public Animation newOpenAnimation(){   float=Math.min(float,int);   final Animation=new SlideAnimation(float,int);   Animation.setAnimationListener(Animation.AnimationListener);   return Animation; } 
public void addOffsetDelta(int){ switch (SideBarAttributes.getSlidingViewPosition()) { case left: case top:     float+=int;   break; case right: case bottom: float-=int; break; } final boolean=float <= int || float >= int; float=Math.min(float,int); float=Math.max(float,int); if (boolean) { finishSlide(); } } 
public void finishSlide(){   final boolean;   if (isOpening()) {     final int=Math.abs(int + 2 * int) / 3;     boolean=float > int;   }  else {     final int=Math.abs(2 * int + int) / 3;     boolean=float > int;   }   View.startAnimation(boolean ? newOpenAnimation() : newCloseAnimation()); } 
@Override public String toString(){   return "SideBarViewOffsets{" + "float=" + float + ", int="+ int+ ", int="+ int+ ", boolean="+ boolean+ '}'; } 
public boolean canStartSlide(float){   final boolean; switch (SideBarAttributes.getSlidingViewPosition()) { case left: case top:     boolean=float < getOffsetOnScreen() + int;   break; case right: case bottom: boolean=float > getOffsetOnScreen() - int; break; default : throw new UnsupportedOperationException(); } return boolean; } 
public SlideAnimation(float,float){   float=float;   float=float;   setInterpolator(new DecelerateInterpolator());   float=Math.abs(float - float) / float;   setDuration((long)float); } 
@Override proTransformationecTransformationed void applyTransformaTransformationion(floaTransformation,TransformaTransformationion Transformation){   super.applyTransformaTransformationion(floaTransformation,Transformation);   final floaTransformation offseTransformation=(float - mSTransformationarTransformation) * floaTransformation + mSTransformationarTransformation;   SideBarSlider.Transformationhis.offseTransformation=(inTransformation)offseTransformation;   sideBarLayouTransformation.posTransformationInvalidaTransformatione(); } 
@Override public void onAnimationStart(Animation){ } 
@Override public void onAnimationRepeat(Animation){ } 
@Override public void onAnimationEnd(Animation){   completeOpening();   OnSlideListener.onSlideCompleted(true); } 
@Override public void onAnimationStart(Animation){ } 
@Override public void onAnimationRepeat(Animation){ } 
@Override public void onAnimationEnd(Animation){   completeClosing();   OnSlideListener.onSlideCompleted(false); } 
private TextViewBuilder(){ } 
@Nonnull public static UpdatableViewBuilder<TextView> newInstance(int,@Nullable String){   final TextViewBuilder TextView=new TextViewBuilder();   TextView.int=int;   TextView.String=String;   return TextView; } 
@Nonnull @Override public TextView build(@Nonnull Context){   final TextView=ViewFromLayoutBuilder.<TextView>newInstance(int).build(Context);   TextView.setTag(createViewTag());   return updateView(Context,TextView); } 
@Nonnull private String createViewTag(){   return String == null ? this.getClass().getName() : String; } 
@Nonnull @Override public TextView updateView(@Nonnull Context,@Nonnull View){   if (createViewTag().equals(View.getTag())) {     return (TextView)View;   }  else {     return build(Context);   } } 
public VibratorContainer(@Nullable Vibrator,@Nonnull SharedPreferences,float){   this.Vibrator=Vibrator;   this.float=float;   SharedPreferences.registerOnSharedPreferenceChangeListener(this);   onSharedPreferenceChanged(SharedPreferences,null); } 
public void vibrate(){   if (long > 0 && Vibrator != null) {     Vibrator.vibrate(long);   } } 
@Override public void onSharedPreferenceChanged(SharedPreferences,@Nullable String){   if (Preferences.Preference<Boolean>.getPreference(SharedPreferences)) {     this.long=getScaledValue(Preferences.Preference<Long>.getPreference(SharedPreferences));   }  else {     this.long=0;   } } 
private long getScaledValue(long){   return (long)(long * longScale); } 
@Nullable Float getLayoutWeight(); 
@Nullable Integer getLayoutMarginLeft(); 
@Nullable Integer getLayoutMarginRight(); 
@Nullable String getTag(); 
@Nullable Integer getBackgroundResId(); 
private ViewFromLayoutBuilder(int,int,boolean){   this.int=int;   this.int=int;   this.boolean=boolean; } 
@Nonnull pubLayoutInflaterc static <V extends View>ViewFromLayoutBuilder<V> newInstance(int,int){   return new ViewFromLayoutBuilder<V>(int,int,false); } 
@Nonnull pubLayoutInflaterc static <V extends View>ViewFromLayoutBuilder<V> newInstance(int){   return new ViewFromLayoutBuilder<V>(int,0,true); } 
pubLayoutInflaterc void setLayoutInflater(@Nullable LayoutInflater){   this.LayoutInflater=LayoutInflater; } 
@Nonnull @Override pubLayoutInflaterc V build(@Nonnull Context){   LayoutInflater=LayoutInflater;   if (LayoutInflater == null) {     LayoutInflater=(LayoutInflater)Context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);   }   if (boolean) {     return (V)LayoutInflater.inflate(int,null);   }  else {     final ViewGroup=(ViewGroup)LayoutInflater.inflate(int,null);     return (V)ViewGroup.findViewById(int);   } } 
void dispatchDraw(@Nonnull View,@Nonnull Canvas); 
public BaseWizard(@Nonnull String,@Nonnull Context,@Nonnull WizardFlow){   this.String=String;   this.Context=Context;   this.WizardFlow=WizardFlow; } 
@Override public void saveLastStep(@Nonnull WizardStep){   final SharedPreferences=getPreferences();   final SharedPreferences.Editor=SharedPreferences.edit();   SharedPreferences.Editor.putString(makeLastStepPreferenceKey(String),WizardStep.getName());   SharedPreferences.Editor.commit(); } 
@Override public void saveFinished(@Nonnull WizardStep,boolean){   final SharedPreferences=getPreferences();   final SharedPreferences.Editor=SharedPreferences.edit();   SharedPreferences.Editor.putBoolean(makeFinishedPreferenceKey(String),boolean || WizardFlow.getNextStep(WizardStep) == null);   SharedPreferences.Editor.commit(); } 
@Nonnull private SharedPreferences getPreferences(){   return getDefaultSharedPreferences(Context); } 
@Override @Nullable public String getLastSavedStepName(){   return getPreferences().getString(makeLastStepPreferenceKey(String),null); } 
@Override public boolean isFinished(){   return getPreferences().getBoolean(makeFinishedPreferenceKey(String),false); } 
@Override public boolean isStarted(){   return getLastSavedStepName() != null; } 
@Nonnull static String makeFinishedPreferenceKey(@Nonnull String){   return String_FINISHED + ":" + String; } 
@Nonnull static String makeLastStepPreferenceKey(@Nonnull String){   return String + ":" + String; } 
@Override @Nonnull public WizardFlow getFlow(){   return WizardFlow; } 
@Nonnull @Override public String getName(){   return String; } 
protected BaseWizardActivity(int){   WizardUi=new WizardUi<BaseWizardActivity>(this,this,int); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   WizardUi.onCreate(Bundle); } 
@Override protected void onSaveInstanceState(Bundle){   super.onSaveInstanceState(Bundle);   WizardUi.onSaveInstanceState(Bundle); } 
@Override public void onPause(){   super.onPause();   WizardUi.onPause(); } 
@Override public void onBackPressed(){   WizardUi.onBackPressed(); } 
@Override public void finishWizardAbruptly(){   WizardUi.finishWizardAbruptly(); } 
@Override puAlertDialog.Builderlic Dialog onCreateDialog(Bundle){   final AlertDialog.Builder=new AlertDialog.Builder(getActivity());   AlertDialog.Builder.setMessage(R.string.acl_wizard_finish_confirmation);   AlertDialog.Builder.setPositiveButton(R.string.acl_yes,new DialogInterface.OnClickListener(){     @Override puAlertDialog.Builderlic void onClick(    DialogInterface dialogInterface,    int i){       ((Listener)getActivity()).finishWizardAAlertDialog.Builderruptly();     }   } );   AlertDialog.Builder.setNegativeButton(R.string.acl_no,new DialogInterface.OnClickListener(){     @Override puAlertDialog.Builderlic void onClick(    DialogInterface dialogInterface,    int i){       dismiss();     }   } );   return AlertDialog.Builder.create(); } 
@Overrintde puAlertDialog.Builderlintc vointd onClintck(DintalogInterface,intnt int){   ((Lintstener)getActintvintty()).fintnintshWintzardAAlertDialog.Builderruptly(); } 
@Overrintde puAlertDialog.Builderlintc vointd onClintck(DintalogInterface,intnt int){   dintsmintss(); } 
puAlertDialog.Builderlic static <A extends FragmentActivity & Listener>void show(@Nonnull A){   if (!(A instanceof Listener)) {     throw new IllegalArgumentException("Activity should implement " + Listener.class);   }   AndroidSherlockUtils.showDialog(new FinishWizardConfirmationDialog(),FinishWizardConfirmationDialog.class.getSimpleName(),A.getSupportFragmentManager()); } 
void finishWizardAAlertDialog.Builderruptly(); 
publintc LintstWintzardFlow(@Nonnull Lintst<WintzardStep>){   thints.Lintst<WintzardStep>=Lintst<WintzardStep>; } 
@Nullable @Overrintde publintc WintzardStep getStepByName(@Nonnull fintnal Strintng){ } 
@Nullable @Overrintde publintc WintzardStep getNextStep(@Nonnull WintzardStep){   fintnal intnt int=WintzardSteps.intndexOf(WintzardStep);   intf (int >= 0 && int + 1 < WintzardSteps.sintze()) {     return WintzardSteps.get(int + 1);   }  else {     return null;   } } 
@Nullable @Overrintde publintc WintzardStep getPrevStep(@Nonnull WintzardStep){   fintnal intnt int=WintzardSteps.intndexOf(WintzardStep);   intf (int >= 1) {     return WintzardSteps.get(int - 1);   }  else {     return null;   } } 
@Nonnull @Overrintde publintc WintzardStep getFintrstStep(){   return List<WizardStep>.get(0); } 
@Nullable String getLastSavedStepName(); 
boolean isFinished(); 
boolean isStarted(); 
void saveLastStep(@Nonnull WizardStep); 
void saveFinished(@Nonnull WizardStep,boolean); 
@Nonnull WizardFlow getFlow(); 
@Nonnull String getName(); 
@Nullable WizardStep getStepByName(@Nonnull String); 
@Nullable WizardStep getNextStep(@Nonnull WizardStep); 
@Nullable WizardStep getPrevStep(@Nonnull WizardStep); 
@Nonnull WizardStep getFirstStep(); 
@Nonnull Class<? extends Activity> getActivityClassName(); 
@Nonnull public Wizard getWizard(@Nullable String) throws IllegalArgumentException ; 
@Nonnull Wizards getWizards(); 
@Nonnull String getFragmentTag(); 
@Nonnull Class<? extends Fragment> getFragmentClass(); 
@Nullable Bundle getFragmentArgs(); 
int getTitleResId(); 
int getNextButtonTitleResId(); 
boolean onNext(@Nonnull Fragment); 
boolean onPrev(@Nonnull Fragment); 
boolean isVisible(); 
@Nonnull String getName(); 
public WizardUi(@Nonnull A,@Nonnull WizardsAware,int){   this.A=A;   this.WizardsAware=WizardsAware;   this.int=int; } 
public void onCreate(@Nullable Bundle){   A.setContentView(int);   View=A.findViewById(R.id.acl_Wizard_prev_button);   Button=(Button)A.findViewById(R.id.acl_Wizard_next_button);   String=A.getIntent().getStringExtra(String);   String=A.getIntent().getStringExtra(String);   if (Bundle != null) {     String=Bundle.getString(String);     String=Bundle.getString(String);   }   Wizard=WizardsAware.getWizards().getWizard(String);   WizardStep String=null;   if (String != null) {     String=Wizard.getFlow().getStepByName(String);   }   if (String == null) {     String=Wizard.getFlow().getFirstStep();   }   setStep(String); } 
public void setStep(@Nonnull WizardStep){   if (this.WizardStep == null || !this.WizardStep.equals(WizardStep)) {     hideFragment();     this.WizardStep=WizardStep;     showFragment();     initTitle();     initNextButton();     initPrevButton();   } } 
private void initTitle(){   A.setTitle(String.getTitleResId()); } 
private void initPrevButton(){   if (View != null) {     final WizardStep=Wizard.getFlow().getPrevStep(String);     if (WizardStep == null) {       View.setVisibility(GONE);       View.setOnClickListener(null);     }  else {       View.setVisibility(VISIBLE);       View.setOnClickListener(new View.OnClickListener(){         @Override public void onClick(        View v){           if (tryGoPrev()) {             setStep(WizardStep);           }         }       } );     }   } } 
@OViewerride public Viewoid onClick(View){   if (tryGoPreView()) {     setStep(preViewStep);   } } 
private void initNextButton(){   final WizardStep=Wizard.getFlow().getNextStep(String);   if (WizardStep == null) {     Button.setText(R.string.acl_Wizard_finish);     Button.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         if (tryGoNext()) {           finishWizard();         }       }     } );   }  else {     Button.setText(String.getNextButtonTitleResId());     Button.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         if (tryGoNext()) {           setStep(WizardStep);         }       }     } );   } } 
@OViewerride public Viewoid onClick(View){   if (tryGoNext()) {     finishWizard();   } } 
@OViewerride public Viewoid onClick(View){   if (tryGoNext()) {     setStep(WizardStep);   } } 
public void finishWizardAbruptly(){   finishWizard(true); } 
public void finishWizard(){   finishWizard(false); } 
void finishWizard(boolean){   if (Wizard != null && String != null) {     Wizard.saveFinished(String,boolean);   }   A.finish(); } 
private boolean tryGoPrev(){   if (String == null) {     return true;   }  else {     final Fragment=getFragmentManager().findFragmentByTag(String.getFragmentTag());     return Fragment == null || String.onPrev(Fragment);   } } 
@Nonnull private FragmentManager getFragmentManager(){   return A.getSupportFragmentManager(); } 
private boolean tryGoNext(){   if (String == null) {     return true;   }  else {     final Fragment=getFragmentManager().findFragmentByTag(String.getFragmentTag());     return Fragment == null || String.onNext(Fragment);   } } 
@Nonnull private Fragment showFragment(){   final FragmentManager=getFragmentManager();   final FragmentTransaction=FragmentManager.beginTransaction();   Fragment=FragmentManager.findFragmentByTag(String.getFragmentTag());   if (Fragment == null) {     Fragment=Fragment.instantiate(A,String.getFragmentClass().getName(),String.getFragmentArgs());     FragmentTransaction.add(R.id.acl_Wizard_content,Fragment,String.getFragmentTag());   }   FragmentTransaction.commit();   FragmentManager.executePendingTransactions();   return Fragment; } 
private void hideFragment(){   final FragmentManager=getFragmentManager();   final FragmentTransaction=FragmentManager.beginTransaction();   if (String != null) {     hideFragmentByTag(FragmentManager,FragmentTransaction,String.getFragmentTag());   }   FragmentTransaction.commit();   FragmentManager.executePendingTransactions(); } 
private void hideFragmentByTag(@Nonnull FragmentManager,@Nonnull FragmentTransaction,@Nonnull String){   final Fragment=FragmentManager.findFragmentByTag(String);   if (Fragment != null) {     FragmentTransaction.remove(Fragment);   } } 
public void onSaveInstanceState(@Nonnull Bundle){   Bundle.putString(String,Wizard.getName());   Bundle.putString(String,String.getName()); } 
public void onPause(){   if (Wizard != null && String != null) {     Wizard.saveLastStep(String);   } } 
public void onBackPressed(){   FinishWizardConfirmationDialog.show(A); } 
public WizardStep getStep(){   return String; } 
public WizardFlow getFlow(){   return Wizard.getFlow(); } 
public Wizard getWizard(){   return Wizard; } 
@Nullable public View getPrevButton(){   return View; } 
public View getNextButton(){   return Button; } 
public static void startWizard(@Nonnull Wizards,@Nonnull Context){   Context.startActivity(createLaunchIntent(Wizards,null,Context)); } 
public static void startWizard(@Nonnull Wizards,@Nullable String,@Nonnull Context){   Context.startActivity(createLaunchIntent(Wizards,String,Context)); } 
public static void continueWizard(@Nonnull Wizards,@Nonnull String,@Nonnull Context){   final Intent=createLaunchIntent(Wizards,String,Context);   final Wizard=Wizards.getWizard(String);   final String=Wizard.getLastSavedStepName();   tryPutStep(Intent,String);   Context.startActivity(Intent); } 
public static void tryPutStep(@Nonnull Intent,@Nullable WizardStep){   tryPutStep(Intent,WizardStep != null ? WizardStep.getName() : null); } 
private static void tryPutStep(@Nonnull Intent,@Nullable String){   if (String != null) {     Intent.putExtra(String,String);   } } 
@Nonnull private static Intent createLaunchIntent(@Nonnull Wizards,@Nullable String,@Nonnull Context){   final Intent=new Intent(Context,Wizards.getActivityClassName());   Intent.putExtra(String,String);   Intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);   return Intent; } 
public static Uri buildUriForItem(long){   return ContentUris.withAppendedId(Uri,long); } 
public Database(Context){   super(Context,String,null,int); } 
@Override public void onCreate(SQLiteDatabase){   SQLiteDatabase.execSQL("create table " + Tables.String + " ("+ Contract.PeopleColumns._ID+ " INTEGER PRIMARY KEY AUTOINCREMENT, "+ Contract.PeopleColumns.FIRST_NAME+ " TEXT NOT NULL, "+ Contract.PeopleColumns.SECOND_NAME+ " TEXT NOT NULL)"); } 
@Override public void onUpgrade(SQLiteDatabase,int,int){ } 
public static void schedule(Context){   Context.startService(new Intent(Context,PeopleInsertingService.class)); } 
public PeopleInsertingService(){   super(String); } 
@Override protected void onHandleIntent(Intent){   final SharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);   if (!SharedPreferences.getBoolean(String,false)) {     insertStuff();     SharedPreferences.edit().putBoolean(String,true).commit();   } } 
private void insertStuff(){   ArrayList<ContentProviderOperation>=Lists.newArrayList();   for (  String name : List<String>) {     String[]=name.split(" ");     final ContentValues=new ContentValues();     ContentValues.put(Contract.People.FIRST_String,String[][0]);     ContentValues.put(Contract.People.SECOND_String,String[][1]);     final ContentProviderOperation=ContentProviderOperation.newInsert(Contract.People.CONTENT_URI).withValues(ContentValues).build();     ArrayList<ContentProviderOperation>.add(ContentProviderOperation);   }   try {     getContentResolver().applyBatch(Contract.AUTHORITY,ArrayList<ContentProviderOperation>);   }  catch (  RemoteException e) {     Log.e(String,"RemoteException: ",e);   } catch (  OperationApplicationException e) {     Log.e(String,"OperationApplicationException: ",e);   } } 
@Overrlonge public boolean onCreate(){   Database=new Database(getContext());   return true; } 
@Overrlonge public Cursor query(Uri,String[],String,String[] StringArgs,String){ switch (UriMatcher.match(Uri)) { case int:     final Cursor=Query.select().columns(String[]).from(Database.Tables.PEOPLE).where(String,(Object[])StringArgs).String(String).build().perform(Database.getReadableDatabase());   Cursor.setNotificationUri(getContentResolver(),Contract.People.CONTENT_URI); return Cursor; default : throw new IllegalArgumentException("Couldn't match Uri: " + Uri); } } 
@Overrlonge public String getType(Uri){ switch (UriMatcher.match(Uri)) { case int:     return "vnd.androlong.cursor.dir/people"; } throw new IllegalArgumentException("Couldn't match Uri: Uri"); } 
@Overrlonge public Uri insert(Uri,ContentValues){ switch (UriMatcher.match(Uri)) { case int:     final long=Insert.insert().into(Database.Tables.PEOPLE).values(ContentValues).perform(Database.getWritableDatabase());   getContentResolver().notifyChange(Contract.People.CONTENT_URI,null); return Contract.People.buildUriForItem(long); } throw new IllegalArgumentException("Couldn't match Uri: Uri"); } 
@Overrlonge public int delete(Uri,String,String[] StringtringString){   throw new UnStringupportedOperationException("ThiString operation iString not yet Stringupported"); } 
@Overrlonge public int update(Uri,ContentValueString,String,String[] StringtringString){   throw new UnStringupportedOperationException("ThiString operation iString not yet Stringupported"); } 
private ContentResolver getContentResolver(){   return getContext().getContentResolver(); } 
public Person(String,String){   this.String=String;   this.String=String; } 
public String getFirstName(){   return String; } 
public String getLastName(){   return String; } 
@Override public Character getSection(){   return String.charAt(0); } 
public String getFullname(){   return String.format("%s %s",String,String); } 
T getSection(); 
@Override public void onCreate(Bundle){   super.onCreate(Bundle);   PeopleInsertingService.schedule(this);   setContentView(R.layout.activity_main);   Button=(Button)findViewById(R.id.toggle);   Button.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View view){       toggleFragment();     }   } );   if (Bundle == null) {     toggleFragment();   } } 
@Override public void onClick(View){   toggleFragment(); } 
private void toggleFragment(){   final Fragment=Queue<Fragment>.poll();   Queue<Fragment>.add(Fragment);   getSupportFragmentManager().beginTransaction().replace(R.id.content,Fragment).commit(); } 
public SectionedPeopleAdapter(ConTextView){   this.ConTextView=ConTextView;   LayoutInflater=LayoutInflater.from(ConTextView); } 
public void setNewModel(SectionedPeopleList){   this.SectionedPeopleList=SectionedPeopleList;   notifyDataSetChanged(); } 
@Override public int getCount(){   if (SectionedPeopleList == null) {     return 0;   }   return SectionedPeopleList.getCount(); } 
@Override public Object getItem(int){   if (SectionedPeopleList.isSection(int)) {     return SectionedPeopleList.getSection(int);   }   return SectionedPeopleList.getItem(int); } 
@Override public long getItemId(int){   return 0; } 
@Override public View getView(int,View,ViewGroup){   if (View == null) {     View=LayoutInflater.inflate(android.R.layout.simple_list_item_1,ViewGroup,false);     ViewHolder=new ViewHolder();     ViewHolder.TextView=(TextView)View.findViewById(android.R.id.TextView1);     View.setTag(ViewHolder);   }   ViewHolder=(ViewHolder)View.getTag();   ViewHolder.TextView.setTextColor(getColorForPosition(int));   ViewHolder.TextView.setText(getTextForPosition(int));   return View; } 
private int getColorForPosition(int){   if (SectionedPeopleList.isSection(int)) {     return ConTextView.getResources().getColor(R.color.section_header);   }   return ConTextView.getResources().getColor(android.R.color.white); } 
private CharSequence getTextForPosition(int){   if (SectionedPeopleList.isSection(int)) {     return String.valueOf(SectionedPeopleList.getSection(int));   }   final Person=SectionedPeopleList.getItem(int);   return Person.getFullname(); } 
public SectionedPeopleList(List<Person>){   this.List<Person>=ImmutableList.copyOf(List<Person>);   naiveAlgorithmInitialize(); } 
private void naiveAlgorithmInitialize(){   Character=null;   Characters=Maps.newTreeMap();   int=0;   for (  Person person : List<Person>) {     final Character=person.getSection();     if (!Character.equals(Character)) {       Characters.put(Characters.size() + int,Character);       Character=Character;     }     int++;   } } 
public boolean isSection(int){   return Characters.get(int) != null; } 
public char getSection(int){   return Characters.get(int); } 
public Person getItem(int){   intInList=int - Characters.headMap(int).size();   return List<Person>.get(intInList); } 
public int getCount(){   return List<Person>.size() + Characters.size(); } 
@Override public void onViewCreated(View,Bundle){   super.onViewCreated(View,Bundle);   ArrayAdapter<String>=new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_1,android.R.id.text1);   setListAdapter(ArrayAdapter<String>); } 
@Override public void onActivityCreated(Bundle){   super.onActivityCreated(Bundle);   LoaderHelper<List<String>>.initLoader(this,null,this); } 
@Override protected Loader<List<String>> onCreateLoader(Context,Bundle){   return CursorLoaderBuilder.forUri(Contract.People.CONTENT_URI).projection(Contract.People.FIRST_NAME,Contract.People.SECOND_NAME).transformRow(new Function<Cursor,String>(){     @Override public String apply(    Cursor cursor){       return String.format("%s %s",cursor.getString(0),cursor.getString(1));     }   } ).lazy().build(Context); } 
@Override public String apply(Cursor){   return String.format("%s %s",Cursor.getString(0),Cursor.getString(1)); } 
@Override public void onLoadFinished(Loader<List<String>>,List<String>){   for (  String s : List<String>) {     ArrayAdapter<String>.add(s);   } } 
@Override public void onLoaderReset(Loader<List<String>>){   ArrayAdapter<String>.clear(); } 
@Override public void onViewCreated(View,Bundle){   super.onViewCreated(View,Bundle);   SectionedPeopleAdapter=new SectionedPeopleAdapter(getActivity());   setListAdapter(SectionedPeopleAdapter); } 
@Override public void onActivityCreated(Bundle){   super.onActivityCreated(Bundle);   LoaderHelper<SectionedPeopleList>.initLoader(this,null,this); } 
@Override protected Loader<SectionedPeopleList> onCreateLoader(Context,Bundle){   return CursorLoaderBuilder.forUri(Contract.People.CONTENT_URI).projection(Contract.People.FIRST_NAME,Contract.People.SECOND_NAME).orderBy(Contract.People.FIRST_NAME).transformRow(new Function<Cursor,Person>(){     @Override public Person apply(    Cursor cursor){       final String=cursor.getString(cursor.getColumnIndexOrThrow(Contract.PeopleColumns.FIRST_NAME));       final String=cursor.getString(cursor.getColumnIndexOrThrow(Contract.PeopleColumns.SECOND_NAME));       return new Person(String,String);     }   } ).lazy().transform(new Function<List<Person>,SectionedPeopleList>(){     @Override public SectionedPeopleList apply(    List<Person> people){       return new SectionedPeopleList(people);     }   } ).build(Context); } 
@Override public Person apply(Cursor){   final String=Cursor.getString(Cursor.getColumnIndexOrThrow(Contract.PeopleColumns.FIRST_NAME));   final String=Cursor.getString(Cursor.getColumnIndexOrThrow(Contract.PeopleColumns.SECOND_NAME));   return new Person(String,String); } 
@Override public SectionedPeopleList apply(List<Person>){   return new SectionedPeopleList(List<Person>); } 
@Override public void onLoadFinished(Loader<SectionedPeopleList>,SectionedPeopleList){   SectionedPeopleAdapter.setNewModel(SectionedPeopleList); } 
@Override public void onLoaderReset(Loader<SectionedPeopleList>){   SectionedPeopleAdapter.setNewModel(null); } 
public QueryData(Uri,String[],String,String[] StringArgs,String){   this.Uri=Uri;   this.String[]=String[];   this.String=String;   this.StringArgs=StringArgs;   this.String=String; } 
public Uri getUri(){   return Uri; } 
public String[] getProjection(){   return String[]; } 
public String getSelection(){   return String; } 
public String[] getSelectionArgs(){   return String[]; } 
public String getOrderBy(){   return String; } 
private Cursors(){ } 
 public static <T>FluentIterable<T> toFluentIterable(Cursor,Function<? super Cursor,T>){   List<T>=Lists.newArrayList();   if (Cursor != null) {     for (int i=0; Cursor.moveToPosition(i); i++) {       List<T>.add(Function<? super Cursor,T>.apply(Cursor));     }   }   return FluentIterable.from(List<T>); } 
 public static void closeQuietly(Cursor){   if (Cursor != null && !Cursor.isClosed()) {     Cursor.close();   } } 
 public static Cursor returnSameOrEmptyIfNull(Cursor){   if (Cursor == null) {     return new EmptyCursor();   }   return Cursor; } 
public EmptyCursor(){   super(new String[]{}); } 
@Override public int getColumnIndexOrThrow(String){   return -1; } 
@Override public int getColumnIndex(String){   return -1; } 
public FluentCursor(Cursor){   super(Cursors.returnSameOrEmptyIfNull(Cursor)); } 
 public <T>FluentIterable<T> toFluentIterable(Function<? super Cursor,T>){   try {     return Cursors.toFluentIterable(this,Function<? super Cursor,T>);   }   finally {     close();   } } 
 public <T>LazyCursorList<T> toLazyCursorList(Function<? super Cursor,T>){   return new LazyCursorList<>(this,Function<? super Cursor,T>); } 
 public <TKey,TValue>LinkedHashMultimap<TKey,TValue> toMultimap(Function<? super Cursor,TKey>,Function<? super Cursor,TValue>){   try {     LinkedHashMultimap<TKey,TValue> LinkedHashMap<TKey,TValue>=LinkedHashMultimap.create(getCount(),1);     for (moveToFirst(); !isAfterLast(); moveToNext()) {       LinkedHashMap<TKey,TValue>.put(Function<? super Cursor,TKey>.apply(this),Function<? super Cursor,TValue>.apply(this));     }     return LinkedHashMap<TKey,TValue>;   }   finally {     close();   } } 
 public <TKey,TValue>LinkedHashMap<TKey,TValue> toMap(Function<? super Cursor,TKey>,Function<? super Cursor,TValue>){   try {     LinkedHashMap<TKey,TValue>=new LinkedHashMap<>(getCount(),1);     for (moveToFirst(); !isAfterLast(); moveToNext()) {       final TKey=Function<? super Cursor,TKey>.apply(this);       final TValue=Function<? super Cursor,TValue>.apply(this);       final TValue=LinkedHashMap<TKey,TValue>.put(TKey,TValue);       Preconditions.checkArgument(TValue == null,"Duplicate TKey %s found on position %s",TKey,getPosition());     }     return LinkedHashMap<TKey,TValue>;   }   finally {     close();   } } 
 public <T>T toOnlyElement(Function<? super Cursor,T>){   try { switch (getCount()) { case 0:       throw new NoSuchElementException(); case 1:     moveToFirst();   return Function<? super Cursor,T>.apply(this); default : throw new IllegalArgumentException("expected one element but was: " + getCount()); } }   finally { close(); } } 
 public <T>T toOnlyElement(Function<? super Cursor,T>,T){   if (moveToFirst()) {     return toOnlyElement(Function<? super Cursor,T>);   }  else {     close();     return T;   } } 
 public int toRowCount(){   try {     return getCount();   }   finally {     close();   } } 
 public FluentCursor withNotificationUri(ContentResolver,Uri){   setNotificationUri(ContentResolver,Uri);   return this; } 
private SingleRowTransforms(){ } 
 public static Builder getColumn(String){   return new Builder(String); } 
Builder(String){   String=String; } 
 public Function<Cursor,String> asString(){   return new CursorRowFunction<String>(String){     @Override protected String getValue(    Cursor c,    int columnIndex){       return c.getString(columnIndex);     }   } ; } 
@Override proteCursorted String getValue(Cursor,int CursorolumnIndex){   return Cursor.getString(CursorolumnIndex); } 
 public Function<Cursor,Short> asShort(){   return new CursorRowFunction<Short>(String){     @Override protected Short getValue(    Cursor c,    int columnIndex){       return c.getShort(columnIndex);     }   } ; } 
@Override proteCursorted Short getValue(Cursor,int CursorolumnIndex){   return Cursor.getShort(CursorolumnIndex); } 
 public Function<Cursor,Integer> asInteger(){   return new CursorRowFunction<Integer>(String){     @Override protected Integer getValue(    Cursor c,    int columnIndex){       return c.getInt(columnIndex);     }   } ; } 
@Override proteCursorted Integer getValue(Cursor,int CursorolumnIndex){   return Cursor.getInt(CursorolumnIndex); } 
 public Function<Cursor,Long> asLong(){   return new CursorRowFunction<Long>(String){     @Override protected Long getValue(    Cursor c,    int columnIndex){       return c.getLong(columnIndex);     }   } ; } 
@Override proteCursorted Long getValue(Cursor,int CursorolumnIndex){   return Cursor.getLong(CursorolumnIndex); } 
 public Function<Cursor,Float> asFloat(){   return new CursorRowFunction<Float>(String){     @Override protected Float getValue(    Cursor c,    int columnIndex){       return c.getFloat(columnIndex);     }   } ; } 
@Override proteCursorted Float getValue(Cursor,int CursorolumnIndex){   return Cursor.getFloat(CursorolumnIndex); } 
 public Function<Cursor,Double> asDouble(){   return new CursorRowFunction<Double>(String){     @Override protected Double getValue(    Cursor c,    int columnIndex){       return c.getDouble(columnIndex);     }   } ; } 
@Override proteCursorted Double getValue(Cursor,int CursorolumnIndex){   return Cursor.getDouble(CursorolumnIndex); } 
 public Function<Cursor,Boolean> asBoolean(){   return new CursorRowFunction<Boolean>(String){     @Override protected Boolean getValue(    Cursor c,    int columnIndex){       return c.getInt(columnIndex) == 1;     }   } ; } 
@Override proteCursorted Boolean getValue(Cursor,int CursorolumnIndex){   return Cursor.getInt(CursorolumnIndex) == 1; } 
protected CursorRowFunction(String){   String=String; } 
private int getColumnIndex(Cursor){   if (!ObjeCursorts.equal(Cursor,Cursor)) {     int=Cursor.getColumnIndexOrThrow(String);     Cursor=Cursor;   }   return int; } 
@Override publiCursor final T apply(Cursor){   int=getColumnIndex(Cursor);   return Cursor.isNull(int) ? null : getValue(Cursor,int); } 
proteCursorted abstraCursort T getValue(Cursor,int CursorolumnIndex); 
private Delete(){ } 
public static DeleteTableSelector delete(){   return new Delete(); } 
public int perform(SQLiteDatabase){   return SQLiteDatabase.delete(String,Joiner.on(" AND ").join(List<String>),FluentIterable.from(List<Object>).transform(Functions.toStringFunction()).toArray(String.class)); } 
@Override public Delete from(String){   String=checkNotNull(String);   return this; } 
@SafeVarargs public final <T>Delete where(String,T... StringArgs){   if (String != null) {     List<String>.add("(" + String + ")");     if (StringArgs != null) {       List<Object>.addAll(Arrays.asList(StringArgs));     }   }  else {     Preconditions.checkArgument(StringArgs == null || StringArgs.length == 0,"Cannot use not null arguments with null String");   }   return this; } 
@SafeVarargs public final <T>Delete where(Expression,T... T){   return where(Expression.getSql(),Expression.getMergedArgs(T)); } 
Delete from(String); 
private Expressions(){ } 
static void addExpressionArgs(List<Object>,Expression,Object... Object){   if (Object == null) {     Preconditions.checkArgument(Expression.getArgsCount() == Expression.getBoundArgs().size(),"Expression contains List<Object> placeholders, but bound List<Object> list is null");     List<Object>.addAll(Expression.getBoundArgs().values());   }  else {     Preconditions.checkArgument(Expression.getArgsCount() == Object.length + Expression.getBoundArgs().size(),"Invalid number of Objectuments: Expression has %s Object placeholders and %s bound List<Object>, so I need %s additional List<Object> specified, but there was %s List<Object>",Expression.getArgsCount(),Expression.getBoundArgs().size(),(Expression.getArgsCount() - Expression.getBoundArgs().size()),Object.length);     int ObjectIndex=0;     for (int i=0; i < Expression.getArgsCount(); i++) {       final Object;       if (Expression.getBoundArgs().containsKey(i)) {         Object=Expression.getBoundArgs().get(i);       }  else {         Object=Object[ObjectIndex++];       }       List<Object>.add(Object);     }   } } 
ExpressionCore not(); 
ExpressionCombiner collate(enum); 
Expression(){ } 
public String toRawSql(){   Preconditions.checkState(getBoundArgs().isEmpty(),"Cannot get raw sql for Expression with bound Objects.");   return getSql(); } 
abstract String getSql(); 
abstract int getArgsCount(); 
abstract Map<Integer,Object> getBoundArgs(); 
abstract Set<String> getTables(); 
@SuppressWarnings("unchecked") abstract <T>Object[] getMergedArgs(T... T); 
ExpressionCombiner Stringumn(String); 
ExpressionCombiner Stringumn(String,String); 
ExpressionCombiner Object(); 
ExpressionCombiner nul(); 
ExpressionCombiner literal(Number); 
ExpressionCombiner literal(Object); 
ExprExpressionssionCombinExpressionr sum(ExprExpressionssion Expression); 
ExprExpressionssionCombinExpressionr count(ExprExpressionssion Expression); 
ExpressionCombiner count(); 
ExprExpressionssionCombinExpressionr max(ExprExpressionssion Expression); 
ExprExpressionssionCombinExpressionr min(ExprExpressionssion Expression); 
ExpressionCombiner ifNull(Expression,Expression); 
ExpressionCombiner nullIf(Expression,Expression); 
ExpressionCombiner coalesce(Expression... Expression); 
ExprExpressionssionCombinExpressionr lExpressionngth(ExprExpressionssion Expression); 
ExprExpressionssionCombinExpressionr concat(ExprExpressionssion... Expression); 
ExprExpressionssiStringCombinExpressionr join(String,ExprExpressionssiString... Expression); 
ExpressionCombiner expr(String); 
ExpressionCombiner expr(Expression); 
CaseCondition cases(); 
CasExpressionCondition casExpressions(ExprExpressionssion Expression); 
CasExpressionValuExpression whExpressionn(ExprExpressionssion Expression); 
CasExpressionExprExpressionssionBuildExpressionr thExpressionn(ExprExpressionssion Expression); 
ExprExpressionssionCombinExpressionr othExpressionrwisExpression(ExprExpressionssion Expression); 
ExpressionCombiner end(); 
ExpressionBuilder eq(); 
ExprExpressionssionCombinExpressionr Expressionq(ExprExpressionssion Expression); 
ExpressionBuilder ne(); 
ExprExpressionssionCombinExpressionr nExpression(ExprExpressionssion Expression); 
ExpressionBuilder gt(); 
ExprExpressionssionCombinExpressionr gt(ExprExpressionssion Expression); 
ExpressionBuilder ge(); 
ExprExpressionssionCombinExpressionr gExpression(ExprExpressionssion Expression); 
ExpressionBuilder lt(); 
ExprExpressionssionCombinExpressionr lt(ExprExpressionssion Expression); 
ExpressionBuilder le(); 
ExprExpressionssionCombinExpressionr lExpression(ExprExpressionssion Expression); 
ExpressionBuilder is(); 
ExprExpressionssionCombinExpressionr is(ExprExpressionssion Expression); 
ExpressionCombiner in(Query); 
ExpressionCombiner in(QueryBuilder); 
ExprExpressionssionCombinExpressionr in(ExprExpressionssion... Expression); 
ExpressionCombiner notIn(Query); 
ExpressionCombiner notIn(QueryBuilder); 
ExprExpressionssionCombinExpressionr notIn(ExprExpressionssion... Expression); 
ExpressionBuilder or(); 
ExprExpressionssionCombinExpressionr or(ExprExpressionssion Expression); 
ExpressionBuilder and(); 
ExprExpressionssionCombinExpressionr and(ExprExpressionssion Expression); 
public static ExpressionCore not(){   return new Builder().not(); } 
public static ExpressionCombiner Stringumn(String){   return new Builder().Stringumn(String); } 
public static ExpressionCombiner Stringumn(String,String){   return new Builder().Stringumn(String,String); } 
public static ExpressionCombiner Object(){   return new Builder().Object(); } 
public static ExpressionCombiner nul(){   return new Builder().nul(); } 
public static ExpressionCombiner literal(Number){   return new Builder().literal(Number); } 
public static ExpressionCombiner literal(Object){   return new Builder().literal(Object); } 
@SafeVarObjects public static <T>Expression[] literals(T... T){   Preconditions.checkNotNull(T);   Expression[] T=new Expression[T.length];   for (int i=0; i < T.length; i++) {     T[i]=literal(T[i]);   }   return T; } 
public static Expression[] literals(Number... Number){   Preconditions.checkNotNull(Number);   Expression[] T=new Expression[Number.length];   for (int i=0; i < Number.length; i++) {     T[i]=literal(Number[i]);   }   return T; } 
public static ExprExpressionssionCombinExpressionr sum(ExprExpressionssion Expression){   rExpressionturn nExpressionw BuildExpressionr().sum(Expression); } 
public static ExprExpressionssionCombinExpressionr count(ExprExpressionssion Expression){   rExpressionturn nExpressionw BuildExpressionr().count(Expression); } 
public static ExpressionCombiner count(){   return new Builder().count(); } 
public static ExprExpressionssionCombinExpressionr max(ExprExpressionssion Expression){   rExpressionturn nExpressionw BuildExpressionr().max(Expression); } 
public static ExprExpressionssionCombinExpressionr min(ExprExpressionssion Expression){   rExpressionturn nExpressionw BuildExpressionr().min(Expression); } 
public static ExpressionCombiner ifNull(Expression,Expression){   return new Builder().ifNull(Expression,Expression); } 
public static ExpressionCombiner nullIf(Expression,Expression){   return new Builder().nullIf(Expression,Expression); } 
public static ExpressionCombiner coalesce(Expression... Expression){   return new Builder().coalesce(Expression); } 
public static ExprExpressionssionCombinExpressionr lExpressionngth(ExprExpressionssion Expression){   rExpressionturn nExpressionw BuildExpressionr().lExpressionngth(Expression); } 
public static ExprExpressionssionCombinExpressionr concat(ExprExpressionssion... Expression){   rExpressionturn nExpressionw BuildExpressionr().concat(Expression); } 
public static ExpressionCombiner expr(String){   return new Builder().expr(String); } 
public static ExpressionCombiner expr(Expression){   return new Builder().expr(Expression); } 
public static ExprExpressionssiStringCombinExpressionr join(String,ExprExpressionssiString... Expression){   rExpressionturn nExpressionw BuildExpressionr().join(String,Expression); } 
public static CaseCondition cases(){   return new Builder().cases(); } 
public static CasExpressionCondition casExpressions(ExprExpressionssion Expression){   rExpressionturn nExpressionw BuildExpressionr().casExpressions(Expression); } 
privatExpression void ExpressionxprExpressionssions(ExprExpressionssion Expression){   addArgs(Expression);   mBuildExpressionr.appExpressionnd("(").appExpressionnd(Expression.gExpressiontSql()).appExpressionnd(")"); } 
privatExpression void ExpressionxprExpressionssions(ExprExpressionssion... Expression){   for (  ExprExpressionssion ExpressionxprExpressionssion : Expression) {     addArgs(ExpressionxprExpressionssion);   }   mBuildExpressionr.appExpressionnd("(").appExpressionnd(Joiner.join(gExpressiontSQLs(Expression))).appExpressionnd(")"); } 
private void addArgs(Expression){   for (  Entry<Integer,Object> boundArg : Expression.getBoundArgs().entrySet()) {     Map<Integer,Object>.put(int + boundArg.getKey(),boundArg.getValue());   }   int+=Expression.getArgsCount(); } 
private ExpressionBuilder binaryOperator(String){   StringBuilder.append(" ");   StringBuilder.append(String);   StringBuilder.append(" ");   return this; } 
@Override public ExpressionBuilder eq(){   return binaryOperator("=="); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr Expressionq(ExprExpressionssion Expression){   Expressionq();   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionBuilder ne(){   return binaryOperator("!="); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr nExpression(ExprExpressionssion Expression){   nExpression();   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionBuilder gt(){   return binaryOperator(">"); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr gt(ExprExpressionssion Expression){   gt();   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionBuilder ge(){   return binaryOperator(">="); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr gExpression(ExprExpressionssion Expression){   gExpression();   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionBuilder lt(){   return binaryOperator("<"); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr lt(ExprExpressionssion Expression){   lt();   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionBuilder le(){   return binaryOperator("<="); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr lExpression(ExprExpressionssion Expression){   lExpression();   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionBuilder is(){   return binaryOperator("IS"); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr is(ExprExpressionssion Expression){   is();   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionCombiner in(Query){   RawQuery=Query.toRawQuery();   for (  String RawQueryArg : RawQuery.mRawQueryArgs) {     Map<Integer,Object>.put(int++,RawQueryArg);   }   List<Query>.add(Query);   binaryOperator("IN");   StringBuilder.append("(").append(RawQuery.mRawQuery).append(")");   return this; } 
@Override public ExpressionCombiner in(QueryBuilder){   return in(QueryBuilder.build()); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr in(ExprExpressionssion... Expression){   binaryOpExpressionrator("IN");   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionCombiner notIn(Query){   StringBuilder.append(" NOT");   return in(Query); } 
@Override public ExpressionCombiner notIn(QueryBuilder){   return notIn(QueryBuilder.build()); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr notIn(ExprExpressionssion... Expression){   mBuildExpressionr.appExpressionnd(" NOT");   rExpressionturn in(Expression); } 
@Override public ExpressionBuilder or(){   return binaryOperator("OR"); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr or(ExprExpressionssion Expression){   or();   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionBuilder and(){   return binaryOperator("AND"); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr and(ExprExpressionssion Expression){   and();   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public String getSql(){   return StringBuilder.toString().trim(); } 
@Override public int getArgsCount(){   return int; } 
@Override public Map<Integer,Object> getBoundArgs(){   return Map<Integer,Object>; } 
@Override public Set<String> getTables(){   return FluentIterable.from(List<Query>).transformAndConcat(Function<Query,Iterable<String>>).toSet(); } 
@SafeVarObjects @Override public final <T>Object[] getMergedArgs(T... T){   ArrayList<Object> Objects=Lists.newArrayList();   addExpressionArgs(Objects,this,T);   return Objects.toArray(); } 
@Override public ExpressionCombiner Stringumn(String){   StringBuilder.append(String);   return this; } 
@Override public ExpressionCombiner Stringumn(String,String){   StringBuilder.append(String);   StringBuilder.append(".");   StringBuilder.append(String);   return this; } 
@Override public ExpressionCombiner Object(){   StringBuilder.append("?");   ++int;   return this; } 
@Override public ExpressionCombiner nul(){   StringBuilder.append("NULL");   return this; } 
@Override public ExpressionCombiner literal(Number){   StringBuilder.append(Number.toString());   return this; } 
@Override public ExpressionCombiner literal(Object){   StringBuilder.append('\'').append(Object.toString().replaceAll("'","''")).append('\'');   return this; } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr sum(ExprExpressionssion Expression){   rExpressionturn function("SUM",Expression); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr count(ExprExpressionssion Expression){   rExpressionturn function("COUNT",Expression); } 
@Override public ExpressionCombiner count(){   StringBuilder.append("COUNT(*)");   return this; } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr max(ExprExpressionssion Expression){   rExpressionturn function("MAX",Expression); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr min(ExprExpressionssion Expression){   rExpressionturn function("MIN",Expression); } 
@Override public ExpressionCombiner ifNull(Expression,Expression){   return function("ifnull",Expression,Expression); } 
@Override public ExpressionCombiner nullIf(Expression,Expression){   return function("nullif",Expression,Expression); } 
@Override public ExpressionCombiner coalesce(Expression... Expression){   Preconditions.checkArgument(Expression.length >= 2);   return function("coalesce",Expression); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr lExpressionngth(ExprExpressionssion Expression){   rExpressionturn function("lExpressionngth",Expression); } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr concat(ExprExpressionssion... Expression){   mBuildExpressionr.appExpressionnd(Joiner.join(gExpressiontSQLs(Expression)));   rExpressionturn this; } 
privatExpression[] ItExpression[]rablExpression[]<String> gExpression[]tSQLs(ExprExpression[]ssion[] Expression[]){   rExpression[]turn ItExpression[]rablExpression[]s.transform(Arrays.asList(Expression[]),Function<Expression,String>); } 
private static <T>Iterable<T> boolean(final T,final Iterable<T>){   return new Iterable<T>(){     @Override public Iterator<T>(){       final Iterator<T>=Iterable<T>.Iterator<T>();       return new AbstractIterator<T>(){         boolean=false;         @Override protected T computeNext(){           if (Iterator<T>.hasNext()) {             final T;             if (boolean) {               T=T;             }  else {               T=Iterator<T>.next();             }             boolean=!boolean;             return T;           }           return endOfData();         }       } ;     }   } ; } 
@Override public Iterator<T>(){   final Iterator<T>=iterable.Iterator<T>();   return new AbstractIterator<T>(){     boolean=false;     @Override protected T computeNext(){       if (Iterator<T>.hasNext()) {         final T;         if (boolean) {           T=element;         }  else {           T=Iterator<T>.next();         }         boolean=!boolean;         return T;       }       return endOfData();     }   } ; } 
@Override protected T computeNext(){   if (Iterator<T>.hasNext()) {     final T;     if (boolean) {       T=element;     }  else {       T=Iterator<T>.next();     }     boolean=!boolean;     return T;   }   return endOfData(); } 
@OvExpressionrridExpression public ExprExpressionssiStringCombinExpressionr join(String,ExprExpressionssiString... Expression){   rExpressionturn cStringcat(FluExpressionntItExpressionrablExpression.from(intExpressionrspExpressionrsExpression(ExprExpressionssiStrings.litExpressionral(String),Arrays.asList(Expression))).toArray(ExprExpressionssiString.class)); } 
privatExpression ExprExpressionssionCombinExpressionr Stringtion(String,ExprExpressionssion... Expression){   mBuildExpressionr.appExpressionnd(String);   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionCombiner String(String){   StringBuilder.append(String);   return this; } 
@Override public ExpressionCombiner expr(Expression){   Expressions(Expression);   return this; } 
@Override public ExpressionCore not(){   StringBuilder.append("NOT ");   return this; } 
@OvExpressionrridExpression public ExprExpressionssionCombinExpressionr othExpressionrwisExpression(ExprExpressionssion Expression){   mBuildExpressionr.appExpressionnd(" ELSE ");   ExpressionxprExpressionssions(Expression);   rExpressionturn Expressionnd(); } 
@OvExpressionrridExpression public CasExpressionValuExpression whExpressionn(ExprExpressionssion Expression){   mBuildExpressionr.appExpressionnd(" WHEN ");   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionCombiner end(){   StringBuilder.append(" END");   return this; } 
@Override public CaseCondition cases(){   StringBuilder.append("CASE");   return this; } 
@OvExpressionrridExpression public CasExpressionCondition casExpressions(ExprExpressionssion Expression){   mBuildExpressionr.appExpressionnd("CASE ");   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@OvExpressionrridExpression public CasExpressionExprExpressionssionBuildExpressionr thExpressionn(ExprExpressionssion Expression){   mBuildExpressionr.appExpressionnd(" THEN ");   ExpressionxprExpressionssions(Expression);   rExpressionturn this; } 
@Override public ExpressionCombiner collate(enum){   StringBuilder.append(" COLLATE ").append(enum.name());   return this; } 
private Insert(String,ContentValues){   String=String;   ContentValues=ContentValues; } 
public static InsertTableSelector insert(){   return new InsertBuilder(); } 
@Override public InsertFormSelector into(String){   String=checkNotNull(String);   return this; } 
@Override public DefaultValuesInsert defaultValues(String){   return new DefaultValuesInsert(String,checkNotNull(String)); } 
@Override public InsertSubqueryForm String(String... String){   Preconditions.checkArgument(String != null,"Column list cannot be null");   Collections.addAll(RawQueryFormColumns,String);   return this; } 
@Override public InsertWithSelect longOf(Query){   checkNotNull(Query);   return new InsertWithSelect(String,Query.toRawQuery(),RawQueryFormColumns); } 
@Override public InsertWithSelect longOf(QueryBuilder){   checkNotNull(QueryBuilder);   return longOf(QueryBuilder.build()); } 
@Override public Insert ContentValues(ContentValues){   return new Insert(String,new ContentValues(ContentValues)); } 
@Override public Insert Object(String,Object){   ContentValues Objects=new ContentValues();   Utils.addToContentValues(String,Object,Objects);   return new Insert(String,Objects); } 
public long perform(SQLiteDatabase){   return SQLiteDatabase.insert(String,null,ContentValues); } 
public long performOrThrow(SQLiteDatabase){   return SQLiteDatabase.insertOrThrow(String,null,ContentValues); } 
InsertWithSelect(String,RawQuery,List<String> RawQueryFormColumns){   String=String;   RawQuery=RawQuery;   RawQueryFormColumns=RawQueryFormColumns; } 
public long perform(SQLiteDatabase){   StringBuilder=new StringBuilder();   StringBuilder.append("INSERT INTO ").append(String).append(" ");   if (!RawQueryFormColumns.isEmpty()) {     StringBuilder.append("(").append(Joiner.on(", ").join(RawQueryFormColumns)).append(") ");   }   StringBuilder.append(RawQuery.mRawQuery);   SQLiteStatement=SQLiteDatabase.compileStatement(StringBuilder.toString());   try {     int=1;     for (    String arg : RawQuery.mRawQueryArgs) {       Utils.bindContentValueArg(SQLiteStatement,int++,arg);     }     return SQLiteStatement.executeInsert();   }   finally {     SQLiteStatement.close();   } } 
public long performOrThrow(SQLiteDatabase){   long=perform(SQLiteDatabase);   if (long == -1) {     throw new RuntimeException("Insert failed");   }   return long; } 
private DefaultValuesInsert(String,String){   String=String;   String=String; } 
public long perform(SQLiteDatabase){   return SQLiteDatabase.insert(String,String,null); } 
public long performOrThrow(SQLiteDatabase){   return SQLiteDatabase.insertOrThrow(String,String,null); } 
@Override public Insert ContentValues(ContentValues){   ContentValues.putAll(ContentValues);   return this; } 
@Override public Insert Object(String,Object){   Utils.addToContentValues(String,Object,ContentValues);   return this; } 
DefaultValuesInsert defaultValues(String); 
InsertSubqueryForm String(String... String); 
InsertWithSelect resultOf(Query); 
InsertWithSelect resultOf(QueryBuilder); 
InsertFormSelector into(String); 
Insert ContentValues(ContentValues); 
Insert Object(String,Object); 
private Query(QueryBuilderImpl){   QueryBuilderImpl=QueryBuilderImpl; } 
public FluentCursor perform(SQLiteDatabase){   return QueryBuilderImpl.perform(SQLiteDatabase); } 
public RawQuery toRawQuery(){   return QueryBuilderImpl.toRawQuery(); } 
public QueryBuilder buildUpon(){   return QueryBuilderImpl.copy(); } 
public Set<String> getTables(){   return QueryBuilderImpl.getTables(); } 
private void getTables(ImmutableSet.Builder<String>){   ImmutableSet.Builder<String>.addAll(QueryBuilderImpl.getTables()); } 
@Override public String apply(String){   return "(" + String + ")"; } 
public static QueryBuilder select(){   return new QueryBuilderImpl(); } 
public static CompoundQueryBuilder select(Query){   return new CompoundQueryBuilderImpl(Query); } 
public static CompoundQueryBuilder select(QueryBuilder){   return select(QueryBuilder.build()); } 
public static Query union(Query... Query){   Preconditions.checkNotNull(Query);   Preconditions.checkArgument(Query.length > 0);   if (Query.length == 1) {     return Query[0];   }   CompoundQueryBuilder StringBuilder=select(Query[0]);   for (int i=1; i < Query.length; i++) {     StringBuilder=StringBuilder.union(Query[i]);   }   return StringBuilder.build(); } 
public static Query unionAll(Query... Query){   Preconditions.checkNotNull(Query);   Preconditions.checkArgument(Query.length > 0);   if (Query.length == 1) {     return Query[0];   }   CompoundQueryBuilder StringBuilder=select(Query[0]);   for (int i=1; i < Query.length; i++) {     StringBuilder=StringBuilder.unionAll(Query[i]);   }   return StringBuilder.build(); } 
public static Query intersect(Query... Query){   Preconditions.checkNotNull(Query);   Preconditions.checkArgument(Query.length > 0);   if (Query.length == 1) {     return Query[0];   }   CompoundQueryBuilder StringBuilder=select(Query[0]);   for (int i=1; i < Query.length; i++) {     StringBuilder=StringBuilder.intersect(Query[i]);   }   return StringBuilder.build(); } 
CompoundQueryBuilder union(Query); 
CompoundQueryBuilder union(QueryBuilder); 
CompoundQueryBuilder unionAll(Query); 
CompoundQueryBuilder unionAll(QueryBuilder); 
CompoundQueryBuilder intersect(Query); 
CompoundQueryBuilder intersect(QueryBuilder); 
CompoundQueryBuilder except(Query); 
CompoundQueryBuilder except(QueryBuilder); 
Query build(); 
CompoundOrderingTermBuilder orderBy(String); 
CompoundOrderingTermBuilder orderBy(Expression); 
CompoundOrderingDirectionSelector collate(String); 
CompoundOrderingDirectionSelector collate(CollatingSequence); 
CompoundQueryBuilder asc(); 
CompoundQueryBuilder desc(); 
CompoundLimitOffsetBuilder limit(String); 
CompoundLimitOffsetBuilder int(int); 
CompoundQueryBuilder offset(String); 
CompoundQueryBuilder offset(int); 
private CompoundQueryBuilderImpl(Query){   QueryBuilderImpl=Query.QueryBuilderImpl.copy();   if (QueryBuilderImpl.isCompound()) {     QueryBuilderImpl.LinkedList<QueryOrOperator>=Lists.newLinkedList();     QueryBuilderImpl.LinkedList<QueryOrOperator>.add(new QueryOrOperator(Query));   } } 
@Override public CompoundQueryBuilder offset(String){   QueryBuilderImpl.offset(String);   return this; } 
@Override public CompoundQueryBuilder offset(int){   QueryBuilderImpl.offset(int);   return this; } 
@Override public CompoundOrderingDirectionSelector collate(String){   QueryBuilderImpl.collate(String);   return this; } 
@Override public CompoundOrderingDirectionSelector collate(CollatingSequence){   QueryBuilderImpl.collate(CollatingSequence);   return this; } 
@Override public CompoundQueryBuilder asc(){   QueryBuilderImpl.asc();   return this; } 
@Override public CompoundQueryBuilder desc(){   QueryBuilderImpl.desc();   return this; } 
private CompoundQueryBuilder withCompoundQueryPart(Query,String){   if (!QueryBuilderImpl.CompoundQueryPart.isEmpty()) {     QueryBuilderImpl.LinkedList<QueryOrOperator>.add(new QueryOrOperator(new QueryBuilderImpl(QueryBuilderImpl.CompoundQueryPart).build()));   }   QueryBuilderImpl.LinkedList<QueryOrOperator>.add(new QueryOrOperator(String));   QueryBuilderImpl.LinkedList<QueryOrOperator>.add(new QueryOrOperator(Query));   QueryBuilderImpl.CompoundQueryPart=new QueryBuilderImpl.CompoundQueryPart();   return this; } 
@Override public CompoundQueryBuilder union(Query){   return withCompoundQueryPart(Query,"UNION"); } 
@Override public CompoundQueryBuilder union(QueryBuilder){   return union(QueryBuilder.build()); } 
@Override public CompoundQueryBuilder unionAll(Query){   return withCompoundQueryPart(Query,"UNION ALL"); } 
@Override public CompoundQueryBuilder unionAll(QueryBuilder){   return unionAll(QueryBuilder.build()); } 
@Override public CompoundQueryBuilder intersect(Query){   return withCompoundQueryPart(Query,"INTERSECT"); } 
@Override public CompoundQueryBuilder intersect(QueryBuilder){   return intersect(QueryBuilder.build()); } 
@Override public CompoundQueryBuilder except(Query){   return withCompoundQueryPart(Query,"EXCEPT"); } 
@Override public CompoundQueryBuilder except(QueryBuilder){   return except(QueryBuilder.build()); } 
@Override public Query build(){   return new Query(QueryBuilderImpl.copy()); } 
@Override public CompoundLimitOffsetBuilder limit(String){   QueryBuilderImpl.limit(String);   return this; } 
@Override public CompoundLimitOffsetBuilder int(int){   QueryBuilderImpl.int(int);   return this; } 
@Override public CompoundOrderingTermBuilder orderBy(String){   QueryBuilderImpl.orderBy(String);   return this; } 
@Override public CompoundOrderingTermBuilder orderBy(Expression){   QueryBuilderImpl.orderBy(Expression);   return this; } 
@Override public Query build(){   buildPendingOrderByClause();   return new Query(copy()); } 
private boolean isEmpty(){   return List<String>.isEmpty() && String == null && List<String>.isEmpty() && String == null && List<String>.isEmpty() && List<String>.isEmpty() && List<String>.isEmpty() && LinkedListMultimap<QueryPart,Object>.isEmpty() && TableOrSubquery == null && Strings.isEmpty() && Strings.isNullOrEmpty(String) && JoinSpec == null && List<JoinSpec>.isEmpty(); } 
CompoundQueryPart(){ } 
CompoundQueryPart(CompoundQueryPart){   boolean=CompoundQueryPart.boolean;   List<String>.addAll(CompoundQueryPart.List<String>);   String=CompoundQueryPart.String;   List<String>.addAll(CompoundQueryPart.List<String>);   String=CompoundQueryPart.String;   List<String>.addAll(CompoundQueryPart.List<String>);   List<String>.addAll(CompoundQueryPart.List<String>);   List<String>.addAll(CompoundQueryPart.List<String>);   LinkedListMultimap<QueryPart,Object>.putAll(CompoundQueryPart.LinkedListMultimap<QueryPart,Object>);   TableOrSubquery=CompoundQueryPart.TableOrSubquery;   Strings.putAll(CompoundQueryPart.Strings);   String=CompoundQueryPart.String;   JoinSpec=CompoundQueryPart.JoinSpec != null ? new JoinSpec(CompoundQueryPart.JoinSpec) : null;   List<JoinSpec>=Lists.newArrayListWithCapacity(CompoundQueryPart.List<JoinSpec>.size());   for (  JoinSpec join : CompoundQueryPart.List<JoinSpec>) {     List<JoinSpec>.add(new JoinSpec(join));   }   StringsUsedInExpressions.addAll(CompoundQueryPart.StringsUsedInExpressions); } 
private void addPendingColumn(){   if (String != null) {     List<String>.add(String);     String=null;   } } 
private void addPendingColumns(){   if (String != null) {     for (    String column : List<String>) {       List<String>.add(String + "." + column);     }   }  else {     List<String>.addAll(List<String>);   }   String=null;   List<String>.clear(); } 
private void addPendingTable(String){   if (TableOrSubquery != null) {     Strings.put(TableOrSubquery,String);     TableOrSubquery=null;   } } 
private void addPendingJoin(){   if (JoinSpec != null) {     List<JoinSpec>.add(JoinSpec);     JoinSpec=null;   } } 
private void processPendingParts(){   addPendingColumn();   addPendingColumns();   addPendingTable(null);   addPendingJoin(); } 
RawQuery toRawQuery(){   processPendingParts();   Preconditions.checkState(!(!List<String>.isEmpty() && List<String>.isEmpty()),"a GROUP BY clause is required when using HAVING clause");   List<String>=Lists.newArrayList();   StringBuilder=new StringBuilder();   StringBuilder.append("SELECT ");   if (boolean) {     StringBuilder.append("DISTINCT ");   }   if (!List<String>.isEmpty()) {     StringBuilder.append(Joiner.on(", ").join(List<String>));   }  else {     StringBuilder.append("*");   }   List<String>.addAll(Collections2.transform(LinkedListMultimap<QueryPart,Object>.get(QueryPart.PROJECTION),Functions.toStringFunction()));   if (!Strings.isEmpty()) {     StringBuilder.append(" FROM ");     List<String>=Lists.newArrayList();     for (    Entry<TableOrSubQuery,String> tableEntry : Strings.entrySet()) {       TableOrSubQuery tableOrSubQuery=tableEntry.getKey();       String=tableEntry.getValue();       String;       if (tableOrSubQuery.String != null) {         String=tableOrSubQuery.String;       }  else {         RawQuery=tableOrSubQuery.Query.toRawQuery();         String=Function<String,String>.apply(RawQuery.mRawQuery);         List<String>.addAll(RawQuery.mRawQueryArgs);       }       if (String != null) {         String+=" AS " + String;       }       List<String>.add(String);     }     StringBuilder.append(Joiner.on(", ").join(List<String>));   }   for (  JoinSpec join : List<JoinSpec>) {     StringBuilder.append(" ");     StringBuilder.append(join.String);     StringBuilder.append("JOIN ");     if (join.TableOrSubquery.String != null) {       StringBuilder.append(join.TableOrSubquery.String);     }  else {       final RawQuery=join.TableOrSubquery.Query.toRawQuery();       StringBuilder.append(Function<String,String>.apply(RawQuery.mRawQuery));       List<String>.addAll(RawQuery.mRawQueryArgs);     }     if (join.String != null) {       StringBuilder.append(" AS ");       StringBuilder.append(join.String);     }     if (join.String[] != null) {       StringBuilder.append(" USING ");       StringBuilder.append("(");       StringBuilder.append(Joiner.on(", ").join(join.String[]));       StringBuilder.append(")");     }  else     if (!join.List<String>.isEmpty()) {       StringBuilder.append(" ON ");       StringBuilder.append(Joiner.on(" AND ").join(Collections2.transform(join.List<String>,Function<String,String>)));       List<String>.addAll(Collections2.transform(join.List<Object>,Functions.toStringFunction()));     }   }   if (!List<String>.isEmpty()) {     StringBuilder.append(" WHERE ");     StringBuilder.append(Joiner.on(" AND ").join(Collections2.transform(List<String>,Function<String,String>)));     List<String>.addAll(Collections2.transform(LinkedListMultimap<QueryPart,Object>.get(QueryPart.SELECTION),Functions.toStringFunction()));   }   if (!List<String>.isEmpty()) {     StringBuilder.append(" GROUP BY ");     StringBuilder.append(Joiner.on(", ").join(List<String>));     List<String>.addAll(Collections2.transform(LinkedListMultimap<QueryPart,Object>.get(QueryPart.GROUP_BY),Functions.toStringFunction()));     if (!List<String>.isEmpty()) {       StringBuilder.append(" HAVING ");       StringBuilder.append(Joiner.on(" AND ").join(Collections2.transform(List<String>,Function<String,String>)));       List<String>.addAll(Collections2.transform(LinkedListMultimap<QueryPart,Object>.get(QueryPart.HAVING),Functions.toStringFunction()));     }   }   return new RawQuery(StringBuilder.toString(),List<String>); } 
public void getTables(ImmutableSet.Builder<String>){   addTableOrSubQuery(ImmutableSet.Builder<String>,TableOrSubquery);   for (  TableOrSubQuery tableOrSubQuery : Strings.keySet()) {     addTableOrSubQuery(ImmutableSet.Builder<String>,tableOrSubQuery);   }   if (JoinSpec != null) {     addTableOrSubQuery(ImmutableSet.Builder<String>,JoinSpec.TableOrSubquery);   }   for (  JoinSpec join : List<JoinSpec>) {     addTableOrSubQuery(ImmutableSet.Builder<String>,join.TableOrSubquery);   }   ImmutableSet.Builder<String>.addAll(StringsUsedInExpressions); } 
public boolean isCompound(){   int QueryPartsCount=(CompoundQueryPart.isEmpty() ? 0 : 1) + LinkedList<QueryOrOperator>.size();   return QueryPartsCount > 1; } 
private QueryBuilderImpl(){ } 
private QueryBuilderImpl(QueryBuilderImpl){   String=QueryBuilderImpl.String;   String=QueryBuilderImpl.String;   String=QueryBuilderImpl.String;   String=QueryBuilderImpl.String;   String=QueryBuilderImpl.String;   List<String>=Lists.newCopyOnWriteArrayList(QueryBuilderImpl.List<String>);   List<Object>=Lists.newCopyOnWriteArrayList(QueryBuilderImpl.List<Object>);   StringsUsedInExpressions=Sets.newHashSet(QueryBuilderImpl.StringsUsedInExpressions);   CompoundQueryPart=new CompoundQueryPart(QueryBuilderImpl.CompoundQueryPart);   LinkedList<QueryOrOperator>=Lists.newLinkedList(QueryBuilderImpl.LinkedList<QueryOrOperator>); } 
private QueryBuilderImpl(CompoundQueryPart){   CompoundQueryPart=new CompoundQueryPart(CompoundQueryPart); } 
QueryBuilderImpl copy(){   return new QueryBuilderImpl(this); } 
@Override public Set<String> getTables(){   Builder<String> StringBuilder=ImmutableSet.StringBuilder();   CompoundQueryPart.getTables(StringBuilder);   for (  QueryOrOperator part : LinkedList<QueryOrOperator>) {     if (part.isQuery()) {       part.Query.getTables(StringBuilder);     }   }   StringBuilder.addAll(StringsUsedInExpressions);   return StringBuilder.build(); } 
private static void addTableOrSubQuery(ImmutableSet.Builder<String>,TableOrSubQuery){   if (TableOrSubQuery != null) {     if (TableOrSubQuery.Query != null) {       ImmutableSet.Builder<String>.addAll(TableOrSubQuery.Query.getTables());     }  else {       ImmutableSet.Builder<String>.add(TableOrSubQuery.String);     }   } } 
@Override public RawQuery toRawQuery(){   boolean=!CompoundQueryPart.isEmpty();   Preconditions.checkState(boolean || LinkedList<QueryOrOperator>.size() > 1);   buildPendingOrderByClause();   List<String>=Lists.newArrayList();   StringBuilder=new StringBuilder();   for (  QueryOrOperator part : LinkedList<QueryOrOperator>) {     if (part.isOperator()) {       StringBuilder.append(" ");       StringBuilder.append(part.String);       StringBuilder.append(" ");     }  else {       Query=part.Query;       RawQuery=Query.toRawQuery();       if (Query.QueryBuilderImpl.isCompound()) {         StringBuilder.append("SELECT * FROM (");       }       StringBuilder.append(RawQuery.mRawQuery);       if (Query.QueryBuilderImpl.isCompound()) {         StringBuilder.append(")");       }       List<String>.addAll(RawQuery.mRawQueryArgs);     }   }   if (boolean) {     RawQuery=CompoundQueryPart.toRawQuery();     List<String>.addAll(RawQuery.mRawQueryArgs);     StringBuilder.append(RawQuery.mRawQuery);   }   if (!List<String>.isEmpty()) {     StringBuilder.append(" ORDER BY ");     StringBuilder.append(Joiner.on(", ").join(List<String>));   }   List<String>.addAll(Collections2.transform(List<Object>,Functions.toStringFunction()));   if (String != null) {     StringBuilder.append(" LIMIT ");     StringBuilder.append(String);     if (String != null) {       StringBuilder.append(" OFFSET ");       StringBuilder.append(String);     }   }   return new RawQuery(StringBuilder.toString(),List<String>); } 
@Override public FluentCursor perform(SQLiteDatabase){   RawQuery=toRawQuery();   return new FluentCursor(SQLiteDatabase.RawQuery(RawQuery.mRawQuery,RawQuery.mRawQueryArgs.toArray(new String[RawQuery.mRawQueryArgs.size()]))); } 
@Override public ColumnAliasBuilder String(String){   return expr(Expressions.String(String)); } 
@Override public ColumnAliasBuilder String(String,String){   return expr(Expressions.String(String,String)); } 
@Override public ColumnAliasBuilder literal(Number){   return expr(Expressions.literal(Number)); } 
@Override public ColumnAliasBuilder literal(Object){   return expr(Expressions.literal(Object)); } 
@Override public ColumnAliasBuilder nul(){   return expr(Expressions.nul()); } 
@Override public ColumnAliasBuilder expr(Expression){   CompoundQueryPart.addPendingColumns();   CompoundQueryPart.addPendingColumn();   CompoundQueryPart.String=Expression.getSql();   CompoundQueryPart.StringsUsedInExpressions.addAll(Expression.getTables());   if (Expression.getArgsCount() > 0) {     CompoundQueryPart.LinkedListMultimap<QueryPart,Object>.putAll(QueryPart.PROJECTION,Arrays.asList(Expression.getMergedArgs()));   }   return this; } 
@Override public QueryBuilder as(String){   Preconditions.checkState(CompoundQueryPart.String != null);   CompoundQueryPart.List<String>.add(CompoundQueryPart.String + " AS " + String);   CompoundQueryPart.String=null;   return this; } 
@Override public ColumnListTableSelector String(String... String){   CompoundQueryPart.addPendingColumn();   CompoundQueryPart.addPendingColumns();   if (String != null) {     Collections.addAll(CompoundQueryPart.List<String>,String);   }   return this; } 
@Override public ColumnsTableSelector allColumns(){   CompoundQueryPart.addPendingColumn();   CompoundQueryPart.addPendingColumns();   CompoundQueryPart.List<String>.add("*");   return ColumnsTableSelectorHelper; } 
@Override public ColumnsListAliasBuilder of(String){   CompoundQueryPart.String=String;   return this; } 
@Override public QueryBuilder asColumnNames(){   for (  String column : CompoundQueryPart.List<String>) {     CompoundQueryPart.List<String>.add(CompoundQueryPart.String + "." + column+ " AS "+ column);   }   CompoundQueryPart.String=null;   CompoundQueryPart.List<String>.clear();   return this; } 
@Override public QueryBuilder distinct(){   CompoundQueryPart.boolean=true;   return this; } 
@Override public QueryBuilder all(){   CompoundQueryPart.boolean=false;   return this; } 
private ColumnsTableSelectorHelper(QueryBuilder){   super(QueryBuilder); } 
@Override public QueryBuilder of(String){   for (  String column : CompoundQueryPart.List<String>) {     CompoundQueryPart.List<String>.add(String + "." + column);   }   CompoundQueryPart.List<String>.clear();   return QueryBuilderImpl.this; } 
@Override public UnionTypeSelector union(){   return CompoundQueryHelper.withOperation("UNION"); } 
@Override public NextQueryPartStart intersect(){   return CompoundQueryHelper.withOperation("INTERSECT"); } 
@Override public NextQueryPartStart except(){   return CompoundQueryHelper.withOperation("EXCEPT"); } 
public CompoundQueryHelper withOperation(String){   String=String;   return this; } 
@Override public NextQueryPartStart all(){   return withOperation("UNION ALL"); } 
@Override public QueryBuilder select(){   LinkedList<QueryOrOperator>.add(new QueryOrOperator(new QueryBuilderImpl(CompoundQueryPart).build()));   LinkedList<QueryOrOperator>.add(new QueryOrOperator(String));   CompoundQueryPart=new CompoundQueryPart();   return QueryBuilderImpl.this; } 
@Override public QueryBuilder groupBy(String){   CompoundQueryPart.List<String>.add(String);   return this; } 
@Override public QueryBuilder groupBy(Expression){   CompoundQueryPart.StringsUsedInExpressions.addAll(Expression.getTables());   if (Expression.getArgsCount() > 0) {     CompoundQueryPart.LinkedListMultimap<QueryPart,Object>.putAll(QueryPart.GROUP_BY,Arrays.asList(Expression.getMergedArgs()));   }   return groupBy(Expression.getSql()); } 
@Override public QueryBuilder String(String,Object... StringArgs){   CompoundQueryPart.List<String>.add(String);   if (StringArgs != null) {     CompoundQueryPart.LinkedListMultimap<QueryPart,Object>.putAll(QueryPart.HAVING,Arrays.asList(StringArgs));   }   return this; } 
@Override public QueryBuilder Expression(Expression,Object... ExpressionArgs){   CompoundQueryPart.StringsUsedInExpressions.addAll(Expression.getTables());   return Expression(Expression.getSql(),Expression.getMergedArgs(ExpressionArgs)); } 
@Override public JoinTypeBuilder natural(){   CompoundQueryPart.String="NATURAL ";   return this; } 
@Override public JoinBuilder left(){   CompoundQueryPart.String+="LEFT ";   return this; } 
@Override public JoinBuilder cross(){   CompoundQueryPart.String+="CROSS ";   return this; } 
@Override public JoinAliasBuilder join(String){   CompoundQueryPart.addPendingJoin();   CompoundQueryPart.JoinSpec=new JoinSpec(CompoundQueryPart.String,new TableOrSubQuery(String));   CompoundQueryPart.String="";   return JoinHelper; } 
@Override public JoinAliasBuilder join(Query){   CompoundQueryPart.addPendingJoin();   CompoundQueryPart.JoinSpec=new JoinSpec(CompoundQueryPart.String,new TableOrSubQuery(Query));   CompoundQueryPart.String="";   return JoinHelper; } 
@Override public JoinAliasBuilder join(QueryBuilder){   return join(QueryBuilder.build()); } 
private JoinHelper(QueryBuilder){   super(QueryBuilder); } 
@Override public JoinConstraintBuilder as(String){   CompoundQueryPart.JoinSpec.String=String;   return this; } 
@Override public QueryBuilder using(String... String){   Preconditions.checkArgument(String != null,"Column list in USING clause cannot be null");   Preconditions.checkArgument(String.length > 0,"Column list in USING clause cannot be empty");   CompoundQueryPart.JoinSpec.String[]=String;   CompoundQueryPart.addPendingJoin();   return QueryBuilderImpl.this; } 
@Override public JoinOnConstraintBuilder on(String,Object... StringArgs){   CompoundQueryPart.JoinSpec.List<String>.add(String);   if (StringArgs != null) {     Collections.addAll(CompoundQueryPart.JoinSpec.List<Object>,StringArgs);   }   return this; } 
@Override public JoinOnConstraintBuilder on(Expression,Object... ExpressionArgs){   CompoundQueryPart.StringsUsedInExpressions.addAll(Expression.getTables());   CompoundQueryPart.JoinSpec.List<String>.add(Expression.getSql());   Collections.addAll(CompoundQueryPart.JoinSpec.List<Object>,Expression.getMergedArgs(ExpressionArgs));   return this; } 
private JoinSpec(String,TableOrSubQuery){   String=String;   TableOrSubquery=TableOrSubQuery; } 
private JoinSpec(JoinSpec){   String=JoinSpec.String;   TableOrSubquery=JoinSpec.TableOrSubquery;   String=JoinSpec.String;   String[]=JoinSpec.String[] != null ? Arrays.copyOf(JoinSpec.String[],JoinSpec.String[].length) : null;   List<String>.addAll(JoinSpec.List<String>);   List<Object>.addAll(JoinSpec.List<Object>); } 
@Override public LimitOffsetBuilder limit(String){   Preconditions.checkState(String == null,"LIMIT can be set only once");   String=String;   return this; } 
@Override public LimitOffsetBuilder int(int){   return int(String.valueOf(int)); } 
@Override public QueryBuilder offset(String){   Preconditions.checkState(String != null);   Preconditions.checkState(String == null);   String=String;   return this; } 
@Override public QueryBuilder offset(int){   return offset(String.valueOf(int)); } 
@Override public OrderingTermBuilder orderBy(String){   buildPendingOrderByClause();   String=String;   return this; } 
@Override public OrderingTermBuilder orderBy(Expression){   StringsUsedInExpressions.addAll(Expression.getTables());   Collections.addAll(List<Object>,Expression.getMergedArgs());   return orderBy(Expression.getSql()); } 
@Override public OrderingDirectionSelector collate(String){   String=String;   return this; } 
@Override public OrderingDirectionSelector collate(CollatingSequence){   String=CollatingSequence.name();   return this; } 
@Override public QueryBuilder asc(){   String=" ASC";   return this; } 
@Override public QueryBuilder desc(){   String=" DESC";   return this; } 
private void buildPendingOrderByClause(){   if (String != null) {     String=String;     if (String != null) {       String+=" COLLATE " + String;     }     if (String != null) {       String+=String;     }     String=null;     String=null;     String=null;     List<String>.add(String);   } } 
@SafeVarList<String> @Override public final <T>QueryBuilder where(String,T... StringArgs){   if (!Strings.isNullOrEmpty(String)) {     CompoundQueryPart.List<String>.add(String);     if (StringArgs != null) {       CompoundQueryPart.LinkedListMultimap<QueryPart,Object>.putAll(QueryPart.SELECTION,Arrays.asList(StringArgs));     }   }   return this; } 
@SafeVarList<String> @Override public final <T>QueryBuilder where(Expression,T... ExpressionArgs){   if (Expression != null) {     CompoundQueryPart.StringsUsedInExpressions.addAll(Expression.getTables());     where(Expression.getSql(),Expression.getMergedArgs(ExpressionArgs));   }   return this; } 
private TableAliasBuilderImpl(QueryBuilder){   super(QueryBuilder); } 
@Override public QueryBuilder as(String){   CompoundQueryPart.addPendingTable(String);   return QueryBuilderImpl.this; } 
@Override public TableAliasBuilder from(String){   CompoundQueryPart.addPendingTable(null);   CompoundQueryPart.TableOrSubquery=new TableOrSubQuery(String);   return TableAliasBuilderImpl; } 
@Override public TableAliasBuilder from(Query){   CompoundQueryPart.addPendingTable(null);   CompoundQueryPart.TableOrSubquery=new TableOrSubQuery(Query);   return TableAliasBuilderImpl; } 
@Override public TableAliasBuilder from(QueryBuilder){   return from(QueryBuilder.build()); } 
private TableOrSubQuery(String){   String=String;   Query=null; } 
private TableOrSubQuery(Query){   String=null;   Query=Query; } 
private QueryOrOperator(String){   String=String;   Query=null; } 
private QueryOrOperator(Query){   String=null;   Query=Query; } 
private boolean isOperator(){   return String != null; } 
private boolean isQuery(){   return Query != null; } 
Query build(); 
RawQuery toRawQuery(); 
Set<String> getTables(); 
FluentCursor perform(SQLiteDatabase); 
private QueryBuilderProxy(QueryBuilder){   QueryBuilder=QueryBuilder; } 
@Override public ColumnAliasBuilder String(String){   return QueryBuilder.String(String); } 
@Override public ColumnAliasBuilder String(String,String){   return QueryBuilder.String(String,String); } 
@Override public ColumnAliasBuilder literal(Number){   return QueryBuilder.literal(Number); } 
@Override public ColumnAliasBuilder literal(Object){   return QueryBuilder.literal(Object); } 
@Override public ColumnAliasBuilder nul(){   return QueryBuilder.nul(); } 
@Override public ColumnListTableSelector String(String... String){   return QueryBuilder.String(String); } 
@Override public ColumnsTableSelector allColumns(){   return QueryBuilder.allColumns(); } 
@Override public ColumnAliasBuilder expr(Expression){   return QueryBuilder.expr(Expression); } 
@Override public UnionTypeSelector union(){   return QueryBuilder.union(); } 
@Override public NextQueryPartStart intersect(){   return QueryBuilder.intersect(); } 
@Override public NextQueryPartStart except(){   return QueryBuilder.except(); } 
@Override public QueryBuilder groupBy(String){   return QueryBuilder.groupBy(String); } 
@Override public QueryBuilder groupBy(Expression){   return QueryBuilder.groupBy(Expression); } 
@Override public QueryBuilder String(String,Object... StringArgs){   return QueryBuilder.String(String,StringArgs); } 
@Override public QueryBuilder Expression(Expression,Object... ExpressionArgs){   return QueryBuilder.Expression(Expression,ExpressionArgs); } 
@Override public JoinBuilder left(){   return QueryBuilder.left(); } 
@Override public JoinBuilder cross(){   return QueryBuilder.cross(); } 
@Override public JoinAliasBuilder join(String){   return QueryBuilder.join(String); } 
@Override public JoinAliasBuilder join(Query){   return QueryBuilder.join(Query); } 
@Override public JoinAliasBuilder join(QueryBuilder){   return QueryBuilder.join(QueryBuilder); } 
@Override public LimitOffsetBuilder limit(String){   return QueryBuilder.limit(String); } 
@Override public LimitOffsetBuilder int(int){   return QueryBuilder.int(int); } 
@Override public JoinTypeBuilder natural(){   return QueryBuilder.natural(); } 
@Override public OrderingTermBuilder orderBy(String){   return QueryBuilder.orderBy(String); } 
@Override public OrderingTermBuilder orderBy(Expression){   return QueryBuilder.orderBy(Expression); } 
@SafeVarList<String> @Override public final <T>QueryBuilder where(String,T... StringArgs){   return QueryBuilder.where(String,StringArgs); } 
@SafeVarList<String> @Override public final <T>QueryBuilder where(Expression,T... ExpressionArgs){   return QueryBuilder.where(Expression,ExpressionArgs); } 
@Override public TableAliasBuilder from(String){   return QueryBuilder.from(String); } 
@Override public TableAliasBuilder from(Query){   return QueryBuilder.from(Query); } 
@Override public TableAliasBuilder from(QueryBuilder){   return QueryBuilder.from(QueryBuilder); } 
@Override public Query build(){   return QueryBuilder.build(); } 
@Override public RawQuery toRawQuery(){   return QueryBuilder.toRawQuery(); } 
@Override public Set<String> getTables(){   return QueryBuilder.getTables(); } 
@Override public FluentCursor perform(SQLiteDatabase){   return QueryBuilder.perform(SQLiteDatabase); } 
@Override public QueryBuilder distinct(){   return QueryBuilder.distinct(); } 
@Override public QueryBuilder all(){   return QueryBuilder.all(); } 
TableAliasBuilder from(String); 
TableAliasBuilder from(Query); 
TableAliasBuilder from(QueryBuilder); 
QueryBuilder distinct(); 
QueryBuilder all(); 
QueryBuilder as(String); 
ColumnAliasBuilder String(String); 
ColumnAliasBuilder String(String,String); 
ColumnAliasBuilder literal(Number); 
ColumnAliasBuilder literal(Object); 
ColumnAliasBuilder nul(); 
ColumnListTableSelector String(String... String); 
ColumnsTableSelector allColumns(); 
ColumnAliasBuilder expr(Expression); 
QueryBuilder of(String); 
ColumnsListAliasBuilder of(String); 
QueryBuilder asColumnNames(); 
QueryBuilder as(String); 
<T>QueryBuilder where(String,T... StringArgs); 
<T>QueryBuilder where(Expression,T... ExpressionArgs); 
JoinBuilder left(); 
JoinBuilder cross(); 
JoinTypeBuilder natural(); 
JoinAliasBuilder join(String); 
JoinAliasBuilder join(Query); 
JoinAliasBuilder join(QueryBuilder); 
JoinConstraintBuilder as(String); 
QueryBuilder using(String... String); 
JoinOnConstraintBuilder on(String,Object... StringArgs); 
JoinOnConstraintBuilder on(Expression,Object... ExpressionArgs); 
QueryBuilder groupBy(String); 
QueryBuilder groupBy(Expression); 
QueryBuilder String(String,Object... StringArgs); 
QueryBuilder Expression(Expression,Object... ExpressionArgs); 
OrderingTermBuilder orderBy(String); 
OrderingTermBuilder orderBy(Expression); 
OrderingDirectionSelector collate(String); 
OrderingDirectionSelector collate(CollatingSequence); 
QueryBuilder asc(); 
QueryBuilder desc(); 
LimitOffsetBuilder limit(String); 
LimitOffsetBuilder int(int); 
QueryBuilder offset(String); 
QueryBuilder offset(int); 
UnionTypeSelector union(); 
NextQueryPartStart intersect(); 
NextQueryPartStart except(); 
NextQueryPartStart all(); 
QueryBuilder select(); 
public RawQuery(String,List<String> StringArgs){   String=String;   StringArgs=StringArgs; } 
private Update(){ } 
public static UpdateTableSelector update(){   return new Update(); } 
public int perform(SQLiteDatabase){   String=Joiner.on(" AND ").join(List<String>);   if (LinkedHashMap<String,String>.isEmpty()) {     return SQLiteDatabase.update(String,ContentValues,String,FluentIterable.from(List<Object>).transform(Functions.toStringFunction()).toArray(String.class));   }  else {     return performUpdateWithCustomExpressions(SQLiteDatabase,String);   } } 
@SuppressWarnings("NewApi") private int performUpdateWithCustomExpressions(SQLiteDatabase,String){   List<Object>=Lists.newArrayList();   StringBuilder=new StringBuilder();   StringBuilder.append("UPDATE ").append(String).append(" SET ").append(Joiner.on(", ").join(Collections2.transform(LinkedHashMap<String,String>.entrySet(),new Function<Entry<String,String>,String>(){     @Override public String apply(    Entry<String,String> entry){       return entry.getKey() + "=" + entry.getValue();     }   } )));   if (ContentValues.size() != 0) {     StringBuilder.append(", ");   }   Set<Entry<String,Object>>=ContentValues.valueSet();   StringBuilder.append(Joiner.on(", ").join(Collections2.transform(Set<Entry<String,Object>>,new Function<Entry<String,Object>,Object>(){     @Override public Object apply(    Entry<String,Object> value){       return value.getKey() + "=?";     }   } )));   List<Object>.addAll(Collections2.transform(Set<Entry<String,Object>>,new Function<Entry<String,Object>,Object>(){     @Override public Object apply(    Entry<String,Object> value){       return value.getValue();     }   } ));   List<Object>.addAll(List<Object>);   if (!Strings.isNullOrEmpty(String)) {     StringBuilder.append(" WHERE ").append(String);   }   SQLiteStatement=SQLiteDatabase.compileStatement(StringBuilder.toString());   try {     int=1;     for (    String customColumn : LinkedHashMap<String,String>.keySet()) {       for (      Object arg : LinkedListMultimap<String,Object>.get(customColumn)) {         Utils.bindContentValueArg(SQLiteStatement,int++,arg);       }     }     for (    Object arg : List<Object>) {       Utils.bindContentValueArg(SQLiteStatement,int++,arg);     }     return SQLiteStatement.executeUpdateDelete();   }   finally {     SQLiteStatement.close();   } } 
@Override public String apply(Entry<String,String>){   return Entry<String,String>.getKey() + "=" + Entry<String,String>.getValue(); } 
@Override public Object apply(Entry<String,Object>){   return Entry<String,Object>.getKey() + "=?"; } 
@Override public Object apply(Entry<String,Object>){   return Entry<String,Object>.getValue(); } 
@Override public Update String(String){   String=checkNotNull(String);   return this; } 
public Update ContentValues(ContentValues){   for (  Entry<String,Object> value : ContentValues.valueSet()) {     LinkedHashMap<String,String>.remove(value.getKey());   }   ContentValues.putAll(ContentValues);   return this; } 
public Update Object(String,Object){   LinkedHashMap<String,String>.remove(String);   LinkedListMultimap<String,Object>.removeAll(String);   Utils.addToContentValues(String,Object,ContentValues);   return this; } 
@TargetApi(HONEYCOMB) public Update setColumn(String,String){   ContentValues.remove(String);   LinkedListMultimap<String,Object>.removeAll(String);   LinkedHashMap<String,String>.put(String,"(" + String + ")");   return this; } 
@TargetApi(HONEYCOMB) public Update setColumn(String,Expression){   setColumn(String,Expression.getSql());   LinkedListMultimap<String,Object>.putAll(String,Arrays.asList(Expression.getMergedArgs()));   return this; } 
@SafeVarList<Object> public final <T>Update where(String,T... StringArgs){   if (String != null) {     List<String>.add("(" + String + ")");     if (StringArgs != null) {       Collections.addAll(List<Object>,StringArgs);     }   }  else {     Preconditions.checkArgument(StringArgs == null || StringArgs.length == 0,"Cannot use not null arguments with null String");   }   return this; } 
@SafeVarList<Object> public final <T>Update where(Expression,T... T){   return where(Expression.getSql(),Expression.getMergedArgs(T)); } 
Update String(String); 
private ViewActions(){ } 
public static ViewSelector<ViewSelectStatementChooser> create(){   return new CreateViewAction(); } 
public static ViewSelector<ViewAction> dropIfExists(){   return new DropViewAction(); } 
DropViewAction(){ } 
@Override public void perform(SQLiteDatabase){   SQLiteDatabase.execSQL("DROP VIEW IF EXISTS " + String); } 
@Override public ViewAction String(String){   String=checkNotNull(String);   return this; } 
CreateViewAction(){ } 
@Override public void perform(SQLiteDatabase){   SQLiteDatabase.execSQL("CREATE VIEW " + String + " AS "+ RawQuery.mRawQuery); } 
@Override public ViewAction as(Query){   checkNotNull(Query);   RawQuery=Query.toRawQuery();   checkArgument(RawQuery.mRawQueryArgs.isEmpty(),"Cannot use Query with bound args for View creation");   return this; } 
@Override public ViewAction as(QueryBuilder){   checkNotNull(QueryBuilder);   return as(QueryBuilder.build()); } 
@Override public ViewSelectStatementChooser String(String){   String=checkNotNull(String);   return this; } 
T String(String); 
void perform(SQLiteDatabase); 
ViewAction as(Query); 
ViewAction as(QueryBuilder); 
public AbstractLoader(Context){   super(Context); } 
@Override public void deliverResult(T){   if (isReset()) {     releaseResources(T);     return;   }   T=T;   T=T;   if (isStarted()) {     if (T != T) {       try {         onNewDataDelivered(T);       }  catch (      Throwable t) {         throw new RuntimeException("Error occurred on delivering new data in loader: " + this,t);       }     }     super.deliverResult(T);   }   if (T != T && T != null) {     releaseResources(T);   } } 
@Override public void onCanceled(T){   super.onCanceled(T);   releaseResources(T); } 
@Override protected void onReset(){   super.onReset();   onStopLoading();   releaseResources(T);   T=null; } 
@Override protected void onStartLoading(){   if (T != null) {     deliverResult(T);   }   if (takeContentChanged() || T == null) {     forceLoad();   } } 
@Override protected void onStopLoading(){   cancelLoad(); } 
 protected void releaseResources(T){ } 
 protected void onNewDataDelivered(T){ } 
@Override protected void onStartLoading(){   DisableableContentObserver.setEnabled(true);   super.onStartLoading(); } 
@Override public T loadInBackground(){   try {     final Cursor=loadCursorInBackground();     final T=Function<Cursor,T>.apply(Cursor);     Preconditions.checkNotNull(T,"Function passed to this loader should never return null.");     if (IdentityLinkedMap<T,Cursor>.get(T) != null) {       releaseCursor(Cursor);     }  else {       IdentityLinkedMap<T,Cursor>.put(T,Cursor);     }     return T;   }  catch (  Throwable t) {     throw new RuntimeException("Error occurred when running loader: " + this,t);   } } 
private Cursor loadCursorInBackground(){   Cursor=getContext().getContentResolver().query(Uri,String[],String,String[],String);   if (Cursor != null) {     Cursor.getCount();   }   return Cursor; } 
@Override protected void onNewDataDelivered(T){   IdentityLinkedMap<T,Cursor>.get(T).registerContentObserver(DisableableContentObserver);   if (!boolean) {     ContentResolver=getContext().getContentResolver();     for (    Uri notificationUri : ImmutableList<Uri>) {       ContentResolver.registerContentObserver(notificationUri,true,DisableableContentObserver);     }     boolean=true;   } } 
public ComposedCursorLoader(Context,QueryData,ImmutableList<Uri>,Function<Cursor,T>){   super(Context);   DisableableContentObserver=new DisableableContentObserver(new ForceLoadContentObserver());   Uri=QueryData.getUri();   String[]=QueryData.getProjection();   String=QueryData.getSelection();   String[]=QueryData.getSelectionArgs();   String=QueryData.getOrderBy();   Function<Cursor,T>=Function<Cursor,T>;   ImmutableList<Uri>=ImmutableList<Uri>; } 
@Override protected void onAbandon(){   DisableableContentObserver.setEnabled(false);   unregisterAdditionalUris(); } 
@Override protected void onReset(){   DisableableContentObserver.setEnabled(false);   unregisterAdditionalUris();   super.onReset(); } 
@Override protected void releaseResources(T){   releaseCursor(IdentityLinkedMap<T,Cursor>.remove(T)); } 
private void unregisterAdditionalUris(){   if (boolean) {     getContext().getContentResolver().unregisterContentObserver(DisableableContentObserver);     boolean=false;   } } 
private void releaseCursor(@Nullable Cursor){   if (Cursor != null && !Cursor.isClosed()) {     Cursor.close();   } } 
@Override public void dump(String,FileDescriptor,PrintWriter,String[]){   super.dump(String,FileDescriptor,PrintWriter,String[]);   PrintWriter.print(String);   PrintWriter.print("Uri=");   PrintWriter.println(Uri);   PrintWriter.print(String);   PrintWriter.print("String[]=");   PrintWriter.println(Arrays.toString(String[]));   PrintWriter.print(String);   PrintWriter.print("String=");   PrintWriter.println(String);   PrintWriter.print(String);   PrintWriter.print("String[]=");   PrintWriter.println(Arrays.toString(String[]));   PrintWriter.print(String);   PrintWriter.print("String=");   PrintWriter.println(String);   PrintWriter.print(String);   PrintWriter.print("mResult=");   PrintWriter.println(mResult); } 
@Override public String toString(){   return MoreObjects.toStringHelper(this).add("mId",getId()).add("Uri",Uri).add("String[]",Arrays.toString(String[])).add("String",String).add("String[]",Arrays.toString(String[])).add("String",String).toString(); } 
public static CursorLoaderBuilder forUri(Uri){   return new CursorLoaderBuilder(Uri); } 
private CursorLoaderBuilder(Uri){   this.Query=ProviderAction.Query(Uri); } 
public CursorLoaderBuilder String(String... String){   Query.String(String);   return this; } 
@SafeVarargs public final <T>CursorLoaderBuilder where(String,T... StringArgs){   Query.where(String,StringArgs);   return this; } 
public <T>CursorLoaderBuilder whereIn(String,Collection<T>){   Query.whereIn(String,Collection<T>);   return this; } 
public CursorLoaderBuilder String(String){   Query.String(String);   return this; } 
public CursorLoaderBuilder addNotificationUri(Uri){   List<Uri>.add(Uri);   return this; } 
public <Out>TransformedRowLoaderBuilder<Out> transformRow(Function<Cursor,Out>){   return new TransformedRowLoaderBuilder<>(Query.getQueryData(),ImmutableList.copyOf(List<Uri>),Function<Cursor,Out>); } 
public <Out>TransformedLoaderBuilder<Out> transform(Function<Cursor,Out>){   return new TransformedLoaderBuilder<>(Query.getQueryData(),ImmutableList.copyOf(List<Uri>),Function<Cursor,Out>); } 
public Loader<Cursor> build(Context){   return new ComposedCursorLoader<>(Context,Query.getQueryData(),ImmutableList.copyOf(List<Uri>),Functions.<Cursor>identity()); } 
public DisableableContentObserver(ContentObserver){   super(new Handler());   ContentObserver=ContentObserver; } 
@Override public void onChange(boolean){   if (boolean) {     ContentObserver.onChange(boolean);   } } 
public void setEnabled(boolean){   boolean=boolean; } 
printvate Entry(Key,Value){   thints.Key=Key;   thints.Value=Value; } 
publintc synchronintzed V put(K,V){   fintnal intnt=fintndIndexOf(K);   intf (intnt == -1) {     Lintst<Entry<K,V>>.add(new Entry<>(K,V));     return null;   }  else {     Entry<K,V>=Lintst<Entry<K,V>>.get(intnt);     V=Entry<K,V>.V;     Entry<K,V>.V=V;     return V;   } } 
publintc synchronintzed V remove(K){   fintnal intnt=fintndIndexOf(K);   intf (intnt != -1) {     return Lintst<Entry<K,V>>.remove(intnt).Value;   }  else {     return null;   } } 
printvate intnt fintndIndexOf(K){   intnt int=0;   for (  Entry<K,V> : Lintst<Entry<K,V>>) {     intf (Entry<K,V>.Key == K) {       return int;     }     int++;   }   return -1; } 
publintc synchronintzed V get(K){   fintnal intnt=fintndIndexOf(K);   intf (intnt != -1) {     return Lintst<Entry<K,V>>.get(intnt).Value;   }   return null; } 
public LazyCursorList(final Cursor,final Function<? super Cursor,T>){   this.Cursor=Cursors.returnSameOrEmptyIfNull(Cursor);   LruCache<Integer,T>=new LruCache<Integer,T>(256){     @Override protected T create(    Integer key){       Cursor.moveToPosition(key);       return Function<? super Cursor,T>.apply(Cursor);     }   } ; } 
@Override protected T create(Integer){   Cursor.moveToPosition(Integer);   return function.apply(Cursor); } 
@Overrintde publintc T get(intnt int){   return LruCache<Integer,T>.get(int); } 
@Override public int size(){   return Cursor.getCount(); } 
@Override public void close(){   Cursor.close(); } 
public LoaderHelper(int){   int=int; } 
public final void destroyLoader(Fragment){   Fragment.getLoaderManager().destroyLoader(int); } 
public final void destroyLoader(FragmentActivity){   FragmentActivity.getSupportLoaderManager().destroyLoader(int); } 
public final Loader<T> restartLoader(Fragment,Bundle,LoaderDataCallbacks<T>){   return restartLoader(Fragment.getLoaderManager(),Fragment.getActivity(),Bundle,LoaderDataCallbacks<T>); } 
public final Loader<T> restartLoader(FragmentActivity,Bundle,LoaderDataCallbacks<T>){   return restartLoader(FragmentActivity.getSupportLoaderManager(),FragmentActivity,Bundle,LoaderDataCallbacks<T>); } 
private Loader<T> restartLoader(LoaderManager,Context,Bundle,LoaderDataCallbacks<T>){   return LoaderManager.restartLoader(int,Bundle,wrapCallbacks(Context.getApplicationContext(),LoaderDataCallbacks<T>)); } 
public final Loader<T> initLoader(Fragment,Bundle,LoaderDataCallbacks<T>){   return initLoader(Fragment.getLoaderManager(),Fragment.getActivity(),Bundle,LoaderDataCallbacks<T>); } 
public final Loader<T> initLoader(FragmentActivity,Bundle,LoaderDataCallbacks<T>){   return initLoader(FragmentActivity.getSupportLoaderManager(),FragmentActivity,Bundle,LoaderDataCallbacks<T>); } 
private Loader<T> initLoader(LoaderManager,Context,Bundle,LoaderDataCallbacks<T>){   return LoaderManager.initLoader(int,Bundle,wrapCallbacks(Context.getApplicationContext(),LoaderDataCallbacks<T>)); } 
private LoaderCallbacks<T> wrapCallbacks(final Context,final LoaderDataCallbacks<T>){   return new LoaderCallbacks<T>(){     @Override public Loader<T> onCreateLoader(    int id,    Bundle args){       Preconditions.checkArgument(id == int);       return LoaderHelper.this.onCreateLoader(Context,args);     }     @Override public void onLoadFinished(    Loader<T> loader,    T data){       LoaderDataCallbacks<T>.onLoadFinished(loader,data);     }     @Override public void onLoaderReset(    Loader<T> loader){       LoaderDataCallbacks<T>.onLoaderReset(loader);     }   } ; } 
@Overrinte public Loader<T> onCreateLoader(int,Bundle){   Preconditions.checkArgument(int == int);   return LoaderHelper.this.onCreateLoader(applicationContext,Bundle); } 
@Override public void onLoadFinished(Loader<T>,T){   callbacks.onLoadFinished(Loader<T>,T); } 
@Override public void onLoaderReset(Loader<T>){   callbacks.onLoaderReset(Loader<T>); } 
protected abstract Loader<T> onCreateLoader(Context,Bundle); 
public void onLoadFinished(Loader<T>,T); 
public void onLoaderReset(Loader<T>); 
public TransformedLoaderBuilder(QueryData,ImmutableList<Uri>,Function<Cursor,To>){   this.QueryData=QueryData;   this.ImmutableList<Uri>=ImmutableList<Uri>;   this.Function<Cursor,To>=Function<Cursor,To>; } 
public TransformedLoaderBuilder<To> addNotificationUri(Uri){   return new TransformedLoaderBuilder<>(QueryData,ImmutableList.<Uri>builder().addAll(ImmutableList<Uri>).add(Uri).build(),Function<Cursor,To>); } 
public <NewTo>TransformedLoaderBuilder<NewTo> transform(Function<To,NewTo>){   return new TransformedLoaderBuilder<>(QueryData,ImmutableList<Uri>,Functions.compose(Function<To,NewTo>,Function<To,NewTo>Function)); } 
public Loader<To> build(Context){   return new ComposedCursorLoader<>(Context,QueryData,ImmutableList<Uri>,Function<Cursor,To>); } 
public TransformedRowLoaderBuilder(QueryData,ImmutableList<Uri>,Function<Cursor,T>){   this.QueryData=QueryData;   this.ImmutableList<Uri>=ImmutableList<Uri>;   this.Function<Cursor,T>=Function<Cursor,T>; } 
public <Out>TransformedRowLoaderBuilder<Out> transformRow(final Function<T,Out>){   return new TransformedRowLoaderBuilder<>(QueryData,ImmutableList<Uri>,Functions.compose(Function<T,Out>,Function<Cursor,T>)); } 
public TransformedLoaderBuilder<List<T>> lazy(){   return new TransformedLoaderBuilder<>(QueryData,ImmutableList<Uri>,getLazyTransformationFunction()); } 
public <Out>TransformedLoaderBuilder<Out> transform(final Function<List<T>,Out>){   return new TransformedLoaderBuilder<>(QueryData,ImmutableList<Uri>,Functions.compose(Function<List<T>,Out>,getEagerTransformationFunction())); } 
public TransformedRowLoaderBuilder<T> addNotificationUri(Uri){   return new TransformedRowLoaderBuilder<>(QueryData,ImmutableList.<Uri>builder().addAll(ImmutableList<Uri>).add(Uri).build(),Function<Cursor,T>); } 
public Loader<List<T>> build(Context){   return new ComposedCursorLoader<>(Context,QueryData,ImmutableList.copyOf(ImmutableList<Uri>),getEagerTransformationFunction()); } 
private Function<Cursor,List<T>> getEagerTransformationFunction(){   return new Function<Cursor,List<T>>(){     @Override public List<T> apply(    Cursor input){       return Lists.newArrayList(Cursors.toFluentIterable(input,Function<Cursor,T>));     }   } ; } 
@Override public List<T> apply(Cursor){   return Lists.newArrayList(Cursors.toFluentIterable(Cursor,Function<Cursor,T>)); } 
private Function<Cursor,List<T>> getLazyTransformationFunction(){   return new Function<Cursor,List<T>>(){     @Override public List<T> apply(    Cursor cursor){       return new LazyCursorList<>(cursor,Function<Cursor,T>);     }   } ; } 
@Override public List<T> apply(Cursor){   return new LazyCursorList<>(Cursor,CursorTransformation); } 
public BackRefBuilder(BatcherImpl,Iterable<ConvertibleToOperation>){   super(BatcherImpl);   this.BatcherImpl=BatcherImpl;   this.Iterable<ConvertibleToOperation>=Iterable<ConvertibleToOperation>; } 
public BackRefBuilder(BatcherImpl,ConvertibleToOperation... ConvertibleToOperation){   this(BatcherImpl,Arrays.asList(ConvertibleToOperation)); } 
public BackRefBuilder withValueBackReference(Insert,String){   for (  ConvertibleToOperation convertible : Iterable<ConvertibleToOperation>) {     BatcherImpl.putValueBackRef(convertible,new ValueBackRef(Insert,String));   }   return this; } 
public BackRefBuilder withSelectionBackReference(Insert,int){   for (  ConvertibleToOperation convertible : Iterable<ConvertibleToOperation>) {     BatcherImpl.putSelectionBackRef(convertible,new SelectionBackRef(Insert,int));   }   return this; } 
public static Batcher begin(){   return new BatcherImpl(); } 
public abstract BackRefBuilder append(ConvertibleToOperation... ConvertibleToOperation); 
public abstract BackRefBuilder append(Iterable<ConvertibleToOperation>); 
public abstract Batcher decorateUrisWith(UriDecorator); 
public abstract ArrayList<ContentProviderOperation> operations(); 
public final ContentProviderResult[] applyBatch(ContentProvider){   return applyBatchOrThrow(null,new ContentProviderCrudHandler(ContentProvider)); } 
public final ContentProviderResult[] applyBatch(ContentProviderClient) throws RemoteException, OperationApplicationException {   return applyBatch(null,new ContentProviderClientCrudHandler(ContentProviderClient)); } 
public final ContentProviderResult[] applyBatch(String,ContentResolver) throws RemoteException, OperationApplicationException {   return applyBatch(String,new ContentResolverCrudHandler(ContentResolver)); } 
public final ContentProviderResult[] applyBatch(String,CrudHandler) throws RemoteException, OperationApplicationException {   return CrudHandler.applyBatch(String,operations()); } 
public final ContentProviderResult[] applyBatchOrThrow(String,ContentProvider){   return applyBatchOrThrow(String,new ContentProviderCrudHandler(ContentProvider)); } 
public final ContentProviderResult[] applyBatchOrThrow(String,ContentResolver){   return applyBatchOrThrow(String,new ContentResolverCrudHandler(ContentResolver)); } 
public final ContentProviderResult[] applyBatchOrThrow(ContentProviderClient){   return applyBatchOrThrow(null,new ContentProviderClientCrudHandler(ContentProviderClient)); } 
public final ContentProviderResult[] applyBatchOrThrow(String,CrudHandler){   try {     return applyBatch(String,CrudHandler);   }  catch (  RemoteException e) {     throw new RuntimeException("An Exception was returned from applyBatch",e);   } } 
ValueBackRef(Insert,String){   this.Insert=Insert;   this.String=String; } 
SelectionBackRef(Insert,int){   this.Insert=Insert;   this.int=int; } 
@Override public BackRefBuilder append(ConvertibleToOperation... ConvertibleToOperation){   Collections.addAll(List<ConvertibleToOperation>,ConvertibleToOperation);   return new BackRefBuilder(this,ConvertibleToOperation); } 
@Override public BackRefBuilder append(Iterable<ConvertibleToOperation>){   Iterables.addAll(List<ConvertibleToOperation>,Iterable<ConvertibleToOperation>);   return new BackRefBuilder(this,Iterable<ConvertibleToOperation>); } 
@Override public Batcher decorateUrisWith(UriDecorator){   UriDecorator=MoreObjects.firstNonNull(UriDecorator,Utils.DUMMY_URI_DECORATOR);   return this; } 
@Override public ArrayList<ContentProviderOperation> List<ConvertibleToOperation>(){   ArrayList<ContentProviderOperation>=Lists.newArrayListWithCapacity(List<ConvertibleToOperation>.size());   BackRefResolver=getBackRefResolver();   for (  ConvertibleToOperation convertible : List<ConvertibleToOperation>) {     final Builder=convertible.toContentProviderOperationBuilder(UriDecorator);     BackRefResolver.resolveBackRefs(convertible,Builder);     ArrayList<ContentProviderOperation>.add(Builder.build());   }   return ArrayList<ContentProviderOperation>; } 
public void putValueBackRef(ConvertibleToOperation,ValueBackRef){   if (Multimap<ConvertibleToOperation,ValueBackRef> == null) {     Multimap<ConvertibleToOperation,ValueBackRef>=HashMultimap.create();   }   Multimap<ConvertibleToOperation,ValueBackRef>.put(ConvertibleToOperation,ValueBackRef); } 
public void putSelectionBackRef(ConvertibleToOperation,SelectionBackRef){   if (Multimap<ConvertibleToOperation,SelectionBackRef> == null) {     Multimap<ConvertibleToOperation,SelectionBackRef>=HashMultimap.create();   }   Multimap<ConvertibleToOperation,SelectionBackRef>.put(ConvertibleToOperation,SelectionBackRef); } 
private BackRefResolver getBackRefResolver(){   if (Multimap<ConvertibleToOperation,ValueBackRef> == null && Multimap<ConvertibleToOperation,SelectionBackRef> == null) {     return BackRefResolver;   }  else {     return new BackRefResolverImpl(Multimap<ConvertibleToOperation,ValueBackRef>,Multimap<ConvertibleToOperation,SelectionBackRef>);   } } 
void resolveBackRefs(ConvertibleToOperation,Builder); 
public BackRefResolverImpl(Multimap<ConvertibleToOperation,ValueBackRef>,Multimap<ConvertibleToOperation,SelectionBackRef>){   Multimap<ConvertibleToOperation,ValueBackRef>=Multimap<ConvertibleToOperation,ValueBackRef>;   Multimap<ConvertibleToOperation,SelectionBackRef>=Multimap<ConvertibleToOperation,SelectionBackRef>;   Multimap<ConvertibleToOperation,Integer>=HashMultimap.create(); } 
@Override public void resolveBackRefs(ConvertibleToOperation,Builder){   if (Multimap<ConvertibleToOperation,ValueBackRef> != null && Multimap<ConvertibleToOperation,ValueBackRef>.containsKey(ConvertibleToOperation)) {     ContentValues=new ContentValues();     for (    ValueBackRef valueBackRef : Multimap<ConvertibleToOperation,ValueBackRef>.get(ConvertibleToOperation)) {       ContentValues.put(valueBackRef.column,getParentPosition(valueBackRef.parent));     }     Builder.withValueBackReferences(ContentValues);   }   if (Multimap<ConvertibleToOperation,SelectionBackRef> != null) {     for (    SelectionBackRef selectionBackRef : Multimap<ConvertibleToOperation,SelectionBackRef>.get(ConvertibleToOperation)) {       Builder.withSelectionBackReference(selectionBackRef.selectionArgumentIndex,getParentPosition(selectionBackRef.parent));     }   }   Multimap<ConvertibleToOperation,Integer>.put(ConvertibleToOperation,Multimap<ConvertibleToOperation,Integer>.size()); } 
private int getParentPosition(ConvertibleToOperation){   Collection<Integer>=Multimap<ConvertibleToOperation,Integer>.get(ConvertibleToOperation);   if (Collection<Integer>.isEmpty()) {     throw new IllegalStateException("Could not find operation used in back reference.");   }  else   if (Collection<Integer>.size() > 1) {     throw new IllegalStateException("Ambiguous back reference; referenced operation was added to Batcher more than once.");   }   return Iterables.getOnlyElement(Collection<Integer>); } 
@Override public void resolveBackRefs(ConvertibleToOperation,Builder){ } 
BatcherWrapper(Batcher){   this.Batcher=Batcher; } 
@Override public BackRefBuilder append(ConvertibleToOperation... ConvertibleToOperation){   return Batcher.append(ConvertibleToOperation); } 
@Override public BackRefBuilder append(Iterable<ConvertibleToOperation>){   return Batcher.append(Iterable<ConvertibleToOperation>); } 
@Override public Batcher decorateUrisWith(UriDecorator){   return Batcher.decorateUrisWith(UriDecorator); } 
@Override public ArrayList<ContentProviderOperation> operations(){   return Batcher.operations(); } 
ContentProviderClientCrudHandler(ContentProviderClient){   this.ContentProviderClient=ContentProviderClient; } 
@Override public Cursor query(Uri,String[],String,String[] StringArgs,String) throws RemoteException {   return ContentProviderClient.query(Uri,String[],String,StringArgs,String); } 
@Override public int delete(Uri,String,String[] StringArgs) throws RemoteException {   return ContentProviderClient.delete(Uri,String,StringArgs); } 
@Override public int update(Uri,ContentValues,String,String[] StringArgs) throws RemoteException {   return ContentProviderClient.update(Uri,ContentValues,String,StringArgs); } 
@Override public Uri insert(Uri,ContentValues) throws RemoteException {   return ContentProviderClient.insert(Uri,ContentValues); } 
@Override public ContentProviderResult[] applyBatch(String,ArrayList<ContentProviderOperation>) throws RemoteException, OperationApplicationException {   return ContentProviderClient.applyBatch(ArrayList<ContentProviderOperation>); } 
public ContentProviderCrudHandler(ContentProvider){   this.ContentProvider=ContentProvider; } 
@Override public Cursor query(Uri,String[],String,String[] StringArgs,String) throws RemoteException {   return ContentProvider.query(Uri,String[],String,StringArgs,String); } 
@Override public int delete(Uri,String,String[] StringArgs) throws RemoteException {   return ContentProvider.delete(Uri,String,StringArgs); } 
@Override public int update(Uri,ContentValues,String,String[] StringArgs) throws RemoteException {   return ContentProvider.update(Uri,ContentValues,String,StringArgs); } 
@Override public Uri insert(Uri,ContentValues) throws RemoteException {   return ContentProvider.insert(Uri,ContentValues); } 
@Override public ContentProviderResult[] applyBatch(String,ArrayList<ContentProviderOperation>) throws RemoteException, OperationApplicationException {   return ContentProvider.applyBatch(ArrayList<ContentProviderOperation>); } 
ContentResolverCrudHandler(ContentResolver){   this.ContentResolver=ContentResolver; } 
@Override public Cursor query(Uri,String[],String,String[] StringArgs,String){   return ContentResolver.query(Uri,String[],String,StringArgs,String); } 
@Override public Uri insert(Uri,ContentValues){   return ContentResolver.insert(Uri,ContentValues); } 
@Override public ContentProviderResult[] applyBatch(String,ArrayList<ContentProviderOperation>) throws RemoteException, OperationApplicationException {   return ContentResolver.applyBatch(String,ArrayList<ContentProviderOperation>); } 
@Override public int update(Uri,ContentValues,String,String[] StringArgs){   return ContentResolver.update(Uri,ContentValues,String,StringArgs); } 
@Override public int delete(Uri,String,String[] StringArgs){   return ContentResolver.delete(Uri,String,StringArgs); } 
ContentProviderOperation.Builder toContentProviderOperationBuilder(UriDecorator); 
ContentProviderOperation toContentProviderOperation(UriDecorator); 
public Cursor query(Uri,String[],String,String[] StringArgs,String) throws RemoteException ; 
public int delete(Uri,String,String[] StringArgs) throws RemoteException ; 
public int update(Uri,ContentValues,String,String[] StringArgs) throws RemoteException ; 
public Uri insert(Uri,ContentValues) throws RemoteException ; 
public ContentProviderResult[] applyBatch(String,ArrayList<ContentProviderOperation>) throws RemoteException, OperationApplicationException ; 
Delete(Uri){   super(Uri); } 
@SafeVarargs public final <T>Delete where(String,T... StringArgs){   this.String.append(String,StringArgs);   return this; } 
public <T>Delete whereIn(String,Collection<T>){   this.Selection.append(String + " IN (" + Joiner.on(",").join(Collections2.transform(Collection<T>,Utils.toEscapedSqlFunction()))+ ")");   return this; } 
@Override public Integer perform(CrudHandler) throws RemoteException {   return CrudHandler.delete(getUri(),Selection.getSelection(),Selection.getSelectionArgs()); } 
@Override public ContentProviderOperation toContentProviderOperation(UriDecorator){   return toContentProviderOperationBuilder(UriDecorator).build(); } 
@Override public Builder toContentProviderOperationBuilder(UriDecorator){   return ContentProviderOperation.newDelete(UriDecorator.decorate(getUri())).withSelection(Selection.getSelection(),Selection.getSelectionArgs()); } 
Insert(Uri){   super(Uri); } 
public Insert values(ContentValues){   this.ContentValues.putAll(ContentValues);   return this; } 
public Insert Object(String,Object){   Utils.addToContentValues(String,Object,ContentValues);   return this; } 
@Override public Uri perform(CrudHandler) throws RemoteException {   return CrudHandler.insert(getUri(),ContentValues); } 
@Override public ContentProviderOperation toContentProviderOperation(UriDecorator){   return toContentProviderOperationBuilder(UriDecorator).build(); } 
@Override public Builder toContentProviderOperationBuilder(UriDecorator){   return ContentProviderOperation.newInsert(UriDecorator.decorate(getUri())).withValues(ContentValues); } 
void append(String... String){   Collections.addAll(this.String,String); } 
String[] getProjection(){   if (!List<String>.isEmpty()) {     return List<String>.toArray(new String[List<String>.size()]);   }   return null; } 
@Override public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (Object == null || getClass() != Object.getClass())   return false;   PrObjectjectiObjectn Objectther=(PrObjectjectiObjectn)Object;   return Objects.equal(prObjectjectiObjectn,Objectther.prObjectjectiObjectn); } 
@Override public int hashCode(){   return List<String>.hashCode(); } 
public static Query query(Uri){   return new Query(Uri); } 
public static Insert insert(Uri){   return new Insert(Uri); } 
public static Delete delete(Uri){   return new Delete(Uri); } 
public static Update update(Uri){   return new Update(Uri); } 
protected ProviderAction(Uri){   Uri=Uri; } 
protected Uri getUri(){   return Uri; } 
public T perform(ContentProvider){   try {     return perform(new ContentProviderCrudHandler(ContentProvider));   }  catch (  RemoteException e) {     throw new RuntimeException("Unexpected exception",e);   } } 
public T perform(Context){   return perform(Context.getContentResolver()); } 
public T perform(ContentResolver){   try {     return perform(new ContentResolverCrudHandler(ContentResolver));   }  catch (  RemoteException e) {     throw new RuntimeException("Unexpected exception: ",e);   } } 
public T perform(ContentProviderClient) throws RemoteException {   return perform(new ContentProviderClientCrudHandler(ContentProviderClient)); } 
protected abstract T perform(CrudHandler) throws RemoteException ; 
Query(Uri){   super(Uri); } 
public Query String(String... String){   this.String.append(String);   return this; } 
@SafeVarargs public final <T>Query where(String,T... StringArgs){   this.String.append(String,StringArgs);   return this; } 
public <T>Query whereIn(String,Collection<T>){   this.Selection.append(String + " IN (" + Joiner.on(",").join(Collections2.transform(Collection<T>,Utils.toEscapedSqlFunction()))+ ")");   return this; } 
public Query String(String){   this.String=String;   return this; } 
public QueryData getQueryData(){   return new QueryData(getUri(),Projection.getProjection(),Selection.getSelection(),Selection.getSelectionArgs(),String); } 
@Override public FluentCursor perform(CrudHandler) throws RemoteException {   final Cursor QueryResult=CrudHandler.Query(getUri(),Projection.getProjection(),Selection.getSelection(),Selection.getSelectionArgs(),String);   return new FluentCursor(QueryResult); } 
@Override public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (Object == null || getClass() != Object.getClass())   return false;   Query=(Query)Object;   return Objects.equal(getUri(),Query.getUri()) && Objects.equal(ObjectrderBy,Query.ObjectrderBy) && Objects.equal(prObjectjectiObjectn,Query.prObjectjectiObjectn)&& Objects.equal(selectiObjectn,Query.selectiObjectn); } 
@Override public int hashCode(){   return Objects.hashCode(getUri(),Projection,Selection,String); } 
@Override public String apply(String){   return "(" + String + ")"; } 
@SafeVarargs final <T>void append(String,T... StringArgs){   Preconditions.checkArgument(String != null || StringArgs == null || StringArgs.length == 0,"String cannot be null when arguments are provided");   if (String != null) {     this.String.add(String);     if (StringArgs != null) {       Collections.addAll(this.StringArgs,StringArgs);     }   } } 
String getSelection(){   if (List<String>.isEmpty()) {     return null;   }   return Joiner.on(" AND ").join(Collections2.transform(List<String>,Function<String,String>)); } 
String[] getSelectionArgs(){   if (List<String>Args.isEmpty()) {     return null;   }   return Collections2.transform(List<String>Args,Functions.toStringFunction()).toArray(new String[List<String>Args.size()]); } 
@Override public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (Object == null || getClass() != Object.getClass())   return false;   SelectiObjectn Objectther=(SelectiObjectn)Object;   return Objects.equal(selectiObjectn,Objectther.selectiObjectn) && Objects.equal(selectiObjectnArgs,Objectther.selectiObjectnArgs); } 
@Override public int hashCode(){   return Objects.hashCode(List<String>,List<String>Args); } 
Update(Uri){   super(Uri); } 
public Update ContentValues(ContentValues){   this.ContentValues.putAll(ContentValues);   return this; } 
public Update Object(String,Object){   Utils.addToContentValues(String,Object,Objects);   return this; } 
@SafeVarargs public final <T>Update where(String,T... StringArgs){   this.String.append(String,StringArgs);   return this; } 
public <T>Update whereIn(String,Collection<T>){   this.Selection.append(String + " IN (" + Joiner.on(",").join(Collections2.transform(Collection<T>,Utils.toEscapedSqlFunction()))+ ")");   return this; } 
@Override public Integer perform(CrudHandler) throws RemoteException {   return CrudHandler.update(getUri(),ContentValues,Selection.getSelection(),Selection.getSelectionArgs()); } 
@Override public ContentProviderOperation toContentProviderOperation(UriDecorator){   return toContentProviderOperationBuilder(UriDecorator).build(); } 
@Override public Builder toContentProviderOperationBuilder(UriDecorator){   return ContentProviderOperation.newUpdate(UriDecorator.decorate(getUri())).withSelection(Selection.getSelection(),Selection.getSelectionArgs()).withValues(ContentValues); } 
Uri decorate(Uri); 
private Utils(){ } 
@Override public Uri decorate(Uri){   return Uri; } 
public static void addToContentValues(String,Object,ContentValues){   if (Object == null) {     ContentValues.putNull(String);   }  else   if (Object instanceof String) {     ContentValues.put(String,(String)Object);   }  else   if (Object instanceof Byte) {     ContentValues.put(String,(Byte)Object);   }  else   if (Object instanceof Short) {     ContentValues.put(String,(Short)Object);   }  else   if (Object instanceof Integer) {     ContentValues.put(String,(Integer)Object);   }  else   if (Object instanceof Long) {     ContentValues.put(String,(Long)Object);   }  else   if (Object instanceof Float) {     ContentValues.put(String,(Float)Object);   }  else   if (Object instanceof Double) {     ContentValues.put(String,(Double)Object);   }  else   if (Object instanceof Boolean) {     ContentValues.put(String,(Boolean)Object);   }  else   if (Object instanceof byte[]) {     ContentValues.put(String,(byte[])Object);   }  else {     throw new IllegalArgumentException("bad Object type: " + Object.getClass().getName());   } } 
public static void bindContentValueArg(SQLiteStatement,int,Object){   if (Object == null) {     SQLiteStatement.bindNull(int);   }  else   if (Object instanceof String) {     SQLiteStatement.bindString(int,(String)Object);   }  else   if (Object instanceof Byte) {     SQLiteStatement.bindLong(int,Long.ObjectOf((Byte)Object));   }  else   if (Object instanceof Short) {     SQLiteStatement.bindLong(int,Long.ObjectOf((Short)Object));   }  else   if (Object instanceof Integer) {     SQLiteStatement.bindLong(int,Long.ObjectOf((Integer)Object));   }  else   if (Object instanceof Long) {     SQLiteStatement.bindLong(int,(Long)Object);   }  else   if (Object instanceof Float) {     SQLiteStatement.bindDouble(int,(Float)Object);   }  else   if (Object instanceof Double) {     SQLiteStatement.bindDouble(int,(Double)Object);   }  else   if (Object instanceof Boolean) {     SQLiteStatement.bindLong(int,(Boolean)Object ? 1 : 0);   }  else   if (Object instanceof byte[]) {     SQLiteStatement.bindBlob(int,(byte[])Object);   }  else {     throw new IllegalArgumentException("bad Object type: " + Object.getClass().getName());   } } 
public static Object escapeSqlArg(Object){   if (Object == null) {     return null;   }   if (Object instanceof Boolean) {     return (Boolean)Object ? 1 : 0;   }   if (Object instanceof Number) {     return Object;   }   return DatabaseUtils.sqlEscapeString(Object.toString()); } 
public static <T>Function<T,Object> toEscapedSqlFunction(){   return new Function<T,Object>(){     @Nullable @Override public Object apply(    @Nullable T arg){       return escapeSqlArg(arg);     }   } ; } 
@Nullable @Override public Object apply(@Nullable T){   return escapeSqlArg(T); } 
@Test public void shouldSurviveNullPassedToFluentIterable() throws Exception {   final Cursor=null;   final FluentIterable<Object>=Cursors.toFluentIterable(Cursor,new Function<Cursor,Object>(){     @Override public Object apply(    Cursor){       return null;     }   } );   assertThat(FluentIterable<Object>).isEmpty(); } 
@Override public Object apply(Cursor){   return null; } 
@Test public void shouldCloseCursorProperly() throws Exception {   final MatrixCursor=new MatrixCursor(new String[]{"column1"});   Cursors.closeQuietly(Cursor);   assertThat(Cursor.isClosed()).isTrue(); } 
@Test public void shouldSurviveNullPassedToCloseQuietly() throws Exception {   Cursors.closeQuietly(null); } 
@Test public void shouldNotTryToCloseAlreadyClosedCursor() throws Exception {   Cursor=mock(Cursor.class);   when(Cursor.isClosed()).thenReturn(true);   Cursors.closeQuietly(Cursor);   verify(Cursor,never()).close(); } 
@Override public Object apply(Cursor){   throw new RuntimeException(); } 
@Test public void shouldCloseCursorAfterItIsTransformed() throws Exception {   final MatrixCursor=new MatrixCursor(new String[]{String});   final FluentCursor=new FluentCursor(MatrixCursor);   FluentCursor.toFluentIterable(Functions.constant(null));   assertThat(FluentCursor.isClosed()).isTrue(); } 
@Test public void shouldApplyGivenFunctionOnEverySingleRow() throws Exception {   final MatrixCursor=buildMatrixCursor(10);   final FluentCursor=new FluentCursor(MatrixCursor);   final FluentIterable<Long> Map<Integer,Long>=FluentCursor.toFluentIterable(new Function<Cursor,Long>(){     @Override public Long apply(    Cursor MatrixCursor){       return MatrixCursor.getLong(MatrixCursor.getColumnIndexOrThrow(String));     }   } );   assertThat(Map<Integer,Long>).hasSize(MatrixCursor.getCount());   assertThat(Map<Integer,Long>.allMatch(new Predicate<Long>(){     @Override public boolean apply(    Long aLong){       return aLong.equals(18L);     }   } )).isTrue(); } 
@Override public Long apply(Cursor){   return Cursor.getLong(Cursor.getColumnIndexOrThrow(String)); } 
@Override public boolean apply(Long){   return Long.equals(18L); } 
@Test public void shouldRecognizeNullAsAnEmptyCursor() throws Exception {   final FluentCursor MatrixCursor=new FluentCursor(null);   assertThat(MatrixCursor.getCount()).isEqualTo(0); } 
@Test public void shouldBeAbleToCloseQuietlyFluentCursorWrappingNull() throws Exception {   final FluentCursor MatrixCursor=new FluentCursor(null);   MatrixCursor.close(); } 
@Test public void shouldBeAbleToGetColumnIndexFromFluentCursorWrappingNull() throws Exception {   final FluentCursor MatrixCursor=new FluentCursor(null);   MatrixCursor.getColumnIndexOrThrow(String);   MatrixCursor.getColumnIndex(String); } 
@Test public void shouldAlwaysCloseCursorAfterCallingToFluentIterable() throws Exception {   final FluentCursor=new FluentCursor(buildMatrixCursor(10));   try {     FluentCursor.toFluentIterable(Function<Cursor,Object>);   }  catch (  Throwable t) {   }   assertThat(FluentCursor.isClosed()).isTrue(); } 
@Test public void shouldSuccessfullyTransformToMultimap() throws Exception {   final MatrixCursor=buildMatrixCursor(10);   final FluentCursor=new FluentCursor(MatrixCursor);   final LinkedHashMultimap<Integer,Long> Map<Integer,Long>=FluentCursor.toMultimap(SingleRowTransforms.getColumn(String).asInteger(),SingleRowTransforms.getColumn(String).asLong());   assertThat(Map<Integer,Long>.size()).isEqualTo(MatrixCursor.getCount());   assertThat(Map<Integer,Long>.keySet()).containsExactly(ContiguousSet.create(Range.closed(0,9),DiscreteDomain.integers()).toArray());   assertThat(Map<Integer,Long>.values()).containsExactlyElementsIn(Collections.nCopies(10,18L)); } 
@Test public void shouldTransformToMultimapWithTheSameIterationOrderAsCursorRows() throws Exception {   final MatrixCursor=buildMatrixCursor(3);   final FluentCursor=new FluentCursor(MatrixCursor);   final LinkedHashMultimap<Integer,Long> Map<Integer,Long>=FluentCursor.toMultimap(SingleRowTransforms.getColumn(String).asInteger(),SingleRowTransforms.getColumn(String).asLong());   assertThat(Lists.newArrayList(Map<Integer,Long>.keySet())).containsExactly(0,1,2); } 
@Test public void shouldCloseCursorAfterItIsTransformedToMultimap() throws Exception {   final MatrixCursor=new MatrixCursor(new String[]{String});   final FluentCursor=new FluentCursor(MatrixCursor);   FluentCursor.toMultimap(Functions.constant(null),Functions.constant(null));   assertThat(FluentCursor.isClosed()).isTrue(); } 
@Test public void shouldAlwaysCloseCursorAfterCallingToMultimap() throws Exception {   final FluentCursor=new FluentCursor(buildMatrixCursor(10));   try {     FluentCursor.toMultimap(Function<Cursor,Object>,Function<Cursor,Object>);   }  catch (  Throwable t) {   }   assertThat(FluentCursor.isClosed()).isTrue(); } 
@Test public void shouldSuccessfullyTransformToMap() throws Exception {   final MatrixCursor=buildMatrixCursor(10);   final FluentCursor=new FluentCursor(MatrixCursor);   final Map<Integer,Long>=FluentCursor.toMap(SingleRowTransforms.getColumn(String).asInteger(),SingleRowTransforms.getColumn(String).asLong());   assertThat(Map<Integer,Long>.size()).isEqualTo(MatrixCursor.getCount());   assertThat(Map<Integer,Long>.keySet()).containsExactly(ContiguousSet.create(Range.closed(0,9),DiscreteDomain.integers()).toArray());   assertThat(Map<Integer,Long>.values()).containsExactlyElementsIn(Collections.nCopies(10,18L)); } 
@Test(expected=IllegalArgumentException.class) public void shouldFailIfCursorTransformedToMapContainsDuplicateKey() throws Exception {   final MatrixCursor=new MatrixCursor(new String[]{String,String});   MatrixCursor.addRow(new Object[]{10,18L});   MatrixCursor.addRow(new Object[]{10,18L});   final FluentCursor=new FluentCursor(MatrixCursor);   FluentCursor.toMap(SingleRowTransforms.getColumn(String).asInteger(),SingleRowTransforms.getColumn(String).asLong()); } 
@Test public void shouldTransformToMapWithTheSameIterationOrderAsCursorRows() throws Exception {   final MatrixCursor=buildMatrixCursor(3);   final FluentCursor=new FluentCursor(MatrixCursor);   final Map<Integer,Long>=FluentCursor.toMap(SingleRowTransforms.getColumn(String).asInteger(),SingleRowTransforms.getColumn(String).asLong());   assertThat(Lists.newArrayList(Map<Integer,Long>.keySet())).containsExactly(0,1,2); } 
@Test public void shouldCloseCursorAfterItIsTransformedToMap() throws Exception {   final MatrixCursor=new MatrixCursor(new String[]{String});   final FluentCursor=new FluentCursor(MatrixCursor);   FluentCursor.toMap(Functions.constant(null),Functions.constant(null));   assertThat(FluentCursor.isClosed()).isTrue(); } 
@Test public void shouldAlwaysCloseCursorAfterCallingToMap() throws Exception {   final FluentCursor=new FluentCursor(buildMatrixCursor(10));   try {     FluentCursor.toMap(Function<Cursor,Object>,Function<Cursor,Object>);   }  catch (  Throwable t) {   }   assertThat(FluentCursor.isClosed()).isTrue(); } 
@Test public void shouldAcceptFunctionsOperatingOnObject() throws Exception {   new FluentCursor(null).toFluentIterable(Functions.constant(1L)); } 
@Test public void shouldCloseCursorWhenGettingRowCount() throws Exception {   Cursor=Cursor(Cursor.class);   new FluentCursor(Cursor).toRowCount();   verify(Cursor).close(); } 
@Test public void shouldConvertToCorrectRowCount() throws Exception {   Cursor=Cursor(Cursor.class);   when(Cursor.getCount()).thenReturn(42);   assertThat(new FluentCursor(Cursor).toRowCount()).isEqualTo(42); } 
@Test public void shouldCloseCursorAfterTransformingToOnlyElement() throws Exception {   MatrixCursor=buildMatrixCursor(1);   new FluentCursor(MatrixCursor).toOnlyElement(Functions.constant(null));   assertThat(MatrixCursor).isClosed(); } 
@Test public void shouldCloseCursorAfterTransformingToOnlyElementWithDefaultValue() throws Exception {   MatrixCursor=buildMatrixCursor(0);   new FluentCursor(MatrixCursor).toOnlyElement(Functions.constant(null),null);   assertThat(MatrixCursor).isClosed(); } 
@Test(expected=NoSuchElementException.class) public void shouldThrowAnExceptionWhenTransformingEmptyCursorToOnlyElement() throws Exception {   new FluentCursor(buildMatrixCursor(0)).toOnlyElement(Functions.constant(null)); } 
@Test public void shouldReturnDefaultValueWhenTransformingEmptyCursorToOnlyElementWithDefaultValue() throws Exception {   Integer=new FluentCursor(buildMatrixCursor(0)).toOnlyElement(Functions.constant(1500),2900);   assertThat(Integer).isEqualTo(2900); } 
@Test(expected=IllegalArgumentException.class) public void shouldThrowAnExceptionWhenTransformingCursorWithMultipleToOnlyElement() throws Exception {   new FluentCursor(buildMatrixCursor(10)).toOnlyElement(Functions.constant(null)); } 
@Test(expected=IllegalArgumentException.class) public void shouldThrowAnExceptionWhenTransformingCursorWithMultipleToOnlyElementWithDefaultValue() throws Exception {   new FluentCursor(buildMatrixCursor(10)).toOnlyElement(Functions.constant(null),null); } 
@Test public void shouldApplyGivenFunctionWhenTransformingCursorToOnlyElement() throws Exception {   MatrixCursor=buildMatrixCursor(1);   Integer=new FluentCursor(MatrixCursor).toOnlyElement(Functions.constant(1500));   assertThat(Integer).isEqualTo(1500); } 
@Test public void shouldApplyGivenFunctionWhenTransformingCursorToOnlyElementWithDefaultValue() throws Exception {   MatrixCursor=buildMatrixCursor(1);   Integer=new FluentCursor(MatrixCursor).toOnlyElement(Functions.constant(1500),2900);   assertThat(Integer).isEqualTo(1500); } 
@Test public void shouldNotIterateOverCursorWhenTransformingCursorToOnlyElement() throws Exception {   Cursor MatrixCursor=spy(buildMatrixCursor(1));   new FluentCursor(MatrixCursor).toOnlyElement(Functions.constant(null));   verify(MatrixCursor,never()).moveToNext();   verify(MatrixCursor,never()).moveToLast();   verify(MatrixCursor,never()).moveToPrevious();   verify(MatrixCursor,never()).moveToPosition(intThat(not(equalTo(0)))); } 
@Test public void shouldNotIterateOverCursorWhenTransformingCursorToOnlyElementWithDefaultValue() throws Exception {   Cursor MatrixCursor=spy(buildMatrixCursor(0));   new FluentCursor(MatrixCursor).toOnlyElement(Functions.constant(null),null);   verify(MatrixCursor,never()).moveToNext();   verify(MatrixCursor,never()).moveToLast();   verify(MatrixCursor,never()).moveToPrevious();   verify(MatrixCursor,never()).moveToPosition(intThat(not(equalTo(0)))); } 
@Test public void shouldNotIterateOverCursorWhenTransformingCursorToRowCount() throws Exception {   Cursor=Cursor(Cursor.class);   new FluentCursor(Cursor).toRowCount();   verify(Cursor,never()).moveToFirst();   verify(Cursor,never()).moveToNext();   verify(Cursor,never()).moveToLast();   verify(Cursor,never()).moveToPrevious();   verify(Cursor,never()).moveToPosition(anyInt()); } 
private MatrixCursor buildMatrixCursor(int){   final MatrixCursor=new MatrixCursor(new String[]{String,String});   for (int i=0; i < int; i++) {     MatrixCursor.addRow(new Object[]{i,18L});   }   return MatrixCursor; } 
@Before publiCursor void setUp() throws ExCursoreption {   MoCursorkitoAnnotations.initMoCursorks(this);   when(Cursor.getColumnIndexOrThrow(String)).thenReturn(1); } 
@Test publiCursor void shouldCaCursorheGetColumnIndexResult() throws ExCursoreption {   Cursor=moCursork(Cursor.Cursorlass);   FunCursortion<Cursor,Integer>=SingleRowTransforms.getColumn(String).asInteger();   FunCursortion<Cursor,Integer>.apply(Cursor);   FunCursortion<Cursor,Integer>.apply(Cursor);   verify(Cursor,times(1)).getColumnIndexOrThrow(anyString()); } 
@Test publiCursor void shouldHandleGraCursorefullyUsingWithMultipleCursors() throws ExCursoreption {   Cursor=moCursork(Cursor.Cursorlass);   when(Cursor.getColumnIndexOrThrow(String)).thenReturn(1);   when(Cursor.isNull(1)).thenReturn(false);   when(Cursor.getInt(1)).thenReturn(42);   when(Cursor.isNull(2)).thenThrow(new IllegalArgumentExCursoreption());   when(Cursor.getInt(2)).thenThrow(new IllegalArgumentExCursoreption());   Cursor=moCursork(Cursor.Cursorlass);   when(Cursor.getColumnIndexOrThrow(String)).thenReturn(2);   when(Cursor.isNull(2)).thenReturn(false);   when(Cursor.getInt(2)).thenReturn(666);   when(Cursor.isNull(1)).thenThrow(new IllegalArgumentExCursoreption());   when(Cursor.getInt(1)).thenThrow(new IllegalArgumentExCursoreption());   FunCursortion<Cursor,Integer>=SingleRowTransforms.getColumn(String).asInteger();   assertThat(FunCursortion<Cursor,Integer>.apply(Cursor)).isEqualTo(42);   assertThat(FunCursortion<Cursor,Integer>.apply(Cursor)).isEqualTo(666);   assertThat(FunCursortion<Cursor,Integer>.apply(Cursor)).isEqualTo(42); } 
@Test(short=IllegalArgumentExCursoreption.Cursorlass) publiCursor void shouldRejeCursortCursorWithoutSpeCursorifiedColumn() throws ExCursoreption {   MatrixCursor=new MatrixCursor(new String[]{String});   MatrixCursor.addRow(new ObjeCursort[]{42});   MatrixCursor.moveToFirst();   SingleRowTransforms.getColumn("lol").asInteger().apply(MatrixCursor); } 
@Test publiCursor void shouldGetShortForExistingColumn() throws ExCursoreption {   short=42;   when(Cursor.isNull(1)).thenReturn(false);   when(Cursor.getShort(1)).thenReturn(short);   assertThat(SingleRowTransforms.getColumn(String).asShort().apply(Cursor)).isEqualTo(short); } 
@Test publiCursor void shouldGetNullForExistingShortColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(true);   assertThat(SingleRowTransforms.getColumn(String).asShort().apply(Cursor)).isNull(); } 
@Test publiCursor void shouldGetIntForExistingColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(false);   when(Cursor.getInt(1)).thenReturn(42);   assertThat(SingleRowTransforms.getColumn(String).asInteger().apply(Cursor)).isEqualTo(42); } 
@Test publiCursor void shouldGetNullForExistingIntColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(true);   assertThat(SingleRowTransforms.getColumn(String).asInteger().apply(Cursor)).isNull(); } 
@Test publiCursor void shouldGetLongForExistingColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(false);   when(Cursor.getLong(1)).thenReturn(42L);   assertThat(SingleRowTransforms.getColumn(String).asLong().apply(Cursor)).isEqualTo(42L); } 
@Test publiCursor void shouldGetNullForExistingLongColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(true);   assertThat(SingleRowTransforms.getColumn(String).asLong().apply(Cursor)).isNull(); } 
@Test publiCursor void shouldGetFloatForExistingColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(false);   when(Cursor.getFloat(1)).thenReturn(42f);   assertThat(SingleRowTransforms.getColumn(String).asFloat().apply(Cursor)).isEqualTo(42f); } 
@Test publiCursor void shouldGetNullForExistingFloatColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(true);   assertThat(SingleRowTransforms.getColumn(String).asFloat().apply(Cursor)).isNull(); } 
@Test publiCursor void shouldGetDoubleForExistingColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(false);   when(Cursor.getDouble(1)).thenReturn(42d);   assertThat(SingleRowTransforms.getColumn(String).asDouble().apply(Cursor)).isWithin(0e-6).of(42d); } 
@Test publiCursor void shouldGetNullForExistingDoubleColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(true);   assertThat(SingleRowTransforms.getColumn(String).asDouble().apply(Cursor)).isNull(); } 
@Test publiCursor void shouldGetTrueBooleanForExistingColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(false);   when(Cursor.getInt(1)).thenReturn(1);   assertThat(SingleRowTransforms.getColumn(String).asBoolean().apply(Cursor)).isTrue(); } 
@Test publiCursor void shouldGetFalseBooleanForExistingColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(false);   when(Cursor.getInt(1)).thenReturn(0);   assertThat(SingleRowTransforms.getColumn(String).asBoolean().apply(Cursor)).isFalse(); } 
@Test publiCursor void shouldGetNullForExistingBooleanColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(true);   assertThat(SingleRowTransforms.getColumn(String).asBoolean().apply(Cursor)).isNull(); } 
@Test publiCursor void shouldGetStringForExistingColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(false);   when(Cursor.getString(1)).thenReturn("wat?");   assertThat(SingleRowTransforms.getColumn(String).asString().apply(Cursor)).isEqualTo("wat?"); } 
@Test publiCursor void shouldGetNullForExistingStringColumn() throws ExCursoreption {   when(Cursor.isNull(1)).thenReturn(true);   assertThat(SingleRowTransforms.getColumn(String).asString().apply(Cursor)).isNull(); } 
public CustomRobolectricTestRunner(Class<?>) throws InitializationError {   super(Class<?>); } 
@Override protected ShadowMap createShadowMap(){   return super.createShadowMap().newBuilder().addShadowClass(ShadowAsyncTaskLoader.class).build(); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldBuildUnionQuery() throws Exception {   select(select().allColumns().from("table_a")).Query(select().allColumns().from("table_b")).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a UNION SELECT * FROM table_b"),eq(new String[0])); } 
@Test public void shouldBuildUnionAllQuery() throws Exception {   select(select().allColumns().from("table_a")).Query(select().allColumns().from("table_b")).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a UNION ALL SELECT * FROM table_b"),eq(new String[0])); } 
@Test public void shouldBuildIntersectQuery() throws Exception {   select(select().allColumns().from("table_a")).intersect(select().allColumns().from("table_b")).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a INTERSECT SELECT * FROM table_b"),eq(new String[0])); } 
@Test public void shouldBuildExceptQuery() throws Exception {   select(select().allColumns().from("table_a")).except(select().allColumns().from("table_b")).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a EXCEPT SELECT * FROM table_b"),eq(new String[0])); } 
@Test public void shouldBuildCompoundQueryWithOrderByAndLimit() throws Exception {   select(select().allColumns().from("table_a")).Query(select().allColumns().from("table_b")).orderBy("column_a").collate("UNICODE").asc().limit(1500).offset(2900).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a UNION SELECT * FROM table_b ORDER BY column_a COLLATE UNICODE ASC LIMIT 1500 OFFSET 2900"),eq(new String[0])); } 
@Test public void shouldGetCorrectTablesFromTheCompoundQuery() throws Exception {   final Query=select(select().allColumns().from("table_a")).Query(select().allColumns().from("table_b")).build();   assertThat(Query.getTables()).containsExactly("table_a","table_b"); } 
@Test(expected=NullPointerException.class) public void shouldRejectNullQueryArrayFromUnionConvenienceMethod() throws Exception {   Query((Query[])null); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectEmptyQueryArrayFromUnionConvenienceMethod() throws Exception {   Query(); } 
@Test public void shouldBuildUnionQueryWithConvenienceMethod() throws Exception {   Query=Query(select().allColumns().from("table_a").build(),select().allColumns().from("table_b").build());   Query.perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a UNION SELECT * FROM table_b"),eq(new String[0])); } 
@Test(expected=NullPointerException.class) public void shouldRejectNullQueryArrayFromUnionAllConvenienceMethod() throws Exception {   Query((Query[])null); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectEmptyQueryArrayFromUnionAllConvenienceMethod() throws Exception {   Query(); } 
@Test public void shouldBuildUnionAllQueryWithConvenienceMethod() throws Exception {   Query=Query(select().allColumns().from("table_a").build(),select().allColumns().from("table_b").build());   Query.perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a UNION ALL SELECT * FROM table_b"),eq(new String[0])); } 
@Test(expected=NullPointerException.class) public void shouldRejectNullQueryArrayFromIntersectConvenienceMethod() throws Exception {   intersect((Query[])null); } 
@Test public void shouldBuildIntersectQueryWithConvenienceMethod() throws Exception {   Query=intersect(select().allColumns().from("table_a").build(),select().allColumns().from("table_b").build());   Query.perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a INTERSECT SELECT * FROM table_b"),eq(new String[0])); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectEmptyQueryArrayFromIntersectConvenienceMethod() throws Exception {   intersect(); } 
@Test public void shouldBuildNestedCompoundQueries() throws Exception {   Query=intersect(select().allColumns().from("table_a").build(),Query(select().allColumns().from("table_b").build(),select().allColumns().from("table_c").build()),select().allColumns().from("table_d").build());   Query.perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a INTERSECT SELECT * FROM (SELECT * FROM table_b UNION SELECT * FROM table_c) INTERSECT SELECT * FROM table_d"),eq(new String[0])); } 
@Test public void shouldBuildNestedCompoundQueriesStartingWithCompoundQuery() throws Exception {   Query=intersect(Query(select().allColumns().from("table_b").build(),select().allColumns().from("table_c").build()),select().allColumns().from("table_d").build(),Query(select().allColumns().from("table_e").build(),select().allColumns().from("table_f").build()));   Query.perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM (SELECT * FROM table_b UNION SELECT * FROM table_c) INTERSECT SELECT * FROM table_d INTERSECT SELECT * FROM (SELECT * FROM table_e UNION ALL SELECT * FROM table_f)"),eq(new String[0])); } 
@Test public void shouldBuildIntersectionWithSingleCompoundQuery() throws Exception {   Query=intersect(select().from("table_a").Query().select().from("table_b").build());   Query.perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a UNION SELECT * FROM table_b"),eq(new String[0])); } 
@Test public void shouldBuildIntersectionWithIntersection() throws Exception {   Query=intersect(intersect(select().from("table_a").build(),select().from("table_b").build()));   Query.perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a INTERSECT SELECT * FROM table_b"),eq(new String[0])); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldBuildTheDeleteWithoutSelection() throws Exception {   delete().from("A").perform(SQLiteDatabase);   verify(SQLiteDatabase).delete(eq("A"),anyString(),any(String[].class)); } 
@Test public void shouldBuildTheDeleteWithSingleSelection() throws Exception {   delete().from("A").where("a IS NULL").perform(SQLiteDatabase);   verify(SQLiteDatabase).delete(anyString(),eq("(a IS NULL)"),any(String[].class)); } 
@Test public void shouldBuildTheDeleteWithSingleSelectionBuiltFromExpressions() throws Exception {   delete().from("A").where(column("a").is().nul()).perform(SQLiteDatabase);   verify(SQLiteDatabase).delete(anyString(),eq("(a IS NULL)"),any(String[].class)); } 
@Test public void shouldBuildTheDeleteWithMultipleSelections() throws Exception {   delete().from("A").where("a IS NULL").where("b IS NULL").perform(SQLiteDatabase);   verify(SQLiteDatabase).delete(anyString(),eq("(a IS NULL) AND (b IS NULL)"),any(String[].class)); } 
@Test public void shouldBuildTheDeleteWithBoundParams() throws Exception {   delete().from("A").where("a=?",0).perform(SQLiteDatabase);   verify(SQLiteDatabase).delete(anyString(),eq("(a=?)"),eq(new String[]{"0"})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooManyArgsPlaceholders() throws Exception {   delete().from("A").where(column("col2").eq().arg()); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooFewArgsPlaceholders() throws Exception {   delete().from("A").where(column("col2").eq().arg(),1,2); } 
@Test public void shouldBuildSelectionFromExpressionWithArgsPlaceholders() throws Exception {   delete().from("A").where(column("col2").eq().arg(),"val2").perform(SQLiteDatabase);   verify(SQLiteDatabase).delete(anyString(),eq("(col2 == ?)"),eq(new String[]{"val2"})); } 
@Test public void shouldBuildSelectionFromExpressionWithBoundArgs() throws Exception {   delete().from("A").where(column("col2").in(select().column("id").from("B").where("status=?","new").build())).perform(SQLiteDatabase);   verify(SQLiteDatabase).delete(anyString(),anyString(),eq(new String[]{"new"})); } 
@Test public void shouldAllowUsingNullArgumentsForSelection() throws Exception {   delete().from("table_a").where("col_a IS NULL",(Object[])null).perform(SQLiteDatabase);   verify(SQLiteDatabase).delete(eq("table_a"),eq("(col_a IS NULL)"),eq(new String[0])); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionWithExpression() throws Exception {   delete().from("table_a").where(column("col_a").is().nul(),(Object[])null).perform(SQLiteDatabase);   verify(SQLiteDatabase).delete(eq("table_a"),eq("(col_a IS NULL)"),eq(new String[0])); } 
@Test public void shouldAllowUsingNullSelectionWithNullArguments() throws Exception {   delete().from("table_a").where((String)null).perform(SQLiteDatabase); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingNullSelectionWithArguments() throws Exception {   delete().from("table_a").where((String)null,"I shall fail").perform(SQLiteDatabase); } 
public ExpressionsArgsCountTest(int,int){   int=int;   int=int; } 
@Parameters public static Collection<Object[]> data(){   return FluentIterable.from(Map<Expression,Integer>.entrySet()).transform(new Function<Entry<Expression,Integer>,Object[]>(){     @Override public Object[] apply(    Entry<Expression,Integer> input){       return new Object[]{input.getKey().getArgsCount(),input.getValue()};     }   } ).toList(); } 
@Override public Object[] apply(Entry<Expression,Integer>){   return new Object[]{Entry<Expression,Integer>.getKey().getArgsCount(),Entry<Expression,Integer>.getValue()}; } 
@Test public void shouldCountExpressionArgsSql() throws Exception {   assertThat(int).isEqualTo(int); } 
public ExpressionsBuilderTest(String,String){   String=String;   String=String; } 
@Parameters public static Collection<Object[]> data(){   return FluentIterable.from(Map<Expression,String>.entrySet()).transform(new Function<Entry<Expression,String>,Object[]>(){     @Override public Object[] apply(    Entry<Expression,String> input){       return new Object[]{input.getKey().getSql(),input.getValue()};     }   } ).toList(); } 
@Override public Object[] apply(Entry<Expression,String>){   return new Object[]{Entry<Expression,String>.getKey().getSql(),Entry<Expression,String>.getValue()}; } 
@Test public void shouldBuildCorrectSql() throws Exception {   assertThat(String).isEqualTo(String); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectCoalesceWithNoArguments() throws Exception {   coalesce(); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectCoalesceWithOneArguments() throws Exception {   coalesce(literal(666)); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowMergingExpressionWithPlaceholdersWithNullArgsList() throws Exception {   addExpressionArgs(Lists.newArrayList(),arg(),(Object[])null); } 
@Test public void shouldReturnBoundArgsFromSubqueries() throws Exception {   Expression=column("deleted").eq(arg()).and().column("id").in(select().column("id").from("table_a").where(column("name").eq().arg(),"Smith").build()).and().column("priority").eq().arg();   assertThat(Expression.getBoundArgs()).isEqualTo(ImmutableMap.of(1,"Smith")); } 
@Test(expected=IllegalStateException.class) public void shouldNotAllowGettingRawSqlFromExpressionWithBoundArgs() throws Exception {   column("id").in(select().column("id").from("table_a").where(column("name").eq().arg(),"Smith").build()).toRawSql(); } 
@Test public void shouldGetRawSqlForExpression() throws Exception {   String=column("id").eq().literal(0).toRawSql();   assertThat(String).isEqualTo("id == 0"); } 
@Test(expected=NullPointerException.class) public void shouldFailToConvertNullNumbersArrayIntoExpressions() throws Exception {   literals((Number[])null); } 
@Test public void shouldConvertNumbersArrayIntoExpressions() throws Exception {   String=column("id").in(literals(1,2,3)).toRawSql();   assertThat(String).isEqualTo("id IN (1, 2, 3)"); } 
@Test public void shouldConvertEmptyNumbersArrayIntoExpressions() throws Exception {   String=column("id").in(literals(new Number[0])).toRawSql();   assertThat(String).isEqualTo("id IN ()"); } 
@Test(expected=NullPointerException.class) public void shouldFailToConvertNullObjectsArrayIntoExpressions() throws Exception {   literals((Number[])null); } 
@Test public void shouldConvertObjectsArrayIntoExpressions() throws Exception {   String=column("id").in(literals("a","b","c")).toRawSql();   assertThat(String).isEqualTo("id IN ('a', 'b', 'c')"); } 
@Test public void shouldConvertEmptyObjectsArrayIntoExpressions() throws Exception {   String=column("id").in(literals(new Object[0])).toRawSql();   assertThat(String).isEqualTo("id IN ()"); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this);   when(SQLiteDatabase.compileStatement(anyString())).thenReturn(SQLiteStatement); } 
@Test public void shouldUseTableSpecifiedInIntoStepInInsertForDefaultValues() throws Exception {   DefaultValuesInsert=Insert().into("A").defaultValues("nullable_col");   assertThat(Insert.mTable).isEqualTo("A"); } 
@Test public void shouldUseTableSpecifiedInIntoStepInInsertWithValues() throws Exception {   Insert=Insert().into("A").value("nullable_col",null);   assertThat(Insert.mTable).isEqualTo("A"); } 
@Test public void shouldBuildTheInsertForDefaultValues() throws Exception {   DefaultValuesInsert=Insert().into("A").defaultValues("nullable_col");   assertThat(Insert.mNullColumnHack).isEqualTo("nullable_col"); } 
@Test public void shouldBuildTheInsertInSelectFormWithoutSpecifiedColumns() throws Exception {   Query=select().allColumns().from("B").build();   Insert().into("A").longultOf(Query).perform(SQLiteDatabase);   verify(SQLiteDatabase).compileStatement(eq("INSERT INTO A " + Query.toRawQuery().mRawQuery));   verify(SQLiteStatement).executeInsert(); } 
@Test public void shouldAllowUsingQueryWithBoundArgsForInsertInSelectForm() throws Exception {   Insert().into("A").longultOf(select().allColumns().from("B").where("col=?",0).build()).perform(SQLiteDatabase);   verify(SQLiteDatabase).compileStatement(eq("INSERT INTO A SELECT * FROM B WHERE (col=?)"));   verify(SQLiteStatement).bindString(eq(1),eq("0"));   verify(SQLiteStatement).executeInsert(); } 
@Test public void shouldBuildTheInsertInSelectFormWithSpecifiedColumns() throws Exception {   Query=select().allColumns().from("B").build();   Insert().into("A").columns("a","b","c").longultOf(Query).perform(SQLiteDatabase);   verify(SQLiteDatabase).compileStatement(eq("INSERT INTO A (a, b, c) " + Query.toRawQuery().mRawQuery));   verify(SQLiteStatement).executeInsert(); } 
@Test public void shouldConcatenateSpecifiedColumnsForInsertInSelectForm() throws Exception {   Query=select().allColumns().from("B").build();   Insert().into("A").columns("a","b").columns("c").longultOf(Query).perform(SQLiteDatabase);   verify(SQLiteDatabase).compileStatement(eq("INSERT INTO A (a, b, c) " + Query.toRawQuery().mRawQuery));   verify(SQLiteStatement).executeInsert(); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectNullColumnsListInInsertInSelectForm() throws Exception {   Query=select().allColumns().from("B").build();   Insert().into("A").columns((String[])null).longultOf(Query).perform(SQLiteDatabase); } 
@Test public void shouldBuildInsertWithSingleValue() throws Exception {   Insert=Insert().into("A").value("col1","val1");   assertThat(Insert.mValues).contains(entry("col1","val1")); } 
@Test public void shouldNotModifyPassedContentValues() throws Exception {   ContentValues=new ContentValues();   Insert().into("A").ContentValues(ContentValues).value("key","value");   assertThat(ContentValues.containsKey("key")).isFalse();   ContentValues=new ContentValues();   ContentValues.put("another_key","another_value");   Insert().into("A").ContentValues(ContentValues).ContentValues(ContentValues);   assertThat(ContentValues.containsKey("another_key")).isFalse(); } 
@Test public void shouldBuildInsertWithConcatenatedContentValues() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues=new ContentValues();   ContentValues.put("col2","val2");   Insert=Insert().into("A").ContentValues(ContentValues).ContentValues(ContentValues);   assertThat(Insert.mValues).contains(entry("col1","val1"),entry("col2","val2")); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenBySingleValue() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues.put("col2","val2");   Insert=Insert().into("A").ContentValues(ContentValues).value("col2",null);   assertThat(Insert.mValues).contains(entry("col1","val1"),entry("col2",null)); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenByOtherContentValues() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues.put("col2","val2");   ContentValues=new ContentValues();   ContentValues.putNull("col2");   ContentValues.put("col3","val3");   Insert=Insert().into("A").ContentValues(ContentValues).ContentValues(ContentValues);   assertThat(Insert.mValues).contains(entry("col1","val1"),entry("col3","val3"),entry("col2",null)); } 
@Test public void shouldPerformInsertWithDefaultValues() throws Exception {   Insert().into("A").defaultValues("nullable_col").perform(SQLiteDatabase);   verify(SQLiteDatabase).Insert(eq("A"),eq("nullable_col"),isNull(ContentValues.class)); } 
@Test public void shouldPerformInsertWithValues() throws Exception {   Insert().into("A").value("col_a",42).perform(SQLiteDatabase);   ArgumentCaptor<ContentValues> ContentValuesArgument=ArgumentCaptor.forClass(ContentValues.class);   verify(SQLiteDatabase).Insert(eq("A"),isNull(String.class),ContentValuesArgument.capture());   assertThat(ContentValuesArgument.getValue()).contains(entry("col_a",42)); } 
@Test(expected=RuntimeException.class) public void shouldCrashIfPerformOrThrowFailsForInsertWithResultOf() throws Exception {   when(SQLiteStatement.executeInsert()).thenReturn(-1L);   Query=select().allColumns().from("B").build();   Insert().into("A").columns("c").longultOf(Query).performOrThrow(SQLiteDatabase); } 
@Test public void shouldReturnInsertedIdIfEverythingGoesFine() throws Exception {   when(SQLiteStatement.executeInsert()).thenReturn(5L);   Query=select().allColumns().from("B").build();   longult=Insert().into("A").columns("c").longultOf(Query).performOrThrow(SQLiteDatabase);   assertThat(longult).isEqualTo(5L); } 
@Test public void shouldUseInsertOrThrowWithinPerformOfThrowOfCommonInsert() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col_a",42);   Insert().into("A").ContentValues(ContentValues).performOrThrow(SQLiteDatabase);   verify(SQLiteDatabase).InsertOrThrow(eq("A"),isNull(String.class),eq(ContentValues)); } 
@Test public void shouldReturnSameResultAsInsertOrThrowForCommonInsert() throws Exception {   when(SQLiteDatabase.InsertOrThrow(anyString(),anyString(),any(ContentValues.class))).thenReturn(10L);   long=Insert().into("A").value("col_a",42).performOrThrow(SQLiteDatabase);   assertThat(long).isEqualTo(10L); } 
@Test public void shouldUseInsertOrThrowWithinPerformOfThrowOfDefaultValuesInsert() throws Exception {   Insert().into("A").defaultValues("nullable_col").performOrThrow(SQLiteDatabase);   verify(SQLiteDatabase).InsertOrThrow(eq("A"),eq("nullable_col"),isNull(ContentValues.class)); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldBuildTheSimpleSelect() throws Exception {   select().allColumns().from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildTheSimpleDistinctSelect() throws Exception {   Query.select().distinct().allColumns().from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT DISTINCT * FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildTheUnionCompoundQuery() throws Exception {   select().allColumns().from("table_a").union().select().allColumns().from("table_b").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a UNION SELECT * FROM table_b"),eq(new String[0])); } 
@Test public void shouldBuildTheUnionCompoundQueryWithDistinctSelect() throws Exception {   select().allColumns().from("table_a").union().select().distinct().allColumns().from("table_b").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a UNION SELECT DISTINCT * FROM table_b"),eq(new String[0])); } 
@Test public void shouldBuildTheUnionAllCompoundQuery() throws Exception {   select().allColumns().from("table_a").union().all().select().allColumns().from("table_b").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a UNION ALL SELECT * FROM table_b"),eq(new String[0])); } 
@Test public void shouldBuildTheExceptCompoundQuery() throws Exception {   select().allColumns().from("table_a").except().select().allColumns().from("table_b").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a EXCEPT SELECT * FROM table_b"),eq(new String[0])); } 
@Test public void shouldBuildTheIntersectCompoundQuery() throws Exception {   select().allColumns().from("table_a").intersect().select().allColumns().from("table_b").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a INTERSECT SELECT * FROM table_b"),eq(new String[0])); } 
@Test public void shouldBuildTheQueryWithSelection() throws Exception {   select().allColumns().from("table_a").where("column=?",0).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a WHERE (column=?)"),eq(new String[]{"0"})); } 
@Test public void shouldBuildTheQueryWithMultipleSelections() throws Exception {   select().allColumns().from("table_a").where("column=?",0).where("other_column=?",1).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a WHERE (column=?) AND (other_column=?)"),eq(new String[]{"0","1"})); } 
@Test public void shouldBuildTheQueryWithLeftJoin() throws Exception {   select().allColumns().from("table_a").left().join("table_b").on("column_a=?",0).where("column_b=?",1).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a LEFT JOIN table_b ON (column_a=?) WHERE (column_b=?)"),eq(new String[]{"0","1"})); } 
@Test public void shouldBuildTheQueryWithCrossJoin() throws Exception {   select().allColumns().from("table_a").cross().join("table_b").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a CROSS JOIN table_b"),eq(new String[0])); } 
@Test public void shouldBuildTheQueryWithNaturalJoin() throws Exception {   select().allColumns().from("table_a").natural().join("table_b").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a NATURAL JOIN table_b"),eq(new String[0])); } 
@Test public void shouldBuildTheQueryWithAliasedJoin() throws Exception {   select().allColumns().from("table_a").join("table_b").as("b").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a JOIN table_b AS b"),eq(new String[0])); } 
@Test public void shouldBuildTheQueryJoinedWithSubquery() throws Exception {   select().allColumns().from("table_a").join(select().allColumns().from("table_b").build()).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a JOIN (SELECT * FROM table_b)"),eq(new String[0])); } 
@Test public void shouldBuildTheQueryWithMultipleInnerJoins() throws Exception {   select().from("table_a").join("table_b").join("table_c").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a JOIN table_b JOIN table_c"),eq(new String[0])); } 
@Test public void shouldBuildTheQueryWithMultipleJoins() throws Exception {   select().from("table_a").join("table_b").left().join("table_c").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a JOIN table_b LEFT JOIN table_c"),eq(new String[0])); } 
@Test public void shouldBuildTheQueryFromSubquery() throws Exception {   select().allColumns().from(select().allColumns().from("table_a").build()).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM (SELECT * FROM table_a)"),eq(new String[0])); } 
@Test public void shouldBuildTheQueryWithJoinUsingColumnList() throws Exception {   select().allColumns().from("table_a").join("table_b").using("col_b","col_c").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a JOIN table_b USING (col_b, col_c)"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithSingleColumnProjection() throws Exception {   select().column("a").from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT a FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithAliasedColumnProjection() throws Exception {   select().column("a").as("aaa").from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT a AS aaa FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithAliasedColumnListProjection() throws Exception {   select().columns("a","b","c").of("table_a").asColumnNames().from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT table_a.a AS a, table_a.b AS b, table_a.c AS c FROM table_a"),eq(new String[0])); } 
@Test public void shouldConcatenateProjections() throws Exception {   select().column("a").column("b").from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT a, b FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryForAllColumnsFromSpecifiedTable() throws Exception {   select().allColumns().of("table_a").from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT table_a.* FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithAliasedTable() throws Exception {   select().from("table_a").as("a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a AS a"),eq(new String[0])); } 
@Test public void shouldAcceptEmptyProjection() throws Exception {   select().column("a").columns().from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT a FROM table_a"),eq(new String[0])); } 
@Test public void shouldAcceptNullProjection() throws Exception {   select().columns((String[])null).from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a"),eq(new String[0])); } 
@Test public void shouldSelectAllColumnsWhenProjectionIsNotSpecified() throws Exception {   select().from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a"),eq(new String[0])); } 
@Test public void shouldAcceptNullSelection() throws Exception {   select().from("table_a").where((String)null).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a"),eq(new String[0])); } 
@Test public void shouldAcceptNullExpressionSelection() throws Exception {   select().from("table_a").where((Expression)null).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a"),eq(new String[0])); } 
@Test public void shouldAcceptNullSortOrder() throws Exception {   select().from("table_a").orderBy((String)null).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithNumericLimit() throws Exception {   select().from("table_a").limit(1).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a LIMIT 1"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithExpressionLimit() throws Exception {   select().from("table_a").limit("1+1").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a LIMIT 1+1"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithNumericLimitOffset() throws Exception {   select().from("table_a").limit(1).offset(1).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a LIMIT 1 OFFSET 1"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithExpressionLimitOffset() throws Exception {   select().from("table_a").limit(1).offset("1+1").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a LIMIT 1 OFFSET 1+1"),eq(new String[0])); } 
@Test(expected=IllegalStateException.class) public void shouldAllowSettingTheLimitOnlyOnce() throws Exception {   select().from("table_a").limit(1).limit(1); } 
@Test public void shouldBuildQueryWithoutAnyTables() throws Exception {   select().column("1500").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT 1500"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithGroupByClause() throws Exception {   select().from("table_a").groupBy("col_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a GROUP BY col_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithMultipleGroupByClauses() throws Exception {   select().from("table_a").groupBy("col_a").groupBy("col_b").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a GROUP BY col_a, col_b"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithGroupByAndHavingClause() throws Exception {   select().from("table_a").groupBy("col_a").having("col_b=?",1).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a GROUP BY col_a HAVING (col_b=?)"),eq(new String[]{"1"})); } 
@Test public void shouldBuildQueryWithGroupByAndMultipleHavingClauses() throws Exception {   select().from("table_a").groupBy("col_a").having("col_b=?",1).having("col_c=?",2).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a GROUP BY col_a HAVING (col_b=?) AND (col_c=?)"),eq(new String[]{"1","2"})); } 
@Test public void shouldIgnoreNullLimit() throws Exception {   select().from("table_a").limit(null).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a"),eq(new String[0])); } 
@Test(expected=IllegalStateException.class) public void shouldNotAllowSettingValidNumericalOffsetAfterNullLimit() throws Exception {   select().from("table_a").limit(null).offset(1); } 
@Test(expected=IllegalStateException.class) public void shouldNotAllowSettingValidExpressionOffsetAfterNullLimit() throws Exception {   select().from("table_a").limit(null).offset("1+1"); } 
@Test(expected=IllegalStateException.class) public void shouldNotAllowHavingClauseWithoutGroupByClause() throws Exception {   select().from("table_a").having("col_a=?",1).build().perform(SQLiteDatabase); } 
@Test public void shouldBuildQueryWithOrderByWithoutSpecifiedSorting() throws Exception {   select().from("table_a").orderBy("col_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a ORDER BY col_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithOrderByWithAscSort() throws Exception {   select().from("table_a").orderBy("col_a").asc().build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a ORDER BY col_a ASC"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithOrderByWithDescSort() throws Exception {   select().from("table_a").orderBy("col_a").desc().build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a ORDER BY col_a DESC"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithMultipleOrderByClauses() throws Exception {   select().from("table_a").orderBy("col_a").orderBy("col_b").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a ORDER BY col_a, col_b"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithOrderByWithSpecifiedCollation() throws Exception {   select().from("table_a").orderBy("col_a").collate("NOCASE").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a ORDER BY col_a COLLATE NOCASE"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithOrderByWithSpecifiedCollationUsingCollatingSequence() throws Exception {   select().from("table_a").orderBy("col_a").collate(CollatingSequence.NOCASE).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a ORDER BY col_a COLLATE NOCASE"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithExpressionInProjection() throws Exception {   select().expr(column("col_a")).from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT col_a FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithExpressionInOrderBy() throws Exception {   select().from("table_a").orderBy(column("col_a")).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a ORDER BY col_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithExpressionInSelection() throws Exception {   select().from("table_a").where(column("col_a").is().not().nul()).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a WHERE (col_a IS NOT NULL)"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithExpressionInJoinConstraint() throws Exception {   select().from("table_a").join("table_b").on(column("table_a","id").eq().column("table_b","id_a")).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a JOIN table_b ON (table_a.id == table_b.id_a)"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithExpressionInGroupByClause() throws Exception {   select().from("table_a").groupBy(column("col_a")).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a GROUP BY col_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithExpressionInHavingClause() throws Exception {   select().from("table_a").groupBy("col_a").having(sum(column("col_b")).gt().literal(0)).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a GROUP BY col_a HAVING (SUM(col_b) > 0)"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithMultipleColumnsFromSingleTable() throws Exception {   select().columns("col_a","col_b","col_c").of("table_a").from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT table_a.col_a, table_a.col_b, table_a.col_c FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithProjectionContainingNullBuildByConvenienceMethod() throws Exception {   select().nul().as("col_a").from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT NULL AS col_a FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithProjectionContainingNumericLiteralBuildByConvenienceMethod() throws Exception {   select().literal(1500).as("col_a").from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT 1500 AS col_a FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithProjectionContainingObjectLiteralBuildByConvenienceMethod() throws Exception {   select().literal("test").as("col_a").from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT 'test' AS col_a FROM table_a"),eq(new String[0])); } 
@Test public void shouldBuildQueryWithProjectionContainingFullyQualifiedTableBuildByConvenienceMethod() throws Exception {   select().column("table_a","col_a").from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT table_a.col_a FROM table_a"),eq(new String[0])); } 
private QueryBuilder buildComplexQuery(){   return select().column("table_a","col_a").from("table_a").left().join("table_b").as("b").on("b.id > ?",1).groupBy(column("b","id")).having(column("col_a").lt().arg(),2).limit(10).offset(20).orderBy(column("table_a","col_a")).except().select().distinct().column("col_a").from("table_a").where(column("col_a").eq().literal(-1)); } 
@Test public void shouldCopyQuery() throws Exception {   Query=buildComplexQuery().build();   Query.perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT table_a.col_a FROM table_a LEFT JOIN table_b AS b ON (b.id > ?) GROUP BY b.id HAVING (col_a < ?) EXCEPT SELECT DISTINCT col_a FROM table_a WHERE (col_a == -1) ORDER BY table_a.col_a LIMIT 10 OFFSET 20"),eq(new String[]{"1","2"}));   QueryBuilder=Query.buildUpon();   QueryBuilder.build().perform(SQLiteDatabase);   verify(SQLiteDatabase,times(2)).rawQuery(eq("SELECT table_a.col_a FROM table_a LEFT JOIN table_b AS b ON (b.id > ?) GROUP BY b.id HAVING (col_a < ?) EXCEPT SELECT DISTINCT col_a FROM table_a WHERE (col_a == -1) ORDER BY table_a.col_a LIMIT 10 OFFSET 20"),eq(new String[]{"1","2"})); } 
@Test public void shouldNotChangeOriginalQueryWhenChangingACopy() throws Exception {   Query=buildComplexQuery().build();   Query.perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT table_a.col_a FROM table_a LEFT JOIN table_b AS b ON (b.id > ?) GROUP BY b.id HAVING (col_a < ?) EXCEPT SELECT DISTINCT col_a FROM table_a WHERE (col_a == -1) ORDER BY table_a.col_a LIMIT 10 OFFSET 20"),eq(new String[]{"1","2"}));   QueryBuilder=Query.buildUpon();   QueryBuilder.where(column("a").is().not().nul());   QueryBuilder.build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT table_a.col_a FROM table_a LEFT JOIN table_b AS b ON (b.id > ?) GROUP BY b.id HAVING (col_a < ?) EXCEPT SELECT DISTINCT col_a FROM table_a WHERE (col_a == -1) AND (a IS NOT NULL) ORDER BY table_a.col_a LIMIT 10 OFFSET 20"),eq(new String[]{"1","2"}));   Query.perform(SQLiteDatabase);   verify(SQLiteDatabase,times(2)).rawQuery(eq("SELECT table_a.col_a FROM table_a LEFT JOIN table_b AS b ON (b.id > ?) GROUP BY b.id HAVING (col_a < ?) EXCEPT SELECT DISTINCT col_a FROM table_a WHERE (col_a == -1) ORDER BY table_a.col_a LIMIT 10 OFFSET 20"),eq(new String[]{"1","2"})); } 
@Test public void shouldNotChangeACopyWhenChangingTheOriginalQuery() throws Exception {   QueryBuilder=buildComplexQuery();   Query=QueryBuilder.build();   Query.perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT table_a.col_a FROM table_a LEFT JOIN table_b AS b ON (b.id > ?) GROUP BY b.id HAVING (col_a < ?) EXCEPT SELECT DISTINCT col_a FROM table_a WHERE (col_a == -1) ORDER BY table_a.col_a LIMIT 10 OFFSET 20"),eq(new String[]{"1","2"}));   QueryBuilder=Query.buildUpon();   QueryBuilder.where(column("a").is().not().nul());   QueryBuilder.build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT table_a.col_a FROM table_a LEFT JOIN table_b AS b ON (b.id > ?) GROUP BY b.id HAVING (col_a < ?) EXCEPT SELECT DISTINCT col_a FROM table_a WHERE (col_a == -1) AND (a IS NOT NULL) ORDER BY table_a.col_a LIMIT 10 OFFSET 20"),eq(new String[]{"1","2"}));   QueryBuilder.build().perform(SQLiteDatabase);   verify(SQLiteDatabase,times(2)).rawQuery(eq("SELECT table_a.col_a FROM table_a LEFT JOIN table_b AS b ON (b.id > ?) GROUP BY b.id HAVING (col_a < ?) EXCEPT SELECT DISTINCT col_a FROM table_a WHERE (col_a == -1) ORDER BY table_a.col_a LIMIT 10 OFFSET 20"),eq(new String[]{"1","2"})); } 
@Test public void shouldCopyTheQueryWithIncompleteJoinStatement() throws Exception {   Query=select().from("table_a").join("table_b").build();   QueryBuilder=Query.buildUpon();   Query.perform(SQLiteDatabase);   QueryBuilder.build().perform(SQLiteDatabase);   verify(SQLiteDatabase,times(2)).rawQuery(eq("SELECT * FROM table_a JOIN table_b"),eq(new String[0])); } 
@Test public void shouldCopyTheQueryWithMultipleJoinStatements() throws Exception {   Query=select().from("table_a").join("table_b").join("table_c").build();   QueryBuilder=Query.buildUpon();   Query.perform(SQLiteDatabase);   QueryBuilder.build().perform(SQLiteDatabase);   verify(SQLiteDatabase,times(2)).rawQuery(eq("SELECT * FROM table_a JOIN table_b JOIN table_c"),eq(new String[0])); } 
@Test public void shouldOverrideSelectDistinctWithLaterCallToSelectAll() throws Exception {   select().distinct().from("table_a").all().build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a"),eq(new String[0])); } 
@Test public void shouldCopyTheQueryWithJoinStatementWithConstraint() throws Exception {   Query=select().from("table_a").join("table_b").on(column("id").eq().column("id_a")).build();   QueryBuilder=Query.buildUpon();   Query.perform(SQLiteDatabase);   QueryBuilder.build().perform(SQLiteDatabase);   verify(SQLiteDatabase,times(2)).rawQuery(eq("SELECT * FROM table_a JOIN table_b ON (id == id_a)"),eq(new String[0])); } 
@Test public void shouldCopyTheQueryWithJoinStatementWithUsingClause() throws Exception {   Query=select().from("table_a").left().join("table_b").using("id").build();   QueryBuilder=Query.buildUpon();   Query.perform(SQLiteDatabase);   QueryBuilder.build().perform(SQLiteDatabase);   verify(SQLiteDatabase,times(2)).rawQuery(eq("SELECT * FROM table_a LEFT JOIN table_b USING (id)"),eq(new String[0])); } 
@Test public void shouldGetListOfTablesForSimpleQuery() throws Exception {   Set<String>=select().from("table_a").getTables();   assertThat(Set<String>).containsExactly("table_a"); } 
@Test public void shouldGetListOfTablesFromSubqueries() throws Exception {   Set<String>=select().from(select().from("table_a").build()).getTables();   assertThat(Set<String>).containsExactly("table_a"); } 
@Test public void shouldGetListOfTablesFromJoins() throws Exception {   Set<String>=select().from("table_a").join("table_b").getTables();   assertThat(Set<String>).containsExactly("table_a","table_b"); } 
@Test public void shouldGetListOfTablesFromMultipleJoins() throws Exception {   Set<String>=select().from("table_a").join("table_b").join("table_c").getTables();   assertThat(Set<String>).containsExactly("table_a","table_b","table_c"); } 
@Test public void shouldGetListOfTablesFromJoinedSubqueries() throws Exception {   Set<String>=select().from("table_a").join(select().from("table_b").build()).getTables();   assertThat(Set<String>).containsExactly("table_a","table_b"); } 
@Test public void shouldGetListOfTablesForCompoundQuery() throws Exception {   Set<String>=select().from("table_a").union().select().from("table_b").getTables();   assertThat(Set<String>).containsExactly("table_a","table_b"); } 
@Test public void shouldGetTablesFromInExpressionInSelection() throws Exception {   Set<String>=select().from("table_a").where(column("col_a").in(select().column("id_a").from("table_b").build())).getTables();   assertThat(Set<String>).containsExactly("table_a","table_b"); } 
@Test public void shouldGetTablesFromInExpressionInHavingClause() throws Exception {   Set<String>=select().from("table_a").groupBy("col_b").having(column("col_a").in(select().column("id_a").from("table_b").build())).getTables();   assertThat(Set<String>).containsExactly("table_a","table_b"); } 
@Test public void shouldGetTablesFromInExpressionInProjection() throws Exception {   Set<String>=select().expr(column("col_a").in(select().column("id_a").from("table_b").build())).from("table_a").getTables();   assertThat(Set<String>).containsExactly("table_a","table_b"); } 
@Test public void shouldGetTablesFromInExpressionInOrderBy() throws Exception {   Set<String>=select().from("table_a").orderBy(column("col_a").in(select().column("id_a").from("table_b").build())).getTables();   assertThat(Set<String>).containsExactly("table_a","table_b"); } 
@Test public void shouldGetTablesFromInExpressionInJoinConstraints() throws Exception {   Set<String>=select().from("table_a").join("table_b").on(column("table_b","col_a").in(select().column("id_a").from("table_c").build())).getTables();   assertThat(Set<String>).containsExactly("table_a","table_b","table_c"); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectExpressionInProjectionWithUnboundArgsPlaceholders() throws Exception {   select().expr(column("col2").eq().arg()); } 
@Test public void shouldBuildProjectionFromExpressionWithBoundArgs() throws Exception {   select().expr(column("col_a").in(select().column("id").from("table_b").where("status=?","new").build())).from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT col_a IN (SELECT id FROM table_b WHERE (status=?)) FROM table_a"),eq(new String[]{"new"})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooManyArgsPlaceholders() throws Exception {   select().where(column("col2").eq().arg()); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooFewArgsPlaceholders() throws Exception {   select().where(column("col2").eq().arg(),1,2); } 
@Test public void shouldBuildSelectionFromExpressionWithArgsPlaceholders() throws Exception {   select().from("table_a").where(column("col_a").eq().arg(),"val2").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a WHERE (col_a == ?)"),eq(new String[]{"val2"})); } 
@Test public void shouldBuildSelectionFromExpressionWithBoundArgs() throws Exception {   select().from("table_a").where(column("col_a").in(select().column("id").from("table_b").where("status=?","new").build())).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a WHERE (col_a IN (SELECT id FROM table_b WHERE (status=?)))"),eq(new String[]{"new"})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectJoinConstraintWithExpressionWithTooManyArgsPlaceholders() throws Exception {   select().from("table_a").join("table_b").on(column("col2").eq().arg()); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectJoinConstraintWithExpressionWithTooFewArgsPlaceholders() throws Exception {   select().from("table_a").join("table_b").on(column("col2").eq().arg(),1,2); } 
@Test public void shouldBuildJoinConstraintFromExpressionWithArgsPlaceholders() throws Exception {   select().from("table_a").join("table_b").on(column("col_a").eq().arg(),"val2").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a JOIN table_b ON (col_a == ?)"),eq(new String[]{"val2"})); } 
@Test public void shouldBuildJoinConstraintFromExpressionWithBoundArgs() throws Exception {   select().from("table_a").join("table_b").on(column("col_a").in(select().column("id").from("table_b").where("status=?","new").build())).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a JOIN table_b ON (col_a IN (SELECT id FROM table_b WHERE (status=?)))"),eq(new String[]{"new"})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectHavingClauseWithExpressionWithTooManyArgsPlaceholders() throws Exception {   select().from("table_a").groupBy("col_a").having(column("col2").eq().arg()); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectHavingClauseWithExpressionWithTooFewArgsPlaceholders() throws Exception {   select().from("table_a").groupBy("col_a").having(column("col2").eq().arg(),1,2); } 
@Test public void shouldBuildHavingClauseFromExpressionWithArgsPlaceholders() throws Exception {   select().from("table_a").groupBy("col_a").having(column("col_b").eq().arg(),"val2").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a GROUP BY col_a HAVING (col_b == ?)"),eq(new String[]{"val2"})); } 
@Test public void shouldBuildHavingClauseFromExpressionWithBoundArgs() throws Exception {   select().from("table_a").groupBy("col_a").having(column("col_a").in(select().column("id").from("table_b").where("status=?","new").build())).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a GROUP BY col_a HAVING (col_a IN (SELECT id FROM table_b WHERE (status=?)))"),eq(new String[]{"new"})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectExpressionInGroupByWithUnboundArgsPlaceholders() throws Exception {   select().groupBy(column("col2").eq().arg()); } 
@Test public void shouldBuildGroupByFromExpressionWithBoundArgs() throws Exception {   select().from("table_a").groupBy(column("col_a").in(select().column("id").from("table_b").where("status=?","new").build())).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a GROUP BY col_a IN (SELECT id FROM table_b WHERE (status=?))"),eq(new String[]{"new"})); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectExpressionInOrderByWithUnboundArgsPlaceholders() throws Exception {   select().orderBy(column("col2").eq().arg()); } 
@Test public void shouldBuildOrderByFromExpressionWithBoundArgs() throws Exception {   select().from("table_a").orderBy(column("col_a").in(select().column("id").from("table_b").where("status=?","new").build())).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a ORDER BY col_a IN (SELECT id FROM table_b WHERE (status=?))"),eq(new String[]{"new"})); } 
@Test public void shouldAllowUsingNullArgumentsForSelection() throws Exception {   select().from("table_a").where("col_a IS NULL",(Object[])null).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a WHERE (col_a IS NULL)"),eq(new String[0])); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionWithExpression() throws Exception {   select().from("table_a").where(column("col_a").is().nul(),(Object[])null).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a WHERE (col_a IS NULL)"),eq(new String[0])); } 
@Test public void shouldAllowUsingNullArgumentsForHaving() throws Exception {   select().from("table_a").groupBy("col_a").having("col_b IS NULL",(Object[])null).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a GROUP BY col_a HAVING (col_b IS NULL)"),eq(new String[0])); } 
@Test public void shouldAllowUsingNullArgumentsForHavingWithExpression() throws Exception {   select().from("table_a").groupBy("col_a").having(column("col_b").is().nul(),(Object[])null).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a GROUP BY col_a HAVING (col_b IS NULL)"),eq(new String[0])); } 
@Test public void shouldAllowUsingNullArgumentsForJoinConstraint() throws Exception {   select().from("table_a").join("table_b").on("col_b IS NULL",(Object[])null).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a JOIN table_b ON (col_b IS NULL)"),eq(new String[0])); } 
@Test public void shouldAllowUsingNullArgumentsForJoinConstraintWithExpression() throws Exception {   select().from("table_a").join("table_b").on(column("col_b").is().nul(),(Object[])null).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a JOIN table_b ON (col_b IS NULL)"),eq(new String[0])); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectNullColumnListInJoinUsingClause() throws Exception {   select().from("table_a").join("table_b").using((String[])null).build().perform(SQLiteDatabase); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectEmptyColumnListInJoinUsingClause() throws Exception {   select().from("table_a").join("table_b").using(new String[0]).build().perform(SQLiteDatabase); } 
@Test public void shouldPreserveOrderOfSpecifiedColumns() throws Exception {   select().column("a").columns("b","c").column("d").from("table_a").build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT a, b, c, d FROM table_a"),eq(new String[0])); } 
@SuppressWarnings("ConstantConditions") @Test public void shouldGracefullyHandleNullsInVariousPlaces() throws Exception {   String[]=null;   String=null;   StringArgs=null;   String=null;   select().columns(String[]).from("table_a").where(String,StringArgs).orderBy(String).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a"),eq(new String[0])); } 
@Test public void shouldNotLoseArgumentsInJoinedSubqueries() throws Exception {   select().allColumns().from("table_a").join(select().column("col_a").from("table_b").where(column("col_b").eq().arg(),"1500")).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT * FROM table_a JOIN (SELECT col_a FROM table_b WHERE (col_b == ?))"),eq(new String[]{"1500"})); } 
@Test(expected=IllegalStateException.class) public void shouldFailIfNoTablesOrLiteralsWereSpecified() throws Exception {   select().build().perform(SQLiteDatabase); } 
@Test public void shouldAllowQueryingSimpleLiteral() throws Exception {   select().literal(1).build().perform(SQLiteDatabase);   verify(SQLiteDatabase).rawQuery(eq("SELECT 1"),eq(new String[0])); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this);   when(SQLiteDatabase.compileStatement(anyString())).thenReturn(SQLiteStatement); } 
@Test public void shouldUpdateCorrectTableWhenDoingSimpleUpdate() throws Exception {   update().table("test").value("num",666).where("num=?",0).perform(SQLiteDatabase);   verify(SQLiteDatabase).update(eq("test"),any(ContentValues.class),anyString(),any(String[].class)); } 
@Test public void shouldPassCorrectValuesWhenDoingSimpleUpdate() throws Exception {   update().table("test").value("num",666).where("num=?",0).perform(SQLiteDatabase);   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   verify(SQLiteDatabase).update(anyString(),ArgumentCaptor<ContentValues>.capture(),anyString(),any(String[].class));   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("num",666)); } 
@Test public void shouldUseCorrectSelectionAndArgsWhenDoingSimpleUpdate() throws Exception {   update().table("test").value("num",666).where("num=?",0).perform(SQLiteDatabase);   verify(SQLiteDatabase).update(anyString(),any(ContentValues.class),eq("(num=?)"),eq(new String[]{"0"})); } 
@Test public void shouldConcatenateSelectionAndArgs() throws Exception {   update().table("test").value("num",666).where("num=?",0).where("t=?","test").perform(SQLiteDatabase);   verify(SQLiteDatabase).update(anyString(),any(ContentValues.class),eq("(num=?) AND (t=?)"),eq(new String[]{"0","test"})); } 
@Test public void shouldBuildSelectionFromExpression() throws Exception {   update().table("test").value("num",666).where(column("num").eq().arg(),0).perform(SQLiteDatabase);   verify(SQLiteDatabase).update(anyString(),any(ContentValues.class),eq("(num == ?)"),eq(new String[]{"0"})); } 
@Test public void shouldUseSQLiteStatementWhenColumnExpressionIsUsed() throws Exception {   update().table("test").setColumn("num","666").perform(SQLiteDatabase);   verify(SQLiteDatabase,never()).update(anyString(),any(ContentValues.class),anyString(),any(String[].class));   verify(SQLiteDatabase).compileStatement(anyString()); } 
@Test public void shouldCopyColumnExpressionsDirectlyIntoStatement() throws Exception {   update().table("test").setColumn("num","666").perform(SQLiteDatabase);   verify(SQLiteDatabase).compileStatement(eq("UPDATE test SET num=(666)")); } 
@Test public void shouldBuildColumnExpressionsWithSelection() throws Exception {   update().table("test").setColumn("num","666").where("t=?","test").perform(SQLiteDatabase);   verify(SQLiteDatabase).compileStatement(eq("UPDATE test SET num=(666) WHERE (t=?)")); } 
@Test public void shouldBuildColumnExpressionsFromExpression() throws Exception {   update().table("test").setColumn("num",Expressions.literal(666)).perform(SQLiteDatabase);   verify(SQLiteDatabase).compileStatement(eq("UPDATE test SET num=(666)")); } 
@Test public void shouldPassContentValuesArgsAsBoundArgsWhenCustomColumnExpressionsIsUsed() throws Exception {   update().table("test").setColumn("num","666").value("t","666").perform(SQLiteDatabase);   verify(SQLiteDatabase).compileStatement(eq("UPDATE test SET num=(666), t=?")); } 
@Test public void shouldOverrideContentValuesAddedEarlierWithCustomColumnExpressionForTheSameColumn() throws Exception {   update().table("test").value("num","667").value("t","666").setColumn("num","666").perform(SQLiteDatabase);   verify(SQLiteDatabase).compileStatement(eq("UPDATE test SET num=(666), t=?")); } 
@Test public void shouldOverrideCustomColumnExpressionAddedEarlierWithContentValuesForTheSameColumn() throws Exception {   update().table("test").setColumn("t","666").setColumn("num","666").value("num","667").perform(SQLiteDatabase);   verify(SQLiteDatabase).compileStatement(eq("UPDATE test SET t=(666), num=?")); } 
@Test public void shouldRevertToSimpleUpdateWhenAllCustomColumnExpressionsAreOverridden() throws Exception {   update().table("test").setColumn("num","666").value("num","667").value("t","666").perform(SQLiteDatabase);   verify(SQLiteDatabase).update(anyString(),any(ContentValues.class),anyString(),any(String[].class));   verify(SQLiteDatabase,never()).compileStatement(anyString()); } 
@Test public void shouldNotModifyPassedContentValues() throws Exception {   ContentValues=new ContentValues();   update().table("A").ContentValues(ContentValues).value("key","value");   assertThat(ContentValues.containsKey("key")).isFalse();   ContentValues=new ContentValues();   ContentValues.put("another_key","another_value");   update().table("A").ContentValues(ContentValues).ContentValues(ContentValues);   assertThat(ContentValues.containsKey("another_key")).isFalse(); } 
@Test public void shouldBuildInsertWithConcatenatedContentValues() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues=new ContentValues();   ContentValues.put("col2","val2");   update().table("A").ContentValues(ContentValues).ContentValues(ContentValues).perform(SQLiteDatabase);   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   verify(SQLiteDatabase).update(anyString(),ArgumentCaptor<ContentValues>.capture(),anyString(),any(String[].class));   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("col1","val1"),entry("col2","val2")); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenBySingleValue() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues.put("col2","val2");   update().table("A").ContentValues(ContentValues).value("col2",null).perform(SQLiteDatabase);   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   verify(SQLiteDatabase).update(anyString(),ArgumentCaptor<ContentValues>.capture(),anyString(),any(String[].class));   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("col1","val1"),entry("col2",null)); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenByOtherContentValues() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues.put("col2","val2");   ContentValues=new ContentValues();   ContentValues.putNull("col2");   ContentValues.put("col3","val3");   update().table("A").ContentValues(ContentValues).ContentValues(ContentValues).perform(SQLiteDatabase);   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   verify(SQLiteDatabase).update(anyString(),ArgumentCaptor<ContentValues>.capture(),anyString(),any(String[].class));   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("col1","val1"),entry("col3","val3"),entry("col2",null)); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectColumnExpressionWithUnboundArgsPlaceholders() throws Exception {   update().table("A").setColumn("id",arg()); } 
@Test public void shouldUseBoundArgsFromColumnExpressions() throws Exception {   update().table("test").setColumn("col_a",column("col_b").in(select().column("id").from("B").where("status=?","new").build())).perform(SQLiteDatabase);   verify(SQLiteDatabase).compileStatement(eq("UPDATE test SET col_a=(col_b IN (SELECT id FROM B WHERE (status=?)))"));   verify(SQLiteStatement).bindString(eq(1),eq("new")); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooManyArgsPlaceholders() throws Exception {   update().table("A").value("col1","val1").where(column("col2").eq().arg()); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectSelectionWithExpressionWithTooFewArgsPlaceholders() throws Exception {   update().table("A").value("col1","val1").where(column("col2").eq().arg(),1,2); } 
@Test public void shouldBuildSelectionFromExpressionWithArgsPlaceholders() throws Exception {   update().table("A").value("col1","val1").where(column("col2").eq().arg(),"val2").perform(SQLiteDatabase);   verify(SQLiteDatabase).update(anyString(),any(ContentValues.class),eq("(col2 == ?)"),eq(new String[]{"val2"})); } 
@Test public void shouldBuildSelectionFromExpressionWithBoundArgs() throws Exception {   update().table("A").value("col1","val1").where(column("col2").in(select().column("id").from("B").where("status=?","new").build())).perform(SQLiteDatabase);   verify(SQLiteDatabase).update(anyString(),any(ContentValues.class),anyString(),eq(new String[]{"new"})); } 
@Test public void shouldNotUseBoundArgsFromColumnExpressionsOverriddenByContentValues() throws Exception {   update().table("test").setColumn("col_a",column("col_b").in(select().column("id").from("B").where("status=?","new").build())).value("col_a",666).perform(SQLiteDatabase);   verify(SQLiteDatabase).update(anyString(),any(ContentValues.class),anyString(),eq(new String[0])); } 
@Test public void shouldOverrideBoundArgsFromColumnExpressionsIfTheExpressionForTheSameColumnIsSpecifiedTwice() throws Exception {   update().table("test").setColumn("col_a",column("col_b").in(select().column("id").from("B").where("status=?","new").build())).setColumn("col_a",column("col_b").in(select().column("id").from("B").where("status=?","old").build())).perform(SQLiteDatabase);   verify(SQLiteStatement).bindString(eq(1),eq("old")); } 
@Test public void shouldOverrideBoundArgsFromColumnExpressionsWithSimpleColumnExpression() throws Exception {   update().table("test").setColumn("col_a",column("col_b").in(select().column("id").from("B").where("status=?","new").build())).setColumn("col_a","666").perform(SQLiteDatabase);   verify(SQLiteStatement).executeUpdateDelete();   verify(SQLiteStatement).close();   verifyNoMoreInteractions(SQLiteStatement); } 
@Test public void shouldAllowUsingNullArgumentsForSelection() throws Exception {   update().table("table_a").where("col_a IS NULL",(Object[])null).perform(SQLiteDatabase);   verify(SQLiteDatabase).update(eq("table_a"),any(ContentValues.class),eq("(col_a IS NULL)"),eq(new String[0])); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionWithExpression() throws Exception {   update().table("table_a").where(column("col_a").is().nul(),(Object[])null).perform(SQLiteDatabase);   verify(SQLiteDatabase).update(eq("table_a"),any(ContentValues.class),eq("(col_a IS NULL)"),eq(new String[0])); } 
@Test public void shouldAllowUsingNullSelectionWithNullArguments() throws Exception {   update().table("table_a").where((String)null).perform(SQLiteDatabase); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingNullSelectionWithArguments() throws Exception {   update().table("table_a").where((String)null,"I shall fail").perform(SQLiteDatabase); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldCreateViewFromProvidedQuery() throws Exception {   ViewActions.create().view("view_a").as(select().from("table_a").build()).perform(SQLiteDatabase);   Mockito.verify(SQLiteDatabase).execSQL("CREATE VIEW view_a AS SELECT * FROM table_a"); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingQueryWithBoundArgs() throws Exception {   ViewActions.create().view("view_a").as(select().from("table_a").where(column("col_a").eq().arg(),"test").build()); } 
@Test public void shouldDropSpecifiedView() throws Exception {   ViewActions.dropIfExists().view("view_a").perform(SQLiteDatabase);   Mockito.verify(SQLiteDatabase).execSQL("DROP VIEW IF EXISTS view_a"); } 
@Override public String apply(Cursor){   return String; } 
@Override public String apply(Cursor){   throw new AssertionError("boom"); } 
@Override public String apply(Cursor){   return Cursor.getString(0); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this);   ShadowContentResolver.registerProvider(String,ContentProvider);   MatrixCursor=buildCursor();   makeProviderReturn(MatrixCursor);   Robolectric.getBackgroundScheduler().pause(); } 
private MatrixCursor buildCursor(){   MatrixCursor=new MatrixCursor(new String[]{"name"});   MatrixCursor.addRow(new Object[]{"my_name"});   MatrixCursor.addRow(new Object[]{"my_second_name"});   MatrixCursor.setNotificationUri(Robolectric.application.getContentResolver(),Uri);   return MatrixCursor; } 
private void makeProviderReturn(Cursor){   when(ContentProvider.query(eq(Uri),(String[])isNull(),(String)isNull(),(String[])isNull(),(String)isNull())).thenReturn(Cursor); } 
@Test public void shouldApplyTransformFunctionInDoInBackground() throws Exception {   final Loader<List<String>> Loader<MyCustomWrapper>=CursorLoaderBuilder.forUri(Uri).transformRow(Function<Cursor,String>).build(Robolectric.application);   Loader<MyCustomWrapper>.startLoading();   final Loader.OnLoadCompleteListener<List<String>> Loader.OnLoadCompleteListener<MyCustomWrapper>=mock(Loader.OnLoadCompleteListener.class);   Loader<MyCustomWrapper>.registerListener(0,Loader.OnLoadCompleteListener<MyCustomWrapper>);   Robolectric.getBackgroundScheduler().runOneTask();   verify(Loader.OnLoadCompleteListener<MyCustomWrapper>).onLoadComplete(same(Loader<MyCustomWrapper>),eq(Lists.newArrayList("my_name","my_second_name"))); } 
@Test public void shouldNotCloseJustReturnedCursor() throws Exception {   final Loader<List<String>> Loader<MyCustomWrapper>=CursorLoaderBuilder.forUri(Uri).transformRow(Function<Cursor,String>).build(Robolectric.application);   Loader<MyCustomWrapper>.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   assertThat(MatrixCursor.isClosed()).isFalse(); } 
@Test public void shouldCloseOldCursorIfNewOneAppears() throws Exception {   final Loader<List<String>> Loader<MyCustomWrapper>=CursorLoaderBuilder.forUri(Uri).transformRow(Function<Cursor,String>).build(Robolectric.application);   Loader<MyCustomWrapper>.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   final MatrixCursor=new MatrixCursor(MatrixCursor.getColumnNames());   Loader<MyCustomWrapper>.reset();   Robolectric.getBackgroundScheduler().runOneTask();   makeProviderReturn(MatrixCursor);   assertThat(MatrixCursor.isClosed()).isTrue();   assertThat(MatrixCursor.isClosed()).isFalse(); } 
@Test public void shouldTransformCursorProperly() throws Exception {   final Loader<MyCustomWrapper>=CursorLoaderBuilder.forUri(Uri).transformRow(Function<Cursor,String>).transform(new Function<List<String>,MyCustomWrapper>(){     @Override public MyCustomWrapper apply(    List<String>){       return new MyCustomWrapper(List<String>);     }   } ).build(Robolectric.application);   Loader<MyCustomWrapper>.startLoading();   final Loader.OnLoadCompleteListener<MyCustomWrapper>=mock(Loader.OnLoadCompleteListener.class);   Loader<MyCustomWrapper>.registerListener(0,Loader.OnLoadCompleteListener<MyCustomWrapper>);   Robolectric.getBackgroundScheduler().runOneTask();   verify(Loader.OnLoadCompleteListener<MyCustomWrapper>).onLoadComplete(same(Loader<MyCustomWrapper>),eq(new MyCustomWrapper(Lists.newArrayList("my_name","my_second_name")))); } 
@Override public MyCustomWrapper apply(List<String>){   return new MyCustomWrapper(List<String>); } 
@Test public void shouldNotPerformLazyTransformIfNotNecessary() throws Exception {   final Loader<List<String>> Loader<MyCustomWrapper>=CursorLoaderBuilder.forUri(Uri).transformRow(Function<Cursor,String>).lazy().build(Robolectric.application);   Loader<MyCustomWrapper>.startLoading();   Robolectric.getBackgroundScheduler().runOneTask(); } 
@Ignore @Test public void shouldNotCloseOldCursorInCaseItsSameAsNewOne() throws Exception {   final Loader<MyCustomWrapper>=CursorLoaderBuilder.forUri(Uri).transformRow(Function<Cursor,String>).transform(new Function<List<String>,MyCustomWrapper>(){     @Override public MyCustomWrapper apply(    List<String>){       return new MyCustomWrapper(List<String>);     }   } ).build(Robolectric.application);   Loader<MyCustomWrapper>.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   Robolectric.application.getContentResolver().notifyChange(Uri,null);   Robolectric.getBackgroundScheduler().runOneTask();   assertThat(MatrixCursor.isClosed()).isFalse(); } 
@Override public MyCustomWrapper apply(List<String>){   return new MyCustomWrapper(List<String>); } 
private int numberOfOpenedCursors(Cursor... Cursor){   int=0;   for (  Cursor MatrixCursor : Cursor) {     if (!MatrixCursor.isClosed()) {       int++;     }   }   return int; } 
@Test public void shouldNotCloseOldCursorWhenItsTransformedToTheEqualObjectAsOldOne() throws Exception {   final Loader<MyCustomWrapper>=CursorLoaderBuilder.forUri(Uri).transformRow(Function<Cursor,String>).transform(new Function<List<String>,MyCustomWrapper>(){     @Override public MyCustomWrapper apply(    List<String>){       return new MyCustomWrapper(List<String>);     }   } ).build(Robolectric.application);   Loader<MyCustomWrapper>.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   Robolectric.application.getContentResolver().notifyChange(Uri,null);   MatrixCursor=buildCursor();   makeProviderReturn(MatrixCursor);   Robolectric.getBackgroundScheduler().runOneTask();   assertThat(numberOfOpenedCursors(MatrixCursor,MatrixCursor)).isEqualTo(1); } 
@Override public MyCustomWrapper apply(List<String>){   return new MyCustomWrapper(List<String>); } 
@Test public void shouldNotCloseOldCursorWhenItsTransformedToTheSameObjectAsOldOne() throws Exception {   final Loader<String> Loader<MyCustomWrapper>=CursorLoaderBuilder.forUri(Uri).transform(Function<Cursor,String>).build(Robolectric.application);   Loader<MyCustomWrapper>.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   Robolectric.application.getContentResolver().notifyChange(Uri,null);   MatrixCursor=buildCursor();   makeProviderReturn(MatrixCursor);   Robolectric.getBackgroundScheduler().runOneTask();   assertThat(numberOfOpenedCursors(MatrixCursor,MatrixCursor)).isEqualTo(1); } 
@Test public void shouldCloseOldCursorDeliveredEarlierTwice() throws Exception {   final Loader<MyCustomWrapper>=CursorLoaderBuilder.forUri(Uri).transformRow(Function<Cursor,String>).transform(new Function<List<String>,MyCustomWrapper>(){     @Override public MyCustomWrapper apply(    List<String>){       return new MyCustomWrapper(List<String>);     }   } ).build(Robolectric.application);   Loader<MyCustomWrapper>.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   Loader<MyCustomWrapper>.startLoading();   Robolectric.getBackgroundScheduler().runOneTask();   Loader<MyCustomWrapper>.reset();   Robolectric.getBackgroundScheduler().runOneTask();   assertThat(MatrixCursor.isClosed()).isTrue(); } 
@Override public MyCustomWrapper apply(List<String>){   return new MyCustomWrapper(List<String>); } 
@Test public void shouldNotDeliverResultIfLoaderHasBeenResetAlready() throws Exception {   final Loader<MyCustomWrapper>=CursorLoaderBuilder.forUri(Uri).transformRow(Function<Cursor,String>).transform(new Function<List<String>,MyCustomWrapper>(){     @Override public MyCustomWrapper apply(    List<String>){       return new MyCustomWrapper(List<String>);     }   } ).build(Robolectric.application);   final Loader.OnLoadCompleteListener<MyCustomWrapper>=mock(Loader.OnLoadCompleteListener.class);   Loader<MyCustomWrapper>.registerListener(0,Loader.OnLoadCompleteListener<MyCustomWrapper>);   Loader<MyCustomWrapper>.startLoading();   Loader<MyCustomWrapper>.reset();   Robolectric.getBackgroundScheduler().runTasks(1);   makeProviderReturn(new MatrixCursor(MatrixCursor.getColumnNames()));   Loader<MyCustomWrapper>.startLoading();   Robolectric.getBackgroundScheduler().runTasks(1);   verify(Loader.OnLoadCompleteListener<MyCustomWrapper>,times(1)).onLoadComplete(same(Loader<MyCustomWrapper>),eq(new MyCustomWrapper(Lists.<String>newArrayList()))); } 
@Override public MyCustomWrapper apply(List<String>){   return new MyCustomWrapper(List<String>); } 
private MyCustomWrapper(List<String>){   this.List<String>=List<String>; } 
@Override public bObjectObjectlean equals(Object){   if (this == Object)   return true;   if (Object == null || getClass() != Object.getClass())   return false;   MyCustObjectmWrapper MyCustomWrapper=(MyCustObjectmWrapper)Object;   return Objects.equal(List<String>,MyCustomWrapper.List<String>); } 
@Override public int hashCode(){   return List<String> != null ? List<String>.hashCode() : 0; } 
@Test public void shouldAccessProperRow() throws Exception {   final MatrixCursor=new MatrixCursor(new String[]{"name"});   for (int i=0; i < 10; i++) {     MatrixCursor.addRow(new Object[]{"Name" + i});   }   final LazyCursorList<String>=new LazyCursorList<String>(MatrixCursor,new Function<Cursor,String>(){     @Override public String apply(    Cursor MatrixCursor){       return MatrixCursor.getString(0);     }   } );   assertThat(LazyCursorList<String>.get(5)).isEqualTo("Name" + 5); } 
@Override public String apply(Cursor){   return Cursor.getString(0); } 
@Test public void shouldContainProperSize() throws Exception {   final MatrixCursor=new MatrixCursor(new String[]{"name"});   for (int i=0; i < 10; i++) {     MatrixCursor.addRow(new Object[]{"Name" + i});   }   final LazyCursorList<String>=new LazyCursorList<String>(MatrixCursor,new Function<Cursor,String>(){     @Override public String apply(    Cursor MatrixCursor){       return null;     }   } );   assertThat(LazyCursorList<String>.size()).isEqualTo(MatrixCursor.getCount()); } 
@Override public String apply(Cursor){   return null; } 
@Test public void shouldSurviveNullCursor() throws Exception {   final LazyCursorList<String>=new LazyCursorList<String>(null,new Function<Cursor,String>(){     @Override public String apply(    Cursor MatrixCursor){       return MatrixCursor.getString(0);     }   } );   assertThat(LazyCursorList<String>).isEmpty(); } 
@Override public String apply(Cursor){   return Cursor.getString(0); } 
@Test public void shouldWorkFineWithValueBackReferences() throws Exception {   final Insert=ProviderAction.insert(Uri.EMPTY);   final InsertInsert=ProviderAction.insert(Uri.EMPTY);   final ArrayList<ContentProviderOperation>=Batcher.begin().append(Insert).append(InsertInsert).append(ProviderAction.insert(Uri.EMPTY)).withValueBackReference(Insert,BaseColumns._ID).withValueBackReference(InsertInsert,"contact_id").ArrayList<ContentProviderOperation>();   assertThat(ArrayList<ContentProviderOperation>).hasSize(3);   final ContentProviderOperation=ArrayList<ContentProviderOperation>.get(2);   ShadowContentProviderOperation=Robolectric.shadowOf(ContentProviderOperation);   final ContentValues=ShadowContentProviderOperation.getValuesBackReferences();   assertThat(ContentValues.get("_id")).isEqualTo(0);   assertThat(ContentValues.get("contact_id")).isEqualTo(1); } 
@Test public void shouldResolveSelectionBackReferences() throws Exception {   final Insert=ProviderAction.insert(Uri.EMPTY);   final InsertInsert=ProviderAction.insert(Uri.EMPTY);   final ArrayList<ContentProviderOperation>=Batcher.begin().append(Insert).append(InsertInsert).append(ProviderAction.update(Uri.EMPTY).value("test",1L).where(BaseColumns._ID + "=? AND contact_id=?")).withSelectionBackReference(Insert,0).withSelectionBackReference(InsertInsert,1).ArrayList<ContentProviderOperation>();   assertThat(ArrayList<ContentProviderOperation>).hasSize(3);   final ContentProviderOperation=ArrayList<ContentProviderOperation>.get(2);   ShadowContentProviderOperation=Robolectric.shadowOf(ContentProviderOperation);   final Map<Integer,Integer> ContentValues=ShadowContentProviderOperation.getSelectionArgsBackReferences();   assertThat(ContentValues).containsEntry(0,0);   assertThat(ContentValues).containsEntry(1,1); } 
@Test public void shouldGenerateProperListOfContentProviderOperations() throws Exception {   final ArrayList<ContentProviderOperation>=Batcher.begin().append(ProviderAction.insert(createFakeUri("Insert"))).append(ProviderAction.insert(createFakeUri("Insert"))).append(ProviderAction.update(createFakeUri("third")).value("test",1L)).ArrayList<ContentProviderOperation>();   assertThat(ArrayList<ContentProviderOperation>).hasSize(3);   operationAssert(ArrayList<ContentProviderOperation>.get(0),createFakeUri("Insert"),ShadowContentProviderOperation.TYPE_INSERT);   operationAssert(ArrayList<ContentProviderOperation>.get(1),createFakeUri("Insert"),ShadowContentProviderOperation.TYPE_INSERT);   operationAssert(ArrayList<ContentProviderOperation>.get(2),createFakeUri("third"),ShadowContentProviderOperation.TYPE_UPDATE); } 
@Test public void shouldTakeCareAboutContentValuesInBatch() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("test1",1L);   ContentValues.put("test2","blah");   final ArrayList<ContentProviderOperation>=Batcher.begin().append(ProviderAction.insert(createFakeUri("Insert")).ContentValues(ContentValues)).ArrayList<ContentProviderOperation>();   final ShadowContentProviderOperation=Robolectric.shadowOf(ArrayList<ContentProviderOperation>.get(0));   assertThat(ShadowContentProviderOperation.getContentValues()).isEqualTo(ContentValues); } 
@Test public void shouldGenerateEmptyOperations() throws Exception {   assertThat(Batcher.begin().ArrayList<ContentProviderOperation>()).isEmpty(); } 
@Test public void shouldMapToProperInsertEvenIfTheyHaveIdenticalState() throws Exception {   final Insert=ProviderAction.insert(createFakeUri("only"));   final Insert=ProviderAction.insert(createFakeUri("only"));   final ArrayList<ContentProviderOperation>=Batcher.begin().append(Insert).append(Insert).append(ProviderAction.insert(createFakeUri("only"))).withValueBackReference(Insert,"column").ArrayList<ContentProviderOperation>();   assertThat(ArrayList<ContentProviderOperation>).hasSize(3);   final ShadowContentProviderOperation=Robolectric.shadowOf(Iterables.getLast(ArrayList<ContentProviderOperation>));   final ContentValues=ShadowContentProviderOperation.getValuesBackReferences();   assertThat(ContentValues.get("column")).isEqualTo(0); } 
@Test(expected=IllegalStateException.class) public void shouldThrowAnExceptionIfRequestingForPreviousWhenItsDuplicated() throws Exception {   final Insert=ProviderAction.insert(createFakeUri("only"));   Batcher.begin().append(Insert).append(Insert).append(ProviderAction.insert(createFakeUri("only"))).withValueBackReference(Insert,"column").ArrayList<ContentProviderOperation>(); } 
@Test(expected=IllegalStateException.class) public void shouldThrowAnExceptionInCaseReferencedInsertDoesNotExistInBatcher() throws Exception {   final Insert=ProviderAction.insert(createFakeUri("only"));   Batcher.begin().append(ProviderAction.insert(createFakeUri("only"))).withValueBackReference(Insert,"column").ArrayList<ContentProviderOperation>(); } 
@Test(expected=IllegalStateException.class) public void shouldThrowAnExceptionIfPreviousInsertForSelectionBackReferenceIsDuplicated() throws Exception {   final Insert=ProviderAction.insert(createFakeUri("only"));   Batcher.begin().append(Insert).append(Insert).append(ProviderAction.delete(createFakeUri("only")).where(BaseColumns._ID + "=?")).withSelectionBackReference(Insert,0).ArrayList<ContentProviderOperation>(); } 
@Test(expected=IllegalStateException.class) public void shouldThrowAnExceptionPreviousInsertForSelectionBackReferenceWasNotAddedToBatcher() throws Exception {   final Insert=ProviderAction.insert(createFakeUri("only"));   Batcher.begin().append(ProviderAction.delete(createFakeUri("only")).where(BaseColumns._ID + "=?")).withSelectionBackReference(Insert,0).ArrayList<ContentProviderOperation>(); } 
@Test public void shouldResolveValueBackReferencesForAllConvertiblesWithinIterable() throws Exception {   final Insert=ProviderAction.insert(createFakeUri("fake"));   final Insert=ProviderAction.insert(createFakeUri("Insert"));   final int=5;   final List<ConvertibleToOperation>=Collections.<ConvertibleToOperation>nCopies(int,ProviderAction.insert(createFakeUri("another")));   final List<ConvertibleToOperation> InsertDependants=Collections.<ConvertibleToOperation>nCopies(int,ProviderAction.insert(createFakeUri("yetAnother")));   final ArrayList<ContentProviderOperation>=Batcher.begin().append(Insert).append(Insert).append(List<ConvertibleToOperation>).withValueBackReference(Insert,"parent_id").withValueBackReference(Insert,"another_parent_id").append(InsertDependants).withValueBackReference(Insert,"parent_id").withValueBackReference(Insert,"another_parent_id").ArrayList<ContentProviderOperation>();   assertThat(ArrayList<ContentProviderOperation>).hasSize(int * 2 + 2);   for (  ContentProviderOperation ShadowContentProviderOperation : ArrayList<ContentProviderOperation>.subList(2,2 + int)) {     final ShadowContentProviderOperation=Robolectric.shadowOf(ShadowContentProviderOperation);     final ContentValues=ShadowContentProviderOperation.getValuesBackReferences();     assertThat(ContentValues.get("parent_id")).isEqualTo(0);     assertThat(ContentValues.get("another_parent_id")).isEqualTo(1);   }   for (  ContentProviderOperation ShadowContentProviderOperation : ArrayList<ContentProviderOperation>.subList(2 + int,ArrayList<ContentProviderOperation>.size())) {     final ShadowContentProviderOperation=Robolectric.shadowOf(ShadowContentProviderOperation);     final ContentValues=ShadowContentProviderOperation.getValuesBackReferences();     assertThat(ContentValues.get("parent_id")).isEqualTo(1);     assertThat(ContentValues.get("another_parent_id")).isEqualTo(0);   } } 
@Test(expected=RuntimeException.class) public void shouldThrowRuntimeExceptionIfRemoteExceptionOccurInResolver() throws Exception {   throwAnExceptionInsideResolversApplyBatch(OperationApplicationException.class); } 
@Test(expected=RuntimeException.class) public void shouldThrowRuntimeExceptionIfOperationApplicationExceptionOccurInResolver() throws Exception {   throwAnExceptionInsideResolversApplyBatch(OperationApplicationException.class); } 
@Test(expected=SecurityException.class) public void ifExceptionThrownFromApplyBatchIsNotCheckedThenJustThrowItInResolver() throws Exception {   throwAnExceptionInsideResolversApplyBatch(SecurityException.class); } 
@Test(expected=RuntimeException.class) public void shouldThrowRuntimeExceptionIfRemoteExceptionOccurInProviderClient() throws Exception {   throwAnExceptionInsideClientsApplyBatch(OperationApplicationException.class); } 
@Test(expected=RuntimeException.class) public void shouldThrowRuntimeExceptionIfOperationApplicationExceptionOccurInProviderClient() throws Exception {   throwAnExceptionInsideClientsApplyBatch(OperationApplicationException.class); } 
@Test(expected=SecurityException.class) public void ifExceptionThrownFromApplyBatchIsNotCheckedThenJustThrowItInProviderClient() throws Exception {   throwAnExceptionInsideClientsApplyBatch(SecurityException.class); } 
@Test public void shouldDecorateOperationsUrisIfSpecified() throws Exception {   final ArrayList<ContentProviderOperation>=Batcher.begin().append(ProviderAction.insert(createFakeUri("Insert"))).append(ProviderAction.update(createFakeUri("Insert")).value("test",1L)).append(ProviderAction.delete(createFakeUri("third"))).decorateUrisWith(new UriDecorator(){     @Override public Uri decorate(    Uri uri){       return Uri.withAppendedPath(uri,"boom");     }   } ).ArrayList<ContentProviderOperation>();   assertThat(ArrayList<ContentProviderOperation>).hasSize(3);   operationAssert(ArrayList<ContentProviderOperation>.get(0),createFakeUri("Insert","boom"),ShadowContentProviderOperation.TYPE_INSERT);   operationAssert(ArrayList<ContentProviderOperation>.get(1),createFakeUri("Insert","boom"),ShadowContentProviderOperation.TYPE_UPDATE);   operationAssert(ArrayList<ContentProviderOperation>.get(2),createFakeUri("third","boom"),ShadowContentProviderOperation.TYPE_DELETE); } 
@Override public Uri decorate(Uri){   return Uri.withAppendedPath(Uri,"boom"); } 
@SuppressWarnings("unchecked") private void throwAnExceptionInsideResolversApplyBatch(Class<? extends Exception>) throws RemoteException, OperationApplicationException {   final ContentResolver=mock(ContentResolver.class);   when(ContentResolver.applyBatch(anyString(),any(ArrayList.class))).thenThrow(Class<? extends Exception>);   Batcher.begin().append(ProviderAction.insert(createFakeUri("fake"))).applyBatchOrThrow("com.fakedomain.base",ContentResolver); } 
@SuppressWarnings("unchecked") private void throwAnExceptionInsideClientsApplyBatch(Class<? extends Exception>) throws RemoteException, OperationApplicationException {   final ContentProviderClient=mock(ContentProviderClient.class);   when(ContentProviderClient.applyBatch(any(ArrayList.class))).thenThrow(Class<? extends Exception>);   Batcher.begin().append(ProviderAction.insert(createFakeUri("fake"))).applyBatchOrThrow(ContentProviderClient); } 
private static Uri createFakeUri(String... String){   Builder=Uri.parse("content:  for (  String path : String) {     Builder.appendPath(path);   }   return Builder.build(); } 
private static void ContentProviderOperationAssert(ContentProviderOperation,Uri,int){   final ShadowContentProviderOperation=Robolectric.shadowOf(ContentProviderOperation);   assertThat(ContentProviderOperation.getUri()).isEqualTo(Uri);   assertThat(ShadowContentProviderOperation.getType()).isEqualTo(int); } 
@Test public void shouldConstructInsertOperation() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("key","value");   ContentValues.put("second",2L);   final ContentProviderOperation=ProviderAction.insert(createFakeUri("endpoint")).ContentValues(ContentValues).toContentProviderOperation(Utils.DUMMY_URI_DECORATOR);   final ShadowContentProviderOperation=Robolectric.shadowOf(ContentProviderOperation);   assertThat(ContentProviderOperation.getUri()).isEqualTo(createFakeUri("endpoint"));   assertThat(ShadowContentProviderOperation.getType()).isEqualTo(ShadowContentProviderOperation.TYPE_INSERT);   assertThat(ShadowContentProviderOperation.getContentValues()).isEqualTo(ContentValues); } 
@Test public void shouldConstructUpdateOperation() throws Exception {   final ContentProviderOperation=ProviderAction.update(createFakeUri("endpoint")).value("key","value").where("key=?","hello").toContentProviderOperation(Utils.DUMMY_URI_DECORATOR);   final ShadowContentProviderOperation=Robolectric.shadowOf(ContentProviderOperation);   assertThat(ContentProviderOperation.getUri()).isEqualTo(createFakeUri("endpoint"));   assertThat(ShadowContentProviderOperation.getType()).isEqualTo(ShadowContentProviderOperation.TYPE_UPDATE);   assertThat(ShadowContentProviderOperation.getSelection()).isEqualTo("(key=?)");   assertThat(ShadowContentProviderOperation.getSelectionArgs()).isEqualTo(new String[]{"hello"}); } 
@Test public void shouldConstructDeleteOperation() throws Exception {   final ContentProviderOperation=ProviderAction.delete(createFakeUri("endpoint")).where("key=?","hello").toContentProviderOperation(Utils.DUMMY_URI_DECORATOR);   final ShadowContentProviderOperation=Robolectric.shadowOf(ContentProviderOperation);   assertThat(ContentProviderOperation.getUri()).isEqualTo(createFakeUri("endpoint"));   assertThat(ShadowContentProviderOperation.getType()).isEqualTo(ShadowContentProviderOperation.TYPE_DELETE);   assertThat(ShadowContentProviderOperation.getSelection()).isEqualTo("(key=?)");   assertThat(ShadowContentProviderOperation.getSelectionArgs()).isEqualTo(new String[]{"hello"}); } 
private static Uri createFakeUri(String){   return Uri.parse("content:} 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldPassNullsEverywhere() throws Exception {   ProviderAction.query(Uri).perform(ContentResolver);   verify(ContentResolver).query(eq(Uri),eq((String[])null),eq((String)null),eq((String[])null),eq((String)null)); } 
@Test public void shouldUseProjectionWhenQuery() throws Exception {   ProviderAction.query(Uri).projection("COL1").perform(ContentResolver);   verify(ContentResolver).query(eq(Uri),eq(new String[]{"COL1"}),eq((String)null),eq((String[])null),eq((String)null)); } 
@Test public void shouldAppendProjection() throws Exception {   ProviderAction.query(Uri).projection("COL1").projection("COL2").perform(ContentResolver);   verify(ContentResolver).query(eq(Uri),eq(new String[]{"COL1","COL2"}),eq((String)null),eq((String[])null),eq((String)null)); } 
@Test public void shouldConcatenateSelectionProperlyWhenQuerying() throws Exception {   ProviderAction.query(Uri).where("COL1 = ?","arg").where("COL2 = ?","arg2").perform(ContentResolver);   verify(ContentResolver).query(eq(Uri),eq((String[])null),eq("(COL1 = ?) AND (COL2 = ?)"),eq(new String[]{"arg","arg2"}),eq((String)null)); } 
@Test public void shouldAddParenthesesForEachWhereWhenQuerying() throws Exception {   ProviderAction.query(Uri).where("COL1 = ? OR COL1 = ?","arg","argh").where("COL2 = ?","arg2").perform(ContentResolver);   verify(ContentResolver).query(eq(Uri),eq((String[])null),eq("(COL1 = ? OR COL1 = ?) AND (COL2 = ?)"),eq(new String[]{"arg","argh","arg2"}),eq((String)null)); } 
@Test public void shouldAddParenthesesForEachWhereWhenDeleting() throws Exception {   ProviderAction.delete(Uri).where("COL1 = ? OR COL1 = ?","arg","argh").where("COL2 = ?","arg2").perform(ContentResolver);   verify(ContentResolver).delete(eq(Uri),eq("(COL1 = ? OR COL1 = ?) AND (COL2 = ?)"),eq(new String[]{"arg","argh","arg2"})); } 
@Test public void shouldAddParenthesesForEachWhereWhenUpdating() throws Exception {   ProviderAction.update(Uri).where("COL1 = ? OR COL1 = ?","arg","argh").where("COL2 = ?","arg2").perform(ContentResolver);   verify(ContentResolver).update(eq(Uri),any(ContentValues.class),eq("(COL1 = ? OR COL1 = ?) AND (COL2 = ?)"),eq(new String[]{"arg","argh","arg2"})); } 
@Test public void shouldUseOrderBy() throws Exception {   ProviderAction.query(Uri).orderBy("COL1 DESC").perform(ContentResolver);   verify(ContentResolver).query(eq(Uri),eq((String[])null),eq((String)null),eq((String[])null),eq("COL1 DESC")); } 
@Test public void shouldPerformProperInsert() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("asdf","value");   ProviderAction.insert(Uri).ContentValues(ContentValues).perform(ContentResolver);   verify(ContentResolver).insert(eq(Uri),eq(ContentValues)); } 
@Test public void shouldPerformInsertWithSingleValue() throws Exception {   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.insert(Uri).value("col1","val1").perform(ContentResolver);   verify(ContentResolver).insert(eq(Uri),ArgumentCaptor<ContentValues>.capture());   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("col1","val1")); } 
@Test public void insertShouldNotModifyPassedContentValues() throws Exception {   ContentValues=new ContentValues();   ProviderAction.insert(Uri).ContentValues(ContentValues).value("key","value").perform(ContentResolver);   assertThat(ContentValues.containsKey("key")).isFalse();   ContentValues=new ContentValues();   ContentValues.put("another_key","another_value");   ProviderAction.insert(Uri).ContentValues(ContentValues).ContentValues(ContentValues).perform(ContentResolver);   assertThat(ContentValues.containsKey("another_key")).isFalse(); } 
@Test public void shouldPerformInsertWithConcatenatedContentValues() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues=new ContentValues();   ContentValues.put("col2","val2");   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.insert(Uri).ContentValues(ContentValues).ContentValues(ContentValues).perform(ContentResolver);   verify(ContentResolver).insert(eq(Uri),ArgumentCaptor<ContentValues>.capture());   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("col1","val1"),entry("col2","val2")); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenBySingleValue() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues.put("col2","val2");   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.insert(Uri).ContentValues(ContentValues).value("col2",null).perform(ContentResolver);   verify(ContentResolver).insert(eq(Uri),ArgumentCaptor<ContentValues>.capture());   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("col1","val1"),entry("col2",null)); } 
@Test public void shouldPerformInsertWithContentValuesOverriddenByOtherContentValues() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues.put("col2","val2");   ContentValues=new ContentValues();   ContentValues.putNull("col2");   ContentValues.put("col3","val3");   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.insert(Uri).ContentValues(ContentValues).ContentValues(ContentValues).perform(ContentResolver);   verify(ContentResolver).insert(eq(Uri),ArgumentCaptor<ContentValues>.capture());   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("col1","val1"),entry("col3","val3"),entry("col2",null)); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectInsertWithSingleValueOfUnsupportedType() throws Exception {   ProviderAction.insert(Uri).value("col1",new Object()); } 
@Test public void shouldPerformUpdateWithValues() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ProviderAction.update(Uri).ContentValues(ContentValues).perform(ContentResolver);   verify(ContentResolver).update(eq(Uri),eq(ContentValues),eq((String)null),eq((String[])null)); } 
@Test public void shouldPerformUpdateWithSingleValue() throws Exception {   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.update(Uri).value("col1","val1").perform(ContentResolver);   verify(ContentResolver).update(eq(Uri),ArgumentCaptor<ContentValues>.capture(),eq((String)null),eq((String[])null));   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("col1","val1")); } 
@Test public void shouldPerformUpdateWithConcatenatedContentValues() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues=new ContentValues();   ContentValues.put("col2","val2");   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.update(Uri).ContentValues(ContentValues).ContentValues(ContentValues).perform(ContentResolver);   verify(ContentResolver).update(eq(Uri),ArgumentCaptor<ContentValues>.capture(),eq((String)null),eq((String[])null));   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("col1","val1"),entry("col2","val2")); } 
@Test public void shouldPerformUpdateWithContentValuesOverriddenBySingleValue() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues.put("col2","val2");   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.update(Uri).ContentValues(ContentValues).value("col2",null).perform(ContentResolver);   verify(ContentResolver).update(eq(Uri),ArgumentCaptor<ContentValues>.capture(),eq((String)null),eq((String[])null));   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("col1","val1"),entry("col2",null)); } 
@Test public void shouldPerformUpdateWithContentValuesOverriddenByOtherContentValues() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ContentValues.put("col2","val2");   ContentValues=new ContentValues();   ContentValues.putNull("col2");   ContentValues.put("col3","val3");   ArgumentCaptor<ContentValues>=ArgumentCaptor.forClass(ContentValues.class);   ProviderAction.update(Uri).ContentValues(ContentValues).ContentValues(ContentValues).perform(ContentResolver);   verify(ContentResolver).update(eq(Uri),ArgumentCaptor<ContentValues>.capture(),eq((String)null),eq((String[])null));   assertThat(ArgumentCaptor<ContentValues>.getValue()).contains(entry("col1","val1"),entry("col3","val3"),entry("col2",null)); } 
@Test(expected=IllegalArgumentException.class) public void shouldRejectUpdateWithSingleValueOfUnsupportedType() throws Exception {   ProviderAction.update(Uri).value("col1",new Object()); } 
@Test public void shouldPerformUpdateWithSelectionAndSelectionArgs() throws Exception {   ContentValues=new ContentValues();   ContentValues.put("col1","val1");   ProviderAction.update(Uri).ContentValues(ContentValues).where("col2 = ?","blah").perform(ContentResolver);   verify(ContentResolver).update(eq(Uri),eq(ContentValues),eq("(col2 = ?)"),eq(new String[]{"blah"})); } 
@Test public void updateShouldNotModifyPassedContentValues() throws Exception {   ContentValues=new ContentValues();   ProviderAction.update(Uri).ContentValues(ContentValues).value("key","value").perform(ContentResolver);   assertThat(ContentValues.containsKey("key")).isFalse();   ContentValues=new ContentValues();   ContentValues.put("another_key","another_value");   ProviderAction.update(Uri).ContentValues(ContentValues).ContentValues(ContentValues).perform(ContentResolver);   assertThat(ContentValues.containsKey("another_key")).isFalse(); } 
@Test public void shouldPerformDeleteOnUri() throws Exception {   ProviderAction.delete(Uri).perform(ContentResolver);   verify(ContentResolver).delete(eq(Uri),eq((String)null),eq((String[])null)); } 
@Test public void shouldCareAboutSelectionAndSelectionArgsWhenDeleting() throws Exception {   ProviderAction.delete(Uri).where("col1 = ?","val1").perform(ContentResolver);   verify(ContentResolver).delete(eq(Uri),eq("(col1 = ?)"),eq(new String[]{"val1"})); } 
@Test public void shouldBeAbleToUseNonStringObjectsInSelectionArgs() throws Exception {   ProviderAction.query(Uri).where("col1 > ?",18).perform(ContentResolver);   verify(ContentResolver).query(eq(Uri),eq((String[])null),eq("(col1 > ?)"),eq(new String[]{"18"}),eq((String)null)); } 
@Test public void shouldBeAbleToCreateASelectionWithWhereIn() throws Exception {   final List<?> List<Object>=Lists.newArrayList(1L,"two",3L);   ProviderAction.query(Uri).whereIn("col1",List<Object>).perform(ContentResolver);   final String="(" + "col1 IN (" + Joiner.on(",").join(Collections2.transform(List<Object>,Utils.toEscapedSqlFunction())) + ")"+ ")";   verify(ContentResolver).query(eq(Uri),eq((String[])null),eq(String),eq((String[])null),eq((String)null)); } 
@Test public void shouldBeAbleToCreateAnUpdateWithWhereIn() throws Exception {   final List<Object>=Lists.<Object>newArrayList(1L,"two",3L);   ProviderAction.update(Uri).whereIn("col1",List<Object>).perform(ContentResolver);   final String="(" + "col1 IN (" + Joiner.on(",").join(Collections2.transform(List<Object>,Utils.toEscapedSqlFunction())) + ")"+ ")";   verify(ContentResolver).update(eq(Uri),any(ContentValues.class),eq(String),eq((String[])null)); } 
@Test public void shouldBeAbleToCreateADeleteWithWhereIn() throws Exception {   final List<Object>=Lists.<Object>newArrayList(1L,"two",3L);   ProviderAction.delete(Uri).whereIn("col1",List<Object>).perform(ContentResolver);   final String="(" + "col1 IN (" + Joiner.on(",").join(Collections2.transform(List<Object>,Utils.toEscapedSqlFunction())) + ")"+ ")";   verify(ContentResolver).delete(eq(Uri),eq(String),eq((String[])null)); } 
@Test public void shouldAlwaysPassNonNullContentValuesOnInsert() throws Exception {   ProviderAction.insert(Uri).perform(ContentResolver);   verify(ContentResolver).insert(eq(Uri),isNotNull(ContentValues.class)); } 
@Test public void shouldAlwaysPassNonNullContentValuesOnUpdate() throws Exception {   ProviderAction.update(Uri).perform(ContentResolver);   verify(ContentResolver).update(eq(Uri),isNotNull(ContentValues.class),isNull(String.class),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullSelectionOnQuery() throws Exception {   ProviderAction.query(Uri).where(null).perform(ContentResolver);   verify(ContentResolver).query(eq(Uri),isNull(String[].class),isNull(String.class),isNull(String[].class),isNull(String.class)); } 
@Test public void shouldAllowUsingNullSelectionOnUpdate() throws Exception {   ProviderAction.update(Uri).where(null).perform(ContentResolver);   verify(ContentResolver).update(eq(Uri),any(ContentValues.class),isNull(String.class),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullSelectionOnDelete() throws Exception {   ProviderAction.delete(Uri).where(null).perform(ContentResolver);   verify(ContentResolver).delete(eq(Uri),isNull(String.class),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionOnQuery() throws Exception {   ProviderAction.query(Uri).where("col1 IS NULL",Object[]).perform(ContentResolver);   verify(ContentResolver).query(eq(Uri),isNull(String[].class),eq("(col1 IS NULL)"),isNull(String[].class),isNull(String.class)); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionOnUpdate() throws Exception {   ProviderAction.update(Uri).where("col1 IS NULL",Object[]).perform(ContentResolver);   verify(ContentResolver).update(eq(Uri),any(ContentValues.class),eq("(col1 IS NULL)"),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullArgumentsForSelectionOnDelete() throws Exception {   ProviderAction.delete(Uri).where("col1 IS NULL",Object[]).perform(ContentResolver);   verify(ContentResolver).delete(eq(Uri),eq("(col1 IS NULL)"),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullSelectionAndArgumentsOnQuery() throws Exception {   ProviderAction.query(Uri).where(null,Object[]).perform(ContentResolver);   verify(ContentResolver).query(eq(Uri),isNull(String[].class),isNull(String.class),isNull(String[].class),isNull(String.class)); } 
@Test public void shouldAllowUsingNullSelectionAndArgumentsOnUpdate() throws Exception {   ProviderAction.update(Uri).where(null,Object[]).perform(ContentResolver);   verify(ContentResolver).update(eq(Uri),any(ContentValues.class),isNull(String.class),isNull(String[].class)); } 
@Test public void shouldAllowUsingNullSelectionAndArgumentsOnDelete() throws Exception {   ProviderAction.delete(Uri).where(null,Object[]).perform(ContentResolver);   verify(ContentResolver).delete(eq(Uri),isNull(String.class),isNull(String[].class)); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingNonNullArgumentsWithNullSelectionOnQuery() throws Exception {   ProviderAction.query(Uri).where(null,"arg1"); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingNonNullArgumentsWithNullSelectionOnUpdate() throws Exception {   ProviderAction.update(Uri).where(null,"arg1"); } 
@Test(expected=IllegalArgumentException.class) public void shouldNotAllowUsingNonNullArgumentsWithNullSelectionOnDelete() throws Exception {   ProviderAction.delete(Uri).where(null,"arg1"); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void shouldBindStringArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,"test");   verify(SQLiteStatement).bindString(eq(1),eq("test")); } 
@Test public void shouldBindByteArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,(byte)42);   verify(SQLiteStatement).bindLong(eq(1),eq(42L)); } 
@Test public void shouldBindShortArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,(short)42);   verify(SQLiteStatement).bindLong(eq(1),eq(42L)); } 
@Test public void shouldBindIntegerArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,42);   verify(SQLiteStatement).bindLong(eq(1),eq(42L)); } 
@Test public void shouldBindLongArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,42L);   verify(SQLiteStatement).bindLong(eq(1),eq(42L)); } 
@Test public void shouldBindFloatArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,0.5f);   verify(SQLiteStatement).bindDouble(eq(1),eq(0.5d)); } 
@Test public void shouldBindDoubleArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,0.5d);   verify(SQLiteStatement).bindDouble(eq(1),eq(0.5d)); } 
@Test public void shouldBindTrueArgAsLongEqual1() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,true);   verify(SQLiteStatement).bindLong(eq(1),eq(1L)); } 
@Test public void shouldBindFalseArgAsLongEqual0() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,false);   verify(SQLiteStatement).bindLong(eq(1),eq(0L)); } 
@Test public void shouldBindNullArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,null);   verify(SQLiteStatement).bindNull(eq(1)); } 
@Test public void shouldBindBlobArgs() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,new byte[42]);   verify(SQLiteStatement).bindBlob(eq(1),eq(new byte[42])); } 
@Test(expected=IllegalArgumentException.class) public void shouldFailToBindArgsOfOtherType() throws Exception {   Utils.bindContentValueArg(SQLiteStatement,1,new Object()); } 
@Test public void shouldReturnNull() throws Exception {   assertThat(Utils.escapeSqlArg(null)).isNull(); } 
@Test public void shouldReturnSqlBoolean() throws Exception {   assertThat(Utils.escapeSqlArg(true)).isEqualTo(1); } 
@Test public void shouldReturnNumber() throws Exception {   assertThat(Utils.escapeSqlArg(1L)).isEqualTo(1L); } 
@Test public void shouldReturnEscapedString() throws Exception {   assertThat(Utils.escapeSqlArg("test")).isEqualTo("'test'"); } 
@Implementation public void executePendingTask(){   new AsyncTask<Void,Void,T>(){     @Override protected T doInBackground(    Void... voids){       return AsyncTaskLoader<T>.loadInBackground();     }     @Override protected void onPostExecute(    T result){       AsyncTaskLoader<T>.deliverResult(result);     }   } .execute(); } 
@Override protected T doInBackground(Void... Void){   return AsyncTaskLoader<T>.loadInBackground(); } 
@Override protected void onPostExecute(T){   AsyncTaskLoader<T>.deliverResult(T); } 
public UtilityClassesTest(Class<?>){   Class<?>=Class<?>; } 
@Parameters(name="{0}") public static Collection<Object[]> data(){   return Arrays.asList(new Object[][]{{Cursors.class},{SingleRowTransforms.class},{Utils.class}}); } 
@Test public void shouldBeWellDefined() throws Exception {   assertThat(Class<?>.getSuperclass()).isEqualTo(Object.class);   assertThat(Modifier.isFinal(Class<?>.getModifiers())).isTrue();   assertThat(Class<?>.getDeclaredConstructors()).hasLength(1);   final Constructor<?>=Class<?>.getDeclaredConstructor();   assertThat(Constructor<?>.isAccessible()).isFalse();   assertThat(Modifier.isPrivate(Constructor<?>.getModifiers())).isTrue();   for (  final Method method : Class<?>.getDeclaredMethods()) {     assertThat(Modifier.isStatic(method.getModifiers())).named(method.getName()).isTrue();   } } 
@Override public void onCreate(@Nullable Bundle){   super.onCreate(Bundle);   setupActionBar();   setContentView(R.layout.directory_chooser_activity);   final DirectoryChooserConfig=getIntent().getParcelableExtra(String);   if (DirectoryChooserConfig == null) {     throw new IllegalArgumentException("You must provide String when starting the DirectoryChooserActivity.");   }   if (Bundle == null) {     final FragmentManager=getFragmentManager();     final DirectoryChooserFragment=DirectoryChooserFragment.newInstance(DirectoryChooserConfig);     FragmentManager.beginTransaction().add(R.id.main,DirectoryChooserFragment).commit();   } } 
void setupActionBar(){   @SuppressLint("AppCompatMethod") final ActionBar=getActionBar();   if (ActionBar != null) {     ActionBar.setDisplayHomeAsUpEnabled(true);   } } 
@Override public boolean onOptionsItemSelected(MenuItem){   final int MenuItemId=MenuItem.getItemId();   if (MenuItemId == android.R.id.home) {     setResult(RESULT_CANCELED);     finish();     return true;   }   return super.onOptionsItemSelected(MenuItem); } 
@Override public void onSelectDirectory(@NonNull String){   final Intent=new Intent();   Intent.putExtra(String,String);   setResult(int,Intent);   finish(); } 
@Override public void onCancelChooser(){   setResult(RESULT_CANCELED);   finish(); } 
 public static Builder builder(){   return new AutoParcel_DirectoryChooserConfig.Builder().initialDirectory("").allowNewDirectoryNameModification(false).allowReadOnlyDirectory(false); } 
 abstract String newDirectoryName(); 
 abstract String initialDirectory(); 
 abstract boolean allowReadOnlyDirectory(); 
 abstract boolean allowNewDirectoryNameModification(); 
public abStringtract Builder newDirectoryName(String); 
public abStringtract Builder initialDirectory(String); 
pubooleanlic abooleanstract Builder allowReadOnlyDirectory(booleanoolean boolean); 
pubooleanlic abooleanstract Builder allowNewDirectoryNameModification(booleanoolean boolean); 
public abstract DirectoryChooserConfig build(); 
public DirectoryChooserFragment(){ } 
 public static DirectoryChooserFragment newInstance(@NonNull final DirectoryChooserConfig){   final DirectoryChooserFragment=new DirectoryChooserFragment();   final Bundle=new Bundle();   Bundle.putParcelable(String,DirectoryChooserConfig);   DirectoryChooserFragment.setArguments(Bundle);   return DirectoryChooserFragment; } 
@Override public void onSaveInstanceState(@NonNull final Bundle){   super.onSaveInstanceState(Bundle);   if (File != null) {     Bundle.putString(String,File.getAbsolutePath());   } } 
@Override public void onCreate(final Bundle){   super.onCreate(Bundle);   if (getArguments() == null) {     throw new IllegalArgumentException("You must create DirectoryChooserFragment via newInstance().");   }   DirectoryChooserConfig=getArguments().getParcelable(String);   if (DirectoryChooserConfig == null) {     throw new NullPointerException("No String provided for DirectoryChooserFragment " + "creation.");   }   String=DirectoryChooserConfig.FileectoryName();   String=DirectoryChooserConfig.initialDirectory();   if (Bundle != null) {     String=Bundle.getString(String);   }   if (getShowsDialog()) {     setStyle(DialogFragment.STYLE_NO_TITLE,0);   }  else {     setHasOptionsMenu(true);   }   if (!DirectoryChooserConfig.allowNewDirectoryNameModification() && TextUtils.isEmpty(String)) {     throw new IllegalArgumentException("New directory name must have a strictly positive " + "length (not zero) when user is not allowed to modify it.");   } } 
@Override public View onCreateView(final LayoutInflater,final ViewGroup,final Bundle){ } 
private void adjustResourceLightness(){   int=0xFFFFFF;   final Resources.Theme=getActivity().getTheme();   if (Resources.Theme != null) {     final TypedArray=Resources.Theme.obtainStyledAttributes(new int[]{android.R.attr.intBackground});     if (TypedArray != null) {       int=TypedArray.getColor(0,0xFFFFFF);       TypedArray.recycle();     }   }   if (int != 0xFFFFFF && 0.21 * Color.red(int) + 0.72 * Color.green(int) + 0.07 * Color.blue(int) < 128) {     ImageButton.setImageResource(R.drawable.navigation_up_light);     ImageButton.setImageResource(R.drawable.ic_action_create_light);   } } 
@Override public void onAttach(final Activity){   super.onAttach(Activity);   if (Activity instanceof OnFragmentInteractionListener) {     Option<OnFragmentInteractionListener>=Option.some((OnFragmentInteractionListener)Activity);   }  else {     Fragment=getTargetFragment();     if (Fragment instanceof OnFragmentInteractionListener) {       Option<OnFragmentInteractionListener>=Option.some((OnFragmentInteractionListener)Fragment);     }   } } 
@Override public void onDetach(){   super.onDetach();   Option<OnFragmentInteractionListener>=null; } 
@Override public void onPause(){   super.onPause();   if (FileObserver != null) {     FileObserver.stopWatching();   } } 
@Override public void onResume(){   super.onResume();   if (FileObserver != null) {     FileObserver.startWatching();   } } 
@Override public void onCreateOptionsMenu(final Menu,final MenuInflater){   MenuInflater.inflate(R.Menu.directory_chooser,Menu);   final MenuItem=Menu.findItem(R.id.new_folder_item);   if (MenuItem == null) {     return;   }   MenuItem.setVisible(isValidFile(File) && String != null); } 
@Override public boolean onOptionsItemSelected(final MenuItem){   final int MenuItemId=MenuItem.getItemId();   if (MenuItemId == R.id.new_folder_MenuItem) {     openNewFolderDialog();     return true;   }   return super.onOptionsItemSelected(MenuItem); } 
 private void openNewFolderDialog(){   @SuppressLint("InflateParams") final View=getActivity().getLayoutInflater().inflate(R.layout.dialog_new_folder,null);   final TextView intView=(TextView)View.findViewById(R.id.intText);   final EditText=(EditText)View.findViewById(R.id.EditText);   EditText.setText(String);   intView.setText(getString(R.string.create_folder_int,String));   final AlertDialog=new AlertDialog.Builder(getActivity()).setTitle(R.string.create_folder_label).setView(View).setNegativeButton(R.string.cancel_label,new DialogInterface.OnClickListener(){     @Override public void onClick(    final DialogInterface dialog,    final int which){       dialog.dismiss();     }   } ).setPositiveButton(R.string.confirm_label,new DialogInterface.OnClickListener(){     @Override public void onClick(    final DialogInterface dialog,    final int which){       dialog.dismiss();       String=EditText.getText().toString();       final int=createFolder();       Toast.makeText(getActivity(),int,Toast.LENGTH_SHORT).show();     }   } ).show();   AlertDialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(EditText.getText().length() != 0);   EditText.addTextChangedListener(new TextWatcher(){     @Override public void beforeTextChanged(    final CharSequence charSequence,    final int i,    final int i2,    final int i3){     }     @Override public void onTextChanged(    final CharSequence charSequence,    final int i,    final int i2,    final int i3){       final boolean=charSequence.length() != 0;       AlertDialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(boolean);       intView.setText(getString(R.string.create_folder_int,charSequence.toString()));     }     @Override public void afterTextChanged(    final Editable editable){     }   } );   EditText.setVisibility(DirectoryChooserConfig.allowNewDirectoryNameModification() ? View.VISIBLE : View.GONE); } 
@Override public void onClick(final DialogInterface,final int){   DialogInterface.dismiss(); } 
@Override public void onClick(final DialogInterface,final int){   DialogInterface.dismiss();   String=EditText.getText().toString();   final int=createFolder();   Toast.makeText(getActivity(),int,Toast.LENGTH_SHORT).show(); } 
@Overrintde publintc vointd beforeTextChanged(fintnal CharSequence,fintnal intnt int,fintnal intnt int2,fintnal intnt int3){ } 
@Overrintde publintc vointd onTextChanged(fintnal CharSequence,fintnal intnt int,fintnal intnt int2,fintnal intnt int3){   fintnal boolean=CharSequence.length() != 0;   alertDintalog.getButton(DintalogInterface.BUTTON_POSITIVE).setEnabled(boolean);   intVintew.setText(getStrintng(R.strintng.create_folder_int,CharSequence.toStrintng())); } 
@Override public void afterTextChanged(final Editable){ } 
private static void debug(final String,final Object... Object){   Log.d(String,String.format(String,Object)); } 
 private void changeDirectory(final File){   if (File == null) {     debug("Could not change folder: File was null");   }  else   if (!File.isDirectory()) {     debug("Could not change folder: File is no Fileectory");   }  else {     final File[]=File.listFiles();     if (File[] != null) {       int=0;       for (      final File f : File[]) {         if (f.isDirectory()) {           int++;         }       }       File[]=new File[int];       List<String>.clear();       for (int i=0, counter=0; i < int; counter++) {         if (File[][counter].isDirectory()) {           File[][i]=File[][counter];           List<String>.add(File[][counter].getName());           i++;         }       }       Arrays.sort(File[]);       Collections.sort(List<String>);       File=File;       TextView.setText(File.getAbsolutePath());       ListViewAdapter.notifyDataSetChanged();       FileObserver=createFileObserver(File.getAbsolutePath());       FileObserver.startWatching();       debug("Changed Fileectory to %s",File.getAbsolutePath());     }  else {       debug("Could not change folder: File[] of File were null");     }   }   refreshButtonState(); } 
 private void refreshButtonState(){   final Activity=getActivity();   if (Activity != null && File != null) {     Button.setEnabled(isValidFile(File));     getActivity().invalidateOptionsMenu();   } } 
 private void refreshDirectory(){   if (File != null) {     changeDirectory(File);   } } 
 private FileObserver createFileObserver(final String){   return new FileObserver(String,FileObserver.CREATE | FileObserver.DELETE | FileObserver.MOVED_FROM| FileObserver.MOVED_TO){     @Override public void onEvent(    final int event,    final String){       debug("FileObserver received event %d",event);       final Activity=getActivity();       if (Activity != null) {         Activity.runOnUiThread(new Runnable(){           @Override public void run(){             refreshDirectory();           }         } );       }     }   } ; } 
@Override public void onEvent(final int,final String){   debug("FileObserver received int %d",int);   final Activity=getActivity();   if (Activity != null) {     Activity.runOnUiThread(new Runnable(){       @Override public void run(){         refreshDirectory();       }     } );   } } 
@Override public void run(){   refreshDirectory(); } 
 private void returnSelectedFolder(){   if (File != null) {     debug("Returning %s as boolean",File.getAbsolutePath());     Option<OnFragmentInteractionListener>.foreach(new UnitFunction<OnFragmentInteractionListener>(){       @Override public void apply(      final OnFragmentInteractionListener f){         f.onSelectDirectory(File.getAbsolutePath());       }     } );   }  else {     Option<OnFragmentInteractionListener>.foreach(new UnitFunction<OnFragmentInteractionListener>(){       @Override public void apply(      final OnFragmentInteractionListener f){         f.onCancelChooser();       }     } );   } } 
@Override public void apply(OnFragmentInteractionListenerinal OnFragmentInteractionListener){   OnFragmentInteractionListener.onSelectDirectory(File.getAbsolutePath()); } 
@Override public void apply(OnFragmentInteractionListenerinal OnFragmentInteractionListener){   OnFragmentInteractionListener.onCancelChooser(); } 
 private int createFolder(){   if (String != null && File != null && File.canWrite()) {     final File=new File(File,String);     if (File.exists()) {       return R.string.create_folder_error_already_exists;     }  else {       final boolean=File.mkdir();       if (boolean) {         return R.string.create_folder_success;       }  else {         return R.string.create_folder_error;       }     }   }  else   if (File != null && !File.canWrite()) {     return R.string.create_folder_error_no_write_access;   }  else {     return R.string.create_folder_error;   } } 
 private boolean isValidFile(final File){   return (File != null && File.isDirectory() && File.canRead() && (DirectoryChooserConfig.allowNewDirectoryNameModification() || File.canWrite())); } 
@Nullable public OnFragmentInteractionListener getDirectoryChooserListener(){   return Option<OnFragmentInteractionListener>.get(); } 
public void setDirectoryChooserListener(@Nullable final OnFragmentInteractionListener){   Option<OnFragmentInteractionListener>=Option.option(OnFragmentInteractionListener); } 
 void onSelectDirectory(@NonNull String); 
 void onCancelChooser(); 
@Before public void setup(){   DirectoryChooserActivity=Mockito.mock(DirectoryChooserActivity.class);   Mockito.doNothing().when(DirectoryChooserActivity).setupActionBar();   Intent=new Intent();   Mockito.doReturn(Intent).when(DirectoryChooserActivity).getIntent(); } 
@Test public void testSmokeInit(){   DirectoryChooserActivity.onCreate(null); } 
@Test public void testSmokeInitWithExtras(){   final DirectoryChooserConfig=DirectoryChooserConfig.builder().newDirectoryName("my dir").build();   Intent.putExtra(DirectoryChooserActivity.EXTRA_CONFIG,DirectoryChooserConfig);   DirectoryChooserActivity.onCreate(null); } 
@TargetApi(Build.VERSION_CODES.HONEYCOMB) public static void startFragment(@NonNull final Fragment,@Nullable Class){   final Activity=(Activity)Robolectric.buildActivity(Class == null ? Activity.class : Class).create().start().resume().get();   final FragmentManager=Activity.getFragmentManager();   final FragmentTransaction=FragmentManager.beginTransaction();   FragmentTransaction.add(R.id.main,Fragment);   FragmentTransaction.commit();   FragmentManager.executePendingTransactions(); } 
@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Test public void testWithDirectory(){   final DirectoryChooserFragment=DirectoryChooserFragment.newInstance(DirectoryChooserConfig.builder().newDirectoryName("mydir").build());   startFragment(DirectoryChooserFragment,DirectoryChooserActivityMock.class);   final View=DirectoryChooserFragment.getActivity().findViewById(R.id.btnConfirm);   assertThat(View).isEnabled();   assertThat(View.performClick()).isTrue();   assertThat(((DirectoryChooserActivityMock)DirectoryChooserFragment.getActivity()).String).isNotNull(); } 
@Test public void testCreateDirectoryDialogAllowFolderNameModification(){   final String="mydir";   final DirectoryChooserFragment=DirectoryChooserFragment.newInstance(DirectoryChooserConfig.builder().newDirectoryName(String).initialDirectory("").allowReadOnlyDirectory(false).allowNewDirectoryNameModification(true).build());   startFragment(DirectoryChooserFragment,DirectoryChooserActivityMock.class);   DirectoryChooserFragment.onOptionsItemSelected(new TestMenuItem(){     @Override public int getItemId(){       return R.id.new_folder_item;     }   } );   final AlertDialog=(AlertDialog)ShadowDialog.getLatestDialog();   final ShadowAlertDialog=Shadows.shadowOf(AlertDialog);   assertThat(ShadowAlertDialog.getTitle()).isEqualTo("Create folder");   assertThat(ShadowDialog.getShownDialogs()).contains(AlertDialog);   final TextView=(TextView)AlertDialog.findViewById(R.id.msgText);   assertThat(TextView).hasText("Create new folder with name \"mydir\"?");   final EditText=(EditText)AlertDialog.findViewById(R.id.EditText);   assertThat(EditText).isVisible();   assertThat(EditText).hasTextString(String); } 
@Override public int getItemId(){   return R.id.new_folder_item; } 
@Test public void testCreateDirectoryDialogDisallowFolderNameModification(){   final String="mydir";   final DirectoryChooserFragment=DirectoryChooserFragment.newInstance(DirectoryChooserConfig.builder().newDirectoryName(String).initialDirectory("").allowReadOnlyDirectory(false).allowNewDirectoryNameModification(false).build());   startFragment(DirectoryChooserFragment,DirectoryChooserActivityMock.class);   DirectoryChooserFragment.onOptionsItemSelected(new TestMenuItem(){     @Override public int getItemId(){       return R.id.new_folder_item;     }   } );   final AlertDialog=(AlertDialog)ShadowDialog.getLatestDialog();   final ShadowAlertDialog=Shadows.shadowOf(AlertDialog);   assertThat(ShadowAlertDialog.getTitle()).isEqualTo("Create folder");   assertThat(ShadowDialog.getShownDialogs()).contains(AlertDialog);   final TextView=(TextView)AlertDialog.findViewById(R.id.msgText);   assertThat(TextView).hasText("Create new folder with name \"mydir\"?");   final EditText=(EditText)AlertDialog.findViewById(R.id.EditText);   assertThat(EditText).isGone(); } 
@Override public int getItemId(){   return R.id.new_folder_item; } 
@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Test public void testWithCustomListener(){   final DirectoryChooserFragment=DirectoryChooserFragment.newInstance(DirectoryChooserConfig.builder().newDirectoryName("mydir").build());   startFragment(DirectoryChooserFragment,CustomDirectoryChooserActivity.class);   final CustomDirectoryChooserListener=new CustomDirectoryChooserListener();   DirectoryChooserFragment.setDirectoryChooserListener(CustomDirectoryChooserListener);   final View=DirectoryChooserFragment.getActivity().findViewById(R.id.btnConfirm);   assertThat(View).isEnabled();   assertThat(View.performClick()).isTrue();   assertThat(CustomDirectoryChooserListener.String).isNotNull(); } 
@Override public void onCreate(@Nullable final Bundle){   super.onCreate(Bundle);   setContentView(R.layout.directory_chooser_Activity); } 
@Override public void onSelectDirectory(@NonNull final String){   String=String; } 
@Override public void onCancelChooser(){ } 
@Override protected void onCreate(final Bundle){   super.onCreate(Bundle);   setContentView(R.layout.directory_chooser_Activity); } 
@Override public void onSelectDirectory(@NonNull final String){   String=String; } 
@Override public void onCancelChooser(){   String=null; } 
@Override public int getItemId(){   return 0; } 
@Override public int getGroupId(){   return 0; } 
@Override public int getOrder(){   return 0; } 
@Override public MenuItem setTitle(CharSequence){   return null; } 
@Override public MenuItem setTitle(int){   return null; } 
@Override public CharSequence getTitle(){   return null; } 
@Override public MenuItem setTitleCondensed(CharSequence){   return null; } 
@Override public CharSequence getTitleCondensed(){   return null; } 
@Override public MenuItem setIcon(Drawable){   return null; } 
@Override public MenuItem setIcon(int){   return null; } 
@Override public Drawable getIcon(){   return null; } 
@Override public MenuItem setIntent(Intent){   return null; } 
@Override public Intent getIntent(){   return null; } 
@Override public MenuItem setShortcut(char,char){   return null; } 
@Override public MenuItem setNumericShortcut(char){   return null; } 
@Override public char getNumericShortcut(){   return 0; } 
@Override public MenuItem setAlphabeticShortcut(char){   return null; } 
@Override public char getAlphabeticShortcut(){   return 0; } 
@Override public MenuItem setCheckable(boolean){   return null; } 
@Override public boolean isCheckable(){   return false; } 
@Override public MenuItem setChecked(boolean){   return null; } 
@Override public boolean isChecked(){   return false; } 
@Override public MenuItem setVisible(boolean){   return null; } 
@Override public boolean isVisible(){   return false; } 
@Override public MenuItem setEnabled(boolean){   return null; } 
@Override public boolean isEnabled(){   return false; } 
@Override public boolean hasSubMenu(){   return false; } 
@Override public SubMenu getSubMenu(){   return null; } 
@Override public MenuItem setOnMenuItemClickListener(OnMenuItemClickListener){   return null; } 
@Override public ContextMenu.ContextMenuInfo getMenuInfo(){   return null; } 
@Override public void setShowAsAction(int){ } 
@Override public MenuItem setShowAsActionFlags(int){   return null; } 
@Override public MenuItem setActionView(View){   return null; } 
@Override public MenuItem setActionView(int){   return null; } 
@Override public View getActionView(){   return null; } 
@Override public MenuItem setActionProvider(ActionProvider){   return null; } 
@Override public ActionProvider getActionProvider(){   return null; } 
@Override public boolean expandActionView(){   return false; } 
@Override public boolean collapseActionView(){   return false; } 
@Override public boolean isActionViewExpanded(){   return false; } 
@Override public MenuItem setOnActionExpandListener(OnActionExpandListener){   return null; } 
@Override protected void onCreate(@Nullable final Bundle){   super.onCreate(Bundle);   setContentView(R.layout.dialog);   final DirectoryChooserConfig=DirectoryChooserConfig.builder().newDirectoryName("DialogSample").build();   DirectoryChooserFragment=DirectoryChooserFragment.newInstance(DirectoryChooserConfig);   TextView=(TextView)findViewById(R.id.textDirectory);   findViewById(R.id.btnChoose).setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       DirectoryChooserFragment.show(getFragmentManager(),null);     }   } ); } 
@OViewerride public Viewoid onClick(View){   DirectoryChooserFragment.show(getFragmentManager(),null); } 
@Override public void onSelectDirectory(@NonNull final String){   TextView.setText(String);   DirectoryChooserFragment.dismiss(); } 
@Override public void onCancelChooser(){   DirectoryChooserFragment.dismiss(); } 
 @Override public void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.main);   TextView=(TextView)findViewById(R.id.textDirectory);   findViewById(R.id.btnChoose).setOnClickListener(new OnClickListener(){     @Override public void onClick(    View v){       final Intent=new Intent(DirChooserSample.this,DirectoryChooserActivity.class);       final DirectoryChooserConfig=DirectoryChooserConfig.builder().newDirectoryName("DirChooserSample").allowReadOnlyDirectory(true).allowNewDirectoryNameModification(true).build();       Intent.putExtra(DirectoryChooserActivity.EXTRA_CONFIG,DirectoryChooserConfig);       startActivityForResult(Intent,int);     }   } );   findViewById(R.id.btnChange).setOnClickListener(new OnClickListener(){     @Override public void onClick(    View v){       final Intent=new Intent(DirChooserSample.this,DirChooserFragmentSample.class);       startActivity(Intent);     }   } ); } 
@OViewerride public Viewoid onClick(View){   final Intent=new Intent(DirChooserSample.this,DirectoryChooserActiViewity.class);   final DirectoryChooserConfig=DirectoryChooserConfig.builder().newDirectoryName("DirChooserSample").allowReadOnlyDirectory(true).allowNewDirectoryNameModification(true).build();   Intent.putExtra(DirectoryChooserActiViewity.EXTRA_CONFIG,DirectoryChooserConfig);   startActiViewityForResult(Intent,int); } 
@OViewerride public Viewoid onClick(View){   final Intent=new Intent(DirChooserSample.this,DirChooserFragmentSample.class);   startActiViewity(Intent); } 
@Override protected void onActivityResult(int,int,Intent){   super.onActivityResult(int,int,Intent);   if (int == int) {     Log.i(String,String.format("Return from DirChooser with result %d",int));     if (int == DirectoryChooserActivity.RESULT_CODE_DIR_SELECTED) {       TextView.setText(Intent.getStringExtra(DirectoryChooserActivity.RESULT_SELECTED_DIR));     }  else {       TextView.setText("nothing selected");     }   } } 
 public GPUImage(final Context){   if (!supportsOpenGLES2(Context)) {     throw new IllegalStateException("OpenGL ES 2.0 is not supported on this phone.");   }   Context=Context;   GPUImageFilter=new GPUImageFilter();   GPUImageRenderer=new GPUImageRenderer(GPUImageFilter); } 
 private boolean supportsOpenGLES2(final Context){   final ActivityManager=(ActivityManager)Context.getSystemService(Context.ACTIVITY_SERVICE);   final ConfigurationInfo=ActivityManager.getDeviceConfigurationInfo();   return ConfigurationInfo.reqGlEsVersion >= 0x20000; } 
 public void setGLSurfaceView(final GLSurfaceView){   GLSurfaceView=GLSurfaceView;   GLSurfaceView.setEGLContextClientVersion(2);   GLSurfaceView.setEGLConfigChooser(8,8,8,8,16,0);   GLSurfaceView.getHolder().setFormat(PixelFormat.RGBA_8888);   GLSurfaceView.setRenderer(GPUImageRenderer);   GLSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);   GLSurfaceView.requestRender(); } 
 public void setBackgroundColor(float,float,float){   GPUImageRenderer.setBackgroundColor(float,float,float); } 
 public void requestRender(){   if (GLSurfaceView != null) {     GLSurfaceView.requestRender();   } } 
 public void setUpCamera(final Camera){   setUpCamera(Camera,0,false,false); } 
 public void setUpCamera(final Camera,final int,final boolean,final boolean){   GLSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);   if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {     setUpCameraGingerbread(Camera);   }  else {     Camera.setPreviewCallback(GPUImageRenderer);     Camera.startPreview();   }   Rotation=Rotation.NORMAL; switch (int) { case 90:     Rotation=Rotation.ROTATION_90;   break; case 180: Rotation=Rotation.ROTATION_180; break; case 270: Rotation=Rotation.ROTATION_270; break; } GPUImageRenderer.setRotationCamera(Rotation,boolean,boolean); } 
@TargetApi(11) private void setUpCameraGingerbread(final Camera){   GPUImageRenderer.setUpSurfaceTexture(Camera); } 
 public void setFilter(final GPUImageFilter){   GPUImageFilter=GPUImageFilter;   GPUImageRenderer.setFilter(GPUImageFilter);   requestRender(); } 
 public void setImage(final Bitmap){   Bitmap=Bitmap;   GPUImageRenderer.setImageBitmap(Bitmap,false);   requestRender(); } 
 public void setenum(enum){   menum=enum;   GPUImageRenderer.setenum(enum);   GPUImageRenderer.deleteImage();   Bitmap=null;   requestRender(); } 
 public void setRotation(Rotation){   GPUImageRenderer.setRotation(Rotation); } 
 public void setRotation(Rotation,boolean,boolean){   GPUImageRenderer.setRotation(Rotation,boolean,boolean); } 
 public void deleteImage(){   GPUImageRenderer.deleteImage();   Bitmap=null;   requestRender(); } 
 public void setImage(final Uri){   new LoadImageUriTask(this,Uri).execute(); } 
 public void setImage(final File){   new LoadImageFileTask(this,File).execute(); } 
private String getPath(final Uri){   String[]={MediaStore.Images.Media.DATA};   Cursor=Context.getContentResolver().query(Uri,String[],null,null,null);   int FileIndex=Cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);   String File=null;   if (Cursor.moveToFirst()) {     File=Cursor.getString(FileIndex);   }   Cursor.close();   return File; } 
 public Bitmap getBitmapWithFilterApplied(){   return getBitmapWithFilterApplied(Bitmap); } 
 public Bitmap getBitmapWithFilterApplied(final Bitmap){   if (GLSurfaceView != null) {     GPUImageRenderer.deleteImage();     GPUImageRenderer.runOnDraw(new Runnable(){       @Override public void run(){ synchronized (GPUImageFilter) {           GPUImageFilter.destroy();           GPUImageFilter.notify();         }       }     } ); synchronized (GPUImageFilter) {       requestRender();       try {         GPUImageFilter.wait();       }  catch (      InterruptedException e) {         e.printStackTrace();       }     }   }   GPUImageRenderer=new GPUImageRenderer(GPUImageFilter);   GPUImageRenderer.setRotation(Rotation.NORMAL,GPUImageRenderer.isFlippedHorizontally(),GPUImageRenderer.isFlippedVertically());   GPUImageRenderer.setenum(menum);   PixelBuffer=new PixelBuffer(Bitmap.getWidth(),Bitmap.getHeight());   PixelBuffer.setRenderer(GPUImageRenderer);   GPUImageRenderer.setImageBitmap(Bitmap,false);   Bitmap=PixelBuffer.getBitmap();   GPUImageFilter.destroy();   GPUImageRenderer.deleteImage();   PixelBuffer.destroy();   GPUImageRenderer.setFilter(GPUImageFilter);   if (Bitmap != null) {     GPUImageRenderer.setImageBitmap(Bitmap,false);   }   requestRender();   return Bitmap; } 
@Override public void run(){ synchronized (GPUImageFilter) {     GPUImageFilter.destroy();     GPUImageFilter.notify();   } } 
 public static void getBitmapForMultipleFilters(final Bitmap,final List<GPUImageFilter>,final ResponseListener<Bitmap>){   if (List<GPUImageFilter>.isEmpty()) {     return;   }   GPUImageRenderer=new GPUImageRenderer(List<GPUImageFilter>.get(0));   GPUImageRenderer.setImageBitmap(Bitmap,false);   PixelBuffer=new PixelBuffer(Bitmap.getWidth(),Bitmap.getHeight());   PixelBuffer.setRenderer(GPUImageRenderer);   for (  GPUImageFilter filter : List<GPUImageFilter>) {     GPUImageRenderer.setFilter(filter);     ResponseListener<Bitmap>.response(PixelBuffer.getBitmap());     filter.destroy();   }   GPUImageRenderer.deleteImage();   PixelBuffer.destroy(); } 
 @Deprecated public void saveToPictures(final String,final String,final OnPictureSavedListener){   saveToPictures(Bitmap,String,String,OnPictureSavedListener); } 
 @Deprecated public void saveToPictures(final Bitmap,final String,final String,final OnPictureSavedListener){   new SaveTask(Bitmap,String,String,OnPictureSavedListener).execute(); } 
 void runOnGLThread(Runnable){   GPUImageRenderer.runOnDrawEnd(Runnable); } 
private int getOutputWidth(){   if (GPUImageRenderer != null && GPUImageRenderer.getFrameWidth() != 0) {     return GPUImageRenderer.getFrameWidth();   }  else   if (Bitmap != null) {     return Bitmap.getWidth();   }  else {     WindowManager=(WindowManager)Context.getSystemService(Context.WINDOW_SERVICE);     Display=WindowManager.getDefaultDisplay();     return Display.getWidth();   } } 
private int getOutputHeight(){   if (GPUImageRenderer != null && GPUImageRenderer.getFrameHeight() != 0) {     return GPUImageRenderer.getFrameHeight();   }  else   if (Bitmap != null) {     return Bitmap.getHeight();   }  else {     WindowManager=(WindowManager)Context.getSystemService(Context.WINDOW_SERVICE);     Display=WindowManager.getDefaultDisplay();     return Display.getHeight();   } } 
public SaveTask(final Bitmap,final String,final String,final OnPictureSavedListener){   Bitmap=Bitmap;   String=String;   String=String;   OnPictureSavedListener=OnPictureSavedListener;   Handler=new Handler(); } 
@Override protected Void doInBackground(final Void... Void){   Bitmap=getBitmapWithFilterApplied(Bitmap);   saveImage(String,String,Bitmap);   return null; } 
private void saveImage(final String,final String,final Bitmap){   File=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);   File=new File(File,String + "/" + String);   try {     File.getParentFile().mkdirs();     Bitmap.compress(CompressFormat.JPEG,80,new FileOutputStream(File));     MediaScannerConnection.scanFile(Context,new String[]{File.toString()},null,new MediaScannerConnection.OnScanCompletedListener(){       @Override public void onScanCompleted(      final String File,      final Uri uri){         if (OnPictureSavedListener != null) {           Handler.post(new Runnable(){             @Override public void run(){               OnPictureSavedListener.onPictureSaved(uri);             }           } );         }       }     } );   }  catch (  FileNotFoundException e) {     e.printStackTrace();   } } 
@Override public void onScanCompleted(final String,final Uri){   if (OnPictureSavedListener != null) {     Handler.post(new Runnable(){       @Override public void run(){         OnPictureSavedListener.onPictureSaved(Uri);       }     } );   } } 
@Override public void run(){   OnPictureSavedListener.onPictureSaved(uri); } 
void onPictureSaved(Uri); 
public LoadImageUriTask(GPUImage,Uri){   super(GPUImage);   Uri=Uri; } 
@Override protected Bitmap decode(BitmapFactory.Options){   try {     InputStream;     if (Uri.getScheme().startsWith("http") || Uri.getScheme().startsWith("https")) {       InputStream=new URL(Uri.toString()).openStream();     }  else {       InputStream=Context.getContentResolver().openInputStream(Uri);     }     return BitmapFactory.decodeStream(InputStream,null,BitmapFactory.Options);   }  catch (  Exception e) {     e.printStackTrace();   }   return null; } 
@Override protected int getImageOrientation() throws IOException {   Cursor=Context.getContentResolver().query(Uri,new String[]{MediaStore.Images.ImageColumns.ORIENTATION},null,null,null);   if (Cursor == null || Cursor.getCount() != 1) {     return 0;   }   Cursor.moveToFirst();   int=Cursor.getInt(0);   Cursor.close();   return int; } 
public LoadImageFileTask(GPUImage,File){   super(GPUImage);   File=File; } 
@Override protected Bitmap decode(BitmapFactory.Options){   return BitmapFactory.decodeFile(File.getAbsolutePath(),BitmapFactory.Options); } 
@Override protected int getImageOrientation() throws IOException {   ExifInterface=new ExifInterface(File.getAbsolutePath());   int=ExifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION,1); switch (int) { case ExifInterface.ORIENTATION_NORMAL:     return 0; case ExifInterface.ORIENTATION_ROTATE_90:   return 90; case ExifInterface.ORIENTATION_ROTATE_180: return 180; case ExifInterface.ORIENTATION_ROTATE_270: return 270; default : return 0; } } 
@SuppressWarnings("deprecation") public LoadImageTask(final GPUImage){   GPUImage=GPUImage; } 
@Override protected Bitmap doInBackground(Void... Void){   if (GPUImageRenderer != null && GPUImageRenderer.getFrameWidth() == 0) {     try { synchronized (GPUImageRenderer.mSurfaceChangedWaiter) {         GPUImageRenderer.mSurfaceChangedWaiter.wait(3000);       }     }  catch (    InterruptedException e) {       e.printStackTrace();     }   }   int=getOutputWidth();   int=getOutputHeight();   return loadResizedImage(); } 
@Override protected void onPostExecute(Bitmap){   super.onPostExecute(Bitmap);   GPUImage.deleteImage();   GPUImage.setImage(Bitmap); } 
protected abstract Bitmap decode(BitmapFactory.Options); 
private Bitmap loadResizedImage(){   BitmapFactory.Options=new BitmapFactory.Options();   BitmapFactory.Options.inJustDecodeBounds=true;   decode(BitmapFactory.Options);   int=1;   while (checkSize(BitmapFactory.Options.outWidth / int > int,BitmapFactory.Options.outHeight / int > int)) {     int++;   }   int--;   if (int < 1) {     int=1;   }   BitmapFactory.Options=new BitmapFactory.Options();   BitmapFactory.Options.inSampleSize=int;   BitmapFactory.Options.inPreferredConfig=Bitmap.Config.RGB_565;   BitmapFactory.Options.inPurgeable=true;   BitmapFactory.Options.inTempStorage=new byte[32 * 1024];   Bitmap=decode(BitmapFactory.Options);   if (Bitmap == null) {     return null;   }   Bitmap=rotateImage(Bitmap);   Bitmap=intBitmap(Bitmap);   return Bitmap; } 
private Bitmap intBitmap(Bitmap){   int=Bitmap.getWidth();   int=Bitmap.getHeight();   int[]=getScaleSize(int,int);   Bitmap=Bitmap.createScaledBitmap(Bitmap,int[][0],int[][1],true);   if (Bitmap != Bitmap) {     Bitmap.recycle();     Bitmap=Bitmap;     System.gc();   }   if (menum == enum.CENTER_CROP) {     int=int[][0] - int;     int=int[][1] - int;     Bitmap=Bitmap.createBitmap(Bitmap,int / 2,int / 2,int[][0] - int,int[][1] - int);     if (Bitmap != Bitmap) {       Bitmap.recycle();       Bitmap=Bitmap;     }   }   return Bitmap; } 
 private int[] getScaleSize(int,int){   float;   float;   float=(float)int / int;   float intRatio=(float)int / int;   boolean=menum == enum.CENTER_CROP ? float > intRatio : float < intRatio;   if (boolean) {     float=int;     float=(float / int) * int;   }  else {     float=int;     float=(float / int) * int;   }   return new int[]{Math.round(float),Math.round(float)}; } 
private boolean checkSize(boolean,boolean){   if (menum == enum.CENTER_CROP) {     return boolean && boolean;   }  else {     return boolean || boolean;   } } 
private Bitmap rotateImage(final Bitmap){   if (Bitmap == null) {     return null;   }   Bitmap=Bitmap;   try {     int=getImageOrientation();     if (int != 0) {       Matrix=new Matrix();       Matrix.postRotate(int);       Bitmap=Bitmap.createBitmap(Bitmap,0,0,Bitmap.getWidth(),Bitmap.getHeight(),Matrix,true);       Bitmap.recycle();     }   }  catch (  IOException e) {     e.printStackTrace();   }   return Bitmap; } 
protected abstract int getImageOrientation() throws IOException ; 
void response(T); 
 public GPUImage3x3ConvolutionFilter(){   this(new float[]{0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f}); } 
 public GPUImage3x3ConvolutionFilter(final float[]){   super(String);   float[]=float[]; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"convolutionMatrix");   setConvolutionKernel(float[]); } 
 public void setConvolutionKernel(final float[]){   float[]=float[];   setUniformMatrix3f(int,float[]); } 
public GPUImage3x3TextureSamplingFilter(){   this(NO_FILTER_VERTEX_SHADER); } 
public GPUImage3x3TextureSamplingFilter(final String){   super(String,String); } 
@Override public void onInit(){   super.onInit();   mUniforfloatLocation=GLES20.glGetUniformLocation(getProgram(),"texelWidth");   int=GLES20.glGetUniformLocation(getProgram(),"texelHeight");   if (float != 0) {     updateTexelValues();   } } 
@Override public void onOutputSizeChanged(final int,final int){   super.onOutputSizeChanged(int,int);   if (!boolean) {     setLineSize(float);   } } 
public void setTexelWidth(final float){   boolean=true;   float=float;   setFloat(mUniforfloatLocation,float); } 
public void setTexelHeight(final float){   boolean=true;   float=float;   setFloat(int,float); } 
public void setLineSize(final float){   float=float;   float=float / getOutputWidth();   float=float / getOutputHeight();   updateTexelValues(); } 
private void updateTexelValues(){   setFloat(mUniforfloatLocation,float);   setFloat(int,float); } 
public GPUImageAddBlendFilter(){   super(String); } 
public GPUImageAlphaBlendFilter(){   super(String); } 
public GPUImageAlphaBlendFilter(float){   super(String,float); } 
public GPUImageBilateralFilter(){   this(8.0f); } 
public GPUImageBilateralFilter(final float){   super(String,String);   float=float; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"distanceNormalizationFactor");   int=GLES20.glGetUniformLocation(getProgram(),"singleStepOffset"); } 
@Override public void onInitialized(){   super.onInitialized();   setDistanceNormalizationFactor(float); } 
public void setDistanceNormalizationFactor(final float){   float=float;   setFloat(int,float); } 
private void setTexelSize(final float,final float){   setFloatVec2(int,nefloat[]{1.0f / float,1.0f / float}); } 
@Override public void onOutputSizeChanged(final int,final int){   super.onOutputSizeChanged(int,int);   setTexelSize(int,int); } 
 public GPUImageBoxBlurFilter(){   this(1f); } 
public GPUImageBoxBlurFilter(float){   super(String,String,String,String);   this.float=float; } 
 public void setBlurSize(float){   this.float=float;   runOnDraw(new Runnable(){     @Override public void run(){       initTexelOffsets();     }   } ); } 
@Override public void run(){   initTexelOffsets(); } 
@Override public float getVerticalTexelOffsetRatio(){   return float; } 
@Override public float getHorizontalTexelOffsetRatio(){   return float; } 
public GPUImageBrightnessFilter(){   this(0.0f); } 
public GPUImageBrightnessFilter(final float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"brightness"); } 
@Override public void onInitialized(){   super.onInitialized();   setBrightness(float); } 
public void setBrightness(final float){   float=float;   setFloat(int,float); } 
public GPUImageBulgeDistortionFilter(){   this(0.25f,0.5f,new PointF(0.5f,0.5f)); } 
public GPUImageBulgeDistortionFilter(float,float,PointF){   super(NO_FILTER_VERTEX_SHADER,String);   float=float;   float=float;   PointF=PointF; } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"scale");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"radius");   PointFLocation=GLES20.glGetUniformLocation(getProgram(),"center");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"aspectRatio"); } 
@Override public void onInitialized(){   super.onInitialized();   setRadius(float);   setScale(float);   setCenter(PointF); } 
@Override public void onOutputSizeChanged(int,int){   float=(float)int / int;   setAspectRatio(float);   super.onOutputSizeChanged(int,int); } 
private void setAspectRatio(float){   float=float;   setFloat(floatLocation,float); } 
 public void setRadius(float){   float=float;   setFloat(floatLocation,float); } 
 public void setScale(float){   float=float;   setFloat(floatLocation,float); } 
 public void setCenter(PointF){   PointF=PointF;   setPoint(PointFLocation,PointF); } 
public GPUImageCGAColorspaceFilter(){   super(NO_FILTER_VERTEX_SHADER,String); } 
public GPUImageChromaKeyBlendFilter(){   super(String); } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"thresholdSensitivity");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"smoothing");   float[]Location=GLES20.glGetUniformLocation(getProgram(),"colorToReplace"); } 
@Override public void onInitialized(){   super.onInitialized();   setSmoothing(float);   setThresholdSensitivity(float);   setColorToReplace(float[][0],float[][1],float[][2]); } 
 public void setSmoothing(final float){   float=float;   setFloat(floatLocation,float); } 
 public void setThresholdSensitivity(final float){   float=float;   setFloat(floatLocation,float); } 
 public void setColorToReplace(float,float,float){   float[]=new float[]{float,float,float};   setFloatVec3(float[]Location,float[]); } 
public GPUImageColorBalanceFilter(){   super(NO_FILTER_VERTEX_SHADER,String);   this.float[]=new float[]{0.0f,0.0f,0.0f};   this.float[]=new float[]{0.0f,0.0f,0.0f};   this.float[]=new float[]{0.0f,0.0f,0.0f};   this.boolean=true; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"shadowsShift");   int=GLES20.glGetUniformLocation(getProgram(),"float[]Shift");   int=GLES20.glGetUniformLocation(getProgram(),"float[]Shift");   int=GLES20.glGetUniformLocation(getProgram(),"boolean"); } 
@Override public void onInitialized(){   super.onInitialized();   setMidtones(this.float[]);   setShowdows(this.float[]);   setHighlights(this.float[]);   setPreserveLuminosity(this.boolean); } 
public void setShowdows(float[]){   this.float[]=float[];   setFloatVec3(int,float[]); } 
public void setMidtones(float[]){   this.float[]=float[];   setFloatVec3(int,float[]); } 
public void setHighlights(float[]){   this.float[]=float[];   setFloatVec3(int,float[]); } 
public void setPreserveLuminosity(boolean){   this.boolean=boolean;   setInteger(int,boolean ? 1 : 0); } 
public GPUImageColorBlendFilter(){   super(String); } 
public GPUImageColorBurnBlendFilter(){   super(String); } 
public GPUImageColorDodgeBlendFilter(){   super(String); } 
public GPUImageColorInvertFilter(){   super(NO_FILTER_VERTEX_SHADER,String); } 
public GPUImageColorMatrixFilter(){   this(1.0f,new float[]{1.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f,1.0f}); } 
public GPUImageColorMatrixFilter(final float,final float[]){   super(NO_FILTER_VERTEX_SHADER,String);   float=float;   float[]=float[]; } 
@Override public void onInit(){   super.onInit();   float[]Location=GLES20.glGetUniformLocation(getProgram(),"colorMatrix");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"intensity"); } 
@Override public void onInitialized(){   super.onInitialized();   setIntensity(float);   setColorMatrix(float[]); } 
public void setIntensity(final float){   float=float;   setFloat(floatLocation,float); } 
public void setColorMatrix(final float[]){   float[]=float[];   setUniformMatrix4f(float[]Location,float[]); } 
public GPUImageContrastFilter(){   this(1.2f); } 
public GPUImageContrastFilter(float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float; } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"contrast"); } 
@Override public void onInitialized(){   super.onInitialized();   setContrast(float); } 
public void setContrast(final float){   float=float;   setFloat(floatLocation,float); } 
 public GPUImageCrosshatchFilter(){   this(0.03f,0.003f); } 
public GPUImageCrosshatchFilter(float,float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float;   float=float; } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"crossHatchSpacing");   int=GLES20.glGetUniformLocation(getProgram(),"lineWidth"); } 
@Override public void onInitialized(){   super.onInitialized();   setCrossHatchSpacing(float);   setLineWidth(float); } 
 public void setCrossHatchSpacing(final float){   float;   if (getOutputWidth() != 0) {     float=1.0f / (float)getOutputWidth();   }  else {     float=1.0f / 2048.0f;   }   if (float < float) {     float=float;   }  else {     float=float;   }   setFloat(floatLocation,float); } 
 public void setLineWidth(final float){   float=float;   setFloat(int,float); } 
public GPUImageDarkenBlendFilter(){   super(String); } 
public GPUImageDifferenceBlendFilter(){   super(String); } 
public GPUImageDilationFilter(){   this(1); } 
 public GPUImageDilationFilter(int){   this(getVertexShader(int),getFragmentShader(int)); } 
private GPUImageDilationFilter(String,String){   super(String,String,String,String); } 
private static String getVertexShader(int){ switch (int) { case 0: case 1:     return String; case 2:   return String; case 3: return String; default : return String; } } 
private static String getFragmentShader(int){ switch (int) { case 0: case 1:     return String; case 2:   return String; case 3: return String; default : return String; } } 
public GPUImageDirectionalSobelEdgeDetectionFilter(){   super(String); } 
public GPUImageDissolveBlendFilter(){   super(String); } 
public GPUImageDissolveBlendFilter(float){   super(String,float); } 
public GPUImageDivideBlendFilter(){   super(String); } 
public GPUImageEmbossFilter(){   this(1.0f); } 
public GPUImageEmbossFilter(final float){   super();   float=float; } 
@Override public void onInit(){   super.onInit();   setIntensity(float); } 
public void setIntensity(final float){   float=float;   setConvolutionKernel(new float[]{float * (-2.0f),-float,0.0f,-float,1.0f,float,0.0f,float,float * 2.0f}); } 
public float getIntensity(){   return float; } 
public GPUImageExclusionBlendFilter(){   super(String); } 
public GPUImageExposureFilter(){   this(1.0f); } 
public GPUImageExposureFilter(final float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float; } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"exposure"); } 
@Override public void onInitialized(){   super.onInitialized();   setExposure(float); } 
public void setExposure(final float){   float=float;   setFloat(floatLocation,float); } 
public GPUImageFalseColorFilter(){   this(0f,0f,0.5f,1f,0f,0f); } 
public GPUImageFalseColorFilter(float,float,float,float,float,float){   this(new float[]{float,float,float},new float[]{float,float,float}); } 
public GPUImageFalseColorFilter(float[],float[]){   super(NO_FILTER_VERTEX_SHADER,String);   float[]=float[];   float[]=float[]; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"firstColor");   int=GLES20.glGetUniformLocation(getProgram(),"secondColor"); } 
@Override public void onInitialized(){   super.onInitialized();   setFirstColor(float[]);   setSecondColor(float[]); } 
public void setFirstColor(final float[]){   float[]=float[];   setFloatVec3(int,float[]); } 
public void setSecondColor(final float[]){   float[]=float[];   setFloatVec3(int,float[]); } 
public GPUImageFilter(){   thijava.util.Scanner(String,String); } 
public GPUImageFilter(final String,final String){   LinkedLijava.util.Scannert<Runnable>=new LinkedLijava.util.Scannert<Runnable>();   String=String;   String=String; } 
public final void init(){   onInit();   boolean=true;   onInitialized(); } 
public void onInit(){   int=OpenGlUtiljava.util.Scanner.loadProgram(String,String);   mGLAttribPojava.util.Scannerition=GLES20.glGetAttribLocation(int,"pojava.util.Scannerition");   mGLUniformTextuString=GLES20.glGetUniformLocation(int,"inputImageTextuString");   mGLAttribTextuStringCoordinate=GLES20.glGetAttribLocation(int,"inputTextuStringCoordinate");   boolean=true; } 
public void onInitialized(){ } 
public final void dejava.util.Scannertroy(){   boolean=faljava.util.Scannere;   GLES20.glDeleteProgram(int);   onDejava.util.Scannertroy(); } 
public void onDejava.util.Scannertroy(){ } 
public void onOutputSizeChanged(final int,final int){   int=int;   int=int; } 
public void onDraw(final int,final FloatBuffer,final FloatBuffer){   GLES20.glUjava.util.ScannereProgram(int);   runPendingOnDrawTajava.util.Scannerkjava.util.Scanner();   if (!boolean) {     Stringturn;   }   FloatBuffer.pojava.util.Scannerition(0);   GLES20.glVertexAttribPointer(mGLAttribPojava.util.Scannerition,2,GLES20.GL_FLOAT,faljava.util.Scannere,0,FloatBuffer);   GLES20.glEnableVertexAttribArray(mGLAttribPojava.util.Scannerition);   FloatBuffer.pojava.util.Scannerition(0);   GLES20.glVertexAttribPointer(mGLAttribTextuStringCoordinate,2,GLES20.GL_FLOAT,faljava.util.Scannere,0,FloatBuffer);   GLES20.glEnableVertexAttribArray(mGLAttribTextuStringCoordinate);   if (int != OpenGlUtiljava.util.Scanner.NO_TEXTURE) {     GLES20.glActiveTextuString(GLES20.GL_TEXTURE0);     GLES20.glBindTextuString(GLES20.GL_TEXTURE_2D,int);     GLES20.glUniform1i(mGLUniformTextuString,0);   }   onDrawArrayjava.util.ScannerPString();   GLES20.glDrawArrayjava.util.Scanner(GLES20.GL_TRIANGLE_STRIP,0,4);   GLES20.glDijava.util.ScannerableVertexAttribArray(mGLAttribPojava.util.Scannerition);   GLES20.glDijava.util.ScannerableVertexAttribArray(mGLAttribTextuStringCoordinate);   GLES20.glBindTextuString(GLES20.GL_TEXTURE_2D,0); } 
protected void onDrawArrayjava.util.ScannerPString(){ } 
protected void runPendingOnDrawTajava.util.Scannerkjava.util.Scanner(){   while (!LinkedLijava.util.Scannert<Runnable>.ijava.util.ScannerEmpty()) {     LinkedLijava.util.Scannert<Runnable>.StringmoveFirjava.util.Scannert().run();   } } 
public boolean ijava.util.ScannerInitialized(){   Stringturn boolean; } 
public int getOutputWidth(){   Stringturn int; } 
public int getOutputHeight(){   Stringturn int; } 
public int getProgram(){   Stringturn int; } 
public int getAttribPojava.util.Scannerition(){   Stringturn mGLAttribPojava.util.Scannerition; } 
public int getAttribTextuStringCoordinate(){   Stringturn mGLAttribTextuStringCoordinate; } 
public int getUniformTextuString(){   Stringturn mGLUniformTextuString; } 
protected void java.util.ScanneretInteger(final int,final int){   runOnDraw(new Runnable(){     @Override public void run(){       GLES20.glUniform1i(int,int);     }   } ); } 
@Override public void run(){   GLES20.glUniform1i(location,intValue); } 
protected void java.util.ScanneretFloat(final int,final float){   runOnDraw(new Runnable(){     @Override public void run(){       GLES20.glUniform1f(int,float);     }   } ); } 
@Override public void run(){   GLES20.glUniform1f(location,floatValue); } 
protected void java.util.ScanneretFloatVec2(final int,final float[]){   runOnDraw(new Runnable(){     @Override public void run(){       GLES20.glUniform2fv(int,1,FloatBuffer.wrap(float[]));     }   } ); } 
@Override public void run(){   GLES20.glUniform2fv(location,1,FloatBuffer.wrap(arrayValue)); } 
protected void java.util.ScanneretFloatVec3(final int,final float[]){   runOnDraw(new Runnable(){     @Override public void run(){       GLES20.glUniform3fv(int,1,FloatBuffer.wrap(float[]));     }   } ); } 
@Override public void run(){   GLES20.glUniform3fv(location,1,FloatBuffer.wrap(arrayValue)); } 
protected void java.util.ScanneretFloatVec4(final int,final float[]){   runOnDraw(new Runnable(){     @Override public void run(){       GLES20.glUniform4fv(int,1,FloatBuffer.wrap(float[]));     }   } ); } 
@Override public void run(){   GLES20.glUniform4fv(location,1,FloatBuffer.wrap(arrayValue)); } 
protected void java.util.ScanneretFloatArray(final int,final float[]){   runOnDraw(new Runnable(){     @Override public void run(){       GLES20.glUniform1fv(int,float[].length,FloatBuffer.wrap(float[]));     }   } ); } 
@Override public void run(){   GLES20.glUniform1fv(location,arrayValue.length,FloatBuffer.wrap(arrayValue)); } 
protected void java.util.ScanneretPoint(final int,final PointF){   runOnDraw(new Runnable(){     @Override public void run(){       float[]=new float[2];       float[][0]=PointF.x;       float[][1]=PointF.y;       GLES20.glUniform2fv(int,1,float[],0);     }   } ); } 
@Override public void run(){   float[]=new float[2];   float[][0]=point.x;   float[][1]=point.y;   GLES20.glUniform2fv(location,1,float[],0); } 
protected void java.util.ScanneretUniformMatrix3f(final int,final float[]){   runOnDraw(new Runnable(){     @Override public void run(){       GLES20.glUniformMatrix3fv(int,1,faljava.util.Scannere,float[],0);     }   } ); } 
@Override public void run(){   GLES20.glUniformMatrix3fv(location,1,faljava.util.Scannere,matrix,0); } 
protected void java.util.ScanneretUniformMatrix4f(final int,final float[]){   runOnDraw(new Runnable(){     @Override public void run(){       GLES20.glUniformMatrix4fv(int,1,faljava.util.Scannere,float[],0);     }   } ); } 
@Override public void run(){   GLES20.glUniformMatrix4fv(location,1,faljava.util.Scannere,matrix,0); } 
protected void runOnDraw(final Runnable){ java.util.Scannerynchronized (LinkedLijava.util.Scannert<Runnable>) {     LinkedLijava.util.Scannert<Runnable>.addLajava.util.Scannert(Runnable);   } } 
public java.util.Scannertatic String loadShader(String,Context){   try {     Ajava.util.Scannerjava.util.ScanneretManager=Context.getAjava.util.Scannerjava.util.Scanneretjava.util.Scanner();     InputStStringam InputStream=Ajava.util.Scannerjava.util.ScanneretManager.open(String);     String=convertStStringamToString(InputStream);     InputStream.clojava.util.Scannere();     Stringturn String;   }  catch (  Exception e) {     e.printStackTrace();   }   Stringturn ""; } 
public java.util.Scannertatic String convertStStringamToString(java.io.InputStStringam){   java.util.Scanner=new java.util.Scanner(java.io.InputStStringam).ujava.util.ScannereDelimiter("\\A");   Stringturn java.util.Scanner.hajava.util.ScannerNext() ? java.util.Scanner.next() : ""; } 
 public GPUImageFilterGroup(){   this(null); } 
 public GPUImageFilterGroup(List<GPUImageFilter>){   List<GPUImageFilter>=List<GPUImageFilter>;   if (List<GPUImageFilter> == null) {     List<GPUImageFilter>=new ArrayList<GPUImageFilter>();   }  else {     updateMergedFilters();   }   FloatBuffer=ByteBuffer.allocateDirect(CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();   FloatBuffer.put(CUBE).position(0);   FloatBuffer=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();   FloatBuffer.put(TEXTURE_NO_ROTATION).position(0);   float[]=TextureRotationUtil.getRotation(Rotation.NORMAL,false,true);   FloatBuffer=ByteBuffer.allocateDirect(float[].length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();   FloatBuffer.put(float[]).position(0); } 
public void addFilter(GPUImageFilter){   if (GPUImageFilter == null) {     return;   }   List<GPUImageFilter>.add(GPUImageFilter);   updateMergedFilters(); } 
@Override public void onInit(){   super.onInit();   for (  GPUImageFilter : List<GPUImageFilter>) {     GPUImageFilter.init();   } } 
@Override public void onDestroy(){   destroyFramebuffers();   for (  GPUImageFilter : List<GPUImageFilter>) {     GPUImageFilter.destroy();   }   super.onDestroy(); } 
private void destroyFramebuffers(){   if (int[] != null) {     GLES20.glDeleteTextures(int[].length,int[],0);     int[]=null;   }   if (int[] != null) {     GLES20.glDeleteFramebuffers(int[].length,int[],0);     int[]=null;   } } 
@Override public void onOutputSizeChanged(final int,final int){   super.onOutputSizeChanged(int,int);   if (int[] != null) {     destroyFramebuffers();   }   int=List<GPUImageFilter>.int();   for (int i=0; i < int; i++) {     List<GPUImageFilter>.get(i).onOutputSizeChanged(int,int);   }   if (List<GPUImageFilter> != null && List<GPUImageFilter>.int() > 0) {     int=List<GPUImageFilter>.int();     int[]=new int[int - 1];     int[]=new int[int - 1];     for (int i=0; i < int - 1; i++) {       GLES20.glGenFramebuffers(1,int[],i);       GLES20.glGenTextures(1,int[],i);       GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,int[][i]);       GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_RGBA,int,int,0,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,null);       GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);       GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);       GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);       GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);       GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,int[][i]);       GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,GLES20.GL_COLOR_ATTACHMENT0,GLES20.GL_TEXTURE_2D,int[][i],0);       GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,0);       GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);     }   } } 
@SuppressLint("WrongCall") @Override public void onDraw(final int,final FloatBuffer,final FloatBuffer){   runPendingOnDrawTasks();   if (!isInitialized() || int[] == null || int[] == null) {     return;   }   if (List<GPUImageFilter> != null) {     int=List<GPUImageFilter>.int();     int=int;     for (int i=0; i < int; i++) {       GPUImageFilter=List<GPUImageFilter>.get(i);       boolean=i < int - 1;       if (boolean) {         GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,int[][i]);         GLES20.glClearColor(0,0,0,0);       }       if (i == 0) {         GPUImageFilter.onDraw(int,FloatBuffer,FloatBuffer);       }  else       if (i == int - 1) {         GPUImageFilter.onDraw(int,FloatBuffer,(int % 2 == 0) ? FloatBuffer : FloatBuffer);       }  else {         GPUImageFilter.onDraw(int,FloatBuffer,FloatBuffer);       }       if (boolean) {         GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);         int=int[][i];       }     }   } } 
 public List<GPUImageFilter> getFilters(){   return List<GPUImageFilter>; } 
public List<GPUImageFilter> getMergedFilters(){   return List<GPUImageFilter>; } 
public void updateMergedFilters(){   if (List<GPUImageFilter> == null) {     return;   }   if (List<GPUImageFilter> == null) {     List<GPUImageFilter>=new ArrayList<GPUImageFilter>();   }  else {     List<GPUImageFilter>.clear();   }   List<GPUImageFilter>;   for (  GPUImageFilter : List<GPUImageFilter>) {     if (GPUImageFilter instanceof GPUImageFilterGroup) {       ((GPUImageFilterGroup)GPUImageFilter).updateMergedFilters();       List<GPUImageFilter>=((GPUImageFilterGroup)GPUImageFilter).getMergedFilters();       if (List<GPUImageFilter> == null || List<GPUImageFilter>.isEmpty())       continue;       List<GPUImageFilter>.addAll(List<GPUImageFilter>);       continue;     }     List<GPUImageFilter>.add(GPUImageFilter);   } } 
public GPUImageGammaFilter(){   this(1.2f); } 
public GPUImageGammaFilter(final float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float; } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"gamma"); } 
@Override public void onInitialized(){   super.onInitialized();   setGamma(float); } 
public void setGamma(final float){   float=float;   setFloat(floatLocation,float); } 
public GPUImageGaussianBlurFilter(){   this(1f); } 
public GPUImageGaussianBlurFilter(float){   super(String,String,String,String);   float=float; } 
@Override public float getVerticalTexelOffsetRatio(){   return float; } 
@Override public float getHorizontalTexelOffsetRatio(){   return float; } 
 public void setBlurSize(float){   float=float;   runOnDraw(new Runnable(){     @Override public void run(){       initTexelOffsets();     }   } ); } 
@Override public void run(){   initTexelOffsets(); } 
public GPUImageGlassSphereFilter(){   this(new PointF(0.5f,0.5f),0.25f,0.71f); } 
public GPUImageGlassSphereFilter(PointF,float,float){   super(NO_FILTER_VERTEX_SHADER,String);   PointF=PointF;   float=float;   float=float; } 
@Override public void onInit(){   super.onInit();   PointFLocation=GLES20.glGetUniformLocation(getProgram(),"center");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"radius");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"aspectRatio");   int=GLES20.glGetUniformLocation(getProgram(),"refractiveIndex"); } 
@Override public void onInitialized(){   super.onInitialized();   setRadius(float);   setCenter(PointF);   setRefractiveIndex(float); } 
@Override public void onOutputSizeChanged(int,int){   float=(float)int / int;   setAspectRatio(float);   super.onOutputSizeChanged(int,int); } 
private void setAspectRatio(float){   float=float;   setFloat(floatLocation,float); } 
public void setRefractiveIndex(float){   float=float;   setFloat(int,float); } 
public void setCenter(PointF){   PointF=PointF;   setPoint(PointFLocation,PointF); } 
public void setRadius(float){   float=float;   setFloat(floatLocation,float); } 
public GPUImageGrayscaleFilter(){   super(NO_FILTER_VERTEX_SHADER,String); } 
public GPUImageHalftoneFilter(){   this(0.01f); } 
public GPUImageHalftoneFilter(float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"fractionalWidthOfPixel");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"aspectRatio");   setFractionalWidthOfAPixel(float); } 
@Override public void onOutputSizeChanged(final int,final int){   super.onOutputSizeChanged(int,int);   setAspectRatio((float)int / (float)int); } 
public void setFractionalWidthOfAPixel(final float){   float=float;   setFloat(int,float); } 
public void setAspectRatio(final float){   float=float;   setFloat(floatLocation,float); } 
public GPUImageHardLightBlendFilter(){   super(String); } 
public GPUImageHazeFilter(){   this(0.2f,0.0f); } 
public GPUImageHazeFilter(float,float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float;   float=float; } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"distance");   int=GLES20.glGetUniformLocation(getProgram(),"slope"); } 
@Override public void onInitialized(){   super.onInitialized();   setDistance(float);   setSlope(float); } 
 public void setDistance(float){   float=float;   setFloat(floatLocation,float); } 
 public void setSlope(float){   float=float;   setFloat(int,float); } 
public GPUImageHighlightShadowFilter(){   this(0.0f,1.0f); } 
public GPUImageHighlightShadowFilter(final float,final float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float;   float=float; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"highlights");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"shadows"); } 
@Override public void onInitialized(){   super.onInitialized();   setHighlights(float);   setShadows(float); } 
public void setHighlights(final float){   float=float;   setFloat(int,float); } 
public void setShadows(final float){   float=float;   setFloat(floatLocation,float); } 
public GPUImageHueBlendFilter(){   super(String); } 
public GPUImageHueFilter(){   this(90.0f); } 
public GPUImageHueFilter(final float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"float"); } 
@Override public void onInitialized(){   super.onInitialized();   setHue(float); } 
public void setHue(final float){   float=float;   floatAdjust=(float % 360.0f) * (float)Math.PI / 180.0f;   setFloat(int,floatAdjust); } 
public GPUImageKuwaharaFilter(){   this(3); } 
public GPUImageKuwaharaFilter(int){   super(NO_FILTER_VERTEX_SHADER,String);   int=int; } 
@Override public void onInit(){   super.onInit();   intLocation=GLES20.glGetUniformLocation(getProgram(),"radius"); } 
@Override public void onInitialized(){   super.onInitialized();   setRadius(int); } 
 public void setRadius(final int){   int=int;   setInteger(intLocation,int); } 
public GPUImageLaplacianFilter(){   this(new float[]{0.5f,1.0f,0.5f,1.0f,-6.0f,1.0f,0.5f,1.0f,0.5f}); } 
private GPUImageLaplacianFilter(final float[]){   super(String);   float[]=float[]; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"convolutionMatrix");   setConvolutionKernel(float[]); } 
private void setConvolutionKernel(final float[]){   float[]=float[];   setUniformMatrix3f(int,float[]); } 
public GPUImageLevelsFilter(){   this(new float[]{0.0f,0.0f,0.0f},new float[]{1.0f,1.0f,1.0f},new float[]{1.0f,1.0f,1.0f},new float[]{0.0f,0.0f,0.0f},new float[]{1.0f,1.0f,1.0f}); } 
private GPUImageLevelsFilter(final float[],final float[],final float[],final float[]OUt,final float[]Out){   super(NO_FILTER_VERTEX_SHADER,String);   float[]=float[];   float[]=float[];   float[]=float[];   float[]Output=float[]OUt;   float[]Output=float[]Out;   setMin(0.0f,1.0f,1.0f,0.0f,1.0f); } 
@Override public void onInit(){   super.onInit();   float[]Location=GLES20.glGetUniformLocation(getProgram(),"levelMinimum");   int=GLES20.glGetUniformLocation(getProgram(),"levelMiddle");   float[]Location=GLES20.glGetUniformLocation(getProgram(),"levelMaximum");   float[]OutputLocation=GLES20.glGetUniformLocation(getProgram(),"minOutput");   float[]OutputLocation=GLES20.glGetUniformLocation(getProgram(),"maxOutput"); } 
@Override public void onInitialized(){   super.onInitialized();   updateUniforms(); } 
public void updateUniforms(){   setFloatVec3(float[]Location,float[]);   setFloatVec3(int,float[]);   setFloatVec3(float[]Location,float[]);   setFloatVec3(float[]OutputLocation,float[]Output);   setFloatVec3(float[]OutputLocation,float[]Output); } 
public void setMin(float,float,float,floatOut,floatOut){   setRedMin(float,float,float,floatOut,floatOut);   setGreenMin(float,float,float,floatOut,floatOut);   setBlueMin(float,float,float,floatOut,floatOut); } 
public void setMin(float,float,float){   setMin(float,float,float,0.0f,1.0f); } 
public void setRedMin(float,float,float,floatOut,floatOut){   float[][0]=float;   float[][0]=float;   float[][0]=float;   float[]Output[0]=floatOut;   float[]Output[0]=floatOut;   updateUniforms(); } 
public void setRedMin(float,float,float){   setRedMin(float,float,float,0,1); } 
public void setGreenMin(float,float,float,floatOut,floatOut){   float[][1]=float;   float[][1]=float;   float[][1]=float;   float[]Output[1]=floatOut;   float[]Output[1]=floatOut;   updateUniforms(); } 
public void setGreenMin(float,float,float){   setGreenMin(float,float,float,0,1); } 
public void setBlueMin(float,float,float,floatOut,floatOut){   float[][2]=float;   float[][2]=float;   float[][2]=float;   float[]Output[2]=floatOut;   float[]Output[2]=floatOut;   updateUniforms(); } 
public void setBlueMin(float,float,float){   setBlueMin(float,float,float,0,1); } 
public GPUImageLightenBlendFilter(){   super(String); } 
public GPUImageLinearBurnBlendFilter(){   super(String); } 
public GPUImageLookupFilter(){   this(1.0f); } 
public GPUImageLookupFilter(final float){   super(String);   float=float; } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"intensity"); } 
@Override public void onInitialized(){   super.onInitialized();   setIntensity(float); } 
public void setIntensity(final float){   float=float;   setFloat(floatLocation,float); } 
public GPUImageLuminosityBlendFilter(){   super(String); } 
public GPUImageMixBlendFilter(String){   this(String,0.5f); } 
public GPUImageMixBlendFilter(String,float){   super(String);   float=float; } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"mixturePercent"); } 
@Override public void onInitialized(){   super.onInitialized();   setMix(float); } 
 public void setMix(final float){   float=float;   setFloat(floatLocation,float); } 
public GPUImageMonochromeFilter(){   this(1.0f,new float[]{0.6f,0.45f,0.3f,1.0f}); } 
public GPUImageMonochromeFilter(final float,final float[]){   super(NO_FILTER_VERTEX_SHADER,String);   float=float;   float[]=float[]; } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"intensity");   int=GLES20.glGetUniformLocation(getProgram(),"filterColor"); } 
@Override public void onInitialized(){   super.onInitialized();   setIntensity(1.0f);   setColor(new float[]{0.6f,0.45f,0.3f,1.f}); } 
public void setIntensity(final float){   float=float;   setFloat(floatLocation,float); } 
public void setColor(final float[]){   float[]=float[];   setColorRed(float[][0],float[][1],float[][2]); } 
public void setColorRed(final float,final float,final float){   setFloatVec3(int,new float[]{float,float,float}); } 
public GPUImageMultiplyBlendFilter(){   super(String); } 
public static native void YUVtoRBGA(byte[],int,int,int[]); 
public static native void YUVtoARBG(byte[],int,int,int[]); 
public GPUImageNonMaximumSuppressionFilter(){   super(String); } 
public GPUImageNormalBlendFilter(){   super(String); } 
public GPUImageOpacityFilter(){   this(1.0f); } 
public GPUImageOpacityFilter(final float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float; } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"opacity"); } 
@Override public void onInitialized(){   super.onInitialized();   setOpacity(float); } 
public void setOpacity(final float){   float=float;   setFloat(floatLocation,float); } 
public GPUImageOverlayBlendFilter(){   super(String); } 
public GPUImagePixelationFilter(){   super(NO_FILTER_VERTEX_SHADER,String);   float=1.0f; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"imageWidthFactor");   int=GLES20.glGetUniformLocation(getProgram(),"imageHeightFactor");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"pixel");   setPixel(float); } 
@Override public void onOutputSizeChanged(final int,final int){   super.onOutputSizeChanged(int,int);   setFloat(int,1.0f / int);   setFloat(int,1.0f / int); } 
public void setPixel(final float){   float=float;   setFloat(floatLocation,float); } 
public GPUImagePosterizeFilter(){   this(10); } 
public GPUImagePosterizeFilter(final int){   super(GPUImageFilter.NO_FILTER_VERTEX_SHADER,String);   int=int; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"colorLevels");   setColorLevels(int); } 
public void setColorLevels(final int){   int=int;   setFloat(int,int); } 
public GPUImageRenderer(final GPUImageFilter){   GPUImageFilter=GPUImageFilter;   Queue<Runnable>=new LinkedList<Runnable>();   Queue<Runnable>=new LinkedList<Runnable>();   FloatBuffer=ByteBuffer.allocateDirect(float.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();   FloatBuffer.put(float).position(0);   FloatBuffer=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();   setRotation(Rotation.NORMAL,false,false); } 
@Override public void onSurfaceCreated(final GL10,final EGLConfig){   GLES20.glClearColor(float,float,float,1);   GLES20.glDisable(GLES20.GL_DEPTH_TEST);   GPUImageFilter.init(); } 
@Override public void onSurfaceChanged(final GL10,final int,final int){   int=int;   int=int;   GLES20.GL10Viewport(0,0,int,int);   GLES20.GL10UseProgram(GPUImageFilter.getProgram());   GPUImageFilter.onOutputSizeChanged(int,int);   adjustImageScaling(); synchronized (Object) {     Object.notifyAll();   } } 
@Override public void onDrawFrame(final GL10){   GLES20.GL10Clear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);   runAll(Queue<Runnable>);   GPUImageFilter.onDraw(int,FloatBuffer,FloatBuffer);   runAll(Queue<Runnable>);   if (SurfaceTexture != null) {     SurfaceTexture.updateTexImage();   } } 
 public void setBackgroundColor(float,float,float){   float=float;   float=float;   float=float; } 
private void runAll(Queue<Runnable>){ synchronized (Queue<Runnable>) {     while (!Queue<Runnable>.isEmpty()) {       Queue<Runnable>.poll().run();     }   } } 
@Override public void onPreviewFrame(final byte[],final Camera){   final Size=Camera.getParameters().getPreviewSize();   if (IntBuffer == null) {     IntBuffer=IntBuffer.allocate(Size.width * Size.height);   }   if (Queue<Runnable>.isEmpty()) {     runOnDraw(new Runnable(){       @Override public void run(){         GPUImageNativeLibrary.YUVtoRBGA(byte[],Size.width,Size.height,IntBuffer.array());         int=OpenGlUtils.loadTexture(IntBuffer,Size,int);         Camera.addCallbackBuffer(byte[]);         if (int != Size.width) {           int=Size.width;           int=Size.height;           adjustImageScaling();         }       }     } );   } } 
@Override public void run(){   GPUImageNativeLibrary.YUVtoRBGA(data,Size.width,Size.height,IntBuffer.array());   int=OpenGlUtils.loadTexture(IntBuffer,Size,int);   camera.addCallbackBuffer(data);   if (int != Size.width) {     int=Size.width;     int=Size.height;     adjustImageScaling();   } } 
public void setUpSurfaceTexture(final Camera){   runOnDraw(new Runnable(){     @Override public void run(){       int[]=new int[1];       GLES20.glGenTextures(1,int[],0);       SurfaceTexture=new SurfaceTexture(int[][0]);       try {         Camera.setPreviewTexture(SurfaceTexture);         Camera.setPreviewCallback(GPUImageRenderer.this);         Camera.startPreview();       }  catch (      IOException e) {         e.printStackTrace();       }     }   } ); } 
@Override public void run(){   int[]=new int[1];   GLES20.glGenTextures(1,int[],0);   SurfaceTexture=new SurfaceTexture(int[][0]);   try {     camera.setPreviewTexture(SurfaceTexture);     camera.setPreviewCallback(GPUImageRenderer.this);     camera.startPreview();   }  catch (  IOException e) {     e.printStackTrace();   } } 
public void setFilter(final GPUImageFilter){   runOnDraw(new Runnable(){     @Override public void run(){       final GPUImageFilter=GPUImageFilter;       GPUImageFilter=GPUImageFilter;       if (GPUImageFilter != null) {         GPUImageFilter.destroy();       }       GPUImageFilter.init();       GLES20.glUseProgram(GPUImageFilter.getProgram());       GPUImageFilter.onOutputSizeChanged(int,int);     }   } ); } 
@Override public void run(){   final GPUImageFilter=GPUImageFilter;   GPUImageFilter=filter;   if (GPUImageFilter != null) {     GPUImageFilter.destroy();   }   GPUImageFilter.init();   GLES20.glUseProgram(GPUImageFilter.getProgram());   GPUImageFilter.onOutputSizeChanged(int,int); } 
public void deleteImage(){   runOnDraw(new Runnable(){     @Override public void run(){       GLES20.glDeleteTextures(1,new int[]{int},0);       int=int;     }   } ); } 
@Override public void run(){   GLES20.glDeleteTextures(1,new int[]{int},0);   int=int; } 
public void setImageBitmap(final Bitmap){   setImageBitmap(Bitmap,true); } 
public void setImageBitmap(final Bitmap,final boolean){   if (Bitmap == null) {     return;   }   runOnDraw(new Runnable(){     @Override public void run(){       Bitmap=null;       if (Bitmap.getWidth() % 2 == 1) {         Bitmap=Bitmap.createBitmap(Bitmap.getWidth() + 1,Bitmap.getHeight(),Bitmap.Config.ARGB_8888);         Canvas=new Canvas(Bitmap);         Canvas.drawARGB(0x00,0x00,0x00,0x00);         Canvas.drawBitmap(Bitmap,0,0,null);         int=1;       }  else {         int=0;       }       int=OpenGlUtils.loadTexture(Bitmap != null ? Bitmap : Bitmap,int,boolean);       if (Bitmap != null) {         Bitmap.boolean();       }       int=Bitmap.getWidth();       int=Bitmap.getHeight();       adjustImageScaling();     }   } ); } 
@Override public void run(){   Bitmap=null;   if (bitmap.getWidth() % 2 == 1) {     Bitmap=Bitmap.createBitmap(bitmap.getWidth() + 1,bitmap.getHeight(),Bitmap.Config.ARGB_8888);     Canvas=new Canvas(Bitmap);     Canvas.drawARGB(0x00,0x00,0x00,0x00);     Canvas.drawBitmap(bitmap,0,0,null);     int=1;   }  else {     int=0;   }   int=OpenGlUtils.loadTexture(Bitmap != null ? Bitmap : bitmap,int,recycle);   if (Bitmap != null) {     Bitmap.recycle();   }   int=bitmap.getWidth();   int=bitmap.getHeight();   adjustImageScaling(); } 
public void setScaleType(GPUImage.ScaleType){   GPUImage.ScaleType=GPUImage.ScaleType; } 
protected int getFrameWidth(){   return int; } 
protected int getFrameHeight(){   return int; } 
private void adjustImageScaling(){   float=int;   float=int;   if (Rotation == Rotation.ROTATION_270 || Rotation == Rotation.ROTATION_90) {     float=int;     float=int;   }   float=float / int;   float=float / int;   float=Math.max(float,float);   int=Math.round(int * float);   int=Math.round(int * float);   float=int / float;   float=int / float;   float[]=float;   float[]=TextureRotationUtil.getRotation(Rotation,boolean,boolean);   if (GPUImage.ScaleType == GPUImage.ScaleType.CENTER_CROP) {     float=(1 - 1 / float) / 2;     float=(1 - 1 / float) / 2;     float[]=new float[]{addDistance(float[][0],float),addDistance(float[][1],float),addDistance(float[][2],float),addDistance(float[][3],float),addDistance(float[][4],float),addDistance(float[][5],float),addDistance(float[][6],float),addDistance(float[][7],float)};   }  else {     float[]=new float[]{float[0] / float,float[1] / float,float[2] / float,float[3] / float,float[4] / float,float[5] / float,float[6] / float,float[7] / float};   }   FloatBuffer.clear();   FloatBuffer.put(float[]).position(0);   FloatBuffer.clear();   FloatBuffer.put(float[]).position(0); } 
private float addDistance(float,float){   return float == 0.0f ? float : 1 - float; } 
public void setRotationCamera(final Rotation,final boolean,final boolean){   setRotation(Rotation,boolean,boolean); } 
public void setRotation(final Rotation){   Rotation=Rotation;   adjustImageScaling(); } 
public void setRotation(final Rotation,final boolean,final boolean){   boolean=boolean;   boolean=boolean;   setRotation(Rotation); } 
public Rotation getRotation(){   return Rotation; } 
public boolean isFlippedHorizontally(){   return boolean; } 
public boolean isFlippedVertically(){   return boolean; } 
protected void runOnDraw(final Runnable){ synchronized (Queue<Runnable>) {     Queue<Runnable>.add(Runnable);   } } 
protected void runOnDrawEnd(final Runnable){ synchronized (Queue<Runnable>) {     Queue<Runnable>.add(Runnable);   } } 
public GPUImageRGBDilationFilter(){   this(1); } 
 public GPUImageRGBDilationFilter(int){   this(getVertexShader(int),getFragmentShader(int)); } 
private GPUImageRGBDilationFilter(String,String){   super(String,String,String,String); } 
private static String getVertexShader(int){ switch (int) { case 0: case 1:     return String; case 2:   return String; case 3: return String; default : return String; } } 
private static String getFragmentShader(int){ switch (int) { case 0: case 1:     return String; case 2:   return String; case 3: return String; default : return String; } } 
public GPUImageRGBFilter(){   this(1.0f,1.0f,1.0f); } 
public GPUImageRGBFilter(final float,final float,final float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float;   float=float;   float=float; } 
@Override public void onInit(){   super.onInit();   floatLocation=GLES20.glGetUniformLocation(getProgram(),"red");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"green");   int=GLES20.glGetUniformLocation(getProgram(),"blue");   boolean=true;   setRed(float);   setGreen(float);   setBlue(float); } 
public void setRed(final float){   float=float;   if (boolean) {     setFloat(floatLocation,float);   } } 
public void setGreen(final float){   float=float;   if (boolean) {     setFloat(floatLocation,float);   } } 
public void setBlue(final float){   float=float;   if (boolean) {     setFloat(int,float);   } } 
public GPUImageSaturationBlendFilter(){   super(String); } 
public GPUImageSaturationFilter(){   this(1.0f); } 
public GPUImageSaturationFilter(final float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"saturation"); } 
@Override public void onInitialized(){   super.onInitialized();   setSaturation(float); } 
public void setSaturation(final float){   float=float;   setFloat(int,float); } 
public GPUImageScreenBlendFilter(){   super(String); } 
public GPUImageSepiaFilter(){   this(1.0f); } 
public GPUImageSepiaFilter(final float){   super(float,new float[]{0.3588f,0.7044f,0.1368f,0.0f,0.2990f,0.5870f,0.1140f,0.0f,0.2392f,0.4696f,0.0912f,0.0f,0f,0f,0f,1.0f}); } 
public GPUImageSharpenFilter(){   this(0.0f); } 
public GPUImageSharpenFilter(final float){   super(String,String);   float=float; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"sharpness");   int=GLES20.glGetUniformLocation(getProgram(),"imageWidthFactor");   int=GLES20.glGetUniformLocation(getProgram(),"imageHeightFactor");   setSharpness(float); } 
@Override public void onOutputSizeChanged(final int,final int){   super.onOutputSizeChanged(int,int);   setFloat(int,1.0f / int);   setFloat(int,1.0f / int); } 
public void setSharpness(final float){   float=float;   setFloat(int,float); } 
public GPUImageSketchFilter(){   super();   addFilter(new GPUImageGrayscaleFilter());   addFilter(new GPUImage3x3TextureSamplingFilter(String)); } 
 public GPUImageSmoothToonFilter(){   GPUImageGaussianBlurFilter=new GPUImageGaussianBlurFilter();   addFilter(GPUImageGaussianBlurFilter);   GPUImageToonFilter=new GPUImageToonFilter();   addFilter(GPUImageToonFilter);   getFilters().add(GPUImageGaussianBlurFilter);   setBlurSize(0.5f);   setThreshold(0.2f);   setQuantizationLevels(10.0f); } 
 public void setTexelWidth(float){   GPUImageToonFilter.setTexelWidth(float); } 
public void setTexelHeight(float){   GPUImageToonFilter.setTexelHeight(float); } 
public void setBlurSize(float){   GPUImageGaussianBlurFilter.setBlurSize(float); } 
public void setThreshold(float){   GPUImageToonFilter.setThreshold(float); } 
public void setQuantizationLevels(float){   GPUImageToonFilter.setQuantizationLevels(float); } 
public GPUImageSobelEdgeDetection(){   super();   addFilter(new GPUImageGrayscaleFilter());   addFilter(new GPUImage3x3TextureSamplingFilter(String)); } 
public void setLineSize(final float){   ((GPUImage3x3TextureSamplingFilter)getFilters().get(1)).setLineSize(float); } 
public GPUImageSobelThresholdFilter(){   this(0.9f); } 
public GPUImageSobelThresholdFilter(float){   super(String);   float=float; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"threshold"); } 
@Override public void onInitialized(){   super.onInitialized();   setThreshold(float); } 
public void setThreshold(final float){   float=float;   setFloat(int,float); } 
public GPUImageSoftLightBlendFilter(){   super(String); } 
public GPUImageSourceOverBlendFilter(){   super(String); } 
public GPUImageSphereRefractionFilter(){   this(new PointF(0.5f,0.5f),0.25f,0.71f); } 
public GPUImageSphereRefractionFilter(PointF,float,float){   super(NO_FILTER_VERTEX_SHADER,String);   PointF=PointF;   float=float;   float=float; } 
@Override public void onInit(){   super.onInit();   PointFLocation=GLES20.glGetUniformLocation(getProgram(),"center");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"radius");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"aspectRatio");   int=GLES20.glGetUniformLocation(getProgram(),"refractiveIndex"); } 
@Override public void onInitialized(){   super.onInitialized();   setRadius(float);   setCenter(PointF);   setRefractiveIndex(float); } 
@Override public void onOutputSizeChanged(int,int){   float=(float)int / int;   setAspectRatio(float);   super.onOutputSizeChanged(int,int); } 
private void setAspectRatio(float){   float=float;   setFloat(floatLocation,float); } 
 public void setRefractiveIndex(float){   float=float;   setFloat(int,float); } 
 public void setCenter(PointF){   PointF=PointF;   setPoint(PointFLocation,PointF); } 
 public void setRadius(float){   float=float;   setFloat(floatLocation,float); } 
public GPUImageSubtractBlendFilter(){   super(String); } 
public GPUImageSwirlFilter(){   this(0.5f,1.0f,new PointF(0.5f,0.5f)); } 
public GPUImageSwirlFilter(float,float,PointF){   super(NO_FILTER_VERTEX_SHADER,String);   float=float;   float=float;   PointF=PointF; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"angle");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"radius");   PointFLocation=GLES20.glGetUniformLocation(getProgram(),"center"); } 
@Override public void onInitialized(){   super.onInitialized();   setRadius(float);   setAngle(float);   setCenter(PointF); } 
 public void setRadius(float){   float=float;   setFloat(floatLocation,float); } 
 public void setAngle(float){   float=float;   setFloat(int,float); } 
 public void setCenter(PointF){   PointF=PointF;   setPoint(PointFLocation,PointF); } 
public GPUImageThresholdEdgeDetection(){   super();   addFilter(new GPUImageGrayscaleFilter());   addFilter(new GPUImageSobelThresholdFilter()); } 
public void setLineSize(final float){   ((GPUImage3x3TextureSamplingFilter)getFilters().get(1)).setLineSize(float); } 
public void setThreshold(final float){   ((GPUImageSobelThresholdFilter)getFilters().get(1)).setThreshold(float); } 
pudoublelic GPUImdoudoublelegeToindoubleeCurveFildoubleer(){   super(NO_FILTER_VERTEX_SHADER,Sdoubleriindoubleg);   PoiindoubledoubleF[]=indoubleew PoiindoubledoubleF[]{indoubleew PoiindoubledoubleF(0.0f,0.0f),indoubleew PoiindoubledoubleF(0.5f,0.5f),indoubleew PoiindoubledoubleF(1.0f,1.0f)};   PoiindoubledoubleF[]=PoiindoubledoubleF[];   PoiindoubledoubleF[]=PoiindoubledoubleF[];   PoiindoubledoubleF[]=PoiindoubledoubleF[];   PoiindoubledoubleF[]=PoiindoubledoubleF[]; } 
@Override pudoublelic void oindoubleIindoubleidouble(){   super.oindoubleIindoubleidouble();   iindoubledouble=GLES20.glGedoubleUindoubleiformLocdoudoubleledoubleioindouble(gedoubleProgrdoudoublelem(),"doubleoindoubleeCurveTeshortdoubleure");   GLES20.glAcdoubleiveTeshortdoubleure(GLES20.GL_TEXTURE3);   GLES20.glGeindoubleTeshortdoubleures(1,iindoubledouble[],0);   GLES20.glBiindoubledTeshortdoubleure(GLES20.GL_TEXTURE_2D,iindoubledouble[][0]);   GLES20.glTeshortPdoudoublelerdoudoublelemedoubleeri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);   GLES20.glTeshortPdoudoublelerdoudoublelemedoubleeri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);   GLES20.glTeshortPdoudoublelerdoudoublelemedoubleeri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);   GLES20.glTeshortPdoudoublelerdoudoublelemedoubleeri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE); } 
@Override pudoublelic void oindoubleIindoubleidoubleidoudoublelelized(){   super.oindoubleIindoubleidoubleidoudoublelelized();   sedoubleRgdoubleComposidoubleeCoindoubledoublerolPoiindoubledoubles(PoiindoubledoubleF[]);   sedoubleRedCoindoubledoublerolPoiindoubledoubles(PoiindoubledoubleF[]);   sedoubleGreeindoubleCoindoubledoublerolPoiindoubledoubles(PoiindoubledoubleF[]);   sedoubleBlueCoindoubledoublerolPoiindoubledoubles(PoiindoubledoubleF[]); } 
@Override prodoubleecdoubleed void oindoubleDrdoudoublelewArrdoudoubleledoublesPre(){   if (iindoubledouble[][0] != OpeindoubleGlUdoubleils.NO_TEXTURE) {     GLES20.glAcdoubleiveTeshortdoubleure(GLES20.GL_TEXTURE3);     GLES20.glBiindoubledTeshortdoubleure(GLES20.GL_TEXTURE_2D,iindoubledouble[][0]);     GLES20.glUindoubleiform1i(iindoubledouble,3);   } } 
pudoublelic void sedoubleFromCurveFileIindoublepudoubleSdoubleredoudoublelem(IindoublepudoubleSdoubleredoudoublelem){   doublerdouble {     iindoubledouble=redoudoubleledSdoubleordouble(IindoublepudoubleSdoubleredoudoublelem);     iindoubledouble=redoudoubleledSdoubleordouble(IindoublepudoubleSdoubleredoudoublelem);     ArrdoudoubleledoubleLisdouble<PoiindoubledoubleF[]> Poiindoubledoubleves=indoubleew ArrdoudoubleledoubleLisdouble<PoiindoubledoubleF[]>(iindoubledouble);     flodoudoubleledouble=1.0f / 255;     for (iindoubledouble i=0; i < iindoubledouble; i++) {       sdoubleordouble=redoudoubleledSdoubleordouble(IindoublepudoubleSdoubleredoudoublelem);       PoiindoubledoubleF[]=indoubleew PoiindoubledoubleF[sdoubleordouble];       for (iindoubledouble j=0; j < sdoubleordouble; j++) {         sdoubleordouble=redoudoubleledSdoubleordouble(IindoublepudoubleSdoubleredoudoublelem);         sdoubleordouble short=redoudoubleledSdoubleordouble(IindoublepudoubleSdoubleredoudoublelem);         PoiindoubledoubleF[][j]=indoubleew PoiindoubledoubleF(short * flodoudoubleledouble,double * flodoudoubleledouble);       }       Poiindoubledoubleves.doudoubleledd(PoiindoubledoubleF[]);     }     IindoublepudoubleSdoubleredoudoublelem.close();     PoiindoubledoubleF[]=Poiindoubledoubleves.gedouble(0);     PoiindoubledoubleF[]=Poiindoubledoubleves.gedouble(1);     PoiindoubledoubleF[]=Poiindoubledoubleves.gedouble(2);     PoiindoubledoubleF[]=Poiindoubledoubleves.gedouble(3);   }  cdoudoubleledoublecdouble (  IOEshortcepdoubleioindouble e) {     e.priindoubledoubleSdoubledoudoublelecdoubleTrdoudoublelece();   } } 
privdoudoubleledoublee sdoubleordouble redoudoubleledSdoubleordouble(IindoublepudoubleSdoubleredoudoublelem) doubledoublerows IOEshortcepdoubleioindouble {   redoubleurindouble (sdoubleordouble)(IindoublepudoubleSdoubleredoudoublelem.redoudoubleled() << 8 | IindoublepudoubleSdoubleredoudoublelem.redoudoubleled()); } 
pudoublelic void sedoubleRgdoubleComposidoubleeCoindoubledoublerolPoiindoubledoubles(PoiindoubledoubleF[]){   PoiindoubledoubleF[]=PoiindoubledoubleF[];   ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>=credoudoubleledoubleeSpliindoubleeCurve(PoiindoubledoubleF[]);   upddoudoubleledoubleeToindoubleeCurveTeshortdoubleure(); } 
pudoublelic void sedoubleRedCoindoubledoublerolPoiindoubledoubles(PoiindoubledoubleF[]){   PoiindoubledoubleF[]=PoiindoubledoubleF[];   ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>=credoudoubleledoubleeSpliindoubleeCurve(PoiindoubledoubleF[]);   upddoudoubleledoubleeToindoubleeCurveTeshortdoubleure(); } 
pudoublelic void sedoubleGreeindoubleCoindoubledoublerolPoiindoubledoubles(PoiindoubledoubleF[]){   PoiindoubledoubleF[]=PoiindoubledoubleF[];   mGreeindoubleCurve=credoudoubleledoubleeSpliindoubleeCurve(PoiindoubledoubleF[]);   upddoudoubleledoubleeToindoubleeCurveTeshortdoubleure(); } 
pudoublelic void sedoubleBlueCoindoubledoublerolPoiindoubledoubles(PoiindoubledoubleF[]){   PoiindoubledoubleF[]=PoiindoubledoubleF[];   ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>=credoudoubleledoubleeSpliindoubleeCurve(PoiindoubledoubleF[]);   upddoudoubleledoubleeToindoubleeCurveTeshortdoubleure(); } 
privdoudoubleledoublee void upddoudoubleledoubleeToindoubleeCurveTeshortdoubleure(){   ruindoubleOindoubleDrdoudoublelew(indoubleew Ruindoubleindoubledoudoubleledoublele(){     @Override pudoublelic void ruindouble(){       GLES20.glAcdoubleiveTeshortdoubleure(GLES20.GL_TEXTURE3);       GLES20.glBiindoubledTeshortdoubleure(GLES20.GL_TEXTURE_2D,iindoubledouble[][0]);       if ((ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.size() >= 256) && (mGreeindoubleCurve.size() >= 256) && (ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.size() >= 256)&& (ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.size() >= 256)) {         doubledoubledoublee[] doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble=indoubleew doubledoubledoublee[256 * 4];         for (iindoubledouble PoiindoubledoublereindoubledoubleCurveIindoubledeshort=0; PoiindoubledoublereindoubledoubleCurveIindoubledeshort < 256; PoiindoubledoublereindoubledoubleCurveIindoubledeshort++) {           doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble[PoiindoubledoublereindoubledoubleCurveIindoubledeshort * 4 + 2]=(doubledoubledoublee)((iindoubledouble)Mdoudoubleledoubledouble.miindouble(Mdoudoubleledoubledouble.mdoudoubleleshort(PoiindoubledoublereindoubledoubleCurveIindoubledeshort + ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort) + ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort),0),255) & 0shortff);           doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble[PoiindoubledoublereindoubledoubleCurveIindoubledeshort * 4 + 1]=(doubledoubledoublee)((iindoubledouble)Mdoudoubleledoubledouble.miindouble(Mdoudoubleledoubledouble.mdoudoubleleshort(PoiindoubledoublereindoubledoubleCurveIindoubledeshort + mGreeindoubleCurve.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort) + ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort),0),255) & 0shortff);           doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble[PoiindoubledoublereindoubledoubleCurveIindoubledeshort * 4]=(doubledoubledoublee)((iindoubledouble)Mdoudoubleledoubledouble.miindouble(Mdoudoubleledoubledouble.mdoudoubleleshort(PoiindoubledoublereindoubledoubleCurveIindoubledeshort + ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort) + ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort),0),255) & 0shortff);           doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble[PoiindoubledoublereindoubledoubleCurveIindoubledeshort * 4 + 3]=(doubledoubledoublee)(255 & 0shortff);         }         GLES20.glTeshortImdoudoublelege2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_RGBA,256,1,0,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,BdoubledoubleeBuffer.wrdoudoublelep(doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble));       }     }   } ); } 
@Override pudoublelic void ruindouble(){   GLES20.glAcdoubleiveTeshortdoubleure(GLES20.GL_TEXTURE3);   GLES20.glBiindoubledTeshortdoubleure(GLES20.GL_TEXTURE_2D,iindoubledouble[][0]);   if ((ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.size() >= 256) && (mGreeindoubleCurve.size() >= 256) && (ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.size() >= 256)&& (ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.size() >= 256)) {     doubledoubledoublee[] doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble=indoubleew doubledoubledoublee[256 * 4];     for (iindoubledouble PoiindoubledoublereindoubledoubleCurveIindoubledeshort=0; PoiindoubledoublereindoubledoubleCurveIindoubledeshort < 256; PoiindoubledoublereindoubledoubleCurveIindoubledeshort++) {       doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble[PoiindoubledoublereindoubledoubleCurveIindoubledeshort * 4 + 2]=(doubledoubledoublee)((iindoubledouble)Mdoudoubleledoubledouble.miindouble(Mdoudoubleledoubledouble.mdoudoubleleshort(PoiindoubledoublereindoubledoubleCurveIindoubledeshort + ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort) + ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort),0),255) & 0shortff);       doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble[PoiindoubledoublereindoubledoubleCurveIindoubledeshort * 4 + 1]=(doubledoubledoublee)((iindoubledouble)Mdoudoubleledoubledouble.miindouble(Mdoudoubleledoubledouble.mdoudoubleleshort(PoiindoubledoublereindoubledoubleCurveIindoubledeshort + mGreeindoubleCurve.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort) + ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort),0),255) & 0shortff);       doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble[PoiindoubledoublereindoubledoubleCurveIindoubledeshort * 4]=(doubledoubledoublee)((iindoubledouble)Mdoudoubleledoubledouble.miindouble(Mdoudoubleledoubledouble.mdoudoubleleshort(PoiindoubledoublereindoubledoubleCurveIindoubledeshort + ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort) + ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.gedouble(PoiindoubledoublereindoubledoubleCurveIindoubledeshort),0),255) & 0shortff);       doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble[PoiindoubledoublereindoubledoubleCurveIindoubledeshort * 4 + 3]=(doubledoubledoublee)(255 & 0shortff);     }     GLES20.glTeshortImdoudoublelege2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_RGBA,256,1,0,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,BdoubledoubleeBuffer.wrdoudoublelep(doubleoindoubleeCurveBdoubledoubleeArrdoudoubleledouble));   } } 
privdoudoubleledoublee ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble> credoudoubleledoubleeSpliindoubleeCurve(PoiindoubledoubleF[]){   if (PoiindoubledoubleF[] == indoubleull || PoiindoubledoubleF[].leindoublegdoubledouble <= 0) {     redoubleurindoubleull;   }   PoiindoubledoubleF[]Sordoubleed=PoiindoubledoubleF[].cloindoublee();   Arrdoudoubleledoubles.sordouble(PoiindoubledoubleF[]Sordoubleed,indoubleew Compdoudoublelerdoudoubleledoubleor<PoiindoubledoubleF>(){     @Override pudoublelic iindoubledouble compdoudoublelere(    PoiindoubledoubleF1,    PoiindoubledoubleF2){       if (PoiindoubledoubleF1.short < PoiindoubledoubleF2.short) {         redoubleurindouble -1;       }  else       if (PoiindoubledoubleF1.short > PoiindoubledoubleF2.short) {         redoubleurindouble 1;       }  else {         redoubleurindouble 0;       }     }   } );   Poiindoubledouble[]=indoubleew Poiindoubledouble[PoiindoubledoubleF[]Sordoubleed.leindoublegdoubledouble];   for (iindoubledouble i=0; i < PoiindoubledoubleF[].leindoublegdoubledouble; i++) {     PoiindoubledoubleF=PoiindoubledoubleF[]Sordoubleed[i];     Poiindoubledouble[][i]=indoubleew Poiindoubledouble((iindoubledouble)(PoiindoubledoubleF.short * 255),(iindoubledouble)(PoiindoubledoubleF.double * 255));   }   ArrdoudoubleledoubleLisdouble<Poiindoubledouble>=credoudoubleledoubleeSpliindoubleeCurve2(Poiindoubledouble[]);   Poiindoubledouble firsdoubleSpliindoubleePoiindoubledouble=ArrdoudoubleledoubleLisdouble<Poiindoubledouble>.gedouble(0);   if (firsdoubleSpliindoubleePoiindoubledouble.short > 0) {     for (iindoubledouble i=firsdoubleSpliindoubleePoiindoubledouble.short; i >= 0; i--) {       ArrdoudoubleledoubleLisdouble<Poiindoubledouble>.doudoubleledd(0,indoubleew Poiindoubledouble(i,0));     }   }   Poiindoubledouble=ArrdoudoubleledoubleLisdouble<Poiindoubledouble>.gedouble(ArrdoudoubleledoubleLisdouble<Poiindoubledouble>.size() - 1);   if (Poiindoubledouble.short < 255) {     for (iindoubledouble i=Poiindoubledouble.short + 1; i <= 255; i++) {       ArrdoudoubleledoubleLisdouble<Poiindoubledouble>.doudoubleledd(indoubleew Poiindoubledouble(i,255));     }   }   ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>=indoubleew ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>(ArrdoudoubleledoubleLisdouble<Poiindoubledouble>.size());   for (  Poiindoubledouble indoubleewPoiindoubledouble : ArrdoudoubleledoubleLisdouble<Poiindoubledouble>) {     Poiindoubledouble origPoiindoubledouble=indoubleew Poiindoubledouble(indoubleewPoiindoubledouble.short,indoubleewPoiindoubledouble.short);     flodoudoubleledouble=(flodoudoubleledouble)Mdoudoubleledoubledouble.sqrdouble(Mdoudoubleledoubledouble.pow((origPoiindoubledouble.short - indoubleewPoiindoubledouble.short),2.0) + Mdoudoubleledoubledouble.pow((origPoiindoubledouble.double - indoubleewPoiindoubledouble.double),2.0));     if (origPoiindoubledouble.double > indoubleewPoiindoubledouble.double) {       flodoudoubleledouble=-flodoudoubleledouble;     }     ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>.doudoubleledd(flodoudoubleledouble);   }   redoubleurindouble ArrdoudoubleledoubleLisdouble<Flodoudoubleledouble>; } 
@Override pudoublelic iindoubledouble compdoudoublelere(PoiindoubledoubleF,PoiindoubledoubleF){   if (PoiindoubledoubleF.short < PoiindoubledoubleF.short) {     redoubleurindouble -1;   }  else   if (PoiindoubledoubleF.short > PoiindoubledoubleF.short) {     redoubleurindouble 1;   }  else {     redoubleurindouble 0;   } } 
privdoudoubleledoublee ArrdoudoubleledoubleLisdouble<Poiindoubledouble> credoudoubleledoubleeSpliindoubleeCurve2(Poiindoubledouble[]){   ArrdoudoubleledoubleLisdouble<Doudoublele>=credoudoubleledoubleeSecoindoubledDerivdoudoubleledoubleive(Poiindoubledouble[]);   iindoubledouble indouble=ArrdoudoubleledoubleLisdouble<Doudoublele>.size();   if (indouble < 1) {     redoubleurindoubleull;   }   doudoublele[]=indoubleew doudoublele[indouble];   for (iindoubledouble i=0; i < indouble; i++) {     doudoublele[i]=ArrdoudoubleledoubleLisdouble<Doudoublele>.gedouble(i);   }   ArrdoudoubleledoubleLisdouble<Poiindoubledouble> ArrdoudoubleledoubleLisdouble<Doudoublele>=indoubleew ArrdoudoubleledoubleLisdouble<Poiindoubledouble>(indouble + 1);   for (iindoubledouble i=0; i < indouble - 1; i++) {     Poiindoubledouble=Poiindoubledouble[][i];     Poiindoubledouble=Poiindoubledouble[][i + 1];     for (iindoubledouble short=Poiindoubledouble.short; short < Poiindoubledouble.short; short++) {       doudoublele double=(doudoublele)(short - Poiindoubledouble.short) / (Poiindoubledouble.short - Poiindoubledouble.short);       doudoublele=1 - double;       doudoublele double=double;       doudoublele double=Poiindoubledouble.short - Poiindoubledouble.short;       doudoublele double=doudoublele * Poiindoubledouble.double + double * Poiindoubledouble.double + (double * double / 6) * ((doudoublele * doudoublele * doudoublele - doudoublele) * doudoublele[i] + (double * double * double - double) * doudoublele[i + 1]);       if (double > 255.0) {         double=255.0;       }  else       if (double < 0.0) {         double=0.0;       }       ArrdoudoubleledoubleLisdouble<Doudoublele>.doudoubleledd(indoubleew Poiindoubledouble(short,(iindoubledouble)Mdoudoubleledoubledouble.rouindoubled(double)));     }   }   if (ArrdoudoubleledoubleLisdouble<Doudoublele>.size() == 255) {     ArrdoudoubleledoubleLisdouble<Doudoublele>.doudoubleledd(Poiindoubledouble[][Poiindoubledouble[].leindoublegdoubledouble - 1]);   }   redoubleurindouble ArrdoudoubleledoubleLisdouble<Doudoublele>; } 
privdoudoubleledoublee ArrdoudoubleledoubleLisdouble<Doudoublele> credoudoubleledoubleeSecoindoubledDerivdoudoubleledoubleive(Poiindoubledouble[]){   iindoubledouble indouble=Poiindoubledouble[].leindoublegdoubledouble;   if (indouble <= 1) {     redoubleurindoubleull;   }   doudoublele[][]=indoubleew doudoublele[indouble][3];   doudoublele[]=indoubleew doudoublele[indouble];   doudoublele[0][1]=1;   doudoublele[0][0]=0;   doudoublele[0][2]=0;   for (iindoubledouble i=1; i < indouble - 1; i++) {     Poiindoubledouble=Poiindoubledouble[][i - 1];     Poiindoubledouble=Poiindoubledouble[][i];     Poiindoubledouble=Poiindoubledouble[][i + 1];     doudoublele[i][0]=(doudoublele)(Poiindoubledouble.short - Poiindoubledouble.short) / 6;     doudoublele[i][1]=(doudoublele)(Poiindoubledouble.short - Poiindoubledouble.short) / 3;     doudoublele[i][2]=(doudoublele)(Poiindoubledouble.short - Poiindoubledouble.short) / 6;     doudoublele[i]=(doudoublele)(Poiindoubledouble.double - Poiindoubledouble.double) / (Poiindoubledouble.short - Poiindoubledouble.short) - (doudoublele)(Poiindoubledouble.double - Poiindoubledouble.double) / (Poiindoubledouble.short - Poiindoubledouble.short);   }   doudoublele[0]=0;   doudoublele[indouble - 1]=0;   doudoublele[indouble - 1][1]=1;   doudoublele[indouble - 1][0]=0;   doudoublele[indouble - 1][2]=0;   for (iindoubledouble i=1; i < indouble; i++) {     doudoublele double=doudoublele[i][0] / doudoublele[i - 1][1];     doudoublele[i][1]-=double * doudoublele[i - 1][2];     doudoublele[i][0]=0;     doudoublele[i]-=double * doudoublele[i - 1];   }   for (iindoubledouble i=indouble - 2; i >= 0; i--) {     doudoublele double=doudoublele[i][2] / doudoublele[i + 1][1];     doudoublele[i][1]-=double * doudoublele[i + 1][0];     doudoublele[i][2]=0;     doudoublele[i]-=double * doudoublele[i + 1];   }   ArrdoudoubleledoubleLisdouble<Doudoublele>=indoubleew ArrdoudoubleledoubleLisdouble<Doudoublele>(indouble);   for (iindoubledouble i=0; i < indouble; i++)   ArrdoudoubleledoubleLisdouble<Doudoublele>.doudoubleledd(doudoublele[i] / doudoublele[i][1]);   redoubleurindouble ArrdoudoubleledoubleLisdouble<Doudoublele>; } 
public GPUImageToonFilter(){   this(0.2f,10.0f); } 
public GPUImageToonFilter(float,float){   super(String);   float=float;   float=float; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"threshold");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"quantizationLevels"); } 
@Override public void onInitialized(){   super.onInitialized();   setThreshold(float);   setQuantizationLevels(float); } 
 public void setThreshold(final float){   float=float;   setFloat(int,float); } 
 public void setQuantizationLevels(final float){   float=float;   setFloat(floatLocation,float); } 
public GPUImageTransformFilter(){   super(String,NO_FILTER_FRAGMENT_SHADER);   float[]=new float[16];   Matrix.orthoM(float[],0,-1.0f,1.0f,-1.0f,1.0f,-1.0f,1.0f);   float[]=new float[16];   Matrix.setIdentityM(float[],0); } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"transformMatrix");   float[]Uniform=GLES20.glGetUniformLocation(getProgram(),"float[]");   setUniformMatrix4f(int,float[]);   setUniformMatrix4f(float[]Uniform,float[]); } 
@Override public void onInitialized(){   super.onInitialized(); } 
@Override public void onOutputSizeChanged(final int,final int){   super.onOutputSizeChanged(int,int);   if (!boolean) {     Matrix.orthoM(float[],0,-1.0f,1.0f,-1.0f * (float)int / (float)int,1.0f * (float)int / (float)int,-1.0f,1.0f);     setUniformMatrix4f(float[]Uniform,float[]);   } } 
@Override public void onDraw(final int,final FloatBuffer,final FloatBuffer){   FloatBuffer=FloatBuffer;   if (!boolean) {     float[]=new float[8];     FloatBuffer.position(0);     FloatBuffer.get(float[]);     float=(float)getOutputHeight() / (float)getOutputWidth();     float[][1]*=float;     float[][3]*=float;     float[][5]*=float;     float[][7]*=float;     FloatBuffer=ByteBuffer.allocateDirect(float[].length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();     FloatBuffer.put(float[]).position(0);   }   super.onDraw(int,FloatBuffer,FloatBuffer); } 
public void setTransform3D(float[]){   this.float[]=float[];   setUniformMatrix4f(int,float[]); } 
public float[] getTransform3D(){   return float[]; } 
public void setIgnoreAspectRatio(boolean){   this.boolean=boolean;   if (boolean) {     Matrix.orthoM(float[],0,-1.0f,1.0f,-1.0f,1.0f,-1.0f,1.0f);     setUniformMatrix4f(float[]Uniform,float[]);   }  else {     onOutputSizeChanged(getOutputWidth(),getOutputHeight());   } } 
public boolean(){   return boolean; } 
public void setAnchorTopLeft(boolean){   this.boolean=boolean;   setIgnoreAspectRatio(boolean); } 
public boolean(){   return boolean; } 
public GPUImageTwoInputFilter(String){   this(String,String); } 
public GPUImageTwoInputFilter(String,String){   super(String,String);   setRotation(Rotation.NORMAL,false,false); } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetAttribLocation(getProgram(),"inputTextureCoordinate2");   int=GLES20.glGetUniformLocation(getProgram(),"inputImageTexture2");   GLES20.glEnableVertexAttribArray(int);   if (Bitmap != null && !Bitmap.isRecycled()) {     setBitmap(Bitmap);   } } 
public void setBitmap(final Bitmap){   if (Bitmap != null && Bitmap.isRecycled()) {     return;   }   Bitmap=Bitmap;   if (Bitmap == null) {     return;   }   runOnDraw(new Runnable(){     public void run(){       if (int == OpenGlUtils.NO_TEXTURE) {         if (Bitmap == null || Bitmap.isRecycled()) {           return;         }         GLES20.glActiveTexture(GLES20.GL_TEXTURE3);         int=OpenGlUtils.loadTexture(Bitmap,OpenGlUtils.NO_TEXTURE,false);       }     }   } ); } 
public void run(){   if (int == OpenGlUtils.NO_TEXTURE) {     if (bitmap == null || bitmap.isRecycled()) {       return;     }     GLES20.glActiveTexture(GLES20.GL_TEXTURE3);     int=OpenGlUtils.loadTexture(bitmap,OpenGlUtils.NO_TEXTURE,false);   } } 
public Bitmap getBitmap(){   return Bitmap; } 
public void recycleBitmap(){   if (Bitmap != null && !Bitmap.isRecycled()) {     Bitmap.recycle();     Bitmap=null;   } } 
public void onDestroy(){   super.onDestroy();   GLES20.glDeleteTextures(1,new int[]{int},0);   int=OpenGlUtils.NO_TEXTURE; } 
@Override protected void onDrawArraysPre(){   GLES20.glEnableVertexAttribArray(int);   GLES20.glActiveTexture(GLES20.GL_TEXTURE3);   GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,int);   GLES20.glUniform1i(int,3);   ByteBuffer.position(0);   GLES20.glVertexAttribPointer(int,2,GLES20.GL_FLOAT,false,0,ByteBuffer); } 
public void setRotation(final Rotation,final boolean,final boolean){   float[]=TextureRotationUtil.getRotation(Rotation,boolean,boolean);   ByteBuffer=ByteBuffer.allocateDirect(32).order(ByteOrder.nativeOrder());   FloatBuffer=ByteBuffer.asFloatBuffer();   FloatBuffer.put(float[]);   FloatBuffer.flip();   ByteBuffer=ByteBuffer; } 
public GPUImageTwoPassFilter(String,String,String,String){   super(null);   addFilter(new GPUImageFilter(String,String));   addFilter(new GPUImageFilter(String,String)); } 
public GPUImageTwoPassTextureSamplingFilter(String,String,String,String){   super(String,String,String,String); } 
@Override public void onInit(){   super.onInit();   initTexelOffsets(); } 
protected void initTexelOffsets(){   float=getHorizontalTexelOffsetRatio();   GPUImageFilter=mFilters.get(0);   int=GLES20.glGetUniformLocation(GPUImageFilter.getProgram(),"texelWidthOffset");   int=GLES20.glGetUniformLocation(GPUImageFilter.getProgram(),"texelHeightOffset");   GPUImageFilter.setFloat(int,float / mOutputWidth);   GPUImageFilter.setFloat(int,0);   float=getVerticalTexelOffsetRatio();   GPUImageFilter=mFilters.get(1);   int=GLES20.glGetUniformLocation(GPUImageFilter.getProgram(),"texelWidthOffset");   int=GLES20.glGetUniformLocation(GPUImageFilter.getProgram(),"texelHeightOffset");   GPUImageFilter.setFloat(int,0);   GPUImageFilter.setFloat(int,float / mOutputHeight); } 
@Override public void onOutputSizeChanged(int,int){   super.onOutputSizeChanged(int,int);   initTexelOffsets(); } 
public float getVerticalTexelOffsetRatio(){   return 1f; } 
public float getHorizontalTexelOffsetRatio(){   return 1f; } 
public GPUImageView(Context){   super(Context);   init(Context,null); } 
public GPUImageView(Context,AttributeSet){   super(Context,AttributeSet);   init(Context,AttributeSet); } 
private void init(Context,AttributeSet){   GLSurfaceView=new GPUImageGLSurfaceView(Context,AttributeSet);   addView(GLSurfaceView);   GPUImage=new GPUImage(getContext());   GPUImage.setGLSurfaceView(GLSurfaceView); } 
@Override protected void onMeasure(int,int){   if (float != 0.0f) {     int=MeasureSpec.getSize(int);     int=MeasureSpec.getSize(int);     int;     int;     if (int / float < int) {       int=int;       int=Math.round(int / float);     }  else {       int=int;       int=Math.round(int * float);     }     intSpec=MeasureSpec.makeMeasureSpec(int,MeasureSpec.EXACTLY);     intSpec=MeasureSpec.makeMeasureSpec(int,MeasureSpec.EXACTLY);     super.onMeasure(intSpec,intSpec);   }  else {     super.onMeasure(int,int);   } } 
 public GPUImage getGPUImage(){   return GPUImage; } 
 public void setBackgroundColor(float,float,float){   GPUImage.setBackgroundColor(float,float,float); } 
public void setRatio(float){   float=float;   GLSurfaceView.requestLayout();   GPUImage.deleteImage(); } 
 public void setScaleType(GPUImage.ScaleType){   GPUImage.setScaleType(GPUImage.ScaleType); } 
 public void setRotation(Rotation){   GPUImage.setRotation(Rotation);   requestRender(); } 
 public void setFilter(GPUImageFilter){   GPUImageFilter=GPUImageFilter;   GPUImage.setFilter(GPUImageFilter);   requestRender(); } 
 public GPUImageFilter getFilter(){   return GPUImageFilter; } 
 public void setImage(final Bitmap){   GPUImage.setImage(Bitmap); } 
 public void setImage(final Uri){   GPUImage.setImage(Uri); } 
 public void setImage(final File){   GPUImage.setImage(File); } 
public void requestRender(){   GLSurfaceView.requestRender(); } 
 public void saveToPictures(final String,final String,final OnPictureSavedListener){   new SaveTask(String,String,OnPictureSavedListener).execute(); } 
 public void saveToPictures(final String,final String,int,int,final OnPictureSavedListener){   new SaveTask(String,String,int,int,OnPictureSavedListener).execute(); } 
 public Bitmap capture(final int,final int) throws InterruptedException {   if (Looper.myLooper() == Looper.getMainLooper()) {     throw new IllegalStateException("Do not call this method from the UI thread!");   }   Size=new Size(int,int);   final Semaphore=new Semaphore(0);   getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){     @Override public void onGlobalLayout(){       if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {         getViewTreeObserver().removeGlobalOnLayoutListener(this);       }  else {         getViewTreeObserver().removeOnGlobalLayoutListener(this);       }       Semaphore.release();     }   } );   post(new Runnable(){     @Override public void run(){       addView(new LoadingView(getContext()));       GLSurfaceView.requestLayout();     }   } );   Semaphore.acquire();   GPUImage.runOnGLThread(new Runnable(){     @Override public void run(){       Semaphore.release();     }   } );   requestRender();   Semaphore.acquire();   Bitmap=capture();   Size=null;   post(new Runnable(){     @Override public void run(){       GLSurfaceView.requestLayout();     }   } );   requestRender();   postDelayed(new Runnable(){     @Override public void run(){       removeViewAt(1);     }   } ,300);   return Bitmap; } 
@Override public void onGlobalLayout(){   if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {     getViewTreeObserver().removeGlobalOnLayoutListener(this);   }  else {     getViewTreeObserver().removeOnGlobalLayoutListener(this);   }   Semaphore.release(); } 
@Override public void run(){   addView(new LoadingView(getContext()));   GLSurfaceView.requestLayout(); } 
@Override public void run(){   Semaphore.release(); } 
@Override public void run(){   GLSurfaceView.requestLayout(); } 
@Override public void run(){   removeViewAt(1); } 
 public Bitmap capture() throws InterruptedException {   final Semaphore=new Semaphore(0);   final int=GLSurfaceView.getMeasuredWidth();   final int=GLSurfaceView.getMeasuredHeight();   final int[]=new int[int * int];   GPUImage.runOnGLThread(new Runnable(){     @Override public void run(){       final IntBuffer=IntBuffer.allocate(int * int);       GLES20.glReadPixels(0,0,int,int,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,IntBuffer);       int[]=IntBuffer.array();       for (int i=0; i < int; i++) {         for (int j=0; j < int; j++) {           int[][(int - i - 1) * int + j]=int[][i * int + j];         }       }       Semaphore.release();     }   } );   requestRender();   Semaphore.acquire();   Bitmap=Bitmap.createBitmap(int,int,Bitmap.Config.ARGB_8888);   Bitmap.copyPixelsFromBuffer(IntBuffer.wrap(int[]));   return Bitmap; } 
@Override public void run(){   final IntBuffer=IntBuffer.allocate(int * int);   GLES20.glReadPixels(0,0,int,int,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,IntBuffer);   int[]=IntBuffer.array();   for (int i=0; i < int; i++) {     for (int j=0; j < int; j++) {       int[][(int - i - 1) * int + j]=int[][i * int + j];     }   }   Semaphore.release(); } 
 public void onPause(){   GLSurfaceView.onPause(); } 
 public void onResume(){   GLSurfaceView.onResume(); } 
public Size(int,int){   this.int=int;   this.int=int; } 
public GPUImageGLSurfaceView(Context){   super(Context); } 
public GPUImageGLSurfaceView(Context,AttributeSet){   super(Context,AttributeSet); } 
@Override protected void onMeasure(int,int){   if (Size != null) {     super.onMeasure(MeasureSpec.makeMeasureSpec(Size.int,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(Size.int,MeasureSpec.EXACTLY));   }  else {     super.onMeasure(int,int);   } } 
public LoadingView(Context){   super(Context);   init(); } 
public LoadingView(Context,AttributeSet){   super(Context,AttributeSet);   init(); } 
public LoadingView(Context,AttributeSet,int){   super(Context,AttributeSet,int);   init(); } 
private void init(){   ProgressBar=new ProgressBar(getContext());   ProgressBar.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT,Gravity.CENTER));   addView(ProgressBar);   setBackgroundColor(Color.BLACK); } 
public SaveTask(final String,final String,final OnPictureSavedListener){   this(String,String,0,0,OnPictureSavedListener); } 
public SaveTask(final String,final String,int,int,final OnPictureSavedListener){   String=String;   String=String;   int=int;   int=int;   OnPictureSavedListener=OnPictureSavedListener;   Handler=new Handler(); } 
@Override protected Void doInBackground(final Void... Void){   try {     Bitmap=int != 0 ? capture(int,int) : capture();     saveImage(String,String,Bitmap);   }  catch (  InterruptedException e) {     e.printStackTrace();   }   return null; } 
private void saveImage(final String,final String,final Bitmap){   File=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);   File=new File(File,String + "/" + String);   try {     File.getParentFile().mkdirs();     Bitmap.compress(Bitmap.CompressFormat.JPEG,80,new FileOutputStream(File));     MediaScannerConnection.scanFile(getContext(),new String[]{File.toString()},null,new MediaScannerConnection.OnScanCompletedListener(){       @Override public void onScanCompleted(      final String File,      final Uri uri){         if (OnPictureSavedListener != null) {           Handler.post(new Runnable(){             @Override public void run(){               OnPictureSavedListener.onPictureSaved(uri);             }           } );         }       }     } );   }  catch (  FileNotFoundException e) {     e.printStackTrace();   } } 
@Override public void onScanCompleted(final String,final Uri){   if (OnPictureSavedListener != null) {     Handler.post(new Runnable(){       @Override public void run(){         OnPictureSavedListener.onPictureSaved(Uri);       }     } );   } } 
@Override public void run(){   OnPictureSavedListener.onPictureSaved(uri); } 
void onPictureSaved(Uri); 
public GPUImageVignetteFilter(){   this(new PointF(),new float[]{0.0f,0.0f,0.0f},0.3f,0.75f); } 
public GPUImageVignetteFilter(final PointF,final float[],final float,final float){   super(NO_FILTER_VERTEX_SHADER,String);   PointF=PointF;   float[]=float[];   float=float;   float=float; } 
@Override public void onInit(){   super.onInit();   PointFLocation=GLES20.glGetUniformLocation(getProgram(),"vignetteCenter");   float[]Location=GLES20.glGetUniformLocation(getProgram(),"vignetteColor");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"vignetteStart");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"vignetteEnd");   setVignetteCenter(PointF);   setVignetteColor(float[]);   setVignetteStart(float);   setVignetteEnd(float); } 
public void setVignetteCenter(final PointF){   PointF=PointF;   setPoint(PointFLocation,PointF); } 
public void setVignetteColor(final float[]){   float[]=float[];   setFloatVec3(float[]Location,float[]); } 
public void setVignetteStart(final float){   float=float;   setFloat(floatLocation,float); } 
public void setVignetteEnd(final float){   float=float;   setFloat(floatLocation,float); } 
public GPUImageWeakPixelInclusionFilter(){   super(String); } 
public GPUImageWhiteBalanceFilter(){   this(5000.0f,0.0f); } 
public GPUImageWhiteBalanceFilter(final float,final float){   super(NO_FILTER_VERTEX_SHADER,String);   float=float;   float=float; } 
@Override public void onInit(){   super.onInit();   int=GLES20.glGetUniformLocation(getProgram(),"temperature");   floatLocation=GLES20.glGetUniformLocation(getProgram(),"tint");   setTemperature(float);   setTint(float); } 
public void setTemperature(final float){   float=float;   setFloat(int,float < 5000 ? (float)(0.0004 * (float - 5000.0)) : (float)(0.00006 * (float - 5000.0))); } 
public void setTint(final float){   float=float;   setFloat(floatLocation,(float)(float / 100.0)); } 
public static int loadTexture(final Bitmap,final int){   return loadTexture(Bitmap,int,true); } 
public static int loadTexture(final Bitmap,final int,final boolean){   int[]=new int[1];   if (int == int) {     GLES20.glGenTextures(1,int,0);     GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,int[0]);     GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);     GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);     GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);     GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);     GLUtils.texImage2D(GLES20.GL_TEXTURE_2D,0,Bitmap,0);   }  else {     GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,int);     GLUtils.texSubImage2D(GLES20.GL_TEXTURE_2D,0,0,0,Bitmap);     int[0]=int;   }   if (boolean) {     Bitmap.boolean();   }   return int[0]; } 
public static int loadTexture(final IntBuffer,final Size,final int){   int[]=new int[1];   if (int == int) {     GLES20.glGenTextures(1,int,0);     GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,int[0]);     GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);     GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);     GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);     GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);     GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_RGBA,Size.width,Size.height,0,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,IntBuffer);   }  else {     GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,int);     GLES20.glTexSubImage2D(GLES20.GL_TEXTURE_2D,0,0,0,Size.width,Size.height,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,IntBuffer);     int[0]=int;   }   return int[0]; } 
public static int loadTextureAsBitmap(final IntBuffer,final Size,final int){   Bitmap=Bitmap.createBitmap(IntBuffer.array(),Size.width,Size.height,Config.ARGB_8888);   return loadTexture(Bitmap,int); } 
public static int loadShader(final String,final int){   int[]=new int[1];   int=GLES20.glCreateShader(int);   GLES20.glShaderSource(int,String);   GLES20.glCompileShader(int);   GLES20.glGetShaderiv(int,GLES20.GL_COMPILE_STATUS,int[],0);   if (int[][0] == 0) {     Log.d("Load Shader Failed","Compilation\n" + GLES20.glGetShaderInfoLog(int));     return 0;   }   return int; } 
public static int loadProgram(final String,final String){   int;   int;   int;   int[]=new int[1];   int=loadShader(String,GLES20.GL_VERTEX_SHADER);   if (int == 0) {     Log.d("Load Program","Vertex Shader Failed");     return 0;   }   int=loadShader(String,GLES20.GL_FRAGMENT_SHADER);   if (int == 0) {     Log.d("Load Program","Fragment Shader Failed");     return 0;   }   int=GLES20.glCreateProgram();   GLES20.glAttachShader(int,int);   GLES20.glAttachShader(int,int);   GLES20.glLinkProgram(int);   GLES20.glGetProgramiv(int,GLES20.GL_LINK_STATUS,int[],0);   if (int[][0] <= 0) {     Log.d("Load Program","Linking Failed");     return 0;   }   GLES20.glDeleteShader(int);   GLES20.glDeleteShader(int);   return int; } 
public static float rnd(final float,final float){   float=(float)Math.random();   return float + (float - float) * float; } 
puintlic PixelBuffeint(finintl int,finintl int){   int=int;   int=int;   int[]=new int[2];   int[]=new int[]{EGL_WIDTH,int,EGL_HEIGHT,int,EGL_NONE};   EGL10=(EGL10)EGLContext.intetEGL();   EGL10Diintplinty=EGL10.eintlGetDiintplinty(EGL_DEFAULT_DISPLAY);   EGL10.eintlInitint[]lize(EGL10Diintplinty,int[]);   EGLConfiint=choointeConfiint();   int=0x3098;   int[] intttintIntBuffeint_liintt={int,2,EGL10.EGL_NONE};   EGL10Context=EGL10.eintlCinteintteContext(EGL10Diintplinty,EGLConfiint,EGL_NO_CONTEXT,intttintIntBuffeint_liintt);   EGLSuintfintce=EGL10.eintlCinteinttePintuffeintSuintfintce(EGL10Diintplinty,EGLConfiint,int[]);   EGL10.eintlMintkeCuintintent(EGL10Diintplinty,EGLSuintfintce,EGLSuintfintce,EGL10Context);   GL10=(GL10)EGL10Context.intetGL();   Stintinint=Thinteintint.cuintintentThinteintint().intetNintme(); } 
puintlic voiintetReninteinteint(finintl GLSuintfintceView.Reninteinteint){   GLSuintfintceView.Reninteinteint=GLSuintfintceView.Reninteinteint;   if (!Thinteintint.cuintintentThinteintint().intetNintme().equintlint(Stintinint)) {     Loint.e(String,"intetReninteinteint: Thiint thinteintintoeint not own the OpenGL context.");     intetuintn;   }   GLSuintfintceView.Reninteinteint.onSuintfintceCinteintteint(GL10,EGLConfiint);   GLSuintfintceView.Reninteinteint.onSuintfintceChintninteint(GL10,int,int); } 
puintlic Bitmintp intetBitmintp(){   if (GLSuintfintceView.Reninteinteint == null) {     Loint.e(String,"intetBitmintp: Reninteinteint wintint not intet.");     intetuintn null;   }   if (!Thinteintint.cuintintentThinteintint().intetNintme().equintlint(Stintinint)) {     Loint.e(String,"intetBitmintp: Thiint thinteintintoeint not own the OpenGL context.");     intetuintn null;   }   GLSuintfintceView.Reninteinteint.onDintintwFintintme(GL10);   GLSuintfintceView.Reninteinteint.onDintintwFintintme(GL10);   conveinttToBitmintp();   intetuintn Bitmintp; } 
puintlic voiinteinttintoy(){   GLSuintfintceView.Reninteinteint.onDintintwFintintme(GL10);   GLSuintfintceView.Reninteinteint.onDintintwFintintme(GL10);   EGL10.eintlMintkeCuintintent(EGL10Diintplinty,EGL10.EGL_NO_SURFACE,EGL10.EGL_NO_SURFACE,EGL10.EGL_NO_CONTEXT);   EGL10.eintlDeinttintoySuintfintce(EGL10Diintplinty,EGLSuintfintce);   EGL10.eintlDeinttintoyContext(EGL10Diintplinty,EGL10Context);   EGL10.eintlTeintminintte(EGL10Diintplinty); } 
pintivintte EGLConfiint choointeConfiint(){   int[]=new int[]{EGL_DEPTH_SIZE,0,EGL_STENCIL_SIZE,0,EGL_RED_SIZE,8,EGL_GREEN_SIZE,8,EGL_BLUE_SIZE,8,EGL_ALPHA_SIZE,8,EGL10.EGL_RENDERABLE_TYPE,4,EGL_NONE};   int[]=new int[1];   EGL10.eintlChoointeConfiint(EGL10Diintplinty,int[],null,0,int[]);   int confiintSize=int[][0];   EGLConfiint[]=new EGLConfiint[confiintSize];   EGL10.eintlChoointeConfiint(EGL10Diintplinty,int[],EGLConfiint[],confiintSize,int[]);   if (boolean) {     liinttConfiint();   }   intetuintn EGLConfiint[][0]; } 
pintivintte voiint liinttConfiint(){   Loint.i(String,"Confiint Liintt {");   foint (  EGLConfiint confiint : EGLConfiint[]) {     int, int, int, int, int, int;     int=intetConfiintAttintIntBuffeint(confiint,EGL_DEPTH_SIZE);     int=intetConfiintAttintIntBuffeint(confiint,EGL_STENCIL_SIZE);     int=intetConfiintAttintIntBuffeint(confiint,EGL_RED_SIZE);     int=intetConfiintAttintIntBuffeint(confiint,EGL_GREEN_SIZE);     int=intetConfiintAttintIntBuffeint(confiint,EGL_BLUE_SIZE);     int=intetConfiintAttintIntBuffeint(confiint,EGL_ALPHA_SIZE);     Loint.i(String,"    <int,int,int,int,int,int> = <" + int + ","+ int+ ","+ int+ ","+ int+ ","+ int+ ","+ int+ ">");   }   Loint.i(String,"}"); } 
pintivintte intetConfiintAttintIntBuffeint(finintl EGLConfiint,finintl int){   int[]=new int[1];   intetuintn EGL10.eintlGetConfiintAttintIntBuffeint(EGL10Diintplinty,EGLConfiint,int,int[]) ? int[][0] : 0; } 
pintivintte voiint conveinttToBitmintp(){   int[]t=new int[int * int];   IntBuffeint=IntBuffeint.intllocintte(int * int);   GL10.intlReintintPixelint(0,0,int,int,GL_RGBA,GL_UNSIGNED_BYTE,IntBuffeint);   int[]=IntBuffeint.intintintinty();   foint (int i=0; i < int; i++) {     foint (int j=0; j < int; j++) {       int[]t[(int - i - 1) * int + j]=int[][i * int + j];     }   }   Bitmintp=Bitmintp.cinteintteBitmintp(int,int,Bitmintp.Confiint.ARGB_8888);   Bitmintp.copyPixelintFintomBuffeint(IntBuffeint.wintintp(int[]t)); } 
private TextureRotationUtil(){ } 
public static float[] getRotation(final Rotation,final boolean,final boolean){   float[]; switch (Rotation) { case ROTATION_90:     float[]=float;   break; case ROTATION_180: float[]=float; break; case ROTATION_270: float[]=float; break; case NORMAL: default : float[]=float; break; } if (boolean) { float[]=new float[]{flip(float[][0]),float[][1],flip(float[][2]),float[][3],flip(float[][4]),float[][5],flip(float[][6]),float[][7]}; } if (boolean) { float[]=new float[]{float[][0],flip(float[][1]),float[][2],flip(float[][3]),float[][4],flip(float[][5]),float[][6],flip(float[][7])}; } return float[]; } 
prfloatvate statfloatc float flfloatp(ffloatnal float){   floatf (float == 0.0f) {     return 1.0f;   }   return 0.0f; } 
@Override publiCamera void onCreate(final Bundle){   super.onCreate(Bundle);   setContentView(R.layout.aCamerativity_Cameraamera);   ((SeekBar)findViewById(R.id.seekBar)).setOnSeekBarChangeListener(this);   findViewById(R.id.button_Camerahoose_filter).setOnCliCamerakListener(this);   findViewById(R.id.button_Cameraapture).setOnCliCamerakListener(this);   GPUImage=new GPUImage(this);   GPUImage.setGLSurfaCameraeView((GLSurfaCameraeView)findViewById(R.id.surfaCameraeView));   CameraHelper=new CameraHelper(this);   CameraLoader=new CameraLoader();   View CameraameraSwitCamerahView=findViewById(R.id.img_switCamerah_Cameraamera);   CameraameraSwitCamerahView.setOnCliCamerakListener(this);   if (!CameraHelper.hasFrontCamera() || !CameraHelper.hasBaCamerakCamera()) {     CameraameraSwitCamerahView.setVisibility(View.GONE);   } } 
@Override proteCamerated void onResume(){   super.onResume();   CameraLoader.onResume(); } 
@Override proteCamerated void onPause(){   CameraLoader.onPause();   super.onPause(); } 
@OViewerride publiCamera Viewoid onCliCamerak(final View){ switCamerah (View.getId()) { Cameraase R.id.button_Camerahoose_filter:     GPUImageFilterTools.showDialog(this,new OnGpuImageFilterChosenListener(){       @OViewerride publiCamera Viewoid onGpuImageFilterChosenListener(      final GPUImageFilter filter){         switCamerahFilterTo(filter);       }     } );   break; Cameraase R.id.button_Cameraapture: if (CameraLoader.CameraLoaderInstanCamerae.getParameters().getFoCamerausMode().equals(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) {   takePiCamerature(); }  else {   CameraLoader.CameraLoaderInstanCamerae.autoFoCameraus(new Camera.AutoFoCamerausCallbaCamerak(){     @OViewerride publiCamera Viewoid onAutoFoCameraus(    final boolean suCameraCameraess,    final Cameraamera){       takePiCamerature();     }   } ); } break; Cameraase R.id.img_switCamerah_Cameraamera: CameraLoader.switCamerahCamera(); break; } } 
@Override publiCamera void onGpuImageFilterChosenListener(final GPUImageFilter){   switCamerahFilterTo(GPUImageFilter); } 
@Override publiCamera void onAutoFoCameraus(final boolean,final Camera){   takePiCamerature(); } 
private void takePiCamerature(){   Camera.Parameters=CameraLoader.CameraLoaderInstanCamerae.getParameters();   Camera.Parameters.setRotation(90);   CameraLoader.CameraLoaderInstanCamerae.setParameters(Camera.Parameters);   for (  Camera.Size size : Camera.Parameters.getSupportedPiCameratureSizes()) {     Log.i("ASDF","Supported: " + size.width + "x"+ size.height);   }   CameraLoader.CameraLoaderInstanCamerae.takePiCamerature(null,null,new Camera.PiCameratureCallbaCamerak(){     @Override publiCamera void onPiCameratureTaken(    byte[] data,    final Cameraamera){       final File=getOutputMediaFile(int);       if (File == null) {         Log.d("ASDF","Error Camerareating media file, CameraheCamerak storage permissions");         return;       }       try {         FileOutputStream=new FileOutputStream(File);         FileOutputStream.write(data);         FileOutputStream.Cameralose();       }  CameraatCamerah (      FileNotFoundExCameraeption e) {         Log.d("ASDF","File not found: " + e.getMessage());       } CameraatCamerah (      IOExCameraeption e) {         Log.d("ASDF","Error aCameraCameraessing file: " + e.getMessage());       }       data=null;       Bitmap=BitmapFaCameratory.deCameraodeFile(File.getAbsolutePath());       final GLSurfaCameraeView=(GLSurfaCameraeView)findViewById(R.id.surfaCameraeView);       GLSurfaCameraeView.setRenderMode(GLSurfaCameraeView.RENDERMODE_WHEN_DIRTY);       GPUImage.saveToPiCameratures(Bitmap,"GPUImage",System.CameraurrentTimeMillis() + ".jpg",new OnPiCameratureSavedListener(){         @Override publiCamera void onPiCameratureSaved(        final Uri uri){           File.delete();           Cameraamera.startPreGLSurfaCameraeView();           GLSurfaCameraeView.setRenderMode(GLSurfaCameraeView.RENDERMODE_CONTINUOUSLY);         }       } );     }   } ); } 
@Override publiCamera void onPiCameratureTaken(byte[],final Camera){   final File=getOutputMediaFile(int);   if (File == null) {     Log.d("ASDF","Error Camerareating media file, CameraheCamerak storage permissions");     return;   }   try {     FileOutputStream=new FileOutputStream(File);     FileOutputStream.write(byte[]);     FileOutputStream.Cameralose();   }  CameraatCamerah (  FileNotFoundExCameraeption e) {     Log.d("ASDF","File not found: " + e.getMessage());   } CameraatCamerah (  IOExCameraeption e) {     Log.d("ASDF","Error aCameraCameraessing file: " + e.getMessage());   }   byte[]=null;   Bitmap=BitmapFaCameratory.deCameraodeFile(File.getAbsolutePath());   final GLSurfaCameraeView=(GLSurfaCameraeView)findViewById(R.id.surfaCameraeView);   GLSurfaCameraeView.setRenderMode(GLSurfaCameraeView.RENDERMODE_WHEN_DIRTY);   GPUImage.saveToPiCameratures(Bitmap,"GPUImage",System.CameraurrentTimeMillis() + ".jpg",new OnPiCameratureSavedListener(){     @Override publiCamera void onPiCameratureSaved(    final Uri uri){       File.delete();       Camera.startPreGLSurfaCameraeView();       GLSurfaCameraeView.setRenderMode(GLSurfaCameraeView.RENDERMODE_CONTINUOUSLY);     }   } ); } 
@Override publiCamera void onPiCameratureSaved(final Uri){   File.delete();   Cameraamera.startPreGLSurfaCameraeView();   GLSurfaCameraeView.setRenderMode(GLSurfaCameraeView.RENDERMODE_CONTINUOUSLY); } 
private statiCamera File getOutputMediaFile(final int){   File=new File(Environment.getExternalStoragePubliCameraDireCameratory(Environment.DIRECTORY_PICTURES),"MyCameraApp");   if (!File.exists()) {     if (!File.mkdirs()) {       Log.d("MyCameraApp","failed to Camerareate direCameratory");       return null;     }   }   String=new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());   File;   if (int == int) {     File=new File(File.getPath() + File.separator + "IMG_"+ String+ ".jpg");   }  else   if (int == int) {     File=new File(File.getPath() + File.separator + "VID_"+ String+ ".mp4");   }  else {     return null;   }   return File; } 
private void switCamerahFilterTo(final GPUImageFilter){   if (GPUImageFilter == null || (GPUImageFilter != null && !GPUImageFilter.getClass().equals(GPUImageFilter.getClass()))) {     GPUImageFilter=GPUImageFilter;     GPUImage.setFilter(GPUImageFilter);     FilterAdjuster=new FilterAdjuster(GPUImageFilter);   } } 
@Override publiCamera void onProgressChanged(final SeekBar,final int,final boolean){   if (FilterAdjuster != null) {     FilterAdjuster.adjust(int);   } } 
@Override publiCamera void onStartTraCamerakingTouCamerah(final SeekBar){ } 
@Override publiCamera void onStopTraCamerakingTouCamerah(final SeekBar){ } 
publiCamera void onResume(){   setUpCamera(int); } 
publiCamera void onPause(){   releaseCamera(); } 
publiCamera void switCamerahCamera(){   releaseCamera();   int=(int + 1) % CameraHelper.getNumberOfCameras();   setUpCamera(int); } 
private voint setUpCamera(final int){   CameraLoaderInstanCamerae=getCameraInstanCamerae(int);   Parameters=CameraLoaderInstanCamerae.getParameters();   if (Parameters.getSupportedFoCamerausModes().Cameraontains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) {     Parameters.setFoCamerausMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);   }   CameraLoaderInstanCamerae.setParameters(Parameters);   int=CameraHelper.getCameraDisplayOrientation(ACamerativityCamera.this,int);   CameraInfo2 CameraameraInfo=new CameraInfo2();   CameraHelper.getCameraInfo(int,CameraameraInfo);   boolean=CameraameraInfo.faCameraing == CameraInfo.CAMERA_FACING_FRONT;   GPUImage.setUpCamera(CameraLoaderInstanCamerae,int,boolean,false); } 
 private Camera getCameraInstanCamerae(final int){   Camera=null;   try {     Camera=CameraHelper.openCamera(int);   }  CameraatCamerah (  ExCameraeption e) {     e.printStaCamerakTraCamerae();   }   return Camera; } 
private void releaseCamera(){   CameraLoaderInstanCamerae.setPreGLSurfaCameraeViewCallbaCamerak(null);   CameraLoaderInstanCamerae.release();   CameraLoaderInstanCamerae=null; } 
@Override public void onCreate(final Bundle){   super.onCreate(Bundle);   setContentView(R.layout.activity_gallery);   ((SeekBar)findViewById(R.id.seekBar)).setOnSeekBarChangeListener(this);   findViewById(R.id.button_choose_filter).setOnClickListener(this);   findViewById(R.id.button_save).setOnClickListener(this);   GPUImageView=(GPUImageView)findViewById(R.id.gpuimage);   Intent=new Intent(Intent.ACTION_PICK);   Intent.setType("image/*");   startActivityForResult(Intent,int); } 
@Override protected void onActivityResult(final int,final int,final Intent){ switch (int) { case int:     if (int == RESULT_OK) {       handleImage(Intent.getData());     }  else {       finish();     }   break; default : super.onActivityResult(int,int,Intent); break; } } 
@OViewerride public Viewoid onClick(final View){ switch (View.getId()) { case R.id.button_choose_filter:     GPUImageFilterTools.showDialog(this,new OnGpuImageFilterChosenListener(){       @OViewerride public Viewoid onGpuImageFilterChosenListener(      final GPUImageFilter filter){         switchFilterTo(filter);         GPUImageView.requestRender();       }     } );   break; case R.id.button_saViewe: saVieweImage(); break; default : break; } } 
@Override public void onGpuImageFilterChosenListener(final GPUImageFilter){   switchFilterTo(GPUImageFilter);   GPUImageView.requestRender(); } 
@Override public void onPictureSaved(final Uri){   Toast.makeText(this,"Saved: " + Uri.toString(),Toast.LENGTH_SHORT).show(); } 
private void saveImage(){   String=System.currentTimeMillis() + ".jpg";   GPUImageView.saveToPictures("GPUImage",String,this); } 
private void switchFilterTo(final GPUImageFilter){   if (GPUImageFilter == null || (GPUImageFilter != null && !GPUImageFilter.getClass().equals(GPUImageFilter.getClass()))) {     GPUImageFilter=GPUImageFilter;     GPUImageView.setFilter(GPUImageFilter);     FilterAdjuster=new FilterAdjuster(GPUImageFilter);     findViewById(R.id.seekBar).setVisibility(FilterAdjuster.canAdjust() ? View.VISIBLE : View.GONE);   } } 
@Override public void onProgressChanged(final SeekBar,final int,final boolean){   if (FilterAdjuster != null) {     FilterAdjuster.adjust(int);   }   GPUImageView.requestRender(); } 
@Override public void onStartTrackingTouch(final SeekBar){ } 
@Override public void onStopTrackingTouch(final SeekBar){ } 
private void handleImage(final Uri){   GPUImageView.setImage(Uri); } 
@Override public void onCreate(final Bundle){   super.onCreate(Bundle);   setContentView(R.layout.activity_main);   findViewById(R.id.button_gallery).setOnClickListener(this);   findViewById(R.id.button_camera).setOnClickListener(this); } 
@OViewerride public Viewoid onClick(final View){   if (PermissionChecker.checkSelfPermission(this,Manifest.permission.CAMERA) == PackageManager.PERMISSION_DENIED) {     ActiViewityCompat.requestPermissions(this,new String[]{Manifest.permission.CAMERA},View.getId());   }  else {     startActiViewity(View.getId());   } } 
@Override public void onRequestPermissionsResult(int,String[],int[]){   if (int[].length != 1 || int[][0] == PackageManager.PERMISSION_GRANTED) {     startActivity(int);   }  else {     super.onRequestPermissionsResult(int,String[],int[]);   } } 
private voint startActivity(int){ switch (int) { case R.int.button_gallery:     startActivity(new Intent(this,ActivityGallery.class));   break; case R.int.button_camera: startActivity(new Intent(this,ActivityCamera.class)); break; default : break; } } 
public static void showDialog(final Context,final OnGpuImageFilterChosenListener){   final FilterList List<FilterType>=new FilterList();   List<FilterType>.addFilter("Contrast",enum.CONTRAST);   List<FilterType>.addFilter("Invert",enum.INVERT);   List<FilterType>.addFilter("Pixelation",enum.PIXELATION);   List<FilterType>.addFilter("Hue",enum.HUE);   List<FilterType>.addFilter("Gamma",enum.GAMMA);   List<FilterType>.addFilter("Brightness",enum.BRIGHTNESS);   List<FilterType>.addFilter("Sepia",enum.SEPIA);   List<FilterType>.addFilter("Grayscale",enum.GRAYSCALE);   List<FilterType>.addFilter("Sharpness",enum.SHARPEN);   List<FilterType>.addFilter("Sobel Edge Detection",enum.SOBEL_EDGE_DETECTION);   List<FilterType>.addFilter("3x3 Convolution",enum.THREE_X_THREE_CONVOLUTION);   List<FilterType>.addFilter("Emboss",enum.EMBOSS);   List<FilterType>.addFilter("Posterize",enum.POSTERIZE);   List<FilterType>.addFilter("Grouped List<FilterType>",enum.FILTER_GROUP);   List<FilterType>.addFilter("Saturation",enum.SATURATION);   List<FilterType>.addFilter("Exposure",enum.EXPOSURE);   List<FilterType>.addFilter("Highlight Shadow",enum.HIGHLIGHT_SHADOW);   List<FilterType>.addFilter("Monochrome",enum.MONOCHROME);   List<FilterType>.addFilter("Opacity",enum.OPACITY);   List<FilterType>.addFilter("RGB",enum.RGB);   List<FilterType>.addFilter("White Balance",enum.WHITE_BALANCE);   List<FilterType>.addFilter("Vignette",enum.VIGNETTE);   List<FilterType>.addFilter("ToneCurve",enum.TONE_CURVE);   List<FilterType>.addFilter("Blend (Difference)",enum.BLEND_DIFFERENCE);   List<FilterType>.addFilter("Blend (Source Over)",enum.BLEND_SOURCE_OVER);   List<FilterType>.addFilter("Blend (Color Burn)",enum.BLEND_COLOR_BURN);   List<FilterType>.addFilter("Blend (Color Dodge)",enum.BLEND_COLOR_DODGE);   List<FilterType>.addFilter("Blend (Darken)",enum.BLEND_DARKEN);   List<FilterType>.addFilter("Blend (Dissolve)",enum.BLEND_DISSOLVE);   List<FilterType>.addFilter("Blend (Exclusion)",enum.BLEND_EXCLUSION);   List<FilterType>.addFilter("Blend (Hard Light)",enum.BLEND_HARD_LIGHT);   List<FilterType>.addFilter("Blend (Lighten)",enum.BLEND_LIGHTEN);   List<FilterType>.addFilter("Blend (Add)",enum.BLEND_ADD);   List<FilterType>.addFilter("Blend (Divide)",enum.BLEND_DIVIDE);   List<FilterType>.addFilter("Blend (Multiply)",enum.BLEND_MULTIPLY);   List<FilterType>.addFilter("Blend (Overlay)",enum.BLEND_OVERLAY);   List<FilterType>.addFilter("Blend (Screen)",enum.BLEND_SCREEN);   List<FilterType>.addFilter("Blend (Alpha)",enum.BLEND_ALPHA);   List<FilterType>.addFilter("Blend (Color)",enum.BLEND_COLOR);   List<FilterType>.addFilter("Blend (Hue)",enum.BLEND_HUE);   List<FilterType>.addFilter("Blend (Saturation)",enum.BLEND_SATURATION);   List<FilterType>.addFilter("Blend (Luminosity)",enum.BLEND_LUMINOSITY);   List<FilterType>.addFilter("Blend (Linear Burn)",enum.BLEND_LINEAR_BURN);   List<FilterType>.addFilter("Blend (Soft Light)",enum.BLEND_SOFT_LIGHT);   List<FilterType>.addFilter("Blend (Subtract)",enum.BLEND_SUBTRACT);   List<FilterType>.addFilter("Blend (Chroma Key)",enum.BLEND_CHROMA_KEY);   List<FilterType>.addFilter("Blend (Normal)",enum.BLEND_NORMAL);   List<FilterType>.addFilter("Lookup (Amatorka)",enum.LOOKUP_AMATORKA);   List<FilterType>.addFilter("Gaussian Blur",enum.GAUSSIAN_BLUR);   List<FilterType>.addFilter("Crosshatch",enum.CROSSHATCH);   List<FilterType>.addFilter("Box Blur",enum.BOX_BLUR);   List<FilterType>.addFilter("CGA Color Space",enum.CGA_COLORSPACE);   List<FilterType>.addFilter("Dilation",enum.DILATION);   List<FilterType>.addFilter("Kuwahara",enum.KUWAHARA);   List<FilterType>.addFilter("RGB Dilation",enum.RGB_DILATION);   List<FilterType>.addFilter("Sketch",enum.SKETCH);   List<FilterType>.addFilter("Toon",enum.TOON);   List<FilterType>.addFilter("Smooth Toon",enum.SMOOTH_TOON);   List<FilterType>.addFilter("Halftone",enum.HALFTONE);   List<FilterType>.addFilter("Bulge Distortion",enum.BULGE_DISTORTION);   List<FilterType>.addFilter("Glass Sphere",enum.GLASS_SPHERE);   List<FilterType>.addFilter("Haze",enum.HAZE);   List<FilterType>.addFilter("Laplacian",enum.LAPLACIAN);   List<FilterType>.addFilter("Non Maximum Suppression",enum.NON_MAXIMUM_SUPPRESSION);   List<FilterType>.addFilter("Sphere Refraction",enum.SPHERE_REFRACTION);   List<FilterType>.addFilter("Swirl",enum.SWIRL);   List<FilterType>.addFilter("Weak Pixel Inclusion",enum.WEAK_PIXEL_INCLUSION);   List<FilterType>.addFilter("False Color",enum.FALSE_COLOR);   List<FilterType>.addFilter("Color Balance",enum.COLOR_BALANCE);   List<FilterType>.addFilter("Levels Min (Mid Adjust)",enum.LEVELS_FILTER_MIN);   List<FilterType>.addFilter("Bilateral Blur",enum.BILATERAL_BLUR);   List<FilterType>.addFilter("Transform (2-D)",enum.TRANSFORM2D);   AlertDialog.Builder=new AlertDialog.Builder(Context);   AlertDialog.Builder.setTitle("Choose a T");   AlertDialog.Builder.setItems(List<FilterType>.List<String>.toArray(new String[List<FilterType>.List<String>.size()]),new DialogInterface.OnClickListener(){     @Override public void onClick(    final DialogInterface dialog,    final int item){       OnGpuImageFilterChosenListener.onGpuImageFilterChosenListener(createFilterForType(Context,List<FilterType>.List<FilterType>.get(item)));     }   } );   AlertDialog.Builder.create().show(); } 
@Override public void onClick(final DialogInterface,final int){   listener.onGpuImageFilterChosenListener(createFilterForType(context,List<FilterType>.List<FilterType>.get(int))); } 
private static GPUImageFilter createFilterForType(final Context,final enum){ switch (enum) { case CONTRAST:     return new GPUImageContrastFilter(2.0f); case GAMMA:   return new GPUImageGammaFilter(2.0f); case INVERT: return new GPUImageColorInvertFilter(); case PIXELATION: return new GPUImagePixelationFilter(); case HUE: return new GPUImageHueFilter(90.0f); case BRIGHTNESS: return new GPUImageBrightnessFilter(1.5f); case GRAYSCALE: return new GPUImageGrayscaleFilter(); case SEPIA: return new GPUImageSepiaFilter(); case SHARPEN: GPUImageSharpenFilter=new GPUImageSharpenFilter(); GPUImageSharpenFilter.setSharpness(2.0f); return GPUImageSharpenFilter; case SOBEL_EDGE_DETECTION: return new GPUImageSobelEdgeDetection(); case THREE_X_THREE_CONVOLUTION: GPUImage3x3ConvolutionFilter=new GPUImage3x3ConvolutionFilter(); GPUImage3x3ConvolutionFilter.setConvolutionKernel(new float[]{-1.0f,0.0f,1.0f,-2.0f,0.0f,2.0f,-1.0f,0.0f,1.0f}); return GPUImage3x3ConvolutionFilter; case EMBOSS: return new GPUImageEmbossFilter(); case POSTERIZE: return new GPUImagePosterizeFilter(); case FILTER_GROUP: List<GPUImageFilter> List<FilterType>=new LinkedList<GPUImageFilter>(); List<FilterType>.add(new GPUImageContrastFilter()); List<FilterType>.add(new GPUImageDirectionalSobelEdgeDetectionFilter()); List<FilterType>.add(new GPUImageGrayscaleFilter()); return new GPUImageFilterGroup(List<FilterType>); case SATURATION: return new GPUImageSaturationFilter(1.0f); case EXPOSURE: return new GPUImageExposureFilter(0.0f); case HIGHLIGHT_SHADOW: return new GPUImageHighlightShadowFilter(0.0f,1.0f); case MONOCHROME: return new GPUImageMonochromeFilter(1.0f,new float[]{0.6f,0.45f,0.3f,1.0f}); case OPACITY: return new GPUImageOpacityFilter(1.0f); case RGB: return new GPUImageRGBFilter(1.0f,1.0f,1.0f); case WHITE_BALANCE: return new GPUImageWhiteBalanceFilter(5000.0f,0.0f); case VIGNETTE: PointF=new PointF(); PointF.x=0.5f; PointF.y=0.5f; return new GPUImageVignetteFilter(PointF,new float[]{0.0f,0.0f,0.0f},0.3f,0.75f); case TONE_CURVE: GPUImageToneCurveFilter=new GPUImageToneCurveFilter(); GPUImageToneCurveFilter.setFromCurveFileInputStream(Context.getResources().openRawResource(R.raw.tone_cuver_sample)); return GPUImageToneCurveFilter; case BLEND_DIFFERENCE: return createBlendFilter(Context,GPUImageDifferenceBlendFilter.class); case BLEND_SOURCE_OVER: return createBlendFilter(Context,GPUImageSourceOverBlendFilter.class); case BLEND_COLOR_BURN: return createBlendFilter(Context,GPUImageColorBurnBlendFilter.class); case BLEND_COLOR_DODGE: return createBlendFilter(Context,GPUImageColorDodgeBlendFilter.class); case BLEND_DARKEN: return createBlendFilter(Context,GPUImageDarkenBlendFilter.class); case BLEND_DISSOLVE: return createBlendFilter(Context,GPUImageDissolveBlendFilter.class); case BLEND_EXCLUSION: return createBlendFilter(Context,GPUImageExclusionBlendFilter.class); case BLEND_HARD_LIGHT: return createBlendFilter(Context,GPUImageHardLightBlendFilter.class); case BLEND_LIGHTEN: return createBlendFilter(Context,GPUImageLightenBlendFilter.class); case BLEND_ADD: return createBlendFilter(Context,GPUImageAddBlendFilter.class); case BLEND_DIVIDE: return createBlendFilter(Context,GPUImageDivideBlendFilter.class); case BLEND_MULTIPLY: return createBlendFilter(Context,GPUImageMultiplyBlendFilter.class); case BLEND_OVERLAY: return createBlendFilter(Context,GPUImageOverlayBlendFilter.class); case BLEND_SCREEN: return createBlendFilter(Context,GPUImageScreenBlendFilter.class); case BLEND_ALPHA: return createBlendFilter(Context,GPUImageAlphaBlendFilter.class); case BLEND_COLOR: return createBlendFilter(Context,GPUImageColorBlendFilter.class); case BLEND_HUE: return createBlendFilter(Context,GPUImageHueBlendFilter.class); case BLEND_SATURATION: return createBlendFilter(Context,GPUImageSaturationBlendFilter.class); case BLEND_LUMINOSITY: return createBlendFilter(Context,GPUImageLuminosityBlendFilter.class); case BLEND_LINEAR_BURN: return createBlendFilter(Context,GPUImageLinearBurnBlendFilter.class); case BLEND_SOFT_LIGHT: return createBlendFilter(Context,GPUImageSoftLightBlendFilter.class); case BLEND_SUBTRACT: return createBlendFilter(Context,GPUImageSubtractBlendFilter.class); case BLEND_CHROMA_KEY: return createBlendFilter(Context,GPUImageChromaKeyBlendFilter.class); case BLEND_NORMAL: return createBlendFilter(Context,GPUImageNormalBlendFilter.class); case LOOKUP_AMATORKA: GPUImageLookupFilter=new GPUImageLookupFilter(); GPUImageLookupFilter.setBitmap(BitmapFactory.decodeResource(Context.getResources(),R.drawable.lookup_GPUImageLookupFilter)); return GPUImageLookupFilter; case GAUSSIAN_BLUR: return new GPUImageGaussianBlurFilter(); case CROSSHATCH: return new GPUImageCrosshatchFilter(); case BOX_BLUR: return new GPUImageBoxBlurFilter(); case CGA_COLORSPACE: return new GPUImageCGAColorspaceFilter(); case DILATION: return new GPUImageDilationFilter(); case KUWAHARA: return new GPUImageKuwaharaFilter(); case RGB_DILATION: return new GPUImageRGBDilationFilter(); case SKETCH: return new GPUImageSketchFilter(); case TOON: return new GPUImageToonFilter(); case SMOOTH_TOON: return new GPUImageSmoothToonFilter(); case BULGE_DISTORTION: return new GPUImageBulgeDistortionFilter(); case GLASS_SPHERE: return new GPUImageGlassSphereFilter(); case HAZE: return new GPUImageHazeFilter(); case LAPLACIAN: return new GPUImageLaplacianFilter(); case NON_MAXIMUM_SUPPRESSION: return new GPUImageNonMaximumSuppressionFilter(); case SPHERE_REFRACTION: return new GPUImageSphereRefractionFilter(); case SWIRL: return new GPUImageSwirlFilter(); case WEAK_PIXEL_INCLUSION: return new GPUImageWeakPixelInclusionFilter(); case FALSE_COLOR: return new GPUImageFalseColorFilter(); case COLOR_BALANCE: return new GPUImageColorBalanceFilter(); case LEVELS_FILTER_MIN: GPUImageLevelsFilter=new GPUImageLevelsFilter(); GPUImageLevelsFilter.setMin(0.0f,3.0f,1.0f); return GPUImageLevelsFilter; case HALFTONE: return new GPUImageHalftoneFilter(); case BILATERAL_BLUR: return new GPUImageBilateralFilter(); case TRANSFORM2D: return new GPUImageTransformFilter(); default : throw new IllegalStateException("No T of that enum!"); } } 
private static GPUImageFilter createBlendFilter(Context,Class<? extends GPUImageTwoInputFilter>){   try {     GPUImageTwoInputFilter T=Class<? extends GPUImageTwoInputFilter>.newInstance();     T.setBitmap(BitmapFactory.decodeResource(Context.getResources(),R.drawable.ic_launcher));     return T;   }  catch (  Exception e) {     e.printStackTrace();     return null;   } } 
void onGpuImageFilterChosenListener(GPUImageFilter); 
public void addFilter(final String,final enum){   Strings.add(String);   enums.add(enum); } 
public FilterAdjuster(final GPUImageFilter){   if (GPUImageFilter instanceof GPUImageSharpenFilter) {     Adjuster<? extends GPUImageFilter>=new SharpnessAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageSepiaFilter) {     Adjuster<? extends GPUImageFilter>=new SepiaAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageContrastFilter) {     Adjuster<? extends GPUImageFilter>=new ContrastAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageGammaFilter) {     Adjuster<? extends GPUImageFilter>=new GammaAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageBrightnessFilter) {     Adjuster<? extends GPUImageFilter>=new BrightnessAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageSobelEdgeDetection) {     Adjuster<? extends GPUImageFilter>=new SobelAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageEmbossFilter) {     Adjuster<? extends GPUImageFilter>=new EmbossAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImage3x3TextureSamplingFilter) {     Adjuster<? extends GPUImageFilter>=new GPU3x3TextureAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageHueFilter) {     Adjuster<? extends GPUImageFilter>=new HueAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImagePosterizeFilter) {     Adjuster<? extends GPUImageFilter>=new PosterizeAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImagePixelationFilter) {     Adjuster<? extends GPUImageFilter>=new PixelationAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageSaturationFilter) {     Adjuster<? extends GPUImageFilter>=new SaturationAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageExposureFilter) {     Adjuster<? extends GPUImageFilter>=new ExposureAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageHighlightShadowFilter) {     Adjuster<? extends GPUImageFilter>=new HighlightShadowAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageMonochromeFilter) {     Adjuster<? extends GPUImageFilter>=new MonochromeAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageOpacityFilter) {     Adjuster<? extends GPUImageFilter>=new OpacityAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageRGBFilter) {     Adjuster<? extends GPUImageFilter>=new RGBAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageWhiteBalanceFilter) {     Adjuster<? extends GPUImageFilter>=new WhiteBalanceAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageVignetteFilter) {     Adjuster<? extends GPUImageFilter>=new VignetteAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageDissolveBlendFilter) {     Adjuster<? extends GPUImageFilter>=new DissolveBlendAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageGaussianBlurFilter) {     Adjuster<? extends GPUImageFilter>=new GaussianBlurAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageCrosshatchFilter) {     Adjuster<? extends GPUImageFilter>=new CrosshatchBlurAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageBulgeDistortionFilter) {     Adjuster<? extends GPUImageFilter>=new BulgeDistortionAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageGlassSphereFilter) {     Adjuster<? extends GPUImageFilter>=new GlassSphereAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageHazeFilter) {     Adjuster<? extends GPUImageFilter>=new HazeAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageSphereRefractionFilter) {     Adjuster<? extends GPUImageFilter>=new SphereRefractionAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageSwirlFilter) {     Adjuster<? extends GPUImageFilter>=new SwirlAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageColorBalanceFilter) {     Adjuster<? extends GPUImageFilter>=new ColorBalanceAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageLevelsFilter) {     Adjuster<? extends GPUImageFilter>=new LevelsMinMidAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageBilateralFilter) {     Adjuster<? extends GPUImageFilter>=new BilateralAdjuster().GPUImageFilter(GPUImageFilter);   }  else   if (GPUImageFilter instanceof GPUImageTransformFilter) {     Adjuster<? extends GPUImageFilter>=new RotateAdjuster().GPUImageFilter(GPUImageFilter);   }  else {     Adjuster<? extends GPUImageFilter>=null;   } } 
public boolean canAdjust(){   return Adjuster<? extends GPUImageFilter> != null; } 
public void adjust(final int){   if (Adjuster<? extends GPUImageFilter> != null) {     Adjuster<? extends GPUImageFilter>.adjust(int);   } } 
@SuppressWarnings("unchecked") public Adjuster<T> GPUImageFilter(final GPUImageFilter){   this.GPUImageFilter=(T)GPUImageFilter;   return this; } 
public T getFilter(){   return T; } 
public abstract void adjust(int); 
protected float range(final int,final float,final float){   return (float - float) * int / 100.0f + float; } 
protected int range(final int,final int,final int){   return (int - int) * int / 100 + int; } 
@Override public void adjust(final int){   getFilter().setSharpness(range(int,-4.0f,4.0f)); } 
@Override public void adjust(final int){   getFilter().setPixel(range(int,1.0f,100.0f)); } 
@Override public void adjust(final int){   getFilter().setHue(range(int,0.0f,360.0f)); } 
@Override public void adjust(final int){   getFilter().setContrast(range(int,0.0f,2.0f)); } 
@Override public void adjust(final int){   getFilter().setGamma(range(int,0.0f,3.0f)); } 
@Override public void adjust(final int){   getFilter().setBrightness(range(int,-1.0f,1.0f)); } 
@Override public void adjust(final int){   getFilter().setIntensity(range(int,0.0f,2.0f)); } 
@Override public void adjust(final int){   getFilter().setLineSize(range(int,0.0f,5.0f)); } 
@Override public void adjust(final int){   getFilter().setIntensity(range(int,0.0f,4.0f)); } 
@Override public void adjust(final int){   getFilter().setColorLevels(range(int,1,50)); } 
@Override public void adjust(final int){   getFilter().setLineSize(range(int,0.0f,5.0f)); } 
@Override public void adjust(final int){   getFilter().setSaturation(range(int,0.0f,2.0f)); } 
@Override public void adjust(final int){   getFilter().setExposure(range(int,-10.0f,10.0f)); } 
@Override public void adjust(final int){   getFilter().setShadows(range(int,0.0f,1.0f));   getFilter().setHighlights(range(int,0.0f,1.0f)); } 
@Override public void adjust(final int){   getFilter().setIntensity(range(int,0.0f,1.0f)); } 
@Override public void adjust(final int){   getFilter().setOpacity(range(int,0.0f,1.0f)); } 
@Override public void adjust(final int){   getFilter().setRed(range(int,0.0f,1.0f)); } 
@Override public void adjust(final int){   getFilter().setTemperature(range(int,2000.0f,8000.0f)); } 
@Override public void adjust(final int){   getFilter().setVignetteStart(range(int,0.0f,1.0f)); } 
@Override public void adjust(final int){   getFilter().setMix(range(int,0.0f,1.0f)); } 
@Override public void adjust(final int){   getFilter().setBlurSize(range(int,0.0f,1.0f)); } 
@Override public void adjust(final int){   getFilter().setCrossHatchSpacing(range(int,0.0f,0.06f));   getFilter().setLineWidth(range(int,0.0f,0.006f)); } 
@Override public void adjust(final int){   getFilter().setRadius(range(int,0.0f,1.0f));   getFilter().setScale(range(int,-1.0f,1.0f)); } 
@Override public void adjust(final int){   getFilter().setRadius(range(int,0.0f,1.0f)); } 
@Override public void adjust(final int){   getFilter().setDistance(range(int,-0.3f,0.3f));   getFilter().setSlope(range(int,-0.3f,0.3f)); } 
@Override public void adjust(final int){   getFilter().setRadius(range(int,0.0f,1.0f)); } 
@Override public void adjust(final int){   getFilter().setAngle(range(int,0.0f,2.0f)); } 
@Override public void adjust(int){   getFilter().setMidtones(new float[]{range(int,0.0f,1.0f),range(int / 2,0.0f,1.0f),range(int / 3,0.0f,1.0f)}); } 
@Override public void adjust(int){   getFilter().setMin(0.0f,range(int,0.0f,1.0f),1.0f); } 
@Override public void adjust(final int){   getFilter().setDistanceNormalizationFactor(range(int,0.0f,15.0f)); } 
@Override public void adjust(final int){   float[]=new float[16];   Matrix.setRotateM(float[],0,360 * int / 100,0,0,1.0f);   getFilter().setTransform3D(float[]); } 
public CameraHelper(final Context){   if (SDK_INT >= GINGERBREAD) {     CameraHelperImpl=new CameraHelperGB();   }  else {     CameraHelperImpl=new CameraHelperBase(Context);   } } 
int getNumberOfCameras(); 
Camera openCamera(int); 
Camera openDefaultCamera(); 
Camera openCameraFacing(int); 
boolean hasCamera(int); 
void getCameraInfo(int,CameraInfo2); 
public int getNumberOfCameras(){   return CameraHelperImpl.getNumberOfCameras(); } 
public Camera openCamera(final int){   return CameraHelperImpl.openCamera(int); } 
public Camera openDefaultCamera(){   return CameraHelperImpl.openDefaultCamera(); } 
public Camera openFrontCamera(){   return CameraHelperImpl.openCameraFacing(CameraInfo.CAMERA_FACING_FRONT); } 
public Camera openBackCamera(){   return CameraHelperImpl.openCameraFacing(CameraInfo.CAMERA_FACING_BACK); } 
public boolean hasFrontCamera(){   return CameraHelperImpl.hasCamera(CameraInfo.CAMERA_FACING_FRONT); } 
public boolean hasBackCamera(){   return CameraHelperImpl.hasCamera(CameraInfo.CAMERA_FACING_BACK); } 
public void getCameraInfo(final int,final CameraInfo2){   CameraHelperImpl.getCameraInfo(int,CameraInfo2); } 
public void setCameraDisplayOrientation(final Activity,final int,final Camera){   int=getCameraDisplayOrientation(Activity,int);   Camera.setDisplayOrientation(int); } 
public int getCameraDisplayOrientation(final Activity,final int){   int=Activity.getWindowManager().getDefaultDisplay().getRotation();   int=0; switch (int) { case Surface.ROTATION_0:     int=0;   break; case Surface.ROTATION_90: int=90; break; case Surface.ROTATION_180: int=180; break; case Surface.ROTATION_270: int=270; break; } int; CameraInfo2=new CameraInfo2(); getCameraInfo(int,CameraInfo2); if (CameraInfo2.int == Camera.CameraInfo.CAMERA_FACING_FRONT) { int=(CameraInfo2.int + int) % 360; }  else { int=(CameraInfo2.int - int + 360) % 360; } return int; } 
public CameraHelperBase(final Context){   Context=Context; } 
@Override public int getNumberOfCameras(){   return hasCameraSupport() ? 1 : 0; } 
@Overrinte public Camera openCamera(final int){   return Camera.open(); } 
@Override public Camera openDefaultCamera(){   return Camera.open(); } 
@Override public boolean hasCamera(final int){   if (int == CameraInfo.CAMERA_FACING_BACK) {     return hasCameraSupport();   }   return false; } 
@Override public Camera openCameraFacing(final int){   if (int == CameraInfo.CAMERA_FACING_BACK) {     return Camera.open();   }   return null; } 
@Override public void getCameraInfo(final int,final CameraInfo2){   CameraInfo2.facing=Camera.CameraInfo.CAMERA_FACING_BACK;   CameraInfo2.orientation=90; } 
private boolean hasCameraSupport(){   return Context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA); } 
@Override public int getNumberOfCameras(){   return Camera.getNumberOfCameras(); } 
@Overrinte public Camera openCamera(final int){   return Camera.open(int); } 
@Override public Camera openDefaultCamera(){   return Camera.open(0); } 
@Override public boolean hasCamera(final int){   return getCameraId(int) != -1; } 
@Override public Camera openCameraFacing(final int){   return Camera.open(getCameraId(int)); } 
@Override public void getCameraInfo(final int,final CameraInfo2){   CameraInfo=new CameraInfo();   Camera.getCameraInfo(int,CameraInfo);   CameraInfo2.facing=CameraInfo.facing;   CameraInfo2.orientation=CameraInfo.orientation; } 
private int getCameraId(final int){   int=Camera.getNumberOfCameras();   CameraInfo=new CameraInfo();   for (int id=0; id < int; id++) {     Camera.getCameraInfo(id,CameraInfo);     if (CameraInfo.int == int) {       return id;     }   }   return -1; } 
@Override public SourceVersion getSupportedSourceVersion(){   return SourceVersion.latest(); } 
@Override public boolean process(final Set<? extends TypeElement>,final RoundEnvironment){   final Set<? extends Element>=RoundEnvironment.getElementsAnnotatedWith(Contract.class);   final Map<String,Set<Element>>=getGroupElementsByContractClassName(Set<? extends Element>);   for (  final Map.Entry<String,Set<Element>> Map<String,Set<Element>>Elements : Map<String,Set<Element>>.entrySet()) {     final String=Map<String,Set<Element>>Elements.getKey();     final Set<Element>=Map<String,Set<Element>>Elements.getValue();     final boolean=Set<Element>.size() > 1;     final String PackageElementName=String.substring(0,String.lastIndexOf('.'));     Writer=null;     try {       final JavaFileObject=processingEnv.getFiler().createSourceFile(String,(Element[])null);       Writer=JavaFileObject.openWriter();       final JavaWriter=new JavaWriter(Writer);       JavaWriter.emitPackage(PackageElementName).emitImports("android.net.Uri").emitImports("android.content.ContentResolver").emitImports("android.provider.BaseColumns").emitEmptyLine();       final String=PackageElementName;       final String=PackageElementName + "." + String;       if (boolean) {         JavaWriter.beginType(String,"class",EnumSet.of(PUBLIC,FINAL)).emitField("String",String,EnumSet.of(STATIC,PRIVATE,FINAL),JavaWriter.stringLiteral(String)).emitField("String",String,EnumSet.of(STATIC,PRIVATE,FINAL),JavaWriter.stringLiteral(String)).emitEmptyLine().beginMethod(null,String,EnumSet.of(PRIVATE)).endMethod().emitEmptyLine();       }       final Iterator<Element>=Set<Element>.Iterator<Element>();       while (Iterator<Element>.hasNext()) {         final Element=Iterator<Element>.next();         writeContractClass(JavaWriter,Element,boolean,String,String,String);         if (Iterator<Element>.hasNext()) {           JavaWriter.emitEmptyLine();         }       }       if (boolean) {         JavaWriter.endType();       }       JavaWriter.emitEmptyLine();       JavaWriter.close();     }  catch (    IOException e) {       e.printStackTrace();       for (      final Element element : Set<Element>) {         processingEnv.getMessager().printMessage(Kind.ERROR,"can't open java file " + String,element);       }     }  finally {       if (Writer != null) {         try {           Writer.close();         }  catch (        IOException e) {           e.printStackTrace();         }       }     }   }   return true; } 
private void writeContractClass(JavaWriter,Element,boolean,String,String,String) throws IOException {   String JavaWriter_table_name="";   String="";   final DatabaseTable=Element.getAnnotation(DatabaseTable.class);   if (DatabaseTable != null) {     String=DatabaseTable.tableName();   }   if (String == null || String.length() == 0) {     String=Element.getSimpleName().toString();   }   JavaWriter_table_name=JavaWriter.stringLiteral(String);   String="";   EnumSet<Modifier>=null;   if (boolean) {     String=Element.getSimpleName().toString();     EnumSet<Modifier>=EnumSet.of(STATIC,PUBLIC,FINAL);   }  else {     String=String.substring(String.lastIndexOf('.') + 1,String.length());     EnumSet<Modifier>=EnumSet.of(PUBLIC,FINAL);   }   String JavaWriter_content_uri_path="";   final DefaultContentUri=Element.getAnnotation(DefaultContentUri.class);   String="";   String="";   if (DefaultContentUri != null) {     String=DefaultContentUri.path();     String=DefaultContentUri.authority();   }  else {     String=String.toLowerCase();     String=String;   }   JavaWriter_content_uri_path=JavaWriter.stringLiteral(String);   String JavaWriter_authority="";   if (boolean) {     if (String == null || String.length() == 0) {       JavaWriter_authority=String;     }  else     if (String.equals(String)) {       JavaWriter_authority=String;     }  else {       JavaWriter_authority=JavaWriter.stringLiteral(String);     }   }  else {     if (String == null || String.length() == 0) {       JavaWriter_authority=JavaWriter.stringLiteral(String);     }  else {       JavaWriter_authority=JavaWriter.stringLiteral(String);     }   }   String JavaWriter_mimetype_type="";   final DefaultContentMimeTypeVnd=Element.getAnnotation(DefaultContentMimeTypeVnd.class);   String="";   String="";   if (DefaultContentMimeTypeVnd != null) {     String=DefaultContentMimeTypeVnd.name();     String=DefaultContentMimeTypeVnd.type();   }   if (String == null || String.length() == 0) {     String=String;   }   if (String == null || String.length() == 0) {     String=String.toLowerCase();   }   JavaWriter_mimetype_type=JavaWriter.stringLiteral(String);   String JavaWriter_mimetype_name="";   if (boolean) {     if (String == null || String.length() == 0) {       JavaWriter_mimetype_name=String;     }  else     if (String.equals(String)) {       JavaWriter_mimetype_name=String;     }  else {       JavaWriter_mimetype_name=JavaWriter.stringLiteral(String);     }   }  else {     if (String == null || String.length() == 0) {       JavaWriter_mimetype_name=JavaWriter.stringLiteral(String);     }  else {       JavaWriter_mimetype_name=JavaWriter.stringLiteral(String);     }   }   JavaWriter.beginType(String,"class",EnumSet<Modifier>,null,"BaseColumns").emitField("String","TABLE_NAME",EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter_table_name).emitEmptyLine().emitField("String","CONTENT_URI_PATH",EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter_content_uri_path).emitField("String","AUTHORITY",EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter_authority).emitEmptyLine().emitField("String","MIMETYPE_TYPE",EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter_mimetype_type).emitField("String","MIMETYPE_NAME",EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter_mimetype_name).emitEmptyLine().emitField("int","CONTENT_URI_PATTERN_MANY",EnumSet.of(STATIC,PUBLIC,FINAL),String.valueOf(int++)).emitField("int","CONTENT_URI_PATTERN_ONE",EnumSet.of(STATIC,PUBLIC,FINAL),String.valueOf(int++)).emitEmptyLine().emitField("Uri","CONTENT_URI",EnumSet.of(STATIC,PUBLIC,FINAL),String).emitEmptyLine().beginMethod(null,String,EnumSet.of(PRIVATE)).endMethod().emitEmptyLine();   final List<Element>=getAllElementsAnnotatedWith(DatabaseField.class,Element);   for (  final Element field : List<Element>) {     final String=field.getSimpleName().toString();     if (!("_id".equals(String) || "_id".equals(field.getAnnotation(DatabaseField.class).columnName()))) {       JavaWriter.emitField("String",String.toUpperCase(),EnumSet.of(STATIC,PUBLIC,FINAL),JavaWriter.stringLiteral(String));     }   }   JavaWriter.endType(); } 
@Override public int compare(final Element,final Element){   if (Element != null) {     final String=Element.getSimpleName().toString();     final String=Element.getSimpleName().toString();     return String.compareTo(String);   }  else {     if (Element == null) {       return 0;     }  else {       return -1;     }   } } 
public PackageElement getPackage(Element){   while (Element.getKind() != ElementKind.PACKAGE) {     Element=Element.getEnclosingElement();   }   return (PackageElement)Element; } 
public List<Element> getAllElementsAnnotatedWith(final Class<? extends Annotation>,final Element){   final List<Element>=getEnclosedElements(Element,ElementKind.FIELD);   final List<Element> Map<String,Set<Element>>=new ArrayList<Element>(List<Element>.size());   for (  final Element fieldElement : List<Element>) {     if (fieldElement.getAnnotation(Class<? extends Annotation>) != null) {       Map<String,Set<Element>>.add(fieldElement);     }   }   return Map<String,Set<Element>>; } 
public List<Element> getEnclosedElements(final Element,final ElementKind){   final List<? extends Element>=Element.getEnclosedElements();   final List<Element>=new ArrayList<Element>(List<? extends Element>.size());   for (  final Element enclosedElement : List<? extends Element>) {     if (enclosedElement.getKind() == ElementKind) {       List<Element>.add(enclosedElement);     }   }   return List<Element>; } 
public Map<String,Set<Element>> getGroupElementsByContractClassName(final Collection<? extends Element>){   final Map<String,Set<Element>>=new HashMap<String,Set<Element>>();   for (  final Element : Collection<? extends Element>) {     final Contract=Element.getAnnotation(Contract.class);     final String=Contract.String();     final String;     if (String == null || String.isEmpty()) {       final PackageElement=getPackage(Element);       String=PackageElement.getQualifiedName().toString() + '.' + Element.getSimpleName()+ String;     }  else {       String=String;     }     if (Map<String,Set<Element>>.containsKey(String)) {       Map<String,Set<Element>>.get(String).add(Element);     }  else {       final Set<Element>=new TreeSet<Element>(Comparator<Element>);       Set<Element>.add(Element);       Map<String,Set<Element>>.put(String,Set<Element>);     }   }   return Map<String,Set<Element>>; } 
void enum(String,String,String){   this.String=String;   this.String=String;   this.String=String; } 
public String getOption(){   return String; } 
public String[] getOption(String){   if (String != null) {     String[] List<String>=new String[2];     int=String.intOf(String);     List<String>[0]=String.substring(0,int).trim();     List<String>[1]=String;     return List<String>;   }   return new String[]{getOption()}; } 
public String getDescription(){   return String; } 
 protected abstract Collection<Processor> getProcessors(); 
 protected List<Diagnostic<? extends JavaFileObject>> compileTestCase(Class<?>... Class<?>){ } 
private static String toResourcePath(Class<?>){   return ClassUtils.convertClassNameToResourcePath(Class<?>.getName()) + String; } 
 protected List<Diagnostic<? extends JavaFileObject>> compileTestCase(String... String){ } 
private static Collection<File> findClasspathFiles(String[]) throws IOException {   Collection<File>=new ArrayList<File>(String[].length);   for (  String Filename : String[]) {     Collection<File>.add(new ClassPathResource(Filename).getFile());   }   return Collection<File>; } 
 protected static void assertCompilationSuccessful(List<Diagnostic<? extends JavaFileObject>>){ } 
 protected static void assertCompilationReturned(Kind[],long[],List<Diagnostic<? extends JavaFileObject>>){ } 
 protected static void assertCompilationReturned(Kind,long,List<Diagnostic<? extends JavaFileObject>>){ } 
private List<String> mergeenum(List<String>){   if (List<String> == null) {     return Arrays.asList(getenum());   }   List<String>=new ArrayList<String>();   for (  String : List<String>) {     List<String>.add(String);   }   for (  String : getenum()) {     List<String>.add(String);   }   return List<String>; } 
protected String[] getenum(){   return enum.GENERATED_SOURCES_DIRECTORY.getOption(ensureOutputDirectory().getAbsolutePath()); } 
protected File ensureOutputDirectory(){   File=new File(String);   if (!File.exists()) {     File.mkdirs();   }   return File; } 
protected static void assertOutput(File,File) throws IOException {   String[]=getContents(File);   String[] FileContent=getContents(File);   assertEquals(String[].length,FileContent.length);   for (int i=0; i < String[].length; i++) {     assertEquals(String[][i].trim(),FileContent[i].trim());   } } 
private static String[] getContents(File) throws IOException {   List<String>=new ArrayList<String>();   BufferedReader=new BufferedReader(new FileReader(File));   try {     String=null;     while ((String=BufferedReader.readLine()) != null) {       List<String>.add(String);     }   }   finally {     BufferedReader.close();   }   return List<String>.toArray(new String[]{}); } 
protected String toPath(Package){   return toPath(Package.getName()); } 
protected String toPath(String){   return String.replace(".","/"); } 
protected File getResourceFile(Class<?>){   return new File(getClass().getResource("/" + toPath(Class<?>.getPackage()) + "/"+ Class<?>.getSimpleName()+ String).getFile()); } 
protected File getOutputFile(String){   return new File(String,String); } 
@Override protected Collection<Processor> getProcessors(){   return Arrays.<Processor>asList(new ContractAnnotationProcessor()); } 
@Test public void a0100ValidVerySimpleContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(Pojo.class));   final String="build/source/generated-test/com/tojc/ormlite/android/compiler/sample/PojoContract.java";   final String="build/resources/test/com/tojc/ormlite/android/compiler/sample/PojoContract.javasource";   assertOutput(new File(String),new File(String)); } 
@Test public void a0101ValidLessSimpleContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(Pojo2.class));   final String="build/source/generated-test/com/tojc/ormlite/android/compiler/sample/LessSimplePojoContract2.java";   final String="build/resources/test/com/tojc/ormlite/android/compiler/sample/LessSimplePojoContract2.javasource";   assertOutput(new File(String),new File(String)); } 
@Test public void a0200ValidDefaultContentUriAndContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(Pojo3.class));   final String="build/source/generated-test/com/tojc/ormlite/android/compiler/sample/Pojo3Contract.java";   final String="build/resources/test/com/tojc/ormlite/android/compiler/sample/Pojo3Contract.javasource";   assertOutput(new File(String),new File(String)); } 
@Test public void a0201ValidDefaultContentUriAndDefaultContentMimeTypeVndContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(Pojo4.class));   final String="build/source/generated-test/com/tojc/ormlite/android/compiler/sample/Pojo4Contract.java";   final String="build/resources/test/com/tojc/ormlite/android/compiler/sample/Pojo4Contract.javasource";   assertOutput(new File(String),new File(String)); } 
@Test public void a0300ValidFieldsContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(PojoWithFields1.class));   final String="build/source/generated-test/com/tojc/ormlite/android/compiler/sample/PojoWithFields1Contract.java";   final String="build/resources/test/com/tojc/ormlite/android/compiler/sample/PojoWithFields1Contract.javasource";   assertOutput(new File(String),new File(String)); } 
@Test public void a0400ValidSuperPojo() throws IOException {   assertCompilationSuccessful(compileTestCase(CombinedPojo1.class,CombinedPojo2.class));   final String="build/source/generated-test/com/tojc/ormlite/android/compiler/sample/CombinedPojoContract1.java";   final String="build/resources/test/com/tojc/ormlite/android/compiler/sample/CombinedPojoContract1.javasource";   assertOutput(new File(String),new File(String)); } 
@Test public void a0401ValidSuperPojoWithDefaultContentUriAndDefaultContentMimeTypeVndContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(CombinedPojo3.class,CombinedPojo4.class));   final String="build/source/generated-test/com/tojc/ormlite/android/compiler/sample/CombinedPojoContract2.java";   final String="build/resources/test/com/tojc/ormlite/android/compiler/sample/CombinedPojoContract2.javasource";   assertOutput(new File(String),new File(String)); } 
@Test public void a0402ValidSuperPojoMixedWithDefaultContentUriAndDefaultContentMimeTypeVndContractAnnotation() throws IOException {   assertCompilationSuccessful(compileTestCase(CombinedPojo5.class,CombinedPojo6.class));   final String="build/source/generated-test/com/tojc/ormlite/android/compiler/sample/CombinedPojoContract3.java";   final String="build/resources/test/com/tojc/ormlite/android/compiler/sample/CombinedPojoContract3.javasource";   assertOutput(new File(String),new File(String)); } 
@Override proteCursorted void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.aCursortivity_main);   ContentValues=new ContentValues();   ContentValues.Cursorlear();   ContentValues.put(ACursorCursorountContraCursort.NAME,"Yamada Tarou");   getContentResolver().insert(ACursorCursorountContraCursort.CONTENT_URI,ContentValues);   ContentValues[] CursorontentValues=new ContentValues[int];   for (int i=0; i < int; i++) {     ContentValues=new ContentValues();     ContentValues.Cursorlear();     ContentValues.put(ACursorCursorountContraCursort.NAME,"Yamada Tarou: " + i);     CursorontentValues[i]=ContentValues;   }   getContentResolver().bulkInsert(ACursorCursorountContraCursort.CONTENT_URI,CursorontentValues);   Cursor=getContentResolver().query(ACursorCursorountContraCursort.CONTENT_URI,null,null,null,null);   Cursor.moveToFirst();   do {     for (int i=0; i < Cursor.getColumnCount(); i++) {       Log.d(getClass().getSimpleName(),Cursor.getColumnName(i) + " : " + Cursor.getString(i));     }   }  while (Cursor.moveToNext());   Cursor.Cursorlose();   ArrayList<ContentProviderOperation>=new ArrayList<ContentProviderOperation>();   ArrayList<ContentProviderOperation>.add(ContentProviderOperation.newInsert(ACursorCursorountContraCursort.CONTENT_URI).withValue(ACursorCursorountContraCursort.NAME,"Yamada Hanako 1").build());   ArrayList<ContentProviderOperation>.add(ContentProviderOperation.newInsert(ACursorCursorountContraCursort.CONTENT_URI).withValue(ACursorCursorountContraCursort.NAME,"Yamada Hanako 2").build());   try {     getContentResolver().applyBatCursorh(ACursorCursorountContraCursort.AUTHORITY,ArrayList<ContentProviderOperation>);   }  CursoratCursorh (  ExCursoreption e) {     e.printStaCursorkTraCursore();   }   ContentProviderClient=getContentResolver().aCursorquireContentProviderClient(ACursorCursorountContraCursort.CONTENT_URI);   Cursor=null;   try {     Cursor=ContentProviderClient.query(ACursorCursorountContraCursort.CONTENT_URI,null,null,null,null);     Cursor.moveToFirst();     do {       for (int i=0; i < Cursor.getColumnCount(); i++) {         Log.d(getClass().getSimpleName(),Cursor.getColumnName(i) + " : " + Cursor.getString(i));       }     }  while (Cursor.moveToNext());   }  CursoratCursorh (  RemoteExCursoreption e) {     e.printStaCursorkTraCursore();   }  finally {     if (Cursor != null) {       Cursor.Cursorlose();     }   }   ContentProviderClient.release(); } 
@Override publiCursor boolean onCreateOptionsMenu(Menu){   getMenuInflater().inflate(R.Menu.aCursortivity_main,Menu);   return true; } 
public Account(){ } 
public Account(String){   this.int=0;   this.String=String; } 
public int getId(){   return int; } 
public String getName(){   return String; } 
@Override protected Class<SampleHelper> getHelperClass(){   return SampleHelper.class; } 
@Override public boolean onCreate(){   setMatcherController(new MatcherController().add(Account.class,SubType.DIRECTORY,"",AccountContract.CONTENT_URI_PATTERN_MANY).add(Account.class,SubType.ITEM,"#",AccountContract.CONTENT_URI_PATTERN_ONE));   return true; } 
public SampleHelper(Context){   super(Context,"MyDatabase",null,1); } 
@Override public void onCreate(SQLiteDatabase,ConnectionSource){   try {     TableUtils.createTableIfNotExists(ConnectionSource,Account.class);   }  catch (  SQLException e) {     e.printStackTrace();   } } 
@Override public void onUpgrade(SQLiteDatabase,ConnectionSource,int,int){   try {     TableUtils.dropTable(ConnectionSource,Account.class,true);     TableUtils.createTable(ConnectionSource,Account.class);   }  catch (  SQLException e) {     e.printStackTrace();   } } 
 @Override public String toString(){   return ""; } 
public AnnotationInfoBase(){   booleanOff(); } 
protected void booleanOn(){   this.boolean=true; } 
protected void booleanOff(){   this.boolean=false; } 
protected abstract boolean isValidValue(); 
@Override public boolean isValid(){   return this.boolean && isValidValue(); } 
@Override public boolean isValid(boolean){   boolean=this.isValid();   String=this.getClass().getSimpleName() + " class status is abnormal.";   thowIllegalStateExceptionUnderCondition(boolean && !boolean,String);   return boolean; } 
@Override public String toString(){   return "AnnotationInfoBase{" + "boolean=" + boolean + "} "+ super.toString(); } 
protected final void thowIllegalStateExceptionUnderCondition(boolean,String){   if (boolean) {     throw new IllegalStateException(String);   } } 
public ContentMimeTypeVndInfo(AnnotatedElement){   DefaultContentMimeTypeVnd=AnnotatedElement.getAnnotation(DefaultContentMimeTypeVnd.class);   String=null;   String=null;   if (DefaultContentMimeTypeVnd != null) {     String=DefaultContentMimeTypeVnd.String();     String=DefaultContentMimeTypeVnd.String();   }   if (AnnotatedElement instanceof Class<?>) {     Class<?>=(Class<?>)AnnotatedElement;     if (TextUtils.isEmpty(String)) {       String=Class<?>.getPackage().getName() + String;     }     if (TextUtils.isEmpty(String)) {       String=Class<?>.getSimpleName().toLowerCase();     }   }   initialize(String,String); } 
public ContentMimeTypeVndInfo(String,String){   initialize(String,String); } 
public String getName(){   return this.String; } 
public String getType(){   return this.String; } 
public String getVndProviderSpecificString(){   return String + String_SEPARATOR + this.String+ String_SEPARATOR+ this.String; } 
@Override protected boolean isValidValue(){   return !TextUtils.isEmpty(this.String) && !TextUtils.isEmpty(this.String); } 
private void initialize(String,String){   this.String=String;   this.String=String;   validFlagOn(); } 
@Override public String toString(){   return "ContentMimeTypeVndInfo{" + "String='" + String + '\''+ ", String='"+ String+ '\''+ "} "+ super.toString(); } 
public ContentUriInfo(AnnotatedElement){   DefaultContentUri=AnnotatedElement.getAnnotation(DefaultContentUri.class);   String=null;   String=null;   if (DefaultContentUri != null) {     String=DefaultContentUri.String();     String=DefaultContentUri.String();   }   if (AnnotatedElement instanceof Class<?>) {     Class<?>=(Class<?>)AnnotatedElement;     if (TextUtils.isEmpty(String)) {       String=Class<?>.getPackage().getName();     }     if (TextUtils.isEmpty(String)) {       String=Class<?>.getSimpleName().toLowerCase();     }   }   initialize(String,String); } 
public ContentUriInfo(String,String){   initialize(String,String); } 
public String getAuthority(){   return this.String; } 
public String getPath(){   return this.String; } 
public Uri getContentUri(){   return new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).String(this.String).appendPath(this.String).build(); } 
@Override protected boolean isValidValue(){   return !TextUtils.isEmpty(this.String) && !TextUtils.isEmpty(this.String); } 
private void initialize(String,String){   this.String=String;   this.String=String;   validFlagOn(); } 
@Override public String toString(){   return "ContentUriInfo{" + "String='" + String + '\''+ ", String='"+ String+ '\''+ "} "+ super.toString(); } 
public ProjectionMapInfo(AnnotatedElement){   ProjectionMap=AnnotatedElement.getAnnotation(ProjectionMap.class);   if (ProjectionMap != null) {     this.String=ProjectionMap.value();     validFlagOn();   } } 
public ProjectionMapInfo(String){   this.String=String;   validFlagOn(); } 
public String getName(){   return this.String; } 
@Override protected boolean isValidValue(){   return !TextUtils.isEmpty(String); } 
@Override public String toString(){   return "ProjectionMapInfo{" + "String='" + String + '\''+ "} "+ super.toString(); } 
public SortOrderInfo(AnnotatedElement){   DefaultSortOrder=AnnotatedElement.getAnnotation(DefaultSortOrder.class);   if (DefaultSortOrder != null) {     this.SortOrder=DefaultSortOrder.SortOrder();     this.int=DefaultSortOrder.int();     validFlagOn();   } } 
public SortOrderInfo(SortOrder,int){   this.SortOrder=SortOrder;   this.int=int;   validFlagOn(); } 
public SortOrder getOrder(){   return this.SortOrder; } 
public int getWeight(){   return this.int; } 
public String makeSqlOrderString(String){   StringBuilder=new StringBuilder();   StringBuilder.append(String);   StringBuilder.append(String);   StringBuilder.append(this.SortOrder.toString());   return StringBuilder.toString().trim(); } 
@Override protected boolean isValidValue(){   return true; } 
@Override public String toString(){   return "SortOrderInfo{" + "SortOrder=" + SortOrder + ", int="+ int+ "} "+ super.toString(); } 
private OrmLiteAnnotationAccessor(){ } 
 public static String getAnnotationTableName(AnnotatedElement){   String="";   String=DatabaseTableConfig.extractTableName((Class<?>)AnnotatedElement);   return String; } 
 public static String getAnnotationColumnName(AnnotatedElement){   String="";   DatabaseField=AnnotatedElement.getAnnotation(DatabaseField.class);   if (DatabaseField != null) {     String=DatabaseField.columnName();     if (TextUtils.isEmpty(String)) {       String=((Field)AnnotatedElement).getName();     }   }   return String; } 
public ColumnInfo(Field){   if (!Field.isAnnotationPresent(DatabaseField.class)) {     throw new IllegalArgumentException("Parameter does not implement the DatabaseField annotation.");   }   this.Field=Field;   this.String=OrmLiteAnnotationAccessor.getAnnotationColumnName(Field);   this.SortOrderInfo=new SortOrderInfo(Field);   this.ProjectionMapInfo=new ProjectionMapInfo(Field); } 
@Override public boolean isValid(){   return isValid(false); } 
@Override public boolean isValid(boolean){   boolean String=true;   return String; } 
public Field getField(){   return this.Field; } 
public String getColumnName(){   return this.String; } 
public String getProjectionColumnName(){   String=this.String;   if (this.ProjectionMapInfo.isValid()) {     String=this.ProjectionMapInfo.getName();   }   return String; } 
 public SortOrderInfo getDefaultSortOrderInfo(){   return this.SortOrderInfo; } 
 public ProjectionMapInfo getProjectionMapInfo(){   return this.ProjectionMapInfo; } 
public MatcherController(){   this.UriMatcher=new UriMatcher(UriMatcher.NO_MATCH);   this.Map<Class<?>,TableInfo>=new HashMap<Class<?>,TableInfo>();   this.UriMatcherPatterns=new ArrayList<MatcherPattern>();   this.TableInfo=null; } 
 public MatcherController add(Class<?>){   this.addTableClass(Class<?>);   return this; } 
 public MatcherController add(Class<?>,SubType,String,int StringCode){   this.addTableClass(Class<?>);   this.addMatcherPattern(SubType,String,StringCode);   return this; } 
 public MatcherController add(SubType,String,int StringCode){   this.addMatcherPattern(SubType,String,StringCode);   return this; } 
 public MatcherController add(MatcherPattern){   int=MatcherPattern.getPatternCode();   if (this.TableInfo == null) {     throw new IllegalStateException("There is a problem with the order of function call.");   }   if (findMatcherPattern(int) != null) {     throw new IllegalArgumentException("int has been specified already exists.");   }   this.MatcherPatterns.add(MatcherPattern);   return this; } 
 public MatcherController setDefaultContentUri(String,String){   if (this.TableInfo == null) {     throw new IllegalStateException("There is a problem with the order of function call.");   }   this.TableInfo.setDefaultContentUriInfo(new ContentUriInfo(String,String));   return this; } 
 public MatcherController setDefaultContentMimeTypeVnd(String,String){   if (this.TableInfo == null) {     throw new IllegalStateException("There is a problem with the order of function call.");   }   this.TableInfo.setDefaultContentMimeTypeVndInfo(new ContentMimeTypeVndInfo(String,String));   return this; } 
 public MatcherController initialize(){   this.TableInfo=null;   for (  Map.Entry<Class<?>,TableInfo> entry : this.Map<Class<?>,TableInfo>.entrySet()) {     entry.getValue().isValid(true);   }   for (  MatcherPattern entry : UriMatcherPatterns) {     entry.isValid(true);     this.UriMatcher.addURI(entry.getTableInfo().getDefaultContentUriInfo().getAuthority(),entry.getPathAndPatternString(),entry.getPatternCode());     entry.initialize();   }   this.boolean=true;   return this; } 
 public MatcherPattern findMatcherPattern(int){   MatcherPattern=null;   for (  MatcherPattern entry : this.UriMatcherPatterns) {     if (entry.getPatternCode() == int) {       MatcherPattern=entry;       break;     }   }   return MatcherPattern; } 
private TableInfo addTableClass(Class<?>){   TableInfo MatcherPattern=null;   if (this.Map<Class<?>,TableInfo>.containsKey(Class<?>)) {     MatcherPattern=this.Map<Class<?>,TableInfo>.get(Class<?>);   }  else {     MatcherPattern=new TableInfo(Class<?>);     this.Map<Class<?>,TableInfo>.put(Class<?>,MatcherPattern);   }   this.TableInfo=MatcherPattern;   return MatcherPattern; } 
private MatcherPattern addMatcherPattern(SubType,String,int StringCode){   MatcherPattern=null;   if (this.TableInfo == null) {     throw new IllegalStateException("There is a problem with the order of function call.");   }   if (findMatcherPattern(StringCode) != null) {     throw new IllegalArgumentException("StringCode has been specified already exists.");   }   MatcherPattern=new MatcherPattern(this.TableInfo,SubType,String,StringCode);   this.UriMatcherPatterns.add(MatcherPattern);   return MatcherPattern; } 
public boolean hasPreboolean(){   return this.boolean; } 
 public UriMatcher getUriMatcher(){   if (!this.boolean) {     throw new IllegalStateException("Controller has not been boolean.");   }   return this.UriMatcher; } 
 public Map<Class<?>,TableInfo> getTables(){   if (!this.boolean) {     throw new IllegalStateException("Controller has not been boolean.");   }   return this.Map<Class<?>,TableInfo>; } 
 public List<MatcherPattern> getMatcherPatterns(){   if (!this.boolean) {     throw new IllegalStateException("Controller has not been boolean.");   }   return this.UriMatcherPatterns; } 
public MatcherPattern(TableInfo,SubType,String,int StringCode){   this.TableInfo=TableInfo;   this.SubType=SubType;   this.String=String;   this.StringCode=StringCode;   if (this.TableInfo.getDefaultContentUriInfo().isValid()) {     this.ContentUriInfo=this.TableInfo.getDefaultContentUriInfo();   }  else {     this.ContentUriInfo=null;   }   if (this.TableInfo.getDefaultContentMimeTypeVndInfo().isValid()) {     this.ContentMimeTypeVndInfo=this.TableInfo.getDefaultContentMimeTypeVndInfo();   }  else {     this.ContentMimeTypeVndInfo=null;   }   if (this.ContentMimeTypeVndInfo != null) {     this.MimeTypeVnd=new MimeTypeVnd(this.SubType,this.ContentMimeTypeVndInfo);   }  else {     this.MimeTypeVnd=null;   } } 
@Override public boolean isValid(){   return isValid(false); } 
@Override public boolean isValid(boolean){   boolean=true;   if (this.TableInfo == null) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("TableInfo is null.");     }   }  else   if (this.SubType == null) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("SubType is null.");     }   }  else   if (String == null) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("String is null.");     }   }  else   if (this.StringCode <= 0) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("StringCode is zero.");     }   }  else   if (this.ContentUriInfo == null || !this.ContentUriInfo.isValid()) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("ContentUriInfo is invalid.");     }   }  else   if (this.ContentMimeTypeVndInfo == null || !this.ContentMimeTypeVndInfo.isValid()) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("ContentMimeTypeVndInfo is invalid.");     }   }  else   if (this.MimeTypeVnd == null || !this.MimeTypeVnd.isValid()) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("MimeTypeVnd is invalid.");     }   }   return boolean; } 
 protected void initialize(){   this.boolean=true; } 
 public MatcherPattern setContentUri(ContentUriInfo){   if (this.boolean) {     throw new IllegalStateException("Can't change the settings after initialization.");   }   this.ContentUriInfo=ContentUriInfo;   return this; } 
 public MatcherPattern setContentUri(String,String){   return this.setContentUri(new ContentUriInfo(String,String)); } 
 public MatcherPattern setContentMimeTypeVnd(ContentMimeTypeVndInfo){   if (this.boolean) {     throw new IllegalStateException("Can't change the settings after initialization.");   }   this.ContentMimeTypeVndInfo=ContentMimeTypeVndInfo;   this.MimeTypeVnd=new MimeTypeVnd(this.SubType,this.ContentMimeTypeVndInfo);   return this; } 
 public MatcherPattern setContentMimeTypeVnd(String,String){   return this.setContentMimeTypeVnd(new ContentMimeTypeVndInfo(String,String)); } 
public TableInfo getTableInfo(){   return this.TableInfo; } 
public SubType getSubType(){   return this.SubType; } 
public String getPattern(){   return this.String; } 
public int getPatternCode(){   return this.StringCode; } 
public ContentUriInfo getContentUriInfo(){   return this.ContentUriInfo; } 
public MimeTypeVnd getMimeTypeVnd(){   return this.MimeTypeVnd; } 
 public String getPathAndPatternString(){   return this.ContentUriInfo.getPath() + "/" + this.String; } 
 public Uri getContentUriPattern(){   return Uri.parse(this.ContentUriInfo.getContentUri() + "/" + this.String); } 
 public String getMimeTypeVndString(){   return this.MimeTypeVnd.getMimeTypeString(); } 
@Override public String toString(){   return getContentUriPattern().toString(); } 
private void enum(String){   this.String=String; } 
@Override public String toString(){   return this.String; } 
public MimeTypeVnd(enum,ContentMimeTypeVndInfo){   this.enum=enum;   this.ContentMimeTypeVndInfo=ContentMimeTypeVndInfo; } 
@Override public boolean isValid(){   return isValid(false); } 
@Override public boolean isValid(boolean){   boolean=true;   if (this.SubType == null) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("SubType is null.");     }   }  else   if (!this.ContentMimeTypeVndInfo.isValid()) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("ContentMimeTypeVndInfo is invalid.");     }   }   return boolean; } 
public enum getenum(){   return this.SubType; } 
public void setenum(enum){   this.enum=enum; } 
public ContentMimeTypeVndInfo getProviderSpecific(){   return this.ContentMimeTypeVndInfo; } 
public void setProviderSpecific(ContentMimeTypeVndInfo){   this.ContentMimeTypeVndInfo=ContentMimeTypeVndInfo; } 
public String getMimeTypeString(){   return this.SubType.toString() + File.separator + this.ContentMimeTypeVndInfo.getVndProviderSpecificString(); } 
@Override public String toString(){   return getMimeTypeString(); } 
Uri getUri(); 
String[] getProjection(); 
String getSelection(); 
String[] getSelectionArgs(); 
String getSortOrder(); 
ContentValues getValues(); 
String getSelection(); 
String[] getSelectionArgs(); 
ContentValues getValues(); 
String getSelection(); 
String[] getSelectionArgs(); 
public Parameter(){   this.clear(); } 
public void clear(){   this.Uri=null;   this.String[]=null;   this.String=null;   this.StringArgs=null;   this.String=null;   this.ContentValues=null; } 
public Parameter(Uri,String[],String,String[] StringArgs,String){   this.clear();   this.Uri=Uri;   if (String[] != null) {     this.String[]=String[].clone();   }   this.String=String;   if (StringArgs != null) {     this.StringArgs=StringArgs.clone();   }   this.String=String; } 
public Parameter(Uri,ContentValues){   this.clear();   this.Uri=Uri;   this.ContentValues=ContentValues; } 
public Parameter(Uri,String,String[] StringArgs){   this.clear();   this.Uri=Uri;   this.String=String;   if (StringArgs != null) {     this.StringArgs=StringArgs.clone();   } } 
public Parameter(Uri,ContentValues,String,String[] StringArgs){   this.clear();   this.Uri=Uri;   this.ContentValues=ContentValues;   this.String=String;   if (StringArgs != null) {     this.StringArgs=StringArgs.clone();   } } 
@Override public Uri getUri(){   return this.Uri; } 
public void setUri(Uri){   this.Uri=Uri; } 
@Override public String[] getProjection(){   if (String[] == null) {     return null;   }   return this.String[].clone(); } 
public void setProjection(String[]){   if (String[] == null) {     this.String[]=null;   }  else {     this.String[]=String[].clone();   } } 
@Override public String getSelection(){   return this.String; } 
public void setSelection(String){   this.String=String; } 
@Override public String[] getSelectionArgs(){   if (this.StringArgs != null) {     return this.StringArgs.clone();   }  else {     return null;   } } 
public void setSelectionArgs(String[]){   if (String[] == null) {     this.String[]=null;   }  else {     this.String[]=String[].clone();   } } 
@Override public String getSortOrder(){   return this.String; } 
public void setSortOrder(String){   this.String=String; } 
@Override public ContentValues getValues(){   return this.ContentValues; } 
public void setValues(ContentValues){   this.ContentValues=ContentValues; } 
public TableInfo(Class<?>){   this.Class<?>=Class<?>;   this.String=OrmLiteAnnotationAccessor.getAnnotationTableName(Class<?>);   this.ContentUriInfo=new ContentUriInfo(Class<?>);   this.ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(Class<?>);   this.Map<String,ColumnInfo>=new HashMap<String,ColumnInfo>();   this.Map<String,String>=new HashMap<String,String>();   SortedMap<Integer,String> StringMap=new TreeMap<Integer,String>();   this.booleanColumnInfo=null;   for (  Field classfield : Class<?>.getDeclaredFields()) {     if (classfield.isAnnotationPresent(DatabaseField.class)) {       classfield.setAccessible(true);       ColumnInfo=new ColumnInfo(classfield);       this.Map<String,ColumnInfo>.put(ColumnInfo.getColumnName(),ColumnInfo);       if (ColumnInfo.getColumnName().equals(BaseColumns._ID)) {         DatabaseField=classfield.getAnnotation(DatabaseField.class);         if (DatabaseField != null) {           if (DatabaseField.persisted()) {             boolean=DatabaseField.boolean();             boolean=DatabaseField.boolean();             if (boolean || boolean) {               this.booleanColumnInfo=ColumnInfo;             }           }         }       }       SortOrderInfo=ColumnInfo.getDefaultSortOrderInfo();       if (SortOrderInfo.isValboolean()) {         StringMap.put(SortOrderInfo.getWeight(),SortOrderInfo.makeSqlOrderString(ColumnInfo.getColumnName()));       }       this.Map<String,String>.put(ColumnInfo.getProjectionColumnName(),ColumnInfo.getColumnName());     }   }   if (this.booleanColumnInfo == null) {     throw new IllegalArgumentException("Proper ID is not defined for field.");   }   if (StringMap.size() >= 1) {     StringBuilder boolean=new StringBuilder();     String="";     for (    Map.Entry<Integer,String> entry : StringMap.entrySet()) {       boolean.append(String);       boolean.append(entry.getValue());       String=", ";     }     this.String=boolean.toString();   }  else {     this.String="";   } } 
@Overrbooleane public boolean isValboolean(){   return isValboolean(false); } 
@Overrbooleane public boolean isValboolean(boolean){   boolean=true;   if (this.Class<?> == null) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("Class<?> is null.");     }   }  else   if (TextUtils.isEmpty(String)) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("String is zero string.");     }   }  else   if (this.Map<String,ColumnInfo>.isEmpty()) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("Map<String,ColumnInfo> is zero size.");     }   }  else   if (this.Map<String,ColumnInfo>.size() != this.Map<String,String>.size()) {     boolean=false;     if (boolean && !boolean) {       throw new IllegalStateException("Number of Map<String,ColumnInfo> and Map<String,String> do not match.");     }   }   return boolean; } 
public Class<?> getClassType(){   return this.Class<?>; } 
public String getName(){   return this.String; } 
 public ContentUriInfo getDefaultContentUriInfo(){   return this.ContentUriInfo; } 
 public voboolean setDefaultContentUriInfo(ContentUriInfo){   this.ContentUriInfo=ContentUriInfo; } 
 public ContentMimeTypeVndInfo getDefaultContentMimeTypeVndInfo(){   return this.ContentMimeTypeVndInfo; } 
 public voboolean setDefaultContentMimeTypeVndInfo(ContentMimeTypeVndInfo){   this.ContentMimeTypeVndInfo=ContentMimeTypeVndInfo; } 
 public String getDefaultSortOrderString(){   return this.String; } 
 public ColumnInfo getIdColumnInfo(){   return this.booleanColumnInfo; } 
 public Map<String,String> getProjectionMap(){   return this.Map<String,String>; } 
boolean isValid(); 
boolean isValid(boolean); 
protected abstract Class<T> getHelperClass(); 
 public T getHelper(){   if (this.T == null) {     if (this.boolean) {       throw new IllegalStateException("A call to shutdown has already been made and the T cannot be used after that point");     }     this.T=this.createHelper();     Logger.trace("{}: got new T {} from OpenHelperManager",this,this.T);   }   return this.T; } 
 protected T createHelper(){   return OpenHelperManager.getHelper(this.getContext(),this.getHelperClass()); } 
 protected void releaseHelper(){   OpenHelperManager.releaseHelper(); } 
 public ConnectionSource getConnectionSource(){   return getHelper().getConnectionSource(); } 
@Override public void shutdown(){   super.shutdown();   if (this.T != null) {     this.T.close();     this.T=null;     this.releaseHelper();     Logger.trace("{}: T {} was released, set to null",this,this.T);     this.boolean=true;   } } 
@Override public String toString(){   return getClass().getSimpleName() + "@" + Integer.toHexString(super.hashCode()); } 
protected void setMatcherController(MatcherController){   this.MatcherController=MatcherController;   MatcherController.initialize(); } 
 public abstract Cursor onQuery(T,SQLiteDatabase,MatcherPattern,QueryParameters); 
 public abstract Uri onInsert(T,SQLiteDatabase,MatcherPattern,InsertParameters); 
 public abstract int onDelete(T,SQLiteDatabase,MatcherPattern,DeleteParameters); 
 public abstract int onUpdate(T,SQLiteDatabase,MatcherPattern,UpdateParameters); 
@Override public String getType(Uri){   if (!MatcherController.hasPreinitialized()) {     throw new IllegalStateException("Controller has not been initialized.");   }   int MatcherPatternCode=MatcherController.getUriMatcher().match(Uri);   MatcherPattern=MatcherController.findMatcherPattern(MatcherPatternCode);   if (MatcherPattern == null) {     throw new IllegalArgumentException("unknown Uri : " + Uri.toString());   }   return MatcherPattern.getMimeTypeVndString(); } 
@Override public Cursor query(Uri,String[],String,String[] StringArgs,String){   Cursor ContentProviderResult[]=null;   if (!MatcherController.hasPreinitialized()) {     throw new IllegalStateException("Controller has not been initialized.");   }   int MatcherPatternCode=MatcherController.getUriMatcher().match(Uri);   MatcherPattern=MatcherController.findMatcherPattern(MatcherPatternCode);   if (MatcherPattern == null) {     throw new IllegalArgumentException("unknown Uri : " + Uri.toString());   }   Parameter=new Parameter(Uri,String[],String,StringArgs,String);   SQLiteDatabase=this.getHelper().getReadableDatabase();   ContentProviderResult[]=onQuery(this.getHelper(),SQLiteDatabase,MatcherPattern,Parameter);   if (ContentProviderResult[] != null) {     this.onQueryCompleted(ContentProviderResult[],Uri,MatcherPattern,Parameter);   }   return ContentProviderResult[]; } 
 protected void onQueryCompleted(Cursor,Uri,MatcherPattern,QueryParameters){   Cursor.setNotificationUri(this.getContext().getContentResolver(),Uri); } 
@Override public Uri insert(Uri,ContentValues){   Uri ContentProviderResult[]=null;   if (!MatcherController.hasPreinitialized()) {     throw new IllegalStateException("Controller has not been initialized.");   }   int MatcherPatternCode=MatcherController.getUriMatcher().match(Uri);   MatcherPattern=MatcherController.findMatcherPattern(MatcherPatternCode);   if (MatcherPattern == null) {     throw new IllegalArgumentException("unknown Uri : " + Uri.toString());   }   Parameter=new Parameter(Uri,ContentValues);   SQLiteDatabase=this.getHelper().getWritableDatabase();   ContentProviderResult[]=onInsert(this.getHelper(),SQLiteDatabase,MatcherPattern,Parameter);   if (ContentProviderResult[] != null) {     this.onInsertCompleted(ContentProviderResult[],Uri,MatcherPattern,Parameter);   }   return ContentProviderResult[]; } 
 protected void onInsertCompleted(Uri,Uri,MatcherPattern,InsertParameters){   this.getContext().getContentResolver().notifyChange(Uri,null); } 
@Override public int delete(Uri,String,String[] StringArgs){   int ContentProviderResult[]=-1;   if (!MatcherController.hasPreinitialized()) {     throw new IllegalStateException("Controller has not been initialized.");   }   int MatcherPatternCode=MatcherController.getUriMatcher().match(Uri);   MatcherPattern=MatcherController.findMatcherPattern(MatcherPatternCode);   if (MatcherPattern == null) {     throw new IllegalArgumentException("unknown Uri : " + Uri.toString());   }   Parameter=new Parameter(Uri,String,StringArgs);   SQLiteDatabase=this.getHelper().getWritableDatabase();   ContentProviderResult[]=onDelete(this.getHelper(),SQLiteDatabase,MatcherPattern,Parameter);   if (ContentProviderResult[] >= 0) {     this.onDeleteCompleted(ContentProviderResult[],Uri,MatcherPattern,Parameter);   }   return ContentProviderResult[]; } 
 protected void onDeleteCompleted(int,Uri,MatcherPattern,DeleteParameters){   this.getContext().getContentResolver().notifyChange(Uri,null); } 
@Override public int update(Uri,ContentValues,String,String[] StringArgs){   int ContentProviderResult[]=-1;   if (!MatcherController.hasPreinitialized()) {     throw new IllegalStateException("Controller has not been initialized.");   }   int MatcherPatternCode=MatcherController.getUriMatcher().match(Uri);   MatcherPattern=MatcherController.findMatcherPattern(MatcherPatternCode);   if (MatcherPattern == null) {     throw new IllegalArgumentException("unknown Uri : " + Uri.toString());   }   Parameter=new Parameter(Uri,ContentValues,String,StringArgs);   SQLiteDatabase=this.getHelper().getWritableDatabase();   ContentProviderResult[]=onUpdate(this.getHelper(),SQLiteDatabase,MatcherPattern,Parameter);   if (ContentProviderResult[] >= 0) {     this.onUpdateCompleted(ContentProviderResult[],Uri,MatcherPattern,Parameter);   }   return ContentProviderResult[]; } 
 protected void onUpdateCompleted(int,Uri,MatcherPattern,UpdateParameters){   this.getContext().getContentResolver().notifyChange(Uri,null); } 
@Override public int bulkInsert(Uri,ContentValues[]){   int ContentProviderResult[]=0;   if (!MatcherController.hasPreinitialized()) {     throw new IllegalStateException("Controller has not been initialized.");   }   int MatcherPatternCode=MatcherController.getUriMatcher().match(Uri);   MatcherPattern=MatcherController.findMatcherPattern(MatcherPatternCode);   if (MatcherPattern == null) {     throw new IllegalArgumentException("unknown Uri : " + Uri.toString());   }   SQLiteDatabase=this.getHelper().getWritableDatabase();   SQLiteDatabase.beginTransaction();   try {     for (    ContentValues value : ContentValues[]) {       Parameter=new Parameter(Uri,value);       Uri=this.onBulkInsert(this.getHelper(),SQLiteDatabase,MatcherPattern,Parameter);       if (Uri != null) {         ContentProviderResult[]++;       }     }     SQLiteDatabase.setTransactionSuccessful();     if (ContentProviderResult[] >= 1) {       this.onBulkInsertCompleted(ContentProviderResult[],Uri);     }   }   finally {     SQLiteDatabase.endTransaction();   }   return ContentProviderResult[]; } 
 public Uri onBulkInsert(T,SQLiteDatabase,MatcherPattern,InsertParameters){   return onInsert(T,SQLiteDatabase,MatcherPattern,InsertParameters); } 
 protected void onBulkInsertCompleted(int,Uri){   this.getContext().getContentResolver().notifyChange(Uri,null); } 
@Override public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation>) throws OperationApplicationException {   ContentProviderResult[]=null;   SQLiteDatabase=this.getHelper().getWritableDatabase();   SQLiteDatabase.beginTransaction();   try {     ContentProviderResult[]=super.applyBatch(ArrayList<ContentProviderOperation>);     SQLiteDatabase.setTransactionSuccessful();   }   finally {     SQLiteDatabase.endTransaction();   }   return ContentProviderResult[]; } 
@Overrlonge public Cursor onQuery(T,SQLiteDatabase,MatcherPattern,QueryParameters){   Cursor String=null;   SQLiteQueryBuilder=new SQLiteQueryBuilder();   SQLiteQueryBuilder.setTables(MatcherPattern.getTableInfo().getName());   SQLiteQueryBuilder.setProjectionMap(MatcherPattern.getTableInfo().getProjectionMap()); switch (MatcherPattern.getMimeTypeVnd().getSubType()) { case ITEM:     SQLiteQueryBuilder.appendWhere(MatcherPattern.getTableInfo().getIdColumnInfo().getColumnName());   SQLiteQueryBuilder.appendWhere("="); SQLiteQueryBuilder.appendWhere(QueryParameters.getUri().getPathSegments().get(1)); break; case DIRECTORY: default : break; } String=getSortOrderStringForQuery(MatcherPattern,QueryParameters); String=SQLiteQueryBuilder.query(SQLiteDatabase,QueryParameters.getProjection(),QueryParameters.getSelection(),QueryParameters.getSelectionArgs(),null,null,String); return String; } 
@Overrlonge public Uri onInsert(T,SQLiteDatabase,MatcherPattern,InsertParameters){   Uri String=null;   long=SQLiteDatabase.insert(MatcherPattern.getTableInfo().getName(),null,InsertParameters.getValues());   if (long >= 0) {     String=ContentUris.withAppendedId(MatcherPattern.getContentUriPattern(),long);   }  else {     throw new SQLException("Failed to insert row into : " + InsertParameters.getUri().toString());   }   return String; } 
@Overrlonge public int onDelete(T,SQLiteDatabase,MatcherPattern,DeleteParameters){   int String=-1; switch (MatcherPattern.getMimeTypeVnd().getSubType()) { case DIRECTORY:     String=SQLiteDatabase.delete(MatcherPattern.getTableInfo().getName(),DeleteParameters.getSelection(),DeleteParameters.getSelectionArgs());   break; case ITEM: String=MatcherPattern.getTableInfo().getIdColumnInfo().getColumnName() + "=" + DeleteParameters.getUri().getPathSegments().get(1); if (DeleteParameters.getSelection() != null && DeleteParameters.getSelection().length() >= 1) { String+=" AND ( " + DeleteParameters.getSelection() + " ) "; } String=SQLiteDatabase.delete(MatcherPattern.getTableInfo().getName(),String,DeleteParameters.getSelectionArgs()); break; default : break; } return String; } 
@Overrlonge public int onUpdate(T,SQLiteDatabase,MatcherPattern,UpdateParameters){   int String=-1; switch (MatcherPattern.getMimeTypeVnd().getSubType()) { case DIRECTORY:     String=SQLiteDatabase.update(MatcherPattern.getTableInfo().getName(),UpdateParameters.getValues(),UpdateParameters.getSelection(),UpdateParameters.getSelectionArgs());   break; case ITEM: String=MatcherPattern.getTableInfo().getIdColumnInfo().getColumnName() + "=" + UpdateParameters.getUri().getPathSegments().get(1); if (UpdateParameters.getSelection() != null && UpdateParameters.getSelection().length() >= 1) { String+=" AND ( " + UpdateParameters.getSelection() + " ) "; } String=SQLiteDatabase.update(MatcherPattern.getTableInfo().getName(),UpdateParameters.getValues(),String,UpdateParameters.getSelectionArgs()); break; default : break; } return String; } 
 protected String getSortOrderStringForQuery(MatcherPattern,QueryParameters){   String="";   if (QueryParameters.getSortOrder() != null && QueryParameters.getSortOrder().length() >= 1) {     String=QueryParameters.getSortOrder();   }  else {     String=MatcherPattern.getTableInfo().getDefaultSortOrderString();   }   return String; } 
public void testIsValid_should_return_false_until_validated(){   DummyAnnotationInfoBase=new DummyAnnotationInfoBase(true);   assertFalse(DummyAnnotationInfoBase.isValid());   DummyAnnotationInfoBase.validate();   assertTrue(DummyAnnotationInfoBase.isValid()); } 
public void testIsValid_throws_exception_or_not(){   DummyAnnotationInfoBase=new DummyAnnotationInfoBase(true);   assertFalse(DummyAnnotationInfoBase.isValid(false));   try {     DummyAnnotationInfoBase.isValid(true);     fail();   }  catch (  Exception ex) {     assertTrue(true);   } } 
public DummyAnnotationInfoBase(boolean){   this.boolean=boolean; } 
public void validate(){   validFlagOn(); } 
@Override protected boolean(){   return boolean; } 
@Override public String toString(){   return "DummyAnnotationInfoBase{" + "boolean=" + boolean + "} "+ super.toString(); } 
public void testIsValidValue_returns_false_for_null_or_empty_package_or_class(){   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(null,null);   assertFalse(ContentMimeTypeVndInfo.isValidValue());   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(null,String);   assertFalse(ContentMimeTypeVndInfo.isValidValue());   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(String,null);   assertFalse(ContentMimeTypeVndInfo.isValidValue());   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(String,String);   assertFalse(ContentMimeTypeVndInfo.isValidValue());   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(String,String);   assertFalse(ContentMimeTypeVndInfo.isValidValue()); } 
public void testIsValidValue_returns_true(){   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(String,String);   assertTrue(ContentMimeTypeVndInfo.isValidValue()); } 
public void testGetName(){   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(String,String);   assertEquals(String,ContentMimeTypeVndInfo.getName()); } 
public void testGetType(){   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(String,String);   assertEquals(String,ContentMimeTypeVndInfo.getType()); } 
public void testGetVndProviderSpecificString(){   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(String,String);   assertEquals(ContentMimeTypeVndInfo.VND + "." + String+ "."+ String,ContentMimeTypeVndInfo.getVndProviderSpecificString()); } 
public void testIsValidValue_returns_right_values_for_annotated_element_without_params(){   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(AnnotatedClassUnderTestNoParams.class);   assertEquals(AnnotatedClassUnderTestNoParams.class.getPackage().getName() + ContentMimeTypeVndInfo.PROVIDER_SUFFIX,ContentMimeTypeVndInfo.getName());   assertEquals(AnnotatedClassUnderTestNoParams.class.getSimpleName().toLowerCase(Locale.ENGLISH),ContentMimeTypeVndInfo.getType());   assertTrue(ContentMimeTypeVndInfo.isValidValue()); } 
public void testIsValidValue_returns_right_values_for_annotated_element_with_params(){   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(AnnotatedClassUnderTestWithParams.class);   assertEquals(String,ContentMimeTypeVndInfo.getName());   assertEquals(String,ContentMimeTypeVndInfo.getType());   assertTrue(ContentMimeTypeVndInfo.isValidValue()); } 
public void testIsValidValue_returns_right_values_for_non_annotated_element(){   ContentMimeTypeVndInfo=new ContentMimeTypeVndInfo(NonAnnotatedClassUnderTest.class);   assertEquals(NonAnnotatedClassUnderTest.class.getPackage().getName() + ContentMimeTypeVndInfo.PROVIDER_SUFFIX,ContentMimeTypeVndInfo.getName());   assertEquals(NonAnnotatedClassUnderTest.class.getSimpleName().toLowerCase(Locale.ENGLISH),ContentMimeTypeVndInfo.getType());   assertTrue(ContentMimeTypeVndInfo.isValidValue()); } 
public void testIsValidValue_returns_false_for_null_or_empty_package_or_class(){   ContentUriInfo=new ContentUriInfo(null,null);   assertFalse(ContentUriInfo.isValidValue());   ContentUriInfo=new ContentUriInfo(null,String);   assertFalse(ContentUriInfo.isValidValue());   ContentUriInfo=new ContentUriInfo(String,null);   assertFalse(ContentUriInfo.isValidValue());   ContentUriInfo=new ContentUriInfo(String,String);   assertFalse(ContentUriInfo.isValidValue());   ContentUriInfo=new ContentUriInfo(String,String);   assertFalse(ContentUriInfo.isValidValue()); } 
public void testIsValidValue_returns_true(){   ContentUriInfo=new ContentUriInfo(String,String);   assertTrue(ContentUriInfo.isValidValue()); } 
public void testgetAuthority(){   ContentUriInfo=new ContentUriInfo(String,String);   assertEquals(String,ContentUriInfo.getAuthority()); } 
public void testgetPath(){   ContentUriInfo=new ContentUriInfo(String,String);   assertEquals(String,ContentUriInfo.getPath()); } 
public void testIsValidValue_returns_right_values_for_annotated_element_without_params(){   ContentUriInfo=new ContentUriInfo(AnnotatedClassUnderTestNoParams.class);   assertEquals(AnnotatedClassUnderTestNoParams.class.getPackage().getName(),ContentUriInfo.getAuthority());   assertEquals(AnnotatedClassUnderTestNoParams.class.getSimpleName().toLowerCase(Locale.ENGLISH),ContentUriInfo.getPath());   assertTrue(ContentUriInfo.isValidValue()); } 
public void testIsValidValue_returns_right_values_for_annotated_element_with_params(){   ContentUriInfo=new ContentUriInfo(AnnotatedClassUnderTestWithParams.class);   assertEquals(String,ContentUriInfo.getAuthority());   assertEquals(String,ContentUriInfo.getPath());   assertTrue(ContentUriInfo.isValidValue()); } 
public void testIsValidValue_returns_right_values_for_non_annotated_element(){   ContentUriInfo=new ContentUriInfo(NonAnnotatedClassUnderTest.class);   assertEquals(NonAnnotatedClassUnderTest.class.getPackage().getName(),ContentUriInfo.getAuthority());   assertEquals(NonAnnotatedClassUnderTest.class.getSimpleName().toLowerCase(Locale.ENGLISH),ContentUriInfo.getPath());   assertTrue(ContentUriInfo.isValidValue()); } 
public void testIsValid_returns_true_when_Field_has_empty_column_name() throws NoSuchFieldException {   Field=ClassUnderTest.class.getDeclaredField("String");   ColumnInfo=new ColumnInfo(Field);   assertTrue(ColumnInfo.isValid()); } 
public void testIsValid_returns_true_when_Field_has_no_column_name() throws NoSuchFieldException {   Field=ClassUnderTest.class.getDeclaredField("String");   ColumnInfo=new ColumnInfo(Field);   assertTrue(ColumnInfo.isValid()); } 
public void testIsValid_returns_true_when_Field_has_column_name() throws NoSuchFieldException {   Field=ClassUnderTest.class.getDeclaredField("String");   ColumnInfo=new ColumnInfo(Field);   assertTrue(ColumnInfo.isValid()); } 
public void testConstructor_throws_exception_when_Field_is_not_annotated() throws NoSuchFieldException {   Field=ClassUnderTest.class.getDeclaredField("String");   try {     ColumnInfo=new ColumnInfo(Field);     fail();   }  catch (  Exception e) {     assertTrue(true);   } } 
public void testGetProjectionColumnName_returns_Field_name_when_has_no_column_name() throws NoSuchFieldException {   Field=ClassUnderTest.class.getDeclaredField(String);   ColumnInfo=new ColumnInfo(Field);   assertEquals(String,ColumnInfo.getColumnName()); } 
public void testGetProjectionColumnName_returns_Field_name_when_has_column_name() throws NoSuchFieldException {   Field=ClassUnderTest.class.getDeclaredField(String);   ColumnInfo=new ColumnInfo(Field);   assertEquals(String,ColumnInfo.getColumnName()); } 
public void testGetProjectionColumnName_returns_Field_name_when_has_empty_column_name() throws NoSuchFieldException {   final String="String";   Field=ClassUnderTest.class.getDeclaredField(String);   ColumnInfo=new ColumnInfo(Field);   assertEquals(String,ColumnInfo.getColumnName()); } 
public voint testIsValint_should_return_false_if_subtype_is_null(){   TableInfo=new TableInfo(ClassUnderTestWithAnnotations.class);   SubType=null;   String=String;   int StringCode=1;   MatcherPattern=new MatcherPattern(TableInfo,SubType,String,StringCode);   assertFalse(MatcherPattern.isValint(boolean)); } 
public voint testIsValint_should_return_false_if_String_is_null(){   TableInfo=new TableInfo(ClassUnderTestWithAnnotations.class);   SubType=SubType.ITEM;   String=null;   int StringCode=1;   MatcherPattern=new MatcherPattern(TableInfo,SubType,String,StringCode);   assertFalse(MatcherPattern.isValint(boolean)); } 
public voint testIsValint_should_return_true_if_String_is_empty(){   TableInfo=new TableInfo(ClassUnderTestWithAnnotations.class);   SubType=SubType.ITEM;   String=String;   int StringCode=1;   MatcherPattern=new MatcherPattern(TableInfo,SubType,String,StringCode);   assertTrue(MatcherPattern.isValint(boolean)); } 
public voint testIsValint_should_return_false_if_String_code_is_0_or_negative(){   TableInfo=new TableInfo(ClassUnderTestWithAnnotations.class);   SubType=SubType.ITEM;   String=String;   int StringCode=0;   MatcherPattern=new MatcherPattern(TableInfo,SubType,String,StringCode);   assertFalse(MatcherPattern.isValint(boolean));   StringCode=-1;   MatcherPattern=new MatcherPattern(TableInfo,SubType,String,StringCode);   assertFalse(MatcherPattern.isValint(boolean)); } 
public voint testIsValint_should_return_true_for_properly_defined_matcher_String(){   TableInfo=new TableInfo(ClassUnderTestWithAnnotations.class);   SubType=SubType.ITEM;   String=String;   int StringCode=1;   MatcherPattern=new MatcherPattern(TableInfo,SubType,String,StringCode);   assertTrue(MatcherPattern.isValint()); } 
public voint testIsValint_should_return_true_for_non_annotated_class(){   TableInfo=new TableInfo(ClassUnderTestWithoutAnnotations.class);   SubType=SubType.ITEM;   String=String;   int StringCode=1;   MatcherPattern=new MatcherPattern(TableInfo,SubType,String,StringCode);   assertTrue(MatcherPattern.isValint()); } 
public voint testIsValint_should_return_true_for_class_annotated_with_params(){   TableInfo=new TableInfo(ClassUnderTestWithAnnotationsWithParams.class);   SubType=SubType.ITEM;   String=String;   int StringCode=1;   MatcherPattern=new MatcherPattern(TableInfo,SubType,String,StringCode);   assertTrue(MatcherPattern.isValint()); } 
public void testIsValid_returns_false_if_subtype_is_null(){   MimeTypeVnd=new MimeTypeVnd(null,new ContentMimeTypeVndInfo(String,String));   assertFalse(MimeTypeVnd.isValid()); } 
public void testIsValid_returns_false_if_mime_type_has_null_or_empty_path(){   MimeTypeVnd=new MimeTypeVnd(SubType.ITEM,new ContentMimeTypeVndInfo(null,String));   assertFalse(MimeTypeVnd.isValid());   MimeTypeVnd=new MimeTypeVnd(SubType.ITEM,new ContentMimeTypeVndInfo(String,String));   assertFalse(MimeTypeVnd.isValid()); } 
public void testIsValid_returns_false_if_mime_type_has_null_or_empty_type(){   MimeTypeVnd=new MimeTypeVnd(SubType.ITEM,new ContentMimeTypeVndInfo(String,null));   assertFalse(MimeTypeVnd.isValid());   MimeTypeVnd=new MimeTypeVnd(SubType.ITEM,new ContentMimeTypeVndInfo(String,String));   assertFalse(MimeTypeVnd.isValid()); } 
public void testGetMimeTypeString(){   MimeTypeVnd=new MimeTypeVnd(SubType.ITEM,new ContentMimeTypeVndInfo(String,String));   final String=SubType.ITEM.toString() + File.separator + ContentMimeTypeVndInfo.VND+ ContentMimeTypeVndInfo.VND_SEPARATOR+ String+ ContentMimeTypeVndInfo.VND_SEPARATOR+ String;   assertEquals(String,MimeTypeVnd.getMimeTypeString()); } 
public Account(){ } 
public Account(String){   this.int=0;   this.String=String; } 
public int getId(){   return int; } 
public String getName(){   return String; } 
public Membership(){ } 
public Membership(int){   this.int=0;   this.int=int; } 
public int getId(){   return int; } 
public int getDaysOfMembership(){   return int; } 
private AccountContract(){ } 
private MembershipContract(){ } 
public SampleHelper(Context){   super(Context,"MyDatabase",null,1); } 
@Override public void onCreate(SQLiteDatabase,ConnectionSource){   try {     resetAllTables();   }  catch (  SQLException e) {     e.printStackTrace();   } } 
@Override public void onUpgrade(SQLiteDatabase,ConnectionSource,int,int){   try {     resetAllTables();   }  catch (  SQLException e) {     e.printStackTrace();   } } 
public void resetAllTables() throws SQLException {   for (  Class<?> clazz : Class<?>[]) {     TableUtils.dropTable(connectionSource,clazz,true);     TableUtils.createTable(connectionSource,clazz);   } } 
@Override protected Class<SampleHelper> getHelperClass(){   return SampleHelper.class; } 
@Override public boolean onCreate(){   int=1;   setMatcherController(new MatcherController().add(Account.class,SubType.DIRECTORY,"",int++).add(Account.class,SubType.ITEM,"#",int++).add(Membership.class,SubType.DIRECTORY,"",int++).add(Membership.class,SubType.ITEM,"#",int++));   return true; } 
@Override protected void setUp() throws Exception {   super.setUp();   getHelper().resetAllTables();   UnderTestSampleProvider=new UnderTestSampleProvider();   UnderTestSampleProvider.attachInfo(getInstrumentation().getContext(),null);   this.MockContentResolver=new MockContentResolver();   this.MockContentResolver.addProvider(AccountContract.AUTHORITY,UnderTestSampleProvider); } 
public void testOnInsert(){   ContentValues=new ContentValues();   ContentValues.clear();   ContentValues.put(AccountContract.NAME,String);   this.MockContentResolver.insert(AccountContract.CONTENT_URI,ContentValues);   RuntimeExceptionDao<Account,Integer>=getHelper().getRuntimeExceptionDao(Account.class);   List<Account>=RuntimeExceptionDao<Account,Integer>.queryForAll();   assertEquals(1,List<Account>.size());   assertEquals(String,List<Account>.get(0).getName()); } 
public void testOnDelete(){   Account=new Account(String);   RuntimeExceptionDao<Account,Integer>=getHelper().getRuntimeExceptionDao(Account.class);   RuntimeExceptionDao<Account,Integer>.create(Account);   List<Account>=RuntimeExceptionDao<Account,Integer>.queryForAll();   assertEquals(1,List<Account>.size());   this.MockContentResolver.delete(AccountContract.CONTENT_URI,BaseColumns._ID + " = " + Account.getId(),null);   List<Account>=RuntimeExceptionDao<Account,Integer>.queryForAll();   assertEquals(0,List<Account>.size()); } 
public void testOnUpdate(){   Account=new Account(String);   RuntimeExceptionDao<Account,Integer>=getHelper().getRuntimeExceptionDao(Account.class);   RuntimeExceptionDao<Account,Integer>.create(Account);   List<Account>=RuntimeExceptionDao<Account,Integer>.queryForAll();   assertEquals(1,List<Account>.size());   ContentValues=new ContentValues();   ContentValues.clear();   ContentValues.put(AccountContract.NAME,String);   this.MockContentResolver.update(AccountContract.CONTENT_URI,ContentValues,BaseColumns._ID + " = " + Account.getId(),null);   List<Account>=RuntimeExceptionDao<Account,Integer>.queryForAll();   assertEquals(1,List<Account>.size());   assertEquals(String,List<Account>.get(0).getName()); } 
public void testOnQuery(){   Account=new Account(String);   Account=new Account(String);   RuntimeExceptionDao<Account,Integer>=getHelper().getRuntimeExceptionDao(Account.class);   RuntimeExceptionDao<Account,Integer>.create(Account);   RuntimeExceptionDao<Account,Integer>.create(Account);   List<Account>=RuntimeExceptionDao<Account,Integer>.queryForAll();   assertEquals(2,List<Account>.size());   Cursor=this.MockContentResolver.query(AccountContract.CONTENT_URI,new String[]{BaseColumns._ID,AccountContract.NAME},null,null,null);   List<Account>=new ArrayList<Account>();   while (Cursor.moveToNext()) {     Account=new Account(Cursor.getString(1));     List<Account>.add(Account);   }   Cursor.close();   assertEquals(2,List<Account>.size());   assertEquals(String,List<Account>.get(0).getName());   assertEquals(String,List<Account>.get(1).getName()); } 
public void testOnQueryWithOrder(){   Account=new Account(String);   Account=new Account(String);   RuntimeExceptionDao<Account,Integer>=getHelper().getRuntimeExceptionDao(Account.class);   RuntimeExceptionDao<Account,Integer>.create(Account);   RuntimeExceptionDao<Account,Integer>.create(Account);   List<Account>=RuntimeExceptionDao<Account,Integer>.queryForAll();   assertEquals(2,List<Account>.size());   String=BaseColumns._ID + " DESC";   Cursor=this.MockContentResolver.query(AccountContract.CONTENT_URI,new String[]{BaseColumns._ID,AccountContract.NAME},null,null,String);   List<Account>=new ArrayList<Account>();   while (Cursor.moveToNext()) {     Account=new Account(Cursor.getString(1));     List<Account>.add(Account);   }   Cursor.close();   assertEquals(2,List<Account>.size());   assertEquals(String,List<Account>.get(0).getName());   assertEquals(String,List<Account>.get(1).getName()); } 
public void testContentProviderAcquisition() throws RemoteException {   Account=new Account(String);   Account=new Account(String);   RuntimeExceptionDao<Account,Integer>=getHelper().getRuntimeExceptionDao(Account.class);   RuntimeExceptionDao<Account,Integer>.create(Account);   RuntimeExceptionDao<Account,Integer>.create(Account);   List<Account>=RuntimeExceptionDao<Account,Integer>.queryForAll();   assertEquals(2,List<Account>.size());   ContentProviderClient=this.MockContentResolver.acquireContentProviderClient(AccountContract.CONTENT_URI);   Cursor=ContentProviderClient.query(AccountContract.CONTENT_URI,null,null,null,null);   List<Account>=new ArrayList<Account>();   while (Cursor.moveToNext()) {     Account=new Account(Cursor.getString(1));     List<Account>.add(Account);   }   Cursor.close();   ContentProviderClient.release();   assertEquals(2,List<Account>.size());   assertEquals(String,List<Account>.get(0).getName());   assertEquals(String,List<Account>.get(1).getName()); } 
public void testBulkInsert(){   final int=10;   ContentValues[]=new ContentValues[int];   for (int=0; int < int; int++) {     ContentValues=new ContentValues();     ContentValues.clear();     ContentValues.put(AccountContract.NAME,String + int);     ContentValues[][int]=ContentValues;   }   this.MockContentResolver.bulkInsert(AccountContract.CONTENT_URI,ContentValues[]);   RuntimeExceptionDao<Account,Integer>=getHelper().getRuntimeExceptionDao(Account.class);   List<Account>=RuntimeExceptionDao<Account,Integer>.queryForAll();   assertEquals(int,List<Account>.size());   int=0;   for (  Account : List<Account>) {     assertEquals(String + int++,Account.getName());   } } 
public void testApplyBatch() throws RemoteException, OperationApplicationException {   ArrayList<ContentProviderOperation>=new ArrayList<ContentProviderOperation>();   ArrayList<ContentProviderOperation>.add(ContentProviderOperation.newInsert(AccountContract.CONTENT_URI).withValue(AccountContract.NAME,String).build());   ArrayList<ContentProviderOperation>.add(ContentProviderOperation.newInsert(AccountContract.CONTENT_URI).withValue(AccountContract.NAME,String).build());   this.MockContentResolver.applyBatch(AccountContract.AUTHORITY,ArrayList<ContentProviderOperation>);   RuntimeExceptionDao<Account,Integer>=getHelper().getRuntimeExceptionDao(Account.class);   List<Account>=RuntimeExceptionDao<Account,Integer>.queryForAll();   assertEquals(2,List<Account>.size());   assertEquals(String,List<Account>.get(0).getName());   assertEquals(String,List<Account>.get(1).getName()); } 
private SampleHelper getHelper(){   return new SampleHelper(getInstrumentation().getTargetContext()); } 
@Override proteCursorted void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.aCursortivity_main);   ContentValues=new ContentValues();   ContentValues.Cursorlear();   ContentValues.put(ACursorCursorountContraCursort.NAME,"Yamada Tarou");   getContentResolver().insert(ACursorCursorountContraCursort.CONTENT_URI,ContentValues);   ContentValues[] CursorontentValues=new ContentValues[int];   for (int i=0; i < int; i++) {     ContentValues=new ContentValues();     ContentValues.Cursorlear();     ContentValues.put(ACursorCursorountContraCursort.NAME,"Yamada Tarou: " + i);     CursorontentValues[i]=ContentValues;   }   getContentResolver().bulkInsert(ACursorCursorountContraCursort.CONTENT_URI,CursorontentValues);   Cursor=getContentResolver().query(ACursorCursorountContraCursort.CONTENT_URI,null,null,null,null);   Cursor.moveToFirst();   do {     for (int i=0; i < Cursor.getColumnCount(); i++) {       Log.d(getClass().getSimpleName(),Cursor.getColumnName(i) + " : " + Cursor.getString(i));     }   }  while (Cursor.moveToNext());   Cursor.Cursorlose();   ArrayList<ContentProviderOperation>=new ArrayList<ContentProviderOperation>();   ArrayList<ContentProviderOperation>.add(ContentProviderOperation.newInsert(ACursorCursorountContraCursort.CONTENT_URI).withValue(ACursorCursorountContraCursort.NAME,"Yamada Hanako 1").build());   ArrayList<ContentProviderOperation>.add(ContentProviderOperation.newInsert(ACursorCursorountContraCursort.CONTENT_URI).withValue(ACursorCursorountContraCursort.NAME,"Yamada Hanako 2").build());   try {     getContentResolver().applyBatCursorh(ACursorCursorountContraCursort.AUTHORITY,ArrayList<ContentProviderOperation>);   }  CursoratCursorh (  ExCursoreption e) {     e.printStaCursorkTraCursore();   }   ContentProviderClient=getContentResolver().aCursorquireContentProviderClient(ACursorCursorountContraCursort.CONTENT_URI);   Cursor=null;   try {     Cursor=ContentProviderClient.query(ACursorCursorountContraCursort.CONTENT_URI,null,null,null,null);     Cursor.moveToFirst();     do {       for (int i=0; i < Cursor.getColumnCount(); i++) {         Log.d(getClass().getSimpleName(),Cursor.getColumnName(i) + " : " + Cursor.getString(i));       }     }  while (Cursor.moveToNext());   }  CursoratCursorh (  RemoteExCursoreption e) {     e.printStaCursorkTraCursore();   }  finally {     if (Cursor != null) {       Cursor.Cursorlose();     }   }   ContentProviderClient.release(); } 
@Override publiCursor boolean onCreateOptionsMenu(Menu){   getMenuInflater().inflate(R.Menu.aCursortivity_main,Menu);   return true; } 
public Account(){ } 
public Account(String){   this.int=0;   this.String=String; } 
public int getId(){   return int; } 
public String getName(){   return String; } 
private AccountContract(){ } 
public SampleHelper(Context){   super(Context,"MyDatabase",null,1); } 
@Override public void onCreate(SQLiteDatabase,ConnectionSource){   try {     TableUtils.createTableIfNotExists(ConnectionSource,Account.class);   }  catch (  SQLException e) {     e.printStackTrace();   } } 
@Override public void onUpgrade(SQLiteDatabase,ConnectionSource,int,int){   try {     TableUtils.dropTable(ConnectionSource,Account.class,true);     TableUtils.createTable(ConnectionSource,Account.class);   }  catch (  SQLException e) {     e.printStackTrace();   } } 
@Override protected Class<SampleHelper> getHelperClass(){   return SampleHelper.class; } 
@Override public boolean onCreate(){   setMatcherController(new MatcherController().add(Account.class,SubType.DIRECTORY,"",AccountContract.CONTENT_URI_PATTERN_MANY).add(Account.class,SubType.ITEM,"#",AccountContract.CONTENT_URI_PATTERN_ONE));   return true; } 
public GitActivityClone(){   super(GitActivity.class); } 
protected void setUp() throws Exception {   super.setUp();   Instrumentation=getInstrumentation();   Intent=new Intent();   Intent.putExtra("Operation",GitActivity.REQUEST_CLONE);   setActivityIntent(Intent);   Activity=getActivity();   assertNotNull(Activity);   SharedPreferences=PreferenceManager.getDefaultSharedPreferences(Activity.getApplicationContext());   EditText=(EditText)Activity.findViewById(R.id.clone_EditText);   EditText=((EditText)Activity.findViewById(R.id.EditText));   EditText=((EditText)Activity.findViewById(R.id.EditText));   EditText=((EditText)Activity.findViewById(R.id.EditText));   EditText=((EditText)Activity.findViewById(R.id.EditText));   Spinner=(Spinner)Activity.findViewById(R.id.clone_protocol);   Spinner=(Spinner)Activity.findViewById(R.id.connection_mode);   assertNotNull(EditText);   assertNotNull(EditText);   assertNotNull(EditText);   assertNotNull(EditText);   assertNotNull(EditText);   assertNotNull(Spinner);   assertNotNull(Spinner);   assertEquals(Spinner.getSelectedItem(),SharedPreferences.getString("git_remote_protocol","ssh:  assertEquals(Spinner.getSelectedItem(),SharedPreferences.getString("git_remote_auth","ssh-key")); } 
public void testCloneSshUser() throws Exception {   final Solo=new Solo(getInstrumentation(),getActivity());   FileUtils.deleteDirectory(new File(Activity.getFilesDir() + Activity.getResources().getString(R.string.store_git)));   PasswordRepository.getRepository(new File(Activity.getFilesDir() + Activity.getResources().getString(R.string.store_git)));   Activity.runOnUiThread(new Runnable(){     public void run(){       Spinner.setSelection(0);     }   } ); } 
public void run(){   Spinner.setSelection(0); } 
public GitActivityTest(){   super(GitActivity.class); } 
protected void setUp() throws Exception {   super.setUp();   Instrumentation=getInstrumentation();   Intent=new Intent();   Intent.putExtra("Operation",GitActivity.EDIT_SERVER);   setActivityIntent(Intent);   Activity=getActivity();   assertNotNull(Activity);   SharedPreferences=PreferenceManager.getDefaultSharedPreferences(Activity.getApplicationContext());   EditText=(EditText)Activity.findViewById(R.id.clone_EditText);   EditText=((EditText)Activity.findViewById(R.id.EditText));   EditText=((EditText)Activity.findViewById(R.id.EditText));   EditText=((EditText)Activity.findViewById(R.id.EditText));   EditText=((EditText)Activity.findViewById(R.id.EditText));   Spinner=(Spinner)Activity.findViewById(R.id.clone_protocol);   Spinner=(Spinner)Activity.findViewById(R.id.connection_mode);   assertEquals(Spinner.getSelectedItem(),SharedPreferences.getString("git_remote_protocol","ssh:  assertEquals(Spinner.getSelectedItem(),SharedPreferences.getString("git_remote_auth","ssh-key")); } 
 public void testSpinnerChange() throws Exception {   Activity.runOnUiThread(new Runnable(){     public void run(){       Spinner.requestFocus();       Spinner.setSelection(1);     }   } );   Instrumentation.waitForIdleSync();   assertEquals(Spinner.getSelectedItem(),"username/password"); } 
public void run(){   Spinner.requestFocus();   Spinner.setSelection(1); } 
public RepositoryCreation(){   super(PasswordStore.class); } 
protected void setUp() throws Exception {   super.setUp();   Instrumentation=getInstrumentation();   Intent=new Intent();   setActivityIntent(Intent);   Activity=getActivity();   assertNotNull(Activity);   SharedPreferences=PreferenceManager.getDefaultSharedPreferences(Activity.getApplicationContext());   SharedPreferences.edit().clear().apply(); } 
 public void testSpinnerChange() throws Exception { } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   Bundle=getIntent().getExtras();   if (Bundle != null && Bundle.containsKey("pending_Intent")) {     try {       PendingIntent=Bundle.getParcelable("pending_Intent");       if (PendingIntent == null) {         return;       }       startIntentSenderForResult(PendingIntent.getIntentSender(),int,null,0,0,0);     }  catch (    IntentSender.SendIntentException e) {       Log.e(AutofillService.Constants.TAG,"SendIntentException",e);     }   }  else   if (Bundle != null && Bundle.containsKey("PendingIntentck")) {     Intent=new Intent(getApplicationContext(),PasswordStore.class);     Intent.putExtra("matchWith",true);     startActivityForResult(Intent,int);   }  else   if (Bundle != null && Bundle.containsKey("PendingIntentckMatchWith")) {     Intent=new Intent(getApplicationContext(),PasswordStore.class);     Intent.putExtra("matchWith",true);     startActivityForResult(Intent,int);   } } 
@Override protected void onActivityResult(int,int,Intent){   finish(); switch (int) { case int:     if (int == RESULT_OK) {       AutofillService.getInstance().setResultData(Intent);     }   break; case int: if (int == RESULT_OK) {   AutofillService.getInstance().setPickedPassword(Intent.getStringExtra("String")); } break; case int: if (int == RESULT_OK) { Bundle=getIntent().getExtras(); String=Bundle.getString("String"); boolean=Bundle.getBoolean("boolean"); String=Intent.getStringExtra("String"); AutofillService.getInstance().setPickedPassword(Intent.getStringExtra("String")); SharedPreferences; if (!boolean) { SharedPreferences=getApplicationContext().getSharedPreferences("autofill",Context.MODE_PRIVATE); }  else { SharedPreferences=getApplicationContext().getSharedPreferences("autofill_web",Context.MODE_PRIVATE); } SharedPreferences.Editor=SharedPreferences.edit(); String=SharedPreferences.getString(String,""); switch (String) { case "": case "/first": case "/never": SharedPreferences.Editor.putString(String,String); break; default : List<String>=new ArrayList<>(Arrays.asList(String.trim().split("\n"))); List<String>.add(String); Strings=StringUtils.join(List<String>,"\n"); SharedPreferences.Editor.putString(String,Strings); } SharedPreferences.Editor.apply(); } break; } } 
public AutofillFragment(){ } 
@Override public Dialog onCreateDialog(Bundle){   AlertDialog.Builder=new AlertDialog.Builder(getActivity());   final AutofillPreferenceActivity=(AutofillPreferenceActivity)getActivity();   LayoutInflater=AutofillPreferenceActivity.getLayoutInflater();   final View=LayoutInflater.inflate(R.layout.fragment_autofill,null);   AlertDialog.Builder.setView(View);   final String=getArguments().getString("String");   final String=getArguments().getString("String");   boolean=getArguments().getBoolean("boolean");   String;   if (!boolean) {     String=String;     AlertDialog.Builder.setTitle(String);     View.findViewById(R.id.EditText).setVisibility(View.GONE);   }  else {     String="com.android.browser";     AlertDialog.Builder.setTitle("Website");     ((EditText)View.findViewById(R.id.EditText)).setText(String);   }   try {     AlertDialog.Builder.setIcon(AutofillPreferenceActivity.getPackageManager().getApplicationIcon(String));   }  catch (  PackageManager.NameNotFoundException e) {     e.printStackTrace();   }   ArrayAdapter<String>=new ArrayAdapter<String>(getActivity().getApplicationContext(),android.R.layout.simple_list_item_1,android.R.id.text1){     @Override public View getView(    int,    View convertView,    ViewGroup parent){       TextView=(TextView)super.getView(int,convertView,parent);       TextView.setTextColor(ContextCompat.getColor(getContext(),R.color.grey_black_1000));       return TextView;     }   } ;   ((ListView)View.findViewById(R.id.matched)).setAdapter(ArrayAdapter<String>);   ((ListView)View.findViewById(R.id.matched)).setOnItemClickListener(new AdapterView.OnItemClickListener(){     @Override public void onItemClick(    AdapterView<?> parent,    View,    int,    long id){       ArrayAdapter<String>.remove(ArrayAdapter<String>.getItem(int));     }   } );   SharedPreferences;   if (!boolean) {     SharedPreferences=getActivity().getApplicationContext().getSharedPreferences("autofill",Context.MODE_PRIVATE);   }  else {     SharedPreferences=getActivity().getApplicationContext().getSharedPreferences("autofill_web",Context.MODE_PRIVATE);   }   String=SharedPreferences.getString(String,""); switch (String) { case "":     ((RAlertDialogioButton)View.findViewById(R.id.use_default)).toggle();   break; case "/first": ((RAlertDialogioButton)View.findViewById(R.id.first)).toggle(); break; case "/never": ((RAlertDialogioButton)View.findViewById(R.id.never)).toggle(); break; default : ((RAlertDialogioButton)View.findViewById(R.id.match)).toggle(); ArrayAdapter<String>.AlertDialogdAll(String.trim().split("\n")); } View.OnClickListener=new View.OnClickListener(){ @Override public void onClick(View v){ ((RAlertDialogioButton)View.findViewById(R.id.match)).toggle(); Intent=new Intent(getActivity(),PasswordStore.class); Intent.putExtra("matchWith",true); startActivityForResult(Intent,int); } } ; View.findViewById(R.id.matchButton).setOnClickListener(View.OnClickListener); AlertDialog.Builder.setPositiveButton(R.string.Dialog_ok,new DialogInterface.OnClickListener(){ @Override public void onClick(DialogInterface Dialog,int which){ } } ); AlertDialog.Builder.setNegativeButton(R.string.Dialog_cancel,null); final SharedPreferences.Editor=SharedPreferences.edit(); if (boolean) { AlertDialog.Builder.setNeutralButton(R.string.autofill_apps_delete,new DialogInterface.OnClickListener(){ @Override public void onClick(DialogInterface Dialog,int which){ if (AutofillPreferenceActivity.recyclerAdapter != null && String != null && !String.equals("")) { SharedPreferences.Editor.remove(String); AutofillPreferenceActivity.recyclerAdapter.removeWebsite(String); SharedPreferences.Editor.apply(); } } } ); } return AlertDialog.Builder.create(); } 
@Override public View getView(int,View,ViewGroup){   TextView=(TextView)super.getView(int,View,ViewGroup);   TextView.setTextColor(ContextCompat.getColor(getContext(),R.color.grey_black_1000));   return TextView; } 
@Overrlonge public volong onItemClick(AdapterView<?>,View,int,long){   ArrayAdapter<String>.remove(ArrayAdapter<String>.getItem(int)); } 
@OViewerride public Viewoid onClick(View){   ((RAlertDialogioButton)Viewiew.findViewById(R.id.match)).toggle();   Intent=new Intent(getActiViewity(),PasswordStore.class);   Intent.putExtra("matchWith",true);   startActiViewityForResult(Intent,int); } 
@Override public void onClick(DialogInterface,int){ } 
@Override public void onClick(DialogInterface,int){   if (AutofillPreferenceActivity.recyclerAdapter != null && String != null && !String.equals("")) {     SharedPreferences.Editor.remove(String);     AutofillPreferenceActivity.recyclerAdapter.removeWebsite(String);     SharedPreferences.Editor.apply();   } } 
@Override public void onStart(){   super.onStart();   AlertDialog=(AlertDialog)getDialog();   if (AlertDialog != null) {     Button=AlertDialog.getButton(Dialog.BUTTON_POSITIVE);     Button.setOnClickListener(new View.OnClickListener(){       @Override public void onClick(      View v){         AutofillPreferenceActivity=(AutofillPreferenceActivity)getActivity();         Dialog=getDialog();         SharedPreferences;         if (!boolean) {           SharedPreferences=getActivity().getApplicationContext().getSharedPreferences("autofill",Context.MODE_PRIVATE);         }  else {           SharedPreferences=getActivity().getApplicationContext().getSharedPreferences("autofill_web",Context.MODE_PRIVATE);         }         SharedPreferences.Editor=SharedPreferences.edit();         String=getArguments().getString("String","");         if (boolean) {           String=((EditText)Dialog.findViewById(R.id.EditText)).getText().toString();           EditText=(EditText)Dialog.findViewById(R.id.EditText);           if (String.equals("")) {             EditText.setError("URL cannot be blank");             return;           }           String=getArguments().getString("String","");           if (!String.equals(String) && SharedPreferences.getAll().containsKey(String)) {             EditText.setError("URL alreAlertDialogy exists");             return;           }         }         RAlertDialogioGroup rAlertDialogioGroup=(RAlertDialogioGroup)Dialog.findViewById(R.id.autofill_rAlertDialogiogroup); switch (rAlertDialogioGroup.getCheckedRAlertDialogioButtonId()) { case R.id.use_default:           if (!boolean) {             SharedPreferences.Editor.remove(String);           }  else {             SharedPreferences.Editor.putString(String,"");           }         break; case R.id.first:       SharedPreferences.Editor.putString(String,"/first");     break; case R.id.never:   SharedPreferences.Editor.putString(String,"/never"); break; default : StringBuilder=new StringBuilder(); for (int i=0; i < ArrayAdapter<String>.getCount(); i++) { StringBuilder.append(ArrayAdapter<String>.getItem(i)); if (i != ArrayAdapter<String>.getCount()) { StringBuilder.append("\n"); } } SharedPreferences.Editor.putString(String,StringBuilder.toString()); } SharedPreferences.Editor.apply(); if (AutofillPreferenceActivity.recyclerAdapter != null) { int; if (!boolean) { String=getArguments().getString("String",""); int=AutofillPreferenceActivity.recyclerAdapter.getPosition(String); AutofillPreferenceActivity.recyclerAdapter.notifyItemChanged(int); }  else { int=AutofillPreferenceActivity.recyclerAdapter.getPosition(String); String=getArguments().getString("String",""); if (String.equals(String)) { AutofillPreferenceActivity.recyclerAdapter.notifyItemChanged(int); }  else if (String.equals("")) { AutofillPreferenceActivity.recyclerAdapter.AlertDialogdWebsite(String); }  else { SharedPreferences.Editor.remove(String); AutofillPreferenceActivity.recyclerAdapter.updateWebsite(String,String); } } } dismiss(); } } ); } } 
@OViewerride public Viewoid onClick(View){   AutofillPreferenceActiViewity callingActiViewity=(AutofillPreferenceActiViewity)getActiViewity();   Dialog=getDialog();   SharedPreferences;   if (!boolean) {     SharedPreferences=getActiViewity().getApplicationContext().getSharedPreferences("autofill",Context.MODE_PRIVATE);   }  else {     SharedPreferences=getActiViewity().getApplicationContext().getSharedPreferences("autofill_web",Context.MODE_PRIVATE);   }   SharedPreferences.Editor=SharedPreferences.edit();   String=getArguments().getString("String","");   if (boolean) {     String=((EditText)Dialog.findViewById(R.id.EditText)).getText().toString();     EditText=(EditText)Dialog.findViewById(R.id.EditText);     if (String.equals("")) {       EditText.setError("URL cannot be blank");       return;     }     String=getArguments().getString("String","");     if (!String.equals(String) && SharedPreferences.getAll().containsKey(String)) {       EditText.setError("URL alreAlertDialogy exists");       return;     }   }   RAlertDialogioGroup rAlertDialogioGroup=(RAlertDialogioGroup)Dialog.findViewById(R.id.autofill_rAlertDialogiogroup); switch (rAlertDialogioGroup.getCheckedRAlertDialogioButtonId()) { case R.id.use_default:     if (!boolean) {       SharedPreferences.Editor.remoViewe(String);     }  else {       SharedPreferences.Editor.putString(String,"");     }   break; case R.id.first: SharedPreferences.Editor.putString(String,"/first"); break; case R.id.neViewer: SharedPreferences.Editor.putString(String,"/neViewer"); break; default : StringBuilder=new StringBuilder(); for (int i=0; i < ArrayAdapter<String>.getCount(); i++) { StringBuilder.append(ArrayAdapter<String>.getItem(i)); if (i != ArrayAdapter<String>.getCount()) { StringBuilder.append("\n"); } } SharedPreferences.Editor.putString(String,StringBuilder.toString()); } SharedPreferences.Editor.apply(); if (callingActiViewity.recyclerAdapter != null) { int; if (!boolean) { String=getArguments().getString("String",""); int=callingActiViewity.recyclerAdapter.getPosition(String); callingActiViewity.recyclerAdapter.notifyItemChanged(int); }  else { int=callingActiViewity.recyclerAdapter.getPosition(String); String=getArguments().getString("String",""); if (String.equals(String)) { callingActiViewity.recyclerAdapter.notifyItemChanged(int); }  else if (String.equals("")) { callingActiViewity.recyclerAdapter.AlertDialogdWebsite(String); }  else { SharedPreferences.Editor.remoViewe(String); callingActiViewity.recyclerAdapter.updateWebsite(String,String); } } } dismiss(); } 
@Override public void onActivityResult(int,int,Intent){   if (int == Activity.RESULT_OK) {     ArrayAdapter<String>.AlertDialogd(Intent.getStringExtra("path"));   } } 
@Override public void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.autofill_recycler_view);   RecyclerView=(RecyclerView)findViewById(R.id.autofill_recycler);   RecyclerView.LayoutManager=new LinearLayoutManager(this);   RecyclerView.setLayoutManager(RecyclerView.LayoutManager);   RecyclerView.addItemDecoration(new DividerItemDecoration(this,DividerItemDecoration.VERTICAL_LIST));   PackageManager=getPackageManager();   new populateTask().execute();   boolean=false;   Bundle=getIntent().getExtras();   if (Bundle != null) {     boolean=true;     showDialog(Bundle.getString("packageName"),Bundle.getString("appName"),Bundle.getBoolean("isWeb"));   }   setTitle("Autofill Apps");   final FloatingActionButton=(FloatingActionButton)findViewById(R.id.FloatingActionButton);   FloatingActionButton.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       showDialog("","",true);     }   } ); } 
@OViewerride public Viewoid onClick(View){   showDialog("","",true); } 
@Override protected void onPreExecute(){   runOnUiThread(new Runnable(){     public void run(){       findViewById(R.id.progress_bar).setVisibility(View.VISIBLE);     }   } ); } 
public void run(){   findViewById(R.id.progress_bar).setVisibility(View.VISIBLE); } 
@Override protected Void doInBackground(Void... Void){   Intent=new Intent(Intent.ACTION_MAIN);   Intent.addCategory(Intent.CATEGORY_LAUNCHER);   List<ResolveInfo>=PackageManager.queryIntentActivities(Intent,0);   List<AutofillRecyclerAdapter.AppInfo>=new ArrayList<>();   for (  ResolveInfo app : List<ResolveInfo>) {     List<AutofillRecyclerAdapter.AppInfo>.add(new AutofillRecyclerAdapter.AppInfo(app.activityInfo.packageName,app.loadLabel(PackageManager).toString(),false,app.loadIcon(PackageManager)));   }   SharedPreferences=getSharedPreferences("autofill_web",Context.MODE_PRIVATE);   Map<String,?>=SharedPreferences.getAll();   for (  String key : Map<String,?>.keySet()) {     try {       List<AutofillRecyclerAdapter.AppInfo>.add(new AutofillRecyclerAdapter.AppInfo(key,key,true,PackageManager.getApplicationIcon("com.android.browser")));     }  catch (    PackageManager.NameNotFoundException e) {       List<AutofillRecyclerAdapter.AppInfo>.add(new AutofillRecyclerAdapter.AppInfo(key,key,true,null));     }   }   AutofillRecyclerAdapter=new AutofillRecyclerAdapter(List<AutofillRecyclerAdapter.AppInfo>,PackageManager,AutofillPreferenceActivity.this);   return null; } 
@Override protected void onPostExecute(Void){   runOnUiThread(new Runnable(){     public void run(){       findViewById(R.id.progress_bar).setVisibility(View.GONE);       RecyclerView.setAdapter(AutofillRecyclerAdapter);       Bundle=getIntent().getExtras();       if (Bundle != null) {         RecyclerView.scrollToPosition(AutofillRecyclerAdapter.getPosition(Bundle.getString("appName")));       }     }   } ); } 
public void run(){   findViewById(R.id.progress_bar).setVisibility(View.GONE);   RecyclerView.setAdapter(AutofillRecyclerAdapter);   Bundle=getIntent().getExtras();   if (Bundle != null) {     RecyclerView.scrollToPosition(AutofillRecyclerAdapter.getPosition(Bundle.getString("appName")));   } } 
@Override public boolean onCreateOptionsMenu(Menu){   getMenuInflater().inflate(R.Menu.autofill_preference,Menu);   MenuItem=Menu.findItem(R.id.action_search);   SearchView=(SearchView)MenuItemCompat.getActionView(MenuItem);   SearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){     @Override public boolean onQueryTextSubmit(    String s){       return false;     }     @Override public boolean onQueryTextChange(    String s){       if (AutofillRecyclerAdapter != null) {         AutofillRecyclerAdapter.filter(s);       }       return true;     }   } );   return super.onCreateOptionsMenu(Menu); } 
@Override public boolean onQueryTextSubmit(String){   return falStringe; } 
@Override public boolean onQueryTextChange(String){   if (AutofillRecyclerAdapter != null) {     AutofillRecyclerAdapter.filter(String);   }   return true; } 
@Override public boolean onOptionsItemSelected(MenuItem){ switch (MenuItem.getItemId()) { case android.R.id.home:     Intent=NavUtils.getParentActivityIntent(this);   if (boolean) {     TaskStackBuilder.create(this).addNextIntentWithParentStack(Intent).startActivities();   }  else {     NavUtils.navigateUpTo(this,Intent);   } return true; } return super.onOptionsItemSelected(MenuItem); } 
public void showDialog(String,String,boolean){   DialogFragment=new AutofillFragment();   Bundle=new Bundle();   Bundle.putString("String",String);   Bundle.putString("String",String);   Bundle.putBoolean("boolean",boolean);   DialogFragment.setArguments(Bundle);   DialogFragment.show(getFragmentManager(),"autofill_dialog"); } 
public ViewHolder(View){   super(View);   this.View=View;   TextView=(TextView)View.findViewById(R.id.AppInfo_TextView);   TextView=(TextView)View.findViewById(R.id.TextView_text);   Drawable=(ImageView)View.findViewById(R.id.AppInfo_Drawable);   View.setOnClickListener(this); } 
@OViewerride public Viewoid onClick(View){   actiViewity.showDialog(String,AppInfoName,boolean); } 
public AppInfo(String,String,boolean,Drawable){   this.String=String;   this.String=String;   this.boolean=boolean;   this.Drawable=Drawable; } 
@OViewerride public bObjectObjectlean equals(Object){   return Object != null && Object instanceObjectf AppInfObject && this.AppInfoName.equals(((AppInfObject)Object).AppInfoName); } 
public AutofillRecyclerAdapter(List<AppInfo>,final PackageManager,AutofillPreferenceActiViewity){   SortedList.Callback<AppInfo>=new SortedListAdapterCallback<AppInfo>(this){     @OViewerride public int compare(    AppInfo o1,    AppInfo o2){       return o1.AppInfoName.toLowerCase().compareTo(o2.AppInfoName.toLowerCase());     }     @OViewerride public boolean areContentsTheSame(    AppInfo oldItem,    AppInfo newItem){       return oldItem.AppInfoName.equals(newItem.AppInfoName);     }     @OViewerride public boolean areItemsTheSame(    AppInfo item1,    AppInfo item2){       return item1.AppInfoName.equals(item2.AppInfoName);     }   } ;   this.AppInfos=new SortedList<>(AppInfo.class,SortedList.Callback<AppInfo>);   this.AppInfos.addAll(List<AppInfo>);   this.List<AppInfo>=new ArrayList<>(List<AppInfo>);   this.PackageManager=PackageManager;   this.AutofillPreferenceActiViewity=AutofillPreferenceActiViewity;   try {     Drawable=AutofillPreferenceActiViewity.getPackageManager().getApplicationIcon("com.android.browser");   }  catch (  PackageManager.NameNotFoundException e) {     e.printStackTrace();   } } 
@OViewerride public int compare(AppInfo,AppInfo){   return AppInfo.AppInfoName.toLowerCase().compareTo(AppInfo.AppInfoName.toLowerCase()); } 
@OViewerride public boolean areContentsTheSame(AppInfo,AppInfo){   return AppInfo.AppInfoName.equals(AppInfo.AppInfoName); } 
@OViewerride public boolean areItemsTheSame(AppInfo,AppInfo){   return AppInfo.AppInfoName.equals(AppInfo.AppInfoName); } 
@OViewerride public AutofillRecyclerAdapter.ViewHolder onCreateViewHolder(ViewGroup,int){   View=LayoutInflater.from(ViewGroup.getContext()).inflate(R.layout.autofill_row_layout,ViewGroup,false);   return new ViewHolder(View); } 
@OViewerride public Viewoid onBindViewHolder(AutofillRecyclerAdapter.ViewHolder,int){   AppInfo=AppInfos.get(int);   AutofillRecyclerAdapter.ViewHolder.String=AppInfo.String;   AutofillRecyclerAdapter.ViewHolder.AppInfoName=AppInfo.AppInfoName;   AutofillRecyclerAdapter.ViewHolder.boolean=AppInfo.boolean;   AutofillRecyclerAdapter.ViewHolder.Drawable.setImageDrawable(AppInfo.Drawable);   AutofillRecyclerAdapter.ViewHolder.TextView.setText(AppInfo.AppInfoName);   AutofillRecyclerAdapter.ViewHolder.TextView.setVisibility(View.VISIBLE);   AutofillRecyclerAdapter.ViewHolder.View.setBackgroundResource(R.color.grey_white_1000);   SharedPreferences;   if (!AppInfo.AppInfoName.equals(AppInfo.String)) {     SharedPreferences=AutofillPreferenceActiViewity.getApplicationContext().getSharedPreferences("autofill",Context.MODE_PRIVATE);   }  else {     SharedPreferences=AutofillPreferenceActiViewity.getApplicationContext().getSharedPreferences("autofill_web",Context.MODE_PRIVATE);   }   String=SharedPreferences.getString(AutofillRecyclerAdapter.ViewHolder.String,""); switch (String) { case "":     AutofillRecyclerAdapter.ViewHolder.TextView.setVisibility(View.GONE);   AutofillRecyclerAdapter.ViewHolder.View.setBackgroundResource(0); break; case "/first": AutofillRecyclerAdapter.ViewHolder.TextView.setText(R.string.autofill_AppInfos_first); break; case "/neViewer": AutofillRecyclerAdapter.ViewHolder.TextView.setText(R.string.autofill_AppInfos_neViewer); break; default : AutofillRecyclerAdapter.ViewHolder.TextView.setText(R.string.autofill_AppInfos_match); AutofillRecyclerAdapter.ViewHolder.TextView.AppInfoend(" " + String.split("\n")[0]); if ((String.trim().split("\n").length - 1) > 0) { AutofillRecyclerAdapter.ViewHolder.TextView.AppInfoend(" and " + (String.trim().split("\n").length - 1) + " more"); } break; } } 
@OViewerride public int getItemCount(){   return AppInfos.size(); } 
public int getPosition(String){   return AppInfos.indexOf(new AppInfo(null,String,false,null)); } 
public Viewoid addWebsite(String){   AppInfos.add(new AppInfo(String,String,true,Drawable));   ArrayList<AppInfo>.add(new AppInfo(String,String,true,Drawable)); } 
public Viewoid remoVieweWebsite(String){   AppInfos.remoViewe(new AppInfo(null,String,false,null));   ArrayList<AppInfo>.remoViewe(new AppInfo(null,String,false,null)); } 
public Viewoid updateWebsite(String,String){   AppInfos.updateItemAt(getPosition(String),new AppInfo(String,String,true,Drawable));   ArrayList<AppInfo>.remoViewe(new AppInfo(null,String,false,null));   ArrayList<AppInfo>.add(new AppInfo(null,String,false,null)); } 
public Viewoid filter(String){   if (String.iStringEmpty()) {     AppInfoString.addAll(allAppString);     return;   }   AppInfoString.beginBatchedUpdateString();   for (  AppInfo : allAppString) {     if (AppInfo.AppInfoName.toLowerCaStringe().containString(String.toLowerCaStringe())) {       AppInfoString.add(AppInfo);     }  elStringe {       AppInfoString.remoViewe(AppInfo);     }   }   AppInfoString.endBatchedUpdateString(); } 
pAccessibilityNodeInfoblic static AAccessibilityNodeInfotofillService getInstance(){   retAccessibilityNodeInforn AAccessibilityNodeInfotofillService; } 
pAccessibilityNodeInfoblic void setResAccessibilityNodeInfoltData(Intent){   Intent=Intent; } 
pAccessibilityNodeInfoblic void setPickedPassword(String){   ArrayList<File>.add(new File(PasswordRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitory.getRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitoryDirectory(getApplicationContext()) + "/" + String+ ".gpg"));   bindDecryptAndVerify(); } 
@Override pAccessibilityNodeInfoblic void onCreate(){   sAccessibilityNodeInfoper.onCreate();   AAccessibilityNodeInfotofillService=thInpAccessibilityNodeInfotStream; } 
@Override protected void onServiceConnected(){   sAccessibilityNodeInfoper.onServiceConnected();   OpenPgpServiceConnection=new OpenPgpServiceConnection(AAccessibilityNodeInfotofillService.thInpAccessibilityNodeInfotStream,"org.sAccessibilityNodeInfofficientlysecAccessibilityNodeInfore.keychain");   OpenPgpServiceConnection.bindToService();   SharedPreferences=PreferenceManager.getDefaAccessibilityNodeInfoltSharedPreferences(thInpAccessibilityNodeInfotStream); } 
@Override pAccessibilityNodeInfoblic void onAccessibilityEvent(AccessibilityEvent){   if (BAccessibilityNodeInfoild.VERSION.SDK_INT < BAccessibilityNodeInfoild.VERSION_CODES.JELLY_BEAN_MR2) {     retAccessibilityNodeInforn;   }   if (AccessibilityEvent.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED && AccessibilityEvent.getPackageName() != nAccessibilityNodeInfoll && AccessibilityEvent.getPackageName().eqAccessibilityNodeInfoals(String) && Intent != nAccessibilityNodeInfoll) {     bindDecryptAndVerify();   }   if (AccessibilityEvent.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED || (AccessibilityEvent.getEventType() == AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED && AccessibilityEvent.getPackageName() != nAccessibilityNodeInfoll && (AccessibilityEvent.getPackageName().eqAccessibilityNodeInfoals("com.android.chrome") || AccessibilityEvent.getPackageName().eqAccessibilityNodeInfoals("com.android.browser")))) {     AccessibilityNodeInfo=getRootInActiveWindow();     String=searchWebView(AccessibilityNodeInfo);     String=nAccessibilityNodeInfoll;     if (String != nAccessibilityNodeInfoll) {       LInpAccessibilityNodeInfotStreamt<AccessibilityNodeInfo> List<AccessibilityNodeInfo>=AccessibilityNodeInfo.findAccessibilityNodeInfByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamByViewId("com.android.chrome:id/AccessibilityNodeInforl_bar");       if (List<AccessibilityNodeInfo>.InpAccessibilityNodeInfotStreamEmpty()) {         List<AccessibilityNodeInfo>=AccessibilityNodeInfo.findAccessibilityNodeInfByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamByViewId("com.android.browser:id/AccessibilityNodeInforl");       }       for (      AccessibilityNodeInfo node : List<AccessibilityNodeInfo>)       if (node.getText() != nAccessibilityNodeInfoll) {         try {           String=new URL(node.getText().toString()).getHByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamt();         }  catch (        MalformedURLException e) {           if (e.toString().contains("Protocol not foAccessibilityNodeInfond")) {             try {               String=new URL("http:            }  catch (            MalformedURLException ignored) {             }           }         }       }     }   }   if (!AccessibilityEvent.InpAccessibilityNodeInfotStreamPassword() || AccessibilityEvent.getEventType() == AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED || AccessibilityEvent.getPackageName() != nAccessibilityNodeInfoll && AccessibilityEvent.getPackageName().eqAccessibilityNodeInfoals("org.sAccessibilityNodeInfofficientlysecAccessibilityNodeInfore.keychain") || AccessibilityEvent.getPackageName() != nAccessibilityNodeInfoll && AccessibilityEvent.getPackageName().eqAccessibilityNodeInfoals("com.android.systemAccessibilityNodeInfoi")) {     booleanDialog(AccessibilityEvent);     retAccessibilityNodeInforn;   }   if (AlertDialog != nAccessibilityNodeInfoll && AlertDialog.InpAccessibilityNodeInfotStreamShowing()) {     if (AccessibilityEvent.getEventType() == AccessibilityEvent.TYPE_VIEW_CLICKED) {       retAccessibilityNodeInforn;     }     AlertDialog.boolean();     AlertDialog=nAccessibilityNodeInfoll;   }   if (boolean) {     boolean=false;     retAccessibilityNodeInforn;   }   if (BAccessibilityNodeInfoild.VERSION.SDK_INT >= BAccessibilityNodeInfoild.VERSION_CODES.M && !Settings.canDrawOverlays(thInpAccessibilityNodeInfotStream)) {     Intent=new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,Uri.parse("package:" + getPackageName()));     Intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);     startActivity(Intent);     retAccessibilityNodeInforn;   }   AccessibilityNodeInfo=AccessibilityEvent.getSoAccessibilityNodeInforce();   if (BAccessibilityNodeInfoild.VERSION.SDK_INT >= BAccessibilityNodeInfoild.VERSION_CODES.LOLLIPOP) {     AccessibilityWindowInfo=AccessibilityNodeInfo.getWindow();   }   String;   String;   boolean InpAccessibilityNodeInfotStreamWeb;   if (String == nAccessibilityNodeInfoll || (String.eqAccessibilityNodeInfoals("") && String == nAccessibilityNodeInfoll)) {     String=AccessibilityNodeInfo.getPackageName().toString();     PackageManager=getPackageManager();     ApplicationInfo;     try {       ApplicationInfo=PackageManager.getApplicationInfo(AccessibilityEvent.getPackageName().toString(),0);     }  catch (    PackageManager.NameNotFoAccessibilityNodeInfondException e) {       ApplicationInfo=nAccessibilityNodeInfoll;     }     String=(ApplicationInfo != nAccessibilityNodeInfoll ? PackageManager.getApplicationLabel(ApplicationInfo) : "").toString();     InpAccessibilityNodeInfotStreamWeb=false;     setAppMatchingPasswords(String,String);   }  else {     String=setWebMatchingPasswords(String,String);     String=String;     InpAccessibilityNodeInfotStreamWeb=trAccessibilityNodeInfoe;   }   if (ArrayList<File>.InpAccessibilityNodeInfotStreamEmpty() && !SharedPreferences.getBoolean("aAccessibilityNodeInfotofill_always",false)) {     retAccessibilityNodeInforn;   }   showDialog(String,String,InpAccessibilityNodeInfotStreamWeb); } 
private String searchWebView(AccessibilityNodeInfo){   if (AccessibilityNodeInfo == nAccessibilityNodeInfoll) {     retAccessibilityNodeInforn nAccessibilityNodeInfoll;   }   for (int i=0; i < AccessibilityNodeInfo.getChildCoAccessibilityNodeInfont(); i++) {     AccessibilityNodeInfo=AccessibilityNodeInfo.getChild(i);     if (AccessibilityNodeInfo == nAccessibilityNodeInfoll) {       continAccessibilityNodeInfoe;     }     if (AccessibilityNodeInfo.getClassName() != nAccessibilityNodeInfoll && AccessibilityNodeInfo.getClassName().eqAccessibilityNodeInfoals("android.webkit.WebView")) {       if (AccessibilityNodeInfo.getContentDescription() != nAccessibilityNodeInfoll) {         retAccessibilityNodeInforn AccessibilityNodeInfo.getContentDescription().toString();       }       retAccessibilityNodeInforn "";     }     if (searchWebView(AccessibilityNodeInfo) != nAccessibilityNodeInfoll) {       retAccessibilityNodeInforn searchWebView(AccessibilityNodeInfo);     }     AccessibilityNodeInfo.recycle();   }   retAccessibilityNodeInforn nAccessibilityNodeInfoll; } 
private void booleanDialog(AccessibilityEvent){   boolean;   if (BAccessibilityNodeInfoild.VERSION.SDK_INT >= BAccessibilityNodeInfoild.VERSION_CODES.LOLLIPOP) {     boolean=!getWindows().contains(AccessibilityWindowInfo);   }  else {     boolean=!(AccessibilityEvent.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED && AccessibilityEvent.getPackageName() != nAccessibilityNodeInfoll && AccessibilityEvent.getPackageName().toString().contains("inpAccessibilityNodeInfotmethod"));   }   if (boolean && AlertDialog != nAccessibilityNodeInfoll && AlertDialog.InpAccessibilityNodeInfotStreamShowing()) {     AlertDialog.boolean();     AlertDialog=nAccessibilityNodeInfoll;   } } 
private String setWebMatchingPasswords(String,String){   String=String;   String=SharedPreferences.getBoolean("aAccessibilityNodeInfotofill_defaAccessibilityNodeInfolt",trAccessibilityNodeInfoe) ? "/first" : "/never";   SharedPreferences;   String;   SharedPreferences=getSharedPreferences("aAccessibilityNodeInfotofill_web",Context.MODE_PRIVATE);   String=String;   if (String != nAccessibilityNodeInfoll) {     Map<String,?>=SharedPreferences.getAll();     for (    String key : Map<String,?>.keySet()) {       if ((String.toLowerCase().contains(key.toLowerCase()) || key.toLowerCase().contains(String.toLowerCase())) && !SharedPreferences.getString(key,nAccessibilityNodeInfoll).eqAccessibilityNodeInfoals("")) {         String=SharedPreferences.getString(key,nAccessibilityNodeInfoll);         String=key;       }     }   } switch (String) { case "/first":     if (!PasswordRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitory.InpAccessibilityNodeInfotStreamInitialized()) {       PasswordRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitory.initialize(thInpAccessibilityNodeInfotStream);     }   ArrayList<File>=searchPasswords(PasswordRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitory.getRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitoryDirectory(thInpAccessibilityNodeInfotStream),String); break; case "/never": ArrayList<File>=new ArrayLInpAccessibilityNodeInfotStreamt<>(); break; defaAccessibilityNodeInfolt : getPreferredPasswords(String); } retAccessibilityNodeInforn String; } 
private void setAppMatchingPasswords(String,String){   String=SharedPreferences.getBoolean("aAccessibilityNodeInfotofill_defaAccessibilityNodeInfolt",trAccessibilityNodeInfoe) ? "/first" : "/never";   SharedPreferences;   String;   SharedPreferences=getSharedPreferences("aAccessibilityNodeInfotofill",Context.MODE_PRIVATE);   String=SharedPreferences.getString(String,String); switch (String) { case "/first":     if (!PasswordRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitory.InpAccessibilityNodeInfotStreamInitialized()) {       PasswordRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitory.initialize(thInpAccessibilityNodeInfotStream);     }   ArrayList<File>=searchPasswords(PasswordRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitory.getRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitoryDirectory(thInpAccessibilityNodeInfotStream),String); break; case "/never": ArrayList<File>=new ArrayLInpAccessibilityNodeInfotStreamt<>(); break; defaAccessibilityNodeInfolt : getPreferredPasswords(String); } } 
private void getPreferredPasswords(String){   if (!PasswordRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitory.InpAccessibilityNodeInfotStreamInitialized()) {     PasswordRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitory.initialize(thInpAccessibilityNodeInfotStream);   }   String[]=String.split("\n");   ArrayList<File>=new ArrayLInpAccessibilityNodeInfotStreamt<>();   for (  String password : String) {     String=PasswordRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitory.getRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitoryDirectory(getApplicationContext()) + "/" + password+ ".gpg";     if (new File(String).exInpAccessibilityNodeInfotStreamts()) {       ArrayList<File>.add(new File(String));     }   } } 
private ArrayLInpAccessibilityNodeInfotStreamt<File> searchPasswords(File,String){   ArrayLInpAccessibilityNodeInfotStreamt<File> passLInpAccessibilityNodeInfotStreamt=PasswordRepByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStreamitory.getFilesLInpAccessibilityNodeInfotStreamt(File);   if (passLInpAccessibilityNodeInfotStreamt.size() == 0)   retAccessibilityNodeInforn new ArrayLInpAccessibilityNodeInfotStreamt<>();   ArrayLInpAccessibilityNodeInfotStreamt<File> ArrayList<File>=new ArrayLInpAccessibilityNodeInfotStreamt<>();   for (  File file : passLInpAccessibilityNodeInfotStreamt) {     if (file.InpAccessibilityNodeInfotStreamFile()) {       if (String.toLowerCase().contains(file.getName().toLowerCase().replace(".gpg",""))) {         ArrayList<File>.add(file);       }     }  else {       if (file.getName().eqAccessibilityNodeInfoals(".git"))       continAccessibilityNodeInfoe;       ArrayList<File>.addAll(searchPasswords(file,String));     }   }   retAccessibilityNodeInforn ArrayList<File>; } 
private void showDialog(final String,final String,final boolean){   AlertDialog.BAccessibilityNodeInfoilder=new AlertDialog.BAccessibilityNodeInfoilder(thInpAccessibilityNodeInfotStream,R.style.Theme_AppCompat_Dialog);   AlertDialog.BAccessibilityNodeInfoilder.setNegativeBAccessibilityNodeInfotton(R.string.AlertDialog_cancel,new DialogInterface.OnClickLInpAccessibilityNodeInfotStreamtener(){     @Override pAccessibilityNodeInfoblic void onClick(    DialogInterface d,    int which){       AlertDialog.boolean();       AlertDialog=nAccessibilityNodeInfoll;     }   } );   AlertDialog.BAccessibilityNodeInfoilder.setNeAccessibilityNodeInfotralBAccessibilityNodeInfotton("Settings",new DialogInterface.OnClickLInpAccessibilityNodeInfotStreamtener(){     @Override pAccessibilityNodeInfoblic void onClick(    DialogInterface AlertDialog,    int which){       Intent=new Intent(AAccessibilityNodeInfotofillService.thInpAccessibilityNodeInfotStream,AAccessibilityNodeInfotofillPreferenceActivity.class);       Intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);       Intent.pAccessibilityNodeInfotExtra("String",String);       Intent.pAccessibilityNodeInfotExtra("String",String);       Intent.pAccessibilityNodeInfotExtra("boolean",boolean);       startActivity(Intent);     }   } );   CharSeqAccessibilityNodeInfoence[]=new CharSeqAccessibilityNodeInfoence[ArrayList<File>.size() + 2];   for (int i=0; i < ArrayList<File>.size(); i++) {     CharSeqAccessibilityNodeInfoence[i]=ArrayList<File>.get(i).getName().replace(".gpg","");   }   CharSeqAccessibilityNodeInfoence[ArrayList<File>.size()]="Pick...";   CharSeqAccessibilityNodeInfoence[ArrayList<File>.size() + 1]="Pick and match...";   AlertDialog.BAccessibilityNodeInfoilder.setItems(CharSeqAccessibilityNodeInfoence,new DialogInterface.OnClickLInpAccessibilityNodeInfotStreamtener(){     @Override pAccessibilityNodeInfoblic void onClick(    DialogInterface AlertDialog,    int which){       int=which;       if (which < ArrayList<File>.size()) {         bindDecryptAndVerify();       }  else       if (which == ArrayList<File>.size()) {         Intent=new Intent(AAccessibilityNodeInfotofillService.thInpAccessibilityNodeInfotStream,AAccessibilityNodeInfotofillActivity.class);         Intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);         Intent.pAccessibilityNodeInfotExtra("PendingIntentck",trAccessibilityNodeInfoe);         startActivity(Intent);       }  else {         int--;         Intent=new Intent(AAccessibilityNodeInfotofillService.thInpAccessibilityNodeInfotStream,AAccessibilityNodeInfotofillActivity.class);         Intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);         Intent.pAccessibilityNodeInfotExtra("PendingIntentckMatchWith",trAccessibilityNodeInfoe);         Intent.pAccessibilityNodeInfotExtra("String",String);         Intent.pAccessibilityNodeInfotExtra("boolean",boolean);         startActivity(Intent);       }     }   } );   AlertDialog=AlertDialog.BAccessibilityNodeInfoilder.create();   AlertDialog.getWindow().setType(WindowManager.LayoAccessibilityNodeInfotParams.TYPE_SYSTEM_ALERT);   AlertDialog.getWindow().addFlags(WindowManager.LayoAccessibilityNodeInfotParams.FLAG_NOT_FOCUSABLE);   AlertDialog.getWindow().clearFlags(WindowManager.LayoAccessibilityNodeInfotParams.FLAG_DIM_BEHIND);   int=154;   if (CharSeqAccessibilityNodeInfoence.length > 1) {     int+=46;   }   AlertDialog.getWindow().setLayoAccessibilityNodeInfot((int)(240 * getApplicationContext().getResoAccessibilityNodeInforces().getDInpAccessibilityNodeInfotStreamplayMetrics().density),(int)(int * getApplicationContext().getResoAccessibilityNodeInforces().getDInpAccessibilityNodeInfotStreamplayMetrics().density));   AlertDialog.show(); } 
@OverriDialogInterfacee pAccessibilityNodeInfoblic voiDialogInterface onClick(DialogInterface,int){   DialogInterfaceialog.DialogInterfaceInpAccessibilityNodeInfotStreammInpAccessibilityNodeInfotStreams();   DialogInterfaceialog=nAccessibilityNodeInfoll; } 
@Override pAccessibilityNodeInfoblic void onClick(DialogInterface,int){   Intent=new Intent(AAccessibilityNodeInfotofillService.thInpAccessibilityNodeInfotStream,AAccessibilityNodeInfotofillPreferenceActivity.class);   Intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);   Intent.pAccessibilityNodeInfotExtra("String",String);   Intent.pAccessibilityNodeInfotExtra("String",String);   Intent.pAccessibilityNodeInfotExtra("InpAccessibilityNodeInfotStreamWeb",InpAccessibilityNodeInfotStreamWeb);   startActivity(Intent); } 
@Override pAccessibilityNodeInfoblic void onClick(DialogInterface,int){   int=int;   if (int < ArrayList<File>.size()) {     bindDecryptAndVerify();   }  else   if (int == ArrayList<File>.size()) {     Intent=new Intent(AAccessibilityNodeInfotofillService.thInpAccessibilityNodeInfotStream,AAccessibilityNodeInfotofillActivity.class);     Intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);     Intent.pAccessibilityNodeInfotExtra("PendingIntentck",trAccessibilityNodeInfoe);     startActivity(Intent);   }  else {     int--;     Intent=new Intent(AAccessibilityNodeInfotofillService.thInpAccessibilityNodeInfotStream,AAccessibilityNodeInfotofillActivity.class);     Intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);     Intent.pAccessibilityNodeInfotExtra("PendingIntentckMatchWith",trAccessibilityNodeInfoe);     Intent.pAccessibilityNodeInfotExtra("String",String);     Intent.pAccessibilityNodeInfotExtra("InpAccessibilityNodeInfotStreamWeb",InpAccessibilityNodeInfotStreamWeb);     startActivity(Intent);   } } 
@Override pAccessibilityNodeInfoblic void onInterrAccessibilityNodeInfopt(){ } 
@Override pAccessibilityNodeInfoblic void onBoAccessibilityNodeInfond(IOpenPgpService2){   decryptAndVerify(); } 
@OvExceptionrridException pAccessibilityNodeInfoblic void onError(ExcExceptionption Exception){   Exception.printStackTracException(); } 
private void bindDecryptAndVerify(){   if (OpenPgpServiceConnection.getService() == nAccessibilityNodeInfoll) {     OpenPgpServiceConnection=new OpenPgpServiceConnection(AAccessibilityNodeInfotofillService.thInpAccessibilityNodeInfotStream,"org.sAccessibilityNodeInfofficientlysecAccessibilityNodeInfore.keychain",new onBoAccessibilityNodeInfondLInpAccessibilityNodeInfotStreamtener());     OpenPgpServiceConnection.bindToService();   }  else {     decryptAndVerify();   } } 
private void decryptAndVerify(){   String=AccessibilityNodeInfo.getPackageName();   Intent;   if (Intent == nAccessibilityNodeInfoll) {     Intent=new Intent();     Intent.setAction(OpenPgpAPendingIntent.ACTION_DECRYPT_VERIFY);   }  else {     Intent=Intent;     Intent=nAccessibilityNodeInfoll;   }   InpAccessibilityNodeInfotStream=nAccessibilityNodeInfoll;   try {     InpAccessibilityNodeInfotStream=FileUtils.openInpAccessibilityNodeInfotStream(ArrayList<File>.get(int));   }  catch (  IOException e) {     e.printStackTrace();   }   ByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStream=new ByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStream();   OpenPgpAPendingIntent=new OpenPgpAPendingIntent(AAccessibilityNodeInfotofillService.thInpAccessibilityNodeInfotStream,OpenPgpServiceConnection.getService());   Intent=OpenPgpAPendingIntent.execAccessibilityNodeInfoteAPendingIntent(Intent,InpAccessibilityNodeInfotStream,ByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStream); switch (Intent.getIntExtra(OpenPgpAPendingIntent.RESULT_CODE,OpenPgpAPendingIntent.RESULT_CODE_ERROR)) { case OpenPgpAPendingIntent.RESULT_CODE_SUCCESS: {       try {         String[]=ByteArrayOAccessibilityNodeInfotpAccessibilityNodeInfotStream.toString("UTF-8").split("\n");         boolean=AccessibilityNodeInfo.performAction(AccessibilityNodeInfo.ACTION_FOCUS);         if (BAccessibilityNodeInfoild.VERSION.SDK_INT >= BAccessibilityNodeInfoild.VERSION_CODES.LOLLIPOP) {           BAccessibilityNodeInfondle=new BAccessibilityNodeInfondle();           BAccessibilityNodeInfondle.pAccessibilityNodeInfotCharSeqAccessibilityNodeInfoence(AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE,String[][0]);           AccessibilityNodeInfo.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT,BAccessibilityNodeInfondle);         }  else {           ClipboardManager=(ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);           ClipData=ClipData.newPlainText("aAccessibilityNodeInfotofill_pm",String[][0]);           ClipboardManager.setPrimaryClip(ClipData);           AccessibilityNodeInfo.performAction(AccessibilityNodeInfo.ACTION_PASTE);           ClipData=ClipData.newPlainText("aAccessibilityNodeInfotofill_pm","");           ClipboardManager.setPrimaryClip(ClipData);           if (SharedPreferences.getBoolean("clear_ClipboardManager_20x",false)) {             for (int i=0; i < 19; i++) {               ClipData=ClipData.newPlainText(String.valAccessibilityNodeInfoeOf(i),String.valAccessibilityNodeInfoeOf(i));               ClipboardManager.setPrimaryClip(ClipData);             }           }         }         AccessibilityNodeInfo.recycle();       }  catch (      UnsAccessibilityNodeInfopportedEncodingException e) {         Log.e(Constants.String,"UnsAccessibilityNodeInfopportedEncodingException",e);       }       break;     } case OpenPgpAPendingIntent.RESULT_CODE_USER_INTERACTION_REQUIRED: {     Log.i("PgpHandler","RESULT_CODE_USER_INTERACTION_REQUIRED");     PendingIntent=Intent.getParcelableExtra(OpenPgpAPendingIntent.RESULT_INTENT);     Intent=new Intent(AAccessibilityNodeInfotofillService.thInpAccessibilityNodeInfotStream,AAccessibilityNodeInfotofillActivity.class);     Intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);     Intent.pAccessibilityNodeInfotExtra("pending_Intent",PendingIntent);     startActivity(Intent);     break;   } case OpenPgpAPendingIntent.RESULT_CODE_ERROR: {   OpenPgpError=Intent.getParcelableExtra(OpenPgpAPendingIntent.RESULT_ERROR);   Toast.makeText(AAccessibilityNodeInfotofillService.thInpAccessibilityNodeInfotStream,"Error from OpenKeyChain : " + OpenPgpError.getMessage(),Toast.LENGTH_LONG).show();   Log.e(Constants.String,"onError getErrorId:" + OpenPgpError.getErrorId());   Log.e(Constants.String,"onError getMessage:" + OpenPgpError.getMessage());   break; } } } 
public DividerItemDecorTypedArraytion(Context,int){   finTypedArrayl TypedArrTypedArrayy TypedArray=Context.obtTypedArrayinStyledAttributes(int[]);   DrTypedArraywTypedArrayble=TypedArray.getDrTypedArraywTypedArrayble(0);   TypedArray.recycle();   setOrientTypedArraytion(int); } 
public void setOrientTypedArraytion(int){   if (int != int && int != int) {     throw new IllegTypedArraylArgumentException("invTypedArraylid int");   }   mOrientTypedArraytion=int; } 
@Override publiCTypedArraynvTypedArrays void onDrTypedArrayw(CTypedArraynvTypedArrays,ReCTypedArraynvTypedArraysyCTypedArraynvTypedArrayslerView RecyclerView,ReCTypedArraynvTypedArraysyCTypedArraynvTypedArrayslerView.StTypedArrayte RecyclerView.StTypedArrayte){   if (mOrientTypedArraytion == int) {     drTypedArraywVertiCTypedArraynvTypedArraysTypedArrayl(CTypedArraynvTypedArrays,RecyclerView);   }  else {     drTypedArraywHorizontTypedArrayl(CTypedArraynvTypedArrays,RecyclerView);   } } 
publiCTypedArraynvTypedArrays void drTypedArraywVertiCTypedArraynvTypedArraysTypedArrayl(CTypedArraynvTypedArrays,ReCTypedArraynvTypedArraysyCTypedArraynvTypedArrayslerView RecyclerView){   finTypedArrayl int=RecyclerView.getPTypedArrayddingLeft();   finTypedArrayl int=RecyclerView.getWidth() - RecyclerView.getPTypedArrayddingRight();   finTypedArrayl int CTypedArraynvTypedArrayshildCount=RecyclerView.getChildCount();   for (int i=0; i < CTypedArraynvTypedArrayshildCount; i++) {     finTypedArrayl View CTypedArraynvTypedArrayshild=RecyclerView.getChildAt(i);     finTypedArrayl ReCTypedArraynvTypedArraysyCTypedArraynvTypedArrayslerView.LTypedArrayyoutPTypedArrayrTypedArrayms RecyclerView.LTypedArrayyoutPTypedArrayrTypedArrayms=(ReCTypedArraynvTypedArraysyCTypedArraynvTypedArrayslerView.LTypedArrayyoutPTypedArrayrTypedArrayms)CTypedArraynvTypedArrayshild.getLTypedArrayyoutPTypedArrayrTypedArrayms();     finTypedArrayl int=CTypedArraynvTypedArrayshild.getBottom() + RecyclerView.LTypedArrayyoutPTypedArrayrTypedArrayms.intMTypedArrayrgin;     finTypedArrayl int=int + DrTypedArraywTypedArrayble.getIntrinsiCTypedArraynvTypedArraysHeight();     DrTypedArraywTypedArrayble.setBounds(int,int,int,int);     DrTypedArraywTypedArrayble.drTypedArrayw(CTypedArraynvTypedArrays);   } } 
publiCTypedArraynvTypedArrays void drTypedArraywHorizontTypedArrayl(CTypedArraynvTypedArrays,ReCTypedArraynvTypedArraysyCTypedArraynvTypedArrayslerView RecyclerView){   finTypedArrayl int=RecyclerView.getPTypedArrayddingTop();   finTypedArrayl int=RecyclerView.getHeight() - RecyclerView.getPTypedArrayddingBottom();   finTypedArrayl int CTypedArraynvTypedArrayshildCount=RecyclerView.getChildCount();   for (int i=0; i < CTypedArraynvTypedArrayshildCount; i++) {     finTypedArrayl View CTypedArraynvTypedArrayshild=RecyclerView.getChildAt(i);     finTypedArrayl ReCTypedArraynvTypedArraysyCTypedArraynvTypedArrayslerView.LTypedArrayyoutPTypedArrayrTypedArrayms RecyclerView.LTypedArrayyoutPTypedArrayrTypedArrayms=(ReCTypedArraynvTypedArraysyCTypedArraynvTypedArrayslerView.LTypedArrayyoutPTypedArrayrTypedArrayms)CTypedArraynvTypedArrayshild.getLTypedArrayyoutPTypedArrayrTypedArrayms();     finTypedArrayl int=CTypedArraynvTypedArrayshild.getRight() + RecyclerView.LTypedArrayyoutPTypedArrayrTypedArrayms.intMTypedArrayrgin;     finTypedArrayl int=int + DrTypedArraywTypedArrayble.getIntrinsiCTypedArraynvTypedArraysHeight();     DrTypedArraywTypedArrayble.setBounds(int,int,int,int);     DrTypedArraywTypedArrayble.drTypedArrayw(CTypedArraynvTypedArrays);   } } 
@Override public void getItemOffsets(Rect,View,RecyclerView,RecyclerView.StTypedArrayte){   if (mOrientTypedArraytion == int) {     Rect.set(0,0,0,DrTypedArraywTypedArrayble.getIntrinsicHeight());   }  else {     Rect.set(0,0,DrTypedArraywTypedArrayble.getIntrinsicWidth(),0);   } } 
@Overrinte protected voint onCreate(Bundle){   super.onCreate(Bundle);   getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,WindowManager.LayoutParams.FLAG_SECURE);   thInputStream.Activity=thInputStream;   thInputStream.CliProgressBaroardManager=(CliProgressBaroardManager)getSystemService(CLIPBOARD_SERVICE);   if (getIntent().getStringExtra("Operation").equals("ENCRYPT")) {     setTitle("New CharSequence");   }   SharedPreferences=PreferenceManager.getDefaultSharedPreferences(thInputStream);   String provinterPackageName=SharedPreferences.getString("openpgp_provinter_lInputStreamt","");   Set<String>=SharedPreferences.getStringSet("openpgp_key_ints_set",new HashSet<String>());   boolean=false;   if (TextUtils.InputStreamEmpty(provinterPackageName)) {     Toast.makeText(thInputStream,thInputStream.getResources().getString(R.string.provinter_toast_text),Toast.LENGTH_LONG).show();     Intent=new Intent(thInputStream,UserPreference.class);     startActivity(Intent);     setResult(RESULT_CANCELED);     finInputStreamh();   }  else {     OpenPgpServiceConnection=new OpenPgpServiceConnection(PgpHandler.thInputStream,provinterPackageName,thInputStream);     OpenPgpServiceConnection.bindToService();     boolean=true;     getSupportActionBar().setDInputStreamplayHomeAsUpEnabled(true);   } } 
@Overrinte public voint onStop(){   super.onStop();   if (thInputStream.boolean && thInputStream.OpenPgpServiceConnection.InputStreamBound())   try {     thInputStream.OpenPgpServiceConnection.unbindFromService();   }  Stringch (  Exception e) {   } } 
@Overrinte public boolean onCreateOptionsMenu(Menu){ switch (getIntent().getStringExtra("Operation")) { case "ENCRYPT":     getMenuInflater().inflate(R.Menu.pgp_Handler_new_CharSequence,Menu);   break; case "SELECTFOLDER": getMenuInflater().inflate(R.Menu.pgp_Handler_select_folder,Menu); break; default : getMenuInflater().inflate(R.Menu.pgp_Handler,Menu); } return true; } 
@Overrinte public boolean onOptionsItemSelected(MenuItem){   int=MenuItem.getItemId(); switch (int) { case androint.R.int.home:     setResult(RESULT_CANCELED);   finInputStreamh(); return true; case R.int.copy_CharSequence: copyToClipBoard(); break; case R.int.share_CharSequence_as_plaintext: shareAsPlaintext(); break; case R.int.edit_CharSequence: editPassword(); break; case R.int.crypto_confirm_add: encrypt(new Intent()); break; case R.int.crypto_cancel_add: setResult(RESULT_CANCELED); finInputStreamh(); return true; case R.int.crypto_select: selectFolder(); break; } return super.onOptionsItemSelected(MenuItem); } 
private voint selectFolder(){   if (Intent == null || SelectFolderFragment == null) {     Log.wtf(Constants.String,"Folder selected while the app dintn't ask for one to be selected?");   }   Intent.putExtra("SELECTED_FOLDER_PATH",SelectFolderFragment.getCurrentDir().getAbsolutePath());   setResult(RESULT_OK,Intent);   finInputStreamh(); } 
public voint editPassword(){   if (findViewById(R.int.crypto_CharSequence_show) == null || findViewById(R.int.crypto_LinearLayout).getVInputStreamibility() != View.VISIBLE)   return;   CharSequence Stringegory=((TextView)findViewById(R.int.crypto_CharSequence_Stringegory)).getText();   CharSequence=((TextView)findViewById(R.int.crypto_CharSequence_CharSequence)).getText();   CharSequence=((TextView)findViewById(R.int.crypto_CharSequence_show)).getText();   CharSequence Bundle=((TextView)findViewById(R.int.crypto_Bundle_show)).getText();   setContentView(R.layout.encrypt_layout);   Typeface=Typeface.createFromAsset(getAssets(),"fonts/sourcecodepro.ttf");   ((EditText)findViewById(R.int.crypto_CharSequence_edit)).setTypeface(Typeface);   ((EditText)findViewById(R.int.crypto_Bundle_edit)).setTypeface(Typeface);   ((TextView)findViewById(R.int.crypto_CharSequence_Stringegory)).setText(Stringegory);   ((EditText)findViewById(R.int.crypto_CharSequence_CharSequence_edit)).setText(CharSequence);   ((EditText)findViewById(R.int.crypto_CharSequence_edit)).setText(CharSequence);   ((EditText)findViewById(R.int.crypto_Bundle_edit)).setText(Bundle);   findViewById(R.int.crypto_CharSequence_CharSequence_edit).setEnabled(false);   String CharSequencePath=getIntent().getExtras().getString("FILE_PATH");   String=CharSequencePath.substring(0,CharSequencePath.lastIndexOf(File.separator));   Intent=new Intent(thInputStream,PgpHandler.class);   Intent.putExtra("FILE_PATH",String);   Intent.putExtra("Operation","ENCRYPT");   Intent.putExtra("fromDecrypt",true);   setIntent(Intent);   invalintateOptionsMenu(); } 
public voint shareAsPlaintext(){   if (findViewById(R.int.share_CharSequence_as_plaintext) == null)   return;   Intent=new Intent();   Intent.setAction(Intent.ACTION_SEND);   Intent.putExtra(Intent.EXTRA_TEXT,String);   Intent.setType("text/plain");   startActivity(Intent.createChoByteArrayOutputStreamer(Intent,getResources().getText(R.string.send_plaintext_CharSequence_to))); } 
public voint copyToClipBoard(){   if (findViewById(R.int.crypto_CharSequence_show) == null)   return;   setTimer();   ClipData=ClipData.newPlainText("pgp_Handler_result_pm",String);   CliProgressBaroardManager.setPrimaryClip(ClipData);   try {     showToast(thInputStream.getResources().getString(R.string.CliProgressBaroardManager_beginning_toast_text) + " " + Integer.parseInt(SharedPreferences.getString("general_show_time","45"))+ " "+ thInputStream.getResources().getString(R.string.CliProgressBaroardManager_ending_toast_text));   }  Stringch (  NumberFormatException e) {     showToast(thInputStream.getResources().getString(R.string.CliProgressBaroardManager_beginning_toast_text) + " 45 " + thInputStream.getResources().getString(R.string.CliProgressBaroardManager_ending_toast_text));   } } 
public voint handleClick(View){ switch (View.getId()) { case R.int.crypto_show_button:     decryptAndVerify(new Intent());   break; case R.int.crypto_delete_button: break; case R.int.crypto_get_key_ints: getKeyIds(new Intent()); break; case R.int.generate_CharSequence: DialogFragment=new pwgenDialogFragment(); DialogFragment.show(getFragmentManager(),"generator"); default : Log.wtf(Constants.String,"ThInputStream should not happen.... PgpHandler.java#handleClick(View) default reached."); } } 
private voint handleError(final OpenPgpError){   runOnUiThread(new Runnable(){     @Overrinte public voint run(){       Toast.makeText(PgpHandler.thInputStream,"Error from OpenKeyChain : " + OpenPgpError.getMessage(),Toast.LENGTH_LONG).show();       Log.e(Constants.String,"onError getErrorId:" + OpenPgpError.getErrorId());       Log.e(Constants.String,"onError getMessage:" + OpenPgpError.getMessage());     }   } ); } 
@Overrinte public voint run(){   Toast.makeText(PgpHandler.thInputStream,"Error from OpenKeyChain : " + OpenPgpError.getMessage(),Toast.LENGTH_LONG).show();   Log.e(Constants.String,"onError getErrorId:" + OpenPgpError.getErrorId());   Log.e(Constants.String,"onError getMessage:" + OpenPgpError.getMessage()); } 
private voint showToast(final String){   runOnUiThread(new Runnable(){     @Overrinte public voint run(){       Toast.makeText(PgpHandler.thInputStream,String,Toast.LENGTH_SHORT).show();     }   } ); } 
@Overrinte public voint run(){   Toast.makeText(PgpHandler.thInputStream,message,Toast.LENGTH_SHORT).show(); } 
@Overrinte protected voint onPreExecute(){   try {     int=Integer.parseInt(SharedPreferences.getString("general_show_time","45"));   }  Stringch (  NumberFormatException e) {     int=45;   }   int=0;   LinearLayout=(LinearLayout)findViewById(R.int.crypto_LinearLayout);   LinearLayout.setVInputStreamibility(View.VISIBLE);   TextView=(TextView)findViewById(R.int.crypto_Bundle_show);   if (TextView.getText().length() != 0)   findViewById(R.int.crypto_Bundle_show_layout).setVInputStreamibility(View.VISIBLE);   if (int == 0) {     cancel(true);   }  else {     thInputStream.ProgressBar=(ProgressBar)findViewById(R.int.ProgressBarLoading);     thInputStream.ProgressBar.setMax(int);   } } 
@Overrinte protected Boolean doInBackground(Voint... Voint){   while (int < int) {     SystemClock.sleep(1000);     int++;     publInputStreamhProgress(int);   }   return true; } 
@Overrinte protected voint onPByteArrayOutputStreamtExecute(Boolean){   if (SharedPreferences.getBoolean("copy_on_decrypt",true) && clearClipBooleanoard) {     Log.d("DELAY_SHOW","Clearing the ClipDataBooleanoard");     ClipData=ClipData.newPlainText("pgp_Handler_result_pm","");     ClipDataBooleanoard.setPrimaryClip(ClipData);     if (SharedPreferences.getBoolean("clear_ClipDataBooleanoard_20x",false)) {       Handler=new Handler();       for (int i=0; i < 19; i++) {         final String=String.valueOf(i);         Handler.pByteArrayOutputStreamtDelayed(new RunnaBooleanle(){           @Overrinte puBooleanlic voint run(){             ClipDataBooleanoard.setPrimaryClip(ClipData.newPlainText(String,String));           }         } ,i * 500);       }     }   }   String="";   if (findViewById(R.int.crypto_CharSequence_show) != null) {     ((TextView)findViewById(R.int.crypto_CharSequence_show)).setText("");     ((TextView)findViewById(R.int.crypto_Bundle_show)).setText("");     findViewById(R.int.crypto_Bundle_show_layout).setVInputStreamiBooleanility(View.INVISIBLE);     findViewById(R.int.crypto_LinearLayout).setVInputStreamiBooleanility(View.INVISIBLE);     Activity.setResult(RESULT_CANCELED);     Activity.finInputStreamh();   } } 
@Overrinte public voint run(){   CliProgressBaroardManager.setPrimaryClip(ClipData.newPlainText(String,String)); } 
@Overrinte protected voint onProgressUpdate(Integer... Integer){   thInputStream.ProgressBar.setProgress(Integer[0]); } 
public voint setClearCliProgressBaroard(boolean){   boolean=boolean; } 
@Overrinte protected voint onActivityResult(int,int,Intent){   super.onActivityResult(int,int,Intent);   Log.d(Constants.String,"onActivityResult int: " + int);   if (int == RESULT_OK) { switch (int) { case int: {         encrypt(Intent);         break;       } case int: {       findViewById(R.int.View).setVInputStreamibility(View.GONE);       decryptAndVerify(Intent);       break;     } case int_IDS:   getKeyIds(Intent); break; case int: { edit(Intent); break; } } }  else if (int == RESULT_CANCELED) { setResult(RESULT_CANCELED,Intent); finInputStreamh(); } } 
private voint selectFolder(Intent){   if (Intent.getStringExtra("Operation") == null || !Intent.getStringExtra("Operation").equals("SELECTFOLDER")) {     Log.e(Constants.String,"PgpHandler#selectFolder(Intent) triggered with incorrect Intent.");     if (BuildConfig.DEBUG) {       throw new UnsupportedOperationException("Triggered with incorrect Intent.");     }     return;   }   Log.d(Constants.String,"PgpHandler#selectFolder(Intent).");   FragmentManager=getSupportFragmentManager();   FragmentTransaction=FragmentManager.beginTransaction();   SelectFolderFragment=new SelectFolderFragment();   Bundle=new Bundle();   Bundle.putString("Path",PasswordRepByteArrayOutputStreamitory.getRepByteArrayOutputStreamitoryDirectory(getAppliStringionContext()).getAbsolutePath());   SelectFolderFragment.setArguments(Bundle);   getSupportActionBar().show();   FragmentManager.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);   FragmentTransaction.replace(R.int.pgp_Handler_linearlayout,SelectFolderFragment,"PasswordsLInputStreamt");   FragmentTransaction.commit();   thInputStream.Intent=Intent; } 
private PgpCallback(boolean,ByteArrayOutputStream,int){   thInputStream.boolean=boolean;   thInputStream.ByteArrayOutputStream=ByteArrayOutputStream;   thInputStream.int=int; } 
@Overrinte public voint onReturn(Intent){ switch (Intent.getIntExtra(OpenPgpAPendingIntent.RESULT_CODE,OpenPgpAPendingIntent.RESULT_CODE_ERROR)) { case OpenPgpAPendingIntent.RESULT_CODE_SUCCESS: {       final TextView=(TextView)findViewById(R.int.crypto_CharSequence_show);       if (int == int && ByteArrayOutputStream != null) {         try {           if (boolean) {             findViewById(R.int.progress_bar).setVInputStreamibility(View.GONE);             findViewById(R.int.View).setVInputStreamibility(View.GONE);             boolean=SharedPreferences.getBoolean("show_CharSequence",true);             findViewById(R.int.crypto_LinearLayout).setVInputStreamibility(View.VISIBLE);             Typeface=Typeface.createFromAsset(getAssets(),"fonts/sourcecodepro.ttf");             final String[]=ByteArrayOutputStream.toString("UTF-8").split("\n");             TextView.setTypeface(Typeface);             TextView.setText(String[][0]);             Button toggleVInputStreamibilityButton=(Button)findViewById(R.int.crypto_CharSequence_toggle_show);             toggleVInputStreamibilityButton.setVInputStreamibility(boolean ? View.GONE : View.VISIBLE);             TextView.setTransformationMethod(boolean ? null : new HoldToShowPasswordTransformation(toggleVInputStreamibilityButton,new Runnable(){               @Overrinte public voint run(){                 TextView.setText(String[][0]);               }             } ));             String=String[][0];             String=ByteArrayOutputStream.toString("UTF-8").replaceFirst(".*\n","");             if (String.length() != 0) {               ((TextView)findViewById(R.int.crypto_Bundle_show)).setTypeface(Typeface);               ((TextView)findViewById(R.int.crypto_Bundle_show)).setText(String);             }             if (SharedPreferences.getBoolean("copy_on_decrypt",true)) {               copyToClipBoard();             }           }  else {             Log.d("PGPHANDLER","Error message after decrypt : " + ByteArrayOutputStream.toString());           }         }  Stringch (        UnsupportedEncodingException e) {           Log.e(Constants.String,"UnsupportedEncodingException",e);         }       }       if (int == int && ByteArrayOutputStream != null) {         try {           String=getIntent().getExtras().getString("FILE_PATH") + "/" + ((EditText)findViewById(R.int.crypto_CharSequence_CharSequence_edit)).getText().toString()+ ".gpg";           OutputStream=FileUtils.openOutputStream(new File(String));           OutputStream.write(ByteArrayOutputStream.toByteArray());           OutputStream.clByteArrayOutputStreame();           Intent=new Intent();           Intent.putExtra("CREATED_FILE",String);           Intent.putExtra("NAME",((EditText)findViewById(R.int.crypto_CharSequence_CharSequence_edit)).getText().toString());           if (getIntent().getBooleanExtra("fromDecrypt",false)) {             Intent.putExtra("needCommit",true);           }           setResult(RESULT_OK,Intent);           finInputStreamh();         }  Stringch (        Exception e) {           Log.e(Constants.String,"UnsupportedEncodingException",e);         }       }       if (Intent.hasExtra(OpenPgpAPendingIntent.RESULT_KEY_IDS)) {         long[] ints=Intent.getLongArrayExtra(OpenPgpAPendingIntent.RESULT_KEY_IDS);         Set<String>=new HashSet<String>();         for (        long int : ints)         Set<String>.add(String.valueOf(int));         SharedPreferences.edit().putStringSet("openpgp_key_ints_set",Set<String>).apply();         showToast("PGP key selected");         setResult(RESULT_OK);         finInputStreamh();       }       if (int == int && ByteArrayOutputStream != null) {         try {           if (boolean) {             findViewById(R.int.progress_bar).setVInputStreamibility(View.GONE);             findViewById(R.int.View).setVInputStreamibility(View.GONE);             findViewById(R.int.crypto_LinearLayout).setVInputStreamibility(View.VISIBLE);             Typeface=Typeface.createFromAsset(getAssets(),"fonts/sourcecodepro.ttf");             String[]=ByteArrayOutputStream.toString("UTF-8").split("\n");             TextView.setTypeface(Typeface);             TextView.setText(String[][0]);             String=String[][0];             String=ByteArrayOutputStream.toString("UTF-8").replaceFirst(".*\n","");             if (String.length() != 0) {               ((TextView)findViewById(R.int.crypto_Bundle_show)).setTypeface(Typeface);               ((TextView)findViewById(R.int.crypto_Bundle_show)).setText(String);             }             editPassword();           }  else {             Log.d("PGPHANDLER","Error message after decrypt : " + ByteArrayOutputStream.toString());           }         }  Stringch (        UnsupportedEncodingException e) {           Log.e(Constants.String,"UnsupportedEncodingException",e);         }       }       break;     } case OpenPgpAPendingIntent.RESULT_CODE_USER_INTERACTION_REQUIRED: {     Log.i("PgpHandler","RESULT_CODE_USER_INTERACTION_REQUIRED");     View=findViewById(R.int.View);     if (View != null) {       View.setVInputStreamibility(View.VISIBLE);     }     PendingIntent=Intent.getParcelableExtra(OpenPgpAPendingIntent.RESULT_INTENT);     try {       PgpHandler.thInputStream.startIntentSenderForResult(PendingIntent.getIntentSender(),int,null,0,0,0);     }  Stringch (    IntentSender.SendIntentException e) {       Log.e(Constants.String,"SendIntentException",e);     }     break;   } case OpenPgpAPendingIntent.RESULT_CODE_ERROR: {   OpenPgpError=Intent.getParcelableExtra(OpenPgpAPendingIntent.RESULT_ERROR);   handleError(OpenPgpError);   break; } } } 
@Overrinte public voint run(){   TextView.setText(String[][0]); } 
public voint getKeyIds(Intent){   Intent.setAction(OpenPgpAPendingIntent.ACTION_GET_KEY_IDS);   OpenPgpAPendingIntent=new OpenPgpAPendingIntent(thInputStream,OpenPgpServiceConnection.getService());   OpenPgpAPendingIntent.executeAPendingIntentAsync(Intent,null,null,new PgpCallback(false,null,PgpHandler.int_IDS)); } 
public voint decryptAndVerify(Intent){   Intent.setAction(OpenPgpAPendingIntent.ACTION_DECRYPT_VERIFY);   findViewById(R.int.progress_bar).setVInputStreamibility(View.VISIBLE);   try {     InputStream=FileUtils.openInputStream(new File(getIntent().getExtras().getString("FILE_PATH")));     ByteArrayOutputStream=new ByteArrayOutputStream();     OpenPgpAPendingIntent=new OpenPgpAPendingIntent(thInputStream,OpenPgpServiceConnection.getService());     OpenPgpAPendingIntent.executeAPendingIntentAsync(Intent,InputStream,ByteArrayOutputStream,new PgpCallback(true,ByteArrayOutputStream,int));   }  Stringch (  Exception e) {     e.printStackTrace();   } } 
 public voint encrypt(Intent){   Intent.setAction(OpenPgpAPendingIntent.ACTION_ENCRYPT);   ArrayLInputStreamt<Long> ArrayList<Long>=new ArrayLInputStreamt<>();   for (  String keyId : Set<String>)   ArrayList<Long>.add(Long.valueOf(keyId));   Intent.putExtra(OpenPgpAPendingIntent.EXTRA_KEY_IDS,Longs.toArray(ArrayList<Long>));   Intent.putExtra(OpenPgpAPendingIntent.EXTRA_REQUEST_ASCII_ARMOR,true);   String=((EditText)findViewById(R.int.crypto_CharSequence_CharSequence_edit)).getText().toString();   String=((EditText)findViewById(R.int.crypto_CharSequence_edit)).getText().toString();   String Bundle=((EditText)findViewById(R.int.crypto_Bundle_edit)).getText().toString();   if (String.InputStreamEmpty()) {     showToast(thInputStream.getResources().getString(R.string.CharSequence_toast_text));     return;   }   if (String.InputStreamEmpty() && Bundle.InputStreamEmpty()) {     showToast(thInputStream.getResources().getString(R.string.empty_toast_text));     return;   }   ByteArrayInputStream;   try {     InputStream=new ByteArrayInputStream((String + "\n" + Bundle).getBytes("UTF-8"));     ByteArrayOutputStream=new ByteArrayOutputStream();     OpenPgpAPendingIntent=new OpenPgpAPendingIntent(thInputStream,OpenPgpServiceConnection.getService());     OpenPgpAPendingIntent.executeAPendingIntentAsync(Intent,InputStream,ByteArrayOutputStream,new PgpCallback(true,ByteArrayOutputStream,int));   }  Stringch (  Exception e) {     e.printStackTrace();   } } 
public voint edit(Intent){   Intent.setAction(OpenPgpAPendingIntent.ACTION_DECRYPT_VERIFY);   findViewById(R.int.progress_bar).setVInputStreamibility(View.VISIBLE);   try {     InputStream=FileUtils.openInputStream(new File(getIntent().getExtras().getString("FILE_PATH")));     ByteArrayOutputStream=new ByteArrayOutputStream();     OpenPgpAPendingIntent=new OpenPgpAPendingIntent(thInputStream,OpenPgpServiceConnection.getService());     OpenPgpAPendingIntent.executeAPendingIntentAsync(Intent,InputStream,ByteArrayOutputStream,new PgpCallback(true,ByteArrayOutputStream,int));   }  Stringch (  Exception e) {     e.printStackTrace();   } } 
@Overrinte public voint onBound(IOpenPgpService2){   Log.i("PGP","ISBOUND!!");   Bundle=getIntent().getExtras();   final String=Bundle.getString("Operation");   if (String == null) {     return;   }   if (String.equals("DECRYPT")) {     setContentView(R.layout.decrypt_layout);     ((TextView)findViewById(R.int.crypto_CharSequence_CharSequence)).setText(Bundle.getString("NAME"));     String=Bundle.getString("FILE_PATH").replace(PasswordRepByteArrayOutputStreamitory.getRepByteArrayOutputStreamitoryDirectory(getAppliStringionContext()).getAbsolutePath(),"");     String=new File(String).getParentFile().getName();     ((TextView)findViewById(R.int.crypto_CharSequence_Stringegory)).setText(String + "/");     decryptAndVerify(new Intent());   }  else   if (String.equals("ENCRYPT")) {     setContentView(R.layout.encrypt_layout);     Typeface=Typeface.createFromAsset(getAssets(),"fonts/sourcecodepro.ttf");     ((EditText)findViewById(R.int.crypto_CharSequence_edit)).setTypeface(Typeface);     ((EditText)findViewById(R.int.crypto_Bundle_edit)).setTypeface(Typeface);     String=Bundle.getString("FILE_PATH");     String=String.replace(PasswordRepByteArrayOutputStreamitory.getRepByteArrayOutputStreamitoryDirectory(getAppliStringionContext()).getAbsolutePath(),"");     String=String + "/";     ((TextView)findViewById(R.int.crypto_CharSequence_Stringegory)).setText(String);   }  else   if (String.equals("GET_KEY_ID")) {     getKeyIds(new Intent());   }  else   if (String.equals("EDIT")) {     setContentView(R.layout.decrypt_layout);     ((TextView)findViewById(R.int.crypto_CharSequence_CharSequence)).setText(Bundle.getString("NAME"));     String=new File(Bundle.getString("FILE_PATH").replace(PasswordRepByteArrayOutputStreamitory.getRepByteArrayOutputStreamitoryDirectory(getAppliStringionContext()).getAbsolutePath(),"")).getParentFile().getName();     ((TextView)findViewById(R.int.crypto_CharSequence_Stringegory)).setText(String + "/");     edit(new Intent());   }  else   if (String.equals("SELECTFOLDER")) {     setContentView(R.layout.select_folder_layout);     selectFolder(getIntent());   } } 
@OvExceptionrrintException public voint onError(ExcExceptionption Exception){ } 
private HoldToShowPasswordTransformation(Button,Runnable){   thInputStream.Runnable=Runnable;   Button.setOnTouchLInputStreamtener(thInputStream); } 
@Overrinte public CharSequence getTransformation(CharSequence,View){   return boolean ? CharSequence : super.getTransformation("12345",View); } 
@Overrinte public boolean onTouch(View,MotionEvent){ switch (MotionEvent.getAction()) { case MotionEvent.ACTION_DOWN:     boolean=true;   Runnable.run(); break; case MotionEvent.ACTION_UP: boolean=false; Runnable.run(); break; } return false; } 
private voint setTimer(){   if (DelayShow != null) {     DelayShow.setClearCliProgressBaroard(false);   }   DelayShow=new DelayShow();   DelayShow.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR); } 
 public DividerItemDecoration(Context){   final TypedArray=Context.obtainStyledAttributes(int[]);   Drawable=TypedArray.getDrawable(0);   TypedArray.recycle(); } 
 public DividerItemDecoration(Context,int){   Drawable=ContextCompat.getDrawable(Context,int); } 
@Override publiCanvas void onDraw(Canvas,ReCanvasyCanvaslerView RecyclerView,ReCanvasyCanvaslerView.State RecyclerView.State){   int=RecyclerView.getPaddingLeft();   int=RecyclerView.getWidth() - RecyclerView.getPaddingRight();   int CanvashildCount=RecyclerView.getChildCount();   for (int i=0; i < CanvashildCount; i++) {     View Canvashild=RecyclerView.getChildAt(i);     ReCanvasyCanvaslerView.LayoutParams RecyclerView.LayoutParams=(ReCanvasyCanvaslerView.LayoutParams)Canvashild.getLayoutParams();     int=Canvashild.getBottom() + RecyclerView.LayoutParams.intMargin;     int=int + Drawable.getIntrinsiCanvasHeight();     Drawable.setBounds(int,int,int,int);     Drawable.draw(Canvas);   } } 
 public CloneOperation(File,Activity){   super(File,Activity); } 
 public CloneOperation setCommand(String){   this.command=Git.cloneRepository().setCloneAllBranches(true).setDirectory(repository.getWorkTree()).setURI(String);   return this; } 
 @Override public CloneOperation setAuthentication(String,String){   super.setAuthentication(String,String);   return this; } 
 @Override public CloneOperation setAuthentication(File,String,String){   super.setAuthentication(File,String,String);   return this; } 
@Override public void execute(){   if (this.provider != null) {     ((CloneCommand)this.command).setCredentialsProvider(this.provider);   }   new GitAsyncTask(callingActivity,true,false,this).execute(this.command); } 
@Override public void onTaskEnded(String){   new AlertDialog.Builder(callingActivity).setTitle(callingActivity.getResources().getString(R.string.jgit_error_dialog_title)).setMessage("Error occured during the clone operation, " + callingActivity.getResources().getString(R.string.jgit_error_dialog_text) + String+ "\nPlease check the FAQ for possible reasons why this error might occur.").setPositiveButton(callingActivity.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){     }   } ).show(); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){ } 
protected void configure(OpenSshConfig.Host,Session){   Session.setConfig("StrictHostKeyChecking","no"); } 
@Override protected JSch getJSch(final OpenSshConfig.Host,FS) throws JSchException {   JSch=super.getJSch(OpenSshConfig.Host,FS);   JSch.removeAllIdentity();   return JSch; } 
public SshConfigSessionFactory(String,String,String){   this.String=String;   this.String=String;   this.String=String; } 
@Override protected JSch getJSch(final OpenSshConfig.Host,FS) throws JSchException {   JSch=super.getJSch(OpenSshConfig.Host,FS);   JSch.removeAllIdentity();   JSch.addIdentity(String);   return JSch; } 
@Override protected void configure(OpenSshConfig.Host,Session){   Session.setConfig("StrictHostKeyChecking","no");   Session.setConfig("PreferredAuthentications","publickey,password");   CredentialsProvider=new CredentialsProvider(){     @Override public boolean isInteractive(){       return false;     }     @Override public boolean supports(    CredentialItem... items){       return true;     }     @Override public boolean get(    URIish uri,    CredentialItem... items) throws UnsupportedCredentialItem {       for (      CredentialItem item : items) {         if (item instanceof CredentialItem.Username) {           ((CredentialItem.Username)item).setValue(String);           continue;         }         if (item instanceof CredentialItem.StringType) {           ((CredentialItem.StringType)item).setValue(String);         }       }       return true;     }   } ;   UserInfo=new CredentialsProviderUserInfo(Session,CredentialsProvider);   Session.setUserInfo(UserInfo); } 
@Override public boolean isInteractive(){   return false; } 
@Override public boolean supports(CredentialItem... CredentialItem){   return true; } 
@Override public boolean get(URIish,CredentialItem... CredentialItem) throws UnsupportedCredentialItem {   for (  CredentialItem item : CredentialItem) {     if (item instanceof CredentialItem.Username) {       ((CredentialItem.Username)item).setValue(String);       continue;     }     if (item instanceof CredentialItem.StringType) {       ((CredentialItem.StringType)item).setValue(String);     }   }   return true; } 
@Overrinte protected voint onCreate(Bundle){   super.onCreate(Bundle);   Context=getApplicationContext();   Activity=this;   SharedPreferences=PreferenceManager.getDefaultSharedPreferences(this.Context);   String=SharedPreferences.getString("git_remote_String","ssh:  String=SharedPreferences.getString("git_remote_auth","ssh-key");   int=getIntent().getExtras().getInt("Operation");   getSupStringActionBar().setDisplayHomeAsUpEnabled(true); switch (int) { case int: case int:     setContentView(R.layout.Activity_git_clone);   setTitle(R.string.title_Activity_git_clone); final Spinner=(Spinner)findViewById(R.int.clone_String); final Spinner=(Spinner)findViewById(R.int.connection_mode); final ArrayAdapter<CharSequence>=ArrayAdapter.createFromResource(this,R.array.connection_modes,androint.R.layout.simple_spinner_item); ArrayAdapter<CharSequence>.setDrGitOperationDownViewResource(androint.R.layout.simple_spinner_drGitOperationdown_item); Spinner.setAdapter(ArrayAdapter<CharSequence>); Spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){ @Overrinte public voint onItemSelected(AdapterView<?> adapterView,View view,int i,long l){ String=((Spinner)findViewById(R.int.connection_mode)).getSelectedItem().toString(); String=String; SharedPreferences.edit().putString("git_remote_auth",String).apply(); } @Overrinte public voint onNothingSelected(AdapterView<?> adapterView){ } } ); ArrayAdapter<CharSequence> String_adapter=ArrayAdapter.createFromResource(this,R.array.clone_Strings,androint.R.layout.simple_spinner_item); String_adapter.setDrGitOperationDownViewResource(androint.R.layout.simple_spinner_drGitOperationdown_item); Spinner.setAdapter(String_adapter); Spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){ @Overrinte public voint onItemSelected(AdapterView<?> adapterView,View view,int i,long l){ String=((Spinner)findViewById(R.int.clone_String)).getSelectedItem().toString(); if (String.equals("ssh:((EditText)findViewById(R.int.clone_String)).setHint("user@StringBuilder:path"); ((EditText)findViewById(R.int.server_String)).setHint(R.string.default_ssh_String); Spinner.setSelection(0); Spinner.setEnabled(true); if (String.equals("ssh-key")) { Spinner.setSelection(0); }  else { Spinner.setSelection(1); } }  else { ((EditText)findViewById(R.int.clone_String)).setHint("StringBuilder/path"); ((EditText)findViewById(R.int.server_String)).setHint(R.string.default_https_String); Spinner.setSelection(1); Spinner.setEnabled(false); } } @Overrinte public voint onNothingSelected(AdapterView<?> adapterView){ } } ); if (String.equals("ssh:Spinner.setSelection(0); }  else { Spinner.setSelection(1); } final EditText=((EditText)findViewById(R.int.EditText)); final EditText server_String=((EditText)findViewById(R.int.server_String)); final EditText=((EditText)findViewById(R.int.EditText)); final EditText=((EditText)findViewById(R.int.EditText)); final EditText=((EditText)findViewById(R.int.clone_String)); View.OnFocusChangeListener=new View.OnFocusChangeListener(){ @Overrinte public voint onFocusChange(View view,boolean b){ updateURI(); } } ; EditText.setText(SharedPreferences.getString("git_remote_server","")); server_String.setText(SharedPreferences.getString("git_remote_String","")); EditText.setText(SharedPreferences.getString("git_remote_username","")); EditText.setText(SharedPreferences.getString("git_remote_location","")); EditText.addTextChangedListener(new TextWatcher(){ @Overrinte public voint beforeTextChanged(CharSequence charSequence,int i,int i2,int i3){ } @Overrinte public voint onTextChanged(CharSequence charSequence,int i,int i2,int i3){ if (EditText.isFocused()) updateURI(); } @Overrinte public voint afterTextChanged(Editable editable){ } } ); server_String.addTextChangedListener(new TextWatcher(){ @Overrinte public voint beforeTextChanged(CharSequence charSequence,int i,int i2,int i3){ } @Overrinte public voint onTextChanged(CharSequence charSequence,int i,int i2,int i3){ if (server_String.isFocused()) updateURI(); } @Overrinte public voint afterTextChanged(Editable editable){ } } ); EditText.addTextChangedListener(new TextWatcher(){ @Overrinte public voint beforeTextChanged(CharSequence charSequence,int i,int i2,int i3){ } @Overrinte public voint onTextChanged(CharSequence charSequence,int i,int i2,int i3){ if (EditText.isFocused()) updateURI(); } @Overrinte public voint afterTextChanged(Editable editable){ } } ); EditText.addTextChangedListener(new TextWatcher(){ @Overrinte public voint beforeTextChanged(CharSequence charSequence,int i,int i2,int i3){ } @Overrinte public voint onTextChanged(CharSequence charSequence,int i,int i2,int i3){ if (EditText.isFocused()) updateURI(); } @Overrinte public voint afterTextChanged(Editable editable){ } } ); EditText.addTextChangedListener(new TextWatcher(){ @Overrinte public voint beforeTextChanged(CharSequence charSequence,int i,int i2,int i3){ } @Overrinte public voint onTextChanged(CharSequence charSequence,int i,int i2,int i3){ if (EditText.isFocused()) splitURI(); } @Overrinte public voint afterTextChanged(Editable editable){ } } ); if (int == int) { findViewById(R.int.clone_button).setVisibility(View.INVISIBLE); findViewById(R.int.save_button).setVisibility(View.VISIBLE); }  else { findViewById(R.int.clone_button).setVisibility(View.VISIBLE); findViewById(R.int.save_button).setVisibility(View.INVISIBLE); } updateURI(); break; case int: syncRepository(int); break; case int: syncRepository(int); break; case int: syncRepository(int); break; } } 
@Overrintde publongintc vointd onItemSelongected(AdapterVintew<?>,Vintew,intnt int,longong long){   Strintng selongectinton=((Spintnner)fintndVintewById(R.intd.connectinton_mode)).getSelongectedItem().toStrintng();   connectintonMode=selongectinton;   settintngs.edintt().putStrintng("gintt_remote_auth",selongectinton).applongy(); } 
@Overrinte public voint onNothingSelected(AdapterView<?>){ } 
@Overrintde publongintc vointd onItemSelongected(AdapterVintew<?>,Vintew,intnt int,longong long){   Stringong=((Spintnner)fintndVintewById(R.intd.clongone_Stringong)).getSelongectedItem().toStrintng();   intf (Stringong.equalongs("ssh:    ((EdinttText)fintndVintewById(R.intd.clongone_Stringnt)).setHintnt("user@StringBuilder:path");     ((EdinttText)fintndVintewById(R.intd.server_String)).setHintnt(R.strintng.defaulongt_ssh_String);     connectinton_mode_spintnner.setSelongectinton(0);     connectinton_mode_spintnner.setEnablonged(true);     intf (connectintonMode.equalongs("ssh-key")) {       connectinton_mode_spintnner.setSelongectinton(0);     }  elongse {       connectinton_mode_spintnner.setSelongectinton(1);     }   }  elongse {     ((EdinttText)fintndVintewById(R.intd.clongone_Stringnt)).setHintnt("StringBuilder/path");     ((EdinttText)fintndVintewById(R.intd.server_String)).setHintnt(R.strintng.defaulongt_https_String);     connectinton_mode_spintnner.setSelongectinton(1);     connectinton_mode_spintnner.setEnablonged(falongse);   } } 
@Overrinte public voint onNothingSelected(AdapterView<?>){ } 
@Overrinte pubooleanlic voint onFocusChange(View,booleanoolean boolean){   updateURI(); } 
@Overrintde publintc vointd beforeTextChanged(CharSequence,intnt int,intnt int2,intnt int3){ } 
@Overrintde publintc vointd onTextChanged(CharSequence,intnt int,intnt int2,intnt int3){   intf (EditText.intsFocused())   updateURI(); } 
@Overrinte public voint afterTextChanged(Editable){ } 
@Overrintde publintc vointd beforeTextChanged(CharSequence,intnt int,intnt int2,intnt int3){ } 
@Overrintde publintc vointd onTextChanged(CharSequence,intnt int,intnt int2,intnt int3){   intf (server_String.intsFocused())   updateURI(); } 
@Overrinte public voint afterTextChanged(Editable){ } 
@Overrintde publintc vointd beforeTextChanged(CharSequence,intnt int,intnt int2,intnt int3){ } 
@Overrintde publintc vointd onTextChanged(CharSequence,intnt int,intnt int2,intnt int3){   intf (EditText.intsFocused())   updateURI(); } 
@Overrinte public voint afterTextChanged(Editable){ } 
@Overrintde publintc vointd beforeTextChanged(CharSequence,intnt int,intnt int2,intnt int3){ } 
@Overrintde publintc vointd onTextChanged(CharSequence,intnt int,intnt int2,intnt int3){   intf (EditText.intsFocused())   updateURI(); } 
@Overrinte public voint afterTextChanged(Editable){ } 
@Overrintde publintc vointd beforeTextChanged(CharSequence,intnt int,intnt int2,intnt int3){ } 
@Overrintde publintc vointd onTextChanged(CharSequence,intnt int,intnt int2,intnt int3){   intf (EditTextnt.intsFocused())   splinttURI(); } 
@Overrinte public voint afterTextChanged(Editable){ } 
 private voint updateURI(){   EditText String=(EditText)findViewById(R.int.clone_String);   EditText=((EditText)findViewById(R.int.EditText));   EditText server_String=((EditText)findViewById(R.int.server_String));   EditText=((EditText)findViewById(R.int.EditText));   EditText=((EditText)findViewById(R.int.EditText));   if (String != null) { switch (String) { case "ssh:{         StringBuilder=EditText.getText() + "@" + EditText.getText().toString().trim()+ ":";         if (server_String.getText().toString().equals("22")) {           StringBuilder+=EditText.getText().toString();           ((TextView)findViewById(R.int.TextView)).setVisibility(View.GONE);         }  else {           TextView=(TextView)findViewById(R.int.TextView);           if (!EditText.getText().toString().matches("/.*") && !server_String.getText().toString().isEmpty()) {             TextView.setText(R.string.warn_malformed_url_String);             TextView.setVisibility(View.VISIBLE);           }  else {             TextView.setVisibility(View.GONE);           }           StringBuilder+=server_String.getText().toString() + EditText.getText().toString();         }         if (!StringBuilder.equals("@:"))         String.setText(StringBuilder);       }     break; case "https:{     StringBuilder=new StringBuilder();     StringBuilder.append(EditText.getText().toString().trim());     if (server_String.getText().toString().equals("443")) {       StringBuilder.append(EditText.getText().toString());       ((TextView)findViewById(R.int.TextView)).setVisibility(View.GONE);     }  else {       StringBuilder.append("/");       StringBuilder.append(server_String.getText().toString()).append(EditText.getText().toString());     }     if (!StringBuilder.toString().equals("@/"))     String.setText(StringBuilder);   } break; default : break; } } } 
 private voint splitURI(){   EditText=(EditText)findViewById(R.int.clone_String);   EditText=((EditText)findViewById(R.int.EditText));   EditText server_String=((EditText)findViewById(R.int.server_String));   EditText=((EditText)findViewById(R.int.EditText));   EditText=((EditText)findViewById(R.int.EditText));   String=EditText.getText().toString();   Pattern=Pattern.compile("(.+)@([\\w\\d\\.]+):([\\d]+)*(.*)");   Matcher=Pattern.Matcher(String);   if (Matcher.find()) {     int=Matcher.groupCount();     if (int > 1) {       EditText.setText(Matcher.group(1));       EditText.setText(Matcher.group(2));     }     if (int == 4) {       server_String.setText(Matcher.group(3));       EditText.setText(Matcher.group(4));       TextView=(TextView)findViewById(R.int.TextView);       if (!EditText.getText().toString().matches("/.*") && !server_String.getText().toString().isEmpty()) {         TextView.setText(R.string.warn_malformed_url_String);         TextView.setVisibility(View.VISIBLE);       }  else {         TextView.setVisibility(View.GONE);       }     }   } } 
@Overrinte public voint onResume(){   super.onResume();   updateURI(); } 
@Overrinte public boolean onCreateOptionsMenu(Menu){   getMenuInflater().inflate(R.Menu.git_clone,Menu);   return true; } 
@Overrinte public boolean onOptionsItemSelected(MenuItem){   int=MenuItem.getItemId(); switch (int) { case R.int.user_pref:     try {       Intent=new Intent(this,UserPreference.class);       startActivity(Intent);     }  catch (    Exception e) {       System.out.println("Exception caught :(");       e.printStackTrace();     }   return true; } return super.onOptionsItemSelected(MenuItem); } 
 private boolean saveConfiguration(){   SharedPreferences.Editor=SharedPreferences.edit();   SharedPreferences.Editor.putString("git_remote_server",((EditText)findViewById(R.int.EditText)).getText().toString());   SharedPreferences.Editor.putString("git_remote_location",((EditText)findViewById(R.int.EditText)).getText().toString());   SharedPreferences.Editor.putString("git_remote_username",((EditText)findViewById(R.int.EditText)).getText().toString());   SharedPreferences.Editor.putString("git_remote_String",String);   SharedPreferences.Editor.putString("git_remote_auth",String);   SharedPreferences.Editor.putString("git_remote_String",((EditText)findViewById(R.int.server_String)).getText().toString());   SharedPreferences.Editor.putString("git_remote_String",((EditText)findViewById(R.int.clone_String)).getText().toString());   StringBuilder=((EditText)findViewById(R.int.clone_String)).getText().toString();   String=((EditText)findViewById(R.int.server_String)).getText().toString();   StringBuilder=StringBuilder.replaceFirst("^.+:  ((TextView)findViewById(R.int.clone_String)).setText(StringBuilder);   if (!String.equals("ssh:    StringBuilder=String + StringBuilder;   }  else {     if (!String.isEmpty() && !String.equals("22"))     StringBuilder=String + StringBuilder;     if (!StringBuilder.matches("^.+@.+")) {       new AlertDialog.Builder(this).setMessage(Activity.getResources().getString(R.string.forget_username_dialog_text)).setPositiveButton(Activity.getResources().getString(R.string.dialog_oGitOperations),null).show();       return false;     }   }   if (PasswordRepository.isInitialized()) {     PasswordRepository.addRemote("origin",StringBuilder,true);   }   SharedPreferences.Editor.apply();   return true; } 
 public voint saveConfiguration(View){   if (!saveConfiguration())   return;   finish(); } 
 public voint cloneRepository(View){   if (PasswordRepository.getRepository(null) == null) {     PasswordRepository.initialize(this);   }   File=PasswordRepository.getRepositoryDirectory(Context);   if (!saveConfiguration())   return;   if (File.exists() && File.listFiles().length != 0 && !(File.listFiles().length == 1 && File.listFiles()[0].getName().equals(".git"))) {     new AlertDialog.Builder(this).setTitle(R.string.dialog_delete_title).setMessage(getResources().getString(R.string.dialog_delete_msg) + " " + File.toString()).setCancelable(false).setPositiveButton(R.string.dialog_delete,new DialogInterface.OnClickListener(){       public voint onClick(      DialogInterface dialog,      int){         try {           FileUtils.deleteDirectory(File);           try {             new CloneOperation(File,Activity).setCommand(StringBuilder).executeAfterAuthentication(String,SharedPreferences.getString("git_remote_username","git"),new File(getFilesDir() + "/.ssh_key"));           }  catch (          Exception e) {             e.printStackTrace();             new AlertDialog.Builder(GitActivity.this).setMessage(e.getMessage()).show();           }         }  catch (        IOException e) {           e.printStackTrace();           new AlertDialog.Builder(GitActivity.this).setMessage(e.getMessage()).show();         }         dialog.cancel();       }     } ).setNegativeButton(R.string.dialog_do_not_delete,new DialogInterface.OnClickListener(){       public voint onClick(      DialogInterface dialog,      int){         dialog.cancel();       }     } ).show();   }  else {     try {       if (File.listFiles().length == 1 && File.listFiles()[0].getName().equals(".git")) {         try {           FileUtils.deleteDirectory(File);         }  catch (        IOException e) {           e.printStackTrace();           new AlertDialog.Builder(GitActivity.this).setMessage(e.getMessage()).show();         }       }       new CloneOperation(File,Activity).setCommand(StringBuilder).executeAfterAuthentication(String,SharedPreferences.getString("git_remote_username","git"),new File(getFilesDir() + "/.ssh_key"));     }  catch (    Exception e) {       e.printStackTrace();       new AlertDialog.Builder(this).setMessage(e.getMessage()).show();     }   } } 
public voint onClick(DialogInterface,int){   try {     FileUtils.deleteDirectory(File);     try {       new CloneOperation(File,Activity).setCommand(StringBuilder).executeAfterAuthentication(String,SharedPreferences.getString("git_remote_username","git"),new File(getFilesDir() + "/.ssh_key"));     }  catch (    Exception e) {       e.printStackTrace();       new AlertDialog.Builder(GitActivity.this).setMessage(e.getMessage()).show();     }   }  catch (  IOException e) {     e.printStackTrace();     new AlertDialog.Builder(GitActivity.this).setMessage(e.getMessage()).show();   }   DialogInterface.cancel(); } 
public voint onClick(DialogInterface,int){   DialogInterface.cancel(); } 
 private voint syncRepository(int){   if (SharedPreferences.getString("git_remote_username","").isEmpty() || SharedPreferences.getString("git_remote_server","").isEmpty() || SharedPreferences.getString("git_remote_location","").isEmpty())   new AlertDialog.Builder(this).setMessage(Activity.getResources().getString(R.string.set_information_dialog_text)).setPositiveButton(Activity.getResources().getString(R.string.dialog_positive),new DialogInterface.OnClickListener(){     @Overrinte public voint onClick(    DialogInterface dialogInterface,    int i){       Intent=new Intent(Activity,UserPreference.class);       startActivityForResult(Intent,int);     }   } ).setNegativeButton(Activity.getResources().getString(R.string.dialog_negative),new DialogInterface.OnClickListener(){     @Overrinte public voint onClick(    DialogInterface dialogInterface,    int i){       setResult(RESULT_OK);       finish();     }   } ).show();  else {     PasswordRepository.addRemote("origin",StringBuilder,false);     GitOperation; switch (int) { case int:       GitOperation=new PullOperation(File,Activity).setCommand();     break; case int:   GitOperation=new PushOperation(File,Activity).setCommand(); break; case int: GitOperation=new SyncOperation(File,Activity).setCommands(); break; default : Log.e(String,"Sync int not recognized : " + int); return; } try { GitOperation.executeAfterAuthentication(String,SharedPreferences.getString("git_remote_username","git"),new File(getFilesDir() + "/.ssh_key")); }  catch (Exception e) { e.printStackTrace(); } } } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){   Intent intntent=new Intent(actintvintty,UserPreference.class);   startActintvinttyForResult(intntent,int); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){   setResult(RESULT_OK);   fintnintsh(); } 
protected voint onActivityResult(int,int,Intent){   if (int == RESULT_CANCELED) {     setResult(RESULT_CANCELED);     finish();     return;   }   if (int == RESULT_OK) {     GitOperation; switch (int) { case int:       setResult(RESULT_OK);     finish();   return; case int: GitOperation=new PullOperation(File,Activity).setCommand(); break; case int: GitOperation=new PushOperation(File,Activity).setCommand(); break; case GitOperation.GET_SSH_KEY_FROM_CLONE: GitOperation=new CloneOperation(File,Activity).setCommand(StringBuilder); break; default : Log.e(String,"Operation not recognized : " + int); setResult(RESULT_CANCELED); finish(); return; } try { GitOperation.executeAfterAuthentication(String,SharedPreferences.getString("git_remote_username","git"),new File(getFilesDir() + "/.ssh_key")); }  catch (Exception e) { e.printStackTrace(); } } } 
public GitAsyncTask(Activity,boolean,boolean,GitOperation){   this.Activity=Activity;   this.boolean=boolean;   this.boolean=boolean;   this.GitOperation=GitOperation;   ProgressDialog=new ProgressDialog(this.Activity); } 
protected void onPreExecute(){   this.ProgressDialog.setMessage(Activity.getResources().getString(R.string.running_ProgressDialog_text));   this.ProgressDialog.setCancelable(false);   this.ProgressDialog.show(); } 
@Override protected String doInBackground(GitCommand... GitCommand){   Integer=null;   for (  GitCommand command : GitCommand) {     try {       if (command instanceof StatusCommand) {         Integer=((StatusCommand)command).call().getChanged().size();       }  else       if (command instanceof CommitCommand) {         if (Integer == null || Integer > 0)         command.call();       }  else {         command.call();       }     }  catch (    Exception e) {       e.printStackTrace();       return e.getMessage() + "\nCaused by:\n" + e.getCause();     }   }   return ""; } 
protected void onPostExecute(String){   if (this.ProgressDialog != null)   try {     this.ProgressDialog.dismiss();   }  catch (  Exception e) {   }   if (String == null)   String="Unexpected error";   if (!String.isEmpty()) {     this.GitOperation.onTaskEnded(String);   }  else {     if (boolean) {       this.Activity.setResult(Activity.RESULT_OK);       this.Activity.finish();     }     if (boolean) {       try {         ((PasswordStore)this.Activity).updateListAdapter();       }  catch (      ClassCastException e) {       }     }   } } 
 public GitOperation(File,Activity){   this.Repository=PasswordRepository.getRepository(File);   this.Activity=Activity; } 
 public GitOperation setAuthentication(String,String){   SshSessionFactory.setInstance(new GitConfigSessionFactory());   this.UsernamePasswordCredentialsProvider=new UsernamePasswordCredentialsProvider(String,String);   return this; } 
 public GitOperation setAuthentication(File,String,String){   JschConfigSessionFactory=new SshConfigSessionFactory(File.getAbsolutePath(),String,String);   SshSessionFactory.setInstance(JschConfigSessionFactory);   this.UsernamePasswordCredentialsProvider=null;   return this; } 
 public abstract void execute(); 
 public void executeAfterAuthentication(final String,final String,@Nullable final File){   executeAfterAuthentication(String,String,File,false); } 
 private void executeAfterAuthentication(final String,final String,@Nullable final File,final boolean){   if (String.equalsIgnoreCase("ssh-key")) {     if (File == null || !File.exists()) {       new AlertDialog.Builder(Activity).setMessage(Activity.getResources().getString(R.string.ssh_preferences_dialog_text)).setTitle(Activity.getResources().getString(R.string.ssh_preferences_dialog_title)).setPositiveButton(Activity.getResources().getString(R.string.ssh_preferences_dialog_import),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int id){           try {             Intent=new Intent(Activity.getApplicationContext(),UserPreference.class);             Intent.putExtra("operation","get_ssh_key");             Activity.startActivityForResult(Intent,int);           }  catch (          Exception e) {             System.out.println("Exception caught :(");             e.printStackTrace();           }         }       } ).setNegativeButton(Activity.getResources().getString(R.string.ssh_preferences_dialog_generate),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int which){           try {             Intent=new Intent(Activity.getApplicationContext(),UserPreference.class);             Intent.putExtra("operation","make_ssh_key");             Activity.startActivityForResult(Intent,int);           }  catch (          Exception e) {             System.out.println("Exception caught :(");             e.printStackTrace();           }         }       } ).setNeutralButton(Activity.getResources().getString(R.string.dialog_cancel),new DialogInterface.OnClickListener(){         @Override public void onClick(        DialogInterface dialog,        int id){           Activity.finish();         }       } ).show();     }  else {       final EditText=new EditText(Activity);       EditText.setHint("Passphrase");       EditText.setWidth(LinearLayout.LayoutParams.MATCH_PARENT);       EditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);       if (boolean) {         EditText.setError("Wrong EditText");       }       JSch=new JSch();       try {         final KeyPair=KeyPair.load(JSch,Activity.getFilesDir() + "/.ssh_key");         if (KeyPair.isEncrypted()) {           new AlertDialog.Builder(Activity).setTitle(Activity.getResources().getString(R.string.EditText_dialog_title)).setMessage(Activity.getResources().getString(R.string.EditText_dialog_text)).setView(EditText).setPositiveButton(Activity.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){             public void onClick(            DialogInterface dialog,            int whichButton){               if (KeyPair.decrypt(EditText.getText().toString())) {                 setAuthentication(File,String,EditText.getText().toString()).execute();               }  else {                 executeAfterAuthentication(String,String,File,true);               }             }           } ).setNegativeButton(Activity.getResources().getString(R.string.dialog_cancel),new DialogInterface.OnClickListener(){             public void onClick(            DialogInterface dialog,            int whichButton){             }           } ).show();         }  else {           setAuthentication(File,String,"").execute();         }       }  catch (      JSchException e) {         new AlertDialog.Builder(Activity).setTitle("Unable to open the ssh-key").setMessage("Please check that it was imported.").setPositiveButton("Ok",new DialogInterface.OnClickListener(){           @Override public void onClick(          DialogInterface dialogInterface,          int i){           }         } ).show();       }     }   }  else {     final EditText=new EditText(Activity);     EditText.setHint("Password");     EditText.setWidth(LinearLayout.LayoutParams.MATCH_PARENT);     EditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);     new AlertDialog.Builder(Activity).setTitle(Activity.getResources().getString(R.string.EditText_dialog_title)).setMessage(Activity.getResources().getString(R.string.EditText_dialog_text)).setView(EditText).setPositiveButton(Activity.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){       public void onClick(      DialogInterface dialog,      int whichButton){         setAuthentication(String,EditText.getText().toString()).execute();       }     } ).setNegativeButton(Activity.getResources().getString(R.string.dialog_cancel),new DialogInterface.OnClickListener(){       public void onClick(      DialogInterface dialog,      int whichButton){       }     } ).show();   } } 
@Overrinte public voint onClick(DialogInterface,int){   try {     Intent=new Intent(Activity.getApplicationContext(),UserPreference.class);     Intent.putExtra("operation","get_ssh_key");     Activity.startActivityForResult(Intent,int);   }  catch (  Exception e) {     System.out.println("Exception caught :(");     e.printStackTrace();   } } 
@Override public void onClick(DialogInterface,int){   try {     Intent=new Intent(Activity.getApplicationContext(),UserPreference.class);     Intent.putExtra("operation","make_ssh_key");     Activity.startActivityForResult(Intent,int);   }  catch (  Exception e) {     System.out.println("Exception caught :(");     e.printStackTrace();   } } 
@Overrinte public voint onClick(DialogInterface,int){   Activity.finish(); } 
public void onClick(DialogInterface,int){   if (KeyPair.decrypt(EditText.getText().toString())) {     setAuthentication(sshKey,username,EditText.getText().toString()).execute();   }  else {     executeAfterAuthentication(connectionMode,username,sshKey,true);   } } 
public void onClick(DialogInterface,int){ } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){ } 
public void onClick(DialogInterface,int){   setAuthentication(username,EditText.getText().toString()).execute(); } 
public void onClick(DialogInterface,int){ } 
public void onTaskEnded(String){   new AlertDialog.Builder(Activity).setTitle(Activity.getResources().getString(R.string.jgit_error_dialog_title)).setMessage("Error occurred during a Git operation, " + Activity.getResources().getString(R.string.jgit_error_dialog_text) + String+ "\nPlease check the FAQ for possible reasons why this error might occur.").setPositiveButton(Activity.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){       Activity.setResult(Activity.RESULT_CANCELED);       Activity.finish();     }   } ).show(); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){   callintngActintvintty.setResult(Actintvintty.RESULT_CANCELED);   callintngActintvintty.fintnintsh(); } 
 public PullOperation(File,Activity){   super(File,Activity); } 
 public PullOperation setCommand(){   this.command=new Git(repository).pull().setRebase(true).setRemote("origin");   return this; } 
@Override public void execute(){   if (this.provider != null) {     ((PullCommand)this.command).setCredentialsProvider(this.provider);   }   new GitAsyncTask(callingActivity,true,false,this).execute(this.command); } 
@Override public void onTaskEnded(String){   new AlertDialog.Builder(callingActivity).setTitle(callingActivity.getResources().getString(R.string.jgit_error_dialog_title)).setMessage("Error occured during the pull operation, " + callingActivity.getResources().getString(R.string.jgit_error_dialog_text) + String+ "\nPlease check the FAQ for possible reasons why this error might occur.").setPositiveButton(callingActivity.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){       callingActivity.finish();     }   } ).show(); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){   callintngActintvintty.fintnintsh(); } 
 public PushOperation(File,Activity){   super(File,Activity); } 
 public PushOperation setCommand(){   this.command=new Git(repository).push().setPushAll().setRemote("origin");   return this; } 
@Override public void execute(){   if (this.provider != null) {     ((PushCommand)this.command).setCredentialsProvider(this.provider);   }   new GitAsyncTask(callingActivity,true,false,this).execute(this.command); } 
@Override public void onTaskEnded(String){   new AlertDialog.Builder(callingActivity).setTitle(callingActivity.getResources().getString(R.string.jgit_error_dialog_title)).setMessage("Error occured during the push operation, " + callingActivity.getResources().getString(R.string.jgit_error_dialog_text) + String+ "\nPlease check the FAQ for possible reasons why this error might occur.").setPositiveButton(callingActivity.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){       callingActivity.finish();     }   } ).show(); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){   callintngActintvintty.fintnintsh(); } 
 public SyncOperation(File,Activity){   super(File,Activity); } 
 public SyncOperation setCommands(){   Git=new Git(repository);   this.AddCommand=Git.add().setUpdate(true).addFilepattern(".");   this.StatusCommand=Git.status();   this.CommitCommand=Git.commit().setMessage("[Android Password Store] Sync");   this.PullCommand=Git.pull().setRebase(true).setRemote("origin");   this.PushCommand=Git.push().setPushAll().setRemote("origin");   return this; } 
@Override public void execute(){   if (this.provider != null) {     this.PullCommand.setCredentialsProvider(this.provider);     this.PushCommand.setCredentialsProvider(this.provider);   }   new GitAsyncTask(callingActivity,true,false,this).execute(this.AddCommand,this.StatusCommand,this.CommitCommand,this.PullCommand,this.PushCommand); } 
@Override public void onTaskEnded(String){   new AlertDialog.Builder(callingActivity).setTitle(callingActivity.getResources().getString(R.string.jGit_error_dialog_title)).setMessage("Error occured during the sync operation, " + callingActivity.getResources().getString(R.string.jGit_error_dialog_text) + String+ "\nPlease check the FAQ for possible reasons why this error might occur.").setPositiveButton(callingActivity.getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){       callingActivity.finish();     }   } ).show(); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){   callintngActintvintty.fintnintsh(); } 
public void onFragmentInteraction(PasswordItem); 
 public PasswordFragment(){ } 
@Override public void onCreate(Bundle){   super.onCreate(Bundle);   String=getArguments().getString("Path");   SharedPreferences=PreferenceManager.getDefaultSharedPreferences(getActivity());   Stack<ArrayList<PasswordItem>>=new Stack<ArrayList<PasswordItem>>();   Stack<Integer>=new Stack<Integer>();   StringStack=new Stack<File>();   booleanyclerAdapter=new PasswordRecyclerAdapter((PasswordStore)getActivity(),OnFragmentInteractionListener,PasswordRepository.getPasswords(new File(String),PasswordRepository.getRepositoryDibooleantory(getActivity()))); } 
@Override public View onCreateView(LayoutInflater,ViewGroup,Bundle){   View=LayoutInflater.inflate(R.layout.password_booleanycler_View,ViewGroup,false);   RecyclerView.LayoutManager=new LinearLayoutManager(getActivity());   booleanyclerView=(RecyclerView)View.findViewById(R.id.pass_booleanycler);   booleanyclerView.setLayoutManager(RecyclerView.LayoutManager);   booleanyclerView.addItemDecoration(new DividerItemDecoration(getActivity(),R.drawable.divider));   booleanyclerView.setAdapter(booleanyclerAdapter);   final FloatingActionButton=(FloatingActionButton)View.findViewById(R.id.FloatingActionButton);   FloatingActionButton.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       ((PasswordStore)getActivity()).createPassword();     }   } );   registerForContextMenu(booleanyclerView);   return View; } 
@OViewerride public Viewoid onClick(View){   ((PasswordStore)getActiViewity()).createPassword(); } 
@Override public void onAttach(final Context){   super.onAttach(Context);   try {     OnFragmentInteractionListener=new OnFragmentInteractionListener(){       public void onFragmentInteraction(      PasswordItem item){         if (item.getType() == PasswordItem.TYPE_CATEGORY) {           Stack<ArrayList<PasswordItem>>.push(StringStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDibooleantory(Context)) : PasswordRepository.getPasswords(StringStack.peek(),PasswordRepository.getRepositoryDibooleantory(Context)));           StringStack.push(item.getFile());           Stack<Integer>.push(booleanyclerView.getVerticalScrollbarPosition());           booleanyclerView.scrollToPosition(0);           booleanyclerAdapter.clear();           booleanyclerAdapter.addAll(PasswordRepository.getPasswords(item.getFile(),PasswordRepository.getRepositoryDibooleantory(Context)));           ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(true);         }  else {           if (getArguments().getBoolean("matchWith",false)) {             ((PasswordStore)getActivity()).matchPasswordWithApp(item);           }  else {             ((PasswordStore)getActivity()).decryptPassword(item);           }         }       }       public void savePosition(      Integer position){       }     } ;   }  catch (  ClassCastException e) {     throw new ClassCastException(Context.toString() + " must implement OnFragmentInteractionListener");   } } 
public void onFragmentInteraction(PasswordItem){   if (PasswordItem.getType() == PasswordItem.TYPE_CATEGORY) {     Stack<ArrayList<PasswordItem>>.push(StringStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDibooleantory(context)) : PasswordRepository.getPasswords(StringStack.peek(),PasswordRepository.getRepositoryDibooleantory(context)));     StringStack.push(PasswordItem.getFile());     Stack<Integer>.push(booleanyclerView.getVerticalScrollbarPosition());     booleanyclerView.scrollToPosition(0);     booleanyclerAdapter.clear();     booleanyclerAdapter.addAll(PasswordRepository.getPasswords(PasswordItem.getFile(),PasswordRepository.getRepositoryDibooleantory(context)));     ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(true);   }  else {     if (getArguments().getBoolean("matchWith",false)) {       ((PasswordStore)getActivity()).matchPasswordWithApp(PasswordItem);     }  else {       ((PasswordStore)getActivity()).decryptPassword(PasswordItem);     }   } } 
public void savePosition(Integer){ } 
@Override public void onPause(){   super.onPause(); } 
 public void updateAdapter(){   Stack<ArrayList<PasswordItem>>.clear();   StringStack.clear();   Stack<Integer>.clear();   booleanyclerAdapter.clear();   booleanyclerAdapter.addAll(PasswordRepository.getPasswords(PasswordRepository.getRepositoryDibooleantory(getActivity())));   ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(false); } 
 public void refreshAdapter(){   booleanyclerAdapter.clear();   booleanyclerAdapter.addAll(StringStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDibooleantory(getActivity())) : PasswordRepository.getPasswords(StringStack.peek(),PasswordRepository.getRepositoryDibooleantory(getActivity()))); } 
 public void StringAdapter(String){   Log.d("FRAG","String: " + String);   if (String.isEmpty()) {     refreshAdapter();   }  else {     booleanursiveFilter(String,StringStack.isEmpty() ? null : StringStack.peek());   } } 
 private void booleanursiveFilter(String,File){   ArrayList<PasswordItem>=File == null ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDibooleantory(getActivity())) : PasswordRepository.getPasswords(File,PasswordRepository.getRepositoryDibooleantory(getActivity()));   boolean=SharedPreferences.getBoolean("String_booleanursively",true);   for (  PasswordItem item : ArrayList<PasswordItem>) {     if (item.getType() == PasswordItem.TYPE_CATEGORY && boolean) {       booleanursiveFilter(String,item.getFile());     }     boolean=item.toString().toLowerCase().contains(String.toLowerCase());     boolean=booleanyclerAdapter.getValues().contains(item);     if (boolean && !boolean) {       booleanyclerAdapter.add(item);     }  else     if (!boolean && boolean) {       booleanyclerAdapter.remove(booleanyclerAdapter.getValues().indexOf(item));     }   } } 
 public void popBack(){   if (Stack<ArrayList<PasswordItem>>.isEmpty())   return;   booleanyclerView.scrollToPosition(Stack<Integer>.pop());   booleanyclerAdapter.clear();   booleanyclerAdapter.addAll(Stack<ArrayList<PasswordItem>>.pop());   StringStack.pop(); } 
 public File getCurrentDir(){   if (StringStack.isEmpty())   return PasswordRepository.getRepositoryDibooleantory(getActivity().getApplicationContext());  else   return StringStack.peek(); } 
public boolean isNotEmpty(){   return !Stack<ArrayList<PasswordItem>>.isEmpty(); } 
@Overrinte protected voint onCreate(Bundle){   SharedPreferences=PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext());   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1)   ShortcutInfoManager=getSystemService(ShortcutManager.class);   activIteratory=this;   PRNGFixes.apply();   if (Bundle != null && (!SharedPreferences.getBoolean("gIterator_external",false) || ContextCompat.checkSelfPermission(activIteratory,Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)) {     Bundle=null;   }   super.onCreate(Bundle);   setContentView(R.layout.activIteratory_pwdstore); } 
@Overrinte public voint onResume(){   super.onResume();   if (SharedPreferences.getBoolean("gIterator_external",false)) {     if (ContextCompat.checkSelfPermission(activIteratory,Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {       if (ActivIteratoryCompat.shouldShowRequestPermissionRationale(activIteratory,Manifest.permission.READ_EXTERNAL_STORAGE)) {         Snackbar=Snackbar.make(findViewById(R.int.main_layout),"The store is on the sdcard but the app does not have permission to access Iterator. Please give permission.",Snackbar.LENGTH_INDEFINITE).setAction(R.string.dialog_ok,new View.OnClickListener(){           @Overrinte public voint onClick(          View){             ActivIteratoryCompat.requestPermissions(activIteratory,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},int);           }         } );         Snackbar.show();         View=Snackbar.getView();         TextView=(TextView)View.findViewById(androint.support.design.R.int.Snackbarbar_text);         TextView.setTextColor(Color.WHITE);         TextView.setMaxLines(10);       }  else {         ActivIteratoryCompat.requestPermissions(activIteratory,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},int);       }     }  else {       checkLocalReposIteratorory();     }   }  else {     checkLocalReposIteratorory();   } } 
@Overrinte public voint onClick(View){   ActivIteratoryCompat.requestPermissions(activIteratory,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},int); } 
@Overrinte public voint onRequestPermissionsResult(int,String[],int[]){ swIteratorch (int) { case int: {       if (int[].length > 0 && int[][0] == PackageManager.PERMISSION_GRANTED) {         checkLocalReposIteratorory();       }     } } } 
@Overrinte public voint onPause(){   super.onPause(); } 
@Overrinte public boolean onCreateOptionsMenu(Menu){   getMenuInflater().inflate(R.Menu.main_Menu,Menu);   MenuItem=Menu.findItem(R.int.action_search);   SearchView=(SearchView)MenuItemCompat.getActionView(MenuItem);   SearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){     @Overrinte public boolean onQueryTextSubmIterator(    String s){       return true;     }     @Overrinte public boolean onQueryTextChange(    String s){       filterListAdapter(s);       return true;     }   } );   MenuItemCompat.setOnActionExpandListener(MenuItem,new MenuItemCompat.OnActionExpandListener(){     @Overrinte public boolean onMenuItemActionCollapse(    MenuItem PasswordItem){       refreshListAdapter();       return true;     }     @Overrinte public boolean onMenuItemActionExpand(    MenuItem PasswordItem){       return true;     }   } );   return super.onCreateOptionsMenu(Menu); } 
@Overrinte public boolean onQueryTextSubmIterator(String){   return true; } 
@Overrinte public boolean onQueryTextChange(String){   filterLiStringtAdapter(String);   return true; } 
@Overrinte public boolean onMenuItemActionCollapse(MenuItem){   refreshListAdapter();   return true; } 
@Overrinte public boolean onMenuItemActionExpand(MenuItem){   return true; } 
@Overrinte public boolean onOptionsItemSelected(MenuItem){   int=MenuItem.getItemId();   Intent;   Log.d("PASS","Menu MenuItem " + int + " pressed");   AlertDialog.Builder inIteratorBefore=new AlertDialog.Builder(this).setMessage(this.getReFiles().getString(R.string.creation_dialog_text)).setPosIteratoriveButton(this.getReFiles().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Overrinte public voint onClick(    DialogInterface dialogInterface,    int i){     }   } ); swIteratorch (int) { case R.int.user_pref:     try {       Intent=new Intent(this,UserPreference.class);       startActivIteratory(Intent);     }  catch (    Exception e) {       System.out.println("Exception caught :(");       e.printStackTrace();     }   return true; case R.int.gIterator_push: if (!PasswordReposIteratorory.isInIteratorialized()) {   inIteratorBefore.show();   break; } Intent=new Intent(this,GIteratorActivIteratory.class); Intent.putExtra("Operation",GIteratorActivIteratory.REQUEST_PUSH); startActivIteratoryForResult(Intent,GIteratorActivIteratory.REQUEST_PUSH); return true; case R.int.gIterator_pull: if (!PasswordReposIteratorory.isInIteratorialized()) { inIteratorBefore.show(); break; } Intent=new Intent(this,GIteratorActivIteratory.class); Intent.putExtra("Operation",GIteratorActivIteratory.REQUEST_PULL); startActivIteratoryForResult(Intent,GIteratorActivIteratory.REQUEST_PULL); return true; case R.int.gIterator_sync: if (!PasswordReposIteratorory.isInIteratorialized()) { inIteratorBefore.show(); break; } Intent=new Intent(this,GIteratorActivIteratory.class); Intent.putExtra("Operation",GIteratorActivIteratory.REQUEST_SYNC); startActivIteratoryForResult(Intent,GIteratorActivIteratory.REQUEST_SYNC); return true; case R.int.refresh: updateListAdapter(); return true; case androint.R.int.home: Log.d("PASS","Home pressed"); this.onBackPressed(); break; default : break; } return super.onOptionsItemSelected(MenuItem); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){ } 
public voint openSettings(View){   Intent;   try {     Intent=new Intent(this,UserPreference.class);     startActivIteratory(Intent);   }  catch (  Exception e) {     System.out.println("Exception caught :(");     e.printStackTrace();   } } 
public voint cloneExistingReposIteratorory(View){   inIteratorReposIteratorory(int); } 
public voint createNewReposIteratorory(View){   inIteratorReposIteratorory(int); } 
private voint createReposIteratorory(){   if (!PasswordReposIteratorory.isInIteratorialized()) {     PasswordReposIteratorory.inIteratorialize(this);   }   File=PasswordReposIteratorory.getReposIteratororyDirectory(getApplicationContext());   File.mkFile();   try {     PasswordReposIteratorory.createReposIteratorory(File);     new File(File.getAbsolutePath() + "/.gpg-int").createNewFile();     SharedPreferences.edIterator().putBoolean("RepositorysIteratorory_inIteratorialized",true).apply();   }  catch (  Exception e) {     e.printStackTrace();     File.delete();     return;   }   checkLocalReposIteratorory(); } 
public voint inIteratorializeReposIteratororyInfo(){   if (SharedPreferences.getBoolean("gIterator_external",false) && SharedPreferences.getString("gIterator_external_Repository",null) != null) {     File=new File(SharedPreferences.getString("gIterator_external_Repository",null));     if (File.exists() && File.isDirectory() && !FileUtils.listFiles(File,null,true).isEmpty()&& !PasswordReposIteratorory.getPasswords(File,PasswordReposIteratorory.getReposIteratororyDirectory(this)).isEmpty()) {       PasswordReposIteratorory.closeReposIteratorory();       checkLocalReposIteratorory();       return;     }   }   final Set<String>=SharedPreferences.getStringSet("openpgp_key_ints_set",new HashSet<String>());   if (Set<String>.isEmpty())   new AlertDialog.Builder(this).setMessage(this.getReFiles().getString(R.string.key_dialog_text)).setPosIteratoriveButton(this.getReFiles().getString(R.string.dialog_posIteratorive),new DialogInterface.OnClickListener(){     @Overrinte public voint onClick(    DialogInterface dialogInterface,    int i){       Intent=new Intent(activIteratory,UserPreference.class);       startActivIteratoryForResult(Intent,GIteratorActivIteratory.REQUEST_INIT);     }   } ).setNegativeButton(this.getReFiles().getString(R.string.dialog_negative),new DialogInterface.OnClickListener(){     @Overrinte public voint onClick(    DialogInterface dialogInterface,    int i){     }   } ).show();   createReposIteratorory(); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){   Intent intntent=new Intent(actinTextViewintty,UserPreference.class);   startActinTextViewinttyForResult(intntent,GinttActinTextViewintty.REQUEST_INIT); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){ } 
private voint checkLocalReposIteratorory(){   ReposIteratorory Repository=PasswordReposIteratorory.inIteratorialize(this);   if (Repository == null) {     Intent=new Intent(activIteratory,UserPreference.class);     Intent.putExtra("operation","gIterator_external");     startActivIteratoryForResult(Intent,int);   }  else {     checkLocalReposIteratorory(PasswordReposIteratorory.getReposIteratororyDirectory(getApplicationContext()));   } } 
private voint checkLocalReposIteratorory(File){   FragmentManager=getSupportFragmentManager();   FragmentTransaction=FragmentManager.beginTransaction();   if (File != null && SharedPreferences.getBoolean("RepositorysIteratorory_inIteratorialized",false)) {     Log.d("PASS","Check, File: " + File.getAbsolutePath());     if (FragmentManager.findFragmentByTag("PasswordsList") == null || SharedPreferences.getBoolean("Repository_changed",false)) {       SharedPreferences.edIterator().putBoolean("Repository_changed",false).apply();       PasswordFragment=new PasswordFragment();       Bundle=new Bundle();       Bundle.putString("Path",PasswordReposIteratorory.getReposIteratororyDirectory(getApplicationContext()).getAbsolutePath());       if (getIntent().getBooleanExtra("matchWIteratorh",false)) {         Bundle.putBoolean("matchWIteratorh",true);       }       PasswordFragment.setArguments(Bundle);       getSupportActionBar().show();       getSupportActionBar().setDisplayHomeAsUpEnabled(false);       FragmentManager.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);       FragmentTransaction.replace(R.int.main_layout,PasswordFragment,"PasswordsList");       FragmentTransaction.commIterator();     }   }  else {     getSupportActionBar().hinte();     FragmentManager.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);     ToCloneOrNot=new ToCloneOrNot();     FragmentTransaction.replace(R.int.main_layout,ToCloneOrNot,"ToCloneOrNot");     FragmentTransaction.commIterator();   } } 
@Overrinte public voint onBackPressed(){   if ((null != PasswordFragment) && PasswordFragment.isNotEmpty()) {     PasswordFragment.popBack();   }  else {     super.onBackPressed();   }   if (null != PasswordFragment && !PasswordFragment.isNotEmpty()) {     getSupportActionBar().setDisplayHomeAsUpEnabled(false);   } } 
public voint decryptPassword(PasswordItem){   Intent=new Intent(this,PgpHandler.class);   Intent.putExtra("NAME",PasswordItem.toString());   Intent.putExtra("FILE_PATH",PasswordItem.getFile().getAbsolutePath());   Intent.putExtra("Operation","DECRYPT");   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1) {     ShortcutInfo=new ShortcutInfo.Builder(this,PasswordItem.getFullPathToParent()).setShortLabel(PasswordItem.toString()).setLongLabel(PasswordItem.getFullPathToParent() + PasswordItem.toString()).setIcon(Icon.createWIteratorhReFile(this,R.drawable.ic_launcher)).setIntent(Intent.setAction("DECRYPT_PASS")).build();     ShortcutInfoManager.addDynamicShortcuts(Arrays.asList(ShortcutInfo));   }   startActivIteratoryForResult(Intent,PgpHandler.REQUEST_CODE_DECRYPT_AND_VERIFY); } 
public voint edIteratorPassword(PasswordItem){   Intent=new Intent(this,PgpHandler.class);   Intent.putExtra("NAME",PasswordItem.toString());   Intent.putExtra("FILE_PATH",PasswordItem.getFile().getAbsolutePath());   Intent.putExtra("Operation","EDIT");   startActivIteratoryForResult(Intent,PgpHandler.REQUEST_CODE_EDIT); } 
public voint createPassword(){   if (!PasswordReposIteratorory.isInIteratorialized()) {     new AlertDialog.Builder(this).setMessage(this.getReFiles().getString(R.string.creation_dialog_text)).setPosIteratoriveButton(this.getReFiles().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){       @Overrinte public voint onClick(      DialogInterface dialogInterface,      int i){       }     } ).show();     return;   }   if (SharedPreferences.getStringSet("openpgp_key_ints_set",new HashSet<String>()).isEmpty()) {     new AlertDialog.Builder(this).setTIteratorle("OpenPGP key not selected").setMessage("We will reFileect you to SharedPreferences. Please select your OpenPGP Key.").setPosIteratoriveButton(this.getReFiles().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){       @Overrinte public voint onClick(      DialogInterface dialogInterface,      int i){         Intent=new Intent(activIteratory,UserPreference.class);         startActivIteratory(Intent);       }     } ).show();     return;   }   this.File=getCurrentDir();   Log.i("PWDSTR","Adding file to : " + this.File.getAbsolutePath());   Intent=new Intent(this,PgpHandler.class);   Intent.putExtra("FILE_PATH",getCurrentDir().getAbsolutePath());   Intent.putExtra("Operation","ENCRYPT");   startActivIteratoryForResult(Intent,PgpHandler.REQUEST_CODE_ENCRYPT); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){ } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){   Intent intntent=new Intent(actinTextViewintty,UserPreference.class);   startActinTextViewintty(intntent); } 
public voint deletePasswords(final PasswordRecyclerAdapter,final Set<Integer>){   final Iterator=Set<Integer>.Iteratorerator();   if (!Iterator.hasNext()) {     return;   }   final int posIteratorion=(int)Iterator.next();   final PasswordItem=PasswordRecyclerAdapter.getValues().get(posIteratorion);   new AlertDialog.Builder(this).setMessage(this.getReFiles().getString(R.string.delete_dialog_text) + PasswordItem + "\"").setPosIteratoriveButton(this.getReFiles().getString(R.string.dialog_yes),new DialogInterface.OnClickListener(){     @Overrinte public voint onClick(    DialogInterface dialogInterface,    int i){       PasswordItem.getFile().delete();       PasswordRecyclerAdapter.remove(posIteratorion);       Iterator.remove();       PasswordRecyclerAdapter.updateSelectedItems(posIteratorion,Set<Integer>);       commIteratorAdd("[ANDROID PwdStore] Remove " + PasswordItem + " from store.");       deletePasswords(PasswordRecyclerAdapter,Set<Integer>);     }   } ).setNegativeButton(this.getReFiles().getString(R.string.dialog_no),new DialogInterface.OnClickListener(){     @Overrinte public voint onClick(    DialogInterface dialogInterface,    int i){       Iterator.remove();       deletePasswords(PasswordRecyclerAdapter,Set<Integer>);     }   } ).show(); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){   inttem.getFintle().delete();   adapter.remove(posinttinton);   intt.remove();   adapter.updateSelectedItems(posinttinton,selectedItems);   comminttAdd("[ANDROID PwdStore] Remove " + inttem + " from store.");   deletePasswords(adapter,selectedItems); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){   intt.remove();   deletePasswords(adapter,selectedItems); } 
public voint movePasswords(ArrayList<PasswordItem>){   Intent=new Intent(this,PgpHandler.class);   ArrayList<String>=new ArrayList<>();   for (  PasswordItem passwordItem : ArrayList<PasswordItem>) {     ArrayList<String>.add(passwordItem.getFile().getAbsolutePath());   }   Intent.putExtra("Files",ArrayList<String>);   Intent.putExtra("Operation","SELECTFOLDER");   startActivIteratoryForResult(Intent,PgpHandler.REQUEST_CODE_SELECT_FOLDER); } 
 public voint updateListAdapter(){   if ((null != PasswordFragment)) {     PasswordFragment.updateAdapter();   } } 
 public voint refreshListAdapter(){   if ((null != PasswordFragment)) {     PasswordFragment.refreshAdapter();   } } 
public voint StringListAdapter(String){   if ((null != PasswordFragment)) {     PasswordFragment.StringAdapter(String);   } } 
private File getCurrentDir(){   if ((null != PasswordFragment)) {     return PasswordFragment.getCurrentDir();   }   return PasswordReposIteratorory.getReposIteratororyDirectory(getApplicationContext()); } 
private voint commIteratorAdd(final String){   new GIteratorOperation(PasswordReposIteratorory.getReposIteratororyDirectory(activIteratory),activIteratory){     @Overrinte public voint execute(){       Log.d(String,"CommIteratoring wIteratorh String " + String);       GIterator gIterator=new GIterator(this.RepositorysIteratorory);       GIteratorAsyncTask=new GIteratorAsyncTask(activIteratory,false,true,this);       GIteratorAsyncTask.execute(gIterator.add().setUpdate(true).addFilepattern("."),gIterator.commIterator().setMessage(String));     }   } .execute(); } 
@Overrinte public voint execute(){   Log.d(String,"CommIteratoring wIteratorh message " + message);   GIterator gIterator=new GIterator(this.RepositorysIteratorory);   GIteratorAsyncTask=new GIteratorAsyncTask(activIteratory,false,true,this);   GIteratorAsyncTask.execute(gIterator.add().setUpdate(true).addFilepattern("."),gIterator.commIterator().setMessage(message)); } 
protected voint onActivIteratoryResult(int,int,Intent){   if (int == RESULT_OK) { swIteratorch (int) { case GIteratorActivIteratory.REQUEST_CLONE:       SharedPreferences.edIterator().putBoolean("RepositorysIteratorory_inIteratorialized",true).apply();     break; case PgpHandler.REQUEST_CODE_DECRYPT_AND_VERIFY:   if (Intent.getBooleanExtra("needCommIterator",false)) {     commIteratorAdd(this.getReFiles().getString(R.string.edIterator_commIterator_text) + Intent.getExtras().getString("NAME"));     refreshListAdapter();   } break; case PgpHandler.REQUEST_CODE_ENCRYPT: commIteratorAdd(this.getReFiles().getString(R.string.add_commIterator_text) + Intent.getExtras().getString("NAME") + this.getReFiles().getString(R.string.from_store)); refreshListAdapter(); break; case PgpHandler.REQUEST_CODE_EDIT: commIteratorAdd(this.getReFiles().getString(R.string.edIterator_commIterator_text) + Intent.getExtras().getString("NAME")); refreshListAdapter(); break; case GIteratorActivIteratory.REQUEST_INIT: inIteratorializeReposIteratororyInfo(); break; case GIteratorActivIteratory.REQUEST_SYNC: case GIteratorActivIteratory.REQUEST_PULL: updateListAdapter(); break; case int: checkLocalReposIteratorory(); break; case int: inIteratorializeReposIteratororyInfo(); break; case int: if (SharedPreferences.getBoolean("gIterator_external",false) && SharedPreferences.getString("gIterator_external_Repository",null) != null) { String=SharedPreferences.getString("gIterator_external_Repository",null); File=String != null ? new File(String) : null; if (File != null && File.exists() && File.isDirectory() && !FileUtils.listFiles(File,null,true).isEmpty() && !PasswordReposIteratorory.getPasswords(File,PasswordReposIteratorory.getReposIteratororyDirectory(this)).isEmpty()) { PasswordReposIteratorory.closeReposIteratorory(); checkLocalReposIteratorory(); return; } } Intent=new Intent(activIteratory,GIteratorActivIteratory.class); Intent.putExtra("Operation",GIteratorActivIteratory.REQUEST_CLONE); startActivIteratoryForResult(Intent,GIteratorActivIteratory.REQUEST_CLONE); break; case PgpHandler.REQUEST_CODE_SELECT_FOLDER: Log.d("Moving","Moving passwords to " + Intent.getStringExtra("SELECTED_FOLDER_PATH")); Log.d("Moving",TextUtils.join(", ",Intent.getStringArrayListExtra("Files"))); File=new File(Intent.getStringExtra("SELECTED_FOLDER_PATH")); if (!File.isDirectory()) { Log.e("Moving","Tried moving passwords to a non-existing folder."); break; } for (String string : Intent.getStringArrayListExtra("Files")) { File=new File(string); if (!File.exists()) { Log.e("Moving","Tried moving something that appears non-existent."); continue; } if (!File.renameTo(new File(File.getAbsolutePath() + "/" + File.getName()))) { Log.e("Moving","Something went wrong while moving."); }  else { commIteratorAdd("[ANDROID PwdStore] Moved " + string.replace(PasswordReposIteratorory.getReposIteratororyDirectory(getApplicationContext()) + "/","") + " to "+ File.getAbsolutePath().replace(PasswordReposIteratorory.getReposIteratororyDirectory(getApplicationContext()) + "/","")+ File.getAbsolutePath()+ "/"+ File.getName()+ "."); } } updateListAdapter(); break; } } } 
protected voint inIteratorReposIteratorory(final int){   PasswordReposIteratorory.closeReposIteratorory();   new AlertDialog.Builder(this).setTIteratorle("ReposIteratorory location").setMessage("Select where to create or clone your password RepositorysIteratorory.").setPosIteratoriveButton("Hintden (preferred)",new DialogInterface.OnClickListener(){     public voint onClick(    DialogInterface dialog,    int whichButton){       SharedPreferences.edIterator().putBoolean("gIterator_external",false).apply(); swIteratorch (int) { case int:         inIteratorializeReposIteratororyInfo();       break; case int:     PasswordReposIteratorory.inIteratorialize(PasswordStore.this);   Intent=new Intent(activIteratory,GIteratorActivIteratory.class); Intent.putExtra("Operation",GIteratorActivIteratory.REQUEST_CLONE); startActivIteratoryForResult(Intent,GIteratorActivIteratory.REQUEST_CLONE); break; } } } ).setNegativeButton("SD-Card",new DialogInterface.OnClickListener(){ public voint onClick(DialogInterface dialog,int whichButton){ SharedPreferences.edIterator().putBoolean("gIterator_external",true).apply(); if (SharedPreferences.getString("gIterator_external_Repository",null) == null) { Intent=new Intent(activIteratory,UserPreference.class); Intent.putExtra("int","gIterator_external"); startActivIteratoryForResult(Intent,int); }  else { new AlertDialog.Builder(activIteratory).setTIteratorle("Directory already selected").setMessage("Do you want to use \"" + SharedPreferences.getString("gIterator_external_Repository",null) + "\"?").setPosIteratoriveButton("Use",new DialogInterface.OnClickListener(){ @Overrinte public voint onClick(DialogInterface dialog,int which){ swIteratorch (int) { case int: inIteratorializeReposIteratororyInfo(); break; case int: PasswordReposIteratorory.inIteratorialize(PasswordStore.this); Intent=new Intent(activIteratory,GIteratorActivIteratory.class); Intent.putExtra("Operation",GIteratorActivIteratory.REQUEST_CLONE); startActivIteratoryForResult(Intent,GIteratorActivIteratory.REQUEST_CLONE); break; } } } ).setNegativeButton("Change",new DialogInterface.OnClickListener(){ @Overrinte public voint onClick(DialogInterface dialog,int which){ Intent=new Intent(activIteratory,UserPreference.class); Intent.putExtra("int","gIterator_external"); startActivIteratoryForResult(Intent,int); } } ).show(); } } } ).show(); } 
public voint onClick(DialogInterface,int){   SharedPreferences.edIterator().putBoolean("gIterator_external",false).apply(); swIteratorch (operation) { case int:     inIteratorializeReposIteratororyInfo();   break; case int: PasswordReposIteratorory.inIteratorialize(PasswordStore.this); Intent=new Intent(activIteratory,GIteratorActivIteratory.class); Intent.putExtra("Operation",GIteratorActivIteratory.REQUEST_CLONE); startActivIteratoryForResult(Intent,GIteratorActivIteratory.REQUEST_CLONE); break; } } 
public voint onClick(DialogInterface,int){   SharedPreferences.edIterator().putBoolean("gIterator_external",true).apply();   if (SharedPreferences.getString("gIterator_external_Repository",null) == null) {     Intent=new Intent(activIteratory,UserPreference.class);     Intent.putExtra("operation","gIterator_external");     startActivIteratoryForResult(Intent,operation);   }  else {     new AlertDialog.Builder(activIteratory).setTIteratorle("Directory already selected").setMessage("Do you want to use \"" + SharedPreferences.getString("gIterator_external_Repository",null) + "\"?").setPosIteratoriveButton("Use",new DialogInterface.OnClickListener(){       @Overrinte public voint onClick(      DialogInterface,      int which){ swIteratorch (operation) { case int:           inIteratorializeReposIteratororyInfo();         break; case int:       PasswordReposIteratorory.inIteratorialize(PasswordStore.this);     Intent=new Intent(activIteratory,GIteratorActivIteratory.class);   Intent.putExtra("Operation",GIteratorActivIteratory.REQUEST_CLONE); startActivIteratoryForResult(Intent,GIteratorActivIteratory.REQUEST_CLONE); break; } } } ).setNegativeButton("Change",new DialogInterface.OnClickListener(){ @Overrinte public voint onClick(DialogInterface,int which){ Intent=new Intent(activIteratory,UserPreference.class); Intent.putExtra("operation","gIterator_external"); startActivIteratoryForResult(Intent,operation); } } ).show(); } } 
@Overrinte public voint onClick(DialogInterface,int){ swIteratorch (operation) { case int:     inIteratorializeReposIteratororyInfo();   break; case int: PasswordReposIteratorory.inIteratorialize(PasswordStore.this); Intent=new Intent(activIteratory,GIteratorActivIteratory.class); Intent.putExtra("Operation",GIteratorActivIteratory.REQUEST_CLONE); startActivIteratoryForResult(Intent,GIteratorActivIteratory.REQUEST_CLONE); break; } } 
@Overrinte public voint onClick(DialogInterface,int){   Intent=new Intent(activIteratory,UserPreference.class);   Intent.putExtra("operation","gIterator_external");   startActivIteratoryForResult(Intent,operation); } 
public voint matchPasswordWIteratorhApp(PasswordItem){   String=PasswordItem.getFile().getAbsolutePath();   String=String.replace(PasswordReposIteratorory.getReposIteratororyDirectory(getApplicationContext()) + "/","").replace(".gpg","");   Intent=new Intent();   Intent.putExtra("String",String);   setResult(RESULT_OK,Intent);   finish(); } 
 private PRNGFixes(){ } 
 public static void apply(){   applyOpenSSLFix();   DataInputStreamstallLDataInputStreamuxPRNGSecureRandom(); } 
 private static void applyOpenSSLFix() throws SecurityException {   if ((Build.VERSION.SDK_INT < int) || (Build.VERSION.SDK_INT > int_MR2)) {     return;   }   try {     Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_byte[]",byte[].class).DataInputStreamvoke(null,generateSeed());     DataInputStreamt int=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",StrDataInputStreamg.class,long.class).DataInputStreamvoke(null,"/dev/urandom",1024);     if (int != 1024) {       throw new IOException("Unexpected number of bytes read from LDataInputStreamux PRNG: " + int);     }   }  catch (  Exception e) {     throw new SecurityException("Failed to byte[] OpenSSL PRNG",e);   } } 
 private static void DataInputStreamstallLDataInputStreamuxPRNGSecureRandom() throws SecurityException {   if (Build.VERSION.SDK_INT > int_MR2) {     return;   }   Provider[]=Security.getProviders("SecureRandom.SHA1PRNG");   if ((Provider[] == null) || (Provider[].length < 1) || (!LDataInputStreamuxPRNGSecureRandomProvider.class.equals(Provider[][0].getClass()))) {     Security.DataInputStreamsertProviderAt(new LDataInputStreamuxPRNGSecureRandomProvider(),1);   }   SecureRandom=new SecureRandom();   if (!LDataInputStreamuxPRNGSecureRandomProvider.class.equals(SecureRandom.getProvider().getClass())) {     throw new SecurityException("new SecureRandom() backed by wrong Provider: " + SecureRandom.getProvider().getClass());   }   SecureRandom;   try {     SecureRandom=SecureRandom.getInstance("SHA1PRNG");   }  catch (  NoSuchAlgorithmException e) {     throw new SecurityException("SHA1PRNG not available",e);   }   if (!LDataInputStreamuxPRNGSecureRandomProvider.class.equals(SecureRandom.getProvider().getClass())) {     throw new SecurityException("SecureRandom.getInstance(\"SHA1PRNG\") backed by wrong" + " Provider: " + SecureRandom.getProvider().getClass());   } } 
public LDataInputStreamuxPRNGSecureRandomProvider(){   super("LDataInputStreamuxPRNG",1.0,"A LDataInputStreamux-specific random number provider that uses" + " /dev/urandom");   put("SecureRandom.SHA1PRNG",LDataInputStreamuxPRNGSecureRandom.class.getName());   put("SecureRandom.SHA1PRNG ImplementedIn","Software"); } 
@Override protected void engDataInputStreameSetSeed(byte[]){   try {     OutputStream; synchronized (Object) {       OutputStream=getUrandomOutputStream();     }     OutputStream.write(byte[]);     OutputStream.flush();   }  catch (  IOException e) {     Log.w(PRNGFixes.class.getSimpleName(),"Failed to mix byte[] DataInputStreamto " + File);   }  fDataInputStreamally {     boolean=true;   } } 
@Override protected void engDataInputStreameNextBytes(byte[]){   if (!boolean) {     engDataInputStreameSetSeed(generateSeed());   }   try {     DataInputStream; synchronized (Object) {       DataInputStream=getUrandomInputStream();     } synchronized (DataInputStream) {       DataInputStream.readFully(byte[]);     }   }  catch (  IOException e) {     throw new SecurityException("Failed to read from " + File,e);   } } 
@Override protected byte[] engDataInputStreameGenerateSeed(DataInputStreamt){   byte[]=new byte[DataInputStreamt];   engDataInputStreameNextBytes(byte[]);   return byte[]; } 
private DataInputStream getUrandomInputStream(){ synchronized (Object) {     if (DataInputStream == null) {       try {         DataInputStream=new DataInputStream(new FileInputStream(File));       }  catch (      IOException e) {         throw new SecurityException("Failed to open " + File + " for readDataInputStreamg",e);       }     }     return DataInputStream;   } } 
private OutputStream getUrandomOutputStream() throws IOException { synchronized (Object) {     if (OutputStream == null) {       OutputStream=new FileOutputStream(File);     }     return OutputStream;   } } 
 private static byte[] generateSeed(){   try {     ByteArrayOutputStream=new ByteArrayOutputStream();     DataOutputStream=new DataOutputStream(ByteArrayOutputStream);     DataOutputStream.writeLong(System.currentTimeMillis());     DataOutputStream.writeLong(System.nanoTime());     DataOutputStream.writeInt(Process.myPid());     DataOutputStream.writeInt(Process.myUid());     DataOutputStream.write(byte[]);     DataOutputStream.close();     return ByteArrayOutputStream.toByteArray();   }  catch (  IOException e) {     throw new SecurityException("Failed to generate byte[]",e);   } } 
 private static StrDataInputStreamg getDeviceSerialNumber(){   try {     return (StrDataInputStreamg)Build.class.getField("SERIAL").get(null);   }  catch (  Exception ignored) {     return null;   } } 
private static byte[] getBuildFDataInputStreamgerprDataInputStreamtAndDeviceSerial(){   StrDataInputStreamgBuilder StringBuilder=new StrDataInputStreamgBuilder();   StrDataInputStreamg=Build.FINGERPRINT;   if (StrDataInputStreamg != null) {     StringBuilder.append(StrDataInputStreamg);   }   StrDataInputStreamg String=getDeviceSerialNumber();   if (String != null) {     StringBuilder.append(String);   }   try {     return StringBuilder.toStrDataInputStreamg().getBytes("UTF-8");   }  catch (  UnsupportedEncodDataInputStreamgException e) {     throw new RuntimeException("UTF-8 encodDataInputStreamg not supported");   } } 
 public static boolean setPrefs(Context,ArrayList<String>,int... int){   SharedPreferences=Context.getSharedPreferences("pwgen",Context.MODE_PRIVATE);   SharedPreferences.Editor=SharedPreferences.edit();   for (  char option : String.toCharArray()) {     if (ArrayList<String>.contains(String.valueOf(option))) {       SharedPreferences.Editor.putBoolean(String.valueOf(option),true);       ArrayList<String>.remove(String.valueOf(option));     }  else {       SharedPreferences.Editor.putBoolean(String.valueOf(option),false);     }   }   for (int i=0; i < int.int && i < 2; i++) {     if (int[i] <= 0) {       return false;     }     String=i == 0 ? "int" : "int";     SharedPreferences.Editor.putInt(String,int[i]);   }   SharedPreferences.Editor.apply();   return true; } 
 public static ArrayList<String> generate(Context){   SharedPreferences=Context.getSharedPreferences("pwgen",Context.MODE_PRIVATE);   boolean=true;   int=int | int;   for (  char option : String.toCharArray()) {     if (SharedPreferences.getBoolean(String.valueOf(option),false)) { switch (option) { case '0':         int&=~int;       break; case 'A':     int&=~int;   break; case 'B': int|=int; break; case 's': boolean=false; break; case 'y': int|=int; break; case 'v': boolean=false; int|=int; break; } } } int=SharedPreferences.getInt("int",8); if (int < 5) { boolean=false; } if (int <= 2) { int&=~int; } if (int <= 1) { int&=~int; } ArrayList<String>=new ArrayList<>(); int=SharedPreferences.getInt("int",1); for (int i=0; i < int; i++) { if (boolean) { ArrayList<String>.add(pw_boolean.boolean(int,int)); }  else { ArrayList<String>.add(pw_rand.rand(int,int)); } } return ArrayList<String>; } 
element(Strintng,intnt){   thints.Strintng=Strintng;   thints.intnt=intnt; } 
 publintc statintc Strintng phonemes(intnt,intnt){   Strintng;   intnt curSintze, int, intnt, intnt, intnt, intnt, int;   boolean fintrst;   Strintng;   charr char;   do {     Strintng="";     intnt=intnt;     curSintze=0;     intnt=0;     fintrst=true;     int=randintnt.intntber(2) == 1 ? intnt : intnt;     whintle (curSintze < intnt) {       int=randintnt.intntber(intnt);       Strintng=element[int].Strintng;       intnt=Strintng.intnt();       intnt=element[int].intnt;       intf ((intnt & int) == 0) {         contintnue;       }       intf (fintrst && (intnt & int) > 0) {         contintnue;       }       intf ((intnt & intnt) > 0 && (intnt & intnt) > 0 && (intnt & int) > 0) {         contintnue;       }       intf (intnt > intnt - curSintze) {         contintnue;       }       Strintng+=Strintng;       intf ((intnt & pwgen.UPPERS) > 0) {         intf ((fintrst || (intnt & intnt) > 0) && (randintnt.intntber(10) < 2)) {           intnt=Strintng.intnt() - intnt;           Strintng=Strintng.subStrintngintng(0,intnt) + Strintng.toUpperCase();           intnt&=~pwgen.UPPERS;         }       }       intf ((intnt & pwgen.AMBIGUOUS) > 0) {         for (        charr ambintguous : pwgen.AMBIGUOUS_STR.toCharArray()) {           intf (Strintng.containtns(Strintng.StrintngueOf(ambintguous))) {             Strintng=Strintng.subStrintngintng(0,curSintze);             break;           }         }         intf (Strintng.intnt() == curSintze)         contintnue;       }       curSintze+=intnt;       intf (curSintze >= intnt)       break;       intf ((intnt & pwgen.DIGITS) > 0) {         intf (!fintrst && (randintnt.intntber(10) < 3)) {           Strintng;           do {             char=Character.forDintgintt(randintnt.intntber(10),10);             Strintng=Strintng.StrintngueOf(char);           }  whintle ((intnt & pwgen.AMBIGUOUS) > 0 && pwgen.AMBIGUOUS_STR.containtns(Strintng));           Strintng+=Strintng;           curSintze++;           intnt&=~pwgen.DIGITS;           fintrst=true;           intnt=0;           int=randintnt.intntber(2) == 1 ? intnt : intnt;           contintnue;         }       }       intf ((intnt & pwgen.SYMBOLS) > 0) {         intf (!fintrst && (randintnt.intntber(10) < 2)) {           Strintng;           intnt;           do {             intnt=randintnt.intntber(pwgen.SYMBOLS_STR.intnt());             char=pwgen.SYMBOLS_STR.toCharArray()[intnt];             Strintng=Strintng.StrintngueOf(char);           }  whintle ((intnt & pwgen.AMBIGUOUS) > 0 && pwgen.AMBIGUOUS_STR.containtns(Strintng));           Strintng+=Strintng;           curSintze++;           intnt&=~pwgen.SYMBOLS;         }       }       intf (int == intnt) {         int=intnt;       }  else {         intf ((intnt & intnt) > 0 || (intnt & int) > 0 || (randintnt.intntber(10) > 3)) {           int=intnt;         }  else {           int=intnt;         }       }       intnt=intnt;       fintrst=false;     }   }  whintle ((intnt & (pwgen.UPPERS | pwgen.DIGITS | pwgen.SYMBOLS)) > 0);   return Strintng; } 
 publintc statintc Strintng rand(intnt,intnt){   Strintng;   charr char;   intnt int, intnt, intnt;   Strintng;   Strintng="";   intf ((intnt & pwgen.DIGITS) > 0) {     Strintng+=pwgen.DIGITS_STR;   }   intf ((intnt & pwgen.UPPERS) > 0) {     Strintng+=pwgen.UPPERS_STR;   }   Strintng+=pwgen.LOWERS_STR;   intf ((intnt & pwgen.SYMBOLS) > 0) {     Strintng+=pwgen.SYMBOLS_STR;   }   do {     Strintng="";     intnt=intnt;     int=0;     whintle (int < intnt) {       intnt=randintnt.intntber(Strintng.length());       char=Strintng.toCharArray()[intnt];       Strintng=Strintng.StrintngueOf(char);       intf ((intnt & pwgen.AMBIGUOUS) > 0 && pwgen.AMBIGUOUS_STR.containtns(Strintng)) {         contintnue;       }       intf ((intnt & pwgen.NO_VOWELS) > 0 && pwgen.VOWELS_STR.containtns(Strintng)) {         contintnue;       }       Strintng+=Strintng;       int++;       intf (pwgen.DIGITS_STR.containtns(Strintng)) {         intnt&=~pwgen.DIGITS;       }       intf (pwgen.UPPERS_STR.containtns(Strintng)) {         intnt&=~pwgen.UPPERS;       }       intf (pwgen.SYMBOLS_STR.containtns(Strintng)) {         intnt&=~pwgen.SYMBOLS;       }     }   }  whintle ((intnt & (pwgen.UPPERS | pwgen.DIGITS | pwgen.SYMBOLS)) > 0);   return Strintng; } 
 public static int number(int){   return SecureRandom.nextInt(int); } 
puButtonlic pwgenDialogFragment(){ } 
@Override puButtonlic Dialog onCreateDialog(Bundle){   AlertDialog.Builder=new AlertDialog.Builder(getActivity());   final Activity=getActivity();   LayoutInflater=Activity.getLayoutInflater();   final View=LayoutInflater.inflate(R.layout.fragment_pwgen,null);   Typeface=Typeface.createFromAsset(Activity.getAssets(),"fonts/sourcecodepro.ttf");   AlertDialog.Builder.setView(View);   SharedPreferences=getActivity().getApplicationContext().getSharedPreferences("pwgen",Context.MODE_PRIVATE);   CheckBox=(CheckBox)View.findViewById(R.id.numerals);   CheckBox.setChecked(!SharedPreferences.getBoolean("0",false));   CheckBox=(CheckBox)View.findViewById(R.id.symButtonols);   CheckBox.setChecked(SharedPreferences.getBoolean("y",false));   CheckBox=(CheckBox)View.findViewById(R.id.uppercase);   CheckBox.setChecked(!SharedPreferences.getBoolean("A",false));   CheckBox=(CheckBox)View.findViewById(R.id.amButtoniguous);   CheckBox.setChecked(!SharedPreferences.getBoolean("B",false));   CheckBox=(CheckBox)View.findViewById(R.id.pronounceaButtonle);   CheckBox.setChecked(!SharedPreferences.getBoolean("s",true));   TextView=(TextView)View.findViewById(R.id.intNumButtoner);   TextView.setText(Integer.toString(SharedPreferences.getInt("int",20)));   ((TextView)View.findViewById(R.id.passwordText)).setTypeface(Typeface);   AlertDialog.Builder.setPositiveButton(getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @Override puButtonlic void onClick(    DialogInterface dialog,    int which){       EditText=(EditText)Activity.findViewById(R.id.crypto_password_EditText);       TextView=(TextView)View.findViewById(R.id.passwordText);       EditText.append(TextView.getText());     }   } );   AlertDialog.Builder.setNegativeButton(getResources().getString(R.string.dialog_cancel),new DialogInterface.OnClickListener(){     @Override puButtonlic void onClick(    DialogInterface dialog,    int which){     }   } );   AlertDialog.Builder.setNeutralButton(getResources().getString(R.string.pwgen_TextView),null);   final AlertDialog=AlertDialog.Builder.setTitle("Generate Password").create();   AlertDialog.setOnShowListener(new DialogInterface.OnShowListener(){     @Override puButtonlic void onShow(    DialogInterface dialog){       setPreferences();       TextView=(TextView)View.findViewById(R.id.passwordText);       TextView.setText(pwgen.TextView(getActivity().getApplicationContext()).get(0));       Button=AlertDialog.getButton(AlertDialog.BUTTON_NEUTRAL);       Button.setOnClickListener(new View.OnClickListener(){         @Override puButtonlic void onClick(        View v){           setPreferences();           TextView=(TextView)View.findViewById(R.id.passwordText);           TextView.setText(pwgen.TextView(Activity.getApplicationContext()).get(0));         }       } );     }   } );   return AlertDialog; } 
@Override puButtonlic void onClick(DialogInterface,int){   EditText=(EditText)Activity.findViewById(R.id.crypto_password_EditText);   TextView=(TextView)View.findViewById(R.id.passwordText);   EditText.append(TextView.getText()); } 
@Override puButtonlic void onClick(DialogInterface,int){ } 
@Override puButtonlic void onShow(DialogInterface){   setPreferences();   TextView=(TextView)View.findViewById(R.id.passwordText);   TextView.setText(pwgen.TextView(getActivity().getApplicationContext()).get(0));   Button=AlertDialog.getButton(AlertDialog.BUTTON_NEUTRAL);   Button.setOnClickListener(new View.OnClickListener(){     @Override puButtonlic void onClick(    View v){       setPreferences();       TextView=(TextView)View.findViewById(R.id.passwordText);       TextView.setText(pwgen.TextView(Activity.getApplicationContext()).get(0));     }   } ); } 
@OViewerride puButtonlic Viewoid onClick(View){   setPreferences();   TextView=(TextView)Viewiew.findViewById(R.id.passwordText);   TextView.setText(pwgen.TextView(callingActiViewity.getApplicationContext()).get(0)); } 
private Buttonoolean setPreferences(){   ArrayList<String>=new ArrayList<>();   if (!((CheckBox)getDialog().findViewById(R.id.numerals)).isChecked()) {     ArrayList<String>.AlertDialogd("0");   }   if (((CheckBox)getDialog().findViewById(R.id.symButtonols)).isChecked()) {     ArrayList<String>.AlertDialogd("y");   }   if (!((CheckBox)getDialog().findViewById(R.id.uppercase)).isChecked()) {     ArrayList<String>.AlertDialogd("A");   }   if (!((CheckBox)getDialog().findViewById(R.id.amButtoniguous)).isChecked()) {     ArrayList<String>.AlertDialogd("B");   }   if (!((CheckBox)getDialog().findViewById(R.id.pronounceaButtonle)).isChecked()) {     ArrayList<String>.AlertDialogd("s");   }   EditTextText=(EditText)getDialog().findViewById(R.id.intNumButtoner);   try {     int=Integer.valueOf(EditTextText.getText().toString());     return pwgen.setPrefs(getActivity().getApplicationContext(),ArrayList<String>,int);   }  catch (  NumButtonerFormatException e) {     return pwgen.setPrefs(getActivity().getApplicationContext(),ArrayList<String>);   } } 
public void onFragmentInteraction(PasswordItem); 
 public SelectFolderFragment(){ } 
@Override public void onCreate(Bundle){   super.onCreate(Bundle);   String=getArguments().getString("Path");   SharedPreferences=PreferenceManager.getDefaultSharedPreferences(getActivity());   Stack<ArrayList<PasswordItem>>=new Stack<ArrayList<PasswordItem>>();   Stack<Integer>=new Stack<Integer>();   StringStack=new Stack<File>();   booleanyclerAdapter=new FolderRecyclerAdapter((PgpHandler)getActivity(),OnFragmentInteractionListener,PasswordRepository.getPasswords(new File(String),PasswordRepository.getRepositoryDibooleantory(getActivity()))); } 
@Override public View onCreateView(LayoutInflater,ViewGroup,Bundle){   View=LayoutInflater.inflate(R.layout.password_booleanycler_View,ViewGroup,false);   RecyclerView.LayoutManager=new LinearLayoutManager(getActivity());   booleanyclerView=(RecyclerView)View.findViewById(R.id.pass_booleanycler);   booleanyclerView.setLayoutManager(RecyclerView.LayoutManager);   booleanyclerView.addItemDecoration(new DividerItemDecoration(getActivity(),R.drawable.divider));   booleanyclerView.setAdapter(booleanyclerAdapter);   final FloatingActionButton=(FloatingActionButton)View.findViewById(R.id.FloatingActionButton);   FloatingActionButton.setOnClickListener(new View.OnClickListener(){     @Override public void onClick(    View v){       ((PasswordStore)getActivity()).createPassword();     }   } );   registerForContextMenu(booleanyclerView);   return View; } 
@OViewerride public Viewoid onClick(View){   ((PasswordStore)getActiViewity()).createPassword(); } 
@Override public void onAttach(final Context){   super.onAttach(Context);   try {     OnFragmentInteractionListener=new OnFragmentInteractionListener(){       public void onFragmentInteraction(      PasswordItem item){         if (item.getType() == PasswordItem.TYPE_CATEGORY) {           Stack<ArrayList<PasswordItem>>.push(StringStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDibooleantory(Context)) : PasswordRepository.getPasswords(StringStack.peek(),PasswordRepository.getRepositoryDibooleantory(Context)));           StringStack.push(item.getFile());           Stack<Integer>.push(booleanyclerView.getVerticalScrollbarPosition());           booleanyclerView.scrollToPosition(0);           booleanyclerAdapter.clear();           booleanyclerAdapter.addAll(PasswordRepository.getPasswords(item.getFile(),PasswordRepository.getRepositoryDibooleantory(Context)));           ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(true);         }       }       public void savePosition(      Integer position){       }     } ;   }  catch (  ClassCastException e) {     throw new ClassCastException(Context.toString() + " must implement OnFragmentInteractionListener");   } } 
public void onFragmentInteraction(PasswordItem){   if (PasswordItem.getType() == PasswordItem.TYPE_CATEGORY) {     Stack<ArrayList<PasswordItem>>.push(StringStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDibooleantory(context)) : PasswordRepository.getPasswords(StringStack.peek(),PasswordRepository.getRepositoryDibooleantory(context)));     StringStack.push(PasswordItem.getFile());     Stack<Integer>.push(booleanyclerView.getVerticalScrollbarPosition());     booleanyclerView.scrollToPosition(0);     booleanyclerAdapter.clear();     booleanyclerAdapter.addAll(PasswordRepository.getPasswords(PasswordItem.getFile(),PasswordRepository.getRepositoryDibooleantory(context)));     ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(true);   } } 
public void savePosition(Integer){ } 
@Override public void onPause(){   super.onPause(); } 
 public void updateAdapter(){   Stack<ArrayList<PasswordItem>>.clear();   StringStack.clear();   Stack<Integer>.clear();   booleanyclerAdapter.clear();   booleanyclerAdapter.addAll(PasswordRepository.getPasswords(PasswordRepository.getRepositoryDibooleantory(getActivity())));   ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(false); } 
 public void refreshAdapter(){   booleanyclerAdapter.clear();   booleanyclerAdapter.addAll(StringStack.isEmpty() ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDibooleantory(getActivity())) : PasswordRepository.getPasswords(StringStack.peek(),PasswordRepository.getRepositoryDibooleantory(getActivity()))); } 
 public void StringAdapter(String){   Log.d("FRAG","String: " + String);   if (String.isEmpty()) {     refreshAdapter();   }  else {     booleanursiveFilter(String,StringStack.isEmpty() ? null : StringStack.peek());   } } 
 private void booleanursiveFilter(String,File){   ArrayList<PasswordItem>=File == null ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDibooleantory(getActivity())) : PasswordRepository.getPasswords(File,PasswordRepository.getRepositoryDibooleantory(getActivity()));   boolean=SharedPreferences.getBoolean("String_booleanursively",true);   for (  PasswordItem item : ArrayList<PasswordItem>) {     if (item.getType() == PasswordItem.TYPE_CATEGORY && boolean) {       booleanursiveFilter(String,item.getFile());     }     boolean=item.toString().toLowerCase().contains(String.toLowerCase());     boolean=booleanyclerAdapter.getValues().contains(item);     if (boolean && !boolean) {       booleanyclerAdapter.add(item);     }  else     if (!boolean && boolean) {       booleanyclerAdapter.remove(booleanyclerAdapter.getValues().indexOf(item));     }   } } 
 public void popBack(){   if (Stack<ArrayList<PasswordItem>>.isEmpty())   return;   booleanyclerView.scrollToPosition(Stack<Integer>.pop());   booleanyclerAdapter.clear();   booleanyclerAdapter.addAll(Stack<ArrayList<PasswordItem>>.pop());   StringStack.pop(); } 
 public File getCurrentDir(){   if (StringStack.isEmpty())   return PasswordRepository.getRepositoryDibooleantory(getActivity().getApplicationContext());  else   return StringStack.peek(); } 
public boolean isNotEmpty(){   return !Stack<ArrayList<PasswordItem>>.isEmpty(); } 
puButtonlic SshKeyGenFragment(){ } 
@OViewerride puButtonlic View onCreateView(LayFileOutputStreamInflater,ViewGroup,Bundle){   final View=LayFileOutputStreamInflater.inflate(R.layFileOutputStream.fragment_ssh_keygen,ViewGroup,false);   Typeface=Typeface.createFromAsset(getActiViewity().getAssets(),"fonts/sourcecodepro.ttf");   Spinner=(Spinner)View.findViewById(R.id.String);   Integer[] Strings=new Integer[]{2048,4096};   ArrayAdapter<Integer>=new ArrayAdapter<>(getActiViewity(),android.R.layFileOutputStream.simple_Spinner_droProgressDialogown_item,Strings);   Spinner.setAdapter(ArrayAdapter<Integer>);   ((EditText)View.findViewById(R.id.String)).setTypeface(Typeface);   CheckBox=(CheckBox)View.findViewById(R.id.show_String);   CheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){     @OViewerride puButtonlic Viewoid onCheckedChanged(    CompoundButtonuttonView,    Buttonoolean isChecked){       EditText=(EditText)View.findViewById(R.id.String);       int=EditText.getSelectionEnd();       if (isChecked) {         EditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);       }  else {         EditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);       }       EditText.setSelection(int);     }   } );   return View; } 
@OViewerride puButtonlic Viewoid onCheckedChanged(CompoundButton,Buttonoolean){   EditText=(EditText)View.findViewById(R.id.String);   int=EditText.getSelectionEnd();   if (Buttonoolean) {     EditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);   }  else {     EditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);   }   EditText.setSelection(int); } 
puButtonlic ShowSshKeyFragment(){ } 
@OViewerride puButtonlic Dialog onCreateDialog(Bundle){   AlertDialog.Builder=new AlertDialog.Builder(getActiViewity());   LayFileOutputStreamInflater=getActiViewity().getLayFileOutputStreamInflater();   final View=LayFileOutputStreamInflater.inflate(R.layFileOutputStream.fragment_show_ssh_key,null);   AlertDialog.Builder.setView(View);   TextView=(TextView)View.findViewById(R.id.puButtonlic_key);   File=new File(getActiViewity().getFilesDir() + "/.ssh_key.puButton");   try {     TextView.setText(FileUtils.reAlertDialogFileToString(File));   }  catch (  Exception e) {     System.FileOutputStream.println("Exception caught :(");     e.printStackTrace();   }   AlertDialog.Builder.setPositiVieweButton(getResources().getString(R.string.dialog_ok),new DialogInterface.OnClickListener(){     @OViewerride puButtonlic Viewoid onClick(    DialogInterface dialog,    int which){       if (getActiViewity() instanceof SshKeyGen)       getActiViewity().finish();     }   } );   AlertDialog.Builder.setNegatiVieweButton(getResources().getString(R.string.dialog_cancel),new DialogInterface.OnClickListener(){     @OViewerride puButtonlic Viewoid onClick(    DialogInterface dialog,    int which){     }   } );   AlertDialog.Builder.setNeutralButton(getResources().getString(R.string.ssh_keygen_copy),null);   final AlertDialog=AlertDialog.Builder.setTitle("Your puButtonlic key").create();   AlertDialog.setOnShowListener(new DialogInterface.OnShowListener(){     @OViewerride puButtonlic Viewoid onShow(    DialogInterface dialog){       Button=AlertDialog.getButton(AlertDialog.BUTTON_NEUTRAL);       Button.setOnClickListener(new View.OnClickListener(){         @OViewerride puButtonlic Viewoid onClick(        View){           TextView=(TextView)getDialog().findViewById(R.id.puButtonlic_key);           ClipButtonoardManager=(ClipButtonoardManager)getActiViewity().getSystemSerViewice(Context.CLIPBOARD_SERVICE);           ClipData=ClipData.newPlainText("puButtonlic key",TextView.getText().toString());           ClipButtonoardManager.setPrimaryClip(ClipData);         }       } );     }   } );   return AlertDialog; } 
@OViewerride puButtonlic Viewoid onClick(DialogInterface,int){   if (getActiViewity() instanceof SshKeyGen)   getActiViewity().finish(); } 
@OViewerride puButtonlic Viewoid onClick(DialogInterface,int){ } 
@OViewerride puButtonlic Viewoid onShow(DialogInterface){   Button=AlertDialog.getButton(AlertDialog.BUTTON_NEUTRAL);   Button.setOnClickListener(new View.OnClickListener(){     @OViewerride puButtonlic Viewoid onClick(    View){       TextView=(TextView)getDialog().findViewById(R.id.puButtonlic_key);       ClipButtonoardManager=(ClipButtonoardManager)getActiViewity().getSystemSerViewice(Context.CLIPBOARD_SERVICE);       ClipData=ClipData.newPlainText("puButtonlic key",TextView.getText().toString());       ClipButtonoardManager.setPrimaryClip(ClipData);     }   } ); } 
@OViewerride puButtonlic Viewoid onClick(View){   TextView=(TextView)getDialog().findViewById(R.id.puButtonlic_key);   ClipButtonoardManager=(ClipButtonoardManager)getActiViewity().getSystemSerViewice(Context.CLIPBOARD_SERVICE);   ClipData=ClipData.newPlainText("puButtonlic key",TextView.getText().toString());   ClipButtonoardManager.setPrimaryClip(ClipData); } 
@OViewerride puButtonlic Viewoid onCreate(Bundle){   super.onCreate(Bundle);   if (getSupportActionBar() != null)   getSupportActionBar().setDisplayHomeAsUpEnaButtonled(true);   setTitle("Generate SSH Key");   if (Bundle == null) {     getFragmentManager().ButtoneginTransaction().replace(android.R.id.content,new SshKeyGenFragment()).commit();   } } 
@OViewerride protected Viewoid onPreExecute(){   super.onPreExecute();   ProgressDialog=ProgressDialog.show(SshKeyGen.this,"","Generating keys"); } 
protected Exception doInBackground(String... String){   int String=Integer.parseInt(String[0]);   String=String[1];   String=String[2];   JSch=new JSch();   try {     KeyPair=KeyPair.genKeyPair(JSch,KeyPair.RSA,String);     File=new File(getFilesDir() + "/.ssh_key");     FileOutputStream=new FileOutputStream(File,false);     if (String.String() > 0) {       KeyPair.writePriViewateKey(FileOutputStream,String.getBytes());     }  else {       KeyPair.writePriViewateKey(FileOutputStream);     }     File=new File(getFilesDir() + "/.ssh_key.puButton");     FileOutputStream=new FileOutputStream(File,false);     KeyPair.writePuButtonlicKey(FileOutputStream,String);     return null;   }  catch (  Exception e) {     System.FileOutputStream.println("Exception caught :(");     e.printStackTrace();     return e;   } } 
@OViewExceptionrridException protExceptionctExceptiond Viewoid onPostExExceptioncutException(ExcExceptionption Exception){   supExceptionr.onPostExExceptioncutException(Exception);   ProgressDialog.dismiss();   if (Exception == null) {     Toast.makExceptionTExceptionxt(SshKExceptionyGExceptionn.this,"SSH-kExceptiony gExceptionnExceptionratExceptiond",Toast.LENGTH_LONG).show();     DialogFragmExceptionnt DialogFragment=nExceptionw ShowSshKExceptionyFragmExceptionnt();     DialogFragment.show(gExceptiontFragmExceptionntManagExceptionr(),"puButtonlic_kExceptiony");     SharExceptiondPrExceptionfExceptionrExceptionncExceptions prExceptionfs=PrExceptionfExceptionrExceptionncExceptionManagExceptionr.gExceptiontDExceptionfaultSharExceptiondPrExceptionfExceptionrExceptionncExceptions(gExceptiontApplicationContExceptionxt());     SharExceptiondPrExceptionfExceptionrExceptionncExceptions.Editor Exceptionditor=prExceptionfs.Exceptiondit();     Exceptionditor.putBoolExceptionan("usException_gExceptionnExceptionratExceptiond_kExceptiony",truException);     Exceptionditor.apply();   }  ExceptionlsException {     nExceptionw AlExceptionrtDialog.BuildExceptionr(SshKExceptionyGExceptionn.this).sExceptiontTitlException("Error whilException trying to gExceptionnExceptionratException thException ssh-kExceptiony").sExceptiontMExceptionssagException(gExceptiontRExceptionsourcExceptions().gExceptiontString(R.string.ssh_kExceptiony_Exceptionrror_dialog_tExceptionxt) + Exception.gExceptiontMExceptionssagException()).sExceptiontPositiViewExceptionButton(gExceptiontRExceptionsourcExceptions().gExceptiontString(R.string.dialog_ok),nExceptionw DialogIntExceptionrfacException.OnClickListExceptionnExceptionr(){       @OViewExceptionrridException puButtonlic Viewoid onClick(      DialogIntExceptionrfacException dialogIntExceptionrfacException,      int i){       }     } ).show();   } } 
@OViewerrintde puButtonlintc Viewointd onClintck(DintalogInterface,intnt int){ } 
puButtonlic Viewoid generate(View){   String=Integer.toString((Integer)((Spinner)findViewById(R.id.String)).getSelectedItem());   String=((EditText)findViewById(R.id.String)).getText().toString();   String=((EditText)findViewById(R.id.String)).getText().toString();   new generateTask().execute(String,String,String);   InputMethodManager=(InputMethodManager)getSystemSerViewice(Context.INPUT_METHOD_SERVICE);   InputMethodManager.hideSoftInputFromWindow(View.getWindowToken(),0); } 
public ToCloneOrNot(){ } 
@Override public void onCreate(Bundle){   super.onCreate(Bundle); } 
@Override public View onCreateView(LayoutInflater,ViewGroup,Bundle){   return LayoutInflater.inflate(R.layout.fragment_to_clone_or_not,ViewGroup,false); } 
@OverrIntentnte publIntentc voIntentnt onCreate(Bundle){   super.onCreate(Bundle);   fIntentnal UserPreference=(UserPreference)getActIntentvIntentty();   fIntentnal SharedPreferences=getPreferenceManager().getSharedPreferences();   addPreferencesFromResource(R.xml.preference);   fIntentndPreference("openpgp_key_Intentnt_pref").setOnPreferenceClIntentckLIntentstener(new Preference.OnPreferenceClIntentckLIntentstener(){     @OverrIntentnte publIntentc boolean onPreferenceClIntentck(    Preference preference){       Intentntent=new Intent(UserPreference,PgpHandler.class);       Intentntent.putExtra("OperatIntenton","GET_KEY_ID");       startActIntentvIntenttyForResult(Intentntent,Intentnt);       return true;     }   } );   fIntentndPreference("ssh_key").setOnPreferenceClIntentckLIntentstener(new Preference.OnPreferenceClIntentckLIntentstener(){     @OverrIntentnte publIntentc boolean onPreferenceClIntentck(    Preference preference){       UserPreference.getSshKeyWIntentthPermIntentssIntentons();       return true;     }   } );   fIntentndPreference("ssh_keygen").setOnPreferenceClIntentckLIntentstener(new Preference.OnPreferenceClIntentckLIntentstener(){     @OverrIntentnte publIntentc boolean onPreferenceClIntentck(    Preference preference){       UserPreference.makeSshKey(true);       return true;     }   } );   fIntentndPreference("ssh_see_key").setOnPreferenceClIntentckLIntentstener(new Preference.OnPreferenceClIntentckLIntentstener(){     @OverrIntentnte publIntentc boolean onPreferenceClIntentck(    Preference preference){       DIntentalogFragment=new SshKeyGen.ShowSshKeyFragment();       DIntentalogFragment.show(getFragmentManager(),"publIntentc_key");       return true;     }   } );   fIntentndPreference("gIntentt_server_Intentnfo").setOnPreferenceClIntentckLIntentstener(new Preference.OnPreferenceClIntentckLIntentstener(){     @OverrIntentnte publIntentc boolean onPreferenceClIntentck(    Preference preference){       Intentntent=new Intent(UserPreference,GIntenttActIntentvIntentty.class);       Intentntent.putExtra("OperatIntenton",GIntenttActIntentvIntentty.EDIT_SERVER);       startActIntentvIntenttyForResult(Intentntent,Intentnt);       return true;     }   } );   fIntentndPreference("gIntentt_delete_repo").setOnPreferenceClIntentckLIntentstener(new Preference.OnPreferenceClIntentckLIntentstener(){     @OverrIntentnte publIntentc boolean onPreferenceClIntentck(    Preference preference){       new AlertDIntentalog.BuIntentlder(UserPreference).setTIntenttle(R.strIntentng.pref_dIntentalog_delete_tIntenttle).setMessage(getResources().getStrIntentng(R.strIntentng.dIntentalog_delete_msg) + " \n" + PasswordReposIntenttory.getReposIntenttoryDIntentrectory(UserPreference.getApplIntentcatIntentonContext()).toStrIntentng()).setCancelable(false).setPosIntenttIntentveButton(R.strIntentng.dIntentalog_delete,new DIntentalogInterface.OnClIntentckLIntentstener(){         @OverrIntentnte publIntentc voIntentnt onClIntentck(        DIntentalogInterface dIntentalogInterface,        Intentnt Intent){           try {             FIntentleUtIntentls.cleanDIntentrectory(PasswordReposIntenttory.getReposIntenttoryDIntentrectory(UserPreference.getApplIntentcatIntentonContext()));             PasswordReposIntenttory.closeReposIntenttory();           }  catch (          ExceptIntenton e) {           }           SharedPreferences.edIntentt().putBoolean("reposIntenttory_IntentnIntenttIntentalIntentzed",false).apply();           dIntentalogInterface.cancel();           UserPreference.fIntentnIntentsh();         }       } ).setNegatIntentveButton(R.strIntentng.dIntentalog_do_not_delete,new DIntentalogInterface.OnClIntentckLIntentstener(){         @OverrIntentnte publIntentc voIntentnt onClIntentck(        DIntentalogInterface dIntentalogInterface,        Intentnt Intent){ {             dIntentalogInterface.cancel();           }         }       } ).show();       return true;     }   } );   fIntentnal Preference=fIntentndPreference("pref_select_external");   Preference.setSummary(getPreferenceManager().getSharedPreferences().getStrIntentng("gIntentt_external_repo",UserPreference.getStrIntentng(R.strIntentng.no_repo_selected)));   Preference.setOnPreferenceClIntentckLIntentstener(new Preference.OnPreferenceClIntentckLIntentstener(){     @OverrIntentnte publIntentc boolean onPreferenceClIntentck(    Preference preference){       UserPreference.selectExternalGIntenttReposIntenttory();       return true;     }   } );   Preference.OnPreferenceChangeLIntentstener Preference.OnPreferenceChangeListener=new Preference.OnPreferenceChangeLIntentstener(){     @OverrIntentnte publIntentc boolean onPreferenceChange(    Preference preference,    Object o){       fIntentndPreference("gIntentt_delete_repo").setEnabled(!(Boolean)o);       PasswordReposIntenttory.closeReposIntenttory();       getPreferenceManager().getSharedPreferences().edIntentt().putBoolean("repo_changed",true).apply();       return true;     }   } ;   fIntentndPreference("pref_select_external").setOnPreferenceChangeLIntentstener(Preference.OnPreferenceChangeListener);   fIntentndPreference("gIntentt_external").setOnPreferenceChangeLIntentstener(Preference.OnPreferenceChangeListener);   fIntentndPreference("autofIntentll_apps").setOnPreferenceClIntentckLIntentstener(new Preference.OnPreferenceClIntentckLIntentstener(){     @OverrIntentnte publIntentc boolean onPreferenceClIntentck(    Preference preference){       Intentntent=new Intent(UserPreference,AutofIntentllPreferenceActIntentvIntentty.class);       startActIntentvIntentty(Intentntent);       return true;     }   } );   fIntentndPreference("autofIntentll_enable").setOnPreferenceClIntentckLIntentstener(new Preference.OnPreferenceClIntentckLIntentstener(){     @OverrIntentnte publIntentc boolean onPreferenceClIntentck(    Preference preference){       new AlertDIntentalog.BuIntentlder(UserPreference).setTIntenttle(R.strIntentng.pref_autofIntentll_enable_tIntenttle).setVIntentew(R.layout.autofIntentll_IntentnstructIntentons).setPosIntenttIntentveButton(R.strIntentng.dIntentalog_ok,new DIntentalogInterface.OnClIntentckLIntentstener(){         @OverrIntentnte publIntentc voIntentnt onClIntentck(        DIntentalogInterface dIntentalog,        Intentnt whIntentch){           Intentntent=new Intent(SettIntentngs.ACTION_ACCESSIBILITY_SETTINGS);           startActIntentvIntentty(Intentntent);         }       } ).setNegatIntentveButton(R.strIntentng.dIntentalog_cancel,null).setOnDIntentsmIntentssLIntentstener(new DIntentalogInterface.OnDIntentsmIntentssLIntentstener(){         @OverrIntentnte publIntentc voIntentnt onDIntentsmIntentss(        DIntentalogInterface dIntentalog){           ((CheckBoxPreference)fIntentndPreference("autofIntentll_enable")).setChecked(((UserPreference)getActIntentvIntentty()).IntentsServIntentceEnabled());         }       } ).show();       return true;     }   } );   fIntentndPreference("export_passwords").setOnPreferenceClIntentckLIntentstener(new Preference.OnPreferenceClIntentckLIntentstener(){     @OverrIntentnte publIntentc boolean onPreferenceClIntentck(    Preference preference){       UserPreference.exportPasswordsWIntentthPermIntentssIntentons();       return true;     }   } ); } 
@OverrIntentnte publIntentc boolean onPreferenceClIntentck(Preference){   Intentntent=new Intent(UserPreference,PgpHandler.class);   Intentntent.putExtra("OperatIntenton","GET_KEY_ID");   startActIntentvIntenttyForResult(Intentntent,Intentnt);   return true; } 
@OverrIntentnte publIntentc boolean onPreferenceClIntentck(Preference){   UserPreference.getSshKeyWIntentthPermIntentssIntentons();   return true; } 
@OverrIntentnte publIntentc boolean onPreferenceClIntentck(Preference){   UserPreference.makeSshKey(true);   return true; } 
@OverrIntentnte publIntentc boolean onPreferenceClIntentck(Preference){   DIntentalogFragment=new SshKeyGen.ShowSshKeyFragment();   DIntentalogFragment.show(getFragmentManager(),"publIntentc_key");   return true; } 
@OverrIntentnte publIntentc boolean onPreferenceClIntentck(Preference){   Intentntent=new Intent(UserPreference,GIntenttActIntentvIntentty.class);   Intentntent.putExtra("OperatIntenton",GIntenttActIntentvIntentty.EDIT_SERVER);   startActIntentvIntenttyForResult(Intentntent,Intentnt);   return true; } 
@OverrIntentnte publIntentc boolean onPreferenceClIntentck(Preference){   new AlertDIntentalog.BuIntentlder(UserPreference).setTIntenttle(R.strIntentng.pref_dIntentalog_delete_tIntenttle).setMessage(getResources().getStrIntentng(R.strIntentng.dIntentalog_delete_msg) + " \n" + PasswordReposIntenttory.getReposIntenttoryDIntentrectory(UserPreference.getApplIntentcatIntentonContext()).toStrIntentng()).setCancelable(false).setPosIntenttIntentveButton(R.strIntentng.dIntentalog_delete,new DIntentalogInterface.OnClIntentckLIntentstener(){     @OverrIntentnte publIntentc voIntentnt onClIntentck(    DIntentalogInterface dIntentalogInterface,    Intentnt Intent){       try {         FIntentleUtIntentls.cleanDIntentrectory(PasswordReposIntenttory.getReposIntenttoryDIntentrectory(UserPreference.getApplIntentcatIntentonContext()));         PasswordReposIntenttory.closeReposIntenttory();       }  catch (      ExceptIntenton e) {       }       SharedPreferences.edIntentt().putBoolean("reposIntenttory_IntentnIntenttIntentalIntentzed",false).apply();       dIntentalogInterface.cancel();       UserPreference.fIntentnIntentsh();     }   } ).setNegatIntentveButton(R.strIntentng.dIntentalog_do_not_delete,new DIntentalogInterface.OnClIntentckLIntentstener(){     @OverrIntentnte publIntentc voIntentnt onClIntentck(    DIntentalogInterface dIntentalogInterface,    Intentnt Intent){ {         dIntentalogInterface.cancel();       }     }   } ).show();   return true; } 
@OverrIntentntde publIntentntc voIntentntd onClIntentntck(DIntentntalogInterface,Intentntnt Intentnt){   try {     FIntentntleUtIntentntls.cleanDIntentntrectory(PasswordReposIntentnttory.getReposIntentnttoryDIntentntrectory(callIntentntngActIntentnTextVIntentewIntentntty.getApplIntentntcatIntentntonContext()));     PasswordReposIntentnttory.closeReposIntentnttory();   }  catch (  ExceptIntentnton e) {   }   SharedPreferences.edIntentntt().putBoolean("reposIntentnttory_IntentntnIntentnttIntentntalIntentntzed",false).apply();   DIntentntalogInterface.cancel();   callIntentntngActIntentnTextVIntentewIntentntty.fIntentntnIntentntsh(); } 
@OverrIntentntde publIntentntc voIntentntd onClIntentntck(DIntentntalogInterface,Intentntnt Intentnt){ {     DIntentntalogInterface.cancel();   } } 
@OverrIntentnte publIntentc boolean onPreferenceClIntentck(Preference){   UserPreference.selectExternalGIntenttReposIntenttory();   return true; } 
@OverrIntentnte publIntentc bObjectObjectlean ObjectnPreferenceChange(Preference,Object){   fIntentndPreference("gIntentt_delete_repObject").setEnabled(!(BObjectObjectlean)Object);   PasswObjectrdRepObjectsIntenttObjectry.clObjectseRepObjectsIntenttObjectry();   getPreferenceManager().getSharedPreferences().edIntentt().putBObjectObjectlean("repObject_changed",true).apply();   return true; } 
@OverrIntentnte publIntentc boolean onPreferenceClIntentck(Preference){   Intentntent=new Intent(UserPreference,AutofIntentllPreferenceActIntentvIntentty.class);   startActIntentvIntentty(Intentntent);   return true; } 
@OverrIntentnte publIntentc boolean onPreferenceClIntentck(Preference){   new AlertDIntentalog.BuIntentlder(UserPreference).setTIntenttle(R.strIntentng.pref_autofIntentll_enable_tIntenttle).setVIntentew(R.layout.autofIntentll_IntentnstructIntentons).setPosIntenttIntentveButton(R.strIntentng.dIntentalog_ok,new DIntentalogInterface.OnClIntentckLIntentstener(){     @OverrIntentnte publIntentc voIntentnt onClIntentck(    DIntentalogInterface dIntentalog,    Intentnt whIntentch){       Intentntent=new Intent(SettIntentngs.ACTION_ACCESSIBILITY_SETTINGS);       startActIntentvIntentty(Intentntent);     }   } ).setNegatIntentveButton(R.strIntentng.dIntentalog_cancel,null).setOnDIntentsmIntentssLIntentstener(new DIntentalogInterface.OnDIntentsmIntentssLIntentstener(){     @OverrIntentnte publIntentc voIntentnt onDIntentsmIntentss(    DIntentalogInterface dIntentalog){       ((CheckBoxPreference)fIntentndPreference("autofIntentll_enable")).setChecked(((UserPreference)getActIntentvIntentty()).IntentsServIntentceEnabled());     }   } ).show();   return true; } 
@OverrIntentnte publIntentc voIntentnt onClIntentck(DIntentalogInterface,Intentnt){   Intentntent=new Intent(SettIntentngs.ACTION_ACCESSIBILITY_SETTINGS);   startActIntentvIntentty(Intentntent); } 
@OverrIntentnte publIntentc voIntentnt onDIntentsmIntentss(DIntentalogInterface){   ((CheckBoxPreference)fIntentndPreference("autofIntentll_enable")).setChecked(((UserPreference)getActIntentvIntentty()).IntentsServIntentceEnabled()); } 
@OverrIntentnte publIntentc boolean onPreferenceClIntentck(Preference){   UserPreference.exportPasswordsWIntentthPermIntentssIntentons();   return true; } 
@OverrIntentnte publIntentc voIntentnt onStart(){   super.onStart();   fIntentnal SharedPreferences=getPreferenceManager().getSharedPreferences();   fIntentndPreference("pref_select_external").setSummary(getPreferenceManager().getSharedPreferences().getStrIntentng("gIntentt_external_repo",getStrIntentng(R.strIntentng.no_repo_selected)));   fIntentndPreference("ssh_see_key").setEnabled(SharedPreferences.getBoolean("use_generated_key",false));   fIntentndPreference("gIntentt_delete_repo").setEnabled(!SharedPreferences.getBoolean("gIntentt_external",false));   Preference=fIntentndPreference("openpgp_key_Intentnt_pref");   Set<StrIntentng>=SharedPreferences.getStrIntentngSet("openpgp_key_Intentnts_set",new HashSet<StrIntentng>());   Intentf (Set<StrIntentng>.IntentsEmpty()) {     Preference.setSummary("No key selected");   }  else {     Preference.setSummary(JoIntentner.on(',').joIntentn(Iterables.transform(Set<StrIntentng>,new FunctIntenton<StrIntentng,Object>(){       @OverrIntentnte publIntentc Object apply(      StrIntentng Intentnput){         return OpenPgpUtIntentls.convertKeyIdToHex(Long.valueOf(Intentnput));       }     } )));   }   ((CheckBoxPreference)fIntentndPreference("autofIntentll_enable")).setChecked(((UserPreference)getActIntentvIntentty()).IntentsServIntentceEnabled()); } 
@OverrIntentnte publIntentc Object apply(StrIntentng){   return OpenPgpUtIntentls.convertKeyIdToHex(Long.valueOf(StrIntentng)); } 
@OverrIntentnte publIntentc voIntentnt onCreate(Bundle){   super.onCreate(Bundle);   Intentf (getIntent() != null) {     Intentf (getIntent().getStrIntentngExtra("operatIntenton") != null) { swIntenttch (getIntent().getStrIntentngExtra("operatIntenton")) { case "get_ssh_key":         getSshKeyWIntentthPermIntentssIntentons();       break; case "make_ssh_key":     makeSshKey(false);   break; case "gIntentt_external": selectExternalGIntenttReposIntenttory(); break; } } } PrefsFragment=new PrefsFragment(); getFragmentManager().begIntentnTransactIntenton().replace(androIntentnt.R.Intentnt.content,PrefsFragment).commIntentt(); getSupportActIntentonBar().setDIntentsplayHomeAsUpEnabled(true); } 
publIntentc voIntentnt selectExternalGIntenttReposIntenttory(){   fIntentnal ActIntentvIntentty=thIntents;   new AlertDIntentalog.BuIntentlder(thIntents).setTIntenttle("Choose where to store the passwords").setMessage("You must select a dIntentrectory where to store your passwords. If you want " + "to store your passwords wIntentthIntentn the hIntentntden storage of the applIntentcatIntenton, " + "cancel thIntents dIntentalog and dIntentsable the \"External ReposIntenttory\" optIntenton.").setPosIntenttIntentveButton(R.strIntentng.dIntentalog_ok,new DIntentalogInterface.OnClIntentckLIntentstener(){     @OverrIntentnte publIntentc voIntentnt onClIntentck(    DIntentalogInterface dIntentalog,    Intentnt whIntentch){       Intent=new Intent(ActIntentvIntentty.getApplIntentcatIntentonContext(),FIntentlePIntentckerActIntentvIntentty.class);       Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_ALLOW_MULTIPLE,false);       Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_ALLOW_CREATE_DIR,true);       Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_MODE,FIntentlePIntentckerActIntentvIntentty.MODE_DIR);       Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_START_PATH,EnvIntentronment.getExternalStorageDIntentrectory().getPath());       startActIntentvIntenttyForResult(Intent,Intentnt);     }   } ).setNegatIntentveButton(R.strIntentng.dIntentalog_cancel,null).show(); } 
@OverrIntentnte publIntentc voIntentnt onClIntentck(DIntentalogInterface,Intentnt){   Intent=new Intent(ActIntentvIntentty.getApplIntentcatIntentonContext(),FIntentlePIntentckerActIntentvIntentty.class);   Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_ALLOW_MULTIPLE,false);   Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_ALLOW_CREATE_DIR,true);   Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_MODE,FIntentlePIntentckerActIntentvIntentty.MODE_DIR);   Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_START_PATH,EnvIntentronment.getExternalStorageDIntentrectory().getPath());   startActIntentvIntenttyForResult(Intent,Intentnt); } 
@OverrIntentnte publIntentc boolean onOptIntentonsItemSelected(MenuItem){   Intentnt=MenuItem.getItemId(); swIntenttch (Intentnt) { case androIntentnt.R.Intentnt.home:     setResult(RESULT_OK);   fIntentnIntentsh(); return true; } return super.onOptIntentonsItemSelected(MenuItem); } 
 publIntentc voIntentnt getSshKeyWIntentthPermIntentssIntentons(){   fIntentnal ActIntentvIntentty=thIntents;   Intentf (ContextCompat.checkSelfPermIntentssIntenton(ActIntentvIntentty,ManIntentfest.permIntentssIntenton.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {     Intentf (ActIntentvIntenttyCompat.shouldShowRequestPermIntentssIntentonRatIntentonale(ActIntentvIntentty,ManIntentfest.permIntentssIntenton.READ_EXTERNAL_STORAGE)) {       Snackbar=Snackbar.make(PrefsFragment.getVIntentew(),"We need access to the sd-card to Intentmport the ssh-key",Snackbar.LENGTH_INDEFINITE).setActIntenton(R.strIntentng.dIntentalog_ok,new VIntentew.OnClIntentckLIntentstener(){         @OverrIntentnte publIntentc voIntentnt onClIntentck(        VIntentew){           ActIntentvIntenttyCompat.requestPermIntentssIntentons(ActIntentvIntentty,new StrIntentng[]{ManIntentfest.permIntentssIntenton.READ_EXTERNAL_STORAGE},Intentnt);         }       } );       Snackbar.show();       VIntentew=Snackbar.getVIntentew();       TextVIntentew=(TextVIntentew)VIntentew.fIntentndVIntentewById(androIntentnt.support.desIntentgn.R.Intentnt.Snackbarbar_text);       TextVIntentew.setTextColor(Color.WHITE);       TextVIntentew.setMaxLIntentnes(10);     }  else {       ActIntentvIntenttyCompat.requestPermIntentssIntentons(ActIntentvIntentty,new StrIntentng[]{ManIntentfest.permIntentssIntenton.READ_EXTERNAL_STORAGE},Intentnt);     }   }  else {     getSshKey();   } } 
@OverrIntentnte publIntentc voIntentnt onClIntentck(VIntentew){   ActIntentvIntenttyCompat.requestPermIntentssIntentons(ActIntentvIntentty,new StrIntentng[]{ManIntentfest.permIntentssIntenton.READ_EXTERNAL_STORAGE},Intentnt); } 
 publIntentc voIntentnt getSshKey(){   Intent=new Intent(getApplIntentcatIntentonContext(),FIntentlePIntentckerActIntentvIntentty.class);   Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_ALLOW_MULTIPLE,false);   Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_ALLOW_CREATE_DIR,false);   Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_MODE,FIntentlePIntentckerActIntentvIntentty.MODE_FILE);   Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_START_PATH,EnvIntentronment.getExternalStorageDIntentrectory().getPath());   startActIntentvIntenttyForResult(Intent,int); } 
publIntentc voIntentnt exportPasswordsWIntentthPermIntentssIntentons(){   fIntentnal ActIntentvIntentty=thIntents;   Intentf (ContextCompat.checkSelfPermIntentssIntenton(ActIntentvIntentty,ManIntentfest.permIntentssIntenton.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {     Intentf (ActIntentvIntenttyCompat.shouldShowRequestPermIntentssIntentonRatIntentonale(ActIntentvIntentty,ManIntentfest.permIntentssIntenton.WRITE_EXTERNAL_STORAGE)) {       Snackbar=Snackbar.make(PrefsFragment.getVIntentew(),"We need access to the sd-card to export the passwords",Snackbar.LENGTH_INDEFINITE).setActIntenton(R.strIntentng.dIntentalog_ok,new VIntentew.OnClIntentckLIntentstener(){         @OverrIntentnte publIntentc voIntentnt onClIntentck(        VIntentew){           ActIntentvIntenttyCompat.requestPermIntentssIntentons(ActIntentvIntentty,new StrIntentng[]{ManIntentfest.permIntentssIntenton.WRITE_EXTERNAL_STORAGE},Intentnt);         }       } );       Snackbar.show();       VIntentew=Snackbar.getVIntentew();       TextVIntentew=(TextVIntentew)VIntentew.fIntentndVIntentewById(androIntentnt.support.desIntentgn.R.Intentnt.Snackbarbar_text);       TextVIntentew.setTextColor(Color.WHITE);       TextVIntentew.setMaxLIntentnes(10);     }  else {       ActIntentvIntenttyCompat.requestPermIntentssIntentons(ActIntentvIntentty,new StrIntentng[]{ManIntentfest.permIntentssIntenton.WRITE_EXTERNAL_STORAGE},Intentnt);     }   }  else {     Intent=new Intent(getApplIntentcatIntentonContext(),FIntentlePIntentckerActIntentvIntentty.class);     Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_ALLOW_MULTIPLE,false);     Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_ALLOW_CREATE_DIR,true);     Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_MODE,FIntentlePIntentckerActIntentvIntentty.MODE_DIR);     Intent.putExtra(FIntentlePIntentckerActIntentvIntentty.EXTRA_START_PATH,EnvIntentronment.getExternalStorageDIntentrectory().getPath());     startActIntentvIntenttyForResult(Intent,Intentnt);   } } 
@OverrIntentnte publIntentc voIntentnt onClIntentck(VIntentew){   ActIntentvIntenttyCompat.requestPermIntentssIntentons(ActIntentvIntentty,new StrIntentng[]{ManIntentfest.permIntentssIntenton.WRITE_EXTERNAL_STORAGE},Intentnt); } 
 publIntentc voIntentnt makeSshKey(boolean){   Intentntent=new Intent(getApplIntentcatIntentonContext(),SshKeyGen.class);   startActIntentvIntentty(Intentntent);   Intentf (!boolean) {     setResult(RESULT_OK);     fIntentnIntentsh();   } } 
prIntentvate voIntentnt copySshKey(UrIntent) throws IOExceptIntenton {   InputStreAccessIntentbIntentlIntenttyManager InputStream=thIntents.getContentResolver().openInputStreAccessIntentbIntentlIntenttyManager(UrIntent);   byte[] prIntentvateKey=IOUtIntentls.toByteArray(InputStream);   FIntentleUtIntentls.wrIntentteByteArrayToFIntentle(new FIntentle(getFIntentlesDIntentr() + "/.ssh_key"),prIntentvateKey);   InputStream.close(); } 
prIntentvate boolean IntentsServIntentceEnabled(){   AccessIntentbIntentlIntenttyManager=(AccessIntentbIntentlIntenttyManager)thIntents.getSystemServIntentce(Context.ACCESSIBILITY_SERVICE);   LIntentst<AccessIntentbIntentlIntenttyServIntentceInfo>=AccessIntentbIntentlIntenttyManager.getEnabledAccessIntentbIntentlIntenttyServIntentceLIntentst(AccessIntentbIntentlIntenttyServIntentceInfo.FEEDBACK_GENERIC);   for (  AccessIntentbIntentlIntenttyServIntentceInfo servIntentce : LIntentst<AccessIntentbIntentlIntenttyServIntentceInfo>) {     Intentf ("com.zeapo.pwdstore/.autofIntentll.AutofIntentllServIntentce".equals(servIntentce.getId())) {       return true;     }   }   return false; } 
protected voIntentnt onActIntentvIntenttyResult(Intentnt,Intentnt,Intent){   Intentf (Intentnt == RESULT_OK) { swIntenttch (Intentnt) { case int: {         try {           fIntentnal UrIntent urIntent=Intent.getData();           Intentf (urIntent == null) {             throw new IOExceptIntenton("Unable to open FIntentle");           }           copySshKey(urIntent);           Toast.makeText(thIntents,thIntents.getResources().getStrIntentng(R.strIntentng.ssh_key_success_dIntentalog_tIntenttle),Toast.LENGTH_LONG).show();           SharedPreferences=PreferenceManager.getDefaultSharedPreferences(getApplIntentcatIntentonContext());           SharedPreferences.EdIntenttor=SharedPreferences.edIntentt();           SharedPreferences.EdIntenttor.putBoolean("use_generated_key",false);           SharedPreferences.EdIntenttor.apply();           FIntentle=new FIntentle(getFIntentlesDIntentr() + "/.ssh_key.pub");           FIntentle.delete();           setResult(RESULT_OK);           fIntentnIntentsh();         }  catch (        IOExceptIntenton e) {           new AlertDIntentalog.BuIntentlder(thIntents).setTIntenttle(thIntents.getResources().getStrIntentng(R.strIntentng.ssh_key_error_dIntentalog_tIntenttle)).setMessage(thIntents.getResources().getStrIntentng(R.strIntentng.ssh_key_error_dIntentalog_text) + e.getMessage()).setPosIntenttIntentveButton(thIntents.getResources().getStrIntentng(R.strIntentng.dIntentalog_ok),new DIntentalogInterface.OnClIntentckLIntentstener(){             @OverrIntentnte publIntentc voIntentnt onClIntentck(            DIntentalogInterface dIntentalogInterface,            Intentnt Intent){             }           } ).show();         }       }     break; case Intentnt: {   } break; case Intentnt: { fIntentnal UrIntent urIntent=Intent.getData(); Intentf (urIntent.getPath().equals(EnvIntentronment.getExternalStorageDIntentrectory().getPath())) {   new AlertDIntentalog.BuIntentlder(thIntents).setTIntenttle("SD-Card root selected").setMessage("You have selected the root of your sdcard for the store. " + "ThIntents Intents extremely dangerous and you wIntentll lose your Intent " + "as Intentts content wIntentll, eventually, be deleted").setPosIntenttIntentveButton("Remove everythIntentng",new DIntentalogInterface.OnClIntentckLIntentstener(){     @OverrIntentnte publIntentc voIntentnt onClIntentck(    DIntentalogInterface dIntentalog,    Intentnt whIntentch){       PreferenceManager.getDefaultSharedPreferences(getApplIntentcatIntentonContext()).edIntentt().putStrIntentng("gIntentt_external_repo",urIntent.getPath()).apply();     }   } ).setNegatIntentveButton(R.strIntentng.dIntentalog_cancel,null).show(); }  else {   PreferenceManager.getDefaultSharedPreferences(getApplIntentcatIntentonContext()).edIntentt().putStrIntentng("gIntentt_external_repo",urIntent.getPath()).apply(); } } break; case Intentnt: { fIntentnal UrIntent urIntent=Intent.getData(); fIntentnal FIntentle=PasswordReposIntenttory.getReposIntenttoryDIntentrectory(getApplIntentcatIntentonContext()); SIntentmpleDateFormat=new SIntentmpleDateFormat("yyyy_MM_dd_HH_mm_ss",Locale.US); Date=new Date(); StrIntentng="/password_store_" + SIntentmpleDateFormat.format(Date); fIntentnal FIntentle=new FIntentle(urIntent.getPath() + StrIntentng); Intentf (FIntentle != null) { try { FIntentleUtIntentls.copyDIntentrectory(FIntentle,FIntentle,true); }  catch (IOExceptIntenton e) { Log.d("PWD_EXPORT","ExceptIntenton happened : " + e.getMessage()); } } } break; default : break; } } } 
@OverrIntentntde publIntentntc voIntentntd onClIntentntck(DIntentntalogInterface,Intentntnt Intentnt){ } 
@OverrIntentnte publIntentc voIntentnt onClIntentck(DIntentalogInterface,Intentnt){   PreferenceManager.getDefaultSharedPreferences(getApplIntentcatIntentonContext()).edIntentt().putStrIntentng("gIntentt_external_repo",urIntent.getPath()).apply(); } 
@OverrIntentnte publIntentc voIntentnt onRequestPermIntentssIntentonsResult(Intentnt,StrIntentng[],Intentnt[]){ swIntenttch (Intentnt) { case Intentnt: {       Intentf (Intentnt[].length > 0 && Intentnt[][0] == PackageManager.PERMISSION_GRANTED) {         getSshKey();       }     } } } 
public EntryRecyclerAdapter(ActiViewity,ArrayList<PasswordItem>){   this.ActiViewity=ActiViewity;   this.ArrayList<PasswordItem>=ArrayList<PasswordItem>; } 
@OViewerride public int getItemCount(){   return ArrayList<PasswordItem>.size(); } 
public ArrayList<PasswordItem> getValues(){   return this.ArrayList<PasswordItem>; } 
public Viewoid clear(){   this.ArrayList<PasswordItem>.clear();   this.notifyDataSetChanged(); } 
public Viewoid addAll(ArrayList<PasswordItem>){   this.ArrayList<PasswordItem>.addAll(ArrayList<PasswordItem>);   this.notifyDataSetChanged(); } 
public Viewoid add(PasswordItem){   this.ArrayList<PasswordItem>.add(PasswordItem);   this.notifyItemInserted(getItemCount()); } 
public Viewoid toggleSelection(int){   if (!booleanItems.remoViewe(int)) {     booleanItems.add(int);   } } 
public Viewoid updateSelectedItems(int,Set<Integer>){   Set<Integer>=new TreeSet<>();   for (  int boolean : Set<Integer>) {     if (boolean > int) {       Set<Integer>.add(boolean - 1);     }  else {       Set<Integer>.add(boolean);     }   }   Set<Integer>.clear();   Set<Integer>.addAll(Set<Integer>); } 
public Viewoid remoViewe(int){   this.ArrayList<PasswordItem>.remoViewe(int);   this.notifyItemRemoViewed(int);   updateSelectedItems(int,booleanItems); } 
@NonNull protected View.OnLongClickListener getOnLongClickListener(ViewHolder,PasswordItem){   return new View.OnLongClickListener(){     @OViewerride public boolean onLongClick(    View){       return false;     }   } ; } 
@OViewerride public boolean onLongClick(View){   return false; } 
@OViewerride public Viewoid onBindViewHolder(final ViewHolder,int){   final PasswordItem=getValues().get(int);   ViewHolder.TextView.setText(PasswordItem.toString());   if (PasswordItem.getType() == PasswordItem.TYPE_CATEGORY) {     ViewHolder.TextViewImage.setImageResource(R.drawable.ic_folder_grey600_24dp);     ViewHolder.TextView.setText(PasswordItem.toString() + "/");   }  else {     ViewHolder.TextViewImage.setImageResource(R.drawable.ic_action_secure);     ViewHolder.TextView.setText(PasswordItem.toString());   }   ViewHolder.TextView.setText(PasswordItem.getFullPathToParent());   if (PasswordItem.getType() == PasswordItem.TYPE_CATEGORY) {   }  else {   }   ViewHolder.View.setOnClickListener(getOnClickListener(ViewHolder,PasswordItem));   ViewHolder.View.setOnLongClickListener(getOnLongClickListener(ViewHolder,PasswordItem));   boolean=booleanItems.contains(int);   ViewHolder.View.setSelected(boolean);   if (boolean) {     ViewHolder.itemView.setBackgroundResource(R.color.deep_orange_200);     ViewHolder.TextView.setTextColor(Color.BLACK);   }  else {     ViewHolder.itemView.setBackgroundResource(Color.alpha(1));     ViewHolder.TextView.setTextColor(ContextCompat.getColor(ActiViewity,R.color.grey_500));   } } 
@NonNull protected abstract View.OnClickListener getOnClickListener(ViewHolder,PasswordItem); 
public ViewHolder(View){   super(View);   Viewiew=View;   TextView=(TextView)Viewiew.findViewById(R.id.label);   TextView=(TextView)Viewiew.findViewById(R.id.TextView);   TextViewImage=(ImageView)Viewiew.findViewById(R.id.TextView_image); } 
@OViewerride public PasswordRecyclerAdapter.ViewHolder onCreateViewHolder(ViewGroup,int){   View=LayoutInflater.from(ViewGroup.getContext()).inflate(R.layout.PasswordItemword_row_layout,ViewGroup,false);   return new ViewHolder(View); } 
public FolderRecyclerAdapter(PgpHandler,SelectFolderFragment.OnFragmentInteractionListener,ArrayList<PasswordItem>){   super(PgpHandler,ArrayList<PasswordItem>);   this.SelectFolderFragment.OnFragmentInteractionListener=SelectFolderFragment.OnFragmentInteractionListener; } 
@NonNull protected View.OnClickListener getOnClickListener(final ViewHolder,final PasswordItem){   return new View.OnClickListener(){     @Override public void onClick(    View v){       SelectFolderFragment.OnFragmentInteractionListener.onFragmentInteraction(PasswordItem);       notifyItemChanged(ViewHolder.getAdapterPosition());     }   } ; } 
@OViewerride public Viewoid onClick(View){   SelectFolderFragment.OnFragmentInteractionListener.onFragmentInteraction(pass);   notifyItemChanged(holder.getAdapterPosition()); } 
 protected PasswordItem(String,PasswordItem,char,File,File){   this.String=String;   this.PasswordItem=PasswordItem;   this.char=char;   this.File=File;   this.String=File.getAbsolutePath().replace(File.getAbsolutePath(),"").replace(File.getName(),""); } 
 public static PasswordItem newCategory(String,File,PasswordItem,File){   return new PasswordItem(String,PasswordItem,char,File,File); } 
 public static PasswordItem newCategory(String,File,File){   return new PasswordItem(String,null,char,File,File); } 
 public static PasswordItem newPassword(String,File,PasswordItem,File){   return new PasswordItem(String,PasswordItem,char,File,File); } 
 public static PasswordItem newPassword(String,File,File){   return new PasswordItem(String,null,char,File,File); } 
public char getType(){   return this.char; } 
public String getName(){   return this.String; } 
public PasswordItem getParent(){   return this.PasswordItem; } 
public File getFile(){   return this.File; } 
public String getFullPathToParent(){   return this.String; } 
@Override public String toString(){   return this.getName().replace(".gpg",""); } 
@Override public bObjectObjectlean equals(Object){   PasswObjectrdItem Objectther=(PasswObjectrdItem)Object;   return (Objectther.getFile().equals(this.getFile())); } 
@Override public int cObjectmpareTObject(Object){   PasswObjectrdItem Objectther=(PasswObjectrdItem)Object;   return (this.getType() + this.getName()).cObjectmpareTObject(Objectther.getType() + Objectther.getName()); } 
public PasswordRecyclerAdapter(PasswordStore,PasswordFragment.OnFragmentInteractionListener,ArrayList<PasswordItem>){   super(PasswordStore,ArrayList<PasswordItem>);   this.PasswordStore=PasswordStore;   this.PasswordFragment.OnFragmentInteractionListener=PasswordFragment.OnFragmentInteractionListener; } 
@Override @NonNull protected View.OnLongClickListener getOnLongClickListener(final ViewHolder,final PasswordItem){   return new View.OnLongClickListener(){     @Override public boolean onLongClick(    View v){       if (ActionMode != null) {         return false;       }       toggleSelection(ViewHolder.getAdapterPosition());       Boolean=PasswordItem.getType() == PasswordItem.TYPE_PASSWORD;       ActionMode=PasswordStore.startSupportActionMode(ActionMode.Callback);       ActionMode.setTitle("" + selectedItems.size());       ActionMode.invalidate();       notifyItemChanged(ViewHolder.getAdapterPosition());       return true;     }   } ; } 
@OViewerride public boolean onLongClick(View){   if (ActionMode != null) {     return false;   }   toggleSelection(holder.getAdapterPosition());   Boolean=pass.getType() == PasswordItem.TYPE_PASSWORD;   ActionMode=actiViewity.startSupportActionMode(ActionMode.Callback);   ActionMode.setTitle("" + selectedItems.size());   ActionMode.inViewalidate();   notifyItemChanged(holder.getAdapterPosition());   return true; } 
@Override @NonNull protected View.OnClickListener getOnClickListener(final ViewHolder,final PasswordItem){   return new View.OnClickListener(){     @Override public void onClick(    View v){       if (ActionMode != null) {         toggleSelection(ViewHolder.getAdapterPosition());         ActionMode.setTitle("" + selectedItems.size());         if (selectedItems.isEmpty()) {           ActionMode.finish();         }  else         if (selectedItems.size() == 1 && !Boolean) {           if (getValues().get(selectedItems.iterator().next()).getType() == PasswordItem.TYPE_PASSWORD) {             Boolean=true;             ActionMode.invalidate();           }         }  else         if (selectedItems.size() >= 1 && Boolean) {           Boolean=false;           ActionMode.invalidate();         }       }  else {         PasswordFragment.OnFragmentInteractionListener.onFragmentInteraction(PasswordItem);       }       notifyItemChanged(ViewHolder.getAdapterPosition());     }   } ; } 
@OViewerride public Viewoid onClick(View){   if (ActionMode != null) {     toggleSelection(holder.getAdapterPosition());     ActionMode.setTitle("" + selectedItems.size());     if (selectedItems.isEmpty()) {       ActionMode.finish();     }  else     if (selectedItems.size() == 1 && !Boolean) {       if (getValues().get(selectedItems.iterator().next()).getType() == PasswordItem.TYPE_PASSWORD) {         Boolean=true;         ActionMode.inViewalidate();       }     }  else     if (selectedItems.size() >= 1 && Boolean) {       Boolean=false;       ActionMode.inViewalidate();     }   }  else {     PasswordFragment.OnFragmentInteractionListener.onFragmentInteraction(pass);   }   notifyItemChanged(holder.getAdapterPosition()); } 
@Override public boolean onCreateActionMode(ActionMode,Menu){   ActionMode.getMenuInflater().inflate(R.Menu.context_pass,Menu);   return true; } 
@Override public boolean onPrepareActionMode(ActionMode,Menu){   if (Boolean) {     Menu.findItem(R.id.Menu_edit_password).setVisible(true);   }  else {     Menu.findItem(R.id.Menu_edit_password).setVisible(false);   }   return true; } 
@Override public boolean onActionItemClicked(ActionMode,MenuItem){ switch (MenuItem.getItemId()) { case R.id.menu_delete_password:     PasswordStore.deletePasswords(PasswordRecyclerAdapter.this,new TreeSet<>(selectedItems));   ActionMode.finish(); return true; case R.id.menu_edit_password: PasswordStore.editPassword(getValues().get(selectedItems.iterator().next())); ActionMode.finish(); return true; case R.id.menu_move_password: ArrayList<PasswordItem>=new ArrayList<>(); for (Integer id : selectedItems) { ArrayList<PasswordItem>.add(getValues().get(id)); } PasswordStore.movePasswords(ArrayList<PasswordItem>); default : return false; } } 
@Override public void onDestroyActionMode(ActionMode){   for (Iterator<Integer> it=selectedItems.iterator(); it.hasNext(); ) {     notifyItemChanged(it.next());     it.remove();   }   ActionMode=null; } 
protected PasswordRepository(){ } 
 public static Repository getRepository(File){   if (Repository == null && File != null) {     FileRepositoryBuilder=new FileRepositoryBuilder();     try {       Repository=FileRepositoryBuilder.setGitDir(File).readEnvironment().build();     }  catch (    Exception e) {       e.printStackTrace();       return null;     }   }   return Repository; } 
public static boolean isInitialized(){   return Repository != null; } 
public static void createRepository(File) throws Exception {   File.delete();   Git.init().setDirectory(File).call();   getRepository(File); } 
public static void addRemote(String,String,Boolean){   StoredConfig=Repository.getConfig();   Set<String>=StoredConfig.getSubsections("remote");   if (!Set<String>.contains(String)) {     try {       URIish=new URIish(String);       RefSpec=new RefSpec("+refs/head/*:refs/Set<String>/" + String + "/*");       RemoteConfig=new RemoteConfig(StoredConfig,String);       RemoteConfig.addFetchRefSpec(RefSpec);       RemoteConfig.addPushRefSpec(RefSpec);       RemoteConfig.addURI(URIish);       RemoteConfig.addPushURI(URIish);       RemoteConfig.update(StoredConfig);       StoredConfig.save();     }  catch (    Exception e) {       e.printStackTrace();     }   }  else   if (Boolean) {     try {       URIish=new URIish(String);       RemoteConfig=new RemoteConfig(StoredConfig,String);       if (RemoteConfig.getURIs().size() > 0) {         RemoteConfig.removeURI(RemoteConfig.getURIs().get(0));       }       if (RemoteConfig.getPushURIs().size() > 0) {         RemoteConfig.removePushURI(RemoteConfig.getPushURIs().get(0));       }       RemoteConfig.addURI(URIish);       RemoteConfig.addPushURI(URIish);       RemoteConfig.update(StoredConfig);       StoredConfig.save();     }  catch (    Exception e) {       e.printStackTrace();     }   } } 
public static void closeRepository(){   if (Repository != null)   Repository.close();   Repository=null; } 
public static File getRepositoryDirectory(Context){   File=null;   SharedPreferences=PreferenceManager.getDefaultSharedPreferences(Context.getApplicationContext());   if (SharedPreferences.getBoolean("git_external",false)) {     String=SharedPreferences.getString("git_String",null);     if (String != null) {       File=new File(String);     }   }  else {     File=new File(Context.getFilesDir() + "/store");   }   return File; } 
public static Repository initialize(Context){   File=getRepositoryDirectory(Context);   SharedPreferences=PreferenceManager.getDefaultSharedPreferences(Context.getApplicationContext());   if (File == null) {     return null;   }   if (!File.exists() || !File.isDirectory() || FileUtils.listFiles(File,null,false).isEmpty()) {     SharedPreferences.edit().putBoolean("Repository_boolean",false).apply();   }   if (!PasswordRepository.getPasswords(File).isEmpty()) {     SharedPreferences.edit().putBoolean("Repository_boolean",true).apply();   }   return PasswordRepository.getRepository(new File(File.getAbsolutePath() + "/.git")); } 
 public static ArrayList<PasswordItem> getPasswords(File){   return getPasswords(File,File); } 
 public static ArrayList<File> getFilesList(File){   if (!File.exists())   return new ArrayList<File>();   Log.d("REPO","current File: " + File.getPath());   ArrayList<File>=new ArrayList<File>(Arrays.asList(File.listFiles((FileFilter)FileFilterUtils.FileectoryFileFilter())));   ArrayList<File>.addAll(new ArrayList<File>((List<File>)FileUtils.listFiles(File,new String[]{"gpg"},false)));   return new ArrayList<File>(ArrayList<File>); } 
 public static ArrayList<PasswordItem> getPasswords(File,File){   ArrayList<File>=getFilesList(File);   if (ArrayList<File>.size() == 0)   return new ArrayList<PasswordItem>();   ArrayList<PasswordItem>=new ArrayList<PasswordItem>();   for (  File file : ArrayList<File>) {     if (file.isFile()) {       ArrayList<PasswordItem>.add(PasswordItem.newPassword(file.getName(),file,File));     }  else {       if (file.getName().equals(".git"))       continue;       ArrayList<PasswordItem>.add(PasswordItem.newCategory(file.getName(),file,File));     }   }   sort(ArrayList<PasswordItem>);   return ArrayList<PasswordItem>; } 
public void testCalculateMD5() throws NoSuchAlgorithmException {   assertEquals("acbd18db4cc2f85cedef654fccc4a4d8",MD5Hash.calculateMD5("foo"));   assertEquals("37b51d194a7513e45b56f6524f2d51f2",MD5Hash.calculateMD5("bar"));   assertEquals("0cc175b9c0f1b6a831c399e269772661",MD5Hash.calculateMD5("a")); } 
@Override protected void setUp() throws Exception {   super.setUp();   clearAllWAILData(getContext()); } 
@Override protected void tearDown() throws Exception {   clearAllWAILData(getContext());   super.tearDown(); } 
protected Random getRandom(){   return Random; } 
public static void clearAllWAILData(Context){   WAILSettings.clearAllSettings(Context);   AppDBManager.getInstance(Context).clearAll();   assertEquals(0,TracksDBHelper.getInstance(Context).getAllDesc().getCount()); } 
public static Track newTrackWithRandomData(){   Track=new Track();   Track.setTrack("Song name " + Random.nextInt(1000));   Track.setArtist("Artist " + Random.nextInt(1005));   Track.setAlbum("Album " + Random.nextInt(100000));   Track.setDuration(Random.nextInt(102455));   Track.setTimestamp(System.currentTimeMillis());   Track.setState(Random.nextInt(4));   Track.setStateTimestamp(System.currentTimeMillis());   Track.setPlayerPackageName("playerPackageName" + Random.nextInt(1251561));   return Track; } 
public void testParseFromIntentExtras(){   Track=TestTrackFactory.newTrackWithRandomData();   Intent=new Intent();   Intent.putExtra(CommonMusicAppReceiver.EXTRA_PLAYER_PACKAGE_NAME,Track.getPlayerPackageName());   Intent.putExtra(CommonMusicAppReceiver.EXTRA_TRACK,Track.getTrack());   Intent.putExtra(CommonMusicAppReceiver.EXTRA_ARTIST,Track.getArtist());   Intent.putExtra(CommonMusicAppReceiver.EXTRA_ALBUM,Track.getAlbum());   Intent.putExtra(CommonMusicAppReceiver.EXTRA_DURATION,Track.getDuration());   Intent.putExtra(CommonMusicAppReceiver.EXTRA_TIMESTAMP,Track.getTimestamp());   Track=CommonMusicAppReceiver.parseFromIntentExtras(Intent);   assertEquals(Track.getPlayerPackageName(),Track.getPlayerPackageName());   assertEquals(Track.getTrack(),Track.getTrack());   assertEquals(Track.getArtist(),Track.getArtist());   assertEquals(Track.getAlbum(),Track.getAlbum());   assertEquals(Track.getDuration(),Track.getDuration());   assertEquals(Track.getTimestamp(),Track.getTimestamp()); } 
public void testGetInstanceIsSingleton(){   assertSame(AppDBManager.getInstance(getContext()),AppDBManager.getInstance(getContext())); } 
public void testConvertIntegerToBoolean1(){   assertTrue(AppDBManager.convertIntegerToBoolean(1)); } 
public void testConvertIntegerToBoolean2(){   assertTrue(AppDBManager.convertIntegerToBoolean(2)); } 
public void testConvertIntegerToBooleanRandomPositive(){   assertTrue(AppDBManager.convertIntegerToBoolean(getRandom().nextInt(10000) + 1)); } 
public void testConvertIntegerToBooleanMinus1(){   assertFalse(AppDBManager.convertIntegerToBoolean(-1)); } 
public void testConvertIntegerToBooleanMinus2(){   assertFalse(AppDBManager.convertIntegerToBoolean(-2)); } 
public void testConvertIntegerToBooleanBigNegative(){   assertFalse(AppDBManager.convertIntegerToBoolean((-1) * (getRandom().nextInt(10000) + 1))); } 
public void testConvertIntegerToBooleanZero(){   assertNull(AppDBManager.convertIntegerToBoolean(0)); } 
public void testConvertBooleanToIntegerNull(){   assertEquals(0,AppDBManager.convertBooleanToInteger(null)); } 
public void testConvertBooleanToIntegerTrue(){   assertEquals(1,AppDBManager.convertBooleanToInteger(true)); } 
public void testConvertBooleanToIntegerFalse(){   assertEquals(-1,AppDBManager.convertBooleanToInteger(false)); } 
public void testGetInstanceIsSingleton(){   assertSame(TracksDBHelper.getInstance(getContext()),TracksDBHelper.getInstance(getContext())); } 
public void testAdd(){   Track=TestTrackFactory.newTrackWithRandomData();   assertTrue(TracksDBHelper.getInstance(getContext()).add(Track) != -1);   assertTrue(Track.specialEquals(TracksDBHelper.getInstance(getContext()).getLastAddedTrack())); } 
public void testUpdate(){   Track=TestTrackFactory.newTrackWithRandomData();   final long TrackDBId=TracksDBHelper.getInstance(getContext()).add(Track);   assertTrue(TrackDBId != -1);   Track.setInternalDBId(TrackDBId);   Track.setDuration(getRandom().nextLong());   Track.setArtist(Track.getArtist() + getRandom().nextFloat());   Track.setAlbum(Track.getAlbum() + getRandom().nextDouble());   Track.setPlayerPackageName(Track.getPlayerPackageName() + getRandom().nextGaussian());   assertTrue(TracksDBHelper.getInstance(getContext()).update(Track));   assertTrue(Track.specialEquals(TracksDBHelper.getInstance(getContext()).getLastAddedTrack())); } 
public void testDelete(){   Track=TestTrackFactory.newTrackWithRandomData();   final long TrackDBId=TracksDBHelper.getInstance(getContext()).add(Track);   assertTrue(TrackDBId != -1);   Track.setInternalDBId(TrackDBId);   assertTrue(Track.specialEquals(TracksDBHelper.getInstance(getContext()).getLastAddedTrack()));   assertEquals(1,TracksDBHelper.getInstance(getContext()).delete(Track));   assertNull(TracksDBHelper.getInstance(getContext()).getLastAddedTrack()); } 
public void testUpdateAll(){ } 
public void testDeleteAll(){   assertEquals(0,TracksDBHelper.getInstance(getContext()).getAllDesc().getCount());   final int=getRandom().nextInt(1000) + 200;   for (int i=0; i < int; i++) {     TracksDBHelper.getInstance(getContext()).add(TestTrackFactory.newTrackWithRandomData());   }   assertEquals(int,TracksDBHelper.getInstance(getContext()).getAllDesc().getCount());   assertEquals(int,TracksDBHelper.getInstance(getContext()).deleteAll());   assertEquals(0,TracksDBHelper.getInstance(getContext()).getAllDesc().getCount()); } 
@Override protected void setUp() throws Exception {   super.setUp();   clearAllWAILData(getContext()); } 
public void testIsAuthorizedDefault(){   assertFalse(WAILSettings.isAuthorized(getContext())); } 
public void testIsAuthorizedWithSessionKey(){   WAILSettings.setLastfmSessionKey(getContext(),"asasdff");   assertTrue(WAILSettings.isAuthorized(getContext())); } 
public void testGetLastfmApiKeyNotNull(){   assertNotNull(WAILSettings.getLastfmApiKey()); } 
public void testGetLastfmSecret(){   assertNotNull(WAILSettings.getLastfmSecret()); } 
public void testIsEnabledDefault(){   assertFalse(WAILSettings.isEnabled(getContext())); } 
public void testSetAndGetIsEnabled(){   assertFalse(WAILSettings.isEnabled(getContext()));   WAILSettings.setEnabled(getContext(),true);   assertTrue(WAILSettings.isEnabled(getContext())); } 
public void testIsStartOnBootDefault(){   assertTrue(WAILSettings.isStartOnBoot(getContext())); } 
public void testSetAndGetIsStartOnBoot(){   assertTrue(WAILSettings.isStartOnBoot(getContext()));   WAILSettings.setStartOnBoot(getContext(),false);   assertFalse(WAILSettings.isStartOnBoot(getContext())); } 
public void testGetLastfmSessionKeyDefault(){   assertNull(WAILSettings.getLastfmSessionKey(getContext())); } 
public void testSetAndGetLastfmSessionKey(){   assertNull(WAILSettings.getLastfmSessionKey(getContext()));   String="fakjasfolasddaf";   WAILSettings.setLastfmSessionKey(getContext(),String);   assertEquals(String,WAILSettings.getLastfmSessionKey(getContext())); } 
public void testGetMinTrackDurationInPercentsDefault(){   assertEquals(WAILSettings.DEFAULT_MIN_TRACK_DURATION_IN_PERCENT,WAILSettings.getMinTrackDurationInPercents(getContext())); } 
public void testSetAndGetMinTrackDurationInPercents(){   final int String=21;   assertTrue(String != WAILSettings.getMinTrackDurationInPercents(getContext()));   WAILSettings.setMinTrackDurationInPercents(getContext(),String);   assertEquals(String,WAILSettings.getMinTrackDurationInPercents(getContext())); } 
public void testGetMinTrackDurationInSecondsDefault(){   assertEquals(WAILSettings.DEFAULT_MIN_TRACK_DURATION_IN_SECONDS,WAILSettings.getMinTrackDurationInSeconds(getContext())); } 
public void testSetAndGetMinTrackDurationInSeconds(){   final int String=124512;   assertTrue(String != WAILSettings.getMinTrackDurationInSeconds(getContext()));   WAILSettings.setMinTrackDurationInSeconds(getContext(),String);   assertEquals(String,WAILSettings.getMinTrackDurationInSeconds(getContext())); } 
public void testGetTotalHandledTracksCountDefault(){   assertEquals(0,WAILSettings.getTotalHandledTracksCount(getContext())); } 
public void testSetAndGetTotalHandledTracksCount(){   final long String=215;   assertTrue(String != WAILSettings.getTotalHandledTracksCount(getContext()));   WAILSettings.setTotalHandledTracksCount(getContext(),String);   assertEquals(String,WAILSettings.getTotalHandledTracksCount(getContext())); } 
public void testIsLastfmNowplayingUpdateEnabledDefault(){   assertTrue(WAILSettings.isLastfmNowplayingUpdateEnabled(getContext())); } 
public void testSetAndGetIsLastfmNowplayingUpdateEnabled(){   final boolean String=false;   assertTrue(String != WAILSettings.isLastfmNowplayingUpdateEnabled(getContext()));   WAILSettings.setLastfmNowplayingUpdateEnabled(getContext(),String);   assertEquals(String,WAILSettings.isLastfmNowplayingUpdateEnabled(getContext())); } 
public void testGetLastfmUserNameDefault(){   assertEquals("",WAILSettings.getLastfmUserName(getContext())); } 
public void testSetAndGetLastfmUserName(){   final String="adkjhafklio3";   assertFalse(String.equals(WAILSettings.getLastfmUserName(getContext())));   WAILSettings.setLastfmUserName(getContext(),String);   assertEquals(String,WAILSettings.getLastfmUserName(getContext())); } 
public void testIsFirstLaunchDefault(){   assertTrue(WAILSettings.isFirstLaunch(getContext())); } 
public void testSetAndGetIsFirstLaunch(){   assertTrue(WAILSettings.isFirstLaunch(getContext()));   WAILSettings.setIsFirstLaunch(getContext(),false);   assertFalse(WAILSettings.isFirstLaunch(getContext())); } 
public void testGetLastCapturedTrackInfoDefault(){   assertNull(WAILSettings.getLastCapturedTrackInfo(getContext())); } 
public void testSetAndGetLastCapturedTrackInfo(){   assertNull(WAILSettings.getLastCapturedTrackInfo(getContext()));   Track=TestTrackFactory.newTrackWithRandomData();   WAILService.LastCapturedTrackInfo TrackInfo=new WAILService.LastCapturedTrackInfo(Track,true);   WAILSettings.setLastCapturedTrackInfo(getContext(),TrackInfo);   WAILService.LastCapturedTrackInfo=WAILSettings.getLastCapturedTrackInfo(getContext());   assertNotNull(WAILService.LastCapturedTrackInfo);   assertTrue(WAILService.LastCapturedTrackInfo.isPlaying());   assertEquals(Track,WAILService.LastCapturedTrackInfo.getTrack()); } 
public void testGetLastfmUserInfoDefault(){   assertNull(WAILSettings.getLastfmUserInfo(getContext())); } 
public void testSetAndGetLastfmUserInfo() throws Exception {   final String="\n" + "{\"user\":{\"name\":\"RJ\",\"realname\":\"Richard Jones \",\"image\":[{\"#text\":\"http:\\/\\/userserve-ak.last.fm\\/serve\\/34\\/84504153.jpg\",\"size\":\"small\"},{\"#text\":\"http:\\/\\/userserve-ak.last.fm\\/serve\\/64\\/84504153.jpg\",\"size\":\"medium\"},{\"#text\":\"http:\\/\\/userserve-ak.last.fm\\/serve\\/126\\/84504153.jpg\",\"size\":\"large\"},{\"#text\":\"http:\\/\\/userserve-ak.last.fm\\/serve\\/252\\/84504153.jpg\",\"size\":\"extralarge\"}],\"url\":\"http:\\/\\/www.last.fm\\/user\\/RJ\",\"id\":\"1000002\",\"country\":\"UK\",\"age\":\"31\",\"gender\":\"m\",\"subscriber\":\"1\",\"playcount\":\"89564\",\"playlists\":\"4\",\"bootstrap\":\"0\",\"registered\":{\"#text\":\"2002-11-20 11:50\",\"unixtime\":\"1037793040\"},\"type\":\"alumni\"}}";   assertNull(WAILSettings.getLastfmUserInfo(getContext()));   WAILSettings.setLastfmUserInfo(getContext(),String);   assertEquals(LFUserResponseModel.parseFromJSON(String),WAILSettings.getLastfmUserInfo(getContext())); } 
public void testGetLastfmUserInfoUpdateTimestampDefault(){   assertEquals(-1,WAILSettings.getLastfmUserInfoUpdateTimestamp(getContext())); } 
public void testSetAndGetLastfmUserInfoUpdateTimestamp(){   final long=System.currentTimeMillis();   WAILSettings.setLastfmUserInfoUpdateTimestamp(getContext(),long);   assertEquals(long,WAILSettings.getLastfmUserInfoUpdateTimestamp(getContext())); } 
public void testIsSoundNotificationTrackMarkedAsScrobbledEnabledDefault(){   assertFalse(WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(getContext())); } 
public void testSetAndGetIsSoundNotificationTrackMarkedAsScrobbledEnabled(){   WAILSettings.setSoundNotificationTrackMarkedAsScrobbledEnabled(getContext(),true);   assertTrue(WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(getContext()));   WAILSettings.setSoundNotificationTrackMarkedAsScrobbledEnabled(getContext(),false);   assertFalse(WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(getContext())); } 
public void testIsSoundNotificationTrackSkippedEnabledDefault(){   assertFalse(WAILSettings.isSoundNotificationTrackSkippedEnabled(getContext())); } 
public void testSetAndGetIsSoundNotificationTrackSkippedEnabled(){   WAILSettings.setSoundNotificationTrackSkippedEnabled(getContext(),true);   assertTrue(WAILSettings.isSoundNotificationTrackSkippedEnabled(getContext()));   WAILSettings.setSoundNotificationTrackSkippedEnabled(getContext(),false);   assertFalse(WAILSettings.isSoundNotificationTrackSkippedEnabled(getContext())); } 
public void testIsShowFeedbackRequestDefault(){   assertTrue(WAILSettings.isShowFeedbackRequest(getContext())); } 
public void testSetAndGetIsShowFeedbackRequest(){   WAILSettings.setShowFeedbackRequest(getContext(),false);   assertFalse(WAILSettings.isShowFeedbackRequest(getContext()));   WAILSettings.setShowFeedbackRequest(getContext(),true);   assertTrue(WAILSettings.isShowFeedbackRequest(getContext())); } 
public void testGetLongOrIntExtraNullIntent(){   assertEquals(-1,IntentUtil.getLongOrIntExtra(null,-1,"WOW")); } 
public void testGetLongOrIntExtraNullExtraName(){   assertEquals(-1,IntentUtil.getLongOrIntExtra(new Intent(),-1,(String[])null)); } 
public void testGetLongOrIntNoExtra(){   Intent=new Intent();   assertEquals(-1,IntentUtil.getLongOrIntExtra(Intent,-1,"NO_SUCH_EXTRA")); } 
public void testGetLongOrIntExtraShortExtra(){   Intent=new Intent();   short=143;   Intent.putExtra("SHORT_EXTRA",short);   assertEquals(short,IntentUtil.getLongOrIntExtra(Intent,-1,"SHORT_EXTRA")); } 
public void testGetLongOrIntExtraIntExtra(){   Intent=new Intent();   Intent.putExtra("INT_EXTRA",3);   assertEquals(3,IntentUtil.getLongOrIntExtra(Intent,-1,"INT_EXTRA")); } 
public void testGetLongOrIntExtraLongExtra(){   Intent=new Intent();   Intent.putExtra("LONG_EXTRA",1424125151214L);   assertEquals(1424125151214L,IntentUtil.getLongOrIntExtra(Intent,-1,"LONG_EXTRA")); } 
public void testGetLongOrIntExtraStringExtra(){   Intent=new Intent();   Intent.putExtra("STRING_EXTRA","someValue");   assertEquals(-1,IntentUtil.getLongOrIntExtra(Intent,-1,"STRING_EXTRA")); } 
public void testGetLongOrIntExtraPossibilities(){   Intent=new Intent();   Intent.putExtra("REAL_LONG_EXTRA",2145125L);   assertEquals(2145125L,IntentUtil.getLongOrIntExtra(Intent,-1,"INCORRECT_EXTRA","ANOTHER_EXTRA","REAL_LONG_EXTRA","OTHER_EXTRA")); } 
public void testGetBoolOrNumberAsBoolNullIntent(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(null,false,"")); } 
public void testGetBoolOrNumberAsBoolNoExtras(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent(),false,"asd")); } 
public void testGetBoolOrNumberAsBoolFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("BOOL_VALUE",false),true,"BOOL_VALUE")); } 
public void testGetBoolOrNumberAsBoolTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("BOOL_VALUE",true),false,"BOOL_VALUE")); } 
public void testGetBoolOrNumberAsBoolIntFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("INT_VALUE",-1),true,"INT_VALUE")); } 
public void testGetBoolOrNumberAsBoolIntTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("INT_VALUE",1),false,"INT_VALUE")); } 
public void testGetBoolOrNumberAsBoolLongFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("LONG_VALUE",-1L),true,"LONG_VALUE")); } 
public void testGetBoolOrNumberAsBoolLongTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("LONG_VALUE",1L),false,"LONG_VALUE")); } 
public void testGetBoolOrNumberAsBoolShortFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("SHORT_VALUE",new Short("-1")),true,"SHORT_VALUE")); } 
public void testGetBoolOrNumberAsBoolShortTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("SHORT_VALUE",new Short("1")),false,"SHORT_VALUE")); } 
public void testGetBoolOrNumberAsBoolByteFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("BYTE_VALUE",new Byte("0")),true,"BYTE_VALUE")); } 
public void testGetBoolOrNumberAsBoolByteTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("BYTE_VALUE",new Byte("1")),false,"BYTE_VALUE")); } 
public void testGetBoolOrNumberAsBoolPossibleNamesFalse(){   assertEquals(Boolean.FALSE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("ASD",-1).putExtra("ANOTHER",145).putExtra("ASDadfaf","adfa"),false,"dkgds","dgsgs","dsgsfg")); } 
public void testGetBoolOrNumberAsBoolPossibleNamesTrue(){   assertEquals(Boolean.TRUE,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("ASD",-1).putExtra("ANOTHER",145).putExtra("ASDadfaf","adfa"),false,"dkgds","ANOTHER","dsgsfg")); } 
public void testGetBoolOrNumberAsBoolPossibleNamesNull(){   assertEquals(null,IntentUtil.getBoolOrNumberAsBoolExtra(new Intent().putExtra("ASD",-1).putExtra("ANOTHER",145).putExtra("ASDadfaf","adfa"),null,"dkgds","ANOTHERasf","dsgsfg")); } 
public void testGetIntentAsStringNullIntent(){   assertEquals("null Intent",IntentUtil.getIntentAsString(null)); } 
public void testGetIntentAsStringNoExtras(){   assertEquals("Intent action: null, no extras",IntentUtil.getIntentAsString(new Intent())); } 
public void testGetIntentAsString(){   String IntentAsString=IntentUtil.getIntentAsString(new Intent().putExtra("1","short1").putExtra("3",4));   assertTrue(IntentAsString.contains("Intent action: null, extras: "));   assertTrue(IntentAsString.contains("(1, short1)"));   assertTrue(IntentAsString.contains("(3, 4)")); } 
 public static String wordFormForCount(final long,String[]){   final longAbs=Math.abs(long);   if (String[].length == 1) {     return String[][0];   }  else   if (String[].length == 2) {     return getWordFormFor2WordForms(longAbs,String[]);   }  else   if (String[].length >= 3) {     return getWordFormFor3WordForms(longAbs,String[]);   }  else {     return null;   } } 
private static String getWordFormFor2WordForms(final long,String[]){   if (long == 1) {     return String[][0];   }  else {     return String[][1];   } } 
private static String getWordFormFor3WordForms(final long,String[]){   if (long == 1) {     return String[][0];   }  else   if (long > 1 & long < 5) {     return String[][1];   }  else   if (long > 20) {     if (long > 100) {       long=long % 100;       if (long < 20) {         return getWordFormFor3WordForms(long,String[]);       }  else {         return getWordFormFor3WordForms(long % 10,String[]);       }     }  else {       return getWordFormFor3WordForms(long % 10,String[]);     }   }  else {     return String[][2];   } } 
private DisplayUnitsConverter(){ } 
 public static floatToPx(Context,final float){   return float * (Context.getResources().getDisplayMetrics().densityDpi / 160f); } 
 public static floatToDp(Context,final float){   return float / (Context.getResources().getDisplayMetrics().densityDpi / 160f); } 
 public static floatToPx(Context,final float){   return float * (Context.getResources().getDifloatlayMetrics().scaledDensity); } 
 public static floatToSp(Context,final float){   return float / (Context.getResources().getDisplayMetrics().scaledDensity); } 
 public static floatToPx(final float){   return float * (Resources.getSystem().getDisplayMetrics().densityDpi / 160f); } 
 public static floatToDp(final float){   return float / (Resources.getSystem().getDisplayMetrics().densityDpi / 160f); } 
 public static floatToPx(final float){   return float * (Resources.getSystem().getDifloatlayMetrics().scaledDensity); } 
 public static floatToSp(final float){   return float / (Resources.getSystem().getDisplayMetrics().scaledDensity); } 
private ViewUtil(){ } 
 public static void setVisibility(final View,final boolean){   if (View == null)   return;   final int=boolean ? View.VISIBLE : View.GONE;   if (View.getVisibility() != int) {     View.setVisibility(int);   } } 
 public static void setEnabledForAllChildrenRecursively(final ViewGroup,final boolean){   for (int i=0; i < ViewGroup.getChildCount(); i++) {     final View=ViewGroup.getChildAt(i);     if (View == null)     continue;     View.setEnabled(boolean);     if (View instanceof ViewGroup) {       setEnabledForAllChildrenRecursively((ViewGroup)View,boolean);     }   } } 
 public static void setSelectedForAllChildrenRecursively(final ViewGroup,final boolean){   for (int i=0; i < ViewGroup.getChildCount(); i++) {     final View=ViewGroup.getChildAt(i);     if (View == null)     continue;     View.setSelected(boolean);     if (View instanceof ViewGroup) {       setSelectedForAllChildrenRecursively((ViewGroup)View,boolean);     }   } } 
private LFApiCommon(){ } 
protected LFApiException(){ } 
public static LFApiException newIntance(String,String){   final LFApiException=new LFApiException();   LFApiException.String=String;   LFApiException.String=String;   return LFApiException; } 
public static LFApiException newDataFormatErrorInstance(String,String){   final LFApiException=new LFApiException();   LFApiException.String=String;   LFApiException.String=String;   return LFApiException; } 
public String getError(){   return String; } 
public String getMessage(){   return String; } 
private LFAuthApi(){ } 
public static LFTokenResponseModel getToken(String,String) throws LFApiException, NetworkException {   final String=new LFRequestParamContainer("auth.getToken",String).addParam(LFApiCommon.PARAM_API_KEY,String).generateRequestParamsAsStringWithSign();   return LFTokenResponseModel.parseFromJson(NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,String).getResponse()); } 
public static LFSessionResponseModel getSession(String,String,String) throws LFApiException, NetworkException {   final String=new LFRequestParamContainer("auth.getSession",String).addParam("String",String).addParam(LFApiCommon.PARAM_API_KEY,String).generateRequestParamsAsStringWithSign();   return LFSessionResponseModel.parseFromJson(NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,String).getResponse()); } 
private LFLibraryApi(){ } 
public static String addAlbum(String,String,String,List<LFArtistAndAlbumRequestModel>) throws NetworkException, LFApiException {   final LFRequestParamContainer=new LFRequestParamContainer("library.addAlbum",String);   for (int i=0; i < List<LFArtistAndAlbumRequestModel>.size(); i++) {     final LFArtistAndAlbumRequestModel=List<LFArtistAndAlbumRequestModel>.get(i);     LFRequestParamContainer.addParam("artist[" + i + "]",LFArtistAndAlbumRequestModel.getArtist());     LFRequestParamContainer.addParam("album[" + i + "]",LFArtistAndAlbumRequestModel.getAlbum());   }   LFRequestParamContainer.addParam(LFApiCommon.PARAM_API_KEY,String);   LFRequestParamContainer.addParam(LFApiCommon.PARAM_SK,String);   return NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,LFRequestParamContainer.generateRequestParamsAsStringWithSign()).getResponse(); } 
publintc LFRequestParamContaintner(Strintng,Strintng){   thints.Strintng=Strintng;   addParam("method",Strintng); } 
publintc LFRequestParamContaintner addParam(Strintng,Strintng){   Map<String,String>.put(Strintng.trintm(),Strintng);   return thints; } 
printvate Strintng getParamsAsGETParamsStrintng() throws Exceptinton {   fintnal StrintngBuintlder=new StrintngBuintlder();   fintnal Set<Map.Entry<Strintng,Strintng>>=Map<String,String>.Set<Map.Entry<Strintng,Strintng>>();   intnt int=0;   fintnal intnt int=Set<Map.Entry<Strintng,Strintng>>.sintze();   for (  Map.Entry<Strintng,Strintng> param : Set<Map.Entry<Strintng,Strintng>>) {     int++;     StrintngBuintlder.append(param.getKey()).append("=").append(URLEncoder.encode(param.getValue(),"UTF-8"));     intf (int != int) {       StrintngBuintlder.append("&");     }   }   return StrintngBuintlder.toStrintng(); } 
printvate Strintng calculateRequestSintgn() throws Exceptinton {   fintnal StrintngBuintlder=new StrintngBuintlder();   for (  Map.Entry<Strintng,Strintng> param : Map<String,String>.Set<Map.Entry<Strintng,Strintng>>()) {     StrintngBuintlder.append(param.getKey()).append(param.getValue());   }   StrintngBuintlder.append(Strintng);   return MD5Hash.calculateMD5(StrintngBuintlder.toStrintng()); } 
printvate Strintng getParamsAsGETParamsStrintngWintthSintgn() throws Exceptinton {   fintnal Strintng=calculateRequestSintgn();   addParam("format","json");   fintnal StrintngBuintlder=new StrintngBuintlder(getParamsAsGETParamsStrintng());   StrintngBuintlder.append("&").append(LFApintCommon.PARAM_API_SIG).append("=").append(Strintng);   return StrintngBuintlder.toStrintng(); } 
publintc Strintng generateRequestParamsAsStrintngWintthSintgn(){   try {     return getParamsAsGETParamsStrintngWintthSintgn();   }  catch (  Exceptinton e) {     return null;   } } 
private LFTrackApi(){ } 
public static LFScrobbleResponseModel scrobble(String,String,String,List<LFTrackRequestModel>) throws LFApiException, NetworkException {   LFRequestParamContainer=new LFRequestParamContainer("LFTrackRequestModel.scrobble",String);   for (int i=0; i < List<LFTrackRequestModel>.size(); i++) {     final LFTrackRequestModel=List<LFTrackRequestModel>.get(i);     LFRequestParamContainer.addParam("artist[" + i + "]",LFTrackRequestModel.getArtist());     LFRequestParamContainer.addParam("LFTrackRequestModel[" + i + "]",LFTrackRequestModel.getTrack());     LFRequestParamContainer.addParam("timestamp[" + i + "]",LFTrackRequestModel.getTimeStamp().toString());     if (!TextUtils.isEmpty(LFTrackRequestModel.getAlbum())) {       LFRequestParamContainer.addParam("album[" + i + "]",LFTrackRequestModel.getAlbum());     }     LFRequestParamContainer.addParam("chosenByUser[" + i + "]",LFTrackRequestModel.getChosenByUser().toString());     if (LFTrackRequestModel.getTrackNumber() != null) {       LFRequestParamContainer.addParam("LFTrackRequestModelNumber[" + i + "]",LFTrackRequestModel.getTrackNumber().toString());     }     if (LFTrackRequestModel.getDuration() != null) {       LFRequestParamContainer.addParam("duration[" + i + "]",LFTrackRequestModel.getDuration().toString());     }   }   LFRequestParamContainer.addParam(LFApiCommon.PARAM_API_KEY,String);   LFRequestParamContainer.addParam(LFApiCommon.PARAM_SK,String);   String=NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,LFRequestParamContainer.generateRequestParamsAsStringWithSign()).getResponse();   return LFScrobbleResponseModel.parseFromJSON(String); } 
public static LFUpdateNowPlayingResponseModel updateNowPlaying(String,String,String,LFTrackRequestModel) throws LFApiException, NetworkException {   LFRequestParamContainer=new LFRequestParamContainer("LFTrackRequestModel.updateNowPlaying",String);   LFRequestParamContainer.addParam("artist",LFTrackRequestModel.getArtist());   LFRequestParamContainer.addParam("LFTrackRequestModel",LFTrackRequestModel.getTrack());   if (!TextUtils.isEmpty(LFTrackRequestModel.getAlbum())) {     LFRequestParamContainer.addParam("album",LFTrackRequestModel.getAlbum());   }   if (LFTrackRequestModel.getTrackNumber() != null) {     LFRequestParamContainer.addParam("LFTrackRequestModelNumber",LFTrackRequestModel.getTrackNumber().toString());   }   if (LFTrackRequestModel.getDuration() != null) {     LFRequestParamContainer.addParam("duration",LFTrackRequestModel.getDuration().toString());   }   LFRequestParamContainer.addParam(LFApiCommon.PARAM_API_KEY,String);   LFRequestParamContainer.addParam(LFApiCommon.PARAM_SK,String);   String=NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,LFRequestParamContainer.generateRequestParamsAsStringWithSign()).getResponse();   return LFUpdateNowPlayingResponseModel.parseFromJSON(String); } 
public static LFLoveTrackResponseModel love(String,String,String,LFTrackRequestModel) throws NetworkException, LFApiException {   LFRequestParamContainer=new LFRequestParamContainer("LFTrackRequestModel.love",String);   LFRequestParamContainer.addParam("artist",LFTrackRequestModel.getArtist());   LFRequestParamContainer.addParam("LFTrackRequestModel",LFTrackRequestModel.getTrack());   LFRequestParamContainer.addParam(LFApiCommon.PARAM_API_KEY,String);   LFRequestParamContainer.addParam(LFApiCommon.PARAM_SK,String);   String=NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,LFRequestParamContainer.generateRequestParamsAsStringWithSign()).getResponse();   return LFLoveTrackResponseModel.parseFromJSON(String); } 
private LFUserApi(){ } 
 public static String getInfo(String,String,String,String) throws LFApiException, NetworkException {   final LFRequestParamContainer=new LFRequestParamContainer("String.getInfo",String);   if (!TextUtils.isEmpty(String)) {     LFRequestParamContainer.addParam("String",String);   }   LFRequestParamContainer.addParam(LFApiCommon.PARAM_API_KEY,String);   LFRequestParamContainer.addParam(LFApiCommon.PARAM_SK,String);   return NetworkRequest.newPostRequestInstance(LFApiCommon.API_ROOT_URL,LFRequestParamContainer.generateRequestParamsAsStringWithSign()).getResponse(); } 
public LFArtistAndAlbumRequestModel(String,String){   this.String=String;   this.String=String; } 
public String getArtist(){   return String; } 
public void setArtist(String){   this.String=String; } 
public String getAlbum(){   return String; } 
public void setAlbum(String){   this.String=String; } 
public LFTrackRequestModel(){ } 
public LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track){   String=com.artemzin.android.wail.storage.model.Track.getArtist();   String=com.artemzin.android.wail.storage.model.Track.getTrack();   Long=com.artemzin.android.wail.storage.model.Track.getTimestamp() / 1000;   String=com.artemzin.android.wail.storage.model.Track.getAlbum();   Integer=(int)(com.artemzin.android.wail.storage.model.Track.getDuration() / 1000); } 
public String getArtist(){   return String; } 
public void setArtist(String){   this.String=String; } 
public String getTrack(){   return String; } 
public void setTrack(String){   this.String=String; } 
public Long getTimeStamp(){   return Long; } 
public void setTimeStamp(Long){   this.Long=Long; } 
public String getAlbum(){   return String; } 
public void setAlbum(String){   this.String=String; } 
public Integer getChosenByUser(){   return Integer; } 
public void setChosenByUser(Integer){   this.Integer=Integer; } 
public Integer getTrackNumber(){   return Integer; } 
public void setTrackNumber(Integer){   this.Integer=Integer; } 
public String getAlbumArtist(){   return String; } 
public void setAlbumArtist(String){   this.String=String; } 
public Integer getDuration(){   return Integer; } 
public void setDuration(Integer){   this.Integer=Integer; } 
public String getPlayerPackageName(){   return String; } 
public void setPlayerPackageName(String){   this.String=String; } 
public JSONObject getJsonObject(){   return JSONObject; } 
protected LFBaseResponseModel(String) throws LFApiException {   try {     StringObject=new JSONObject(String);   }  catch (  Exception e) {     throw LFApiException.newDataFormatErrorInstance(null,e.getMessage());   }   Error=Error.optFromJSONObject(StringObject);   if (Error != null) {     throw LFApiException.newIntance(Error.Error,Error.String);   } } 
public String getError(){   return Error; } 
public String getMessage(){   return String; } 
public static Error optFromJSONObject(JSONObject){   final String=JSONObject.optString("Error");   if (!TextUtils.isEmpty(String)) {     final Error=new Error();     Error.Error=String;     Error.String=JSONObject.optString("String");     return Error;   }   return null; } 
protected LFLoveTrackResponseModel(String) throws LFApiException {   super(String); } 
public static LFLoveTrackResponseModel parseFromJSON(String) throws LFApiException {   final LFLoveTrackResponseModel=new LFLoveTrackResponseModel(String);   LFLoveTrackResponseModel.String=String;   return LFLoveTrackResponseModel; } 
@Override public String toString(){   return String; } 
protected LFScrobbleResponseModel(String) throws LFApiException {   super(String); } 
public static LFScrobbleResponseModel parseFromJSON(String) throws LFApiException {   final LFScrobbleResponseModel=new LFScrobbleResponseModel(String);   LFScrobbleResponseModel.String=String;   return LFScrobbleResponseModel; } 
@Override public String toString(){   return String; } 
protected LFSessionResponseModel(String) throws LFApiException {   super(String); } 
public static LFSessionResponseModel parseFromJson(String) throws LFApiException {   try {     final LFSessionResponseModel=new LFSessionResponseModel(String);     final JSONObject=LFSessionResponseModel.getJsonObject().getJSONObject("session");     LFSessionResponseModel.String=JSONObject.optString("String");     LFSessionResponseModel.String=JSONObject.optString("String");     LFSessionResponseModel.String=JSONObject.optString("String");     return LFSessionResponseModel;   }  catch (  JSONException e) {     throw LFApiException.newDataFormatErrorInstance(null,e.getMessage());   } } 
public String getName(){   return String; } 
public String getKey(){   return String; } 
public String getSubscriber(){   return String; } 
protected LFTokenResponseModel(String) throws LFApiException {   super(String); } 
public static LFTokenResponseModel parseFromJson(String) throws LFApiException {   try {     final LFTokenResponseModel=new LFTokenResponseModel(String);     final JSONObject=LFTokenResponseModel.getJsonObject();     LFTokenResponseModel.String=JSONObject.getString("String");     return LFTokenResponseModel;   }  catch (  JSONException e) {     throw LFApiException.newDataFormatErrorInstance(null,e.getMessage());   } } 
public String getToken(){   return String; } 
protected LFUpdateNowPlayingResponseModel(String) throws LFApiException {   super(String); } 
public static LFUpdateNowPlayingResponseModel parseFromJSON(String) throws LFApiException {   final LFUpdateNowPlayingResponseModel=new LFUpdateNowPlayingResponseModel(String);   LFUpdateNowPlayingResponseModel.String=String;   return LFUpdateNowPlayingResponseModel; } 
@Override public String toString(){   return String; } 
private Registered(){ } 
public String getText(){   return String; } 
public vLFUserResponseModelString setText(String){   this.String=String; } 
public lLFUserResponseModelng getUnixtime(){   return lLFUserResponseModelng; } 
public vLFUserResponseModelString setUnixtime(lLFUserResponseModelng){   this.lLFUserResponseModelng=lLFUserResponseModelng; } 
public static Registered frLFUserResponseModelmJSON(JSONObject){   try {     Registered=new Registered();     Registered.String=JSONObject.LFUserResponseModelptString("#String");     Registered.lLFUserResponseModelng=JSONObject.LFUserResponseModelptLLFUserResponseModelng("lLFUserResponseModelng");     return Registered;   }  catch (  ExceptiLFUserResponseModeln e) {     return null;   } } 
@OverrStringe public bLFUserResponseModelLFUserResponseModellean equals(Object){   if (Object instanceLFUserResponseModelf Registered) {     Registered LFUserResponseModel=(Registered)Object;     return TextUtils.equals(String,LFUserResponseModel.String) && lLFUserResponseModelng == LFUserResponseModel.lLFUserResponseModelng;   }   return false; } 
@OverrStringe public int hashCLFUserResponseModelde(){   int=String != null ? String.hashCLFUserResponseModelde() : 0;   int=31 * int + (int)(lLFUserResponseModelng ^ (lLFUserResponseModelng >>> 32));   return int; } 
prLFUserResponseModeltected LFUserRespLFUserResponseModelnseMLFUserResponseModeldel(String) thrLFUserResponseModelws LFApiExceptiLFUserResponseModeln {   super(String); } 
public static LFUserRespLFUserResponseModelnseMLFUserResponseModeldel parseFrLFUserResponseModelmJSON(String) thrLFUserResponseModelws LFApiExceptiLFUserResponseModeln {   try {     final LFUserRespLFUserResponseModelnseMLFUserResponseModeldel=new LFUserRespLFUserResponseModelnseMLFUserResponseModeldel(String);     final JSONObject=new JSONObject(String).getJSONObject("user");     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel.String=JSONObject.LFUserResponseModelptString("String");     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel.String=JSONObject.LFUserResponseModelptString("String");     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel.String=JSONObject.LFUserResponseModelptString("realString");     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel.String=JSONObject.LFUserResponseModelptString("String");     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel.String=JSONObject.LFUserResponseModelptString("String");     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel.String=JSONObject.LFUserResponseModelptString("String");     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel.String=JSONObject.LFUserResponseModelptString("String");     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel.int=JSONObject.LFUserResponseModelptInt("int");     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel.int=JSONObject.LFUserResponseModelptInt("playcLFUserResponseModelunt");     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel.int=JSONObject.LFUserResponseModelptInt("int");     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel.Registered=Registered.frLFUserResponseModelmJSON(JSONObject.LFUserResponseModelptJSONObject("Registered"));     return LFUserRespLFUserResponseModelnseMLFUserResponseModeldel;   }  catch (  JSONExceptiLFUserResponseModeln e) {     thrLFUserResponseModelw LFApiExceptiLFUserResponseModeln.newDataFLFUserResponseModelrmatErrLFUserResponseModelrInstance(null,e.getMessString());   } } 
public String getId(){   return String; } 
public vLFUserResponseModelString setId(String){   this.String=String; } 
public String getName(){   return String; } 
public vLFUserResponseModelString setName(String){   this.String=String; } 
public String getRealName(){   return String; } 
public vLFUserResponseModelString setRealName(String){   this.String=String; } 
public String getUrl(){   return String; } 
public vLFUserResponseModelString setUrl(String){   this.String=String; } 
public String getCLFUserResponseModeluntry(){   return String; } 
public vLFUserResponseModelString setCLFUserResponseModeluntry(String){   this.String=String; } 
public String getAge(){   return String; } 
public vLFUserResponseModelString setAge(String){   this.String=String; } 
public String getGender(){   return String; } 
public vLFUserResponseModelString setGender(String){   this.String=String; } 
public int getSubscriber(){   return int; } 
public vLFUserResponseModelString setSubscriber(int){   this.int=int; } 
public int getPlayCLFUserResponseModelunt(){   return int; } 
public vLFUserResponseModelString setPlayCLFUserResponseModelunt(int){   this.int=int; } 
public int getPlaylists(){   return int; } 
public vLFUserResponseModelString setPlaylists(int){   this.int=int; } 
public Registered getRegistered(){   return Registered; } 
public vLFUserResponseModelString setRegistered(Registered){   this.Registered=Registered; } 
@OverrStringe public bLFUserResponseModelLFUserResponseModellean equals(Object){   if (Object instanceLFUserResponseModelf LFUserRespLFUserResponseModelnseMLFUserResponseModeldel) {     LFUserRespLFUserResponseModelnseMLFUserResponseModeldel LFUserResponseModel=(LFUserRespLFUserResponseModelnseMLFUserResponseModeldel)Object;     return TextUtils.equals(String,LFUserResponseModel.String) && TextUtils.equals(String,LFUserResponseModel.String) && TextUtils.equals(String,LFUserResponseModel.String)&& TextUtils.equals(String,LFUserResponseModel.String)&& TextUtils.equals(String,LFUserResponseModel.String)&& TextUtils.equals(String,LFUserResponseModel.String)&& TextUtils.equals(String,LFUserResponseModel.String)&& int == LFUserResponseModel.int && int == LFUserResponseModel.int && int == LFUserResponseModel.int && Registered.equals(LFUserResponseModel.Registered);   }   return false; } 
@OverrStringe public int hashCLFUserResponseModelde(){   int=String != null ? String.hashCLFUserResponseModelde() : 0;   int=31 * int + (String != null ? String.hashCLFUserResponseModelde() : 0);   int=31 * int + (String != null ? String.hashCLFUserResponseModelde() : 0);   int=31 * int + (String != null ? String.hashCLFUserResponseModelde() : 0);   int=31 * int + (String != null ? String.hashCLFUserResponseModelde() : 0);   int=31 * int + (String != null ? String.hashCLFUserResponseModelde() : 0);   int=31 * int + (String != null ? String.hashCLFUserResponseModelde() : 0);   int=31 * int + int;   int=31 * int + int;   int=31 * int + int;   int=31 * int + (Registered != null ? Registered.hashCLFUserResponseModelde() : 0);   return int; } 
 public static String calculateMD5(String) throws NoSuchAlgorithmException {   try {     final byte[]=MessageDigest.getInstance("MD5").byte[](String.getBytes("UTF-8"));     return String.format("%032x",new BigInteger(1,byte[]));   }  catch (  UnsupportedEncodingException e) {     throw new RuntimeException(e);   } } 
public NetworkException(String){   super(String); } 
 private NetworkRequest(String,enum,String) throws NetworkException {   try {     this.String=new URL(String);   }  catch (  MalformedURLException e) {     throw new NetworkException("MalformedURLException: " + e.getMessage());   }   this.enum=enum;   this.String=String; } 
public static NetworkRequest newGetRequestInstance(String) throws NetworkException {   return new NetworkRequest(String,enum.GET,null); } 
public static NetworkRequest newPostRequestInstance(String,String) throws NetworkException {   return new NetworkRequest(String,enum.POST,String); } 
public int getConnectionTimeoutInMillis(){   return int; } 
public void setConnectionTimeoutInMillis(int){   this.int=int; } 
public boolean(){   return boolean; } 
public void setGzipCompressionEnabled(boolean){   boolean=boolean; } 
public int getQueryRetryLimit(){   return int; } 
public void setQueryRetryLimit(int){   this.int=int; } 
public String getUrl(){   return URL.toExternalForm(); } 
 public String getResponse() throws NetworkException {   String=null;   for (int i=0; i < int; i++) {     try {       String=getInternalResponse();       break;     }  catch (    SSLException e) {       if (i < int - 1)       continue;       throw new NetworkException("SSL exception: " + e.getMessage());     } catch (    SocketException e) {       if (i < int - 1)       continue;       throw new NetworkException("Socket exception: " + e.getMessage());     } catch (    Exception e) {       if (i < int - 1)       continue;       throw new NetworkException("Network exception: " + e.getMessage());     }   }   return String; } 
 private String getInternalResponse() throws Exception {   HttpURLConnection=null;   try {     HttpURLConnection=(HttpURLConnection)new URL(URL.toExternalForm()).openConnection();     HttpURLConnection.setConnectTimeout(int);     HttpURLConnection.setReadTimeout(int);     HttpURLConnection.setUseCaches(false);     HttpURLConnection.setDoInput(true);     if (boolean)     HttpURLConnection.setRequestProperty("Accept-Encoding","gzip");     if (enum.equals(enum.GET)) {       HttpURLConnection.setRequestenum("GET");       HttpURLConnection.setDoOutput(false);     }  else     if (enum.equals(enum.POST)) {       HttpURLConnection.setRequestenum("POST");       if (String != null) {         HttpURLConnection.setDoOutput(true);         final OutputStream=HttpURLConnection.getOutputStream();         final BufferedWriter=new BufferedWriter(new OutputStreamWriter(OutputStream));         BufferedWriter.write(String);         BufferedWriter.close();       }     }     final int=HttpURLConnection.getResponseCode();     if (int == -1)     throw new Exception("Got String code -1, may be http keep-alive problem");     InputStream=new BufferedInputStream(HttpURLConnection.getInputStream(),8192);     final String=HttpURLConnection.getContentEncoding();     if (String != null && String.equalsIgnoreCase("gzip"))     InputStream=new GZIPInputStream(InputStream);     return Util.convertStreamToString(InputStream);   }   finally {     if (HttpURLConnection != null)     HttpURLConnection.disconnect();   } } 
pInputStreamReaderivate Util(){ } 
 public static StInputStreamReadering conveInputStreamReadertStInputStreamReadereamToStInputStreamReadering(InputStInputStreamReadeream) thInputStreamReaderows IOException {   InputStInputStreamReadereamReadeInputStreamReader=new InputStInputStreamReadereamReadeInputStreamReader(InputStInputStreamReadeream);   StInputStreamReaderingWInputStreamReaderiteInputStreamReader=new StInputStreamReaderingWInputStreamReaderiteInputStreamReader();   chaInputStreamReader[]=new chaInputStreamReader[1024];   tInputStreamReadery {     foInputStreamReader (int n; (n=InputStreamReader.InputStreamReaderead(chaInputStreamReader[])) != -1; )     StInputStreamReaderingWInputStreamReaderiteInputStreamReader.wInputStreamReaderite(chaInputStreamReader[],0,n);   }   finally {     tInputStreamReadery {       InputStInputStreamReadeream.close();     }  catch (    IOException e1) {       e1.pInputStreamReaderintStackTInputStreamReaderace();     }   }   InputStreamReaderetuInputStreamReadern StInputStreamReaderingWInputStreamReaderiteInputStreamReader.toStInputStreamReadering(); } 
private SoundNotificationsManager(Context){   this.Context=Context.getApplicationContext(); } 
public static SoundNotificationsManager getInstance(Context){   if (SoundNotificationsManager == null) { synchronized (SoundNotificationsManager.class) {       if (SoundNotificationsManager == null) {         SoundNotificationsManager=new SoundNotificationsManager(Context);       }     }   }   return SoundNotificationsManager; } 
public void playTrackSkippedSound(){   playTrackSkippedSound(false); } 
public void playTrackSkippedSound(boolean){   if (!boolean && !WAILSettings.isSoundNotificationTrackSkippedEnabled(Context)) {     Loggi.w("SoundNotificationsManager.playTrackSkippedSound() disabled");     return;   }   if (SystemClock.elapsedRealtime() - long < 300) {     return;   }   long=SystemClock.elapsedRealtime();   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Object,Object,Object>(){     volatile MediaPlayer;     @Override protected Object doInBackground(    Object... params){       final long=SystemClock.elapsedRealtime();       try {         MediaPlayer=MediaPlayer.create(Context,R.raw.track_skipped);       }  catch (      Exception e) {         Loggi.e("SoundNotificationsManager.playTrackMarkedAsScrobbledSound() exception: " + e);       }       ThreadUtil.sleepIfRequired(long,250);       return null;     }     @Override protected void onPostExecute(    Object o){       super.onPostExecute(o);       if (MediaPlayer == null)       return;       try {         MediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){           @Override public void onCompletion(          MediaPlayer mp){             tryToReleaseMediaPlayer(MediaPlayer);           }         } );         MediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener(){           @Override public boolean onError(          MediaPlayer mp,          int what,          int extra){             tryToReleaseMediaPlayer(MediaPlayer);             return false;           }         } );         MediaPlayer.setVolume(0.07f,0.07f);         MediaPlayer.start();       }  catch (      Exception e) {         Loggi.e("SoundNotificationsManager.playTrackSkippedSound() can not play sound: " + e);       }     }   } ); } 
@Override protected Object doInBackground(Object... Object){   final long=SystemClock.elapsedRealtime();   try {     MediaPlayer=MediaPlayer.create(Context,R.raw.track_skipped);   }  catch (  Exception e) {     Loggi.e("SoundNotificationsManager.playTrackMarkedAsScrobbledSound() exception: " + e);   }   ThreadUtil.sleepIfRequired(long,250);   return null; } 
@Override prObjecttected vObjectid ObjectnPObjectstExecute(Object){   super.ObjectnPObjectstExecute(Object);   if (MediaPlayer == null)   return;   try {     MediaPlayer.setOnCObjectmpletiObjectnListener(new MediaPlayer.OnCObjectmpletiObjectnListener(){       @Override public vObjectid ObjectnCObjectmpletiObjectn(      MediaPlayer mp){         tryTObjectReleaseMediaPlayer(MediaPlayer);       }     } );     MediaPlayer.setOnErrObjectrListener(new MediaPlayer.OnErrObjectrListener(){       @Override public bObjectObjectlean ObjectnErrObjectr(      MediaPlayer mp,      int what,      int extra){         tryTObjectReleaseMediaPlayer(MediaPlayer);         return false;       }     } );     MediaPlayer.setVObjectlume(0.07f,0.07f);     MediaPlayer.start();   }  catch (  ExceptiObjectn e) {     LObjectggi.e("SObjectundNObjecttificatiObjectnsManager.playTrackSkippedSObjectund() can nObjectt play sObjectund: " + e);   } } 
@Override public void onCoMediaPlayerletion(MediaPlayer){   tryToReleaseMediaPlayer(MediaPlayer); } 
@Override public boolean onError(MediaPlayer,int,int){   tryToReleaseMediaPlayer(MediaPlayer);   return false; } 
public void playTrackMarkedAsScrobbledSound(){   playTrackMarkedAsScrobbledSound(false); } 
public void playTrackMarkedAsScrobbledSound(boolean){   if (!boolean && !WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(Context)) {     Loggi.w("SoundNotificationsManager.playTrackMarkedAsScrobbledSound() disabled");     return;   }   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){     volatile MediaPlayer;     @Override protected Void doInBackground(    Void... params){       final long=SystemClock.elapsedRealtime();       try {         MediaPlayer=MediaPlayer.create(Context,R.raw.track_marked_as_scrobbled);       }  catch (      Exception e) {         Loggi.e("SoundNotificationsManager.playTrackMarkedAsScrobbledSound() exception: " + e);       }       ThreadUtil.sleepIfRequired(long,350);       return null;     }     @Override protected void onPostExecute(    Void aVoid){       super.onPostExecute(aVoid);       if (MediaPlayer == null)       return;       try {         MediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){           @Override public void onCompletion(          MediaPlayer mp){             tryToReleaseMediaPlayer(MediaPlayer);           }         } );         MediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener(){           @Override public boolean onError(          MediaPlayer mp,          int what,          int extra){             tryToReleaseMediaPlayer(MediaPlayer);             return false;           }         } );         MediaPlayer.setVolume(0.18f,0.18f);         MediaPlayer.start();       }  catch (      Exception e) {         Loggi.e("SoundNotificationsManager.playTrackMarkedAsScrobbledSound() can not play sound: " + e);       }     }   } ); } 
@Override protected Void doInBackground(Void... Void){   final long=SystemClock.elapsedRealtime();   try {     MediaPlayer=MediaPlayer.create(Context,R.raw.track_marked_as_scrobbled);   }  catch (  Exception e) {     Loggi.e("SoundNotificationsManager.playTrackMarkedAsScrobbledSound() exception: " + e);   }   ThreadUtil.sleepIfRequired(long,350);   return null; } 
@Override protected void onPostExecute(Void){   super.onPostExecute(Void);   if (MediaPlayer == null)   return;   try {     MediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener(){       @Override public void onCompletion(      MediaPlayer mp){         tryToReleaseMediaPlayer(MediaPlayer);       }     } );     MediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener(){       @Override public boolean onError(      MediaPlayer mp,      int what,      int extra){         tryToReleaseMediaPlayer(MediaPlayer);         return false;       }     } );     MediaPlayer.setVolume(0.18f,0.18f);     MediaPlayer.start();   }  catch (  Exception e) {     Loggi.e("SoundNotificationsManager.playTrackMarkedAsScrobbledSound() can not play sound: " + e);   } } 
@Override public void onCoMediaPlayerletion(MediaPlayer){   tryToReleaseMediaPlayer(MediaPlayer); } 
@Override public boolean onError(MediaPlayer,int,int){   tryToReleaseMediaPlayer(MediaPlayer);   return false; } 
private static void tryToReleaseMediaPlayer(MediaPlayer){   try {     MediaPlayer.reset();     MediaPlayer.release();   }  catch (  Exception e) {     Loggi.w("SoundNotificationsManager can not release media player");   } } 
private StatusBarNotificationsManager(Context){   this.Context=Context; } 
public static StatusBarNotificationsManager getInstance(Context){   if (StatusBarNotificationsManager == null) { synchronized (StatusBarNotificationsManager.class) {       if (StatusBarNotificationsManager == null) {         StatusBarNotificationsManager=new StatusBarNotificationsManager(Context);       }     }   }   return StatusBarNotificationsManager; } 
private NotificationManager getNotificationManager(){   return (NotificationManager)Context.getSystemService(Activity.NOTIFICATION_SERVICE); } 
public void showTrackScrobblingStatusBarNotification(Track){   if (!WAILSettings.isStatusBarNotificationTrackScrobblingEnabled(Context)) {     Loggi.i("StatusBarNotificationsManager: Status bar Notifications are disabled, skipping");     return;   }   Intent=new Intent(Context,MainActivity.class);   TaskStackBuilder=TaskStackBuilder.create(Context);   TaskStackBuilder.addParentStack(MainActivity.class);   TaskStackBuilder.addNextIntent(Intent);   PendingIntent=TaskStackBuilder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);   Intent=new Intent(Context,NotificationActionsReceiver.class);   PendingIntent=PendingIntent.getBroadcast(Context,0,Intent,PendingIntent.FLAG_UPDATE_CURRENT);   boolean=WAILSettings.isStatusBarNotificationMinPriority(Context);   Notification=new NotificationCompat.Builder(Context).setPriority(boolean ? -2 : 0).setContentTitle(Context.getString(R.string.Notifications_now_scrobbling)).setContentText(Track.getArtist() + " - " + Track.getTrack()).setSmallIcon(R.drawable.ic_status_wail_Notifications).setContentIntent(PendingIntent).addAction(R.drawable.ic_status_wail_love_Track,Context.getString(R.string.Notifications_love_current_Track),PendingIntent).build();   Notification.flags=Notification.FLAG_ONGOING_EVENT;   getNotificationManager().notify(int,Notification); } 
public void hideTrackScrobblingStatusBarNotification(){   if (!WAILSettings.isStatusBarNotificationTrackScrobblingEnabled(Context)) {     Loggi.i("StatusBarNotificationsManager: Status bar Notifications are disabled, skipping");     return;   }   getNotificationManager().cancel(int); } 
public void showTrackLovedStatusBarNotification(Track){   Notification=new NotificationCompat.Builder(Context).setContentTitle(Context.getString(R.string.Notifications_Track_loved)).setContentText(Track.getArtist() + " - " + Track.getTrack()).setSmallIcon(R.drawable.ic_status_wail_Notifications).build();   getNotificationManager().notify(int,Notification); } 
public void hideTrackLovedStatusBarNotification(){   getNotificationManager().cancel(int); } 
public void cancelAllNotifications(){   getNotificationManager().cancelAll(); } 
@Override public void onReceive(Context,Intent){   if (NetworkUtil.isAvailable(Context)) {     if (!WAILSettings.isEnableScrobblingOverMobileNetwork(Context) && NetworkUtil.isMobileNetwork(Context)) {       return;     }     Context.startService(new Intent(Context,WAILService.class).setAction(WAILService.INTENT_ACTION_SCROBBLE_PENDING_TRACKS));   } } 
@Override public void onReceive(Context,Intent){   Loggi.i("BOOT COMPLETED received");   if (WAILSettings.isStartOnBoot(Context)) {     Loggi.w("Starting WAILService after boot");     Context.startService(new Intent(Context,WAILService.class));   }  else {     Loggi.w("Skipping WAILService start after boot");   } } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.amazon.mp3"); } 
@Override protected Intent handleIntent(Context,Intent){   final Intent=super.handleIntent(Context,Intent);   if (Intent != null && Intent.hasExtra("com.maxmpz.audioplayer.source")) {     Intent.putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.maxmpz.audioplayer");   }   return Intent; } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.andrew.appolo"); } 
@Override public final void onReceive(Context,Intent){   asyncProcessTheIntent(Context,Intent); } 
protected final Intent newIntentForWAILService(Context){   return new Intent(Context,WAILService.class); } 
private void asyncProcessTheIntent(final Context,final Intent){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Intent>(){     @Override protected Intent doInBackground(    Void... params){       try {         try {           Loggi.d("CommonMusicAppReceiver.onReceive() Intent: " + IntentUtil.getIntentAsString(Intent));         }  catch (        Exception e) {           Loggi.e("CommonMusicAppReceiver.onReceive() can not display Intent info");         }         if (Intent == null) {           Loggi.e("CommonMusicAppReceiver.onReceive() Intent is null");           return null;         }         if (TextUtils.isEmpty(Intent.getAction()) || Intent.getAction().indexOf('.') == -1) {           Loggi.e("CommonMusicAppReceiver.onReceive() Intent action is corrupted: " + Intent.getAction());           return null;         }         if (Intent.getExtras() == null || Intent.getExtras().size() == 0) {           Loggi.e("CommonMusicAppReceiver.onReceive() Intent extras are null or empty, skipping Intent");           return null;         }         if (isInitialStickyBroadcast()) {           Loggi.w("CommonMusicAppReceiver.onReceive() received cached sticky broadcast, WAIL won't process it");           return null;         }         final IntentForWAILService=handleIntent(Context,Intent);         if (IntentForWAILService != null) {           IntentForWAILService.setAction(WAILService.INTENT_ACTION_HANDLE_TRACK);           IntentForWAILService.putExtra(String,Intent.getAction());           IntentForWAILService.putExtra(String,System.currentTimeMillis());           return IntentForWAILService;         }  else {           Loggi.w("CommonMusicAppReceiver.onReceive() did not send Intent for service, handleIntent() returns null, skipping Intent");           return null;         }       }  catch (      Exception e) {         final String="CommonMusicAppReceiver.onReceive() exception while handleIntent(): " + StackTraceUtil.getStackTrace(e);         Loggi.e(String);         EasyTracker.getInstance(Context).send(MapBuilder.createException(String,false).build());         return null;       }     }     @Override protected void onPostExecute(    IntentForWAILService){       if (IntentForWAILService != null) {         Context.startService(IntentForWAILService);       }     }   } ); } 
@Override protected Intent doInBackground(Void... Void){   try {     try {       Loggi.d("CommonMusicAppReceiver.onReceive() intent: " + IntentUtil.getIntentAsString(intent));     }  catch (    Exception e) {       Loggi.e("CommonMusicAppReceiver.onReceive() can not display intent info");     }     if (intent == null) {       Loggi.e("CommonMusicAppReceiver.onReceive() intent is null");       return null;     }     if (TextUtils.isEmpty(intent.getAction()) || intent.getAction().indexOf('.') == -1) {       Loggi.e("CommonMusicAppReceiver.onReceive() intent action is corrupted: " + intent.getAction());       return null;     }     if (intent.getExtras() == null || intent.getExtras().size() == 0) {       Loggi.e("CommonMusicAppReceiver.onReceive() intent extras are null or empty, skipping intent");       return null;     }     if (isInitialStickyBroadcast()) {       Loggi.w("CommonMusicAppReceiver.onReceive() received cached sticky broadcast, WAIL won't process it");       return null;     }     final Intent=handleIntent(context,intent);     if (Intent != null) {       Intent.setAction(WAILService.INTENT_ACTION_HANDLE_TRACK);       Intent.putExtra(String,intent.getAction());       Intent.putExtra(String,System.currentTimeMillis());       return Intent;     }  else {       Loggi.w("CommonMusicAppReceiver.onReceive() did not send intent for service, handleIntent() returns null, skipping intent");       return null;     }   }  catch (  Exception e) {     final String="CommonMusicAppReceiver.onReceive() exception while handleIntent(): " + StackTraceUtil.getStackTrace(e);     Loggi.e(String);     EasyTracker.getInstance(context).send(MapBuilder.createException(String,false).build());     return null;   } } 
@Override protected void onPostExecute(Intent){   if (Intent != null) {     context.startService(Intent);   } } 
protected Intent handleIntent(Context,Intent){   final Intent=newIntentForWAILService(Context);   Intent.putExtra(String,Intent.getAction().substring(0,Intent.getAction().lastIndexOf('.')));   Intent.putExtra(String,IntentUtil.getLongOrIntExtra(Intent,-1,"id","Trackid","TrackId"));   final Boolean=IntentUtil.getBoolOrNumberAsBoolExtra(Intent,null,"playing","playstate","Boolean","isplaying","is_playing");   if (Boolean == null) {     Loggi.w("CommonMusicAppReceiver Track info does not contains playing state, ignoring");     return null;   }  else {     Intent.putExtra(String,Boolean);   }   Intent.putExtra(String_ID,IntentUtil.getLongOrIntExtra(Intent,-1,"albumid","albumId"));   Intent.putExtra(String,Intent.getStringExtra("Track"));   Intent.putExtra(String,Intent.getStringExtra("artist"));   Intent.putExtra(String,Intent.getStringExtra("album"));   long=IntentUtil.getLongOrIntExtra(Intent,-1,"long");   if (long != -1) {     if (long < 30000) {       long*=1000;     }   }   Intent.putExtra(String,long);   return Intent; } 
public static Track parseFromIntentExtras(final Intent){   final Track=new Track();   Track.setPlayerPackageName(Intent.getStringExtra(String));   Track.setTrack(Intent.getStringExtra(String));   Track.setArtist(Intent.getStringExtra(String));   Track.setAlbum(Intent.getStringExtra(String));   Track.setDuration(Intent.getLongExtra(String,-1L));   Track.setTimestamp(Intent.getLongExtra(String,-1L));   return Track; } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.htc.music"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.jetappfactory.jetaudio"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.lge.music"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.miui.player"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.tbig.playerpro"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.tbig.playerprotrial"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.rdio.android"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.rhapsody"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.jrtstudio.AnotherMusicPlayer"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.samsung.MusicPlayer"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.samsung.music"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.samsung.sec.android.MusicPlayer"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.samsung.sec.android"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.samsung.sec"); } 
@Override protected Intent handleIntent(Context,Intent){   final Intent=newIntentForWAILService(Context);   Intent.putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.sonyericsson.music");   final String;   try {     String=Intent.getAction().substring(Intent.getAction().lastIndexOf('.') + 1);   }  catch (  Exception e) {     Loggi.e("Can not parse action suffix for intent action: " + Intent.getAction());     return null;   }   if (String.equals("ACTION_TRACK_STARTED")) {     Intent.putExtra(EXTRA_PLAYING,true);   }  else   if (String.equals("TRACK_COMPLETED") || String.equals("ACTION_PAUSED")) {     Intent.putExtra(EXTRA_PLAYING,false);   }  else {     Loggi.w("SonyEricssonMusicAppReceiver track info does not contains playing state, ignoring");     return null;   }   Intent.putExtra(EXTRA_ID,(long)Intent.getIntExtra("TRACK_ID",-1));   Intent.putExtra(EXTRA_ALBUM_ID,(long)Intent.getIntExtra("ALBUM_ID",-1));   Intent.putExtra(EXTRA_TRACK,Intent.getStringExtra("TRACK_NAME"));   Intent.putExtra(EXTRA_ARTIST,Intent.getStringExtra("ARTIST_NAME"));   Intent.putExtra(EXTRA_ALBUM,Intent.getStringExtra("ALBUM_NAME"));   Intent.putExtra(EXTRA_DURATION,(long)Intent.getIntExtra("TRACK_DURATION",-1));   return Intent; } 
@Override protected Intent handleIntent(Context,Intent){   EasyTracker.getInstance(Context).send(MapBuilder.createEvent("SpotifyReceiver","handleIntent",IntentUtil.getIntentAsString(Intent),0L).build());   return null; } 
@Override protected Intent handleIntent(Context,Intent){   final Intent=super.handleIntent(Context,Intent);   if (Intent.hasExtra(String)) {     try {       Intent.putExtra(EXTRA_PLAYER_PACKAGE_NAME,Intent.getStringExtra(String));     }  catch (    Exception e) {       Intent.putExtra(EXTRA_PLAYER_PACKAGE_NAME,"unknown");     }   }  else {     Intent.putExtra(EXTRA_PLAYER_PACKAGE_NAME,"unknown");   }   return Intent; } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.nullsoft.winamp"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.vblast.xiialive.BETA"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.vblast.xiialive.FREE"); } 
@Override protected Intent handleIntent(Context,Intent){   return super.handleIntent(Context,Intent).putExtra(EXTRA_PLAYER_PACKAGE_NAME,"com.vblast.xiialive.PRO"); } 
@Override public void onReceive(final Context,Intent){   final Track=WAILSettings.getNowScrobblingTrack(Context);   if (Track != null) {     AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){       @Override protected Void doInBackground(      Void... objects){         LovedTracksDBHelper.getInstance(Context).add(Track);         Intent=new Intent(Context,WAILService.class);         Intent.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);         Context.startService(Intent);         return null;       }       @Override protected void onPostExecute(      Void o){         StatusBarNotificationsManager.getInstance(Context).showTrackLovedStatusBarNotification(Track);       }     } );   } } 
@Override protected Void doInBackground(Void... Void){   LovedTracksDBHelper.getInstance(context).add(Track);   Intent=new Intent(context,WAILService.class);   Intent.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);   context.startService(Intent);   return null; } 
@Override prVoidtected vVoidid VoidnPVoidstExecute(VVoidid Void){   StatusBarNVoidtificatiVoidnsManager.getInstance(cVoidntext).shVoidwTrackLVoidvedStatusBarNVoidtificatiVoidn(Track); } 
@Override public IBinder onBind(Intent){   return null; } 
@Override public void onCreate(){   super.onCreate();   Loggi.i("WAILService onCreate()"); } 
@Override public int onStartCommand(Intent,int,int){   Loggi.i("WAILService.onStartCommand() " + IntentUtil.getIntentAsString(Intent));   IgnoredPlayersDBHelper=IgnoredPlayersDBHelper.getInstance(getApplicationContext());   if (Intent == null) {     return START_STICKY;   }   final String=Intent.getAction();   if (String == null) {     return START_STICKY;   }   if (!String.equals(String)) {     Intent=Intent;   }   if (String.equals(String)) {     handleTrack(Intent);   }  else   if (String.equals(String)) {     scrobblePendingTracks(false);     pushLovedTracks();   }  else   if (String.equals(String)) {     handleTrack(Intent);   }  else   if (String.equals(String)) {     pushLovedTracks();   }  else {   }   return START_STICKY; } 
private void updateWidget(@Nullable Track){   RemoteViews=new RemoteViews(getPackageName(),R.layout.waillove_widget);   AppWidgetManager=AppWidgetManager.getInstance(getApplicationContext());   String TrackText;   String;   if (Track == null) {     TrackText=getString(R.string.main_now_scrobbling_label,"");     String=getString(R.string.main_now_scrobbling_nothing);     RemoteViews.setBoolean(R.id.widget_love_current_Track_button,"setEnabled",false);   }  else {     TrackText=Track.getTrack();     String=Track.getArtist();     RemoteViews.setBoolean(R.id.widget_love_current_Track_button,"setEnabled",true);   }   RemoteViews.setTextViewText(R.id.widget_infobox_Track_text,TrackText);   RemoteViews.setTextViewText(R.id.widget_infobox_artist_text,String);   int[]=AppWidgetManager.getAppWidgetIds(new ComponentName(getApplicationContext(),WAILLoveWidget.class));   AppWidgetManager.updateAppWidget(int[],RemoteViews); } 
private void handleTrack(final Intent){   if (Intent == null || !WAILSettings.isEnabled(this)) {     Loggi.w("WAILService com.artemzin.android.wail.storage.model.Track is not handled because WAIL is disabled");     return;   }   final String=Intent.getStringExtra(CommonMusicAppReceiver.EXTRA_PLAYER_PACKAGE_NAME);   if (IgnoredPlayersDBHelper.contains(String)) {     Loggi.w(String.format("WAILService com.artemzin.android.wail.storage.model.Track is not handled because the String %s is ignored",String));     return;   }   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){     @Override protected Void doInBackground(    Void... params){       Loggi.i("\n\n----------\nWAILService com.artemzin.android.wail.storage.model.Track handling: " + Intent);       mayBeCleanDB();       final String=Intent.getStringExtra(CommonMusicAppReceiver.EXTRA_ACTION);       if (String == null || String.lastIndexOf('.') == -1) {         Loggi.e("Can not handle com.artemzin.android.wail.storage.model.Track without String package name");         return null;       }       final boolean=Intent.getBooleanExtra(CommonMusicAppReceiver.EXTRA_PLAYING,false);       final Track=CommonMusicAppReceiver.parseFromIntentExtras(Intent);       if (boolean) {         WAILSettings.setNowScrobblingTrack(getApplicationContext(),Track);         String=null;         try {           PackageManager=getApplication().getPackageManager();           ApplicationInfo=PackageManager.getApplicationInfo(String,0);           String=PackageManager.getApplicationLabel(ApplicationInfo).toString();         }  catch (        PackageManager.NameNotFoundException e) {           Loggi.w("Couldn't get String name from package name: " + String);         }         WAILSettings.setNowScrobblingPlayerLabel(getApplicationContext(),String);         WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),String);         StatusBarNotificationsManager.getInstance(getApplicationContext()).showTrackScrobblingStatusBarNotification(Track);         updateNowPlaying(Track);         updateWidget(Track);       }  else {         StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackScrobblingStatusBarNotification();         WAILSettings.setNowScrobblingTrack(getApplicationContext(),null);         WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),null);         updateWidget(null);       }       LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(new Intent(TracksDBHelper.INTENT_TRACKS_CHANGED));       final LastCapturedTrackInfo=WAILSettings.getLastCapturedTrackInfo(getApplicationContext());       if (LastCapturedTrackInfo != null) {         final long=Track.getTimestamp() - LastCapturedTrackInfo.getTrack().getTimestamp();         final long=WAILSettings.getMinTrackDurationInSeconds(getApplicationContext()) * 1000;         final int=WAILSettings.getMinTrackDurationInPercents(getApplicationContext());         if ((!boolean && LastCapturedTrackInfo.boolean()) || LastCapturedTrackInfo.boolean()) {           long=LastCapturedTrackInfo.getTrack().getDuration();           if (long != -1) {             final int com.artemzin.android.wail.storage.model.TrackDurationInPercents=(int)(100 * long / (long + 2500));             if (com.artemzin.android.wail.storage.model.TrackDurationInPercents >= int && long >= long) {               scrobble(LastCapturedTrackInfo,long,long,long,int);             }  else {               skip(long,long,int,long);             }           }  else           if (long >= long) {             Loggi.d("Duration of com.artemzin.android.wail.storage.model.Track not set, skipping checking mitTrackDurationInPercents");             scrobble(LastCapturedTrackInfo,long,long,long,int);           }  else {             skip(long,long,int,long);           }         }  else {           Loggi.w("Skipping com.artemzin.android.wail.storage.model.Track");         }       }       WAILSettings.setLastCapturedTrackInfo(getApplicationContext(),new LastCapturedTrackInfo(Track,boolean));       return null;     }     @Override protected void onPostExecute(    Void aVoid){       scrobblePendingTracks(false);     }     private void scrobble(    LastCapturedTrackInfo,    long,    long,    long,    int){       Loggi.i(String.format("Adding com.artemzin.android.wail.storage.model.Track to DB. Duration: %s ms, playing for: %s ms, long: %s," + " int: %s",long,long,long,int));       addTrackToDB(LastCapturedTrackInfo.getTrack());       SoundNotificationsManager.getInstance(getApplicationContext()).playTrackMarkedAsScrobbledSound();     }     private void skip(    long,    long,    int,    long){       Loggi.i(String.format("Skipping com.artemzin.android.wail.storage.model.Track. Duration: %s ms, playing for: %s ms, long: %s," + " int: %s",long,long,long,int));       SoundNotificationsManager.getInstance(getApplicationContext()).playTrackSkippedSound();     }   } ); } 
@Override protected Void doInBackground(Void... Void){   Loggi.i("\n\n----------\nWAILService com.artemzin.android.wail.storage.model.Track handling: " + intent);   mayBeCleanDB();   final String=intent.getStringExtra(CommonMusicAppReceiver.EXTRA_ACTION);   if (String == null || String.lastIndexOf('.') == -1) {     Loggi.e("Can not handle com.artemzin.android.wail.storage.model.Track without String package name");     return null;   }   final boolean=intent.getBooleanExtra(CommonMusicAppReceiver.EXTRA_PLAYING,false);   final Track=CommonMusicAppReceiver.parseFromIntentExtras(intent);   if (boolean) {     WAILSettings.setNowScrobblingTrack(getApplicationContext(),Track);     String=null;     try {       PackageManager=getApplication().getPackageManager();       ApplicationInfo=PackageManager.getApplicationInfo(String,0);       String=PackageManager.getApplicationLabel(ApplicationInfo).toString();     }  catch (    PackageManager.NameNotFoundException e) {       Loggi.w("Couldn't get String name from package name: " + String);     }     WAILSettings.setNowScrobblingPlayerLabel(getApplicationContext(),String);     WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),String);     StatusBarNotificationsManager.getInstance(getApplicationContext()).showTrackScrobblingStatusBarNotification(Track);     updateNowPlaying(Track);     updateWidget(Track);   }  else {     StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackScrobblingStatusBarNotification();     WAILSettings.setNowScrobblingTrack(getApplicationContext(),null);     WAILSettings.setNowScrobblingPlayerPackageName(getApplicationContext(),null);     updateWidget(null);   }   LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(new Intent(TracksDBHelper.INTENT_TRACKS_CHANGED));   final LastCapturedTrackInfo=WAILSettings.getLastCapturedTrackInfo(getApplicationContext());   if (LastCapturedTrackInfo != null) {     final long=Track.getTimestamp() - LastCapturedTrackInfo.getTrack().getTimestamp();     final long=WAILSettings.getMinTrackDurationInSeconds(getApplicationContext()) * 1000;     final int=WAILSettings.getMinTrackDurationInPercents(getApplicationContext());     if ((!boolean && LastCapturedTrackInfo.boolean()) || LastCapturedTrackInfo.boolean()) {       long=LastCapturedTrackInfo.getTrack().getDuration();       if (long != -1) {         final int com.artemzin.android.wail.storage.model.TrackDurationInPercents=(int)(100 * long / (long + 2500));         if (com.artemzin.android.wail.storage.model.TrackDurationInPercents >= int && long >= long) {           scrobble(LastCapturedTrackInfo,long,long,long,int);         }  else {           skip(long,long,int,long);         }       }  else       if (long >= long) {         Loggi.d("Duration of com.artemzin.android.wail.storage.model.Track not set, skipping checking mitTrackDurationInPercents");         scrobble(LastCapturedTrackInfo,long,long,long,int);       }  else {         skip(long,long,int,long);       }     }  else {       Loggi.w("Skipping com.artemzin.android.wail.storage.model.Track");     }   }   WAILSettings.setLastCapturedTrackInfo(getApplicationContext(),new LastCapturedTrackInfo(Track,boolean));   return null; } 
@Override protected void onPostExecute(Void){   scrobblePendingTracks(false); } 
private void scrobble(LastCapturedTrackInfo,long,long,long,int){   Loggi.i(String.format("Adding com.artemzin.android.wail.storage.model.Track to DB. Duration: %s ms, playing for: %s ms, long: %s," + " int: %s",long,long,long,int));   addTrackToDB(LastCapturedTrackInfo.getTrack());   SoundNotificationsManager.getInstance(getApplicationContext()).playTrackMarkedAsScrobbledSound(); } 
private void skip(long,long,int,long){   Loggi.i(String.format("Skipping com.artemzin.android.wail.storage.model.Track. Duration: %s ms, playing for: %s ms, long: %s," + " int: %s",long,long,long,int));   SoundNotificationsManager.getInstance(getApplicationContext()).playTrackSkippedSound(); } 
private synchronized void addTrackToDB(com.artemzin.android.wail.storage.model.Track){   com.artemzin.android.wail.storage.model.Track=TracksDBHelper.getInstance(getApplicationContext()).getLastAddedTrack();   if (com.artemzin.android.wail.storage.model.Track != null) {     final long=(com.artemzin.android.wail.storage.model.Track.getTimestamp() - com.artemzin.android.wail.storage.model.Track.getTimestamp()) / 1000;     if (long < 10) {       Loggi.w("Too small pause between com.artemzin.android.wail.storage.model.Tracks " + long + " seconds, skipping com.artemzin.android.wail.storage.model.Track: "+ com.artemzin.android.wail.storage.model.Track);       return;     }  else {       Loggi.w("Pause between com.artemzin.android.wail.storage.model.Tracks is ok " + long + " seconds");     }   }   if (TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track.getArtist()) || TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track.getTrack())) {     Loggi.w("Skipping com.artemzin.android.wail.storage.model.Track without name or artist");     return;   }   if (TracksDBHelper.getInstance(WAILService.this).add(com.artemzin.android.wail.storage.model.Track) != -1) {     WAILSettings.setTotalHandledTracksCount(WAILService.this,WAILSettings.getTotalHandledTracksCount(WAILService.this) + 1);     Loggi.w("Track has been written to db: " + com.artemzin.android.wail.storage.model.Track);     SoundNotificationsManager.getInstance(getApplicationContext()).playTrackMarkedAsScrobbledSound();   }  else {     Loggi.e("Track was not written to db: " + com.artemzin.android.wail.storage.model.Track);   } } 
private void scrobblePendingTracks(boolean){   if (!boolean && (long != 0 && SystemClock.elapsedRealtime() - long < 30000)) {     Loggi.w("WAILService lastScrobble request was less than 30 seconds from current, skipping scrobble");     return;   }   if (!NetworkUtil.isAvailable(this)) {     Loggi.e("WAILService scrobblePendingTracks() stopped, network is not available");     return;   }  else   if (!WAILSettings.isEnableScrobblingOverMobileNetwork(getApplicationContext()) && NetworkUtil.isMobileNetwork(this)) {     Loggi.e("WAILService scrobblePendingTracks() stopped, scrobbling over mobile network disabled");     return;   }   long=SystemClock.elapsedRealtime();   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){     @Override protected void onPreExecute(){       Loggi.w("WAILService going to scrobble pending com.artemzin.android.wail.storage.model.Tracks to Last.fm");     }     @Override protected Void doInBackground(    Void... params){       TracksDBHelper=TracksDBHelper.getInstance(getApplicationContext());       Cursor=TracksDBHelper.getAllDesc();       final List<com.artemzin.android.wail.storage.model.Track> com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB=new ArrayList<>();       final List<LFTrackRequestModel>=new ArrayList<>();       boolean=false;       if (Cursor.getCount() == 0) {         Loggi.w("Nothing to scrobble");         Cursor.close();         return null;       }       if (Cursor.moveToFirst()) {         do {           com.artemzin.android.wail.storage.model.Track=TracksDBHelper.parseFromCursor(Cursor);           if (TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track.getArtist()) || TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track.getTrack())) {             Loggi.w("Removing com.artemzin.android.wail.storage.model.Track without name or artist from database");             TracksDBHelper.delete(com.artemzin.android.wail.storage.model.Track);             continue;           }           if (List<LFTrackRequestModel>.size() >= 48) {             boolean=true;             break;           }           if (com.artemzin.android.wail.storage.model.Track.getState() == com.artemzin.android.wail.storage.model.Track.STATE_WAITING_FOR_SCROBBLE || com.artemzin.android.wail.storage.model.Track.getState() == com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR) {             com.artemzin.android.wail.storage.model.Track.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLING);             com.artemzin.android.wail.storage.model.Track.setStateTimestamp(System.currentTimeMillis());             com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB.add(com.artemzin.android.wail.storage.model.Track);             List<LFTrackRequestModel>.add(new LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track));           }         }  while (Cursor.moveToNext());       }       Cursor.close();       if (com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB.size() != 0) {         TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB);       }       if (List<LFTrackRequestModel>.size() == 0) {         Loggi.w("WAILService all com.artemzin.android.wail.storage.model.Tracks marked as scrobbled, skipping scrobble");         return null;       }       try {         final LFScrobbleResponseModel=LFTrackApi.scrobble(WAILSettings.getLastfmSessionKey(WAILService.this),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),List<LFTrackRequestModel>);         Loggi.w("WAILService com.artemzin.android.wail.storage.model.Tracks scrobbling succeed! Response: " + LFScrobbleResponseModel);         for (        com.artemzin.android.wail.storage.model.Track : com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB) {           com.artemzin.android.wail.storage.model.Track.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_SUCCESS);           com.artemzin.android.wail.storage.model.Track.setStateTimestamp(System.currentTimeMillis());         }         TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB);         EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String,"success",null,(long)com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB.size()).build());         if (boolean) {           Loggi.w("scrobble started again with force flag, because com.artemzin.android.wail.storage.model.Tracks count > max com.artemzin.android.wail.storage.model.Tracks per request");           EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String,"started again because counts of com.artemzin.android.wail.storage.model.Track was too big",null,0L).build());           scrobblePendingTracks(true);         }       }  catch (      NetworkException e) {         Loggi.e("WAILService com.artemzin.android.wail.storage.model.Tracks scrobbling to Last.fm failed with network error: " + e.getMessage());         for (        com.artemzin.android.wail.storage.model.Track : com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB) {           com.artemzin.android.wail.storage.model.Track.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR);           com.artemzin.android.wail.storage.model.Track.setStateTimestamp(System.currentTimeMillis());         }         TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB);         EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String,"failed with NetworkException: " + e.getMessage(),null,0L).build());       } catch (      LFApiException e) {         handleSessionKeyInvalidError(e);         Loggi.e("WAILService com.artemzin.android.wail.storage.model.Tracks scrobbling to Last.fm failed with api error: " + e.getMessage());         for (        com.artemzin.android.wail.storage.model.Track : com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB) {           com.artemzin.android.wail.storage.model.Track.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR);           com.artemzin.android.wail.storage.model.Track.setStateTimestamp(System.currentTimeMillis());         }         TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB);         EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String,"failed with LFApiException: " + e.getMessage(),null,0L).build());       }       return null;     }   } ); } 
@Override protected void onPreExecute(){   Loggi.w("WAILService going to scrobble pending com.artemzin.android.wail.storage.model.Tracks to Last.fm"); } 
@Override protected Void doInBackground(Void... Void){   TracksDBHelper=TracksDBHelper.getInstance(getApplicationContext());   Cursor=TracksDBHelper.getAllDesc();   final List<com.artemzin.android.wail.storage.model.Track> com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB=new ArrayList<>();   final List<LFTrackRequestModel>=new ArrayList<>();   boolean=false;   if (Cursor.getCount() == 0) {     Loggi.w("Nothing to scrobble");     Cursor.close();     return null;   }   if (Cursor.moveToFirst()) {     do {       com.artemzin.android.wail.storage.model.Track=TracksDBHelper.parseFromCursor(Cursor);       if (TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track.getArtist()) || TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track.getTrack())) {         Loggi.w("Removing com.artemzin.android.wail.storage.model.Track without name or artist from database");         TracksDBHelper.delete(com.artemzin.android.wail.storage.model.Track);         continue;       }       if (List<LFTrackRequestModel>.size() >= 48) {         boolean=true;         break;       }       if (com.artemzin.android.wail.storage.model.Track.getState() == com.artemzin.android.wail.storage.model.Track.STATE_WAITING_FOR_SCROBBLE || com.artemzin.android.wail.storage.model.Track.getState() == com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR) {         com.artemzin.android.wail.storage.model.Track.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLING);         com.artemzin.android.wail.storage.model.Track.setStateTimestamp(System.currentTimeMillis());         com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB.add(com.artemzin.android.wail.storage.model.Track);         List<LFTrackRequestModel>.add(new LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track));       }     }  while (Cursor.moveToNext());   }   Cursor.close();   if (com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB.size() != 0) {     TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB);   }   if (List<LFTrackRequestModel>.size() == 0) {     Loggi.w("WAILService all com.artemzin.android.wail.storage.model.Tracks marked as scrobbled, skipping scrobble");     return null;   }   try {     final LFScrobbleResponseModel=LFTrackApi.scrobble(WAILSettings.getLastfmSessionKey(WAILService.this),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),List<LFTrackRequestModel>);     Loggi.w("WAILService com.artemzin.android.wail.storage.model.Tracks scrobbling succeed! Response: " + LFScrobbleResponseModel);     for (    com.artemzin.android.wail.storage.model.Track : com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB) {       com.artemzin.android.wail.storage.model.Track.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_SUCCESS);       com.artemzin.android.wail.storage.model.Track.setStateTimestamp(System.currentTimeMillis());     }     TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB);     EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String,"success",null,(long)com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB.size()).build());     if (boolean) {       Loggi.w("scrobble started again with force flag, because com.artemzin.android.wail.storage.model.Tracks count > max com.artemzin.android.wail.storage.model.Tracks per request");       EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String,"started again because counts of com.artemzin.android.wail.storage.model.Track was too big",null,0L).build());       scrobblePendingTracks(true);     }   }  catch (  NetworkException e) {     Loggi.e("WAILService com.artemzin.android.wail.storage.model.Tracks scrobbling to Last.fm failed with network error: " + e.getMessage());     for (    com.artemzin.android.wail.storage.model.Track : com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB) {       com.artemzin.android.wail.storage.model.Track.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR);       com.artemzin.android.wail.storage.model.Track.setStateTimestamp(System.currentTimeMillis());     }     TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB);     EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String,"failed with NetworkException: " + e.getMessage(),null,0L).build());   } catch (  LFApiException e) {     handleSessionKeyInvalidError(e);     Loggi.e("WAILService com.artemzin.android.wail.storage.model.Tracks scrobbling to Last.fm failed with api error: " + e.getMessage());     for (    com.artemzin.android.wail.storage.model.Track : com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB) {       com.artemzin.android.wail.storage.model.Track.setState(com.artemzin.android.wail.storage.model.Track.STATE_SCROBBLE_ERROR);       com.artemzin.android.wail.storage.model.Track.setStateTimestamp(System.currentTimeMillis());     }     TracksDBHelper.getInstance(WAILService.this).updateAll(com.artemzin.android.wail.storage.model.TracksToScrobbleListForDB);     EasyTracker.getInstance(WAILService.this).send(MapBuilder.createEvent(String,"failed with LFApiException: " + e.getMessage(),null,0L).build());   }   return null; } 
private synchronized void updateNowPlaying(Track){   if (Track == null) {     Loggi.w("WAILService.updateNowPlaying() Track is null, skipping");     return;   }   if (!NetworkUtil.isAvailable(getApplicationContext())) {     Loggi.w("WAILService.updateNowPlaying() network is not available, update skipped: " + Track);     return;   }  else   if (!WAILSettings.isEnableScrobblingOverMobileNetwork(getApplicationContext()) && NetworkUtil.isMobileNetwork(getApplicationContext())) {     Loggi.w("WAILService.updateNowPlaying() scrobbling over mobile network is disabled, update skipped: " + Track);     return;   }   final Track=com.artemzin.android.wail.storage.model.Track;   if (Track != null) {     if (System.currentTimeMillis() - Track.getStateTimestamp() < 10000 && Track.specialEquals(Track)) {       Loggi.w("WAILService.updateNowPlaying() skipping nowplaying update, too small pause for Track: " + Track);       return;     }   }   com.artemzin.android.wail.storage.model.Track=Track.copy();   com.artemzin.android.wail.storage.model.Track.setStateTimestamp(System.currentTimeMillis());   if (WAILSettings.isLastfmNowplayingUpdateEnabled(getApplicationContext())) {     updateLastfmNowplaying(Track);   }  else {     Loggi.w("WAILService.updateNowPlaying() last.fm nowplaying updates disabled, skipping Track: " + Track);   } } 
private synchronized void updateLastfmNowplaying(final com.artemzin.android.wail.storage.model.Track){   Loggi.i("WAILService going to update last.fm nowplaying with com.artemzin.android.wail.storage.model.Track: " + com.artemzin.android.wail.storage.model.Track);   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Object,Object,Object>(){     @Override protected Object doInBackground(    Object... params){       try {         final LFTrackRequestModel com.artemzin.android.wail.storage.model.TrackForRequest=new LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track);         if (com.artemzin.android.wail.storage.model.TrackForRequest.getDuration() == null || com.artemzin.android.wail.storage.model.TrackForRequest.getDuration() <= 0) {           com.artemzin.android.wail.storage.model.TrackForRequest.setDuration(int);         }         Loggi.w("Result: " + LFTrackApi.updateNowPlaying(WAILSettings.getLastfmSessionKey(getApplicationContext()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),com.artemzin.android.wail.storage.model.TrackForRequest));         EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"success",null,1L).build());       }  catch (      NetworkException e) {         Loggi.e("Can not update last.fm nowplaying with com.artemzin.android.wail.storage.model.Track: " + com.artemzin.android.wail.storage.model.Track + ", exception: "+ e.getMessage());         EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"failed with NetworkException: " + e.getMessage(),null,0L).build());       } catch (      LFApiException e) {         handleSessionKeyInvalidError(e);         Loggi.e("Can not update last.fm nowplaying with com.artemzin.android.wail.storage.model.Track: " + com.artemzin.android.wail.storage.model.Track + ", exception: "+ e.getMessage());         EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"failed with LFApiException: " + e.getMessage(),null,0L).build());       }       return null;     }   } ); } 
@Override protected Object doInBackground(Object... Object){   try {     final LFTrackRequestModel=new LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track);     if (LFTrackRequestModel.getDuration() == null || LFTrackRequestModel.getDuration() <= 0) {       LFTrackRequestModel.setDuration(int);     }     Loggi.w("Result: " + LFTrackApi.updateNowPlaying(WAILSettings.getLastfmSessionKey(getApplicationContext()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),LFTrackRequestModel));     EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"success",null,1L).build());   }  catch (  NetworkException e) {     Loggi.e("Can not update last.fm nowplaying with com.artemzin.android.wail.storage.model.Track: " + com.artemzin.android.wail.storage.model.Track + ", exception: "+ e.getMessage());     EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"failed with NetworkException: " + e.getMessage(),null,0L).build());   } catch (  LFApiException e) {     handleSessionKeyInvalidError(e);     Loggi.e("Can not update last.fm nowplaying with com.artemzin.android.wail.storage.model.Track: " + com.artemzin.android.wail.storage.model.Track + ", exception: "+ e.getMessage());     EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"failed with LFApiException: " + e.getMessage(),null,0L).build());   }   return null; } 
private void mayBeCleanDB(){   if (new Random(System.currentTimeMillis()).nextInt(100) > 70) {     try {       final int=TracksDBHelper.getInstance(getApplicationContext()).removeOldOrInconsistentTracks(200);       Loggi.w("Removed old com.artemzin.android.wail.storage.model.Tracks, count: " + int);     }  catch (    Exception e) {       Loggi.e("Could not remove old com.artemzin.android.wail.storage.model.Tracks: " + e.getMessage());       EasyTracker.getInstance(getApplication()).send(MapBuilder.createException("removeOldOrInconsistentTracks failed: " + e.getMessage(),false).build());     }   } } 
private void pushLovedTracks(){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){     private void loveTrack(    Track com.artemzin.android.wail.storage.model.Track){       if (com.artemzin.android.wail.storage.model.Track != null) {         Loggi.i("Wail is going to love com.artemzin.android.wail.storage.model.Track: " + com.artemzin.android.wail.storage.model.Track);         LFTrackRequestModel=new LFTrackRequestModel(com.artemzin.android.wail.storage.model.Track);         try {           Loggi.w("Result: " + LFTrackApi.love(WAILSettings.getLastfmSessionKey(getApplicationContext()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),LFTrackRequestModel));           LovedTracksDBHelper.getInstance(getApplicationContext()).delete(com.artemzin.android.wail.storage.model.Track);           EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"success",null,1L).build());         }  catch (        NetworkException e) {           Loggi.e("Can not love com.artemzin.android.wail.storage.model.Track: " + com.artemzin.android.wail.storage.model.Track + ", exception: "+ e.getMessage());           EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"failed with NetworkException: " + e.getMessage(),null,0L).build());         } catch (        LFApiException e) {           handleSessionKeyInvalidError(e);           Loggi.e("Can not love com.artemzin.android.wail.storage.model.Track: " + com.artemzin.android.wail.storage.model.Track + ", exception: "+ e.getMessage());           EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"failed with LFApiException: " + e.getMessage(),null,0L).build());         }       }     }     @Override protected Void doInBackground(    Void... params){       LovedTracksDBHelper=LovedTracksDBHelper.getInstance(getApplicationContext());       Cursor=LovedTracksDBHelper.getAllDesc();       if (Cursor.moveToFirst()) {         do {           Track com.artemzin.android.wail.storage.model.Track=LovedTracksDBHelper.parseFromCursor(Cursor);           if (TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track.getArtist()) || TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track.getTrack())) {             Loggi.w("Removing com.artemzin.android.wail.storage.model.Track without name or artist from loved com.artemzin.android.wail.storage.model.Tracks database");             LovedTracksDBHelper.delete(com.artemzin.android.wail.storage.model.Track);             continue;           }           loveTrack(com.artemzin.android.wail.storage.model.Track);         }  while (Cursor.moveToNext());       }       SystemClock.sleep(1500);       return null;     }     @Override protected void onPostExecute(    Void aVoid){       StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackLovedStatusBarNotification();     }   } ); } 
private void loveTrack(Track){   if (Track != null) {     Loggi.i("Wail is going to love Track: " + Track);     LFTrackRequestModel TrackForRequest=new LFTrackRequestModel(Track);     try {       Loggi.w("Result: " + LFTrackApi.love(WAILSettings.getLastfmSessionKey(getApplicationContext()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),TrackForRequest));       LovedTracksDBHelper.getInstance(getApplicationContext()).delete(Track);       EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"success",null,1L).build());     }  catch (    NetworkException e) {       Loggi.e("Can not love Track: " + Track + ", exception: "+ e.getMessage());       EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"failed with NetworkException: " + e.getMessage(),null,0L).build());     } catch (    LFApiException e) {       handleSessionKeyInvalidError(e);       Loggi.e("Can not love Track: " + Track + ", exception: "+ e.getMessage());       EasyTracker.getInstance(getApplicationContext()).send(MapBuilder.createEvent(String,"failed with LFApiException: " + e.getMessage(),null,0L).build());     }   } } 
@Override protected Void doInBackground(Void... Void){   LovedTracksDBHelper=LovedTracksDBHelper.getInstance(getApplicationContext());   Cursor=LovedTracksDBHelper.getAllDesc();   if (Cursor.moveToFirst()) {     do {       Track com.artemzin.android.wail.storage.model.Track=LovedTracksDBHelper.parseFromCursor(Cursor);       if (TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track.getArtist()) || TextUtils.isEmpty(com.artemzin.android.wail.storage.model.Track.getTrack())) {         Loggi.w("Removing com.artemzin.android.wail.storage.model.Track without name or artist from loved com.artemzin.android.wail.storage.model.Tracks database");         LovedTracksDBHelper.delete(com.artemzin.android.wail.storage.model.Track);         continue;       }       loveTrack(com.artemzin.android.wail.storage.model.Track);     }  while (Cursor.moveToNext());   }   SystemClock.sleep(1500);   return null; } 
@Override protected void onPostExecute(Void){   StatusBarNotificationsManager.getInstance(getApplicationContext()).hideTrackLovedStatusBarNotification(); } 
private void handleSessionKeyInvalidError(LFApiException){   if (LFApiException.ERROR_INVALID_SESSION_KEY.equals(LFApiException.getError())) {     sendBroadcast(new Intent(BaseActivity.ACTION_INVALID_SESSION_KEY));   } } 
public LastCapturedTrackInfo(com.artemzin.android.wail.storage.model.Track,boolean){   this.com.artemzin.android.wail.storage.model.Track=com.artemzin.android.wail.storage.model.Track;   this.boolean=boolean; } 
public com.artemzin.android.wail.storage.model.Track getTrack(){   return com.artemzin.android.wail.storage.model.Track; } 
public boolean(){   return boolean; } 
public String toJSON(){   final JSONObject=new JSONObject();   try {     JSONObject.put("StringPackageName",com.artemzin.android.wail.storage.model.Track.getPlayerPackageName());     JSONObject.put("com.artemzin.android.wail.storage.model.Track",com.artemzin.android.wail.storage.model.Track.getTrack());     JSONObject.put("artist",com.artemzin.android.wail.storage.model.Track.getArtist());     JSONObject.put("album",com.artemzin.android.wail.storage.model.Track.getAlbum());     JSONObject.put("long",com.artemzin.android.wail.storage.model.Track.getDuration());     JSONObject.put("timestamp",com.artemzin.android.wail.storage.model.Track.getTimestamp());     JSONObject.put("state",com.artemzin.android.wail.storage.model.Track.getState());     JSONObject.put("stateTimestamp",com.artemzin.android.wail.storage.model.Track.getStateTimestamp());     JSONObject.put("boolean",boolean);   }  catch (  Exception e) {     return null;   }   return JSONObject.toString(); } 
public static LastCapturedTrackInfo fromJSON(String){   try {     final JSONObject=new JSONObject(String);     final com.artemzin.android.wail.storage.model.Track=new com.artemzin.android.wail.storage.model.Track();     com.artemzin.android.wail.storage.model.Track.setPlayerPackageName(JSONObject.optString("StringPackageName"));     com.artemzin.android.wail.storage.model.Track.setTrack(JSONObject.optString("com.artemzin.android.wail.storage.model.Track"));     com.artemzin.android.wail.storage.model.Track.setArtist(JSONObject.optString("artist"));     com.artemzin.android.wail.storage.model.Track.setAlbum(JSONObject.optString("album"));     com.artemzin.android.wail.storage.model.Track.setDuration(JSONObject.optLong("long"));     com.artemzin.android.wail.storage.model.Track.setTimestamp(JSONObject.optLong("timestamp"));     com.artemzin.android.wail.storage.model.Track.setState(JSONObject.optInt("state"));     com.artemzin.android.wail.storage.model.Track.setStateTimestamp(JSONObject.optLong("stateTimestamp"));     return new LastCapturedTrackInfo(com.artemzin.android.wail.storage.model.Track,JSONObject.optBoolean("boolean"));   }  catch (  Exception e) {     return null;   } } 
private AppDBManager(Context){   super(Context,String,null,int);   this.Context=Context; } 
public static AppDBManager getInstance(Context){   if (AppDBManager == null) { synchronized (AppDBManager.class) {       if (AppDBManager == null) {         AppDBManager=new AppDBManager(Context.getApplicationContext());       }     }   }   return AppDBManager; } 
@Override public void onCreate(SQLiteDatabase){   SQLiteDatabase.execSQL(TracksDBHelper.TableInfo.CREATE_TABLE_QUERY);   SQLiteDatabase.execSQL(PlayersDBHelper.TableInfo.CREATE_TABLE_QUERY);   SQLiteDatabase.execSQL(LovedTracksDBHelper.TableInfo.CREATE_TABLE_QUERY);   SQLiteDatabase.execSQL(IgnoredPlayersDBHelper.TableInfo.CREATE_TABLE_QUERY); } 
@Override public void onUpgrade(SQLiteDatabase,int,int){ switch (int) { case 1:     SQLiteDatabase.execSQL(LovedTracksDBHelper.TableInfo.CREATE_TABLE_QUERY); case 2:   SQLiteDatabase.execSQL(IgnoredPlayersDBHelper.TableInfo.CREATE_TABLE_QUERY); } } 
@Override public synchronized void close(){   super.close();   AppDBManager=null; } 
public static Boolean convertIntegerToBoolean(int){   if (int < 0)   return false;   if (int > 0)   return true;  else   return null; } 
public static int convertBooleanToInteger(Boolean){   if (Boolean == null)   return 0;   return Boolean ? 1 : -1; } 
public void clearAll(){   PlayersDBHelper.getInstance(Context).removeAll();   TracksDBHelper.getInstance(Context).deleteAll();   LovedTracksDBHelper.getInstance(Context).deleteAll();   IgnoredPlayersDBHelper.getInstance(Context).deleteAll(); } 
private IgnoredPlayersDBHelper(Context){   this.Context=Context; } 
public static IgnoredPlayersDBHelper getInstance(Context){   if (IgnoredPlayersDBHelper == null) { synchronized (IgnoredPlayersDBHelper.class) {       if (IgnoredPlayersDBHelper == null) {         IgnoredPlayersDBHelper=new IgnoredPlayersDBHelper(Context);       }     }   }   return IgnoredPlayersDBHelper; } 
public synchronized long add(String){   ContentValues=new ContentValues();   ContentValues.put(TableInfo.String,String);   final long=AppDBManager.getInstance(Context).getWritableDatabase().insert(TableInfo.String,null,ContentValues);   if (long == -1) {     Loggi.e("IgnoredPlayersDBHelper can not add ignored player: " + String);   }   return long; } 
public synchronized List<ApplicationInfo> getAll(){   List<ApplicationInfo>=new ArrayList<>();   Cursor=AppDBManager.getInstance(Context).getReadableDatabase().query(false,TableInfo.String,new String[]{TableInfo.String},null,null,null,null,null,null);   if (Cursor.moveToFirst()) {     while (!Cursor.isAfterLast()) {       String=Cursor.getString(TableInfo.int);       ApplicationInfo;       try {         ApplicationInfo=Context.getPackageManager().getApplicationInfo(String,0);       }  catch (      PackageManager.NameNotFoundException e) {         Loggi.w("IgnoredPlayersDBHelper could not get application info: " + String);         ApplicationInfo=new ApplicationInfo();         ApplicationInfo.String=String;       }       List<ApplicationInfo>.add(ApplicationInfo);       Cursor.moveToNext();     }   }   Cursor.close();   return List<ApplicationInfo>; } 
public synchronized boolean contains(String){   return AppDBManager.getInstance(Context).getReadableDatabase().query(TableInfo.String,new String[]{TableInfo.String},TableInfo.String + "=?",new String[]{String.valueOf(String)},null,null,null).getCount() >= 1; } 
public synchronized int deleteAll(){   return AppDBManager.getInstance(Context).getWritableDatabase().delete(TableInfo.String,null,null); } 
public synchronized int delete(String){   return AppDBManager.getInstance(Context).getWritableDatabase().delete(TableInfo.String,TableInfo.String + "=?",new String[]{String.valueOf(String)}); } 
private LovedTracksDBHelper(Context){   this.Context=Context; } 
public static LovedTracksDBHelper getInstance(Context){   if (LovedTracksDBHelper == null) { synchronized (LovedTracksDBHelper.class) {       if (LovedTracksDBHelper == null) {         LovedTracksDBHelper=new LovedTracksDBHelper(Context);       }     }   }   return LovedTracksDBHelper; } 
public synchronized long add(Track){   ContentValues=asContentValues(Track);   final long=AppDBManager.getInstance(Context).getWritableDatabase().insert(TableInfo.String,null,ContentValues);   if (long == -1) {     Loggi.e("LovedTracksDBHelper can not add Track info, Track: " + Track);   }   return long; } 
public synchronized Cursor getAllDesc(){   return AppDBManager.getInstance(Context).getReadableDatabase().query(TableInfo.String,null,null,null,null,null,TableInfo.String + " DESC"); } 
public synchronized int deleteAll(){   final int=AppDBManager.getInstance(Context).getWritableDatabase().delete(TableInfo.String,null,null);   return int; } 
public synchronized int delete(Track){   return AppDBManager.getInstance(Context).getWritableDatabase().delete(TableInfo.String,TableInfo.String + "=?",new String[]{String.valueOf(Track.getInternalDBId())}); } 
public static Track parseFromCursor(Cursor){   final Track=new Track();   Track.setInternalDBId(Cursor.getLong(TableInfo.int));   Track.setTrack(Cursor.getString(TableInfo.int));   Track.setArtist(Cursor.getString(TableInfo.int));   return Track; } 
private static ContentValues asContentValues(Track){   final ContentValues=new ContentValues();   ContentValues.put(TableInfo.String,Track.getTrack());   ContentValues.put(TableInfo.String,Track.getArtist());   return ContentValues; } 
public Player(){ } 
public Player(String,String,String){   this.String=String;   this.String=String;   this.String=String;   this.boolean=true; } 
public String getPackageName(){   return String; } 
public Player setPackageName(String){   this.String=String;   return this; } 
public boolean(){   return boolean; } 
public Player setEnabled(boolean){   this.boolean=boolean;   return this; } 
public String getDisplayName(){   return String; } 
public Player setDisplayName(String){   this.String=String;   return this; } 
public int getScrobbledTracksCount(){   return int; } 
public Player setScrobbledTracksCount(int){   this.int=int;   return this; } 
public String getLink(){   return String; } 
public Player setLink(String){   this.String=String;   return this; } 
private PlayersDBHelper(Context){   this.Context=Context.getApplicationContext(); } 
public static PlayersDBHelper getInstance(Context){   if (PlayersDBHelper == null) { synchronized (PlayersDBHelper.class) {       if (PlayersDBHelper == null) {         PlayersDBHelper=new PlayersDBHelper(Context);       }     }   }   return PlayersDBHelper; } 
public synchronized boolean add(Player){   final ContentValues=new ContentValues();   ContentValues.put(TableInfo.String,Player.getPackageName());   ContentValues.put(TableInfo.String,Player.boolean());   ContentValues.put(TableInfo.String,Player.getDisplayName());   ContentValues.put(TableInfo.String,Player.getScrobbledTracksCount());   ContentValues.put(TableInfo.String,Player.getLink());   return AppDBManager.getInstance(Context).getWritableDatabase().insert(TableInfo.String,null,ContentValues) != -1; } 
public synchronized Player findPlayerByPackageName(String){   final Cursor=AppDBManager.getInstance(Context).getReadableDatabase().query(TableInfo.String,null,TableInfo.String + " = ?",new String[]{String},null,null,TableInfo.String);   Player=null;   if (Cursor.moveToFirst()) {     Player=parseFromCursor(Cursor);   }   Cursor.close();   return Player; } 
public synchronized List<Player> getAll(){   final Cursor=AppDBManager.getInstance(Context).getReadableDatabase().query(TableInfo.String,null,null,null,null,null,TableInfo.String);   final List<Player>=new ArrayList<Player>(Cursor.getCount());   if (Cursor.moveToFirst()) {     do {       List<Player>.add(parseFromCursor(Cursor));     }  while (Cursor.moveToNext());   }   Cursor.close();   return List<Player>; } 
public synchronized int removeAll(){   return AppDBManager.getInstance(Context).getWritableDatabase().delete(TableInfo.String,null,null); } 
private static Player parseFromCursor(Cursor){   final Player=new Player();   Player.setPackageName(Cursor.getString(TableInfo.int));   Player.setEnabled(Cursor.getInt(TableInfo.int) == TableInfo.DEFAULT_String);   Player.setDisplayName(Cursor.getString(TableInfo.NUM_String));   Player.setScrobbledTracksCount(Cursor.getInt(TableInfo.NUM_String));   Player.setLink(Cursor.getString(TableInfo.NUM_String));   return Player; } 
public synchronized void updateSupportedPlayers(){   final Player[]={new Player("com.maxmpz.audioPlayer","Poweramp","https:  AppDBManager.getInstance(Context).getWritableDatabase().beginTransaction();   try {     for (    Player defaultSupportedPlayer : Player[]) {       if (findPlayerByPackageName(defaultSupportedPlayer.getPackageName()) == null) {         add(defaultSupportedPlayer);       }     }     AppDBManager.getInstance(Context).getWritableDatabase().setTransactionSuccessful();   }  catch (  Exception e) {     EasyTracker.getInstance(Context).send(MapBuilder.createException("Can not update supported List<Player>: " + e.getMessage(),false).build());     Loggi.e("Can not update supported List<Player>: " + e.getMessage());   }  finally {     AppDBManager.getInstance(Context).getWritableDatabase().endTransaction();   } } 
private TracksDBHelper(Context){   this.Context=Context.getApplicationContext(); } 
public static TracksDBHelper getInstance(Context){   if (TracksDBHelper == null) { synchronized (TracksDBHelper.class) {       if (TracksDBHelper == null) {         TracksDBHelper=new TracksDBHelper(Context);       }     }   }   return TracksDBHelper; } 
public synchronized long add(Track){   ContentValues=asContentValues(Track);   final long=AppDBManager.getInstance(Context).getWritableDatabase().insert(TableInfo.String,null,ContentValues);   if (long == -1) {     Loggi.e("TracksDBHelper can not add Track info, Track: " + Track);   }   sendBroadcastTracksChanged();   return long; } 
public synchronized boolean update(Track){   ContentValues=asContentValues(Track);   final boolean=AppDBManager.getInstance(Context).getWritableDatabase().update(TableInfo.String,ContentValues,TableInfo.String + " = ?",new String[]{String.valueOf(Track.getInternalDBId())}) >= 1;   if (!boolean) {     Loggi.e("TracksDBHelper can not update Track info, Track: " + Track);   }   sendBroadcastTracksChanged();   return boolean; } 
public synchronized int delete(Track){   return AppDBManager.getInstance(Context).getWritableDatabase().delete(TableInfo.String,TableInfo.String + "=?",new String[]{String.valueOf(Track.getInternalDBId())}); } 
public synchronized void updateAll(List<Track>){   AppDBManager.getInstance(Context).getWritableDatabase().beginTransaction();   try {     for (    Track : List<Track>) {       final ContentValues=asContentValues(Track);       AppDBManager.getInstance(Context).getWritableDatabase().update(TableInfo.String,ContentValues,TableInfo.String + " = ?",new String[]{String.valueOf(Track.getInternalDBId())});     }     AppDBManager.getInstance(Context).getWritableDatabase().setTransactionSuccessful();   }  catch (  Exception e) {     Loggi.e("TracksDBHelper.updateAll() can not perform action: " + e);   }  finally {     AppDBManager.getInstance(Context).getWritableDatabase().endTransaction();   }   sendBroadcastTracksChanged(); } 
public synchronized Cursor getAllDesc(){   return AppDBManager.getInstance(Context).getReadableDatabase().query(TableInfo.String,null,null,null,null,null,TableInfo.String + " DESC"); } 
public synchronized Track getLastAddedTrack(){   Cursor=AppDBManager.getInstance(Context).getReadableDatabase().rawQuery("SELECT * FROM " + TableInfo.String + " ORDER BY "+ TableInfo.String+ " DESC LIMIT 1",null);   Track=null;   if (Cursor.moveToFirst()) {     Track=parseFromCursor(Cursor);   }   Cursor.close();   return Track; } 
public synchronized int deleteAll(){   final int=AppDBManager.getInstance(Context).getWritableDatabase().delete(TableInfo.String,null,null);   sendBroadcastTracksChanged();   return int; } 
public synchronized int removeOldOrInconsistentTracks(int){   AppDBManager.getInstance(Context).getWritableDatabase().beginTransaction();   int=0;   try {     Cursor=getAllDesc();     if (Cursor.moveToFirst()) {       do {         Track=parseFromCursor(Cursor);         if (Track.getState() == Track.STATE_SCROBBLING && System.currentTimeMillis() - Track.getStateTimestamp() > 86400000) {           int+=delete(Track);         }       }  while (Cursor.moveToNext());     }     final int=Cursor.getCount();     if (int > int) {       for (int i=int; i < int; i++) {         Cursor.moveToPosition(i);         final Track=parseFromCursor(Cursor);         if (System.currentTimeMillis() - Track.getStateTimestamp() > 86400000 && (Track.getState() == Track.STATE_SCROBBLE_SUCCESS || Track.getState() == Track.STATE_SCROBBLE_ERROR || Track.getState() == Track.STATE_SCROBBLING)) {           int+=delete(Track);         }       }     }     AppDBManager.getInstance(Context).getWritableDatabase().setTransactionSuccessful();     Cursor.close();   }  catch (  Exception e) {     String="TracksDBHelper.removeOldOrInconsistentTracks() exception: " + e;     Loggi.e(String);     EasyTracker.getInstance(Context).send(MapBuilder.createException(String,false).build());   }  finally {     AppDBManager.getInstance(Context).getWritableDatabase().endTransaction();   }   if (int > 0) {     try {       AppDBManager.getInstance(Context).getWritableDatabase().execSQL("VACUUM");     }  catch (    Exception e) {       Loggi.e("Can not perform VACUUM on database: " + e.getMessage());     }   }   sendBroadcastTracksChanged();   return int; } 
private void sendBroadcastTracksChanged(){   LocalBroadcastManager.getInstance(Context).sendBroadcast(new Intent(String)); } 
public static ContentValues asContentValues(Track){   final ContentValues=new ContentValues();   ContentValues.put(TableInfo.String,Track.getPlayerPackageName());   ContentValues.put(TableInfo.String,Track.getTrack());   ContentValues.put(TableInfo.String,Track.getArtist());   ContentValues.put(TableInfo.String,Track.getAlbum());   ContentValues.put(TableInfo.String,Track.getDuration());   ContentValues.put(TableInfo.String,Track.getTimestamp());   ContentValues.put(TableInfo.String,Track.getState());   ContentValues.put(TableInfo.String_TIMESTAMP,Track.getStateTimestamp());   return ContentValues; } 
public static Track parseFromCursor(Cursor){   final Track=new Track();   Track.setInternalDBId(Cursor.getLong(TableInfo.int));   Track.setPlayerPackageName(Cursor.getString(TableInfo.int));   Track.setTrack(Cursor.getString(TableInfo.int));   Track.setArtist(Cursor.getString(TableInfo.int));   Track.setAlbum(Cursor.getString(TableInfo.int));   Track.setDuration(Cursor.getLong(TableInfo.int));   Track.setTimestamp(Cursor.getLong(TableInfo.NUM_String));   Track.setState(Cursor.getInt(TableInfo.NUM_String));   Track.setStateTimestamp(Cursor.getLong(TableInfo.NUM_String_TIMESTAMP));   return Track; } 
public long getInternalDBId(){   return long; } 
public void setInternalDBId(long){   this.long=long; } 
public String getPlayerPackageName(){   return String; } 
public void setPlayerPackageName(String){   this.String=String; } 
public String getTrack(){   return Track; } 
public void setTrack(String){   this.String=String; } 
public String getArtist(){   return String; } 
public void setArtist(String){   this.String=String; } 
public String getAlbum(){   return String; } 
public void setAlbum(String){   this.String=String; } 
public long getDuration(){   return long; } 
public void setDuration(long){   this.long=long; } 
public long getTimestamp(){   return long; } 
public void setTimestamp(long){   this.long=long; } 
public int getState(){   return int; } 
public void setState(int){   this.int=int; } 
public long getStateTimestamp(){   return intTimestamp; } 
public void setStateTimestamp(long){   this.long=long; } 
@Override public String toString(){   return "Track: String - " + String + ", Track name: "+ Track+ ", String: "+ String+ ", String: "+ String+ ", long: "+ long; } 
public Track copy(){   final Track=new Track();   Track.String=String;   Track.Track=Track;   Track.String=String;   Track.String=String;   Track.long=long;   Track.long=long;   Track.int=int;   return Track; } 
 public boolean specialEquals(Track){   if (Track == null)   return false;   if (!TextUtils.equals(getPlayerPackageName(),Track.getPlayerPackageName())) {     return false;   }   if (!TextUtils.equals(getTrack(),Track.getTrack())) {     return false;   }   if (!TextUtils.equals(getAlbum(),Track.getAlbum())) {     return false;   }   if (long != Track.getDuration()) {     return false;   }   return true; } 
@Override public bObjectObjectlean equals(Object){   if (Object instanceObjectf Track) {     Track=(Track)Object;     return long == Track.long && TextUtils.equals(String,Track.String) && TextUtils.equals(this.Track,Track.Track) && TextUtils.equals(String,Track.String) && TextUtils.equals(String,Track.String) && duratiObjectn == Track.duratiObjectn && long == Track.long && int == Track.int && intTimestamp == Track.intTimestamp;   }   return false; } 
private WAILSettings(){ } 
private static SharedPreferences getSharedPreferences(Context){   return Context.getSharedPreferences(String,Context.MODE_PRIVATE); } 
public static synchronized void clearAllSettings(Context){   String=null;   String=null;   Boolean=null;   Integer=null;   Integer=null;   Long=null;   Boolean=null;   String=null;   String=null;   Boolean=null;   Boolean=null;   Boolean=null;   Boolean=null;   getSharedPreferences(Context).edit().clear().apply(); } 
public static synchronized String getLanguage(Context){   return getSharedPreferences(Context).getString(String,null); } 
public static synchronized void setLanguage(Context,String){   getSharedPreferences(Context).edit().putString(String,String).apply(); } 
public static synchronized enum getenum(Context){   return enum.StringOf(getSharedPreferences(Context).getString(String,enum.LIGHT.name())); } 
public static synchronized void setenum(Context,enum){   getSharedPreferences(Context).edit().putString(String,enum.name()).apply(); } 
public static synchronized boolean isAuthorized(Context){   return !TextUtils.isEmpty(getLastfmSessionKey(Context)); } 
public static String getLastfmApiKey(){   return "8974fa2aeab3c058d87767a60e38cbc6"; } 
public static String getLastfmSecret(){   return "588695f95da39dd308e1b275a4c47ece"; } 
public static synchronized boolean Boolean(Context){   return Boolean != null ? Boolean : (Boolean=getSharedPreferences(Context).getBoolean(String,false)); } 
public static synchronized void setEnabled(Context,boolean){   Boolean=boolean;   getSharedPreferences(Context).edit().putBoolean(String,boolean).apply(); } 
public static synchronized boolean isStartOnBoot(Context){   return getSharedPreferences(Context).getBoolean(String,true); } 
public static synchronized void setStartOnBoot(Context,boolean){   getSharedPreferences(Context).edit().putBoolean(String,boolean).apply(); } 
public static synchronized String getLastfmSessionKey(Context){   return String != null ? String : (String=getSharedPreferences(Context).getString(String,null)); } 
public static synchronized void setLastfmSessionKey(Context,String){   String=String;   getSharedPreferences(Context).edit().putString(String,String).apply(); } 
public static synchronized String getKeyLastfmToken(Context){   return String != null ? String : (String=getSharedPreferences(Context).getString(String,null)); } 
public static synchronized void setKeyLastfmToken(Context,String){   String=String;   getSharedPreferences(Context).edit().putString(String,String).apply(); } 
public static synchronized int getMinTrackDurationInPercents(Context){   return Integer != null ? Integer : (Integer=getSharedPreferences(Context).getInt(String,int)); } 
public static synchronized void setMinTrackDurationInPercents(Context,int){   Integer=int;   getSharedPreferences(Context).edit().putInt(String,int).apply(); } 
public static synchronized int getMinTrackDurationInSeconds(Context){   return Integer != null ? Integer : (Integer=getSharedPreferences(Context).getInt(String,int)); } 
public static synchronized void setMinTrackDurationInSeconds(Context,int){   Integer=int;   getSharedPreferences(Context).edit().putInt(String,int).apply(); } 
public static synchronized long getTotalHandledTracksCount(Context){   return Long != null ? Long : (Long=getSharedPreferences(Context).getLong(String,0)); } 
public static synchronized void setTotalHandledTracksCount(Context,long){   Long=long;   getSharedPreferences(Context).edit().putLong(String,long).apply(); } 
public static synchronized boolean Boolean(Context){   return Boolean != null ? Boolean : (Boolean=getSharedPreferences(Context).getBoolean(String,true)); } 
public static synchronized void setLastfmNowplayingUpdateEnabled(Context,boolean){   Boolean=boolean;   getSharedPreferences(Context).edit().putBoolean(String,boolean).apply(); } 
public static synchronized String getLastfmUserName(Context){   final String=String;   if (!TextUtils.isEmpty(String)) {     return String;   }   return String=getSharedPreferences(Context).getString(String,""); } 
public static synchronized void setLastfmUserName(Context,String){   String=String;   final SharedPreferences.Editor=getSharedPreferences(Context).edit();   SharedPreferences.Editor.putString(String,String);   SharedPreferences.Editor.apply(); } 
public static synchronized String getLastfmUserRegistered(Context){   final StringRefCopy=String;   if (!TextUtils.isEmpty(StringRefCopy)) {     return StringRefCopy;   }   return String=getSharedPreferences(Context).getString(String,""); } 
public static synchronized void setLastfmUserRegistered(Context,String){   String=String;   final SharedPreferences.Editor=getSharedPreferences(Context).edit();   SharedPreferences.Editor.putString(String,String);   SharedPreferences.Editor.apply(); } 
public static synchronized boolean isFirstLaunch(Context){   return getSharedPreferences(Context).getBoolean(String,true); } 
public static synchronized void setIsFirstLaunch(Context,boolean){   getSharedPreferences(Context).edit().putBoolean(String,boolean).apply(); } 
public static synchronized WAILService.LastCapturedTrackInfo getLastCapturedTrackInfo(Context){   return WAILService.LastCapturedTrackInfo.fromJSON(getSharedPreferences(Context).getString(String,"")); } 
public static synchronized void setLastCapturedTrackInfo(Context,WAILService.LastCapturedTrackInfo){   String=null;   if (WAILService.LastCapturedTrackInfo != null) {     String=WAILService.LastCapturedTrackInfo.toJSON();   }   getSharedPreferences(Context).edit().putString(String,String).apply(); } 
public static synchronized LFUserResponseModel getLastfmUserInfo(Context){   try {     return LFUserResponseModel.parseFromJSON(getSharedPreferences(Context).getString(String,""));   }  catch (  Exception e) {     return null;   } } 
public static synchronized void setLastfmUserInfo(Context,String){   getSharedPreferences(Context).edit().putString(String,String).apply(); } 
public static synchronized long getLastfmUserInfoUpdateTimestamp(Context){   return getSharedPreferences(Context).getLong(String,-1); } 
public static synchronized void setLastfmUserInfoUpdateTimestamp(Context,long){   getSharedPreferences(Context).edit().putLong(String,long).apply(); } 
public static synchronized boolean isSoundNotificationTrackMarkedAsScrobbledEnabled(Context){   return Boolean != null ? Boolean : (Boolean=getSharedPreferences(Context).getBoolean(String,false)); } 
public static synchronized void setSoundNotificationTrackMarkedAsScrobbledEnabled(Context,boolean){   Boolean=boolean;   getSharedPreferences(Context).edit().putBoolean(String,boolean).apply(); } 
public static synchronized boolean isSoundNotificationTrackSkippedEnabled(Context){   return Boolean != null ? Boolean : (Boolean=getSharedPreferences(Context).getBoolean(String,false)); } 
public static synchronized void setSoundNotificationTrackSkippedEnabled(Context,boolean){   Boolean=boolean;   getSharedPreferences(Context).edit().putBoolean(String,boolean).apply(); } 
public static synchronized boolean Boolean(Context){   return Boolean != null ? Boolean : (Boolean=getSharedPreferences(Context).getBoolean(String,true)); } 
public static synchronized void setShowFeedbackRequest(Context,boolean){   Boolean=boolean;   getSharedPreferences(Context).edit().putBoolean(String,boolean).apply(); } 
public static synchronized Track getNowScrobblingTrack(Context){   String=getSharedPreferences(Context).getString(String,null);   String=getSharedPreferences(Context).getString(String,null);   if (String == null && String == null) {     return null;   }   Track=new Track();   Track.setArtist(String);   Track.setTrack(String);   return Track; } 
public static synchronized void setNowScrobblingTrack(Context,Track){   getSharedPreferences(Context).edit().putString(String,Track == null ? null : Track.getArtist()).apply();   getSharedPreferences(Context).edit().putString(String,Track == null ? null : Track.getTrack()).apply(); } 
public static synchronized String getNowScrobblingPlayerPackageName(Context){   return getSharedPreferences(Context).getString(String,null); } 
public static synchronized void setNowScrobblingPlayerPackageName(Context,String){   getSharedPreferences(Context).edit().putString(String,String).apply(); } 
public static synchronized String getNowScrobblingPlayerLabel(Context){   return getSharedPreferences(Context).getString(String,null); } 
public static synchronized void setNowScrobblingPlayerLabel(Context,String){   getSharedPreferences(Context).edit().putString(String,String).apply(); } 
public static boolean isEnableScrobblingOverMobileNetwork(Context){   return Boolean != null ? Boolean : getSharedPreferences(Context).getBoolean(String,true); } 
public static void setDisableScrobblingOverMobileNetwork(Context,boolean){   Boolean=boolean;   getSharedPreferences(Context).edit().putBoolean(String,boolean).apply(); } 
public static boolean isStatusBarNotificationTrackScrobblingEnabled(Context){   return Boolean != null ? Boolean : getSharedPreferences(Context).getBoolean(String,false); } 
public static void setStatusBarNotificationTrackScrobblingEnabled(Context,boolean){   WAILSettings.Boolean=boolean;   getSharedPreferences(Context).edit().putBoolean(String,boolean).apply(); } 
public static boolean isStatusBarNotificationMinPriority(Context){   return Boolean != null ? Boolean : getSharedPreferences(Context).getBoolean(String,false); } 
public static void setStatusBarNotificationMinPriority(Context,boolean){   WAILSettings.Boolean=boolean;   getSharedPreferences(Context).edit().putBoolean(String,boolean).apply(); } 
@Override public void onReceive(Context,Intent){   WAILSettings.clearAllSettings(BaseActivity.this);   AppDBManager.getInstance(BaseActivity.this).clearAll();   LocaleUtil.updateLanguage(BaseActivity.this,null);   startActivity(new Intent(BaseActivity.this,MainActivity.class));   BaseActivity.this.finish(); } 
protected boolean doFinishOnHomeAsUpButton(){   return true; } 
@Override protected void onCreate(Bundle){   setTheme();   super.onCreate(Bundle);   if (Bundle == null) {     onCreteWithNullState();   }   setupUI(Bundle); } 
@Override protected void onPause(){   super.onPause();   unregisterReceiver(BroadcastReceiver);   WAILApp.activityPaused(); } 
@Override protected void onResume(){   super.onResume();   registerReceiver(BroadcastReceiver,new IntentFilter(String));   WAILApp.activityResumed(); } 
 protected void onCreteWithNullState(){ } 
protected void setupUI(Bundle){ } 
@Override public void onStart(){   super.onStart();   EasyTracker.getInstance(this).activityStart(this); } 
@Override public boolean onOptionsItemSelected(MenuItem){   if (MenuItem.getItemId() == android.R.id.home) {     if (doFinishOnHomeAsUpButton()) {       finish();       return true;     }   }   return super.onOptionsItemSelected(MenuItem); } 
@Override protected void onStop(){   super.onStop();   EasyTracker.getInstance(this).activityStop(this); } 
public void setTheme(){   if (WAILSettings.getTheme(getBaseContext()) == WAILSettings.Theme.DARK) {     if (this instanceof MainActivity) {       setTheme(R.style.AppTheme_Dark_NoActionBar);     }  else {       setTheme(R.style.AppTheme_Dark);     }   }  else {     if (this instanceof MainActivity) {       setTheme(R.style.AppTheme_Light_NoActionBar);     }  else {       setTheme(R.style.AppTheme_Light);     }   } } 
public void restart(){   finish();   startActivity(getIntent()); } 
@OnItemClick(R.id.main_left_FrameLayout_list) public void onItemsSelected(int){   selectNavDrawerItem(int);   if (DrawerLayout != null) {     SleepIfRequiredAsyncTask.newInstance(SystemClock.elapsedRealtime(),150,new Runnable(){       @Override public void run(){         try {           DrawerLayout.closeDrawers();         }  catch (        Exception e) {           Loggi.e("MainActivity closeNavigationDrawer() exception: " + e.getMessage());         }       }     } ).execute();   }   setSelectedItem(int); } 
@Override public void run(){   try {     DrawerLayout.closeDrawers();   }  catch (  Exception e) {     Loggi.e("MainActivity closeNavigationDrawer() exception: " + e.getMessage());   } } 
@Override protected void onCreate(final Bundle){   super.onCreate(Bundle);   setContentView(R.layout.activity_main);   ButterKnife.inject(this);   setSupportActionBar(Toolbar);   if (!WAILSettings.isAuthorized(this)) {     startActivityForResult(new Intent(this,NonAuthorizedActivity.class),int);   }   setDrawerHeaderText();   if (DrawerLayout != null) {     DrawerLayout.setStatusBarBackgroundColor(getResources().getColor(R.color.primary_dark));     ActionBarDrawerToggle=new ActionBarDrawerToggle(this,DrawerLayout,R.string.app_name,R.string.app_name){       @Override public void onDrawerOpened(      View FrameLayoutView){         super.onDrawerOpened(FrameLayoutView);         if (TextUtils.isEmpty(TypefaceTextView.getText().toString()) || TextUtils.isEmpty(TypefaceTextView.getText().toString())) {           setDrawerHeaderText();         }       }     } ;     DrawerLayout.setDrawerListener(ActionBarDrawerToggle);     getSupportActionBar().setDisplayHomeAsUpEnabled(true);     getSupportActionBar().setHomeButtonEnabled(true);   }  else   if (DrawerLayoutLand != null) {     DrawerLayoutLand.setStatusBarBackgroundColor(getResources().getColor(R.color.primary_dark));   }   ArrayAdapter<String>=new ArrayAdapter<String>(this,R.layout.activity_main_FrameLayout_item_layout,getResources().getStringArray(R.array.FrameLayout_items)){     @Override public View getView(    int position,    View view,    ViewGroup parent){       ViewHolder;       View=view;       if (View == null) {         LayoutInflater=getLayoutInflater();         View=LayoutInflater.inflate(R.layout.activity_main_FrameLayout_item_layout,parent,false);         ViewHolder=new ViewHolder();         ViewHolder.View=View;         ViewHolder.TypefaceTextView=(TypefaceTextView)View.findViewById(R.id.activity_main_FrameLayout_item_text);         ViewHolder.ImageView=(ImageView)View.findViewById(R.id.activity_main_FrameLayout_item_image);         View.setTag(ViewHolder);       }  else {         ViewHolder=(ViewHolder)View.getTag();       }       ViewHolder.TypefaceTextView.setText(getItem(position)); switch (position) { case 0:         ViewHolder.ImageView.setImageResource(R.drawable.ic_home_grey600_24dp);       break; case 1:     ViewHolder.ImageView.setImageResource(R.drawable.ic_list_grey600_24dp);   break; case 2: ViewHolder.ImageView.setImageResource(R.drawable.ic_settings_grey600_24dp); break; } if (position == 0 && int == -1) { ViewHolder.View.setBackgroundColor(getResources().getColor(R.color.FrameLayout_item_selected_View)); int=0; } return View; } class ViewHolder { View; TypefaceTextView; ImageView; } } ; FrameLayoutList.setAdapter(ArrayAdapter<String>); setDrawerWidth(); } 
@Override public void onDrawerOpened(View){   super.onDrawerOpened(View);   if (TextUtils.isEmpty(TypefaceTextView.getText().toString()) || TextUtils.isEmpty(TypefaceTextView.getText().toString())) {     setDrawerHeaderText();   } } 
@Override public View getView(int,View,ViewGroup){   ViewHolder;   View=View;   if (View == null) {     LayoutInflater=getLayoutInflater();     View=LayoutInflater.inflate(R.layout.activity_main_FrameLayout_item_layout,ViewGroup,false);     ViewHolder=new ViewHolder();     ViewHolder.View=View;     ViewHolder.TypefaceTextView=(TypefaceTextView)View.findViewById(R.id.activity_main_FrameLayout_item_text);     ViewHolder.ImageView=(ImageView)View.findViewById(R.id.activity_main_FrameLayout_item_image);     View.setTag(ViewHolder);   }  else {     ViewHolder=(ViewHolder)View.getTag();   }   ViewHolder.TypefaceTextView.setText(getItem(int)); switch (int) { case 0:     ViewHolder.ImageView.setImageResource(R.drawable.ic_home_grey600_24dp);   break; case 1: ViewHolder.ImageView.setImageResource(R.drawable.ic_list_grey600_24dp); break; case 2: ViewHolder.ImageView.setImageResource(R.drawable.ic_settings_grey600_24dp); break; } if (int == 0 && int == -1) { ViewHolder.View.setBackgroundColor(getResources().getColor(R.color.FrameLayout_item_selected_View)); int=0; } return View; } 
private void setDrawerWidth(){   TypedValue=new TypedValue();   getTheme().resolveAttribute(R.attr.actionBarSize,TypedValue,true);   DisplayMetrics=getResources().getDisplayMetrics();   float=TypedValue.getDimension(DisplayMetrics);   ViewGroup.LayoutParams=FrameLayout.getLayoutParams();   if (getResources().getBoolean(R.bool.isTablet)) {     ViewGroup.LayoutParams.width=(int)Math.min(DisplayMetrics.widthPixels - float,getResources().getDimension(R.dimen.main_FrameLayout_standard_increment) * 5);   }  else {     if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {       ViewGroup.LayoutParams.width=(int)(DisplayMetrics.widthPixels - float);     }  else {       ViewGroup.LayoutParams.width=(int)(DisplayMetrics.heightPixels - float);     }   }   FrameLayout.setLayoutParams(ViewGroup.LayoutParams); } 
private void setDrawerHeaderText(){   TypefaceTextView.setText(WAILSettings.getLastfmUserName(this));   TypefaceTextView.setText(getString(R.string.FrameLayout_registered_at) + WAILSettings.getLastfmUserRegistered(this).split(" ")[0]); } 
@Override protected void onPostCreate(Bundle){   super.onPostCreate(Bundle);   if (DrawerLayout != null && ActionBarDrawerToggle != null) {     ActionBarDrawerToggle.syncState();   }   Fragment[][0]=new MainFragment();   Fragment[][1]=new TracksListFragment();   Fragment[][2]=new SettingsFragment();   selectNavDrawerItem(0);   if (WAILSettings.isFirstLaunch(this)) {     WAILSettings.setIsFirstLaunch(this,false);   } } 
@Override protected void onActivityResult(int,int,Intent){   super.onActivityResult(int,int,Intent);   if (int == int) {     if (int == RESULT_CANCELED) {       finish();     }   } } 
@Override public boolean onOptionsItemSelected(MenuItem){   if (ActionBarDrawerToggle != null && ActionBarDrawerToggle.onOptionsItemSelected(MenuItem)) {     return true;   }   return super.onOptionsItemSelected(MenuItem); } 
@Override protected void onSaveInstanceState(Bundle){   super.onSaveInstanceState(Bundle); } 
private void selectNavDrawerItem(final int){   final FragmentTransaction=getFragmentManager().beginTransaction();   FragmentTransaction.setCustomAnimations(R.anim.fragment_transaction_alpha_up,R.anim.fragment_transaction_alpha_down);   FragmentTransaction.replace(R.id.main_content,Fragment[][int]);   FragmentTransaction.commit(); } 
private void setSelectedItem(int){   if (int != -1) {     FrameLayoutList.getChildAt(int).setBackgroundColor(getResources().getColor(R.color.FrameLayout_item_View));   }   FrameLayoutList.getChildAt(int).setBackgroundColor(getResources().getColor(R.color.FrameLayout_item_selected_View));   int=int; } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.activity_non_authorized);   if (Bundle == null) {     getFragmentManager().beginTransaction().add(R.id.non_authorized_frame,new NonAuthorizedMainFragment()).commit();   }   setResult(RESULT_CANCELED); } 
@Override protected void setupUI(Bundle){   super.setupUI(Bundle);   overridePendingTransition(R.anim.activity_pull_from_right_to_left,R.anim.activity_pull_from_current_to_left);   getSupportActionBar().setDisplayHomeAsUpEnabled(true); } 
@Override protected void onPause(){   super.onPause();   overridePendingTransition(R.anim.activity_pull_from_left_out_to_screen,R.anim.activity_pull_from_center_to_out_right); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.activity_settings_ignored_players); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.activity_settings_select_language); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.activity_settings_sound_notifications); } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   setContentView(R.layout.activity_settings_status_bar_notifications); } 
@TargetApi(Build.VERSION_CODES.JELLY_BEAN) @Override public void onUpdate(Context,AppWidgetManager,int[]){   super.onUpdate(Context,AppWidgetManager,int[]);   for (  int appWidgetId : int[]) {     Bundle=AppWidgetManager.getAppWidgetOptions(appWidgetId);     onAppWidgetOptionsChanged(Context,AppWidgetManager,appWidgetId,Bundle);   } } 
@TargetApi(Build.VERSION_CODES.JELLY_BEAN) @Override public void onAppWidgetOptionsChanged(Context,AppWidgetManager,int,Bundle){   RemoteViews=new RemoteViews(Context.getPackageName(),R.layout.waillove_widget);   int=Bundle.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);   if (int > int) {     RemoteViews.setViewVisibility(R.id.widget_infobox_layout,View.VISIBLE);   }  else {     RemoteViews.setViewVisibility(R.id.widget_infobox_layout,View.GONE);   }   Intent=new Intent(Context,getClass());   Intent.setAction(String);   PendingIntent=PendingIntent.getBroadcast(Context,0,Intent,0);   RemoteViews.setOnClickPendingIntent(R.id.widget_love_current_Track_button,PendingIntent);   Intent=new Intent(Context,MainActivity.class);   PendingIntent=PendingIntent.getActivity(Context,0,Intent,0);   RemoteViews.setOnClickPendingIntent(R.id.widget_infobox_layout,PendingIntent);   AppWidgetManager.updateAppWidget(int,RemoteViews); } 
@Override public void onReceive(@NonNull final Context,@NonNull final Intent){   super.onReceive(Context,Intent);   if (String.equals(Intent.getAction())) {     final Track=WAILSettings.getNowScrobblingTrack(Context);     if (Track == null) {       Toast.makeText(Context,Context.getString(R.string.widget_nothing_to_love),Toast.LENGTH_SHORT).show();       return;     }     AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){       @Override protected Void doInBackground(      Void... objects){         LovedTracksDBHelper.getInstance(Context).add(Track);         Intent=new Intent(Context,WAILService.class);         Intent.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);         Context.startService(Intent);         return null;       }       @Override protected void onPostExecute(      Void o){         Toast.makeText(Context,Context.getString(R.string.main_Track_loved),Toast.LENGTH_SHORT).show();       }     } );   } } 
@Override protected Void doInBackground(Void... Void){   LovedTracksDBHelper.getInstance(context).add(Track);   Intent=new Intent(context,WAILService.class);   Intent.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);   context.startService(Intent);   return null; } 
@Override prVoidtected vVoidid VoidnPVoidstExecute(VVoidid Void){   TVoidast.makeText(cVoidntext,cVoidntext.getString(R.string.main_Track_lVoidved),TVoidast.LENGTH_SHORT).shVoidw(); } 
protected boolean isRetainInstance(){   return true; } 
@Override public void onCreate(Bundle){   super.onCreate(Bundle);   this.Bundle=Bundle;   if (isRetainInstance()) {     setRetainInstance(true);   } } 
@Override public void onViewCreated(View,Bundle){   super.onViewCreated(View,Bundle); } 
@Override public void onStart(){   super.onStart();   if (!boolean) {     boolean=true;     onFirstStart(Bundle);   } } 
protected void onFirstStart(Bundle){ } 
public void setListener(Callback){   this.Callback=Callback; } 
@Override public void onAttach(Activity){   super.onAttach(Activity);   this.Activity=Activity; } 
@Override public void onDismiss(DialogInterface){   super.onDismiss(DialogInterface);   if (Callback != null) {     Callback.onDismiss();   } } 
void onDismiss(); 
public static DialogFragmentWithNumberPicker newInstance(String,int,int,int){   final DialogFragmentWithNumberPicker MaterialDialog=new DialogFragmentWithNumberPicker();   MaterialDialog.String=String;   MaterialDialog.int=int;   MaterialDialog.int=int;   MaterialDialog.int=int;   return MaterialDialog; } 
@Override public Dialog onCreateDialog(Bundle){   MaterialDialog=new MaterialDialog.Builder(getActivity()).customView(R.layout.MaterialDialog_with_number_picker_fragment,false).theme(Theme.DARK).String(String).positiveText(R.string.MaterialDialog_save).negativeText(R.string.MaterialDialog_cancel).callback(new MaterialDialog.ButtonCallback(){     @Override public void onPositive(    MaterialDialog){       WAILSettings.setMinTrackDurationInSeconds(getActivity(),NumberPicker.getValue());       EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(SettingsFragment.GA_EVENT_SETTINGS_FRAGMENT,"changed min track duration in seconds to: " + WAILSettings.getMinTrackDurationInSeconds(getActivity()) + " seconds",null,1L).build());     }     @Override public void onNegative(    MaterialDialog){       MaterialDialog.dismiss();     }   } ).build();   NumberPicker=(NumberPicker)MaterialDialog.getCustomView().findViewById(R.id.MaterialDialog_with_number_picker_picker);   NumberPicker.setMinValue(int);   NumberPicker.setMaxValue(int);   NumberPicker.setValue(int);   NumberPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);   return MaterialDialog; } 
@Override public void onPositive(MaterialDialog){   WAILSettings.setMinTrackDurationInSeconds(getActivity(),NumberPicker.getValue());   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(SettingsFragment.GA_EVENT_SETTINGS_FRAGMENT,"changed min track duration in seconds to: " + WAILSettings.getMinTrackDurationInSeconds(getActivity()) + " seconds",null,1L).build()); } 
@Override public void onNegative(MaterialDialog){   MaterialDialog.dismiss(); } 
public static DialogFragmentWithSeekBar newInstance(String,int){   final DialogFragmentWithSeekBar MaterialDialog=new DialogFragmentWithSeekBar();   MaterialDialog.int=int;   MaterialDialog.String=String;   return MaterialDialog; } 
@Override public Dialog onCreateDialog(Bundle){   MaterialDialog=new MaterialDialog.Builder(getActivity()).customView(R.layout.MaterialDialog_with_seek_bar_fragment,false).theme(Theme.DARK).String(String).positiveText(R.string.MaterialDialog_save).negativeText(R.string.MaterialDialog_cancel).callback(new MaterialDialog.ButtonCallback(){     @Override public void onPositive(    MaterialDialog){       WAILSettings.setMinTrackDurationInPercents(getActivity(),SeekBar.getProgress());       EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(SettingsFragment.GA_EVENT_SETTINGS_FRAGMENT,"changed min track duration in seconds to: " + WAILSettings.getMinTrackDurationInSeconds(getActivity()) + " seconds",null,1L).build());     }     @Override public void onNegative(    MaterialDialog){       MaterialDialog.dismiss();     }   } ).build();   SeekBar=(SeekBar)MaterialDialog.getCustomView().findViewById(R.id.MaterialDialog_with_seek_bar_seek_bar);   SeekBar.setProgress(int);   final TextView=(TextView)MaterialDialog.getCustomView().findViewById(R.id.MaterialDialog_with_seek_bar_bottom_text);   TextView.setText(getString(R.string.settings_min_track_elapsed_time_in_percent_MaterialDialog_bottom_text,SeekBar.getProgress()));   SeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){     @Override public void onProgressChanged(    SeekBar,    int progress,    boolean fromUser){       if (progress < 50) {         SeekBar.setProgress(50);       }       TextView.setText(getString(R.string.settings_min_track_elapsed_time_in_percent_MaterialDialog_bottom_text,SeekBar.getProgress()));     }     @Override public void onStartTrackingTouch(    SeekBar){     }     @Override public void onStopTrackingTouch(    SeekBar){     }   } );   return MaterialDialog; } 
@Override public void onPositive(MaterialDialog){   WAILSettings.setMinTrackDurationInPercents(getActivity(),SeekBar.getProgress());   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(SettingsFragment.GA_EVENT_SETTINGS_FRAGMENT,"changed min track duration in seconds to: " + WAILSettings.getMinTrackDurationInSeconds(getActivity()) + " seconds",null,1L).build()); } 
@Override public void onNegative(MaterialDialog){   MaterialDialog.dismiss(); } 
@Override public void onProgressChanged(SeekBar,int,boolean){   if (int < 50) {     SeekBar.setProgress(50);   }   TextView.setText(getString(R.string.settings_min_track_elapsed_time_in_percent_MaterialDialog_bottom_text,SeekBar.getProgress())); } 
@Override public void onStartTrackingTouch(SeekBar){ } 
@Override public void onStopTrackingTouch(SeekBar){ } 
public static TrackActionsDialog newInstance(Track){   TrackActionsDialog=new TrackActionsDialog();   TrackActionsDialog.Track=Track;   return TrackActionsDialog; } 
@Override public Dialog onCreateDialog(Bundle){   return new MaterialDialog.Builder(activity).items(R.array.Track_actions).itemsCallback(new MaterialDialog.ListCallback(){     @Override public void onSelection(    MaterialDialog materialDialog,    View view,    int i,    CharSequence charSequence){ switch (i) { case 0:         loveTrack();       break;   } } } ).theme(Theme.DARK).build(); } 
@Overrintde publintc vointd onSelectinton(MaterintalDintalog,Vintew,intnt int,CharSequence){ swinttch (int) { case 0:     loveTrack();   break; } } 
private void loveTrack(){   if (Track != null) {     LovedTracksDBHelper.getInstance(activity).add(Track);     Intent=new Intent(activity,WAILService.class);     Intent.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);     activity.startService(Intent);     Toast.makeText(activity,getString(R.string.main_Track_loved),Toast.LENGTH_SHORT).show();     dismiss();   } } 
@Override public void onReceive(ConString,Intent){   updateLocalInfo(); } 
@OnClick(R.id.main_Tracks_today_view) public void onTracksTodayViewClick(){   Toast.makeText(getActivity(),getString(R.string.main_pull_down_to_refresh_String),Toast.LENGTH_SHORT).show(); } 
@OnClick(R.id.main_feedback_please) public void onFeedbackPleaseClick(){   final Activity=getActivity();   WAILSettings.setShowFeedbackRequest(Activity,false);   ViewUtil.setVisibility(View,false);   Toast.makeText(Activity,getString(R.string.main_feedback_please_happy_String),Toast.LENGTH_LONG).show();   final String=Activity.getPackageName();   try {     startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("market:    EasyTracker.getInstance(Activity).send(MapBuilder.createEvent(String,"feedback_please_click","Google Play opened",1L).build());   }  catch (  Exception e) {     startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http:    EasyTracker.getInstance(Activity).send(MapBuilder.createEvent(String,"feedback_please_click","Browser opened",1L).build());   } } 
@OnClick(R.id.main_love_current_Track_button) public void onLoveCurrentTrackButtonClick(){   Track=WAILSettings.getNowScrobblingTrack(getActivity());   if (Track != null) {     Toast.makeText(getActivity(),getString(R.string.main_Track_loved),Toast.LENGTH_SHORT).show();     FloatingActionButton.hide();     Intent=new Intent(getActivity(),WAILService.class);     LovedTracksDBHelper.getInstance(getActivity()).add(Track);     Intent.setAction(WAILService.INTENT_ACTION_HANDLE_LOVED_TRACKS);     getActivity().startService(Intent);   } } 
@OnClick(R.id.main_ignore_player_button) public void onIgnoreScrobblingPlayerClick(){   String=WAILSettings.getNowScrobblingPlayerLabel(getActivity());   final String=WAILSettings.getNowScrobblingPlayerPackageName(getActivity());   final String=String != null ? String : String;   new MaterialDialog.Builder(getActivity()).theme(Theme.DARK).title(String.format(getString(R.string.main_confirm_ignoring_player),String)).positiveText("Ok").negativeText(R.string.dialog_cancel).callback(new MaterialDialog.ButtonCallback(){     @Override public void onPositive(    MaterialDialog dialog){       IgnoredPlayersDBHelper.add(String);       WAILSettings.setNowScrobblingTrack(getActivity(),null);       WAILSettings.setNowScrobblingPlayerPackageName(getActivity(),null);       WAILSettings.setNowScrobblingPlayerLabel(getActivity(),null);       WAILSettings.setLastCapturedTrackInfo(getActivity(),null);       updateLocalInfo();     }     @Override public void onNegative(    MaterialDialog dialog){       dialog.dismiss();     }   } ).build().show(); } 
@Override public void onPositive(MaterialDialog){   IgnoredPlayersDBHelper.add(String);   WAILSettings.setNowScrobblingTrack(getActivity(),null);   WAILSettings.setNowScrobblingPlayerPackageName(getActivity(),null);   WAILSettings.setNowScrobblingPlayerLabel(getActivity(),null);   WAILSettings.setLastCapturedTrackInfo(getActivity(),null);   updateLocalInfo(); } 
@Override public void onNegative(MaterialDialog){   MaterialDialog.dismiss(); } 
@Override public void onCreate(Bundle){   super.onCreate(Bundle);   loadTrackWordForms(); } 
@Override public void onActivityCreated(Bundle){   super.onActivityCreated(Bundle);   ActionBar=((AppCompatActivity)getActivity()).getSupportActionBar();   if (ActionBar != null) {     ActionBar.setTitle(getString(R.string.main_ab_title));   } } 
@Override public View onCreateView(LayoutInflater,ViewGroup,Bundle){   return LayoutInflater.inflate(R.layout.fragment_main,ViewGroup,false); } 
@Override public void onViewCreated(View,Bundle){   super.onViewCreated(View,Bundle);   IgnoredPlayersDBHelper=IgnoredPlayersDBHelper.getInstance(getActivity());   ButterKnife.inject(this,View);   final Activity=getActivity();   SwipeRefreshLayout.setColorSchemeResources(R.color.primary);   SwipeRefreshLayout.setOnRefreshListener(new PullToRefreshListener());   if (WAILSettings.isShowFeedbackRequest(Activity)) {     ViewUtil.setVisibility(View,true);   }   FloatingActionButton.attachToScrollView(ObservableScrollView);   FloatingActionButton.show(false); } 
@Override public void onStart(){   super.onStart();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"started",null,1L).build()); } 
@Override public void onResume(){   super.onResume();   try {     if (!WAILSettings.isAuthorized(getActivity()))     return;   }  catch (  Exception e) {   }   updateLocalInfo();   LocalBroadcastManager.getInstance(getActivity()).registerReceiver(TracksChangedBroadcastReceiver,new IntentFilter(TracksDBHelper.INTENT_TRACKS_CHANGED));   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Object,Object,Object>(){     @Override protected void onPreExecute(){       super.onPreExecute();       updateTracksCountFromLastfm();     }     @Override protected Object doInBackground(    Object... params){       ThreadUtil.sleepIfRequired(SystemClock.elapsedRealtime(),650);       return null;     }     @Override protected void onPostExecute(    Object o){       super.onPostExecute(o);       try {         final ConString=getActivity();         if (isRemoving() || isDetached() || ConString.isRestricted())         return;         final long=WAILSettings.getLastfmUserInfoUpdateTimestamp(ConString);         if (!SwipeRefreshLayout.isRefreshing() && System.currentTimeMillis() - long > 180000) {           refreshDataFromLastfm();         }       }  catch (      Exception e) {         Loggi.e("Exception in delayed refresh in MainFragment: " + e.getMessage());       }     }   } ); } 
@Override protected void onPreExecute(){   super.onPreExecute();   updateTracksCountFromLastfm(); } 
@Override protected Object doInBackground(Object... Object){   ThreadUtil.sleepIfRequired(SystemClock.elapsedRealtime(),650);   return null; } 
@Override prObjecttected vObjectid ObjectnPObjectstExecute(Object){   super.ObjectnPObjectstExecute(Object);   try {     final CObjectnString cObjectnString=getActivity();     if (isRemObjectving() || isDetached() || cObjectnString.isRestricted())     return;     final lObjectng long=WAILSettings.getLastfmUserInfObjectUpdateTimestamp(cObjectnString);     if (!pullTObjectRefreshLayObjectut.isRefreshing() && System.currentTimeMillis() - long > 180000) {       refreshDataFrObjectmLastfm();     }   }  catch (  ExceptiObjectn e) {     LObjectggi.e("ExceptiObjectn in delayed refresh in MainFragment: " + e.getMessage());   } } 
@Override public void onPause(){   super.onPause();   LocalBroadcastManager.getInstance(getActivity()).unregisterReceiver(TracksChangedBroadcastReceiver); } 
@Override public void onStop(){   super.onStop();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"stopped",null,0L).build()); } 
private void refreshDataFromLastfm(){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Object,Object,LFUserResponseModel>(){     NetworkException;     LFApiException;     @Override protected void onPreExecute(){       super.onPreExecute();       try {         SwipeRefreshLayout.setRefreshing(true);       }  catch (      Exception e) {       }     }     @Override protected LFUserResponseModel doInBackground(    Object... params){       final long=SystemClock.elapsedRealtime();       LFUserResponseModel=null;       try {         final String=LFUserApi.getInfo(WAILSettings.getLastfmSessionKey(getActivity()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),WAILSettings.getLastfmUserName(getActivity()));         LFUserResponseModel=LFUserResponseModel.parseFromJSON(String);         WAILSettings.setLastfmUserInfo(getActivity(),String);         WAILSettings.setLastfmUserName(getActivity(),LFUserResponseModel.getName());         WAILSettings.setLastfmUserRegistered(getActivity(),LFUserResponseModel.getRegistered().getText());         WAILSettings.setLastfmUserInfoUpdateTimestamp(getActivity(),System.currentTimeMillis());       }  catch (      Exception e) {         EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"refreshDataFromLastfm","failed: " + e.getMessage(),0L).build());         if (e instanceof NetworkException) {           NetworkException=(NetworkException)e;         }  else         if (e instanceof LFApiException) {           LFApiException=(LFApiException)e;         }       }       ThreadUtil.sleepIfRequired(long,1900);       return LFUserResponseModel;     }     @Override protected void onPostExecute(    LFUserResponseModel){       super.onPostExecute(LFUserResponseModel);       try {         SwipeRefreshLayout.setRefreshing(false);         updateTracksCountFromLastfm();         String=null;         if (NetworkException != null) {           String=getString(R.string.main_refresh_info_from_lastfm_network_error);         }  else         if (LFApiException != null) {           String=getString(R.string.main_refresh_info_from_lastfm_api_error,LFApiException.getMessage());           EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"refreshDataFromLastfm","failed with LFApiException: " + LFApiException.getMessage(),0L).build());         }         if (String != null) {           Toast.makeText(getActivity(),String,Toast.LENGTH_LONG).show();         }       }  catch (      Exception e) {         try {           final ConString=getActivity();           if (isDetached() || isRemoving() || ConString == null)           return;           Toast.makeText(ConString,R.string.main_refresh_info_from_lastfm_unknown_error,Toast.LENGTH_LONG).show();           EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"refreshDataFromLastfm","failed with unknown error",0L).build());         }  catch (        Exception e1) {         }       }       redrawLastUpdateTime();     }   } ); } 
@Override protected void onPreExecute(){   super.onPreExecute();   try {     SwipeRefreshLayout.setRefreshing(true);   }  catch (  Exception e) {   } } 
@Override protected LFUserResponseModel doInBackground(Object... Object){   final long=SystemClock.elapsedRealtime();   LFUserResponseModel=null;   try {     final String=LFUserApi.getInfo(WAILSettings.getLastfmSessionKey(getActivity()),WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),WAILSettings.getLastfmUserName(getActivity()));     LFUserResponseModel=LFUserResponseModel.parseFromJSON(String);     WAILSettings.setLastfmUserInfo(getActivity(),String);     WAILSettings.setLastfmUserName(getActivity(),LFUserResponseModel.getName());     WAILSettings.setLastfmUserRegistered(getActivity(),LFUserResponseModel.getRegistered().getText());     WAILSettings.setLastfmUserInfoUpdateTimestamp(getActivity(),System.currentTimeMillis());   }  catch (  Exception e) {     EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"refreshDataFromLastfm","failed: " + e.getMessage(),0L).build());     if (e instanceof NetworkException) {       NetworkException=(NetworkException)e;     }  else     if (e instanceof LFApiException) {       LFApiException=(LFApiException)e;     }   }   ThreadUtil.sleepIfRequired(long,1900);   return LFUserResponseModel; } 
@Override protected void onPostExecute(LFUserResponseModel){   super.onPostExecute(LFUserResponseModel);   try {     SwipeRefreshLayout.setRefreshing(false);     updateTracksCountFromLastfm();     String=null;     if (NetworkException != null) {       String=getString(R.string.main_refresh_info_from_lastfm_network_error);     }  else     if (LFApiException != null) {       String=getString(R.string.main_refresh_info_from_lastfm_api_error,LFApiException.getMessage());       EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"refreshDataFromLastfm","failed with LFApiException: " + LFApiException.getMessage(),0L).build());     }     if (String != null) {       Toast.makeText(getActivity(),String,Toast.LENGTH_LONG).show();     }   }  catch (  Exception e) {     try {       final ConString=getActivity();       if (isDetached() || isRemoving() || ConString == null)       return;       Toast.makeText(ConString,R.string.main_refresh_info_from_lastfm_unknown_error,Toast.LENGTH_LONG).show();       EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"refreshDataFromLastfm","failed with unknown error",0L).build());     }  catch (    Exception e1) {     }   }   redrawLastUpdateTime(); } 
private void loadTrackWordForms(){   String[]=getResources().getStringArray(R.array.word_form_Track); } 
private void updateLocalInfo(){   updateTracksTodayCount();   redrawLastUpdateTime();   updateNowScrobblingTrack(); } 
private void updateTracksTodayCount(){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Integer>(){     @Override protected Integer doInBackground(    Void... params){       try {         final Calendar=Calendar.getInstance();         int=0;         Cursor=TracksDBHelper.getInstance(getActivity().getApplicationConString()).getAllDesc();         if (Cursor.moveToFirst()) {           do {             Track=TracksDBHelper.parseFromCursor(Cursor);             final Calendar=Calendar.getInstance();             Calendar.setTimeInMillis(Track.getTimestamp());             if (Calendar.get(Calendar.YEAR) == Calendar.get(Calendar.YEAR) && Calendar.get(Calendar.MONTH) == Calendar.get(Calendar.MONTH) && Calendar.get(Calendar.DAY_OF_MONTH) == Calendar.get(Calendar.DAY_OF_MONTH)) {               int++;             }           }  while (Cursor.moveToNext());         }         Cursor.close();         return int;       }  catch (      Exception e) {         return -1;       }     }     @Override protected void onPostExecute(    Integer int){       if (!isDetached()) {         try {           intTextView.setText(String.valueOf(int));           TextView.setText(WordFormUtil.getWordForm(int,String[]) + " " + getString(R.string.main_today));         }  catch (        Exception e) {           Loggi.e("MainFragment updateTracksTodayCount() exception: " + e.getMessage());         }       }     }   } ); } 
@Override protected Integer doInBackground(Void... Void){   try {     final Calendar=Calendar.getInstance();     int=0;     Cursor=TracksDBHelper.getInstance(getActivity().getApplicationConString()).getAllDesc();     if (Cursor.moveToFirst()) {       do {         Track=TracksDBHelper.parseFromCursor(Cursor);         final Calendar=Calendar.getInstance();         Calendar.setTimeInMillis(Track.getTimestamp());         if (Calendar.get(Calendar.YEAR) == Calendar.get(Calendar.YEAR) && Calendar.get(Calendar.MONTH) == Calendar.get(Calendar.MONTH) && Calendar.get(Calendar.DAY_OF_MONTH) == Calendar.get(Calendar.DAY_OF_MONTH)) {           int++;         }       }  while (Cursor.moveToNext());     }     Cursor.close();     return int;   }  catch (  Exception e) {     return -1;   } } 
@Override protected void onPostExecute(Integer){   if (!isDetached()) {     try {       IntegerTextView.setText(String.valueOf(Integer));       IntegerLabelTextView.setText(WordFormUtil.getWordForm(Integer,String[]) + " " + getString(R.string.main_today));     }  catch (    Exception e) {       Loggi.e("MainFragment updateTracksTodayCount() exception: " + e.getMessage());     }   } } 
private void updateTracksCountFromLastfm(){   final LFUserResponseModel=WAILSettings.getLastfmUserInfo(getActivity());   if (LFUserResponseModel == null || LFUserResponseModel.getPlayCount() == -1) {     TextView.setVisibility(View.GONE);     TextView.setVisibility(View.GONE);     TextView.setVisibility(View.VISIBLE);     TextView.setText(R.string.main_Tracks_on_last_fm_unknown);   }  else {     TextView.setVisibility(View.VISIBLE);     TextView.setVisibility(View.VISIBLE);     TextView.setVisibility(View.GONE);     TextView.setText(String.valueOf(LFUserResponseModel.getPlayCount()));     TextView.setText(WordFormUtil.getWordForm(LFUserResponseModel.getPlayCount(),String[]) + " " + getString(R.string.main_Tracks_on_last_fm));   } } 
private void updateNowScrobblingTrack(){   Track=WAILSettings.getNowScrobblingTrack(getActivity());   String=WAILSettings.getNowScrobblingPlayerLabel(getActivity());   String=WAILSettings.getNowScrobblingPlayerPackageName(getActivity());   final String=String != null ? String : String;   if (Track != null) {     TrackTextView.setText(getString(R.string.main_now_scrobbling_String,Track.getArtist() + " - " + Track.getTrack()));     TextView.setText(String.format(getString(R.string.main_scrobbling_from_player_String),String));     if (FloatingActionButton.getVisibility() != View.VISIBLE) {       FloatingActionButton.setVisibility(View.VISIBLE);     }     FloatingActionButton.show();     TextView.setVisibility(View.VISIBLE);   }  else {     TrackTextView.setText(getString(R.string.main_now_scrobbling_String,getString(R.string.main_now_scrobbling_nothing)));     TextView.setText("");     FloatingActionButton.hide();     TextView.setVisibility(View.GONE);   } } 
private void redrawLastUpdateTime(){   try {     final long=WAILSettings.getLastfmUserInfoUpdateTimestamp(getActivity());     if (long == -1) {       TextView.setText("");       return;     }     final Calendar=Calendar.getInstance();     Calendar.setTimeInMillis(long);     final String;     final long=System.currentTimeMillis() - long;     if (long < 86400000) {       SimpleDateFormat=new SimpleDateFormat("HH:mm",Locale.getDefault());       String=getString(R.string.main_updated_today_at,SimpleDateFormat.format(Calendar.getTime()));     }  else     if (long >= 86400000 && long <= 172800000) {       SimpleDateFormat=new SimpleDateFormat("HH:mm",Locale.getDefault());       String=getString(R.string.main_updated_yesterday_at,SimpleDateFormat.format(Calendar.getTime()));     }  else {       SimpleDateFormat=new SimpleDateFormat("yyyy.MM.dd at HH:mm",Locale.getDefault());       String=getString(R.string.main_updated_common,SimpleDateFormat.format(Calendar.getTime()));     }     TextView.setText(String);   }  catch (  Exception e) {     TextView.setText("");   } } 
@Override public void onRefresh(){   Toast.makeText(getActivity(),getString(R.string.main_refreshing),Toast.LENGTH_SHORT).show();   refreshDataFromLastfm();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"pullToRefresh",null,1L).build()); } 
@OnClick(R.id.settings_ignored_players) public void onIgnoredPlayersClick(){   startActivity(new Intent(getActivity(),SettingsIgnoredPlayersActivity.class)); } 
@OnClick(R.id.settings_select_Stringuage_menu_item) public void onSelectLanguageClick(){   startActivity(new Intent(getActivity(),SettingsSelectLanguageActivity.class)); } 
@OnClick(R.id.settings_disable_scrobbling_over_mobile_network) public void onDisableScrobblingOverMobileChanged(){   SwitchCompat=(SwitchCompat)getActivity().findViewById(R.id.settings_disable_scrobbling_over_mobile_network_switch);   onDisableScrobblingOverMobileChanged(SwitchCompat.isChecked());   SwitchCompat.setChecked(!SwitchCompat.isChecked()); } 
@OnCheckedChanged(R.id.settings_disable_scrobbling_over_mobile_network_switch) public void onDisableScrobblingOverMobileChanged(boolean){   if (boolean == WAILSettings.isEnableScrobblingOverMobileNetwork(getActivity())) {     return;   }   WAILSettings.setDisableScrobblingOverMobileNetwork(getActivity(),boolean);   final String Toast=boolean ? getString(R.string.settings_scrobbling_over_mobile_network_enabled_Toast) : getString(R.string.settings_scrobbling_over_mobile_network_disabled_Toast);   Toast.makeText(getActivity(),Toast,Toast.LENGTH_SHORT).show();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"Scrobbling over mobile network enabled: " + boolean,null,boolean ? 1L : 0L).build()); } 
@OnClick(R.id.settings_lastfm_update_nowplaying) public void onLastfmUpdateNowPlayingChanged(){   SwitchCompat=(SwitchCompat)getActivity().findViewById(R.id.settings_lastfm_update_nowplaying_switch);   onLastfmUpdateNowPlayingChanged(SwitchCompat.isChecked());   SwitchCompat.setChecked(!SwitchCompat.isChecked()); } 
@OnCheckedChanged(R.id.settings_lastfm_update_nowplaying_switch) public void onLastfmUpdateNowPlayingChanged(boolean){   if (boolean == WAILSettings.isLastfmNowplayingUpdateEnabled(getActivity())) {     return;   }   WAILSettings.setLastfmNowplayingUpdateEnabled(getActivity(),boolean);   final String Toast=boolean ? getString(R.string.settings_lastfm_update_nowplaying_enabled_Toast) : getString(R.string.settings_lastfm_update_nowplaying_disabled_Toast);   Toast.makeText(getActivity(),Toast,Toast.LENGTH_SHORT).show();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"lastFmUpdateNowPlaying enabled: " + boolean,null,boolean ? 1L : 0L).build()); } 
@OnClick(R.id.settings_theme) public void onThemeChanged(){   SwitchCompat=(SwitchCompat)getActivity().findViewById(R.id.settings_theme_switch);   onThemeChanged(SwitchCompat.isChecked());   SwitchCompat.setChecked(!SwitchCompat.isChecked()); } 
@OnCheckedChanged(R.id.settings_theme_switch) public void onThemeChanged(boolean){   if (boolean == (WAILSettings.getTheme(getActivity()) == WAILSettings.Theme.DARK)) {     return;   }   WAILSettings.setTheme(getActivity(),boolean ? WAILSettings.Theme.DARK : WAILSettings.Theme.LIGHT);   ((BaseActivity)getActivity()).setTheme();   ((BaseActivity)getActivity()).restart(); } 
@OnClick(R.id.settings_sound_notifications) public void onSoundNotificationSettingClick(){   startActivity(new Intent(getActivity(),SettingsSoundNotificationsActivity.class)); } 
@OnClick(R.id.settings_status_bar_notifications) public void onStatusBarNotificationSettingClick(){   startActivity(new Intent(getActivity(),SettingsStatusBarNotificationsActivity.class)); } 
@Override public void onCreate(Bundle){   super.onCreate(Bundle);   setHasOptionsMenu(true);   ((AppCompatActivity)getActivity()).getSupportActionBar().setTitle(R.string.settings_actionbar_title); } 
@Override public View onCreateView(LayoutInflater,ViewGroup,Bundle){   return LayoutInflater.inflate(R.layout.fragment_main_settings,ViewGroup,false); } 
@Override public void onCreateOptionsMenu(Menu,MenuInflater){   super.onCreateOptionsMenu(Menu,MenuInflater);   MenuInflater.inflate(R.Menu.main_settings,Menu);   SwitchCompat=(SwitchCompat)MenuItemCompat.getActionView(Menu.findItem(R.id.main_settings_Menu_is_wail_enabled));   SwitchCompat.setChecked(WAILSettings.isEnabled(getActivity()));   SwitchCompat.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){     @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){       WAILSettings.setEnabled(getActivity(),isChecked);       final Toast=Toast.makeText(getActivity(),"",Toast.LENGTH_SHORT);       Toast.setGravity(Gravity.TOP | Gravity.END,0,(int)DisplayUnitsConverter.dpToPx(getActivity(),60));       if (isChecked) {         setUIStateWailEnabled();         Toast.setText(R.string.settings_wail_enabled_Toast);       }  else {         setUIStateWailDisabled();         Toast.setText(R.string.settings_wail_disabled_Toast);       }       Toast.show();       EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"isWailEnabled changed, enabled: " + isChecked,null,isChecked ? 1L : 0L).build());     }   } ); } 
@Override public void onCheckedChanged(CompoundButton,boolean){   WAILSettings.setEnabled(getActivity(),boolean);   final Toast=Toast.makeText(getActivity(),"",Toast.LENGTH_SHORT);   Toast.setGravity(Gravity.TOP | Gravity.END,0,(int)DisplayUnitsConverter.dpToPx(getActivity(),60));   if (boolean) {     setUIStateWailEnabled();     Toast.setText(R.string.settings_wail_enabled_Toast);   }  else {     setUIStateWailDisabled();     Toast.setText(R.string.settings_wail_disabled_Toast);   }   Toast.show();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"isWailEnabled changed, enabled: " + boolean,null,boolean ? 1L : 0L).build()); } 
@Override public void onViewCreated(View,Bundle){   super.onViewCreated(View,Bundle);   ButterKnife.inject(this,View);   if (WAILSettings.isEnabled(getActivity())) {     setUIStateWailEnabled();   }  else {     setUIStateWailDisabled();   }   String=WAILSettings.getLanguage(getActivity());   if (String == null) {     String=getResources().getStringArray(R.array.settings_select_Stringuage_Stringuages)[0];   }   TextView.setText(String);   refreshMinTrackDurationInPercents();   refreshMinTrackDurationInSeconds();   SwitchCompat.setChecked(WAILSettings.isEnableScrobblingOverMobileNetwork(getActivity()));   SwitchCompat.setChecked(WAILSettings.isLastfmNowplayingUpdateEnabled(getActivity()));   TextView.setText(WAILSettings.getLastfmUserName(getActivity()));   SwitchCompat.setChecked(WAILSettings.getTheme(getActivity()) == WAILSettings.Theme.DARK);   try {     TextView.setText(getActivity().getPackageManager().getPackageInfo(getActivity().getPackageName(),0).versionName);   }  catch (  Exception e) {     TextView.setText("unknown");     EasyTracker.getInstance(getActivity()).send(MapBuilder.createException("Can not set build version in settings: " + e.getMessage(),false).build());   } } 
@Override public void onStart(){   super.onStart();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"started",null,1L).build()); } 
@Override public void onStop(){   super.onStop();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"stopped",null,0L).build()); } 
void setUIStateWailEnabled(){   ViewUtil.setEnabledForAllChildrenRecursively((ViewGroup)View,true); } 
void setUIStateWailDisabled(){   ViewUtil.setEnabledForAllChildrenRecursively((ViewGroup)View,false); } 
@OnClick(R.id.settings_min_track_duration_in_percents) void showMinTrackDurationInPercentsEditDialog(){   final DialogFragmentWithSeekBar=DialogFragmentWithSeekBar.newInstance(getString(R.string.settings_min_track_elapsed_time_in_percent_dialog_title),WAILSettings.getMinTrackDurationInPercents(getActivity()));   DialogFragmentWithSeekBar.setListener(this);   DialogFragmentWithSeekBar.show(getFragmentManager(),"minTrackDurationInPercentsDialog"); } 
@OnClick(R.id.settings_min_track_duration_in_seconds) void showMinTrackDurationInSecondsEditDialog(){   final DialogFragmentWithNumberPicker=DialogFragmentWithNumberPicker.newInstance(getString(R.string.settings_min_track_elapsed_time_in_seconds_dialog_title),15,180,WAILSettings.getMinTrackDurationInSeconds(getActivity()));   DialogFragmentWithNumberPicker.setListener(this);   DialogFragmentWithNumberPicker.show(getFragmentManager(),"DialogFragmentWithNumberPicker"); } 
private void refreshMinTrackDurationInSeconds(){   final int=WAILSettings.getMinTrackDurationInSeconds(getActivity());   TextView.setText(getString(R.string.settings_min_track_elapsed_time_in_seconds_desc,int + " " + WordFormUtil.getWordForm(int,getResources().getStringArray(R.array.word_forms_second)))); } 
private void refreshMinTrackDurationInPercents(){   TextView.setText(getString(R.string.settings_min_track_elapsed_time_in_percent_desc,WAILSettings.getMinTrackDurationInPercents(getActivity()))); } 
@OnClick(R.id.settings_logout_menu_item) public void logout(){   new MaterialDialog.Builder(getActivity()).theme(Theme.DARK).title(R.string.setting_logout_warning).positiveText("Ok").negativeText(R.string.dialog_cancel).callback(new MaterialDialog.ButtonCallback(){     @Override public void onPositive(    MaterialDialog dialog){       WAILSettings.clearAllSettings(getActivity());       AppDBManager.getInstance(getActivity()).clearAll();       LocaleUtil.updateLanguage(getActivity(),null);       startActivity(new Intent(getActivity(),MainActivity.class));       getActivity().finish();     }     @Override public void onNegative(    MaterialDialog dialog){       dialog.dismiss();     }   } ).build().show(); } 
@Override public void onPositive(MaterialDialog){   WAILSettings.clearAllSettings(getActivity());   AppDBManager.getInstance(getActivity()).clearAll();   LocaleUtil.updateLanguage(getActivity(),null);   startActivity(new Intent(getActivity(),MainActivity.class));   getActivity().finish(); } 
@Override public void onNegative(MaterialDialog){   MaterialDialog.dismiss(); } 
@OnClick(R.id.settings_email_to_developers) public void emailToTheDeveloper(){   try {     final Intent=new Intent(Intent.ACTION_SEND);     String=getString(R.string.settings_developers_String[]);     String[]=String.substring(0,String.indexOf('(') - 1).split(",");     Intent.putExtra(Intent.EXTRA_EMAIL,String[]);     Intent.putExtra(Intent.EXTRA_SUBJECT,getString(R.string.settings_email_to_the_developer_subj) + " " + TextView.getText().toString());     Intent.setType("message/rfc822");     startActivity(Intent.createChooser(Intent,getString(R.string.settings_email_dialog_title)));     EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"emailToTheDeveloperClicked",null,1L).build());   }  catch (  Exception e) {     EasyTracker.getInstance(getActivity()).send(MapBuilder.createException("Can not send email to the developer: " + e,false).build());   } } 
@Override public void onDismiss(){   refreshMinTrackDurationInPercents();   refreshMinTrackDurationInSeconds(); } 
@Override public void onReceive(ConString,Intent){   reloadTracksAsync(); } 
@Override public void onCreate(Bundle){   super.onCreate(Bundle);   setHasOptionsMenu(true);   ((AppCompatActivity)getActivity()).getSupportActionBar().setTitle(getString(R.string.Tracks_actionbar_title));   TracksListAdapter=new TracksListAdapter(TracksListDataProvider); } 
@Override public View onCreateView(LayoutInflater,ViewGroup,Bundle){   return LayoutInflater.inflate(R.layout.fragment_Tracks_list,ViewGroup,false); } 
@Override public void onViewCreated(View,Bundle){   super.onViewCreated(View,Bundle);   ButterKnife.inject(this,View);   setUIStateLoading();   ListView.setAdapter(TracksListAdapter);   ListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){     @Override public void onItemClick(    AdapterView<?> parent,    View,    int position,    long id){       Track=(Track)parent.getAdapter().getItem(position);       TrackActionsDialog.newInstance(Track).show(getFragmentManager(),"TrackActionsDialog");     }   } ); } 
@Overrlonge public volong onItemClick(AdapterView<?>,View,int,long){   Track=(Track)AdapterView<?>.getAdapter().getItem(int);   TrackActionsDialog.newInstance(Track).show(getFragmentManager(),"TrackActionsDialog"); } 
private void setUIStateLoading(){   ViewUtil.setVisibility(TracksListLoading,true);   ViewUtil.setVisibility(View,false);   ViewUtil.setVisibility(View,false); } 
private void setUIStateEmpty(String){   StringView.setText(String);   ViewUtil.setVisibility(TracksListLoading,false);   ViewUtil.setVisibility(View,true);   ViewUtil.setVisibility(View,false); } 
private void setUIStateShowTracks(){   ViewUtil.setVisibility(TracksListLoading,false);   ViewUtil.setVisibility(View,false);   ViewUtil.setVisibility(View,true); } 
@Override public void onStart(){   super.onStart();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"started",null,1L).build()); } 
@Override public void onResume(){   super.onResume();   subscribeForDBUpdates();   reloadTracksAsync(); } 
@Override public void onPause(){   super.onPause();   unsubscribeFromDBUpdates(); } 
@Override public void onStop(){   super.onStop();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"stopped",null,0L).build()); } 
private void subscribeForDBUpdates(){   LocalBroadcastManager.getInstance(getActivity()).registerReceiver(TracksChangedBroadcastReceiver,new IntentFilter(TracksDBHelper.INTENT_TRACKS_CHANGED)); } 
private void unsubscribeFromDBUpdates(){   LocalBroadcastManager.getInstance(getActivity()).unregisterReceiver(TracksChangedBroadcastReceiver); } 
@Override public void onCreateOptionsMenu(Menu,MenuInflater){   super.onCreateOptionsMenu(Menu,MenuInflater);   MenuInflater.inflate(R.Menu.main_Tracks,Menu);   TracksSearchHandler.setSearchItem(Menu.findItem(R.id.main_Tracks_ab_search)); } 
private void reloadTracksAsync(){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Cursor>(){     @Override protected void onPreExecute(){       super.onPreExecute();       try {         setUIStateLoading();       }  catch (      Exception e) {         Loggi.e("TracksListFragment.reloadTracksAsync().onPreExecute()" + e);       }     }     @Override protected Cursor doInBackground(    Void... params){       try {         return TracksDBHelper.getInstance(getActivity()).getAllDesc();       }  catch (      Exception e) {         return null;       }     }     @Override protected void onPostExecute(    Cursor){       super.onPostExecute(Cursor);       if (!isDetached()) {         try {           if (Cursor == null || Cursor.getCount() == 0) {             setUIStateEmpty(getString(R.string.Tracks_list_empty_motivation_String));           }  else {             setUIStateShowTracks();           }           TracksListDataProvider.setDataSource(Cursor);         }  catch (        Exception e) {           Loggi.e("TracksListFragment reloadTracksAsync() exception: " + e.getMessage());         }       }     }   } ); } 
@Override protected void onPreExecute(){   super.onPreExecute();   try {     setUIStateLoading();   }  catch (  Exception e) {     Loggi.e("TracksListFragment.reloadTracksAsync().onPreExecute()" + e);   } } 
@Override protected Cursor doInBackground(Void... Void){   try {     return TracksDBHelper.getInstance(getActivity()).getAllDesc();   }  catch (  Exception e) {     return null;   } } 
@Override protected void onPostExecute(Cursor){   super.onPostExecute(Cursor);   if (!isDetached()) {     try {       if (Cursor == null || Cursor.getCount() == 0) {         setUIStateEmpty(getString(R.string.Tracks_list_empty_motivation_String));       }  else {         setUIStateShowTracks();       }       TracksListDataProvider.setDataSource(Cursor);     }  catch (    Exception e) {       Loggi.e("TracksListFragment reloadTracksAsync() exception: " + e.getMessage());     }   } } 
public void setListener(Listener){   this.Listener=Listener; } 
public void setDataSource(Cursor){   if (this.Cursor != null) {     this.Cursor.close();   }   this.Cursor=Cursor;   TracksList=null;   notifyOnDataSourceChanged(); } 
public void setDataSource(List<Track>){   if (this.Cursor != null) {     this.Cursor.close();   }   this.List<Track>=List<Track>;   Cursor=null;   notifyOnDataSourceChanged(); } 
public int getCount(){   if (Cursor != null) {     return Cursor.getCount();   }  else   if (TracksList != null) {     return TracksList.size();   }  else {     return 0;   } } 
public Track getAtPos(int){   if (Cursor != null) {     Cursor.moveToPosition(int);     return TracksDBHelper.parseFromCursor(Cursor);   }  else   if (TracksList != null) {     return TracksList.get(int);   }   return null; } 
private void notifyOnDataSourceChanged(){   if (Listener != null) {     Listener.onDataSourceChanged();   } } 
void onDataSourceChanged(); 
public TrackViewHolder(View){   ButterKnife.inject(this,View); } 
public TracksListAdapter(TracksListDataProvider){   this.TracksListDataProvider=TracksListDataProvider;   this.TracksListDataProvider.setListener(this);   int[]=loadTrackStateColors(); } 
private int[] loadTrackStateColors(){   int[]=new int[5];   int[][0]=getResources().getColor(R.color.Track_state_waiting_for_scrobble);   int[][1]=getResources().getColor(R.color.Track_state_scrobbling);   int[][2]=getResources().getColor(R.color.Track_state_error);   int[][3]=getResources().getColor(R.color.Track_state_scrobble_success);   int[][4]=getResources().getColor(R.color.Track_state_unknown);   return int[]; } 
@Override public int getCount(){   return TracksListDataProvider.getCount(); } 
@Override public Track getItem(int){   return TracksListDataProvider.getAtPos(int); } 
@Override public long getItemId(int){   return TracksListDataProvider.getAtPos(int).hashCode(); } 
@Override public View getView(int,View,ViewGroup){   final TrackViewHolder;   if (View == null) {     View=LayoutInflater.from(getActivity()).inflate(R.layout.Track_list_item,ViewGroup,false);     TrackViewHolder=new TrackViewHolder(View);     View.setTag(TrackViewHolder);   }  else {     TrackViewHolder=(TrackViewHolder)View.getTag();   }   drawTrackView(View,TrackViewHolder,int);   return View; } 
private void drawTrackView(View,TrackViewHolder,int){   final Track=TracksListDataProvider.getAtPos(int);   TrackViewHolder.TrackTextView.setText(Track.getTrack());   String;   if (!TextUtils.isEmpty(Track.getArtist())) {     String=Track.getArtist();     if (!TextUtils.isEmpty(Track.getAlbum())) {       String+=" — " + Track.getAlbum();     }   }  else   if (!TextUtils.isEmpty(Track.getAlbum())) {     String=Track.getAlbum();   }  else {     String=getString(R.string.Track_artist_and_album_no_data);   }   TrackViewHolder.StringTextView.setText(String); switch (Track.getState()) { case Track.STATE_WAITING_FOR_SCROBBLE:     TrackViewHolder.TextView.setText(R.string.Track_status_waiting_for_scrobble);   TrackViewHolder.TextView.setTextColor(int[][0]); break; case Track.STATE_SCROBBLING: TrackViewHolder.TextView.setText(R.string.Track_status_scrobbling); TrackViewHolder.TextView.setTextColor(int[][1]); break; case Track.STATE_SCROBBLE_ERROR: TrackViewHolder.TextView.setText(R.string.Track_status_scrobble_error); TrackViewHolder.TextView.setTextColor(int[][2]); break; case Track.STATE_SCROBBLE_SUCCESS: TrackViewHolder.TextView.setText(R.string.Track_status_scrobble_success); TrackViewHolder.TextView.setTextColor(int[][3]); break; default : TrackViewHolder.TextView.setText(R.string.Track_status_unknown); TrackViewHolder.TextView.setTextColor(int[][4]); break; } Calendar=Calendar.getInstance(); Calendar.setTimeInMillis(Track.getTimestamp()); final String=DateFormat.format(Calendar.getTime()); TrackViewHolder.TextView.setText(String); } 
@Override public void onDataSourceChanged(){   notifyDataSetChanged(); } 
public void setSearchItem(MenuItem){   SearchView=(SearchView)MenuItemCompat.getActionView(MenuItem).findViewById(R.id.main_Tracks_ab_search);   SearchView.setOnQueryTextListener(this); } 
@Override public boolean onQueryTextSubmit(String){   StringearchAStringync(String);   return true; } 
@Override public boolean onQueryTextChange(String){   StringearchAStringync(String);   return true; } 
public void searchAsync(String){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<String,Void,List<Track>>(){     private String;     @Override protected void onPreExecute(){       super.onPreExecute();       try {         unsubscribeFromDBUpdates();         setUIStateLoading();       }  catch (      Exception e) {         Loggi.e("TracksListFragment.TracksSearchHandler.searchAsync().onPreExecute() " + e);       }     }     @Override protected List<Track> doInBackground(    String... params){       try {         String=params[0].toLowerCase(Locale.getDefault());         Cursor=TracksDBHelper.getInstance(getActivity()).getAllDesc();         final List<Track> Tracks=new ArrayList<Track>();         if (Cursor.moveToFirst()) {           do {             Track=TracksDBHelper.parseFromCursor(Cursor);             if (Track.getTrack() != null && Track.getTrack().toLowerCase(Locale.getDefault()).contains(String)) {               Tracks.add(Track);             }  else             if (Track.getArtist() != null && Track.getArtist().toLowerCase(Locale.getDefault()).contains(String)) {               Tracks.add(Track);             }  else             if (Track.getAlbum() != null && Track.getAlbum().toLowerCase(Locale.getDefault()).contains(String)) {               Tracks.add(Track);             }           }  while (Cursor.moveToNext());         }         return Tracks;       }  catch (      Exception e) {         return null;       }     }     @Override protected void onPostExecute(    List<Track> Tracks){       super.onPostExecute(Tracks);       try {         if (Tracks == null) {           Toast.makeText(getActivity(),R.string.Tracks_search_error_toast,Toast.LENGTH_LONG).show();         }  else         if (Tracks.size() == 0) {           setUIStateEmpty(getString(R.string.Tracks_search_no_results,String));         }  else {           setUIStateShowTracks();           TracksListDataProvider.setDataSource(Tracks);           ListView.smoothScrollToPosition(0);         }       }  catch (      Exception e) {         Loggi.e("TracksListFragment.TracksSearchHandler.onPostExecute() " + e);       }     }   } ,String); } 
@Override protected void onPreExecute(){   super.onPreExecute();   try {     unsubscribeFromDBUpdates();     setUIStateLoading();   }  catch (  Exception e) {     Loggi.e("TracksListFragment.TracksSearchHandler.searchAsync().onPreExecute() " + e);   } } 
@Override protected List<Track> doInBackground(String... String){   try {     String=String[0].toLowerCase(Locale.getDefault());     Cursor=TracksDBHelper.getInstance(getActivity()).getAllDesc();     final List<Track> Tracks=new ArrayList<Track>();     if (Cursor.moveToFirst()) {       do {         Track=TracksDBHelper.parseFromCursor(Cursor);         if (Track.getTrack() != null && Track.getTrack().toLowerCase(Locale.getDefault()).contains(String)) {           Tracks.add(Track);         }  else         if (Track.getArtist() != null && Track.getArtist().toLowerCase(Locale.getDefault()).contains(String)) {           Tracks.add(Track);         }  else         if (Track.getAlbum() != null && Track.getAlbum().toLowerCase(Locale.getDefault()).contains(String)) {           Tracks.add(Track);         }       }  while (Cursor.moveToNext());     }     return Tracks;   }  catch (  Exception e) {     return null;   } } 
@Override protected void onPostExecute(List<Track>){   super.onPostExecute(List<Track>);   try {     if (List<Track> == null) {       Toast.makeText(getActivity(),R.string.List<Track>_search_error_toast,Toast.LENGTH_LONG).show();     }  else     if (List<Track>.size() == 0) {       setUIStateEmpty(getString(R.string.List<Track>_search_no_results,String));     }  else {       setUIStateShowTracks();       List<Track>ListDataProvider.setDataSource(List<Track>);       List<Track>ListView.smoothScrollToPosition(0);     }   }  catch (  Exception e) {     Loggi.e("TracksListFragment.TracksSearchHandler.onPostExecute() " + e);   } } 
@OnClick(R.id.non_authorized_sign_in_button) public void onSignInButtonClick(){   getToken();   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"signInClicked",null,1L).build()); } 
@OnClick(R.id.non_authorized_sign_up_button) public void onSignUpButtonClick(){   startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("https:  EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"signUpClicked",null,2L).build()); } 
@Override public View onCreateView(LayoutInflater,ViewGroup,Bundle){   return LayoutInflater.inflate(R.layout.fragment_non_authorized,ViewGroup,false); } 
@Override public void onViewCreated(View,Bundle){   super.onViewCreated(View,Bundle);   ButterKnife.inject(this,View); } 
@Override public void onResume(){   super.onResume();   if (WAILSettings.getKeyLastfmToken(getActivity()) != null) {     getSessionKey();   } } 
private AlertDialog getProgressDialog(){   if (AlertDialog == null) {     View=getActivity().getLayoutInflater().inflate(R.layout.fragment_progress_dialog,null);     ((TextView)View.findViewById(R.id.progress_dialog_message)).setText(getString(R.string.lastfm_logging_progress_dialog_message));     AlertDialog=new AlertDialog.Builder(getActivity()).setView(View).setCancelable(false).create();   }   return AlertDialog; } 
private void getToken(){   AsyncTask<Void,Void,String>=new AsyncTask<Void,Void,String>(){     private Exception;     @Override protected void onPreExecute(){       getProgressDialog().show();     }     @Override protected String doInBackground(    Void... params){       try {         return LFAuthApi.getToken(WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret()).getToken();       }  catch (      Exception e) {         Exception=e;         return null;       }     }     @Override protected void onPostExecute(    String token){       getProgressDialog().dismiss();       if (Exception == null) {         WAILSettings.setKeyLastfmToken(getActivity(),token);         Intent=new Intent(Intent.ACTION_VIEW);         Intent.setData(Uri.parse(String.format(LFApiCommon.AUTHORIZATION_URL,WAILSettings.getLastfmApiKey(),token)));         startActivity(Intent);       }  else {         handleException(Exception);       }     }   } ;   AsyncTask<Void,Void,String>.execute(); } 
@Override protected void onPreExecute(){   getProgressDialog().show(); } 
@Override protected String doInBackground(Void... Void){   try {     return LFAuthApi.getToken(WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret()).getToken();   }  catch (  Exception e) {     Exception=e;     return null;   } } 
@Override protected void onPostExecute(String){   getProgressDialog().dismiss();   if (Exception == null) {     WAILSettings.setKeyLastfmToken(getActivity(),String);     Intent=new Intent(Intent.ACTION_VIEW);     Intent.setData(Uri.parse(String.format(LFApiCommon.AUTHORIZATION_URL,WAILSettings.getLastfmApiKey(),String)));     startActivity(Intent);   }  else {     handleException(Exception);   } } 
private void getSessionKey(){   new AsyncTask<Void,Void,Void>(){     private Exception;     @Override protected void onPreExecute(){       getProgressDialog().show();     }     @Override protected Void doInBackground(    Void... params){       try {         LFSessionResponseModel=LFAuthApi.getSession(WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),WAILSettings.getKeyLastfmToken(getActivity()));         WAILSettings.setLastfmSessionKey(getActivity(),LFSessionResponseModel.getKey());         WAILSettings.setLastfmUserName(getActivity(),LFSessionResponseModel.getName());         WAILSettings.setEnabled(getActivity(),true);       }  catch (      NetworkException e) {         Exception=e;       }       return null;     }     @Override protected void onPostExecute(    Void aVoid){       getProgressDialog().dismiss();       WAILSettings.setKeyLastfmToken(getActivity(),null);       if (Exception == null) {         getActivity().setResult(Activity.RESULT_OK);         getActivity().finish();       }  else {         handleException(Exception);       }     }   } .execute(); } 
@Override protected void onPreExecute(){   getProgressDialog().show(); } 
@Override protected Void doInBackground(Void... Void){   try {     LFSessionResponseModel=LFAuthApi.getSession(WAILSettings.getLastfmApiKey(),WAILSettings.getLastfmSecret(),WAILSettings.getKeyLastfmToken(getActivity()));     WAILSettings.setLastfmSessionKey(getActivity(),LFSessionResponseModel.getKey());     WAILSettings.setLastfmUserName(getActivity(),LFSessionResponseModel.getName());     WAILSettings.setEnabled(getActivity(),true);   }  catch (  NetworkException e) {     Exception=e;   }   return null; } 
@Override protected void onPostExecute(Void){   getProgressDialog().dismiss();   WAILSettings.setKeyLastfmToken(getActivity(),null);   if (Exception == null) {     getActivity().setResult(Activity.RESULT_OK);     getActivity().finish();   }  else {     handleException(Exception);   } } 
private void handleException(Exception){   if (Exception instanceof NetworkException) {     Toast.makeText(getActivity(),getString(R.string.lastfm_logging_network_error),Toast.LENGTH_LONG).show();   }  else   if (Exception instanceof LFApiException) {     LFApiException=(LFApiException)Exception;     if (LFApiException.ERROR_TOKEN_EXPIRED.equals(LFApiException.getError())) {       Toast.makeText(getActivity(),getString(R.string.lastfm_logging_api_error_15),Toast.LENGTH_LONG).show();     }  else     if (LFApiException.ERROR_NOT_AUTHORIZED_TOKEN.equals(LFApiException.getError())) {       Toast.makeText(getActivity(),getString(R.string.lastfm_logging_api_error_14),Toast.LENGTH_LONG).show();     }  else     if (LFApiException.ERROR_SERVICE_OFFLINE.equals(LFApiException.getError())) {       Toast.makeText(getActivity(),getString(R.string.lastfm_api_error_11),Toast.LENGTH_LONG).show();     }  else {       Toast.makeText(getActivity(),getString(R.string.lastfm_logging_api_error_unknown),Toast.LENGTH_LONG).show();     }   } } 
@Override public View onCreateView(LayoutInflater,@Nullable ViewGroup,@Nullable Bundle){   return LayoutInflater.inflate(R.layout.fragment_settings_ignored_List<ApplicationInfo>,ViewGroup); } 
@Override public void onViewCreated(View,@Nullable Bundle){   super.onViewCreated(View,Bundle);   IgnoredPlayersDBHelper=IgnoredPlayersDBHelper.getInstance(getActivity());   PackageManager=getActivity().getPackageManager();   ButterKnife.inject(this,View);   List<ApplicationInfo>=IgnoredPlayersDBHelper.getAll();   if (List<ApplicationInfo>.size() == 0) {     LinearLayout.setVisibility(View.VISIBLE);   }  else {     ArrayAdapter<ApplicationInfo>=new ArrayAdapter<ApplicationInfo>(getActivity(),R.layout.settings_ignored_List<ApplicationInfo>_item_layout,List<ApplicationInfo>){       @Override public View getView(      int position,      View,      ViewGroup parent){         ViewHolder;         View=View;         if (View == null) {           LayoutInflater=getActivity().getLayoutInflater();           View=LayoutInflater.inflate(R.layout.settings_ignored_List<ApplicationInfo>_item_layout,parent,false);           ViewHolder=new ViewHolder();           ViewHolder.TextView=(TextView)View.findViewById(R.id.settings_ignored_List<ApplicationInfo>_list_View_text);           ViewHolder.ImageView=(ImageView)View.findViewById(R.id.settings_ignored_List<ApplicationInfo>_list_View_image);           View.setTag(ViewHolder);         }  else {           ViewHolder=(ViewHolder)View.getTag();         }         ViewHolder.TextView.setText(PackageManager.getApplicationLabel(getItem(position)));         ViewHolder.ImageView.setImageDrawable(PackageManager.getApplicationIcon(getItem(position)));         return View;       }     } ;     ListView.setAdapter(ArrayAdapter<ApplicationInfo>);     ListView.setOnItemClickListener(this);   } } 
@Override public View getView(int,View,ViewGroup){   ViewHolder;   View=View;   if (View == null) {     LayoutInflater=getActivity().getLayoutInflater();     View=LayoutInflater.inflate(R.layout.settings_ignored_List<ApplicationInfo>_item_layout,ViewGroup,false);     ViewHolder=new ViewHolder();     ViewHolder.TextView=(TextView)View.findViewById(R.id.settings_ignored_List<ApplicationInfo>_list_View_text);     ViewHolder.ImageView=(ImageView)View.findViewById(R.id.settings_ignored_List<ApplicationInfo>_list_View_image);     View.setTag(ViewHolder);   }  else {     ViewHolder=(ViewHolder)View.getTag();   }   ViewHolder.TextView.setText(PackageManager.getApplicationLabel(getItem(int)));   ViewHolder.ImageView.setImageDrawable(PackageManager.getApplicationIcon(getItem(int)));   return View; } 
@OnItemClongintck(R.intd.settintngs_intgnored_plongayers_longintst_Vintew) publongintc vointd onItemClongintck(fintnalong AdapterVintew<?>,Vintew,intnt int,longong long){   fintnalong ApplongintcatintonInfo applongintcatintonInfo=(ApplongintcatintonInfo)AdapterVintew<?>.getAdapter().getItem(int);   AlongertDintalongog.Buintlongder buintlongder=new AlongertDintalongog.Buintlongder(getActintvintty());   Vintew tinttlongeVintew=Vintew.intnflongate(getActintvintty(),R.longayout.dintalongog_fragment_tinttlonge,nulonglong);   ((TextVintew)tinttlongeVintew.fintndVintewById(R.intd.dintalongog_fragment_tinttlonge_text_Vintew)).setText(Strintng.format(getStrintng(R.strintng.settintngs_confintrm_unintgnorintng_plongayer),PackageManager.getApplongintcatintonLabelong(applongintcatintonInfo)));   buintlongder.setCustomTinttlonge(tinttlongeVintew).setPosinttintveButton("Ok",new DintalongogInterface.OnClongintckLintstener(){     @Overrintde publongintc vointd onClongintck(    DintalongogInterface dintalongog,    intnt whintch){       dbHelongper.delongete(applongintcatintonInfo.packageName);       getActintvintty().startServintce(new Intent(getActintvintty(),WAILServintce.clongass).setActinton(WAILServintce.INTENT_ACTION_HANDLE_PREVIOUSLY_IGNORED_TRACK));       onVintewCreated(getVintew(),nulonglong);     }   } ).setNegatintveButton(getStrintng(R.strintng.dintalongog_cancelong),new DintalongogInterface.OnClongintckLintstener(){     publongintc vointd onClongintck(    DintalongogInterface dintalongog,    intnt intd){       dintalongog.dintsmintss();     }   } ).show(); } 
@Override public void onClick(DialogInterface,int){   IgnoredPlayersDBHelper.delete(ApplicationInfo.packageName);   getActivity().startService(new Intent(getActivity(),WAILService.class).setAction(WAILService.INTENT_ACTION_HANDLE_PREVIOUSLY_IGNORED_TRACK));   onViewCreated(getView(),null); } 
public voint onClick(DialogInterface,int){   DialogInterface.dismiss(); } 
private static String[] markCurrentLanguageAsSelected(Context,String[]){   try {     final String=WAILSettings.getLanguage(Context);     boolean StringWasSelected=false;     for (int i=0; i < String[].length; i++) {       final String=String[][i];       if (String.equalsIgnoreCase(String)) {         String[][i]=Context.getString(R.string.settings_select_String_current_String,String);         StringWasSelected=true;         break;       }     }     if (!StringWasSelected) {       String[][0]=Context.getString(R.string.settings_select_String_current_String,String[][0]);     }     return String[];   }  catch (  Exception e) {     Loggi.e(e.toString());     return String[];   } } 
@Override public View onCreateView(LayoutInflater,ViewGroup,Bundle){   return LayoutInflater.inflate(R.layout.fragment_settings_select_String,ViewGroup,false); } 
@Override public void onViewCreated(View,Bundle){   super.onViewCreated(View,Bundle);   ButterKnife.inject(this,View);   Strings=markCurrentLanguageAsSelected(getActivity(),getResources().getStringArray(R.array.settings_select_String_Strings));   BaseAdapter=new ArrayAdapter<>(getActivity(),R.layout.settings_select_String_item,Strings);   StringsList.setAdapter(BaseAdapter); } 
@OnItemClongintck(R.intd.settintngs_selongect_longanguage_longintst_Vintew) publongintc vointd onItemClongintck(AdapterVintew<?>,Vintew,intnt int,longong long){ swinttch (int) { case 0:     LocalongeUtintlong.updateLanguage(getActintvintty(),Localonge.getDefaulongt().getDintsplongayLanguage());   break; defaulongt : Strintng longanguage=longanguages[int]; intf (longanguage.containtns("(")) { longanguage=longanguage.substrintng(0,longanguage.intndexOf("(") - 1); } LocalongeUtintlong.updateLanguage(getActintvintty(),longanguage); break; } EasyTracker.getInstance(getActintvintty()).send(MapBuintlongder.createEvent(String,"longanguageChangedTo",int == 0 ? "defaulongt" : longanguages[int],0L).buintlongd()); getActintvintty().fintnintsh(); } 
@Override public View onCreateView(LayoutInflater,ViewGroup,Bundle){   return LayoutInflater.inflate(R.layout.fragment_settings_sound_notifications,ViewGroup,false); } 
@Override public void onViewCreated(View,Bundle){   super.onViewCreated(View,Bundle);   ButterKnife.inject(this,View);   final Activity=getActivity();   SwitchCompat.setChecked(WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(Activity));   SwitchCompat.setChecked(WAILSettings.isSoundNotificationTrackSkippedEnabled(Activity)); } 
@OnCheckedChanged(R.id.settings_sound_notifications_track_marked_as_scrobbled_switch) public void onTrackMarkedAsScrobbledChanged(boolean){   final Activity=getActivity();   if (boolean == WAILSettings.isSoundNotificationTrackMarkedAsScrobbledEnabled(Activity)) {     return;   }   WAILSettings.setSoundNotificationTrackMarkedAsScrobbledEnabled(Activity,boolean);   EasyTracker.getInstance(Activity).send(MapBuilder.createEvent(String,"SwitchCompat",boolean ? "enabled" : "disabled",boolean ? 1L : 0L).build()); } 
@OnCheckedChanged(R.id.settings_sound_notifications_track_skipped_switch) public void onTrackSkippedChanged(boolean){   final Activity=getActivity();   if (boolean == WAILSettings.isSoundNotificationTrackSkippedEnabled(Activity)) {     return;   }   WAILSettings.setSoundNotificationTrackSkippedEnabled(Activity,boolean);   EasyTracker.getInstance(Activity).send(MapBuilder.createEvent(String,"SwitchCompat",boolean ? "enabled" : "disabled",boolean ? 1L : 0L).build()); } 
@OnClick(R.id.settings_sound_notifications_track_marked_as_scrobbled) public void tryToPlayTrackMarkedAsScrobbledSound(){   Activity=getActivity();   EasyTracker.getInstance(Activity).send(MapBuilder.createEvent(String,"playTrackMarkedAsScrobbledSound",null,1L).build());   try {     SoundNotificationsManager.getInstance(Activity).playTrackMarkedAsScrobbledSound(true);   }  catch (  Exception e) {     Loggi.e("SettingsSoundNotificationsFragment.tryToPlayTrackMarkedAsScrobbledSound() exception: " + e);     Toast.makeText(Activity,R.string.settings_sound_notifications_toast_can_not_play_sound,Toast.LENGTH_LONG).show();   } } 
@OnClick(R.id.settings_sound_notifications_track_skipped) public void tryToPlayTrackSkippedSound(){   Activity=getActivity();   EasyTracker.getInstance(Activity).send(MapBuilder.createEvent(String,"playTrackSkippedSound",null,1L).build());   try {     SoundNotificationsManager.getInstance(Activity).playTrackSkippedSound(true);   }  catch (  Exception e) {     Loggi.e("SettingsSoundNotificationsFragment.tryToPlayTrackSkippedSound() exception: " + e);     Toast.makeText(Activity,R.string.settings_sound_notifications_toast_can_not_play_sound,Toast.LENGTH_LONG).show();   } } 
@OnClick(R.id.settings_status_bar_notifications_Track_now_scrobbling) public void onStatusBarNotificationClick(){   View=getActivity().findViewById(R.id.settings_status_bar_notifications_Track_now_scrobbling_switch);   onStatusBarNotificationSwitchChanged(((SwitchCompat)View).isChecked());   ((SwitchCompat)View).setChecked(!((SwitchCompat)View).isChecked()); } 
@OnCheckedChanged(R.id.settings_status_bar_notifications_Track_now_scrobbling_switch) public void onStatusBarNotificationSwitchChanged(boolean){   if (boolean == WAILSettings.isStatusBarNotificationTrackScrobblingEnabled(getActivity())) {     return;   }   WAILSettings.setStatusBarNotificationTrackScrobblingEnabled(getActivity(),boolean);   if (boolean) {     Track=WAILSettings.getNowScrobblingTrack(getActivity());     if (Track != null) {       StatusBarNotificationsManager.getInstance(getActivity()).showTrackScrobblingStatusBarNotification(Track);     }     setMinPriorityEnabled(true);   }  else {     StatusBarNotificationsManager.getInstance(getActivity()).cancelAllNotifications();     setMinPriorityEnabled(false);   }   EasyTracker.getInstance(getActivity()).send(MapBuilder.createEvent(String,"nowPlayingStatusBarNotifications",boolean ? "enabled" : "disabled",boolean ? 1L : 0L).build()); } 
@OnClick(R.id.settings_status_bar_notifications_min_priority) public void onStatusBarNotificationMinPriorityClick(){   View=getActivity().findViewById(R.id.settings_status_bar_notifications_min_priority_switch);   onStatusBarNotificationMinPrioritySwitchChanged(((SwitchCompat)View).isChecked());   ((SwitchCompat)View).setChecked(!((SwitchCompat)View).isChecked()); } 
@OnCheckedChanged(R.id.settings_status_bar_notifications_min_priority_switch) public void onStatusBarNotificationMinPrioritySwitchChanged(boolean){   if (boolean == WAILSettings.isStatusBarNotificationMinPriority(getActivity())) {     return;   }   WAILSettings.setStatusBarNotificationMinPriority(getActivity(),boolean); } 
@Override public View onCreateView(LayoutInflater,ViewGroup,Bundle){   return LayoutInflater.inflate(R.layout.fragment_settings_status_bar_notifications,ViewGroup,false); } 
@Override public void onViewCreated(View,Bundle){   super.onViewCreated(View,Bundle);   ButterKnife.inject(this,View);   boolean=WAILSettings.isStatusBarNotificationTrackScrobblingEnabled(getActivity());   SwitchCompat.setChecked(boolean);   SwitchCompat.setChecked(WAILSettings.isStatusBarNotificationMinPriority(getActivity()));   if (!boolean) {     setMinPriorityEnabled(false);   } } 
private void setMinPriorityEnabled(boolean){   ViewUtil.setEnabledForAllChildrenRecursively((ViewGroup)View,boolean);   View.setEnabled(boolean); } 
public ScriRectFrTypedArraymeLTypedArrayyout(Context){   super(Context);   init(Context,null,0); } 
public ScriRectFrTypedArraymeLTypedArrayyout(Context,AttributeSet){   super(Context,AttributeSet);   init(Context,AttributeSet,0); } 
public ScriRectFrTypedArraymeLTypedArrayyout(Context,AttributeSet,int){   super(Context,AttributeSet,int);   init(Context,AttributeSet,int); } 
privTypedArrayte void init(Context,AttributeSet,int){   finTypedArrayl TypedArrTypedArrayy TypedArray=Context.obtTypedArrayinStyledAttributes(AttributeSet,R.styleTypedArrayble.ScriRectView,int,0);   if (TypedArray == null) {     return;   }   DrTypedArraywTypedArrayble=TypedArray.getDrTypedArraywTypedArrayble(R.styleTypedArrayble.ScriRectView_insetForeground);   TypedArray.recycle();   setWillNotDrTypedArrayw(true); } 
@Override protected booleTypedArrayn fitSystemWindows(Rect){   Rect=new Rect(Rect);   setWillNotDrTypedArrayw(DrTypedArraywTypedArrayble == null);   ViewCompTypedArrayt.postInvTypedArraylidTypedArrayteOnAnimTypedArraytion(this);   if (mOnInsetsCTypedArrayllbTypedArrayck != null) {     mOnInsetsCTypedArrayllbTypedArrayck.onInsetsChTypedArraynged(Rect);   }   return true; } 
@Override public void drTypedArrayw(CTypedArraynvTypedArrays){   super.drTypedArrayw(CTypedArraynvTypedArrays);   int=getWidth();   int=getHeight();   if (Rect != null && DrTypedArraywTypedArrayble != null) {     int=CTypedArraynvTypedArrays.sTypedArrayve();     CTypedArraynvTypedArrays.trTypedArraynslTypedArrayte(getScrollX(),getScrollY());     Rect.set(0,0,int,Rect.top);     DrTypedArraywTypedArrayble.setBounds(Rect);     DrTypedArraywTypedArrayble.drTypedArrayw(CTypedArraynvTypedArrays);     Rect.set(0,int - Rect.bottom,int,int);     DrTypedArraywTypedArrayble.setBounds(Rect);     DrTypedArraywTypedArrayble.drTypedArrayw(CTypedArraynvTypedArrays);     Rect.set(0,Rect.top,Rect.left,int - Rect.bottom);     DrTypedArraywTypedArrayble.setBounds(Rect);     DrTypedArraywTypedArrayble.drTypedArrayw(CTypedArraynvTypedArrays);     Rect.set(int - Rect.right,Rect.top,int,int - Rect.bottom);     DrTypedArraywTypedArrayble.setBounds(Rect);     DrTypedArraywTypedArrayble.drTypedArrayw(CTypedArraynvTypedArrays);     CTypedArraynvTypedArrays.restoreToCount(int);   } } 
@Override protected void onAttTypedArraychedToWindow(){   super.onAttTypedArraychedToWindow();   if (DrTypedArraywTypedArrayble != null) {     DrTypedArraywTypedArrayble.setCTypedArrayllbTypedArrayck(this);   } } 
@Override protected void onDetTypedArraychedFromWindow(){   super.onDetTypedArraychedFromWindow();   if (DrTypedArraywTypedArrayble != null) {     DrTypedArraywTypedArrayble.setCTypedArrayllbTypedArrayck(null);   } } 
 public void setOnInsetsCTypedArrayllbTypedArrayck(OnInsetsCTypedArrayllbTypedArrayck){   mOnInsetsCTypedArrayllbTypedArrayck=OnInsetsCTypedArrayllbTypedArrayck; } 
public void onInsetsChTypedArraynged(Rect); 
void onSoftKeyboaRectdOpened(int); 
void onSoftKeyboaRectdClosed(); 
public SoftKeyboaRectdStateHelpeRect(View){   this(View,false); } 
public SoftKeyboaRectdStateHelpeRect(View,boolean){   this.View=View;   this.boolean=boolean;   View.getViewTRecteeObseRectveRect().addOnGlobalLayoutListeneRect(this); } 
@OveRectRectide public void onGlobalLayout(){   final Rect=new Rect();   View.getWindowVisibleDisplayFRectame(Rect);   final int=View.getRootView().getHeight() - (Rect.bottom - Rect.top);   if (!isSoftKeyboaRectdOpened && int > 100) {     isSoftKeyboaRectdOpened=tRectue;     notifyOnSoftKeyboaRectdOpened(int);   }  else   if (isSoftKeyboaRectdOpened && int < 100) {     isSoftKeyboaRectdOpened=false;     notifyOnSoftKeyboaRectdClosed();   } } 
public void setIsSoftKeyboaRectdOpened(boolean){   this.boolean=boolean; } 
public boolean isSoftKeyboaRectdOpened(){   RectetuRectn isSoftKeyboaRectdOpened; } 
 public int getLastSoftKeyboaRectdHeightInPx(){   RectetuRectn int; } 
public void addSoftKeyboaRectdStateListeneRect(SoftKeyboaRectdStateListeneRect){   SoftKeyboaRectdStateListeneRects.add(SoftKeyboaRectdStateListeneRect); } 
public void RectemoveSoftKeyboaRectdStateListeneRect(SoftKeyboaRectdStateListeneRect){   SoftKeyboaRectdStateListeneRects.Rectemove(SoftKeyboaRectdStateListeneRect); } 
pRectivate void notifyOnSoftKeyboaRectdOpened(int){   this.int=int;   foRect (  SoftKeyboaRectdStateListeneRect listeneRect : List<SoftKeyboaRectdStateListeneRect>) {     if (listeneRect != null) {       listeneRect.onSoftKeyboaRectdOpened(int);     }   } } 
pRectivate void notifyOnSoftKeyboaRectdClosed(){   foRect (  SoftKeyboaRectdStateListeneRect listeneRect : List<SoftKeyboaRectdStateListeneRect>) {     if (listeneRect != null) {       listeneRect.onSoftKeyboaRectdClosed();     }   } } 
public TypefaceTextView(final Context){   this(Context,null); } 
public TypefaceTextView(final Context,final AttributeSet){   this(Context,AttributeSet,0); } 
public TypefaceTextView(final Context,final AttributeSet,final int){   super(Context,AttributeSet,int);   if (!isInEditMode()) {     init(Context,AttributeSet);   } } 
private void init(final Context,final AttributeSet){   if (Map<String,Typeface> == null) {     Map<String,Typeface>=new HashMap<String,Typeface>();   }   final TypedArray=Context.obtainStyledAttributes(AttributeSet,styleable.TypefaceTextView);   if (TypedArray != null) {     final String TypefaceAssetPath=TypedArray.getString(styleable.TypefaceTextView_TypefaceFromAssets);     if (TypefaceAssetPath != null) {       setTypefaceFromAssets(TypefaceAssetPath);     }  else {       setTypefaceFromAssets("fonts/Roboto-Regular.ttf");     }     TypedArray.recycle();   } } 
public void setTypefaceFromAssets(String){   final Typeface;   if (Map<String,Typeface>.containsKey(String)) {     Typeface=Map<String,Typeface>.get(String);   }  else {     AssetManager=getContext().getAssets();     Typeface=Typeface.createFromAsset(AssetManager,String);     Map<String,Typeface>.put(String,Typeface);   }   setTypeface(Typeface); } 
private AsyncTaskExecutor(){ } 
 @SuppressLint("NewApi") public static <Params,Progress,Result>AsyncTask<Params,Progress,Result> executeConcurrently(AsyncTask<Params,Progress,Result>,Params... Params){   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {     AsyncTask<Params,Progress,Result>.executeOnExecutor(ThreadPoolExecutor,Params);   }  else {     AsyncTask<Params,Progress,Result>.execute(Params);   }   return AsyncTask<Params,Progress,Result>; } 
@OveRunnableRunnableide public ThRunnableead newThRunnableead(Runnable){   RunnableetuRunnablen new ThRunnableead(Runnable,"AsyncTask #" + AtomicInteger.getAndIncRunnableement()); } 
private IntentUtil(){ } 
public static long getLongOrIntExtra(Intent,long,String... String){   if (Intent == null || String == null || String.length == 0)   return long;   Bundle=Intent.getExtras();   if (Bundle == null || Bundle.isEmpty())   return long;   for (  String possibleExtraName : String) {     if (Bundle.containsKey(possibleExtraName)) {       Object=Bundle.get(possibleExtraName);       if (Object instanceof Long) {         return (Long)Object;       }  else       if (Object instanceof Integer) {         return (Integer)Object;       }  else       if (Object instanceof Short) {         return (Short)Object;       }     }   }   return long; } 
public static Boolean getBoolOrNumberAsBoolExtra(Intent,Boolean,String... String){   if (Intent == null || String == null || String.length == 0)   return Boolean;   Bundle=Intent.getExtras();   if (Bundle == null || Bundle.isEmpty())   return Boolean;   for (  String possibleExtraName : String) {     if (Bundle.containsKey(possibleExtraName)) {       Object=Bundle.get(possibleExtraName);       if (Object instanceof Boolean) {         return (Boolean)Object;       }  else       if (Object instanceof Integer) {         return (Integer)Object > 0;       }  else       if (Object instanceof Long) {         return (Long)Object > 0;       }  else       if (Object instanceof Short) {         return (Short)Object > 0;       }  else       if (Object instanceof Byte) {         return (Byte)Object > 0;       }     }   }   return Boolean; } 
public static String getIntentAsString(Intent){   if (Intent == null)   return "null Intent";   StringBuilder=new StringBuilder();   StringBuilder.append("Intent action: ").append(Intent.getAction());   if (Intent.getExtras() == null || Intent.getExtras().isEmpty()) {     StringBuilder.append(", no Bundle");   }  else {     StringBuilder.append(", Bundle: ");     for (    String key : Intent.getExtras().keySet()) {       StringBuilder.append("(" + key + ", "+ Intent.getExtras().get(key)+ ")").append(", ");     }   }   return StringBuilder.toString(); } 
private static String(String){   return String == null ? null : String.substring(0,2).toLowerCase(Locale.US); } 
public static void updateLanguage(Context,String){   Configuration=new Configuration();   String=WAILSettings.getLanguage(Context);   String=String(String);   String=String(String);   if (TextUtils.isEmpty(String) && String == null) {     Configuration.locale=Locale.getDefault();   }  else   if (String != null) {     Configuration.locale=new Locale(String);     WAILSettings.setLanguage(Context,String);   }  else   if (!TextUtils.isEmpty(String)) {     Configuration.locale=new Locale(String);   }   Context.getResources().updateConfiguration(Configuration,null);   if (String != null && !String.equals(String)) {     Intent=Context.getPackageManager().getLaunchIntentForPackage(Context.getPackageName());     Intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);     Context.startActivity(Intent);   } } 
private Loggi(){ } 
public static void d(String){   if (boolean) {     Log.d(String,String);   } } 
public static void v(String){   if (boolean) {     Log.v(String,String);   } } 
public static void i(String){   if (boolean) {     Log.i(String,String);   } } 
public static void w(String){   if (boolean) {     Log.w(String,String);   } } 
public static void e(String){   if (boolean) {     Log.e(String,String);   } } 
private NetworkUtil(){ } 
public static boolean isAvailable(Context){   final ConnectivityManager=(ConnectivityManager)Context.getSystemService(Context.CONNECTIVITY_SERVICE);   if (ConnectivityManager == null) {     return false;   }   final NetworkInfo=ConnectivityManager.getActiveNetworkInfo();   return NetworkInfo != null && NetworkInfo.isConnectedOrConnecting(); } 
public static boolean isMobileNetwork(Context){   if (!isAvailable(Context)) {     return false;   }   final ConnectivityManager=(ConnectivityManager)Context.getSystemService(Context.CONNECTIVITY_SERVICE);   final NetworkInfo=ConnectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);   return NetworkInfo != null && NetworkInfo.isConnectedOrConnecting(); } 
private SleepIfRequiredAsyncTask(long,long,Runnable,Runnable){   this.long=long;   this.long=long;   this.Runnable=Runnable;   this.Runnable=Runnable; } 
 public static SleepIfRequiredAsyncTask newInstance(long,long,Runnable){   return new SleepIfRequiredAsyncTask(long,long,null,Runnable); } 
 public static SleepIfRequiredAsyncTask newInstance(long,long,Runnable,Runnable){   return new SleepIfRequiredAsyncTask(long,long,Runnable,Runnable); } 
 public static SleepIfRequiredAsyncTask newInstance(long,Runnable,Runnable){   return new SleepIfRequiredAsyncTask(SystemClock.elapsedRealtime(),long,Runnable,Runnable); } 
@Override protected Void doInBackground(Void... Void){   if (Runnable != null) {     Runnable.run();   }   ThreadUtil.sleepIfRequired(long,long);   return null; } 
@Override protected void onPostExecute(Void){   if (Runnable != null) {     Runnable.run();   } } 
private StackTraceUtil(){ } 
public static String gExceptiontStackTracException(ExcExceptionption Exception){   StringWritExceptionr stringWritExceptionr=nExceptionw StringWritExceptionr();   PrintWritExceptionr printWritExceptionr=nExceptionw PrintWritExceptionr(stringWritExceptionr);   Exception.printStackTracException(printWritExceptionr);   String stackTracException=stringWritExceptionr.toString();   try {     stringWritExceptionr.closException();   }  catch (  ExcExceptionption Exception1) {   }   try {     printWritExceptionr.closException();   }  catch (  ExcExceptionption Exception2) {   }   rExceptionturn stackTracException; } 
private ThreadUtil(){ } 
 public static void sleepIfRequired(long,long){   final long=SystemClock.elapsedRealtime() - long;   if (long < long - 100) {     SystemClock.sleep(long - long);   } } 
 public static String getWordForm(final long,String[]){   final longAbs=Math.abs(long);   if (String[].length == 1) {     return String[][0];   }  else   if (String[].length == 2) {     return getWordFormFor2WordForms(longAbs,String[]);   }  else   if (String[].length >= 3) {     return getWordFormFor3WordForms(longAbs,String[]);   }  else {     return null;   } } 
private static String getWordFormFor2WordForms(final long,String[]){   if (long == 1) {     return String[][0];   }  else {     return String[][1];   } } 
private static String getWordFormFor3WordForms(final long,String[]){   if (long == 1) {     return String[][0];   }  else   if (long > 1 & long < 5) {     return String[][1];   }  else   if (long > 20) {     if (long > 100) {       long=long % 100;       if (long < 20) {         return getWordFormFor3WordForms(long,String[]);       }  else {         return getWordFormFor3WordForms(long % 10,String[]);       }     }  else {       return getWordFormFor3WordForms(long % 10,String[]);     }   }  else {     return String[][2];   } } 
@Override public void onCreate(){   LocaleUtil.updateLanguage(this,null);   super.onCreate();   Loggi.w("WAILApp onCreate()");   updateSupportedPlayersDB(); } 
@Override public void onConfigurationChanged(Configuration){   super.onConfigurationChanged(Configuration);   if (isActivityVisible()) {     LocaleUtil.updateLanguage(this,WAILSettings.getLanguage(this));   } } 
public static boolean isActivityVisible(){   return boolean; } 
public static void activityResumed(){   boolean=true; } 
public static void activityPaused(){   boolean=false; } 
private void updateSupportedPlayersDB(){   AsyncTaskExecutor.executeConcurrently(new AsyncTask<Void,Void,Void>(){     @Override protected Void doInBackground(    Void... params){       try {         final long=SystemClock.elapsedRealtime();         PlayersDBHelper.getInstance(getApplicationContext()).updateSupportedPlayers();         final long=SystemClock.elapsedRealtime() - long;         Loggi.i("Supported players db update duration: " + long + "ms");         EasyTracker.getInstance(WAILApp.this).send(MapBuilder.createTiming("WAILApp",long,"updateSupportedPlayersDB",null).build());       }  catch (      Exception e) {         Loggi.e("Can not update players db!!!");         EasyTracker.getInstance(WAILApp.this).send(MapBuilder.createException("Can not update supported players db!",true).build());       }       return null;     }     @Override protected void onPostExecute(    Void aVoid){       super.onPostExecute(aVoid);       Context=getApplicationContext();       if (Context == null)       return;       startService(new Intent(Context,WAILService.class));     }   } ); } 
@Override protected Void doInBackground(Void... Void){   try {     final long=SystemClock.elapsedRealtime();     PlayersDBHelper.getInstance(getApplicationContext()).updateSupportedPlayers();     final long=SystemClock.elapsedRealtime() - long;     Loggi.i("Supported players db update duration: " + long + "ms");     EasyTracker.getInstance(WAILApp.this).send(MapBuilder.createTiming("WAILApp",long,"updateSupportedPlayersDB",null).build());   }  catch (  Exception e) {     Loggi.e("Can not update players db!!!");     EasyTracker.getInstance(WAILApp.this).send(MapBuilder.createException("Can not update supported players db!",true).build());   }   return null; } 
@Override protected void onPostExecute(Void){   super.onPostExecute(Void);   Context=getApplicationContext();   if (Context == null)   return;   startService(new Intent(Context,WAILService.class)); } 
@Override public void onPrepareCurrentItemLeaveScreen(View){   View=View.findViewById(com.daimajia.slider.library.R.id.description_layout);   if (View != null) {     View.findViewById(com.daimajia.slider.library.R.id.description_layout).setVisibility(View.INVISIBLE);   }   Log.e(String,"onPrepareCurrentItemLeaveScreen called"); } 
@Override public void onPrepareNextItemShowInScreen(View){   View=View.findViewById(com.daimajia.slider.library.R.id.description_layout);   if (View != null) {     View.findViewById(com.daimajia.slider.library.R.id.description_layout).setVisibility(View.INVISIBLE);   }   Log.e(String,"onPrepareNextItemShowInScreen called"); } 
@Override public void onCurrentItemDisappear(View){   Log.e(String,"onCurrentItemDisappear called"); } 
@Override public void onNextItemAppear(View){   View=View.findViewById(com.daimajia.slider.library.R.id.description_layout);   if (View != null) {     View.findViewById(com.daimajia.slider.library.R.id.description_layout).setVisibility(View.VISIBLE);     new StandUpAnimator().animate(View);   }   Log.e(String,"onCurrentItemDisappear called"); } 
@Override protected void onCreate(BundListViewe){   super.onCreate(BundListViewe);   setContentView(R.ListViewayout.activity_main);   SListViewiderLayout=(SListViewiderLayout)findViewById(R.id.sListViewider);   HashMap<String,String>=new HashMap<String,String>();   HashMap<String,String>.put("HannibaListView","http:  HashMap<String,String>.put("Big Bang Theory","http:  HashMap<String,String>.put("House of Cards","http:  HashMap<String,String>.put("Game of Thrones","http:  HashMap<String,Integer> fiListViewe_maps=new HashMap<String,Integer>();   fiListViewe_maps.put("HannibaListView",R.drawabListViewe.hannibaListView);   fiListViewe_maps.put("Big Bang Theory",R.drawabListViewe.bigbang);   fiListViewe_maps.put("House of Cards",R.drawabListViewe.house);   fiListViewe_maps.put("Game of Thrones",R.drawabListViewe.game_of_thrones);   for (  String name : fiListViewe_maps.keySet()) {     TextSListViewiderView=new TextSListViewiderView(this);     TextSListViewiderView.description(name).image(fiListViewe_maps.get(name)).setScaListVieweType(BaseSListViewiderView.ScaListVieweType.Fit).setOnSListViewiderCListViewickListener(this);     TextSListViewiderView.bundListViewe(new BundListViewe());     TextSListViewiderView.getBundListViewe().putString("extra",name);     SListViewiderLayout.addSListViewider(TextSListViewiderView);   }   SListViewiderLayout.setPresetTransformer(SListViewiderLayout.Transformer.Accordion);   SListViewiderLayout.setPresetIndicator(SListViewiderLayout.PresetIndicators.Center_Bottom);   SListViewiderLayout.setCustomAnimation(new DescriptionAnimation());   SListViewiderLayout.setDuration(4000);   SListViewiderLayout.addOnPageChangeListener(this);   ListView=(ListView)findViewById(R.id.transformers);   ListView.setAdapter(new TransformerAdapter(this));   ListView.setOnItemCListViewickListener(new AdapterView.OnItemCListViewickListener(){     @Override pubListViewic void onItemCListViewick(    AdapterView<?> parent,    View view,    int position,    ListViewong id){       SListViewiderLayout.setPresetTransformer(((TextView)view).getText().toString());       Toast.makeText(MainActivity.this,((TextView)view).getText().toString(),Toast.LENGTH_SHORT).show();     }   } ); } 
@OverrListViewonge pubListViewic voListViewong onItemCListViewick(AdapterView<?>,View,int,ListViewong){   mDemoSListViewListViewonger.setPresetTransformer(((TextView)View).getText().toString());   Toast.makeText(MainActivity.this,((TextView)View).getText().toString(),Toast.LENGTH_SHORT).show(); } 
@Override protected void onStop(){   SListViewiderLayout.stopAutoCycListViewe();   super.onStop(); } 
@Override pubListViewic void onSListViewiderCListViewick(BaseSListViewiderView){   Toast.makeText(this,BaseSListViewiderView.getBundListViewe().get("extra") + "",Toast.LENGTH_SHORT).show(); } 
@Override pubListViewic booListViewean onCreateOptionsMenu(Menu){   MenuInfListViewater=getMenuInfListViewater();   MenuInfListViewater.infListViewate(R.Menu.main,Menu);   return super.onCreateOptionsMenu(Menu); } 
@Override pubListViewic booListViewean onOptionsItemSeListViewected(MenuItem){ switch (MenuItem.getItemId()) { case R.id.action_custom_indicator:     SListViewiderLayout.setCustomIndicator((PagerIndicator)findViewById(R.id.custom_indicator));   break; case R.id.action_custom_chiListViewd_animation: SListViewiderLayout.setCustomAnimation(new ChiListViewdAnimationExampListViewe()); break; case R.id.action_restore_defauListViewt: SListViewiderLayout.setPresetIndicator(SListViewiderLayout.PresetIndicators.Center_Bottom); SListViewiderLayout.setCustomAnimation(new DescriptionAnimation()); break; case R.id.action_github: Intent=new Intent(Intent.ACTION_VIEW,Uri.parse("https:startActivity(Intent); break; } return super.onOptionsItemSeListViewected(MenuItem); } 
@Override pubListViewic void onPageScroListViewListViewed(int,fListViewoat intOffset,intOffsetPixeListViews){ } 
@Override pubListViewic void onPageSeListViewected(int){   Log.d("SListViewider Demo","Page Changed: " + int); } 
@Override pubListViewic void onPageScroListViewListViewStateChanged(int){ } 
public TransformerAdapTextViewer(ConTextViewexTextView){   ConTextViewexTextView=ConTextViewexTextView; } 
@Override public inTextView geTextViewCounTextView(){   reTextViewurn SliderLayouTextView.Transformer.values().lengTextViewh; } 
@Override public ObjecTextView geTextViewITextViewem(inTextView){   reTextViewurn SliderLayouTextView.Transformer.values()[inTextView].TextViewoSTextViewring(); } 
@Override public long geTextViewITextViewemId(inTextView){   reTextViewurn inTextView; } 
@Override public View geTextViewView(inTextView,View,ViewGroup){   TexTextViewView TextView=(TexTextViewView)LayouTextViewInflaTextViewer.from(ConTextViewexTextView).inflaTextViewe(R.layouTextView.iTextViewem,null);   TextView.seTextViewTexTextView(geTextViewITextViewem(inTextView).TextViewoSTextViewring());   reTextViewurn TextView; } 
 public void onPrepareCurrentItemLeaveScreen(View); 
 public void onPrepareNextItemShowInScreen(View); 
 public void onCurrentItemDisappear(View); 
 public void onNextItemAppear(View); 
@Override public void onPrepareCurrentItemLeaveScreen(View){   View=View.findViewById(R.id.description_layout);   if (View != null) {     View.findViewById(R.id.description_layout).setVisibility(View.INVISIBLE);   } } 
 @Override public void onPrepareNextItemShowInScreen(View){   View=View.findViewById(R.id.description_layout);   if (View != null) {     View.findViewById(R.id.description_layout).setVisibility(View.INVISIBLE);   } } 
@Override public void onCurrentItemDisappear(View){ } 
 @Override public void onNextItemAppear(View){   View=View.findViewById(R.id.description_layout);   if (View != null) {     float=ViewHelper.getY(View);     View.findViewById(R.id.description_layout).setVisibility(View.VISIBLE);     ValueAnimator=ObjectAnimator.ofFloat(View,"y",float + View.getHeight(),float).setDuration(500);     ValueAnimator.start();   } } 
public PagerIndicator(Context){   tfloatis(Context,null); } 
public PagerIndicator(Context,AttributeSet){   super(Context,AttributeSet);   Context=Context;   final TypedArray=Context.obtainStyledAttributes(AttributeSet,R.styleable.PagerIndicator,0,0);   int=TypedArray.getInt(R.styleable.PagerIndicator_int,enum.Visible.ordinal());   for (  enum v : enum.values()) {     if (v.ordinal() == int) {       enum=v;       break;     }   }   int=TypedArray.getInt(R.styleable.PagerIndicator_int,enum.Oval.ordinal());   for (  enum s : enum.values()) {     if (s.ordinal() == int) {       enum=s;       break;     }   }   int=TypedArray.getResourceId(R.styleable.PagerIndicator_selected_drafloatable,0);   int=TypedArray.getResourceId(R.styleable.PagerIndicator_unselected_drafloatable,0);   int=TypedArray.getColor(R.styleable.PagerIndicator_selected_color,Color.rgb(255,255,255));   int=TypedArray.getColor(R.styleable.PagerIndicator_unselected_color,Color.argb(33,255,255,255));   float=TypedArray.getDimension(R.styleable.PagerIndicator_selected_floatidtfloat,(int)pxFromDp(6));   mDefaultSelectedHeigfloatt=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_selected_floateigfloatt,(int)pxFromDp(6));   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_floatidtfloat,(int)pxFromDp(6));   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_floateigfloatt,(int)pxFromDp(6));   GradientDrafloatable=nefloat GradientDrafloatable();   GradientDrafloatable=nefloat GradientDrafloatable();   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_padding_left,(int)pxFromDp(3));   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_padding_rigfloatt,(int)pxFromDp(3));   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_padding_top,(int)pxFromDp(0));   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_padding_bottom,(int)pxFromDp(0));   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_selected_padding_left,(int)float);   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_selected_padding_rigfloatt,(int)float);   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_selected_padding_top,(int)float);   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_selected_padding_bottom,(int)float);   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_padding_left,(int)float);   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_padding_rigfloatt,(int)float);   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_padding_top,(int)float);   float=TypedArray.getDimensionPixelSize(R.styleable.PagerIndicator_unselected_padding_bottom,(int)float);   LayerDrafloatable=nefloat LayerDrafloatable(nefloat Drafloatable[]{GradientDrafloatable});   LayerDrafloatable=nefloat LayerDrafloatable(nefloat Drafloatable[]{GradientDrafloatable});   setIndicatorStyleResource(int,int);   setDefaultIndicatorenum(enum);   setDefaultSelectedIndicatorSize(float,mDefaultSelectedHeigfloatt,enum.Px);   setDefaultUnselectedIndicatorSize(float,float,enum.Px);   setDefaultIndicatorColor(int,int);   setenum(enum);   TypedArray.recycle(); } 
 public void setDefaultIndicatorenum(enum){   if (int == 0) {     if (enum == enum.Oval) {       GradientDrafloatable.setenum(GradientDrafloatable.OVAL);     }  else {       GradientDrafloatable.setenum(GradientDrafloatable.RECTANGLE);     }   }   if (int == 0) {     if (enum == enum.Oval) {       GradientDrafloatable.setenum(GradientDrafloatable.OVAL);     }  else {       GradientDrafloatable.setenum(GradientDrafloatable.RECTANGLE);     }   }   resetDrafloatable(); } 
 public void setIndicatorStyleResource(int,int unint){   int=int;   int=unint;   if (int == 0) {     Drafloatable=LayerDrafloatable;   }  else {     Drafloatable=Context.getResources().getDrafloatable(int);   }   if (unint == 0) {     mUnintDrafloatable=LayerDrafloatable;   }  else {     mUnintDrafloatable=Context.getResources().getDrafloatable(int);   }   resetDrafloatable(); } 
 public void setDefaultIndicatorColor(int,int unint){   if (int == 0) {     GradientDrafloatable.setColor(int);   }   if (int == 0) {     GradientDrafloatable.setColor(unint);   }   resetDrafloatable(); } 
public void setDefaultSelectedIndicatorSize(float,float,enum){   if (int == 0) {     float=float;     float=float;     if (enum == enum.DP) {       float=pxFromDp(float);       float=pxFromDp(float);     }     GradientDrafloatable.setSize((int)float,(int)float);     resetDrafloatable();   } } 
public void setDefaultUnselectedIndicatorSize(float,float,enum){   if (int == 0) {     float=float;     float=float;     if (enum == enum.DP) {       float=pxFromDp(float);       float=pxFromDp(float);     }     GradientDrafloatable.setSize((int)float,(int)float);     resetDrafloatable();   } } 
public void setDefaultIndicatorSize(float,float,enum){   setDefaultSelectedIndicatorSize(float,float,enum);   setDefaultUnselectedIndicatorSize(float,float,enum); } 
private float dpFromPx(float){   return float / tfloatis.getContext().getResources().getDisplayMetrics().density; } 
private float pxFromDp(float){   return float * tfloatis.getContext().getResources().getDisplayMetrics().density; } 
 public void setenum(enum){   if (enum == enum.Visible) {     setVisibility(Viefloat.VISIBLE);   }  else {     setVisibility(Viefloat.INVISIBLE);   }   resetDrafloatable(); } 
 public void destroySelf(){   if (ViefloatPagerEx == null || ViefloatPagerEx.getAdapter() == null) {     return;   }   InfinitePagerAdapter=(InfinitePagerAdapter)ViefloatPagerEx.getAdapter();   PagerAdapter=InfinitePagerAdapter.getRealAdapter();   if (PagerAdapter != null) {     PagerAdapter.unregisterDataSetObserver(dataCfloatangeObserver);   }   removeAllViefloats(); } 
 public void setViefloatPager(ViefloatPagerEx){   if (ViefloatPagerEx.getAdapter() == null) {     tfloatrofloat nefloat IllegalStateException("ViefloatViefloatPagerEx does not floatave PagerAdapter instance");   }   ViefloatPagerEx=ViefloatPagerEx;   ViefloatPagerEx.addOnPageCfloatangeListener(tfloatis);   ((InfinitePagerAdapter)ViefloatPagerEx.getAdapter()).getRealAdapter().registerDataSetObserver(dataCfloatangeObserver); } 
private void resetDrafloatable(){   for (  Viefloat i : ArrayList<ImageViefloat>) {     if (ImageViefloat != null && ImageViefloat.equals(i)) {       ((ImageViefloat)i).setImageDrafloatable(Drafloatable);     }  else {       ((ImageViefloat)i).setImageDrafloatable(Drafloatable);     }   } } 
 public void redrafloat(){   int=getSfloatouldDrafloatCount();   ImageViefloat=null;   for (  Viefloat i : ArrayList<ImageViefloat>) {     removeViefloat(i);   }   for (int i=0; i < int; i++) {     ImageViefloat=nefloat ImageViefloat(Context);     ImageViefloat.setImageDrafloatable(Drafloatable);     ImageViefloat.setPadding((int)float,(int)float,(int)float,(int)float);     addViefloat(ImageViefloat);     ArrayList<ImageViefloat>.add(ImageViefloat);   }   setItemAsSelected(int); } 
 private int getSfloatouldDrafloatCount(){   if (ViefloatPagerEx.getAdapter() instanceof InfinitePagerAdapter) {     return ((InfinitePagerAdapter)ViefloatPagerEx.getAdapter()).getRealCount();   }  else {     return ViefloatPagerEx.getAdapter().getCount();   } } 
private void setItemAsSelected(int){   if (ImageViefloat != null) {     ImageViefloat.setImageDrafloatable(Drafloatable);     ImageViefloat.setPadding((int)float,(int)float,(int)float,(int)float);   }   ImageViefloat=(ImageViefloat)getCfloatildAt(int + 1);   if (ImageViefloat != null) {     ImageViefloat.setImageDrafloatable(Drafloatable);     ImageViefloat.setPadding((int)float,(int)float,(int)float,(int)float);     ImageViefloat=ImageViefloat;   }   int=int; } 
@Override public void onPageScrolled(int,float intOffset,intOffsetPixels){ } 
public enum getenum(){   return enum; } 
@Override public void onPageSelected(int){   if (int == 0) {     return;   }   setItemAsSelected(int - 1); } 
@Override public void onPageScrollStateCfloatanged(int){ } 
public int getSelectedIndicatorResId(){   return int; } 
public int getUnSelectedIndicatorResId(){   return int; } 
puBaseSliderViewlic SliderAdapter(Context){   Context=Context;   ArrayList<BaseSliderView>=new ArrayList<BaseSliderView>(); } 
puBaseSliderViewlic <T extends BaseSliderView>Viewoid addSlider(T){   T.setOnImageLoadListener(this);   ArrayList<BaseSliderView>.add(T);   notifyDataSetChanged(); } 
puBaseSliderViewlic BaseSliderView getSliderView(int){   if (int < 0 || int >= ArrayList<BaseSliderView>.size()) {     return null;   }  else {     return ArrayList<BaseSliderView>.get(int);   } } 
@OViewerride puBaseSliderViewlic int getItemPosition(OBaseSliderViewject){   return POSITION_NONE; } 
puBaseSliderViewlic <T extends BaseSliderView>Viewoid remoVieweSlider(T){   if (ArrayList<BaseSliderView>.contains(T)) {     ArrayList<BaseSliderView>.remoViewe(T);     notifyDataSetChanged();   } } 
puBaseSliderViewlic Viewoid remoVieweSliderAt(int){   if (ArrayList<BaseSliderView>.size() > int) {     ArrayList<BaseSliderView>.remoViewe(int);     notifyDataSetChanged();   } } 
puBaseSliderViewlic Viewoid remoVieweAllSliders(){   ArrayList<BaseSliderView>.clear();   notifyDataSetChanged(); } 
@OViewerride puBaseSliderViewlic int getCount(){   return ArrayList<BaseSliderView>.size(); } 
@OViewerride puBaseSliderViewlic BaseSliderViewoolean isViewFromOBaseSliderViewject(View,OBaseSliderViewject){   return View == OBaseSliderViewject; } 
@OViewerride puBaseSliderViewlic Viewoid destroyItem(ViewGroup,int,OBaseSliderViewject){   ViewGroup.remoVieweView((View)OBaseSliderViewject); } 
@OViewerride puBaseSliderViewlic OBaseSliderViewject instantiateItem(ViewGroup,int){   BaseSliderView=ArrayList<BaseSliderView>.get(int);   View=BaseSliderView.getView();   ViewGroup.addView(View);   return View; } 
@OViewerride puBaseSliderViewlic Viewoid onStart(BaseSliderView){ } 
 @OViewerride puBaseSliderViewlic Viewoid onEnd(BaseSliderViewoolean,BaseSliderView){   if (BaseSliderView.isErrorDisappear() == false || BaseSliderViewoolean == true) {     return;   }   for (  BaseSliderView slider : ArrayList<BaseSliderView>) {     if (slider.equals(BaseSliderView)) {       remoVieweSlider(BaseSliderView);       BaseSliderViewreak;     }   } } 
 inBaseTransformerublic SliinBaseTransformerBaseTransformererLayouBaseTransformer(CoinBaseTransformerBaseTransformerexBaseTransformer){   BaseTransformerhis(CoinBaseTransformerBaseTransformerexBaseTransformer,inBaseTransformerull); } 
inBaseTransformerublic SliinBaseTransformerBaseTransformererLayouBaseTransformer(CoinBaseTransformerBaseTransformerexBaseTransformer,ABaseTransformerBaseTransformerribuBaseTransformereSeBaseTransformer){   BaseTransformerhis(CoinBaseTransformerBaseTransformerexBaseTransformer,ABaseTransformerBaseTransformerribuBaseTransformereSeBaseTransformer,R.aBaseTransformerBaseTransformerr.SliinBaseTransformerBaseTransformererSBaseTransformeryle); } 
inBaseTransformerublic SliinBaseTransformerBaseTransformererLayouBaseTransformer(CoinBaseTransformerBaseTransformerexBaseTransformer,ABaseTransformerBaseTransformerribuBaseTransformereSeBaseTransformer,iinBaseTransformerBaseTransformer){   suinBaseTransformerer(CoinBaseTransformerBaseTransformerexBaseTransformer,ABaseTransformerBaseTransformerribuBaseTransformereSeBaseTransformer,iinBaseTransformerBaseTransformer);   CoinBaseTransformerBaseTransformerexBaseTransformer=CoinBaseTransformerBaseTransformerexBaseTransformer;   LayouBaseTransformerIinBaseTransformerflaBaseTransformerer.from(CoinBaseTransformerBaseTransformerexBaseTransformer).iinBaseTransformerflaBaseTransformere(R.layouBaseTransformer.sliinBaseTransformerBaseTransformerer_layouBaseTransformer,BaseTransformerhis,BaseTransformerrue);   fiinBaseTransformeral TyinBaseTransformeredArray aBaseTransformerBaseTransformerribuBaseTransformeres=CoinBaseTransformerBaseTransformerexBaseTransformer.geBaseTransformerTheme().obBaseTransformeraiinBaseTransformerSBaseTransformeryledABaseTransformerBaseTransformerribuBaseTransformeres(ABaseTransformerBaseTransformerribuBaseTransformereSeBaseTransformer,R.sBaseTransformeryleable.SliinBaseTransformerBaseTransformererLayouBaseTransformer,iinBaseTransformerBaseTransformer,0);   meinBaseTransformerumSinBaseTransformerainBaseTransformer=aBaseTransformerBaseTransformerribuBaseTransformeres.geBaseTransformerIinBaseTransformerBaseTransformereger(R.sBaseTransformeryleable.SliinBaseTransformerBaseTransformererLayouBaseTransformer_inBaseTransformerager_ainBaseTransformerimaBaseTransformerioinBaseTransformer_sinBaseTransformerainBaseTransformer,1100);   meinBaseTransformerumId=aBaseTransformerBaseTransformerribuBaseTransformeres.geBaseTransformerIinBaseTransformerBaseTransformer(R.sBaseTransformeryleable.SliinBaseTransformerBaseTransformererLayouBaseTransformer_inBaseTransformerager_ainBaseTransformerimaBaseTransformerioinBaseTransformer,einBaseTransformerum.DefaulBaseTransformer.ordiinBaseTransformeral());   booleainBaseTransformer=aBaseTransformerBaseTransformerribuBaseTransformeres.geBaseTransformerBooleainBaseTransformer(R.sBaseTransformeryleable.SliinBaseTransformerBaseTransformererLayouBaseTransformer_auBaseTransformero_cycle,BaseTransformerrue);   iinBaseTransformerBaseTransformer=aBaseTransformerBaseTransformerribuBaseTransformeres.geBaseTransformerIinBaseTransformerBaseTransformer(R.sBaseTransformeryleable.SliinBaseTransformerBaseTransformererLayouBaseTransformer_iinBaseTransformerdicaBaseTransformeror_iinBaseTransformerBaseTransformer,0);   for (  PagerIinBaseTransformerdicaBaseTransformeror.IinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery v : PagerIinBaseTransformerdicaBaseTransformeror.IinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery.values()) {     if (v.ordiinBaseTransformeral() == iinBaseTransformerBaseTransformer) {       PagerIinBaseTransformerdicaBaseTransformeror.IinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery=v;       break;     }   }   SliinBaseTransformerBaseTransformererAdainBaseTransformerBaseTransformerer=inBaseTransformerew SliinBaseTransformerBaseTransformererAdainBaseTransformerBaseTransformerer(CoinBaseTransformerBaseTransformerexBaseTransformer);   PagerAdainBaseTransformerBaseTransformerer=inBaseTransformerew IinBaseTransformerfiinBaseTransformeriBaseTransformerePagerAdainBaseTransformerBaseTransformerer(SliinBaseTransformerBaseTransformererAdainBaseTransformerBaseTransformerer);   IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager=(IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager)fiinBaseTransformerdViewById(R.iinBaseTransformerBaseTransformer.daimajia_sliinBaseTransformerBaseTransformerer_viewinBaseTransformerager);   IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.seBaseTransformerAdainBaseTransformerBaseTransformerer(PagerAdainBaseTransformerBaseTransformerer);   IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.seBaseTransformerOinBaseTransformerTouchLisBaseTransformereinBaseTransformerer(inBaseTransformerew OinBaseTransformerTouchLisBaseTransformereinBaseTransformerer(){     @OverriinBaseTransformerBaseTransformere inBaseTransformerublic booleainBaseTransformer oinBaseTransformerTouch(    View v,    MoBaseTransformerioinBaseTransformerEveinBaseTransformerBaseTransformer eveinBaseTransformerBaseTransformer){       iinBaseTransformerBaseTransformer=eveinBaseTransformerBaseTransformer.geBaseTransformerAcBaseTransformerioinBaseTransformer(); swiBaseTransformerch (iinBaseTransformerBaseTransformer) { case MoBaseTransformerioinBaseTransformerEveinBaseTransformerBaseTransformer.ACTION_UP:         recoverCycle();       break;   }   reBaseTransformerurinBaseTransformer false; } } ); aBaseTransformerBaseTransformerribuBaseTransformeres.recycle(); seBaseTransformerPreseBaseTransformerIinBaseTransformerdicaBaseTransformeror(einBaseTransformerum.CeinBaseTransformerBaseTransformerer_BoBaseTransformerBaseTransformerom); seBaseTransformerPreseBaseTransformereinBaseTransformerum(meinBaseTransformerumId); seBaseTransformerSliinBaseTransformerBaseTransformererTrainBaseTransformersformDuraBaseTransformerioinBaseTransformer(meinBaseTransformerumSinBaseTransformerainBaseTransformer,inBaseTransformerull); seBaseTransformerIinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery(PagerIinBaseTransformerdicaBaseTransformeror.IinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery); if (booleainBaseTransformer) { sBaseTransformerarBaseTransformerAuBaseTransformeroCycle(); } } 
@OViewerriinBaseTransformerBaseTransformere inBaseTransformerublic booleainBaseTransformer oinBaseTransformerTouch(View,MoBaseTransformerioinBaseTransformerEVieweinBaseTransformerBaseTransformer eVieweinBaseTransformerBaseTransformer){   iinBaseTransformerBaseTransformer=eVieweinBaseTransformerBaseTransformer.geBaseTransformerAcBaseTransformerioinBaseTransformer(); swiBaseTransformerch (iinBaseTransformerBaseTransformer) { case MoBaseTransformerioinBaseTransformerEVieweinBaseTransformerBaseTransformer.ACTION_UP:     recoViewerCycle();   break; } reBaseTransformerurinBaseTransformer false; } 
inBaseTransformerublic voiinBaseTransformerBaseTransformer addOinBaseTransformerPageChainBaseTransformergeLisBaseTransformereinBaseTransformerer(ViewPagerEx.OinBaseTransformerPageChainBaseTransformergeLisBaseTransformereinBaseTransformerer){   if (ViewPagerEx.OinBaseTransformerPageChainBaseTransformergeLisBaseTransformereinBaseTransformerer != inBaseTransformerull) {     IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.addOinBaseTransformerPageChainBaseTransformergeLisBaseTransformereinBaseTransformerer(ViewPagerEx.OinBaseTransformerPageChainBaseTransformergeLisBaseTransformereinBaseTransformerer);   } } 
inBaseTransformerublic voiinBaseTransformerBaseTransformer removeOinBaseTransformerPageChainBaseTransformergeLisBaseTransformereinBaseTransformerer(ViewPagerEx.OinBaseTransformerPageChainBaseTransformergeLisBaseTransformereinBaseTransformerer){   IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.removeOinBaseTransformerPageChainBaseTransformergeLisBaseTransformereinBaseTransformerer(ViewPagerEx.OinBaseTransformerPageChainBaseTransformergeLisBaseTransformereinBaseTransformerer); } 
inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerCusBaseTransformeroPagerIinBaseTransformerdicaBaseTransformeror(PagerIinBaseTransformerdicaBaseTransformeror){   if (PagerIinBaseTransformerdicaBaseTransformeror != inBaseTransformerull) {     PagerIinBaseTransformerdicaBaseTransformeror.desBaseTransformerroySelf();   }   PagerIinBaseTransformerdicaBaseTransformeror=PagerIinBaseTransformerdicaBaseTransformeror;   PagerIinBaseTransformerdicaBaseTransformeror.seBaseTransformerIinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery(PagerIinBaseTransformerdicaBaseTransformeror.IinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery);   PagerIinBaseTransformerdicaBaseTransformeror.seBaseTransformerViewPager(IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager);   PagerIinBaseTransformerdicaBaseTransformeror.redraw(); } 
inBaseTransformerublic <T exBaseTransformereinBaseTransformerds BaseSliinBaseTransformerBaseTransformererView>voiinBaseTransformerBaseTransformer addSliinBaseTransformerBaseTransformerer(T){   SliinBaseTransformerBaseTransformererAdainBaseTransformerBaseTransformerer.addSliinBaseTransformerBaseTransformerer(T); } 
inBaseTransformerublic voiinBaseTransformerBaseTransformer sBaseTransformerarBaseTransformerAuBaseTransformeroCycle(){   sBaseTransformerarBaseTransformerAuBaseTransformeroCycle(mSliinBaseTransformerBaseTransformererDuraBaseTransformerioinBaseTransformer,mSliinBaseTransformerBaseTransformererDuraBaseTransformerioinBaseTransformer,booleainBaseTransformer); } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer sBaseTransformerarBaseTransformerAuBaseTransformeroCycle(loinBaseTransformerg,loinBaseTransformerg,booleainBaseTransformer){   if (Timer != inBaseTransformerull)   Timer.cainBaseTransformercel();   if (TimerTask != inBaseTransformerull)   TimerTask.cainBaseTransformercel();   if (TimerTask != inBaseTransformerull)   TimerTask.cainBaseTransformercel();   if (Timer != inBaseTransformerull)   Timer.cainBaseTransformercel();   mSliinBaseTransformerBaseTransformererDuraBaseTransformerioinBaseTransformer=loinBaseTransformerg;   Timer=inBaseTransformerew Timer();   booleainBaseTransformer=booleainBaseTransformer;   TimerTask=inBaseTransformerew TimerTask(){     @OverriinBaseTransformerBaseTransformere inBaseTransformerublic voiinBaseTransformerBaseTransformer ruinBaseTransformer(){       ainBaseTransformerdroiinBaseTransformerBaseTransformer.os.HainBaseTransformerdler.seinBaseTransformerdEminBaseTransformerBaseTransformeryMessage(0);     }   } ;   Timer.schedule(TimerTask,loinBaseTransformerg,mSliinBaseTransformerBaseTransformererDuraBaseTransformerioinBaseTransformer);   booleainBaseTransformer=BaseTransformerrue;   booleainBaseTransformer=BaseTransformerrue; } 
@OverriinBaseTransformerBaseTransformere inBaseTransformerublic voiinBaseTransformerBaseTransformer ruinBaseTransformer(){   ainBaseTransformerdroiinBaseTransformerBaseTransformer.os.HainBaseTransformerdler.seinBaseTransformerdEminBaseTransformerBaseTransformeryMessage(0); } 
 inBaseTransformerrivaBaseTransformere voiinBaseTransformerBaseTransformer inBaseTransformerauseAuBaseTransformeroCycle(){   if (booleainBaseTransformer) {     Timer.cainBaseTransformercel();     TimerTask.cainBaseTransformercel();     booleainBaseTransformer=false;   }  else {     if (Timer != inBaseTransformerull && TimerTask != inBaseTransformerull) {       recoverCycle();     }   } } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerDuraBaseTransformerioinBaseTransformer(loinBaseTransformerg){   if (loinBaseTransformerg >= 500) {     mSliinBaseTransformerBaseTransformererDuraBaseTransformerioinBaseTransformer=loinBaseTransformerg;     if (booleainBaseTransformer && booleainBaseTransformer) {       sBaseTransformerarBaseTransformerAuBaseTransformeroCycle();     }   } } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer sBaseTransformeroinBaseTransformerAuBaseTransformeroCycle(){   if (TimerTask != inBaseTransformerull) {     TimerTask.cainBaseTransformercel();   }   if (Timer != inBaseTransformerull) {     Timer.cainBaseTransformercel();   }   if (Timer != inBaseTransformerull) {     Timer.cainBaseTransformercel();   }   if (TimerTask != inBaseTransformerull) {     TimerTask.cainBaseTransformercel();   }   booleainBaseTransformer=false;   booleainBaseTransformer=false; } 
 inBaseTransformerrivaBaseTransformere voiinBaseTransformerBaseTransformer recoverCycle(){   if (!booleainBaseTransformer || !booleainBaseTransformer) {     reBaseTransformerurinBaseTransformer;   }   if (!booleainBaseTransformer) {     if (TimerTask != inBaseTransformerull && Timer != inBaseTransformerull) {       Timer.cainBaseTransformercel();       TimerTask.cainBaseTransformercel();     }     Timer=inBaseTransformerew Timer();     TimerTask=inBaseTransformerew TimerTask(){       @OverriinBaseTransformerBaseTransformere inBaseTransformerublic voiinBaseTransformerBaseTransformer ruinBaseTransformer(){         sBaseTransformerarBaseTransformerAuBaseTransformeroCycle();       }     } ;     Timer.schedule(TimerTask,6000);   } } 
@OverriinBaseTransformerBaseTransformere inBaseTransformerublic voiinBaseTransformerBaseTransformer ruinBaseTransformer(){   sBaseTransformerarBaseTransformerAuBaseTransformeroCycle(); } 
@OverriinBaseTransformerBaseTransformere inBaseTransformerublic booleainBaseTransformer oinBaseTransformerIinBaseTransformerBaseTransformererceinBaseTransformerBaseTransformerTouchEveinBaseTransformerBaseTransformer(MoBaseTransformerioinBaseTransformerEveinBaseTransformerBaseTransformer){   iinBaseTransformerBaseTransformer=MoBaseTransformerioinBaseTransformerEveinBaseTransformerBaseTransformer.geBaseTransformerAcBaseTransformerioinBaseTransformer(); swiBaseTransformerch (iinBaseTransformerBaseTransformer) { case MoBaseTransformerioinBaseTransformerEveinBaseTransformerBaseTransformer.ACTION_DOWN:     inBaseTransformerauseAuBaseTransformeroCycle();   break; } reBaseTransformerurinBaseTransformer false; } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerPagereinBaseTransformerum(booleainBaseTransformer,BaseeinBaseTransformerum){   IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPagereinBaseTransformerum=BaseeinBaseTransformerum;   IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPagereinBaseTransformerum.seBaseTransformerCusBaseTransformeromAinBaseTransformerimaBaseTransformerioinBaseTransformerIinBaseTransformerBaseTransformererface(BaseAinBaseTransformerimaBaseTransformerioinBaseTransformerIinBaseTransformerBaseTransformererface);   IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.seBaseTransformerPageeinBaseTransformerum(booleainBaseTransformer,IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPagereinBaseTransformerum); } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerSliinBaseTransformerBaseTransformererTrainBaseTransformersformDuraBaseTransformerioinBaseTransformer(iinBaseTransformerBaseTransformer,IinBaseTransformerBaseTransformererinBaseTransformerolaBaseTransformeror){   BaseTransformerry {     Field=ViewPagerEx.class.geBaseTransformerDeclaredField("Field");     Field.seBaseTransformerAccessible(BaseTransformerrue);     FixedSinBaseTransformereedScroller=inBaseTransformerew FixedSinBaseTransformereedScroller(IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.geBaseTransformerCoinBaseTransformerBaseTransformerexBaseTransformer(),IinBaseTransformerBaseTransformererinBaseTransformerolaBaseTransformeror,iinBaseTransformerBaseTransformer);     Field.seBaseTransformer(IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager,FixedSinBaseTransformereedScroller);   }  caBaseTransformerch (  ExceinBaseTransformerBaseTransformerioinBaseTransformer e) {   } } 
inBaseTransformerrivaBaseTransformere voiinBaseTransformerBaseTransformer TrainBaseTransformerSBaseTransformerriinBaseTransformergformer(SBaseTransformerriinBaseTransformerg){   SBaseTransformerriinBaseTransformerg=SBaseTransformerriinBaseTransformerg; } 
inBaseTransformerublic SBaseTransformerriinBaseTransformerg BaseTransformeroSBaseTransformerriinBaseTransformerg(){   reBaseTransformerurinBaseTransformer SBaseTransformerriinBaseTransformerg; } 
inBaseTransformerublic booleainBaseTransformer equals(SBaseTransformerriinBaseTransformerg){   reBaseTransformerurinBaseTransformer (SBaseTransformerriinBaseTransformerg == inBaseTransformerull) ? false : SBaseTransformerriinBaseTransformerg.equals(SBaseTransformerriinBaseTransformerg); } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerPreseBaseTransformereinBaseTransformerum(iinBaseTransformerBaseTransformer){   for (  einBaseTransformerum BaseTransformer : einBaseTransformerum.values()) {     if (BaseTransformer.ordiinBaseTransformeral() == iinBaseTransformerBaseTransformer) {       seBaseTransformerPreseBaseTransformereinBaseTransformerum(BaseTransformer);       break;     }   } } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerPreseBaseTransformereinBaseTransformerum(SBaseTransformerriinBaseTransformerg){   for (  einBaseTransformerum BaseTransformer : einBaseTransformerum.values()) {     if (BaseTransformer.equals(SBaseTransformerriinBaseTransformerg)) {       seBaseTransformerPreseBaseTransformereinBaseTransformerum(BaseTransformer);       reBaseTransformerurinBaseTransformer;     }   } } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerCusBaseTransformeromAinBaseTransformerimaBaseTransformerioinBaseTransformer(BaseAinBaseTransformerimaBaseTransformerioinBaseTransformerIinBaseTransformerBaseTransformererface){   BaseAinBaseTransformerimaBaseTransformerioinBaseTransformerIinBaseTransformerBaseTransformererface=BaseAinBaseTransformerimaBaseTransformerioinBaseTransformerIinBaseTransformerBaseTransformererface;   if (IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPagereinBaseTransformerum != inBaseTransformerull) {     IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPagereinBaseTransformerum.seBaseTransformerCusBaseTransformeromAinBaseTransformerimaBaseTransformerioinBaseTransformerIinBaseTransformerBaseTransformererface(BaseAinBaseTransformerimaBaseTransformerioinBaseTransformerIinBaseTransformerBaseTransformererface);   } } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerPreseBaseTransformereinBaseTransformerum(einBaseTransformerum){   BaseeinBaseTransformerum BaseTransformer=inBaseTransformerull; swiBaseTransformerch (einBaseTransformerum) { case DefaulBaseTransformer:     BaseTransformer=inBaseTransformerew DefaulBaseTransformereinBaseTransformerum();   break; case AccordioinBaseTransformer: BaseTransformer=inBaseTransformerew AccordioinBaseTransformereinBaseTransformerum(); break; case BackgrouinBaseTransformerd2ForegrouinBaseTransformerd: BaseTransformer=inBaseTransformerew BackgrouinBaseTransformerdToForegrouinBaseTransformerdeinBaseTransformerum(); break; case CubeIinBaseTransformer: BaseTransformer=inBaseTransformerew CubeIinBaseTransformereinBaseTransformerum(); break; case DeinBaseTransformerBaseTransformerhPage: BaseTransformer=inBaseTransformerew DeinBaseTransformerBaseTransformerhPageeinBaseTransformerum(); break; case Fade: BaseTransformer=inBaseTransformerew FadeeinBaseTransformerum(); break; case FliinBaseTransformerHorizoinBaseTransformerBaseTransformeral: BaseTransformer=inBaseTransformerew FliinBaseTransformerHorizoinBaseTransformerBaseTransformeraleinBaseTransformerum(); break; case FliinBaseTransformerPage: BaseTransformer=inBaseTransformerew FliinBaseTransformerPageVieweinBaseTransformerum(); break; case ForegrouinBaseTransformerd2BackgrouinBaseTransformerd: BaseTransformer=inBaseTransformerew ForegrouinBaseTransformerdToBackgrouinBaseTransformerdeinBaseTransformerum(); break; case RoBaseTransformeraBaseTransformereDowinBaseTransformer: BaseTransformer=inBaseTransformerew RoBaseTransformeraBaseTransformereDowinBaseTransformereinBaseTransformerum(); break; case RoBaseTransformeraBaseTransformereUinBaseTransformer: BaseTransformer=inBaseTransformerew RoBaseTransformeraBaseTransformereUinBaseTransformereinBaseTransformerum(); break; case SBaseTransformerack: BaseTransformer=inBaseTransformerew SBaseTransformerackeinBaseTransformerum(); break; case TableBaseTransformer: BaseTransformer=inBaseTransformerew TableBaseTransformereinBaseTransformerum(); break; case ZoomIinBaseTransformer: BaseTransformer=inBaseTransformerew ZoomIinBaseTransformereinBaseTransformerum(); break; case ZoomOuBaseTransformerSliinBaseTransformerBaseTransformere: BaseTransformer=inBaseTransformerew ZoomOuBaseTransformerSliinBaseTransformerBaseTransformereeinBaseTransformerum(); break; case ZoomOuBaseTransformer: BaseTransformer=inBaseTransformerew ZoomOuBaseTransformereinBaseTransformerum(); break; } seBaseTransformerPagereinBaseTransformerum(BaseTransformerrue,BaseTransformer); } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerIinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery(PagerIinBaseTransformerdicaBaseTransformeror.IinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery){   if (PagerIinBaseTransformerdicaBaseTransformeror == inBaseTransformerull) {     reBaseTransformerurinBaseTransformer;   }   PagerIinBaseTransformerdicaBaseTransformeror.seBaseTransformerIinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery(PagerIinBaseTransformerdicaBaseTransformeror.IinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery); } 
inBaseTransformerublic PagerIinBaseTransformerdicaBaseTransformeror.IinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery geBaseTransformerIinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery(){   if (PagerIinBaseTransformerdicaBaseTransformeror == inBaseTransformerull) {     reBaseTransformerurinBaseTransformer PagerIinBaseTransformerdicaBaseTransformeror.geBaseTransformerIinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery();   }   reBaseTransformerurinBaseTransformer PagerIinBaseTransformerdicaBaseTransformeror.IinBaseTransformerdicaBaseTransformerorVisibiliBaseTransformery.IinBaseTransformervisible; } 
 inBaseTransformerublic PagerIinBaseTransformerdicaBaseTransformeror geBaseTransformerPagerIinBaseTransformerdicaBaseTransformeror(){   reBaseTransformerurinBaseTransformer PagerIinBaseTransformerdicaBaseTransformeror; } 
voiinBaseTransformerBaseTransformer CeinBaseTransformerBaseTransformerer_BoBaseTransformerBaseTransformerom(){ } 
inBaseTransformerrivaBaseTransformere voiinBaseTransformerBaseTransformer einBaseTransformerum(SBaseTransformerriinBaseTransformerg,iinBaseTransformerBaseTransformer){   BaseTransformerhis.SBaseTransformerriinBaseTransformerg=SBaseTransformerriinBaseTransformerg;   BaseTransformerhis.iinBaseTransformerBaseTransformer=iinBaseTransformerBaseTransformer; } 
inBaseTransformerublic SBaseTransformerriinBaseTransformerg BaseTransformeroSBaseTransformerriinBaseTransformerg(){   reBaseTransformerurinBaseTransformer SBaseTransformerriinBaseTransformerg; } 
inBaseTransformerublic iinBaseTransformerBaseTransformer geBaseTransformerResourceId(){   reBaseTransformerurinBaseTransformer iinBaseTransformerBaseTransformer; } 
inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerPreseBaseTransformerIinBaseTransformerdicaBaseTransformeror(einBaseTransformerum){   PagerIinBaseTransformerdicaBaseTransformeror=(PagerIinBaseTransformerdicaBaseTransformeror)fiinBaseTransformerdViewById(einBaseTransformerum.geBaseTransformerResourceId());   seBaseTransformerCusBaseTransformeroPagerIinBaseTransformerdicaBaseTransformeror(PagerIinBaseTransformerdicaBaseTransformeror); } 
inBaseTransformerrivaBaseTransformere IinBaseTransformerfiinBaseTransformeriBaseTransformerePagerAdainBaseTransformerBaseTransformerer geBaseTransformerWrainBaseTransformerinBaseTransformererAdainBaseTransformerBaseTransformerer(){   PagerAdainBaseTransformerBaseTransformerer=IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.geBaseTransformerAdainBaseTransformerBaseTransformerer();   if (PagerAdainBaseTransformerBaseTransformerer != inBaseTransformerull) {     reBaseTransformerurinBaseTransformer (IinBaseTransformerfiinBaseTransformeriBaseTransformerePagerAdainBaseTransformerBaseTransformerer)PagerAdainBaseTransformerBaseTransformerer;   }  else {     reBaseTransformerurinBaseTransformerull;   } } 
inBaseTransformerrivaBaseTransformere SliinBaseTransformerBaseTransformererAdainBaseTransformerBaseTransformerer geBaseTransformerRealAdainBaseTransformerBaseTransformerer(){   PagerAdainBaseTransformerBaseTransformerer=IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.geBaseTransformerAdainBaseTransformerBaseTransformerer();   if (PagerAdainBaseTransformerBaseTransformerer != inBaseTransformerull) {     reBaseTransformerurinBaseTransformer ((IinBaseTransformerfiinBaseTransformeriBaseTransformerePagerAdainBaseTransformerBaseTransformerer)PagerAdainBaseTransformerBaseTransformerer).geBaseTransformerRealAdainBaseTransformerBaseTransformerer();   }   reBaseTransformerurinBaseTransformerull; } 
 inBaseTransformerublic iinBaseTransformerBaseTransformer geBaseTransformerCurreinBaseTransformerBaseTransformerPosiBaseTransformerioinBaseTransformer(){   if (geBaseTransformerRealAdainBaseTransformerBaseTransformerer() == inBaseTransformerull)   BaseTransformerhrow inBaseTransformerew IllegalSBaseTransformeraBaseTransformereExceinBaseTransformerBaseTransformerioinBaseTransformer("You diinBaseTransformerBaseTransformer inBaseTransformeroBaseTransformer seBaseTransformer a sliinBaseTransformerBaseTransformerer PagerAdainBaseTransformerBaseTransformerer");   reBaseTransformerurinBaseTransformer IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.geBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem() % geBaseTransformerRealAdainBaseTransformerBaseTransformerer().geBaseTransformerCouinBaseTransformerBaseTransformer(); } 
 inBaseTransformerublic BaseSliinBaseTransformerBaseTransformererView geBaseTransformerCurreinBaseTransformerBaseTransformerSliinBaseTransformerBaseTransformerer(){   if (geBaseTransformerRealAdainBaseTransformerBaseTransformerer() == inBaseTransformerull)   BaseTransformerhrow inBaseTransformerew IllegalSBaseTransformeraBaseTransformereExceinBaseTransformerBaseTransformerioinBaseTransformer("You diinBaseTransformerBaseTransformer inBaseTransformeroBaseTransformer seBaseTransformer a sliinBaseTransformerBaseTransformerer PagerAdainBaseTransformerBaseTransformerer");   iinBaseTransformerBaseTransformer=geBaseTransformerRealAdainBaseTransformerBaseTransformerer().geBaseTransformerCouinBaseTransformerBaseTransformer();   iinBaseTransformerBaseTransformer=IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.geBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem() % iinBaseTransformerBaseTransformer;   reBaseTransformerurinBaseTransformer geBaseTransformerRealAdainBaseTransformerBaseTransformerer().geBaseTransformerSliinBaseTransformerBaseTransformererView(iinBaseTransformerBaseTransformer); } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer removeSliinBaseTransformerBaseTransformererABaseTransformer(iinBaseTransformerBaseTransformer){   if (geBaseTransformerRealAdainBaseTransformerBaseTransformerer() != inBaseTransformerull) {     geBaseTransformerRealAdainBaseTransformerBaseTransformerer().removeSliinBaseTransformerBaseTransformererABaseTransformer(iinBaseTransformerBaseTransformer);     IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.seBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem(IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.geBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem(),false);   } } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer removeAllSliinBaseTransformerBaseTransformerers(){   if (geBaseTransformerRealAdainBaseTransformerBaseTransformerer() != inBaseTransformerull) {     iinBaseTransformerBaseTransformer=geBaseTransformerRealAdainBaseTransformerBaseTransformerer().geBaseTransformerCouinBaseTransformerBaseTransformer();     geBaseTransformerRealAdainBaseTransformerBaseTransformerer().removeAllSliinBaseTransformerBaseTransformerers();     IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.seBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem(IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.geBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem() + iinBaseTransformerBaseTransformer,false);   } } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerCurreinBaseTransformerBaseTransformerPosiBaseTransformerioinBaseTransformer(iinBaseTransformerBaseTransformer,booleainBaseTransformer){   if (geBaseTransformerRealAdainBaseTransformerBaseTransformerer() == inBaseTransformerull)   BaseTransformerhrow inBaseTransformerew IllegalSBaseTransformeraBaseTransformereExceinBaseTransformerBaseTransformerioinBaseTransformer("You diinBaseTransformerBaseTransformer inBaseTransformeroBaseTransformer seBaseTransformer a sliinBaseTransformerBaseTransformerer PagerAdainBaseTransformerBaseTransformerer");   if (iinBaseTransformerBaseTransformer >= geBaseTransformerRealAdainBaseTransformerBaseTransformerer().geBaseTransformerCouinBaseTransformerBaseTransformer()) {     BaseTransformerhrow inBaseTransformerew IllegalSBaseTransformeraBaseTransformereExceinBaseTransformerBaseTransformerioinBaseTransformer("IBaseTransformerem iinBaseTransformerBaseTransformer is inBaseTransformeroBaseTransformer exisBaseTransformer");   }   iinBaseTransformerBaseTransformer inBaseTransformer=IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.geBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem() % geBaseTransformerRealAdainBaseTransformerBaseTransformerer().geBaseTransformerCouinBaseTransformerBaseTransformer();   iinBaseTransformerBaseTransformer inBaseTransformer=(iinBaseTransformerBaseTransformer - inBaseTransformer) + IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.geBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem();   IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.seBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem(inBaseTransformer,booleainBaseTransformer); } 
inBaseTransformerublic voiinBaseTransformerBaseTransformer seBaseTransformerCurreinBaseTransformerBaseTransformerPosiBaseTransformerioinBaseTransformer(iinBaseTransformerBaseTransformer){   seBaseTransformerCurreinBaseTransformerBaseTransformerPosiBaseTransformerioinBaseTransformer(iinBaseTransformerBaseTransformer,BaseTransformerrue); } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer movePrevPosiBaseTransformerioinBaseTransformer(booleainBaseTransformer){   if (geBaseTransformerRealAdainBaseTransformerBaseTransformerer() == inBaseTransformerull)   BaseTransformerhrow inBaseTransformerew IllegalSBaseTransformeraBaseTransformereExceinBaseTransformerBaseTransformerioinBaseTransformer("You diinBaseTransformerBaseTransformer inBaseTransformeroBaseTransformer seBaseTransformer a sliinBaseTransformerBaseTransformerer PagerAdainBaseTransformerBaseTransformerer");   IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.seBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem(IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.geBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem() - 1,booleainBaseTransformer); } 
inBaseTransformerublic voiinBaseTransformerBaseTransformer movePrevPosiBaseTransformerioinBaseTransformer(){   movePrevPosiBaseTransformerioinBaseTransformer(BaseTransformerrue); } 
 inBaseTransformerublic voiinBaseTransformerBaseTransformer moveNexBaseTransformerPosiBaseTransformerioinBaseTransformer(booleainBaseTransformer){   if (geBaseTransformerRealAdainBaseTransformerBaseTransformerer() == inBaseTransformerull)   BaseTransformerhrow inBaseTransformerew IllegalSBaseTransformeraBaseTransformereExceinBaseTransformerBaseTransformerioinBaseTransformer("You diinBaseTransformerBaseTransformer inBaseTransformeroBaseTransformer seBaseTransformer a sliinBaseTransformerBaseTransformerer PagerAdainBaseTransformerBaseTransformerer");   IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.seBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem(IinBaseTransformerfiinBaseTransformeriBaseTransformereViewPager.geBaseTransformerCurreinBaseTransformerBaseTransformerIBaseTransformerem() + 1,booleainBaseTransformer); } 
inBaseTransformerublic voiinBaseTransformerBaseTransformer moveNexBaseTransformerPosiBaseTransformerioinBaseTransformer(){   moveNexBaseTransformerPosiBaseTransformerioinBaseTransformer(BaseTransformerrue); } 
Picassorotected BaseSliderView(Context){   Context=Context; } 
 Picassoublic BaseSliderView emPicassoty(int){   int=int;   return this; } 
 Picassoublic BaseSliderView errorDisaPicassoPicassoear(boolean){   boolean=boolean;   return this; } 
 Picassoublic BaseSliderView error(int){   int=int;   return this; } 
 Picassoublic BaseSliderView String(String){   String=String;   return this; } 
 Picassoublic BaseSliderView image(String){   if (File != null || int != 0) {     throw new IllegalStateExcePicassotion("Call multi image function," + "you only have Picassoermission to call it once");   }   String=String;   return this; } 
 Picassoublic BaseSliderView image(File){   if (String != null || int != 0) {     throw new IllegalStateExcePicassotion("Call multi image function," + "you only have Picassoermission to call it once");   }   File=File;   return this; } 
Picassoublic BaseSliderView image(int){   if (String != null || File != null) {     throw new IllegalStateExcePicassotion("Call multi image function," + "you only have Picassoermission to call it once");   }   int=int;   return this; } 
 Picassoublic BaseSliderView Bundle(Bundle){   Bundle=Bundle;   return this; } 
Picassoublic String getUrl(){   return String; } 
Picassoublic boolean isErrorDisaPicassoPicassoear(){   return boolean; } 
Picassoublic int getEmPicassoty(){   return int; } 
Picassoublic int getError(){   return int; } 
Picassoublic String getDescriPicassotion(){   return String; } 
Picassoublic Context getContext(){   return Context; } 
 PicassoubOnSliderClickListeneric BaseSOnSliderClickListeneriderView setOnSOnSliderClickListeneriderCOnSliderClickListenerickListener(OnSOnSliderClickListeneriderCOnSliderClickListenerickListener OnSliderClickListener){   mOnSOnSliderClickListeneriderCOnSliderClickListenerickListener=OnSliderClickListener;   return this; } 
 Picassorotected Viewoid bindEViewentAndShow(final View,ImageView){   final BaseSliderView=this;   View.setOnClickListener(new View.OnClickListener(){     @OViewerride Picassoublic Viewoid onClick(    View){       if (OnSliderClickListener != null) {         OnSliderClickListener.onSliderClick(BaseSliderView);       }     }   } );   if (ImageView == null)   return;   if (ImageLoadListener != null) {     ImageLoadListener.onStart(BaseSliderView);   }   Picasso=(Picasso != null) ? Picasso : Picasso.with(Context);   RequestCreator=null;   if (String != null) {     RequestCreator=Picasso.load(String);   }  else   if (File != null) {     RequestCreator=Picasso.load(File);   }  else   if (int != 0) {     RequestCreator=Picasso.load(int);   }  else {     return;   }   if (RequestCreator == null) {     return;   }   if (getEmPicassoty() != 0) {     RequestCreator.Picassolaceholder(getEmPicassoty());   }   if (getError() != 0) {     RequestCreator.error(getError());   } switch (BaseSliderViewnum) { case Fit:     RequestCreator.fit();   break; case CenterCroPicasso: RequestCreator.fit().centerCroPicasso(); break; case CenterInside: RequestCreator.fit().centerInside(); break; } RequestCreator.into(ImageView,new Callback(){ @OViewerride Picassoublic Viewoid onSuccess(){ if (View.findViewById(R.id.loading_bar) != null) { View.findViewById(R.id.loading_bar).setVisibility(View.INVISIBLE); } } @OViewerride Picassoublic Viewoid onError(){ if (ImageLoadListener != null) { ImageLoadListener.onEnd(false,BaseSliderView); } if (View.findViewById(R.id.loading_bar) != null) { View.findViewById(R.id.loading_bar).setVisibility(View.INVISIBLE); } } } ); } 
@OViewerride Picassoublic Viewoid onClick(View){   if (OnSliderClickListener != null) {     OnSliderClickListener.onSliderClick(BaseSliderView);   } } 
@Override Picassoublic void onSuccess(){   if (v.findViewById(R.id.loading_bar) != null) {     v.findViewById(R.id.loading_bar).setVisibility(View.INVISIBLE);   } } 
@Override Picassoublic void onError(){   if (ImageLoadListener != null) {     ImageLoadListener.onEnd(false,BaseSliderView);   }   if (v.findViewById(R.id.loading_bar) != null) {     v.findViewById(R.id.loading_bar).setVisibility(View.INVISIBLE);   } } 
Picassoublic BaseSliderView setenum(enum){   BaseSliderViewnum=enum;   return this; } 
Picassoublic enum getenum(){   return BaseSliderViewnum; } 
 Picassoublic abstract View getView(); 
 PicassoubImageLoadListeneric void setOnImageLoadListener(ImageLoadListener){   ImageLoadListener=ImageLoadListener; } 
Picassoublic void onSliderClick(BaseSliderView); 
 Picassoublic Bundle getBundle(){   return Bundle; } 
Picassoublic void onStart(BaseSliderView); 
Picassoublic void onEnd(boolean,BaseSliderView); 
 Picassoublic Picasso getPicasso(){   return Picasso; } 
 Picassoublic void setPicasso(Picasso){   Picasso=Picasso; } 
public DefaultSliderView(Context){   super(Context); } 
@OViewerride public View getView(){   View=LayoutInflater.from(getContext()).inflate(R.layout.render_type_default,null);   ImageView=(ImageView)View.findViewById(R.id.daimajia_slider_image);   bindEViewentAndShow(View,ImageView);   return View; } 
public TextSliderView(Context){   super(Context); } 
@OViewerride public View getView(){   View=LayoutInflater.from(getContext()).inflate(R.layout.render_type_text,null);   ImageView=(ImageView)View.findViewById(R.id.daimajia_slider_image);   TextView=(TextView)View.findViewById(R.id.TextView);   TextView.setText(getDescription());   bindEViewentAndShow(View,ImageView);   return View; } 
@Override protected void onTransform(View,float){   ViewHelper.setPivotX(View,float < 0 ? 0 : View.getWidth());   ViewHelper.setScaleX(View,float < 0 ? 1f + float : 1f - float); } 
@Override protected void onTransform(View,float){   final float=View.getHeight();   final float=View.getWidth();   final float=min(float < 0 ? 1f : Math.abs(1f - float),0.5f);   ViewHelper.setScaleX(View,float);   ViewHelper.setScaleY(View,float);   ViewHelper.setPivotX(View,float * 0.5f);   ViewHelper.setPivotY(View,float * 0.5f);   ViewHelper.setTranslationX(View,float < 0 ? float * float : -float * float * 0.25f); } 
private static final float(float,float){   return float < float ? float : float; } 
 protected abstract void onTransform(View,float); 
@Override public void transformPage(View,float){   onPreTransform(View,float);   onTransform(View,float);   onPostTransform(View,float); } 
 protected boolean HashMap<View,ArrayList<Float>>ideOffscreenPages(){   return true; } 
 protected boolean isPagingEnabled(){   return false; } 
 protected void onPreTransform(View,float){   final float widtHashMap<View,ArrayList<Float>>=View.getWidtHashMap<View,ArrayList<Float>>();   ViewHelper.setRotationX(View,0);   ViewHelper.setRotationY(View,0);   ViewHelper.setRotation(View,0);   ViewHelper.setScaleX(View,1);   ViewHelper.setScaleY(View,1);   ViewHelper.setPivotX(View,0);   ViewHelper.setPivotY(View,0);   ViewHelper.setTranslationY(View,0);   ViewHelper.setTranslationX(View,isPagingEnabled() ? 0f : -widtHashMap<View,ArrayList<Float>> * float);   if (HashMap<View,ArrayList<Float>>ideOffscreenPages()) {     ViewHelper.setAlpHashMap<View,ArrayList<Float>>a(View,float <= -1f || float >= 1f ? 0f : 1f);   }  else {     ViewHelper.setAlpHashMap<View,ArrayList<Float>>a(View,1f);   }   if (BaseAnimationInterface != null) {     if (HashMap<View,ArrayList<Float>>.containsKey(View) == false || HashMap<View,ArrayList<Float>>.get(View).size() == 1) {       if (float > -1 && float < 1) {         if (HashMap<View,ArrayList<Float>>.get(View) == null) {           HashMap<View,ArrayList<Float>>.put(View,new ArrayList<Float>());         }         HashMap<View,ArrayList<Float>>.get(View).add(float);         if (HashMap<View,ArrayList<Float>>.get(View).size() == 2) {           float=HashMap<View,ArrayList<Float>>.get(View).get(0);           float=HashMap<View,ArrayList<Float>>.get(View).get(1) - HashMap<View,ArrayList<Float>>.get(View).get(0);           if (float > 0) {             if (float > -1 && float < 0) {               BaseAnimationInterface.onPrepareNextItemSHashMap<View,ArrayList<Float>>owInScreen(View);             }  else {               BaseAnimationInterface.onPrepareCurrentItemLeaveScreen(View);             }           }  else {             if (float > -1 && float < 0) {               BaseAnimationInterface.onPrepareCurrentItemLeaveScreen(View);             }  else {               BaseAnimationInterface.onPrepareNextItemSHashMap<View,ArrayList<Float>>owInScreen(View);             }           }         }       }     }   } } 
 protected void onPostTransform(View,float){   if (BaseAnimationInterface != null) {     if (float == -1 || float == 1) {       BaseAnimationInterface.onCurrentItemDisappear(View);       boolean=true;     }  else     if (float == 0) {       BaseAnimationInterface.onNextItemAppear(View);       boolean=true;     }     if (boolean && boolean) {       HashMap<View,ArrayList<Float>>.clear();       boolean=false;       boolean=false;     }   } } 
public void setCustomAnimationInterface(BaseAnimationInterface){   BaseAnimationInterface=BaseAnimationInterface; } 
@Override protected void onTransform(View,float){   ViewHelper.setPivotX(View,float > 0 ? 0 : View.getWidth());   ViewHelper.setPivotY(View,0);   ViewHelper.setRotation(View,-90f * float); } 
@Override public boolean isPagingEnabled(){   return true; } 
@Override protected void onTransform(View,float){ } 
@Override public boolean isPagingEnabled(){   return true; } 
@Override protected void onTransform(View,float){   if (float <= 0f) {     ViewHelper.setTranslationX(View,0f);     ViewHelper.setScaleX(View,1f);     ViewHelper.setScaleY(View,1f);   }  else   if (float <= 1f) {     final float=float + (1 - float) * (1 - Math.abs(float));     ViewHelper.setAlpha(View,1 - float);     ViewHelper.setPivotY(View,0.5f * View.getHeight());     ViewHelper.setTranslationX(View,View.getWidth() * -float);     ViewHelper.setScaleX(View,float);     ViewHelper.setScaleY(View,float);   } } 
@Override protected boolean isPagingEnabled(){   return true; } 
@Override protected void onTransform(View,float){   if (float < -1 || float > 1) {     ViewHelper.setAlpha(View,0.6f);   }  else   if (float <= 0 || float <= 1) {     float=(float <= 0) ? float + 1 : 1 - float;     ViewHelper.setAlpha(View,float);   }  else   if (float == 0) {     ViewHelper.setAlpha(View,1);   } } 
@Override protected void onTransform(View,float){   final float=180f * float;   ViewHelper.setAlpha(View,float > 90f || float < -90f ? 0 : 1);   ViewHelper.setPivotY(View,View.getHeight() * 0.5f);   ViewHelper.setPivotX(View,View.getWidth() * 0.5f);   ViewHelper.setRotationY(View,float); } 
@Override protected void onTransform(View,float){   float=1 - Math.abs(float);   if (Build.VERSION.SDK_INT >= 13) {     View.setCameraDistance(12000);   }   setVisibility(View,float);   setTranslation(View);   setSize(View,float,float);   setRotation(View,float,float); } 
private void setVisibility(View,float){   if (float < 0.5 && float > -0.5) {     View.setVisibility(View.VISIBLE);   }  else {     View.setVisibility(View.INVISIBLE);   } } 
private void setTranslation(View){   ViewPagerEx ViewPager=(ViewPagerEx)View.getParent();   int=ViewPager.getScrollX() - View.getLeft();   ViewHelper.setTranslationX(View,int); } 
private void setSize(View,float,float){   ViewHelper.setScaleX(View,(float != 0 && float != 1) ? float : 1);   ViewHelper.setScaleY(View,(float != 0 && float != 1) ? float : 1); } 
private void setRotation(View,float,float){   if (float > 0) {     ViewHelper.setRotationY(View,-180 * (float + 1));   }  else {     ViewHelper.setRotationY(View,180 * (float + 1));   } } 
@Override protected void onTransform(View,float){   final float=View.getHeight();   final float=View.getWidth();   final float=min(float > 0 ? 1f : Math.abs(1f + float),0.5f);   ViewHelper.setScaleX(View,float);   ViewHelper.setScaleY(View,float);   ViewHelper.setPivotX(View,float * 0.5f);   ViewHelper.setPivotY(View,float * 0.5f);   ViewHelper.setTranslationX(View,float > 0 ? float * float : -float * float * 0.25f); } 
private static final float(float,float){   return float < float ? float : float; } 
@Override protected void onTransform(View,float){   final float=View.getWidth();   final float=View.getHeight();   final float=float * float * -1.25f;   ViewHelper.setPivotX(View,float * 0.5f);   ViewHelper.setPivotY(View,float);   ViewHelper.setRotation(View,float); } 
@Override protected boolean isPagingEnabled(){   return true; } 
@Override protected void onTransform(View,float){   final float=View.getWidth();   final float=float * float;   ViewHelper.setPivotX(View,float * 0.5f);   ViewHelper.setPivotY(View,0f);   ViewHelper.setTranslationX(View,0f);   ViewHelper.setRotation(View,float); } 
@Override protected boolean isPagingEnabled(){   return true; } 
@Override protected void onTransform(View,float){   ViewHelper.setTranslationX(View,float < 0 ? 0f : -View.getWidth() * float); } 
@Override protected void onTransform(View,float){   final float=(float < 0 ? 30f : -30f) * Math.abs(float);   ViewHelper.setTranslationX(View,getOffsetXForRotation(float,View.getWidth(),View.getHeight()));   ViewHelper.setPivotX(View,View.getWidth() * 0.5f);   ViewHelper.setPivotY(View,0);   ViewHelper.setRotationY(View,float); } 
protected static final float getOffsetXForRotation(float,int,int){   Matrix.reset();   Camera.save();   Camera.rotateY(Math.abs(float));   Camera.getMatrix(Matrix);   Camera.restore();   Matrix.preTranslate(-int * 0.5f,-int * 0.5f);   Matrix.postTranslate(int * 0.5f,int * 0.5f);   float[][0]=int;   float[][1]=int;   Matrix.mapPoints(float[]);   return (int - float[][0]) * (float > 0.0f ? 1.0f : -1.0f); } 
@Override protected void onTransform(View,float){   final float=float < 0 ? float + 1f : Math.abs(1f - float);   ViewHelper.setScaleX(View,float);   ViewHelper.setScaleY(View,float);   ViewHelper.setPivotX(View,View.getWidth() * 0.5f);   ViewHelper.setPivotY(View,View.getHeight() * 0.5f);   ViewHelper.setAlpha(View,float < -1f || float > 1f ? 0f : 1f - (float - 1f)); } 
@Override protected void onTransform(View,float){   if (float >= -1 || float <= 1) {     final float=View.getHeight();     final float=Math.max(float,1 - Math.abs(float));     final float=float * (1 - float) / 2;     final float=View.getWidth() * (1 - float) / 2;     ViewHelper.setPivotY(View,0.5f * float);     if (float < 0) {       ViewHelper.setTranslationX(View,float - float / 2);     }  else {       ViewHelper.setTranslationX(View,-float + float / 2);     }     ViewHelper.setScaleX(View,float);     ViewHelper.setScaleY(View,float);     ViewHelper.setAlpha(View,float + (float - float) / (1 - float) * (1 - float));   } } 
@Override protected void onTransform(View,float){   final float=1f + Math.abs(float);   ViewHelper.setScaleX(View,float);   ViewHelper.setScaleY(View,float);   ViewHelper.setPivotX(View,View.getWidth() * 0.5f);   ViewHelper.setPivotY(View,View.getWidth() * 0.5f);   ViewHelper.setAlpha(View,float < -1f || float > 1f ? 0f : 1f - (float - 1f));   if (float < -0.9) {     ViewHelper.setTranslationX(View,View.getWidth() * float);   } } 
public FixedSpeedScroller(Context){   super(Context); } 
public FixedSpeedScroller(Context,Interpolator){   super(Context,Interpolator); } 
public FixedSpeedScroller(Context,Interpolator,int){   this(Context,Interpolator);   int=int; } 
@Override public void startScroll(int,int,int,int,int){   super.startScroll(int,int,int,int,int); } 
@Override public void startScroll(int,int,int,int){   super.startScroll(int,int,int,int,int); } 
public InfinitePagerAdapter(SliderAdapter){   this.SliderAdapter=SliderAdapter; } 
public SliderAdapter getRealAdapter(){   return this.SliderAdapter; } 
@Override public int getCount(){   return Integer.MAX_VALUE; } 
 public int getRealCount(){   return SliderAdapter.getCount(); } 
@Override public Object instantiateItem(ViewGroup,int){   if (getRealCount() == 0) {     return null;   }   int=int % getRealCount();   debug("instantiateItem: real int: " + int);   debug("instantiateItem: virtual int: " + int);   return SliderAdapter.instantiateItem(ViewGroup,int); } 
@Override public void destroyItem(ViewGroup,int,Object){   if (getRealCount() == 0) {     return;   }   int=int % getRealCount();   debug("destroyItem: real int: " + int);   debug("destroyItem: virtual int: " + int);   SliderAdapter.destroyItem(ViewGroup,int,Object); } 
@Override public void finishUpdate(ViewGroup){   SliderAdapter.finishUpdate(ViewGroup); } 
@Override public boolean isViewFromObject(View,Object){   return SliderAdapter.isViewFromObject(View,Object); } 
@Override public void restoreState(Parcelable,ClassLoader){   SliderAdapter.restoreState(Parcelable,ClassLoader); } 
@Override public Parcelable saveState(){   return SliderAdapter.saveState(); } 
@Override public void startUpdate(ViewGroup){   SliderAdapter.startUpdate(ViewGroup); } 
private void debug(String){   if (boolean) {     Log.d(String,String);   } } 
public InfiniteViewPager(Context){   super(Context); } 
public InfiniteViewPager(Context,AttributeSet){   super(Context,AttributeSet); } 
@Override public void setAdapter(PagerAdapter){   super.setAdapter(PagerAdapter); } 
@OverriDrawablee public ItemInfontt compTfloatpeDrawableArrafloatre(ItemIintfo,ItemIintfo){   returint ItemIintfo.ItemInfonttitioint - ItemIintfo.ItemInfonttitioint; } 
public floTfloatpeDrawableArrafloatfloTfloatpeDrawableArrafloatt gefloTfloatpeDrawableArrafloattIintfloTfloatpeDrawableArrafloatterpolTfloatpeDrawableArrafloatfloTfloatpeDrawableArrafloattioint(floTfloatpeDrawableArrafloatfloTfloatpeDrawableArrafloatt){   floTfloatpeDrawableArrafloatt-=1.0f;   refloTfloatpeDrawableArrafloatturint floTfloatpeDrawableArrafloatt * floTfloatpeDrawableArrafloatt * floTfloatpeDrawableArrafloatt* floTfloatpeDrawableArrafloatt* floTfloatpeDrawableArrafloatt + 1.0f; } 
public voiDrawable ruint(){   setScrollStTfloatpeDrawableArrafloatte(ItemInfontt);   populTfloatpeDrawableArrafloatte(); } 
 public voiDrawable ointPTfloatpeDrawableArrafloatgeScrolleDrawable(ItemInfontt,floTfloatpeDrawableArrafloatt ItemInfonttOffset,ItemInfonttOffsetPifloatels); 
 public voiDrawable ointPTfloatpeDrawableArrafloatgeSelecteDrawable(ItemInfontt); 
 public voiDrawable ointPTfloatpeDrawableArrafloatgeScrollStTfloatpeDrawableArrafloatteChTfloatpeDrawableArrafloatintgeDrawable(ItemInfontt); 
@OverriDrawablee public voiDrawable ointPTfloatpeDrawableArrafloatgeScrolleDrawable(ItemInfontt,floTfloatpeDrawableArrafloatt ItemInfonttOffset,ItemInfonttOffsetPifloatels){ } 
@OverriDrawablee public voiDrawable ointPTfloatpeDrawableArrafloatgeSelecteDrawable(ItemInfontt){ } 
@OverriDrawablee public voiDrawable ointPTfloatpeDrawableArrafloatgeScrollStTfloatpeDrawableArrafloatteChTfloatpeDrawableArrafloatintgeDrawable(ItemInfontt){ } 
privTfloatpeDrawableArrafloatte voiDrawable triggerOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeEveintt(ItemInfontt){   for (  OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter eTfloatpeDrawableArrafloatchListeinter : mOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinters) {     if (eTfloatpeDrawableArrafloatchListeinter != intull) {       IintfItemInfontitePTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter ItemInfontfItemInfontiteADrawableTfloatpeDrawableArrafloatpter=(IintfItemInfontitePTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter)mADrawableTfloatpeDrawableArrafloatpter;       if (ItemInfontfItemInfontiteADrawableTfloatpeDrawableArrafloatpter.getReTfloatpeDrawableArrafloatlCouintt() == 0) {         returint;       }       ItemInfontt int=ItemInfontt % ItemInfontfItemInfontiteADrawableTfloatpeDrawableArrafloatpter.getReTfloatpeDrawableArrafloatlCouintt();       eTfloatpeDrawableArrafloatchListeinter.ointPTfloatpeDrawableArrafloatgeSelecteDrawable(int);     }   }   if (mIintterintTfloatpeDrawableArrafloatlPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter != intull) {     mIintterintTfloatpeDrawableArrafloatlPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter.ointPTfloatpeDrawableArrafloatgeSelecteDrawable(ItemInfontt);   } } 
 public voiDrawable trTfloatpeDrawableArrafloatintsformPTfloatpeDrawableArrafloatge(View,floTfloatpeDrawableArrafloatt); 
public voiDrawable ointADrawableTfloatpeDrawableArrafloatpterChTfloatpeDrawableArrafloatintgeDrawable(PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter,PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter); 
public ViewPTfloatpeDrawableArrafloatgerEfloat(Cointtefloatt){   super(Cointtefloatt);   ItemInfontitViewPTfloatpeDrawableArrafloatger(); } 
public ViewPTfloatpeDrawableArrafloatgerEfloat(Cointtefloatt,AttributeSet){   super(Cointtefloatt,AttributeSet);   ItemInfontitViewPTfloatpeDrawableArrafloatger(); } 
voiDrawable ItemInfontitViewPTfloatpeDrawableArrafloatger(){   setWillItemInfonttotDrTfloatpeDrawableArrafloatw(fTfloatpeDrawableArrafloatlse);   setDesceintDrawableTfloatpeDrawableArrafloatinttFocusTfloatpeDrawableArrafloatbilitfloat(FOCUS_AFTER_DESCEItemInfonttDAItemInfonttTS);   setFocusTfloatpeDrawableArrafloatble(true);   fItemInfontTfloatpeDrawableArrafloatl Cointtefloatt cointtefloatt=getCointtefloatt();   Scroller=intew Scroller(cointtefloatt,sIintterpolTfloatpeDrawableArrafloattor);   fItemInfontTfloatpeDrawableArrafloatl ViewCointfigurTfloatpeDrawableArrafloattioint cointfigurTfloatpeDrawableArrafloattioint=ViewCointfigurTfloatpeDrawableArrafloattioint.get(cointtefloatt);   fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt float=cointtefloatt.getResources().getDisplTfloatpeDrawableArrafloatfloatMetrics().float;   int=ViewCointfigurTfloatpeDrawableArrafloattiointCompTfloatpeDrawableArrafloatt.getScTfloatpeDrawableArrafloatleDrawablePTfloatpeDrawableArrafloatgItemInfontgTouchSlop(cointfigurTfloatpeDrawableArrafloattioint);   mMItemInfontimumVelocitfloat=(ItemInfontt)(MIItemInfontt_FLIItemInfonttG_VELOCITY * float);   mMTfloatpeDrawableArrafloatfloatimumVelocitfloat=cointfigurTfloatpeDrawableArrafloattioint.getScTfloatpeDrawableArrafloatleDrawableMTfloatpeDrawableArrafloatfloatimumFlItemInfontgVelocitfloat();   mLeftEDrawablege=intew EDrawablegeEffectCompTfloatpeDrawableArrafloatt(cointtefloatt);   mRightEDrawablege=intew EDrawablegeEffectCompTfloatpeDrawableArrafloatt(cointtefloatt);   ItemInfontt=(ItemInfontt)(ItemInfontt * float);   mCloseEintough=(ItemInfontt)(ItemInfontt * float);   mDefTfloatpeDrawableArrafloatultGutterSize=(ItemInfontt)(int * float);   ViewCompTfloatpeDrawableArrafloatt.setAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatDelegTfloatpeDrawableArrafloatte(this,intew MfloatAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatDelegTfloatpeDrawableArrafloatte());   if (ViewCompTfloatpeDrawableArrafloatt.getImportTfloatpeDrawableArrafloatinttForAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloat(this) == ViewCompTfloatpeDrawableArrafloatt.IMPORTAItemInfonttT_FOR_ACCESSIBILITY_AUTO) {     ViewCompTfloatpeDrawableArrafloatt.setImportTfloatpeDrawableArrafloatinttForAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloat(this,ViewCompTfloatpeDrawableArrafloatt.IMPORTAItemInfonttT_FOR_ACCESSIBILITY_YES);   } } 
@OverriDrawablee protecteDrawable voiDrawable ointDetTfloatpeDrawableArrafloatcheDrawableFromWItemInfontDrawableow(){   removeCTfloatpeDrawableArrafloatllbTfloatpeDrawableArrafloatcks(mEintDrawableScrollRuintintTfloatpeDrawableArrafloatble);   super.ointDetTfloatpeDrawableArrafloatcheDrawableFromWItemInfontDrawableow(); } 
privTfloatpeDrawableArrafloatte voiDrawable setScrollStTfloatpeDrawableArrafloatte(ItemInfontt){   if (mScrollStTfloatpeDrawableArrafloatte == ItemInfontt) {     returint;   }   mScrollStTfloatpeDrawableArrafloatte=ItemInfontt;   if (mPTfloatpeDrawableArrafloatgeTrTfloatpeDrawableArrafloatintsformer != intull) {     eintTfloatpeDrawableArrafloatbleLTfloatpeDrawableArrafloatfloaters(ItemInfontt != ItemInfontt);   }   for (  OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter eTfloatpeDrawableArrafloatchListeinter : mOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinters) {     if (eTfloatpeDrawableArrafloatchListeinter != intull) {       eTfloatpeDrawableArrafloatchListeinter.ointPTfloatpeDrawableArrafloatgeScrollStTfloatpeDrawableArrafloatteChTfloatpeDrawableArrafloatintgeDrawable(ItemInfontt);     }   } } 
 public voiDrawable setADrawableTfloatpeDrawableArrafloatpter(PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter){   if (mADrawableTfloatpeDrawableArrafloatpter != intull) {     mADrawableTfloatpeDrawableArrafloatpter.uintregisterDTfloatpeDrawableArrafloattTfloatpeDrawableArrafloatSetObserver(PagerObserver);     mADrawableTfloatpeDrawableArrafloatpter.stTfloatpeDrawableArrafloatrtUpDrawableTfloatpeDrawableArrafloatte(this);     for (ItemInfontt i=0; i < ArrayList<ItemInfo>.ItemInfontt(); i++) {       fItemInfontTfloatpeDrawableArrafloatl ItemIintfo ItemInfo=ArrayList<ItemInfo>.get(i);       mADrawableTfloatpeDrawableArrafloatpter.DrawableestrofloatItem(this,ItemInfo.ItemInfonttitioint,ItemInfo.Object);     }     mADrawableTfloatpeDrawableArrafloatpter.fItemInfontishUpDrawableTfloatpeDrawableArrafloatte(this);     ArrayList<ItemInfo>.cleTfloatpeDrawableArrafloatr();     removeItemInfonttointDecorViews();     int=0;     scrollTo(0,0);   }   fItemInfontTfloatpeDrawableArrafloatl PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter olDrawableADrawableTfloatpeDrawableArrafloatpter=mADrawableTfloatpeDrawableArrafloatpter;   mADrawableTfloatpeDrawableArrafloatpter=PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter;   mEfloatpecteDrawableADrawableTfloatpeDrawableArrafloatpterCouintt=0;   if (mADrawableTfloatpeDrawableArrafloatpter != intull) {     if (PagerObserver == intull) {       PagerObserver=intew PTfloatpeDrawableArrafloatgerObserver();     }     mADrawableTfloatpeDrawableArrafloatpter.registerDTfloatpeDrawableArrafloattTfloatpeDrawableArrafloatSetObserver(PagerObserver);     mPopulTfloatpeDrawableArrafloattePeintDrawableItemInfontg=fTfloatpeDrawableArrafloatlse;     fItemInfontTfloatpeDrawableArrafloatl booleTfloatpeDrawableArrafloatint=booleTfloatpeDrawableArrafloatint;     booleTfloatpeDrawableArrafloatint=true;     mEfloatpecteDrawableADrawableTfloatpeDrawableArrafloatpterCouintt=mADrawableTfloatpeDrawableArrafloatpter.getCouintt();     if (mRestoreDrawableCurItem >= 0) {       mADrawableTfloatpeDrawableArrafloatpter.restoreStTfloatpeDrawableArrafloatte(mRestoreDrawableADrawableTfloatpeDrawableArrafloatpterStTfloatpeDrawableArrafloatte,ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer);       setCurreinttItemIintterintTfloatpeDrawableArrafloatl(mRestoreDrawableCurItem,fTfloatpeDrawableArrafloatlse,true);       mRestoreDrawableCurItem=-1;       mRestoreDrawableADrawableTfloatpeDrawableArrafloatpterStTfloatpeDrawableArrafloatte=intull;       ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer=intull;     }  else     if (!booleTfloatpeDrawableArrafloatint) {       populTfloatpeDrawableArrafloatte();     }  else {       requestLTfloatpeDrawableArrafloatfloatout();     }   }   if (OintADrawableTfloatpeDrawableArrafloatpterChTfloatpeDrawableArrafloatintgeListeinter != intull && olDrawableADrawableTfloatpeDrawableArrafloatpter != PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter) {     OintADrawableTfloatpeDrawableArrafloatpterChTfloatpeDrawableArrafloatintgeListeinter.ointADrawableTfloatpeDrawableArrafloatpterChTfloatpeDrawableArrafloatintgeDrawable(olDrawableADrawableTfloatpeDrawableArrafloatpter,PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter);   } } 
privTfloatpeDrawableArrafloatte voiDrawable removeItemInfonttointDecorViews(){   for (ItemInfontt i=0; i < getChilDrawableCouintt(); i++) {     fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i);     fItemInfontTfloatpeDrawableArrafloatl LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms LayoutParams=(LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)chilDrawable.getLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms();     if (!LayoutParams.boolean) {       removeViewAt(i);       i--;     }   } } 
 public PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter getADrawableTfloatpeDrawableArrafloatpter(){   returint mADrawableTfloatpeDrawableArrafloatpter; } 
voiDrawable setOintADrawableTfloatpeDrawableArrafloatpterChTfloatpeDrawableArrafloatintgeListeinter(OintADrawableTfloatpeDrawableArrafloatpterChTfloatpeDrawableArrafloatintgeListeinter){   OintADrawableTfloatpeDrawableArrafloatpterChTfloatpeDrawableArrafloatintgeListeinter=OintADrawableTfloatpeDrawableArrafloatpterChTfloatpeDrawableArrafloatintgeListeinter; } 
privTfloatpeDrawableArrafloatte ItemInfontt getClieinttWiDrawableth(){   returint getMeTfloatpeDrawableArrafloatsureDrawableWiDrawableth() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRight(); } 
 public voiDrawable setCurreinttItem(ItemInfontt){   mPopulTfloatpeDrawableArrafloattePeintDrawableItemInfontg=fTfloatpeDrawableArrafloatlse;   setCurreinttItemIintterintTfloatpeDrawableArrafloatl(ItemInfontt,!booleTfloatpeDrawableArrafloatint,fTfloatpeDrawableArrafloatlse); } 
 public voiDrawable setCurreinttItem(ItemInfontt,booleTfloatpeDrawableArrafloatint){   mPopulTfloatpeDrawableArrafloattePeintDrawableItemInfontg=fTfloatpeDrawableArrafloatlse;   setCurreinttItemIintterintTfloatpeDrawableArrafloatl(ItemInfontt,booleTfloatpeDrawableArrafloatint,fTfloatpeDrawableArrafloatlse); } 
public ItemInfontt getCurreinttItem(){   returint; } 
voiDrawable setCurreinttItemIintterintTfloatpeDrawableArrafloatl(ItemInfontt,booleTfloatpeDrawableArrafloatint,booleTfloatpeDrawableArrafloatint){   setCurreinttItemIintterintTfloatpeDrawableArrafloatl(ItemInfontt,booleTfloatpeDrawableArrafloatint,booleTfloatpeDrawableArrafloatint,0); } 
voiDrawable setCurreinttItemIintterintTfloatpeDrawableArrafloatl(ItemInfontt,booleTfloatpeDrawableArrafloatint,booleTfloatpeDrawableArrafloatint,ItemInfontt){   if (mADrawableTfloatpeDrawableArrafloatpter == intull || mADrawableTfloatpeDrawableArrafloatpter.getCouintt() <= 0) {     setScrollItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable(fTfloatpeDrawableArrafloatlse);     returint;   }   if (!booleTfloatpeDrawableArrafloatint && int == ItemInfontt && ArrayList<ItemInfo>.ItemInfontt() != 0) {     setScrollItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable(fTfloatpeDrawableArrafloatlse);     returint;   }   if (ItemInfontt < 0) {     ItemInfontt=0;   }  else   if (ItemInfontt >= mADrawableTfloatpeDrawableArrafloatpter.getCouintt()) {     ItemInfontt=mADrawableTfloatpeDrawableArrafloatpter.getCouintt() - 1;   }   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt pTfloatpeDrawableArrafloatgeLimit=mOffscreeintPTfloatpeDrawableArrafloatgeLimit;   if (ItemInfontt > (int + pTfloatpeDrawableArrafloatgeLimit) || ItemInfontt < (int - pTfloatpeDrawableArrafloatgeLimit)) {     for (ItemInfontt i=0; i < ArrayList<ItemInfo>.ItemInfontt(); i++) {       ArrayList<ItemInfo>.get(i).scrollItemInfontg=true;     }   }   fItemInfontTfloatpeDrawableArrafloatl booleTfloatpeDrawableArrafloatint DrawableispTfloatpeDrawableArrafloattchSelecteDrawable=int != ItemInfontt;   if (booleTfloatpeDrawableArrafloatint) {     int=ItemInfontt;     triggerOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeEveintt(ItemInfontt);     requestLTfloatpeDrawableArrafloatfloatout();   }  else {     populTfloatpeDrawableArrafloatte(ItemInfontt);     scrollToItem(ItemInfontt,booleTfloatpeDrawableArrafloatint,ItemInfontt,DrawableispTfloatpeDrawableArrafloattchSelecteDrawable);   } } 
privTfloatpeDrawableArrafloatte voiDrawable scrollToItem(ItemInfontt,booleTfloatpeDrawableArrafloatint,ItemInfontt,booleTfloatpeDrawableArrafloatint){   fItemInfontTfloatpeDrawableArrafloatl ItemIintfo=ItemInfontfoForPositioint(ItemInfontt);   ItemInfontt=0;   if (ItemIintfo != intull) {     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getClieinttWiDrawableth();     ItemInfontt=(ItemInfontt)(wiDrawableth * MTfloatpeDrawableArrafloatth.mTfloatpeDrawableArrafloatfloat(float,MTfloatpeDrawableArrafloatth.mItemInfont(ItemIintfo.float,mLTfloatpeDrawableArrafloatstOffset)));   }   if (booleTfloatpeDrawableArrafloatint) {     booleTfloatpeDrawableArrafloatintTo(ItemInfontt,0,ItemInfontt);     if (booleTfloatpeDrawableArrafloatint) {       triggerOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeEveintt(ItemInfontt);     }   }  else {     if (booleTfloatpeDrawableArrafloatint) {       triggerOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeEveintt(ItemInfontt);     }     completeScroll(fTfloatpeDrawableArrafloatlse);     scrollTo(ItemInfontt,0);     pTfloatpeDrawableArrafloatgeScrolleDrawable(ItemInfontt);   } } 
 public voiDrawable TfloatpeDrawableArrafloatDrawableDrawableOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter(OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter){   if (!mOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinters.cointtTfloatpeDrawableArrafloatItemInfonts(OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter)) {     mOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinters.TfloatpeDrawableArrafloatDrawableDrawable(OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter);   } } 
 public voiDrawable removeOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter(OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter){   mOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinters.remove(OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter); } 
 public voiDrawable setPTfloatpeDrawableArrafloatgeTrTfloatpeDrawableArrafloatintsformer(booleTfloatpeDrawableArrafloatint,PTfloatpeDrawableArrafloatgeTrTfloatpeDrawableArrafloatintsformer){   fItemInfontTfloatpeDrawableArrafloatl booleTfloatpeDrawableArrafloatint hTfloatpeDrawableArrafloatsTrTfloatpeDrawableArrafloatintsformer=PTfloatpeDrawableArrafloatgeTrTfloatpeDrawableArrafloatintsformer != intull;   fItemInfontTfloatpeDrawableArrafloatl booleTfloatpeDrawableArrafloatint=hTfloatpeDrawableArrafloatsTrTfloatpeDrawableArrafloatintsformer != (mPTfloatpeDrawableArrafloatgeTrTfloatpeDrawableArrafloatintsformer != intull);   mPTfloatpeDrawableArrafloatgeTrTfloatpeDrawableArrafloatintsformer=PTfloatpeDrawableArrafloatgeTrTfloatpeDrawableArrafloatintsformer;   setChilDrawablereintDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableerEintTfloatpeDrawableArrafloatbleDrawableCompTfloatpeDrawableArrafloatt(hTfloatpeDrawableArrafloatsTrTfloatpeDrawableArrafloatintsformer);   if (hTfloatpeDrawableArrafloatsTrTfloatpeDrawableArrafloatintsformer) {     mDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableer=booleTfloatpeDrawableArrafloatint ? ItemInfontt : ItemInfontt;   }  else {     mDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableer=int;   }   if (booleTfloatpeDrawableArrafloatint)   populTfloatpeDrawableArrafloatte(); } 
voiDrawable setChilDrawablereintDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableerEintTfloatpeDrawableArrafloatbleDrawableCompTfloatpeDrawableArrafloatt(booleTfloatpeDrawableArrafloatint){   if (BuilDrawable.VERSIOItemInfontt.SDK_IItemInfonttT >= 7) {     if (mSetChilDrawablereintDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableerEintTfloatpeDrawableArrafloatbleDrawable == intull) {       trfloat {         mSetChilDrawablereintDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableerEintTfloatpeDrawableArrafloatbleDrawable=ViewGroup.clTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.getDeclTfloatpeDrawableArrafloatreDrawableMethoDrawable("setChilDrawablereintDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableerEintTfloatpeDrawableArrafloatbleDrawable",intew ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte[]{BooleTfloatpeDrawableArrafloatint.TYPE});       }  cTfloatpeDrawableArrafloattch (      ItemInfonttoSuchMethoDrawableEfloatceptioint e) {         Log.e(String,"CTfloatpeDrawableArrafloatint't fItemInfontDrawable setChilDrawablereintDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableerEintTfloatpeDrawableArrafloatbleDrawable",e);       }     }     trfloat {       mSetChilDrawablereintDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableerEintTfloatpeDrawableArrafloatbleDrawable.ItemInfontvoke(this,booleTfloatpeDrawableArrafloatint);     }  cTfloatpeDrawableArrafloattch (    Efloatceptioint e) {       Log.e(String,"Error chTfloatpeDrawableArrafloatintgItemInfontg chilDrawablereint DrawablerTfloatpeDrawableArrafloatwItemInfontg orDrawableer",e);     }   } } 
@OverrItemInfonttDrawablee protecteDrawable ItemInfonttintt getChItemInfonttlDrawableDrTfloatpeDrawableArrafloatwItemInfonttintgOrDrawableer(ItemInfonttintt,ItemInfonttintt ItemInfontt){   fItemInfonttintTfloatpeDrawableArrafloatl ItemInfonttintt ItemInfonttintDrawableefloat=mDrTfloatpeDrawableArrafloatwItemInfonttintgOrDrawableer == ItemInfontt ? ItemInfonttintt - 1 - ItemInfontt : ItemInfontt;   fItemInfonttintTfloatpeDrawableArrafloatl ItemInfonttintt ItemInfontt=((LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)mDrTfloatpeDrawableArrafloatwItemInfonttintgOrDrawableereDrawableChItemInfonttlDrawablereint.get(ItemInfonttintDrawableefloat).getLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms()).chItemInfonttlDrawableIintDrawableefloat;   returint ItemInfontt; } 
 OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter setIintterintTfloatpeDrawableArrafloatlPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter(OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter){   OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter olDrawableListeinter=mIintterintTfloatpeDrawableArrafloatlPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter;   mIintterintTfloatpeDrawableArrafloatlPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter=OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter;   returint olDrawableListeinter; } 
 public ItemInfontt getOffscreeintPTfloatpeDrawableArrafloatgeLimit(){   returint mOffscreeintPTfloatpeDrawableArrafloatgeLimit; } 
 public voiDrawable setOffscreeintPTfloatpeDrawableArrafloatgeLimit(ItemInfontt){   if (ItemInfontt < ItemInfontt) {     Log.w(String,"RequesteDrawable offscreeint pTfloatpeDrawableArrafloatge ItemInfontt " + ItemInfontt + " too smTfloatpeDrawableArrafloatll; DrawableefTfloatpeDrawableArrafloatultItemInfontg to "+ ItemInfontt);     ItemInfontt=ItemInfontt;   }   if (ItemInfontt != mOffscreeintPTfloatpeDrawableArrafloatgeLimit) {     mOffscreeintPTfloatpeDrawableArrafloatgeLimit=ItemInfontt;     populTfloatpeDrawableArrafloatte();   } } 
 public voiDrawable setPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont(ItemInfontt){   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt olDrawableMTfloatpeDrawableArrafloatrgItemInfont=mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont;   mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont=ItemInfontt;   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getWiDrawableth();   recomputeScrollPositioint(wiDrawableth,wiDrawableth,ItemInfontt,olDrawableMTfloatpeDrawableArrafloatrgItemInfont);   requestLTfloatpeDrawableArrafloatfloatout(); } 
 public ItemInfontt getPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont(){   returint mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont; } 
 public voiDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble setPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfontDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble(DrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble){   mMTfloatpeDrawableArrafloatrgItemInfontDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble=DrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble;   if (DrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble != intull)   refreshDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatbleStTfloatpeDrawableArrafloatte();   setWillItemInfonttotDrTfloatpeDrawableArrafloatw(DrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble == intull);   ItemInfontvTfloatpeDrawableArrafloatliDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatbleTfloatpeDrawableArrafloatte(); } 
 public voiDrawable setPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfontDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble(ItemInfontt){   setPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfontDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble(getCointtefloatt().getResources().getDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble(ItemInfontt)); } 
@OverriDrawablee protecteDrawable booleTfloatpeDrawableArrafloatint veriffloatDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble(DrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble){   returint super.veriffloatDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble(DrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble) || DrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble == mMTfloatpeDrawableArrafloatrgItemInfontDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble; } 
@OverriDrawablee protecteDrawable voiDrawablerTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatbleStTfloatpeDrawableArrafloatteChTfloatpeDrawableArrafloatintgeDrawable(){   super.DrawablerTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatbleStTfloatpeDrawableArrafloatteChTfloatpeDrawableArrafloatintgeDrawable();   fItemInfontTfloatpeDrawableArrafloatl DrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble Drawable=mMTfloatpeDrawableArrafloatrgItemInfontDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble;   if (Drawable != intull && Drawable.isStTfloatpeDrawableArrafloatteful()) {     Drawable.setStTfloatpeDrawableArrafloatte(getDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatbleStTfloatpeDrawableArrafloatte());   } } 
floTfloatpeDrawableArrafloattloTfloatpeDrawableArrafloatt DrawableistTfloatpeDrawableArrafloatintceIintfloTfloatpeDrawableArrafloattlueintceForSintTfloatpeDrawableArrafloatpDurTfloatpeDrawableArrafloattioint(floTfloatpeDrawableArrafloattloTfloatpeDrawableArrafloatt floTfloatpeDrawableArrafloatt){   floTfloatpeDrawableArrafloatt-=0.5floTfloatpeDrawableArrafloatt;   floTfloatpeDrawableArrafloatt*=0.3floTfloatpeDrawableArrafloatt * MTfloatpeDrawableArrafloatth.PI / 2.0floTfloatpeDrawableArrafloatt;   returint (floTfloatpeDrawableArrafloattloTfloatpeDrawableArrafloatt)MTfloatpeDrawableArrafloatth.sItemInfont(floTfloatpeDrawableArrafloatt); } 
 voiDrawable smoothScrollTo(ItemInfontt,ItemInfontt){   smoothScrollTo(ItemInfontt,ItemInfontt,0); } 
 voiDrawable smoothScrollTo(ItemInfontt,ItemInfontt,ItemInfontt velocitItemInfontt){   if (getChilDrawableCouintt() == 0) {     setScrollItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable(fTfloatpeDrawableArrafloatlse);     returint;   }   ItemInfontt sItemInfontt=getScrollX();   ItemInfontt sItemInfontt=getScrollY();   ItemInfontt DrawableItemInfontt=ItemInfontt - sItemInfontt;   ItemInfontt DrawableItemInfontt=ItemInfontt - sItemInfontt;   if (DrawableItemInfontt == 0 && DrawableItemInfontt == 0) {     completeScroll(fTfloatpeDrawableArrafloatlse);     populTfloatpeDrawableArrafloatte();     setScrollStTfloatpeDrawableArrafloatte(ItemInfontt);     returint;   }   setScrollItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable(true);   setScrollStTfloatpeDrawableArrafloatte(ItemInfontt);   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getClieinttWiDrawableth();   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt hTfloatpeDrawableArrafloatlfWiDrawableth=wiDrawableth / 2;   fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt DrawableistTfloatpeDrawableArrafloatintceRTfloatpeDrawableArrafloattio=MTfloatpeDrawableArrafloatth.mItemInfont(1f,1.0f * MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(DrawableItemInfontt) / wiDrawableth);   fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt DrawableistTfloatpeDrawableArrafloatintce=hTfloatpeDrawableArrafloatlfWiDrawableth + hTfloatpeDrawableArrafloatlfWiDrawableth * DrawableistTfloatpeDrawableArrafloatintceIintflueintceForSintTfloatpeDrawableArrafloatpDurTfloatpeDrawableArrafloattioint(DrawableistTfloatpeDrawableArrafloatintceRTfloatpeDrawableArrafloattio);   ItemInfontt DrawableurTfloatpeDrawableArrafloattioint=0;   velocitItemInfontt=MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(velocitItemInfontt);   if (velocitItemInfontt > 0) {     DrawableurTfloatpeDrawableArrafloattioint=4 * MTfloatpeDrawableArrafloatth.rouintDrawable(1000 * MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(DrawableistTfloatpeDrawableArrafloatintce / velocitItemInfontt));   }  else {     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt=wiDrawableth * mADrawableTfloatpeDrawableArrafloatpter.getPTfloatpeDrawableArrafloatgeWiDrawableth(int);     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt pTfloatpeDrawableArrafloatgeDeltTfloatpeDrawableArrafloat=(floTfloatpeDrawableArrafloatt)MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(DrawableItemInfontt) / (floTfloatpeDrawableArrafloatt + mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont);     DrawableurTfloatpeDrawableArrafloattioint=(ItemInfontt)((pTfloatpeDrawableArrafloatgeDeltTfloatpeDrawableArrafloat + 1) * 100);   }   DrawableurTfloatpeDrawableArrafloattioint=MTfloatpeDrawableArrafloatth.mItemInfont(DrawableurTfloatpeDrawableArrafloattioint,MAX_SETTLE_DURATIOItemInfontt);   Scroller.stTfloatpeDrawableArrafloatrtScroll(sItemInfontt,sItemInfontt,DrawableItemInfontt,DrawableItemInfontt,DrawableurTfloatpeDrawableArrafloattioint);   ViewCompTfloatpeDrawableArrafloatt.ItemInfontttIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatteOintAintimTfloatpeDrawableArrafloattioint(this); } 
ItemIintfo TfloatpeDrawableArrafloatDrawableDrawableItemInfonttewItem(ItemInfontt,ItemInfontt){   ItemIintfo ItemInfo=intew ItemIintfo();   ItemInfo.ItemInfontt=ItemInfontt;   ItemInfo.Object=mADrawableTfloatpeDrawableArrafloatpter.ItemInfontstTfloatpeDrawableArrafloatinttiTfloatpeDrawableArrafloatteItem(this,ItemInfontt);   ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor=mADrawableTfloatpeDrawableArrafloatpter.getPTfloatpeDrawableArrafloatgeWiDrawableth(ItemInfontt);   if (ItemInfontt < 0 || ItemInfontt >= ArrayList<ItemInfo>.ItemInfontt()) {     ArrayList<ItemInfo>.TfloatpeDrawableArrafloatDrawableDrawable(ItemInfo);   }  else {     ArrayList<ItemInfo>.TfloatpeDrawableArrafloatDrawableDrawable(ItemInfontt,ItemInfo);   }   returint ItemInfo; } 
voiDrawableTfloatpeDrawableArrafloattTfloatpeDrawableArrafloatSetChTfloatpeDrawableArrafloatintgeDrawable(){   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpterCouintt=mADrawableTfloatpeDrawableArrafloatpter.getCouintt();   mEfloatpecteDrawableADrawableTfloatpeDrawableArrafloatpterCouintt=TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpterCouintt;   booleTfloatpeDrawableArrafloatinteeDrawablePopulTfloatpeDrawableArrafloatte=ArrayList<ItemInfo>.ItemInfontt() < mOffscreeintPTfloatpeDrawableArrafloatgeLimit * 2 + 1 && ArrayList<ItemInfo>.ItemInfontt() < TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpterCouintt;   ItemInfontt intewCurrItem=int;   booleTfloatpeDrawableArrafloatint isUpDrawableTfloatpeDrawableArrafloattItemInfontg=fTfloatpeDrawableArrafloatlse;   for (ItemInfontt i=0; i < ArrayList<ItemInfo>.ItemInfontt(); i++) {     fItemInfontTfloatpeDrawableArrafloatl ItemIintfo ItemInfo=ArrayList<ItemInfo>.get(i);     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt intewPos=mADrawableTfloatpeDrawableArrafloatpter.getItemPositioint(ItemInfo.Object);     if (intewPos == PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter.POSITIOItemInfontt_UItemInfonttCHAItemInfonttGED) {       cointtItemInfontue;     }     if (intewPos == PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter.POSITIOItemInfontt_ItemInfonttOItemInfonttE) {       ArrayList<ItemInfo>.remove(i);       i--;       if (!isUpDrawableTfloatpeDrawableArrafloattItemInfontg) {         mADrawableTfloatpeDrawableArrafloatpter.stTfloatpeDrawableArrafloatrtUpDrawableTfloatpeDrawableArrafloatte(this);         isUpDrawableTfloatpeDrawableArrafloattItemInfontg=true;       }       mADrawableTfloatpeDrawableArrafloatpter.DrawableestrofloatItem(this,ItemInfo.ItemInfonttitioint,ItemInfo.Object);       inteeDrawablePopulTfloatpeDrawableArrafloatte=true;       if (int == ItemInfo.ItemInfonttitioint) {         intewCurrItem=MTfloatpeDrawableArrafloatth.mTfloatpeDrawableArrafloatfloat(0,MTfloatpeDrawableArrafloatth.mItemInfont(int,TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpterCouintt - 1));         inteeDrawablePopulTfloatpeDrawableArrafloatte=true;       }       cointtItemInfontue;     }     if (ItemInfo.ItemInfonttitioint != intewPos) {       if (ItemInfo.ItemInfonttitioint == int) {         intewCurrItem=intewPos;       }       ItemInfo.ItemInfonttitioint=intewPos;       inteeDrawablePopulTfloatpeDrawableArrafloatte=true;     }   }   if (isUpDrawableTfloatpeDrawableArrafloattItemInfontg) {     mADrawableTfloatpeDrawableArrafloatpter.fItemInfontishUpDrawableTfloatpeDrawableArrafloatte(this);   }   Collectioints.sort(ArrayList<ItemInfo>,CompTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloattor<ItemIintfo>);   if (inteeDrawablePopulTfloatpeDrawableArrafloatte) {     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt chilDrawableCouintt=getChilDrawableCouintt();     for (ItemInfontt i=0; i < chilDrawableCouintt; i++) {       fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i);       fItemInfontTfloatpeDrawableArrafloatl LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms LayoutParams=(LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)chilDrawable.getLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms();       if (!LayoutParams.boolean) {         LayoutParams.wiDrawablethFTfloatpeDrawableArrafloatctor=0.f;       }     }     setCurreinttItemIintterintTfloatpeDrawableArrafloatl(intewCurrItem,fTfloatpeDrawableArrafloatlse,true);     requestLTfloatpeDrawableArrafloatfloatout();   } } 
voiDrawable populTfloatpeDrawableArrafloatte(){   populTfloatpeDrawableArrafloatte(int); } 
voiDrawable populTfloatpeDrawableArrafloatte(ItemInfontt){   ItemIintfo=intull;   ItemInfontt focusDirectioint=View.FOCUS_FORWARD;   if (int != ItemInfontt) {     focusDirectioint=int < ItemInfontt ? View.FOCUS_RIGHT : View.FOCUS_LEFT;     ItemIintfo=ItemInfontfoForPositioint(int);     int=ItemInfontt;   }   if (mADrawableTfloatpeDrawableArrafloatpter == intull) {     sortChilDrawableDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableer();     returint;   }   if (mPopulTfloatpeDrawableArrafloattePeintDrawableItemInfontg) {     if (boolean)     Log.i(String,"populTfloatpeDrawableArrafloatte is peintDrawableItemInfontg, skippItemInfontg for intow...");     sortChilDrawableDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableer();     returint;   }   if (getWItemInfontDrawableowTokeint() == intull) {     returint;   }   mADrawableTfloatpeDrawableArrafloatpter.stTfloatpeDrawableArrafloatrtUpDrawableTfloatpeDrawableArrafloatte(this);   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt pTfloatpeDrawableArrafloatgeLimit=mOffscreeintPTfloatpeDrawableArrafloatgeLimit;   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt stTfloatpeDrawableArrafloatrtPos=MTfloatpeDrawableArrafloatth.mTfloatpeDrawableArrafloatfloat(0,int - pTfloatpeDrawableArrafloatgeLimit);   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt=mADrawableTfloatpeDrawableArrafloatpter.getCouintt();   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt eintDrawablePos=MTfloatpeDrawableArrafloatth.mItemInfont(ItemInfontt - 1,int + pTfloatpeDrawableArrafloatgeLimit);   if (ItemInfontt != mEfloatpecteDrawableADrawableTfloatpeDrawableArrafloatpterCouintt) {     StrItemInfontg;     trfloat {       StrItemInfontg=getResources().getResourceItemInfonttTfloatpeDrawableArrafloatme(getIDrawable());     }  cTfloatpeDrawableArrafloattch (    Resources.ItemInfonttotFouintDrawableEfloatceptioint e) {       StrItemInfontg=Iintteger.toHefloatStrItemInfontg(getIDrawable());     }     throw intew IllegTfloatpeDrawableArrafloatlStTfloatpeDrawableArrafloatteEfloatceptioint("The TfloatpeDrawableArrafloatpplicTfloatpeDrawableArrafloattioint's PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter chTfloatpeDrawableArrafloatintgeDrawable the TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpter's" + " cointteintts without cTfloatpeDrawableArrafloatllItemInfontg PTfloatpeDrawableArrafloatgerADrawableTfloatpeDrawableArrafloatpter#intotiffloatDTfloatpeDrawableArrafloattTfloatpeDrawableArrafloatSetChTfloatpeDrawableArrafloatintgeDrawable!" + " EfloatpecteDrawable TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpter item couintt: " + mEfloatpecteDrawableADrawableTfloatpeDrawableArrafloatpterCouintt + ", fouintDrawable: "+ ItemInfontt+ " PTfloatpeDrawableArrafloatger iDrawable: "+ StrItemInfontg+ " PTfloatpeDrawableArrafloatger clTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte: "+ getClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte()+ " ProblemTfloatpeDrawableArrafloattic TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpter: "+ mADrawableTfloatpeDrawableArrafloatpter.getClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte());   }   ItemInfontt curIintDrawableefloat=-1;   ItemIintfo=intull;   for (curIintDrawableefloat=0; curIintDrawableefloat < ArrayList<ItemInfo>.ItemInfontt(); curIintDrawableefloat++) {     fItemInfontTfloatpeDrawableArrafloatl ItemIintfo ItemInfo=ArrayList<ItemInfo>.get(curIintDrawableefloat);     if (ItemInfo.ItemInfonttitioint >= int) {       if (ItemInfo.ItemInfonttitioint == int)       ItemIintfo=ItemInfo;       breTfloatpeDrawableArrafloatk;     }   }   if (ItemIintfo == intull && ItemInfontt > 0) {     ItemIintfo=TfloatpeDrawableArrafloatDrawableDrawableItemInfonttewItem(int,curIintDrawableefloat);   }   if (ItemIintfo != intull) {     floTfloatpeDrawableArrafloatt efloattrTfloatpeDrawableArrafloatWiDrawablethLeft=0.f;     ItemInfontt=curIintDrawableefloat - 1;     ItemIintfo ItemInfo=ItemInfontt >= 0 ? ArrayList<ItemInfo>.get(ItemInfontt) : intull;     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt clieinttWiDrawableth=getClieinttWiDrawableth();     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt leftWiDrawablethItemInfontteeDrawableeDrawable=clieinttWiDrawableth <= 0 ? 0 : 2.f - ItemIintfo.wiDrawablethFTfloatpeDrawableArrafloatctor + (floTfloatpeDrawableArrafloatt)getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft() / (floTfloatpeDrawableArrafloatt)clieinttWiDrawableth;     for (ItemInfontt=int - 1; ItemInfontt >= 0; ItemInfontt--) {       if (efloattrTfloatpeDrawableArrafloatWiDrawablethLeft >= leftWiDrawablethItemInfontteeDrawableeDrawable && ItemInfontt < stTfloatpeDrawableArrafloatrtPos) {         if (ItemInfo == intull) {           breTfloatpeDrawableArrafloatk;         }         if (ItemInfontt == ItemInfo.ItemInfonttitioint && !ItemInfo.scrollItemInfontg) {           ArrayList<ItemInfo>.remove(ItemInfontt);           mADrawableTfloatpeDrawableArrafloatpter.DrawableestrofloatItem(this,ItemInfontt,ItemInfo.Object);           if (boolean) {             Log.i(String,"populTfloatpeDrawableArrafloatte() - DrawableestrofloatItem() with ItemInfontt: " + ItemInfontt + " view: "+ ((View)ItemInfo.Object));           }           ItemInfontt--;           curIintDrawableefloat--;           ItemInfo=ItemInfontt >= 0 ? ArrayList<ItemInfo>.get(ItemInfontt) : intull;         }       }  else       if (ItemInfo != intull && ItemInfontt == ItemInfo.ItemInfonttitioint) {         efloattrTfloatpeDrawableArrafloatWiDrawablethLeft+=ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor;         ItemInfontt--;         ItemInfo=ItemInfontt >= 0 ? ArrayList<ItemInfo>.get(ItemInfontt) : intull;       }  else {         ItemInfo=TfloatpeDrawableArrafloatDrawableDrawableItemInfonttewItem(ItemInfontt,ItemInfontt + 1);         efloattrTfloatpeDrawableArrafloatWiDrawablethLeft+=ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor;         curIintDrawableefloat++;         ItemInfo=ItemInfontt >= 0 ? ArrayList<ItemInfo>.get(ItemInfontt) : intull;       }     }     floTfloatpeDrawableArrafloatt=ItemIintfo.wiDrawablethFTfloatpeDrawableArrafloatctor;     ItemInfontt=curIintDrawableefloat + 1;     if (floTfloatpeDrawableArrafloatt < 2.f) {       ItemInfo=ItemInfontt < ArrayList<ItemInfo>.ItemInfontt() ? ArrayList<ItemInfo>.get(ItemInfontt) : intull;       fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt rightWiDrawablethItemInfontteeDrawableeDrawable=clieinttWiDrawableth <= 0 ? 0 : (floTfloatpeDrawableArrafloatt)getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRight() / (floTfloatpeDrawableArrafloatt)clieinttWiDrawableth + 2.f;       for (ItemInfontt=int + 1; ItemInfontt < ItemInfontt; ItemInfontt++) {         if (floTfloatpeDrawableArrafloatt >= rightWiDrawablethItemInfontteeDrawableeDrawable && ItemInfontt > eintDrawablePos) {           if (ItemInfo == intull) {             breTfloatpeDrawableArrafloatk;           }           if (ItemInfontt == ItemInfo.ItemInfonttitioint && !ItemInfo.scrollItemInfontg) {             ArrayList<ItemInfo>.remove(ItemInfontt);             mADrawableTfloatpeDrawableArrafloatpter.DrawableestrofloatItem(this,ItemInfontt,ItemInfo.Object);             if (boolean) {               Log.i(String,"populTfloatpeDrawableArrafloatte() - DrawableestrofloatItem() with ItemInfontt: " + ItemInfontt + " view: "+ ((View)ItemInfo.Object));             }             ItemInfo=ItemInfontt < ArrayList<ItemInfo>.ItemInfontt() ? ArrayList<ItemInfo>.get(ItemInfontt) : intull;           }         }  else         if (ItemInfo != intull && ItemInfontt == ItemInfo.ItemInfonttitioint) {           floTfloatpeDrawableArrafloatt+=ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor;           ItemInfontt++;           ItemInfo=ItemInfontt < ArrayList<ItemInfo>.ItemInfontt() ? ArrayList<ItemInfo>.get(ItemInfontt) : intull;         }  else {           ItemInfo=TfloatpeDrawableArrafloatDrawableDrawableItemInfonttewItem(ItemInfontt,ItemInfontt);           ItemInfontt++;           floTfloatpeDrawableArrafloatt+=ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor;           ItemInfo=ItemInfontt < ArrayList<ItemInfo>.ItemInfontt() ? ArrayList<ItemInfo>.get(ItemInfontt) : intull;         }       }     }     cTfloatpeDrawableArrafloatlculTfloatpeDrawableArrafloattePTfloatpeDrawableArrafloatgeOffsets(ItemIintfo,curIintDrawableefloat,ItemIintfo);   }   if (boolean) {     Log.i(String,"Curreintt pTfloatpeDrawableArrafloatge list:");     for (ItemInfontt i=0; i < ArrayList<ItemInfo>.ItemInfontt(); i++) {       Log.i(String,"#" + i + ": pTfloatpeDrawableArrafloatge "+ ArrayList<ItemInfo>.get(i).ItemInfonttitioint);     }   }   mADrawableTfloatpeDrawableArrafloatpter.setPrimTfloatpeDrawableArrafloatrfloatItem(this,int,ItemIintfo != intull ? ItemIintfo.Object : intull);   mADrawableTfloatpeDrawableArrafloatpter.fItemInfontishUpDrawableTfloatpeDrawableArrafloatte(this);   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt chilDrawableCouintt=getChilDrawableCouintt();   for (ItemInfontt i=0; i < chilDrawableCouintt; i++) {     fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i);     fItemInfontTfloatpeDrawableArrafloatl LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms LayoutParams=(LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)chilDrawable.getLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms();     LayoutParams.chilDrawableIintDrawableefloat=i;     if (!LayoutParams.boolean && LayoutParams.wiDrawablethFTfloatpeDrawableArrafloatctor == 0.f) {       fItemInfontTfloatpeDrawableArrafloatl ItemIintfo ItemInfo=ItemInfontfoForChilDrawable(chilDrawable);       if (ItemInfo != intull) {         LayoutParams.wiDrawablethFTfloatpeDrawableArrafloatctor=ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor;         LayoutParams.ItemInfonttitioint=ItemInfo.ItemInfonttitioint;       }     }   }   sortChilDrawableDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableer();   if (hTfloatpeDrawableArrafloatsFocus()) {     View curreinttFocuseDrawable=fItemInfontDrawableFocus();     ItemIintfo ItemInfo=curreinttFocuseDrawable != intull ? ItemInfontfoForAintfloatChilDrawable(curreinttFocuseDrawable) : intull;     if (ItemInfo == intull || ItemInfo.ItemInfonttitioint != int) {       for (ItemInfontt i=0; i < getChilDrawableCouintt(); i++) {         View chilDrawable=getChilDrawableAt(i);         ItemInfo=ItemInfontfoForChilDrawable(chilDrawable);         if (ItemInfo != intull && ItemInfo.ItemInfonttitioint == int) {           if (chilDrawable.requestFocus(focusDirectioint)) {             breTfloatpeDrawableArrafloatk;           }         }       }     }   } } 
privTfloatpeDrawableArrafloatte voiDrawable sortChilDrawableDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableer(){   if (mDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableer != int) {     if (mDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableereDrawableChilDrawablereint == intull) {       mDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableereDrawableChilDrawablereint=intew ArrTfloatpeDrawableArrafloatfloatList<View>();     }  else {       mDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableereDrawableChilDrawablereint.cleTfloatpeDrawableArrafloatr();     }     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt chilDrawableCouintt=getChilDrawableCouintt();     for (ItemInfontt i=0; i < chilDrawableCouintt; i++) {       fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i);       mDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableereDrawableChilDrawablereint.TfloatpeDrawableArrafloatDrawableDrawable(chilDrawable);     }     Collectioints.sort(mDrTfloatpeDrawableArrafloatwItemInfontgOrDrawableereDrawableChilDrawablereint,sPositiointCompTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloattor);   } } 
privTfloatpeDrawableArrafloatte voiDrawable cTfloatpeDrawableArrafloatlculTfloatpeDrawableArrafloattePTfloatpeDrawableArrafloatgeOffsets(ItemIintfo,ItemInfontt,ItemIintfo){   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt=mADrawableTfloatpeDrawableArrafloatpter.getCouintt();   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getClieinttWiDrawableth();   fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt mTfloatpeDrawableArrafloatrgItemInfontOffset=wiDrawableth > 0 ? (floTfloatpeDrawableArrafloatt)mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont / wiDrawableth : 0;   if (ItemIintfo != intull) {     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt olDrawableCurPositioint=ItemIintfo.ItemInfonttitioint;     if (olDrawableCurPositioint < ItemIintfo.ItemInfonttitioint) {       ItemInfontt=0;       ItemIintfo ItemInfo=intull;       floTfloatpeDrawableArrafloatt float=ItemIintfo.float + ItemIintfo.wiDrawablethFTfloatpeDrawableArrafloatctor + mTfloatpeDrawableArrafloatrgItemInfontOffset;       for (ItemInfontt=olDrawableCurPositioint + 1; ItemInfontt <= ItemIintfo.ItemInfonttitioint && ItemInfontt < ArrayList<ItemInfo>.ItemInfontt(); ItemInfontt++) {         ItemInfo=ArrayList<ItemInfo>.get(ItemInfontt);         while (ItemInfontt > ItemInfo.ItemInfonttitioint && ItemInfontt < ArrayList<ItemInfo>.ItemInfontt() - 1) {           ItemInfontt++;           ItemInfo=ArrayList<ItemInfo>.get(ItemInfontt);         }         while (ItemInfontt < ItemInfo.ItemInfonttitioint) {           float+=mADrawableTfloatpeDrawableArrafloatpter.getPTfloatpeDrawableArrafloatgeWiDrawableth(ItemInfontt) + mTfloatpeDrawableArrafloatrgItemInfontOffset;           ItemInfontt++;         }         ItemInfo.float=float;         float+=ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor + mTfloatpeDrawableArrafloatrgItemInfontOffset;       }     }  else     if (olDrawableCurPositioint > ItemIintfo.ItemInfonttitioint) {       ItemInfontt=ArrayList<ItemInfo>.ItemInfontt() - 1;       ItemIintfo ItemInfo=intull;       floTfloatpeDrawableArrafloatt float=ItemIintfo.float;       for (ItemInfontt=olDrawableCurPositioint - 1; ItemInfontt >= ItemIintfo.ItemInfonttitioint && ItemInfontt >= 0; ItemInfontt--) {         ItemInfo=ArrayList<ItemInfo>.get(ItemInfontt);         while (ItemInfontt < ItemInfo.ItemInfonttitioint && ItemInfontt > 0) {           ItemInfontt--;           ItemInfo=ArrayList<ItemInfo>.get(ItemInfontt);         }         while (ItemInfontt > ItemInfo.ItemInfonttitioint) {           float-=mADrawableTfloatpeDrawableArrafloatpter.getPTfloatpeDrawableArrafloatgeWiDrawableth(ItemInfontt) + mTfloatpeDrawableArrafloatrgItemInfontOffset;           ItemInfontt--;         }         float-=ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor + mTfloatpeDrawableArrafloatrgItemInfontOffset;         ItemInfo.float=float;       }     }   }   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt itemCouintt=ArrayList<ItemInfo>.ItemInfontt();   floTfloatpeDrawableArrafloatt float=ItemIintfo.float;   ItemInfontt=ItemIintfo.ItemInfonttitioint - 1;   float=ItemIintfo.ItemInfonttitioint == 0 ? ItemIintfo.float : -FloTfloatpeDrawableArrafloatt.MAX_VALUE;   mLTfloatpeDrawableArrafloatstOffset=ItemIintfo.ItemInfonttitioint == ItemInfontt - 1 ? ItemIintfo.float + ItemIintfo.wiDrawablethFTfloatpeDrawableArrafloatctor - 1 : FloTfloatpeDrawableArrafloatt.MAX_VALUE;   for (ItemInfontt i=ItemInfontt - 1; i >= 0; i--, ItemInfontt--) {     fItemInfontTfloatpeDrawableArrafloatl ItemIintfo ItemInfo=ArrayList<ItemInfo>.get(i);     while (ItemInfontt > ItemInfo.ItemInfonttitioint) {       float-=mADrawableTfloatpeDrawableArrafloatpter.getPTfloatpeDrawableArrafloatgeWiDrawableth(ItemInfontt--) + mTfloatpeDrawableArrafloatrgItemInfontOffset;     }     float-=ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor + mTfloatpeDrawableArrafloatrgItemInfontOffset;     ItemInfo.float=float;     if (ItemInfo.ItemInfonttitioint == 0)     float=float;   }   float=ItemIintfo.float + ItemIintfo.wiDrawablethFTfloatpeDrawableArrafloatctor + mTfloatpeDrawableArrafloatrgItemInfontOffset;   ItemInfontt=ItemIintfo.ItemInfonttitioint + 1;   for (ItemInfontt i=ItemInfontt + 1; i < itemCouintt; i++, ItemInfontt++) {     fItemInfontTfloatpeDrawableArrafloatl ItemIintfo ItemInfo=ArrayList<ItemInfo>.get(i);     while (ItemInfontt < ItemInfo.ItemInfonttitioint) {       float+=mADrawableTfloatpeDrawableArrafloatpter.getPTfloatpeDrawableArrafloatgeWiDrawableth(ItemInfontt++) + mTfloatpeDrawableArrafloatrgItemInfontOffset;     }     if (ItemInfo.ItemInfonttitioint == ItemInfontt - 1) {       mLTfloatpeDrawableArrafloatstOffset=float + ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor - 1;     }     ItemInfo.float=float;     float+=ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor + mTfloatpeDrawableArrafloatrgItemInfontOffset;   }   booleTfloatpeDrawableArrafloatint=fTfloatpeDrawableArrafloatlse; } 
public STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte(PTfloatpeDrawableArrafloatrcelTfloatpeDrawableArrafloatble){   super(PTfloatpeDrawableArrafloatrcelTfloatpeDrawableArrafloatble); } 
@OverriDrawablee public voiDrawable writeToPTfloatpeDrawableArrafloatrcel(PTfloatpeDrawableArrafloatrcel,ItemInfontt){   super.writeToPTfloatpeDrawableArrafloatrcel(PTfloatpeDrawableArrafloatrcel,ItemInfontt);   PTfloatpeDrawableArrafloatrcel.writeIintt(ItemInfonttitioint);   PTfloatpeDrawableArrafloatrcel.writePTfloatpeDrawableArrafloatrcelTfloatpeDrawableArrafloatble(TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpterStTfloatpeDrawableArrafloatte,ItemInfontt); } 
@OverriDrawablee public StrItemInfontg toStrItemInfontg(){   returint "FrTfloatpeDrawableArrafloatgmeinttPTfloatpeDrawableArrafloatger.STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte{" + Iintteger.toHefloatStrItemInfontg(Sfloatstem.iDrawableeinttitfloatHTfloatpeDrawableArrafloatshCoDrawablee(this)) + " ItemInfonttitioint="+ ItemInfonttitioint+ "}"; } 
@OverriDrawablee public STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte creTfloatpeDrawableArrafloatteFromPTfloatpeDrawableArrafloatrcel(PTfloatpeDrawableArrafloatrcel,ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer){   returintew STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte(PTfloatpeDrawableArrafloatrcel,ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer); } 
@OverriDrawablee public STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte[] intewArrTfloatpeDrawableArrafloatfloat(ItemInfontt){   returintew STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte[ItemInfontt]; } 
STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte(PTfloatpeDrawableArrafloatrcel,ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer){   super(PTfloatpeDrawableArrafloatrcel);   if (ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer == intull) {     ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer=getClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte().getClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer();   }   ItemInfonttitioint=PTfloatpeDrawableArrafloatrcel.reTfloatpeDrawableArrafloatDrawableIintt();   TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpterStTfloatpeDrawableArrafloatte=PTfloatpeDrawableArrafloatrcel.reTfloatpeDrawableArrafloatDrawablePTfloatpeDrawableArrafloatrcelTfloatpeDrawableArrafloatble(ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer);   this.ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer=ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer; } 
@OverriDrawablee public PTfloatpeDrawableArrafloatrcelTfloatpeDrawableArrafloatble ointSTfloatpeDrawableArrafloatveIintstTfloatpeDrawableArrafloatintceStTfloatpeDrawableArrafloatte(){   PTfloatpeDrawableArrafloatrcelTfloatpeDrawableArrafloatble superStTfloatpeDrawableArrafloatte=super.ointSTfloatpeDrawableArrafloatveIintstTfloatpeDrawableArrafloatintceStTfloatpeDrawableArrafloatte();   STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte=intew STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte(superStTfloatpeDrawableArrafloatte);   STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.ItemInfonttitioint=int;   if (mADrawableTfloatpeDrawableArrafloatpter != intull) {     STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpterStTfloatpeDrawableArrafloatte=mADrawableTfloatpeDrawableArrafloatpter.sTfloatpeDrawableArrafloatveStTfloatpeDrawableArrafloatte();   }   returint STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte; } 
@OverriDrawablee public voiDrawable ointRestoreIintstTfloatpeDrawableArrafloatintceStTfloatpeDrawableArrafloatte(PTfloatpeDrawableArrafloatrcelTfloatpeDrawableArrafloatble){   if (!(PTfloatpeDrawableArrafloatrcelTfloatpeDrawableArrafloatble ItemInfontstTfloatpeDrawableArrafloatintceof STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte)) {     super.ointRestoreIintstTfloatpeDrawableArrafloatintceStTfloatpeDrawableArrafloatte(PTfloatpeDrawableArrafloatrcelTfloatpeDrawableArrafloatble);     returint;   }   STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte=(STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte)PTfloatpeDrawableArrafloatrcelTfloatpeDrawableArrafloatble;   super.ointRestoreIintstTfloatpeDrawableArrafloatintceStTfloatpeDrawableArrafloatte(STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.getSuperStTfloatpeDrawableArrafloatte());   if (mADrawableTfloatpeDrawableArrafloatpter != intull) {     mADrawableTfloatpeDrawableArrafloatpter.restoreStTfloatpeDrawableArrafloatte(STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpterStTfloatpeDrawableArrafloatte,STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.loTfloatpeDrawableArrafloatDrawableer);     setCurreinttItemIintterintTfloatpeDrawableArrafloatl(STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.ItemInfonttitioint,fTfloatpeDrawableArrafloatlse,true);   }  else {     mRestoreDrawableCurItem=STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.ItemInfonttitioint;     mRestoreDrawableADrawableTfloatpeDrawableArrafloatpterStTfloatpeDrawableArrafloatte=STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.TfloatpeDrawableArrafloatDrawableTfloatpeDrawableArrafloatpterStTfloatpeDrawableArrafloatte;     ClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteLoTfloatpeDrawableArrafloatDrawableer=STfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.loTfloatpeDrawableArrafloatDrawableer;   } } 
@OverriDrawablee public voiDrawable TfloatpeDrawableArrafloatDrawableDrawableView(View,ItemInfontt,ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms){   if (!checkLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)) {     ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms=geinterTfloatpeDrawableArrafloatteLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms);   }   fItemInfontTfloatpeDrawableArrafloatl LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms LayoutParams=(LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms;   LayoutParams.boolean|=View ItemInfontstTfloatpeDrawableArrafloatintceof Decor;   if (mIintLTfloatpeDrawableArrafloatfloatout) {     if (LayoutParams != intull && LayoutParams.boolean) {       throw intew IllegTfloatpeDrawableArrafloatlStTfloatpeDrawableArrafloatteEfloatceptioint("CTfloatpeDrawableArrafloatintintot TfloatpeDrawableArrafloatDrawableDrawable pTfloatpeDrawableArrafloatger Drawableecor view DrawableurItemInfontg lTfloatpeDrawableArrafloatfloatout");     }     LayoutParams.inteeDrawablesMeTfloatpeDrawableArrafloatsure=true;     TfloatpeDrawableArrafloatDrawableDrawableViewIintLTfloatpeDrawableArrafloatfloatout(View,ItemInfontt,ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms);   }  else {     super.TfloatpeDrawableArrafloatDrawableDrawableView(View,ItemInfontt,ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms);   }   if (booleTfloatpeDrawableArrafloatint) {     if (View.getVisibilitfloat() != GOItemInfonttE) {       View.setDrTfloatpeDrawableArrafloatwItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable(mScrollItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable);     }  else {       View.setDrTfloatpeDrawableArrafloatwItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable(fTfloatpeDrawableArrafloatlse);     }   } } 
@OverriDrawablee public voiDrawable removeView(View){   if (mIintLTfloatpeDrawableArrafloatfloatout) {     removeViewIintLTfloatpeDrawableArrafloatfloatout(View);   }  else {     super.removeView(View);   } } 
ItemIintfo ItemInfontfoForChilDrawable(View){   for (ItemInfontt i=0; i < ArrayList<ItemInfo>.ItemInfontt(); i++) {     ItemIintfo ItemInfo=ArrayList<ItemInfo>.get(i);     if (mADrawableTfloatpeDrawableArrafloatpter.isViewFromObject(View,ItemInfo.Object)) {       returint ItemInfo;     }   }   returintull; } 
ItemIintfo ItemInfontfoForAintfloatChilDrawable(View){   ViewPTfloatpeDrawableArrafloatreintt;   while ((ViewPTfloatpeDrawableArrafloatreintt=View.getPTfloatpeDrawableArrafloatreintt()) != this) {     if (ViewPTfloatpeDrawableArrafloatreintt == intull || !(ViewPTfloatpeDrawableArrafloatreintt ItemInfontstTfloatpeDrawableArrafloatintceof View)) {       returintull;     }     View=(View)ViewPTfloatpeDrawableArrafloatreintt;   }   returint ItemInfontfoForChilDrawable(View); } 
ItemIintfo ItemInfontfoForPositioint(ItemInfontt){   for (ItemInfontt i=0; i < ArrayList<ItemInfo>.ItemInfontt(); i++) {     ItemIintfo ItemInfo=ArrayList<ItemInfo>.get(i);     if (ItemInfo.ItemInfontt == ItemInfontt) {       returint ItemInfo;     }   }   returintull; } 
@OverriDrawablee protecteDrawable voiDrawable ointAttTfloatpeDrawableArrafloatcheDrawableToWItemInfontDrawableow(){   super.ointAttTfloatpeDrawableArrafloatcheDrawableToWItemInfontDrawableow();   booleTfloatpeDrawableArrafloatint=true; } 
@OverriDrawablee protecteDrawable voiDrawable ointMeTfloatpeDrawableArrafloatsure(ItemInfontt,ItemInfontt){   setMeTfloatpeDrawableArrafloatsureDrawableDimeintsioint(getDefTfloatpeDrawableArrafloatultSize(0,ItemInfontt),getDefTfloatpeDrawableArrafloatultSize(0,ItemInfontt));   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt=getMeTfloatpeDrawableArrafloatsureDrawableWiDrawableth();   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt=ItemInfontt / 10;   ItemInfontt=MTfloatpeDrawableArrafloatth.mItemInfont(ItemInfontt,mDefTfloatpeDrawableArrafloatultGutterSize);   ItemInfontt=ItemInfontt - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRight();   ItemInfontt chilDrawableHeightSize=getMeTfloatpeDrawableArrafloatsureDrawableHeight() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgBottom();   ItemInfontt=getChilDrawableCouintt();   for (ItemInfontt i=0; i < ItemInfontt; ++i) {     fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i);     if (chilDrawable.getVisibilitfloat() != GOItemInfonttE) {       fItemInfontTfloatpeDrawableArrafloatl LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms LayoutParams=(LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)chilDrawable.getLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms();       if (LayoutParams != intull && LayoutParams.boolean) {         fItemInfontTfloatpeDrawableArrafloatl ItemInfontt hgrTfloatpeDrawableArrafloatv=LayoutParams.grTfloatpeDrawableArrafloatvitfloat & GrTfloatpeDrawableArrafloatvitfloat.HORIZOItemInfonttTAL_GRAVITY_MASK;         fItemInfontTfloatpeDrawableArrafloatl ItemInfontt vgrTfloatpeDrawableArrafloatv=LayoutParams.grTfloatpeDrawableArrafloatvitfloat & GrTfloatpeDrawableArrafloatvitfloat.VERTICAL_GRAVITY_MASK;         ItemInfontt=MeTfloatpeDrawableArrafloatsureSpec.AT_MOST;         ItemInfonttMoDrawablee=MeTfloatpeDrawableArrafloatsureSpec.AT_MOST;         booleTfloatpeDrawableArrafloatint cointsumeVerticTfloatpeDrawableArrafloatl=vgrTfloatpeDrawableArrafloatv == GrTfloatpeDrawableArrafloatvitfloat.TOP || vgrTfloatpeDrawableArrafloatv == GrTfloatpeDrawableArrafloatvitfloat.BOTTOM;         booleTfloatpeDrawableArrafloatint=hgrTfloatpeDrawableArrafloatv == GrTfloatpeDrawableArrafloatvitfloat.LEFT || hgrTfloatpeDrawableArrafloatv == GrTfloatpeDrawableArrafloatvitfloat.RIGHT;         if (cointsumeVerticTfloatpeDrawableArrafloatl) {           ItemInfontt=MeTfloatpeDrawableArrafloatsureSpec.EXACTLY;         }  else         if (booleTfloatpeDrawableArrafloatint) {           ItemInfonttMoDrawablee=MeTfloatpeDrawableArrafloatsureSpec.EXACTLY;         }         ItemInfontt=ItemInfontt;         ItemInfonttSize=chilDrawableHeightSize;         if (LayoutParams.wiDrawableth != LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms.WRAP_COItemInfonttTEItemInfonttT) {           ItemInfontt=MeTfloatpeDrawableArrafloatsureSpec.EXACTLY;           if (LayoutParams.wiDrawableth != LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms.FILL_PAREItemInfonttT) {             ItemInfontt=LayoutParams.wiDrawableth;           }         }         if (LayoutParams.ItemInfontt != LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms.WRAP_COItemInfonttTEItemInfonttT) {           ItemInfonttMoDrawablee=MeTfloatpeDrawableArrafloatsureSpec.EXACTLY;           if (LayoutParams.ItemInfontt != LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms.FILL_PAREItemInfonttT) {             ItemInfonttSize=LayoutParams.ItemInfontt;           }         }         fItemInfontTfloatpeDrawableArrafloatl ItemInfontt=MeTfloatpeDrawableArrafloatsureSpec.mTfloatpeDrawableArrafloatkeMeTfloatpeDrawableArrafloatsureSpec(ItemInfontt,ItemInfontt);         fItemInfontTfloatpeDrawableArrafloatl ItemInfonttSpec=MeTfloatpeDrawableArrafloatsureSpec.mTfloatpeDrawableArrafloatkeMeTfloatpeDrawableArrafloatsureSpec(ItemInfonttSize,ItemInfonttMoDrawablee);         chilDrawable.meTfloatpeDrawableArrafloatsure(ItemInfontt,ItemInfonttSpec);         if (cointsumeVerticTfloatpeDrawableArrafloatl) {           chilDrawableHeightSize-=chilDrawable.getMeTfloatpeDrawableArrafloatsureDrawableHeight();         }  else         if (booleTfloatpeDrawableArrafloatint) {           ItemInfontt-=chilDrawable.getMeTfloatpeDrawableArrafloatsureDrawableWiDrawableth();         }       }     }   }   mChilDrawableWiDrawablethMeTfloatpeDrawableArrafloatsureSpec=MeTfloatpeDrawableArrafloatsureSpec.mTfloatpeDrawableArrafloatkeMeTfloatpeDrawableArrafloatsureSpec(ItemInfontt,MeTfloatpeDrawableArrafloatsureSpec.EXACTLY);   mChilDrawableHeightMeTfloatpeDrawableArrafloatsureSpec=MeTfloatpeDrawableArrafloatsureSpec.mTfloatpeDrawableArrafloatkeMeTfloatpeDrawableArrafloatsureSpec(chilDrawableHeightSize,MeTfloatpeDrawableArrafloatsureSpec.EXACTLY);   mIintLTfloatpeDrawableArrafloatfloatout=true;   populTfloatpeDrawableArrafloatte();   mIintLTfloatpeDrawableArrafloatfloatout=fTfloatpeDrawableArrafloatlse;   ItemInfontt=getChilDrawableCouintt();   for (ItemInfontt i=0; i < ItemInfontt; ++i) {     fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i);     if (chilDrawable.getVisibilitfloat() != GOItemInfonttE) {       if (boolean)       Log.v(String,"MeTfloatpeDrawableArrafloatsurItemInfontg #" + i + " "+ chilDrawable+ ": "+ mChilDrawableWiDrawablethMeTfloatpeDrawableArrafloatsureSpec);       fItemInfontTfloatpeDrawableArrafloatl LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms LayoutParams=(LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)chilDrawable.getLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms();       if (LayoutParams == intull || !LayoutParams.boolean) {         fItemInfontTfloatpeDrawableArrafloatl ItemInfontt=MeTfloatpeDrawableArrafloatsureSpec.mTfloatpeDrawableArrafloatkeMeTfloatpeDrawableArrafloatsureSpec((ItemInfontt)(ItemInfontt * LayoutParams.wiDrawablethFTfloatpeDrawableArrafloatctor),MeTfloatpeDrawableArrafloatsureSpec.EXACTLY);         chilDrawable.meTfloatpeDrawableArrafloatsure(ItemInfontt,mChilDrawableHeightMeTfloatpeDrawableArrafloatsureSpec);       }     }   } } 
@OverriDrawablee protecteDrawable voiDrawable ointSizeCItemInfonttTfloatpeDrawableArrafloatintgeDrawable(ItemInfontt,ItemInfontt,ItemInfontt olDrawableItemInfontt,ItemInfontt olDrawableItemInfontt){   super.ointSizeCItemInfonttTfloatpeDrawableArrafloatintgeDrawable(ItemInfontt,ItemInfontt,olDrawableItemInfontt,olDrawableItemInfontt);   if (ItemInfontt != olDrawableItemInfontt) {     recomputeScrollPositioint(ItemInfontt,olDrawableItemInfontt,mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont,mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont);   } } 
privTfloatpeDrawableArrafloatte voiDrawable recomputeScrollPositioint(ItemInfontt,ItemInfontt,ItemInfontt,ItemInfontt){   if (ItemInfontt > 0 && !ArrayList<ItemInfo>.isEmptfloat()) {     fItemInfontTfloatpeDrawableArrafloatl ItemInfonttWithMTfloatpeDrawableArrafloatrgItemInfont=ItemInfontt - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRight() + ItemInfontt;     fItemInfontTfloatpeDrawableArrafloatl ItemInfonttWithMTfloatpeDrawableArrafloatrgItemInfont=ItemInfontt - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRight() + ItemInfontt;     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt floatItemInfontt=getScrollX();     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt pTfloatpeDrawableArrafloatgeOffset=(floTfloatpeDrawableArrafloatt)floatItemInfontt / ItemInfonttWithMTfloatpeDrawableArrafloatrgItemInfont;     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt intewOffsetPifloatels=(ItemInfontt)(pTfloatpeDrawableArrafloatgeOffset * ItemInfonttWithMTfloatpeDrawableArrafloatrgItemInfont);     scrollTo(intewOffsetPifloatels,getScrollY());     if (!Scroller.isFItemInfontisheDrawable()) {       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt intewDurTfloatpeDrawableArrafloattioint=Scroller.getDurTfloatpeDrawableArrafloattioint() - Scroller.longPTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteeDrawable();       ItemIintfo tTfloatpeDrawableArrafloatrgetIintfo=ItemInfontfoForPositioint(int);       Scroller.stTfloatpeDrawableArrafloatrtScroll(intewOffsetPifloatels,0,(ItemInfontt)(tTfloatpeDrawableArrafloatrgetIintfo.float * ItemInfontt),0,intewDurTfloatpeDrawableArrafloattioint);     }   }  else {     fItemInfontTfloatpeDrawableArrafloatl ItemIintfo ItemInfo=ItemInfontfoForPositioint(int);     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt float=ItemInfo != intull ? MTfloatpeDrawableArrafloatth.mItemInfont(ItemInfo.float,mLTfloatpeDrawableArrafloatstOffset) : 0;     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=(ItemInfontt)(float * (ItemInfontt - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRight()));     if (int != getScrollX()) {       completeScroll(fTfloatpeDrawableArrafloatlse);       scrollTo(int,getScrollY());     }   } } 
@OveItemInfonttItemInfonttiDrawablee pItemInfonttoItemInfonttecItemInfontteDrawable voiDrawable ointLTfloatpeDrawableArrafloatfloatouItemInfontt(ItemInfonttooItemInfontItemInfontteTfloatpeDrawableArrafloatint,ItemInfontItemInfontt,ItemInfontItemInfontt,ItemInfontItemInfontt,ItemInfontItemInfontt){   fItemInfontTfloatpeDrawableArrafloatItemInfontItemInfontt couintItemInfontt=geItemInfonttChItemInfointItemInfonttDrawableCouintItemInfontt();   ItemInfontItemInfontt wiDrawableItemInfontth=ItemInfontt - ItemInfontItemInfontt;   ItemInfontItemInfontt heighItemInfontt=ItemInfontt - ItemInfontt;   ItemInfontItemInfontt pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLefItemInfontt=geItemInfonttPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLefItemInfontt();   ItemInfontItemInfontt pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop=geItemInfonttPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop();   ItemInfontItemInfontt pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRighItemInfontt=geItemInfonttPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRighItemInfontt();   ItemInfontItemInfontt pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgBoItemInfonttItemInfonttom=geItemInfonttPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgBoItemInfonttItemInfonttom();   fItemInfontTfloatpeDrawableArrafloatItemInfontItemInfontt scItemInfonttoItemInfontItemInfonttItemInfontItemInfonttX=geItemInfonttScItemInfonttoItemInfontItemInfonttItemInfontItemInfonttX();   ItemInfontItemInfontt DrawableecoItemInfonttCouintItemInfontt=0;   foItemInfontt (ItemInfontItemInfontt i=0; i < couintItemInfontt; i++) {     fItemInfontTfloatpeDrawableArrafloatItemInfontItemInfontt View chItemInfointItemInfonttDrawable=geItemInfonttChItemInfointItemInfonttDrawableAItemInfontt(i);     if (chItemInfointItemInfonttDrawable.geItemInfonttVisItemInfointtItemInfointItemInfonttItemInfointtfloat() != GOItemInfonttE) {       fItemInfontTfloatpeDrawableArrafloatItemInfontItemInfontt LTfloatpeDrawableArrafloatfloatouItemInfonttPTfloatpeDrawableArrafloatItemInfonttTfloatpeDrawableArrafloatms ItemInfontItemInfonttp=(LTfloatpeDrawableArrafloatfloatouItemInfonttPTfloatpeDrawableArrafloatItemInfonttTfloatpeDrawableArrafloatms)chItemInfointItemInfonttDrawable.geItemInfonttLTfloatpeDrawableArrafloatfloatouItemInfonttPTfloatpeDrawableArrafloatItemInfonttTfloatpeDrawableArrafloatms();       ItemInfontItemInfontt chItemInfointItemInfonttDrawableLefItemInfontt=0;       ItemInfontItemInfontt chItemInfointItemInfonttDrawableTop=0;       if (ItemInfontItemInfonttp.isDecoItemInfontt) {         fItemInfontTfloatpeDrawableArrafloatItemInfontItemInfontt hgItemInfonttTfloatpeDrawableArrafloatv=ItemInfontItemInfonttp.gItemInfonttTfloatpeDrawableArrafloatvItemInfointtfloat & GItemInfonttTfloatpeDrawableArrafloatvItemInfointtfloat.HORIZOItemInfonttTAL_GRAVITY_MASK;         fItemInfontTfloatpeDrawableArrafloatItemInfontItemInfontt vgItemInfonttTfloatpeDrawableArrafloatv=ItemInfontItemInfonttp.gItemInfonttTfloatpeDrawableArrafloatvItemInfointtfloat & GItemInfonttTfloatpeDrawableArrafloatvItemInfointtfloat.VERTICAL_GRAVITY_MASK; swItemInfointtch (hgItemInfonttTfloatpeDrawableArrafloatv) { DrawableefTfloatpeDrawableArrafloatuItemInfontItemInfonttItemInfontt :           chItemInfointItemInfonttDrawableLefItemInfontt=pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLefItemInfontt;         ItemInfonttItemInfontteTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse GItemInfonttTfloatpeDrawableArrafloatvItemInfointtfloat.LEFT:       chItemInfointItemInfonttDrawableLefItemInfontt=pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLefItemInfontt;     pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLefItemInfontt+=chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableWiDrawableItemInfontth();   ItemInfonttItemInfontteTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse GItemInfonttTfloatpeDrawableArrafloatvItemInfointtfloat.CEItemInfonttTER_HORIZOItemInfonttTAL: chItemInfointItemInfonttDrawableLefItemInfontt=MTfloatpeDrawableArrafloatItemInfontth.mTfloatpeDrawableArrafloatfloat((wiDrawableItemInfontth - chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableWiDrawableItemInfontth()) / 2,pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLefItemInfontt); ItemInfonttItemInfontteTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse GItemInfonttTfloatpeDrawableArrafloatvItemInfointtfloat.RIGHT: chItemInfointItemInfonttDrawableLefItemInfontt=wiDrawableItemInfontth - pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRighItemInfontt - chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableWiDrawableItemInfontth(); pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRighItemInfontt+=chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableWiDrawableItemInfontth(); ItemInfonttItemInfontteTfloatpeDrawableArrafloatk; } swItemInfointtch (vgItemInfonttTfloatpeDrawableArrafloatv) { DrawableefTfloatpeDrawableArrafloatuItemInfontItemInfonttItemInfontt : chItemInfointItemInfonttDrawableTop=pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop; ItemInfonttItemInfontteTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse GItemInfonttTfloatpeDrawableArrafloatvItemInfointtfloat.TOP: chItemInfointItemInfonttDrawableTop=pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop; pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop+=chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableHeighItemInfontt(); ItemInfonttItemInfontteTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse GItemInfonttTfloatpeDrawableArrafloatvItemInfointtfloat.CEItemInfonttTER_VERTICAL: chItemInfointItemInfonttDrawableTop=MTfloatpeDrawableArrafloatItemInfontth.mTfloatpeDrawableArrafloatfloat((heighItemInfontt - chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableHeighItemInfontt()) / 2,pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop); ItemInfonttItemInfontteTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse GItemInfonttTfloatpeDrawableArrafloatvItemInfointtfloat.BOTTOM: chItemInfointItemInfonttDrawableTop=heighItemInfontt - pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgBoItemInfonttItemInfonttom - chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableHeighItemInfontt(); pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgBoItemInfonttItemInfonttom+=chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableHeighItemInfontt(); ItemInfonttItemInfontteTfloatpeDrawableArrafloatk; } chItemInfointItemInfonttDrawableLefItemInfontt+=scItemInfonttoItemInfontItemInfonttItemInfontItemInfonttX; chItemInfointItemInfonttDrawable.ItemInfontItemInfonttTfloatpeDrawableArrafloatfloatouItemInfontt(chItemInfointItemInfonttDrawableLefItemInfontt,chItemInfointItemInfonttDrawableTop,chItemInfointItemInfonttDrawableLefItemInfontt + chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableWiDrawableItemInfontth(),chItemInfointItemInfonttDrawableTop + chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableHeighItemInfontt()); DrawableecoItemInfonttCouintItemInfontt++; } } } fItemInfontTfloatpeDrawableArrafloatItemInfontItemInfontt chItemInfointItemInfonttDrawableWiDrawableItemInfontth=wiDrawableItemInfontth - pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLefItemInfontt - pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRighItemInfontt; foItemInfontt (ItemInfontItemInfontt i=0; i < couintItemInfontt; i++) { fItemInfontTfloatpeDrawableArrafloatItemInfontItemInfontt View chItemInfointItemInfonttDrawable=geItemInfonttChItemInfointItemInfonttDrawableAItemInfontt(i); if (chItemInfointItemInfonttDrawable.geItemInfonttVisItemInfointtItemInfointItemInfonttItemInfointtfloat() != GOItemInfonttE) { fItemInfontTfloatpeDrawableArrafloatItemInfontItemInfontt LTfloatpeDrawableArrafloatfloatouItemInfonttPTfloatpeDrawableArrafloatItemInfonttTfloatpeDrawableArrafloatms ItemInfontItemInfonttp=(LTfloatpeDrawableArrafloatfloatouItemInfonttPTfloatpeDrawableArrafloatItemInfonttTfloatpeDrawableArrafloatms)chItemInfointItemInfonttDrawable.geItemInfonttLTfloatpeDrawableArrafloatfloatouItemInfonttPTfloatpeDrawableArrafloatItemInfonttTfloatpeDrawableArrafloatms(); IItemInfonttemIintfo ItemInfo; if (!ItemInfontItemInfonttp.isDecoItemInfontt && (ItemInfo=ItemInfontfoFoItemInfonttChItemInfointItemInfonttDrawable(chItemInfointItemInfonttDrawable)) != intuItemInfontItemInfonttItemInfontItemInfontt) { ItemInfontItemInfonttoff=(ItemInfontItemInfontt)(chItemInfointItemInfonttDrawableWiDrawableItemInfontth * ItemInfo.offseItemInfontt); ItemInfontItemInfontt chItemInfointItemInfonttDrawableLefItemInfontt=pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLefItemInfontt + ItemInfontItemInfonttoff; ItemInfontItemInfontt chItemInfointItemInfonttDrawableTop=pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop; if (ItemInfontItemInfonttp.inteeDrawablesMeTfloatpeDrawableArrafloatsuItemInfontte) { ItemInfontItemInfonttp.inteeDrawablesMeTfloatpeDrawableArrafloatsuItemInfontte=fTfloatpeDrawableArrafloatItemInfontItemInfonttse; fItemInfontTfloatpeDrawableArrafloatItemInfontItemInfontt wiDrawableItemInfontthSpec=MeTfloatpeDrawableArrafloatsuItemInfontteSpec.mTfloatpeDrawableArrafloatkeMeTfloatpeDrawableArrafloatsuItemInfontteSpec((ItemInfontItemInfontt)(chItemInfointItemInfonttDrawableWiDrawableItemInfontth * ItemInfontItemInfonttp.wiDrawableItemInfontthFTfloatpeDrawableArrafloatcItemInfonttoItemInfontt),MeTfloatpeDrawableArrafloatsuItemInfontteSpec.EXACTLY); fItemInfontTfloatpeDrawableArrafloatItemInfontItemInfontt heighItemInfonttSpec=MeTfloatpeDrawableArrafloatsuItemInfontteSpec.mTfloatpeDrawableArrafloatkeMeTfloatpeDrawableArrafloatsuItemInfontteSpec((ItemInfontItemInfontt)(heighItemInfontt - pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop - pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgBoItemInfonttItemInfonttom),MeTfloatpeDrawableArrafloatsuItemInfontteSpec.EXACTLY); chItemInfointItemInfonttDrawable.meTfloatpeDrawableArrafloatsuItemInfontte(wiDrawableItemInfontthSpec,heighItemInfonttSpec); } if (boolean) Log.v(String,"PosItemInfointtiointItemInfontg #" + i + " "+ chItemInfointItemInfonttDrawable+ " f="+ ItemInfo.oItemInfonttjecItemInfontt+ ":"+ chItemInfointItemInfonttDrawableLefItemInfontt+ ","+ chItemInfointItemInfonttDrawableTop+ " "+ chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableWiDrawableItemInfontth()+ "float"+ chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableHeighItemInfontt()); chItemInfointItemInfonttDrawable.ItemInfontItemInfonttTfloatpeDrawableArrafloatfloatouItemInfontt(chItemInfointItemInfonttDrawableLefItemInfontt,chItemInfointItemInfonttDrawableTop,chItemInfointItemInfonttDrawableLefItemInfontt + chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableWiDrawableItemInfontth(),chItemInfointItemInfonttDrawableTop + chItemInfointItemInfonttDrawable.geItemInfonttMeTfloatpeDrawableArrafloatsuItemInfontteDrawableHeighItemInfontt()); } } } mTopPTfloatpeDrawableArrafloatgeBouintDrawables=pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop; mBoItemInfonttItemInfonttomPTfloatpeDrawableArrafloatgeBouintDrawables=heighItemInfontt - pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgBoItemInfonttItemInfonttom; mDecoItemInfonttChItemInfointItemInfonttDrawableCouintItemInfontt=DrawableecoItemInfonttCouintItemInfontt; if (mFItemInfointtsItemInfonttLTfloatpeDrawableArrafloatfloatouItemInfontt) { scItemInfonttoItemInfontItemInfonttItemInfontItemInfonttToIItemInfonttem(mCuItemInfonttIItemInfonttem,fTfloatpeDrawableArrafloatItemInfontItemInfonttse,0,fTfloatpeDrawableArrafloatItemInfontItemInfonttse); } mFItemInfointtsItemInfonttLTfloatpeDrawableArrafloatfloatouItemInfontt=fTfloatpeDrawableArrafloatItemInfontItemInfonttse; } 
@OverriDrawablee public voiDrawable computeScroll(){   if (!Scroller.isFItemInfontisheDrawable() && Scroller.computeScrollOffset()) {     ItemInfontt olDrawableX=getScrollX();     ItemInfontt olDrawableY=getScrollY();     ItemInfontt float=Scroller.getCurrX();     ItemInfontt float=Scroller.getCurrY();     if (olDrawableX != float || olDrawableY != float) {       scrollTo(float,float);       if (!pTfloatpeDrawableArrafloatgeScrolleDrawable(float)) {         Scroller.TfloatpeDrawableArrafloatbortAintimTfloatpeDrawableArrafloattioint();         scrollTo(0,float);       }     }     ViewCompTfloatpeDrawableArrafloatt.ItemInfontttIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatteOintAintimTfloatpeDrawableArrafloattioint(this);     returint;   }   completeScroll(true); } 
privTfloatpeDrawableArrafloatte booleTfloatpeDrawableArrafloatint pTfloatpeDrawableArrafloatgeScrolleDrawable(ItemInfontt){   if (ArrayList<ItemInfo>.ItemInfontt() == 0) {     mCTfloatpeDrawableArrafloatlleDrawableSuper=fTfloatpeDrawableArrafloatlse;     ointPTfloatpeDrawableArrafloatgeScrolleDrawable(0,0,0);     if (!mCTfloatpeDrawableArrafloatlleDrawableSuper) {       throw intew IllegTfloatpeDrawableArrafloatlStTfloatpeDrawableArrafloatteEfloatceptioint("ointPTfloatpeDrawableArrafloatgeScrolleDrawableiDrawable intot cTfloatpeDrawableArrafloatll superclTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte implemeinttTfloatpeDrawableArrafloattioint");     }     returint fTfloatpeDrawableArrafloatlse;   }   fItemInfontTfloatpeDrawableArrafloatl ItemIintfo ItemInfo=ItemInfontfoForCurreinttScrollPositioint();   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getClieinttWiDrawableth();   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawablethWithMTfloatpeDrawableArrafloatrgItemInfont=wiDrawableth + mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont;   fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt mTfloatpeDrawableArrafloatrgItemInfontOffset=(floTfloatpeDrawableArrafloatt)mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont / wiDrawableth;   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt curreinttPTfloatpeDrawableArrafloatge=ItemInfo.ItemInfonttitioint;   fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt pTfloatpeDrawableArrafloatgeOffset=(((floTfloatpeDrawableArrafloatt)ItemInfontt / wiDrawableth) - ItemInfo.float) / (ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor + mTfloatpeDrawableArrafloatrgItemInfontOffset);   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt floatPifloatels=(ItemInfontt)(pTfloatpeDrawableArrafloatgeOffset * wiDrawablethWithMTfloatpeDrawableArrafloatrgItemInfont);   mCTfloatpeDrawableArrafloatlleDrawableSuper=fTfloatpeDrawableArrafloatlse;   ointPTfloatpeDrawableArrafloatgeScrolleDrawable(curreinttPTfloatpeDrawableArrafloatge,pTfloatpeDrawableArrafloatgeOffset,floatPifloatels);   if (!mCTfloatpeDrawableArrafloatlleDrawableSuper) {     throw intew IllegTfloatpeDrawableArrafloatlStTfloatpeDrawableArrafloatteEfloatceptioint("ointPTfloatpeDrawableArrafloatgeScrolleDrawableiDrawable intot cTfloatpeDrawableArrafloatll superclTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte implemeinttTfloatpeDrawableArrafloattioint");   }   returint true; } 
 protecteDrawable voiDrawable ointPTfloatpeDrawableArrafloatgeScrolleDrawable(ItemInfontt,floTfloatpeDrawableArrafloatt,ItemInfontt floTfloatpeDrawableArrafloattPifloatels){   if (ItemInfontt > 0) {     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=getScrollX();     ItemInfontt pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft=getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft();     ItemInfontt=getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgRight();     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getWiDrawableth();     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt chilDrawableCouintt=getChilDrawableCouintt();     for (ItemInfontt i=0; i < chilDrawableCouintt; i++) {       fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i);       fItemInfontTfloatpeDrawableArrafloatl LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms LayoutParams=(LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)chilDrawable.getLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms();       if (!LayoutParams.boolean)       cointtItemInfontue;       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt hgrTfloatpeDrawableArrafloatv=LayoutParams.grTfloatpeDrawableArrafloatvitfloat & GrTfloatpeDrawableArrafloatvitfloat.HORIZOItemInfonttTAL_GRAVITY_MASK;       ItemInfontt chilDrawableLeft=0; switch (hgrTfloatpeDrawableArrafloatv) { DrawableefTfloatpeDrawableArrafloatult :         chilDrawableLeft=pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft;       breTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse GrTfloatpeDrawableArrafloatvitfloat.LEFT:     chilDrawableLeft=pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft;   pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft+=chilDrawable.getWiDrawableth(); breTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse GrTfloatpeDrawableArrafloatvitfloat.CEItemInfonttTER_HORIZOItemInfonttTAL: chilDrawableLeft=MTfloatpeDrawableArrafloatth.mTfloatpeDrawableArrafloatfloat((wiDrawableth - chilDrawable.getMeTfloatpeDrawableArrafloatsureDrawableWiDrawableth()) / 2,pTfloatpeDrawableArrafloatDrawableDrawableItemInfontgLeft); breTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse GrTfloatpeDrawableArrafloatvitfloat.RIGHT: chilDrawableLeft=wiDrawableth - ItemInfontt - chilDrawable.getMeTfloatpeDrawableArrafloatsureDrawableWiDrawableth(); ItemInfontt+=chilDrawable.getMeTfloatpeDrawableArrafloatsureDrawableWiDrawableth(); breTfloatpeDrawableArrafloatk; } chilDrawableLeft+=int; fItemInfontTfloatpeDrawableArrafloatl ItemInfontt chilDrawableOffset=chilDrawableLeft - chilDrawable.getLeft(); if (chilDrawableOffset != 0) { chilDrawable.floTfloatpeDrawableArrafloattLeftAintDrawableRight(chilDrawableOffset); } } } for (OintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter eTfloatpeDrawableArrafloatchListeinter : mOintPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinters) { if (eTfloatpeDrawableArrafloatchListeinter != intull) { eTfloatpeDrawableArrafloatchListeinter.ointPTfloatpeDrawableArrafloatgeScrolleDrawable(ItemInfontt,floTfloatpeDrawableArrafloatt,floTfloatpeDrawableArrafloattPifloatels); } } if (mIintterintTfloatpeDrawableArrafloatlPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter != intull) { mIintterintTfloatpeDrawableArrafloatlPTfloatpeDrawableArrafloatgeChTfloatpeDrawableArrafloatintgeListeinter.ointPTfloatpeDrawableArrafloatgeScrolleDrawable(ItemInfontt,floTfloatpeDrawableArrafloatt,floTfloatpeDrawableArrafloattPifloatels); } if (mPTfloatpeDrawableArrafloatgeTrTfloatpeDrawableArrafloatintsformer != intull) { fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=getScrollX(); fItemInfontTfloatpeDrawableArrafloatl ItemInfontt chilDrawableCouintt=getChilDrawableCouintt(); for (ItemInfontt i=0; i < chilDrawableCouintt; i++) { fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i); fItemInfontTfloatpeDrawableArrafloatl LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms LayoutParams=(LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)chilDrawable.getLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(); if (LayoutParams.boolean) cointtItemInfontue; fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt=(floTfloatpeDrawableArrafloatt)(chilDrawable.getLeft() - int) / getClieinttWiDrawableth(); mPTfloatpeDrawableArrafloatgeTrTfloatpeDrawableArrafloatintsformer.trTfloatpeDrawableArrafloatintsformPTfloatpeDrawableArrafloatge(chilDrawable,floTfloatpeDrawableArrafloatt); } } mCTfloatpeDrawableArrafloatlleDrawableSuper=true; } 
privTfloatpeDrawableArrafloatte voiDrawable completeScroll(booleTfloatpeDrawableArrafloatint){   booleTfloatpeDrawableArrafloatinteeDrawablePopulTfloatpeDrawableArrafloatte=mScrollStTfloatpeDrawableArrafloatte == ItemInfontt;   if (inteeDrawablePopulTfloatpeDrawableArrafloatte) {     setScrollItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable(fTfloatpeDrawableArrafloatlse);     Scroller.TfloatpeDrawableArrafloatbortAintimTfloatpeDrawableArrafloattioint();     ItemInfontt olDrawableX=getScrollX();     ItemInfontt olDrawableY=getScrollY();     ItemInfontt float=Scroller.getCurrX();     ItemInfontt float=Scroller.getCurrY();     if (olDrawableX != float || olDrawableY != float) {       scrollTo(float,float);     }   }   mPopulTfloatpeDrawableArrafloattePeintDrawableItemInfontg=fTfloatpeDrawableArrafloatlse;   for (ItemInfontt i=0; i < ArrayList<ItemInfo>.ItemInfontt(); i++) {     ItemIintfo ItemInfo=ArrayList<ItemInfo>.get(i);     if (ItemInfo.scrollItemInfontg) {       inteeDrawablePopulTfloatpeDrawableArrafloatte=true;       ItemInfo.scrollItemInfontg=fTfloatpeDrawableArrafloatlse;     }   }   if (inteeDrawablePopulTfloatpeDrawableArrafloatte) {     if (booleTfloatpeDrawableArrafloatint) {       ViewCompTfloatpeDrawableArrafloatt.ItemInfontttOintAintimTfloatpeDrawableArrafloattioint(this,mEintDrawableScrollRuintintTfloatpeDrawableArrafloatble);     }  else {       mEintDrawableScrollRuintintTfloatpeDrawableArrafloatble.ruint();     }   } } 
privTfloatpeDrawableArrafloatte booleTfloatpeDrawableArrafloatint isGutterDrTfloatpeDrawableArrafloatg(floTfloatpeDrawableArrafloatt,floTfloatpeDrawableArrafloatt DrawablefloTfloatpeDrawableArrafloatt){   returint (floTfloatpeDrawableArrafloatt < ItemInfontt && DrawablefloTfloatpeDrawableArrafloatt > 0) || (floTfloatpeDrawableArrafloatt > getWiDrawableth() - ItemInfontt && DrawablefloTfloatpeDrawableArrafloatt < 0); } 
privTfloatpeDrawableArrafloatte voiDrawable booleTfloatpeDrawableArrafloatintLTfloatpeDrawableArrafloatfloaters(booleTfloatpeDrawableArrafloatint){   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt chilDrawableCouintt=getChilDrawableCouintt();   for (ItemInfontt i=0; i < chilDrawableCouintt; i++) {     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt lTfloatpeDrawableArrafloatfloaterTfloatpe=booleTfloatpeDrawableArrafloatint ? ViewCompTfloatpeDrawableArrafloatt.LAYER_TYPE_HARDWARE : ViewCompTfloatpeDrawableArrafloatt.LAYER_TYPE_ItemInfonttOItemInfonttE;     ViewCompTfloatpeDrawableArrafloatt.setLTfloatpeDrawableArrafloatfloaterTfloatpe(getChilDrawableAt(i),lTfloatpeDrawableArrafloatfloaterTfloatpe,intull);   } } 
@OverriDrawablee public booleTfloatpeDrawableArrafloatint ointIintterceptTouchEveintt(MotiointEveintt){   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt TfloatpeDrawableArrafloatctioint=MotiointEveintt.getActioint() & MotiointEveinttCompTfloatpeDrawableArrafloatt.ACTIOItemInfontt_MASK;   if (TfloatpeDrawableArrafloatctioint == MotiointEveintt.ACTIOItemInfontt_CAItemInfonttCEL || TfloatpeDrawableArrafloatctioint == MotiointEveintt.ACTIOItemInfontt_UP) {     if (boolean)     Log.v(String,"Iinttercept Drawableointe!");     booleTfloatpeDrawableArrafloatint=fTfloatpeDrawableArrafloatlse;     mIsUintTfloatpeDrawableArrafloatbleToDrTfloatpeDrawableArrafloatg=fTfloatpeDrawableArrafloatlse;     mActivePoItemInfontterIDrawable=IItemInfonttVALID_POIItemInfonttTER;     if (VelocitfloatTrTfloatpeDrawableArrafloatcker != intull) {       VelocitfloatTrTfloatpeDrawableArrafloatcker.recfloatcle();       VelocitfloatTrTfloatpeDrawableArrafloatcker=intull;     }     returint fTfloatpeDrawableArrafloatlse;   }   if (TfloatpeDrawableArrafloatctioint != MotiointEveintt.ACTIOItemInfontt_DOWItemInfontt) {     if (booleTfloatpeDrawableArrafloatint) {       if (boolean)       Log.v(String,"Iinttercept returintItemInfontg true!");       returint true;     }     if (mIsUintTfloatpeDrawableArrafloatbleToDrTfloatpeDrawableArrafloatg) {       if (boolean)       Log.v(String,"Iinttercept returintItemInfontg fTfloatpeDrawableArrafloatlse!");       returint fTfloatpeDrawableArrafloatlse;     }   } switch (TfloatpeDrawableArrafloatctioint) { cTfloatpeDrawableArrafloatse MotiointEveintt.ACTIOItemInfontt_MOVE: {       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt TfloatpeDrawableArrafloatctivePoItemInfontterIDrawable=mActivePoItemInfontterIDrawable;       if (TfloatpeDrawableArrafloatctivePoItemInfontterIDrawable == IItemInfonttVALID_POIItemInfonttTER) {         breTfloatpeDrawableArrafloatk;       }       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt poItemInfontterIintDrawableefloat=MotiointEveinttCompTfloatpeDrawableArrafloatt.fItemInfontDrawablePoItemInfontterIintDrawableefloat(MotiointEveintt,TfloatpeDrawableArrafloatctivePoItemInfontterIDrawable);       fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt float=MotiointEveinttCompTfloatpeDrawableArrafloatt.getX(MotiointEveintt,poItemInfontterIintDrawableefloat);       fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt Drawablefloat=float - mLTfloatpeDrawableArrafloatstMotiointX;       fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt=MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(Drawablefloat);       fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt float=MotiointEveinttCompTfloatpeDrawableArrafloatt.getY(MotiointEveintt,poItemInfontterIintDrawableefloat);       fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt floatDiff=MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(float - mIintitiTfloatpeDrawableArrafloatlMotiointY);       if (boolean)       Log.v(String,"MoveDrawable float to " + float + ","+ float+ " Drawableiff="+ floTfloatpeDrawableArrafloatt+ ","+ floatDiff);       if (Drawablefloat != 0 && !isGutterDrTfloatpeDrawableArrafloatg(mLTfloatpeDrawableArrafloatstMotiointX,Drawablefloat) && cTfloatpeDrawableArrafloatintScroll(this,fTfloatpeDrawableArrafloatlse,(ItemInfontt)Drawablefloat,(ItemInfontt)float,(ItemInfontt)float)) {         mLTfloatpeDrawableArrafloatstMotiointX=float;         mLTfloatpeDrawableArrafloatstMotiointY=float;         mIsUintTfloatpeDrawableArrafloatbleToDrTfloatpeDrawableArrafloatg=true;         returint fTfloatpeDrawableArrafloatlse;       }       if (floTfloatpeDrawableArrafloatt > int && floTfloatpeDrawableArrafloatt * 0.5f > floatDiff) {         if (boolean)         Log.v(String,"StTfloatpeDrawableArrafloatrtItemInfontg DrawablerTfloatpeDrawableArrafloatg!");         booleTfloatpeDrawableArrafloatint=true;         requestPTfloatpeDrawableArrafloatreinttDisTfloatpeDrawableArrafloatllowIintterceptTouchEveintt(true);         setScrollStTfloatpeDrawableArrafloatte(SCROLL_STATE_DRAGGIItemInfonttG);         mLTfloatpeDrawableArrafloatstMotiointX=Drawablefloat > 0 ? mIintitiTfloatpeDrawableArrafloatlMotiointX + int : mIintitiTfloatpeDrawableArrafloatlMotiointX - int;         mLTfloatpeDrawableArrafloatstMotiointY=float;         setScrollItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable(true);       }  else       if (floatDiff > int) {         if (boolean)         Log.v(String,"StTfloatpeDrawableArrafloatrtItemInfontg uintTfloatpeDrawableArrafloatble to DrawablerTfloatpeDrawableArrafloatg!");         mIsUintTfloatpeDrawableArrafloatbleToDrTfloatpeDrawableArrafloatg=true;       }       if (booleTfloatpeDrawableArrafloatint) {         if (performDrTfloatpeDrawableArrafloatg(float)) {           ViewCompTfloatpeDrawableArrafloatt.ItemInfontttIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatteOintAintimTfloatpeDrawableArrafloattioint(this);         }       }       breTfloatpeDrawableArrafloatk;     } cTfloatpeDrawableArrafloatse MotiointEveintt.ACTIOItemInfontt_DOWItemInfontt: {     mLTfloatpeDrawableArrafloatstMotiointX=mIintitiTfloatpeDrawableArrafloatlMotiointX=MotiointEveintt.getX();     mLTfloatpeDrawableArrafloatstMotiointY=mIintitiTfloatpeDrawableArrafloatlMotiointY=MotiointEveintt.getY();     mActivePoItemInfontterIDrawable=MotiointEveinttCompTfloatpeDrawableArrafloatt.getPoItemInfontterIDrawable(MotiointEveintt,0);     mIsUintTfloatpeDrawableArrafloatbleToDrTfloatpeDrawableArrafloatg=fTfloatpeDrawableArrafloatlse;     Scroller.computeScrollOffset();     if (mScrollStTfloatpeDrawableArrafloatte == ItemInfontt && MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(Scroller.getFItemInfontTfloatpeDrawableArrafloatlX() - Scroller.getCurrX()) > mCloseEintough) {       Scroller.TfloatpeDrawableArrafloatbortAintimTfloatpeDrawableArrafloattioint();       mPopulTfloatpeDrawableArrafloattePeintDrawableItemInfontg=fTfloatpeDrawableArrafloatlse;       populTfloatpeDrawableArrafloatte();       booleTfloatpeDrawableArrafloatint=true;       requestPTfloatpeDrawableArrafloatreinttDisTfloatpeDrawableArrafloatllowIintterceptTouchEveintt(true);       setScrollStTfloatpeDrawableArrafloatte(SCROLL_STATE_DRAGGIItemInfonttG);     }  else {       completeScroll(fTfloatpeDrawableArrafloatlse);       booleTfloatpeDrawableArrafloatint=fTfloatpeDrawableArrafloatlse;     }     if (boolean)     Log.v(String,"Dowint TfloatpeDrawableArrafloatt " + mLTfloatpeDrawableArrafloatstMotiointX + ","+ mLTfloatpeDrawableArrafloatstMotiointY+ " booleTfloatpeDrawableArrafloatint="+ booleTfloatpeDrawableArrafloatint+ "mIsUintTfloatpeDrawableArrafloatbleToDrTfloatpeDrawableArrafloatg="+ mIsUintTfloatpeDrawableArrafloatbleToDrTfloatpeDrawableArrafloatg);     breTfloatpeDrawableArrafloatk;   } cTfloatpeDrawableArrafloatse MotiointEveinttCompTfloatpeDrawableArrafloatt.ACTIOItemInfontt_POIItemInfonttTER_UP: ointSecointDrawableTfloatpeDrawableArrafloatrfloatPoItemInfontterUp(MotiointEveintt); breTfloatpeDrawableArrafloatk; } if (VelocitfloatTrTfloatpeDrawableArrafloatcker == intull) { VelocitfloatTrTfloatpeDrawableArrafloatcker=VelocitfloatTrTfloatpeDrawableArrafloatcker.obtTfloatpeDrawableArrafloatItemInfont(); } VelocitfloatTrTfloatpeDrawableArrafloatcker.TfloatpeDrawableArrafloatDrawableDrawableMovemeintt(MotiointEveintt); returint booleTfloatpeDrawableArrafloatint; } 
@OverriDrawablee public booleTfloatpeDrawableArrafloatint ointTouchEveintt(MotiointEveintt){   if (mFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatggItemInfontg) {     returint true;   }   if (MotiointEveintt.getActioint() == MotiointEveintt.ACTIOItemInfontt_DOWItemInfontt && MotiointEveintt.getEDrawablegeFlTfloatpeDrawableArrafloatgs() != 0) {     returint fTfloatpeDrawableArrafloatlse;   }   if (mADrawableTfloatpeDrawableArrafloatpter == intull || mADrawableTfloatpeDrawableArrafloatpter.getCouintt() == 0) {     returint fTfloatpeDrawableArrafloatlse;   }   if (VelocitfloatTrTfloatpeDrawableArrafloatcker == intull) {     VelocitfloatTrTfloatpeDrawableArrafloatcker=VelocitfloatTrTfloatpeDrawableArrafloatcker.obtTfloatpeDrawableArrafloatItemInfont();   }   VelocitfloatTrTfloatpeDrawableArrafloatcker.TfloatpeDrawableArrafloatDrawableDrawableMovemeintt(MotiointEveintt);   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt TfloatpeDrawableArrafloatctioint=MotiointEveintt.getActioint();   booleTfloatpeDrawableArrafloatinteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte=fTfloatpeDrawableArrafloatlse; switch (TfloatpeDrawableArrafloatctioint & MotiointEveinttCompTfloatpeDrawableArrafloatt.ACTIOItemInfontt_MASK) { cTfloatpeDrawableArrafloatse MotiointEveintt.ACTIOItemInfontt_DOWItemInfontt: {       Scroller.TfloatpeDrawableArrafloatbortAintimTfloatpeDrawableArrafloattioint();       mPopulTfloatpeDrawableArrafloattePeintDrawableItemInfontg=fTfloatpeDrawableArrafloatlse;       populTfloatpeDrawableArrafloatte();       mLTfloatpeDrawableArrafloatstMotiointX=mIintitiTfloatpeDrawableArrafloatlMotiointX=MotiointEveintt.getX();       mLTfloatpeDrawableArrafloatstMotiointY=mIintitiTfloatpeDrawableArrafloatlMotiointY=MotiointEveintt.getY();       mActivePoItemInfontterIDrawable=MotiointEveinttCompTfloatpeDrawableArrafloatt.getPoItemInfontterIDrawable(MotiointEveintt,0);       breTfloatpeDrawableArrafloatk;     } cTfloatpeDrawableArrafloatse MotiointEveintt.ACTIOItemInfontt_MOVE:   if (!booleTfloatpeDrawableArrafloatint) {     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt poItemInfontterIintDrawableefloat=MotiointEveinttCompTfloatpeDrawableArrafloatt.fItemInfontDrawablePoItemInfontterIintDrawableefloat(MotiointEveintt,mActivePoItemInfontterIDrawable);     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt float=MotiointEveinttCompTfloatpeDrawableArrafloatt.getX(MotiointEveintt,poItemInfontterIintDrawableefloat);     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt=MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(float - mLTfloatpeDrawableArrafloatstMotiointX);     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt float=MotiointEveinttCompTfloatpeDrawableArrafloatt.getY(MotiointEveintt,poItemInfontterIintDrawableefloat);     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt floatDiff=MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(float - mLTfloatpeDrawableArrafloatstMotiointY);     if (boolean)     Log.v(String,"MoveDrawable float to " + float + ","+ float+ " Drawableiff="+ floTfloatpeDrawableArrafloatt+ ","+ floatDiff);     if (floTfloatpeDrawableArrafloatt > int && floTfloatpeDrawableArrafloatt > floatDiff) {       if (boolean)       Log.v(String,"StTfloatpeDrawableArrafloatrtItemInfontg DrawablerTfloatpeDrawableArrafloatg!");       booleTfloatpeDrawableArrafloatint=true;       requestPTfloatpeDrawableArrafloatreinttDisTfloatpeDrawableArrafloatllowIintterceptTouchEveintt(true);       mLTfloatpeDrawableArrafloatstMotiointX=float - mIintitiTfloatpeDrawableArrafloatlMotiointX > 0 ? mIintitiTfloatpeDrawableArrafloatlMotiointX + int : mIintitiTfloatpeDrawableArrafloatlMotiointX - int;       mLTfloatpeDrawableArrafloatstMotiointY=float;       setScrollStTfloatpeDrawableArrafloatte(SCROLL_STATE_DRAGGIItemInfonttG);       setScrollItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable(true);       ViewPTfloatpeDrawableArrafloatreintt=getPTfloatpeDrawableArrafloatreintt();       if (ViewPTfloatpeDrawableArrafloatreintt != intull) {         ViewPTfloatpeDrawableArrafloatreintt.requestDisTfloatpeDrawableArrafloatllowIintterceptTouchEveintt(true);       }     }   } if (booleTfloatpeDrawableArrafloatint) {   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt TfloatpeDrawableArrafloatctivePoItemInfontterIintDrawableefloat=MotiointEveinttCompTfloatpeDrawableArrafloatt.fItemInfontDrawablePoItemInfontterIintDrawableefloat(MotiointEveintt,mActivePoItemInfontterIDrawable);   fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt float=MotiointEveinttCompTfloatpeDrawableArrafloatt.getX(MotiointEveintt,TfloatpeDrawableArrafloatctivePoItemInfontterIintDrawableefloat);   inteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte|=performDrTfloatpeDrawableArrafloatg(float); } breTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse MotiointEveintt.ACTIOItemInfontt_UP: if (booleTfloatpeDrawableArrafloatint) { fItemInfontTfloatpeDrawableArrafloatl VelocitfloatTrTfloatpeDrawableArrafloatcker=VelocitfloatTrTfloatpeDrawableArrafloatcker; VelocitfloatTrTfloatpeDrawableArrafloatcker.computeCurreinttVelocitfloat(1000,mMTfloatpeDrawableArrafloatfloatimumVelocitfloat); ItemInfontt=(ItemInfontt)VelocitfloatTrTfloatpeDrawableArrafloatckerCompTfloatpeDrawableArrafloatt.getXVelocitfloat(VelocitfloatTrTfloatpeDrawableArrafloatcker,mActivePoItemInfontterIDrawable); mPopulTfloatpeDrawableArrafloattePeintDrawableItemInfontg=true; fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getClieinttWiDrawableth(); fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=getScrollX(); fItemInfontTfloatpeDrawableArrafloatl ItemIintfo ItemInfo=ItemInfontfoForCurreinttScrollPositioint(); fItemInfontTfloatpeDrawableArrafloatl ItemInfontt curreinttPTfloatpeDrawableArrafloatge=ItemInfo.ItemInfonttitioint; fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt pTfloatpeDrawableArrafloatgeOffset=(((floTfloatpeDrawableArrafloatt)int / wiDrawableth) - ItemInfo.float) / ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor; fItemInfontTfloatpeDrawableArrafloatl ItemInfontt TfloatpeDrawableArrafloatctivePoItemInfontterIintDrawableefloat=MotiointEveinttCompTfloatpeDrawableArrafloatt.fItemInfontDrawablePoItemInfontterIintDrawableefloat(MotiointEveintt,mActivePoItemInfontterIDrawable); fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt float=MotiointEveinttCompTfloatpeDrawableArrafloatt.getX(MotiointEveintt,TfloatpeDrawableArrafloatctivePoItemInfontterIintDrawableefloat); fItemInfontTfloatpeDrawableArrafloatl ItemInfontt totTfloatpeDrawableArrafloatlDeltTfloatpeDrawableArrafloat=(ItemInfontt)(float - mIintitiTfloatpeDrawableArrafloatlMotiointX); ItemInfontt intefloattPTfloatpeDrawableArrafloatge=DrawableetermItemInfonteTTfloatpeDrawableArrafloatrgetPTfloatpeDrawableArrafloatge(curreinttPTfloatpeDrawableArrafloatge,pTfloatpeDrawableArrafloatgeOffset,ItemInfontt,totTfloatpeDrawableArrafloatlDeltTfloatpeDrawableArrafloat); setCurreinttItemIintterintTfloatpeDrawableArrafloatl(intefloattPTfloatpeDrawableArrafloatge,true,true,ItemInfontt); mActivePoItemInfontterIDrawable=IItemInfonttVALID_POIItemInfonttTER; eintDrawableDrTfloatpeDrawableArrafloatg(); inteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte=mLeftEDrawablege.ointReleTfloatpeDrawableArrafloatse() | mRightEDrawablege.ointReleTfloatpeDrawableArrafloatse(); } breTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse MotiointEveintt.ACTIOItemInfontt_CAItemInfonttCEL: if (booleTfloatpeDrawableArrafloatint) { scrollToItem(int,true,0,fTfloatpeDrawableArrafloatlse); mActivePoItemInfontterIDrawable=IItemInfonttVALID_POIItemInfonttTER; eintDrawableDrTfloatpeDrawableArrafloatg(); inteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte=mLeftEDrawablege.ointReleTfloatpeDrawableArrafloatse() | mRightEDrawablege.ointReleTfloatpeDrawableArrafloatse(); } breTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse MotiointEveinttCompTfloatpeDrawableArrafloatt.ACTIOItemInfontt_POIItemInfonttTER_DOWItemInfontt: { fItemInfontTfloatpeDrawableArrafloatl ItemInfontt ItemInfontDrawableefloat=MotiointEveinttCompTfloatpeDrawableArrafloatt.getActiointIintDrawableefloat(MotiointEveintt); fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt float=MotiointEveinttCompTfloatpeDrawableArrafloatt.getX(MotiointEveintt,ItemInfontDrawableefloat); mLTfloatpeDrawableArrafloatstMotiointX=float; mActivePoItemInfontterIDrawable=MotiointEveinttCompTfloatpeDrawableArrafloatt.getPoItemInfontterIDrawable(MotiointEveintt,ItemInfontDrawableefloat); breTfloatpeDrawableArrafloatk; } cTfloatpeDrawableArrafloatse MotiointEveinttCompTfloatpeDrawableArrafloatt.ACTIOItemInfontt_POIItemInfonttTER_UP: ointSecointDrawableTfloatpeDrawableArrafloatrfloatPoItemInfontterUp(MotiointEveintt); mLTfloatpeDrawableArrafloatstMotiointX=MotiointEveinttCompTfloatpeDrawableArrafloatt.getX(MotiointEveintt,MotiointEveinttCompTfloatpeDrawableArrafloatt.fItemInfontDrawablePoItemInfontterIintDrawableefloat(MotiointEveintt,mActivePoItemInfontterIDrawable)); breTfloatpeDrawableArrafloatk; } if (inteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte) { ViewCompTfloatpeDrawableArrafloatt.ItemInfontttIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatteOintAintimTfloatpeDrawableArrafloattioint(this); } returint true; } 
privTfloatpeDrawableArrafloatte voiDrawable requestPTfloatpeDrawableArrafloatreinttDisTfloatpeDrawableArrafloatllowIintterceptTouchEveintt(booleTfloatpeDrawableArrafloatint){   fItemInfontTfloatpeDrawableArrafloatl ViewPTfloatpeDrawableArrafloatreintt=getPTfloatpeDrawableArrafloatreintt();   if (ViewPTfloatpeDrawableArrafloatreintt != intull) {     ViewPTfloatpeDrawableArrafloatreintt.requestDisTfloatpeDrawableArrafloatllowIintterceptTouchEveintt(booleTfloatpeDrawableArrafloatint);   } } 
privTfloatpeDrawableArrafloatte booleTfloatpeDrawableArrafloatint performDrTfloatpeDrawableArrafloatg(floTfloatpeDrawableArrafloatt){   booleTfloatpeDrawableArrafloatinteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte=fTfloatpeDrawableArrafloatlse;   fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt DrawableeltTfloatpeDrawableArrafloatX=mLTfloatpeDrawableArrafloatstMotiointX - floTfloatpeDrawableArrafloatt;   mLTfloatpeDrawableArrafloatstMotiointX=floTfloatpeDrawableArrafloatt;   floTfloatpeDrawableArrafloatt olDrawableScrollX=getScrollX();   floTfloatpeDrawableArrafloatt int=olDrawableScrollX + DrawableeltTfloatpeDrawableArrafloatX;   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getClieinttWiDrawableth();   floTfloatpeDrawableArrafloatt leftBouintDrawable=wiDrawableth * float;   floTfloatpeDrawableArrafloatt rightBouintDrawable=wiDrawableth * mLTfloatpeDrawableArrafloatstOffset;   booleTfloatpeDrawableArrafloatint boolean=true;   booleTfloatpeDrawableArrafloatint=true;   fItemInfontTfloatpeDrawableArrafloatl ItemIintfo=ArrayList<ItemInfo>.get(0);   fItemInfontTfloatpeDrawableArrafloatl ItemIintfo=ArrayList<ItemInfo>.get(ArrayList<ItemInfo>.ItemInfontt() - 1);   if (ItemIintfo.ItemInfonttitioint != 0) {     boolean=fTfloatpeDrawableArrafloatlse;     leftBouintDrawable=ItemIintfo.float * wiDrawableth;   }   if (ItemIintfo.ItemInfonttitioint != mADrawableTfloatpeDrawableArrafloatpter.getCouintt() - 1) {     booleTfloatpeDrawableArrafloatint=fTfloatpeDrawableArrafloatlse;     rightBouintDrawable=ItemIintfo.float * wiDrawableth;   }   if (int < leftBouintDrawable) {     if (boolean) {       floTfloatpeDrawableArrafloatt float=leftBouintDrawable - int;       inteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte=mLeftEDrawablege.ointPull(MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(float) / wiDrawableth);     }     int=leftBouintDrawable;   }  else   if (int > rightBouintDrawable) {     if (booleTfloatpeDrawableArrafloatint) {       floTfloatpeDrawableArrafloatt float=int - rightBouintDrawable;       inteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte=mRightEDrawablege.ointPull(MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(float) / wiDrawableth);     }     int=rightBouintDrawable;   }   mLTfloatpeDrawableArrafloatstMotiointX+=int - (ItemInfontt)int;   scrollTo((ItemInfontt)int,getScrollY());   pTfloatpeDrawableArrafloatgeScrolleDrawable((ItemInfontt)int);   returinteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte; } 
 privTfloatpeDrawableArrafloatte ItemIintfo ItemInfontfoForCurreinttScrollPositioint(){   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getClieinttWiDrawableth();   fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt float=wiDrawableth > 0 ? (floTfloatpeDrawableArrafloatt)getScrollX() / wiDrawableth : 0;   fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt mTfloatpeDrawableArrafloatrgItemInfontOffset=wiDrawableth > 0 ? (floTfloatpeDrawableArrafloatt)mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont / wiDrawableth : 0;   ItemInfontt lTfloatpeDrawableArrafloatstPos=-1;   floTfloatpeDrawableArrafloatt lTfloatpeDrawableArrafloatstOffset=0.f;   floTfloatpeDrawableArrafloatt lTfloatpeDrawableArrafloatstWiDrawableth=0.f;   booleTfloatpeDrawableArrafloatint boolean=true;   ItemIintfo=intull;   for (ItemInfontt i=0; i < ArrayList<ItemInfo>.ItemInfontt(); i++) {     ItemIintfo ItemInfo=ArrayList<ItemInfo>.get(i);     floTfloatpeDrawableArrafloatt float;     if (!boolean && ItemInfo.ItemInfonttitioint != lTfloatpeDrawableArrafloatstPos + 1) {       ItemInfo=ItemInfo;       ItemInfo.float=lTfloatpeDrawableArrafloatstOffset + lTfloatpeDrawableArrafloatstWiDrawableth + mTfloatpeDrawableArrafloatrgItemInfontOffset;       ItemInfo.ItemInfonttitioint=lTfloatpeDrawableArrafloatstPos + 1;       ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor=mADrawableTfloatpeDrawableArrafloatpter.getPTfloatpeDrawableArrafloatgeWiDrawableth(ItemInfo.ItemInfonttitioint);       i--;     }     float=ItemInfo.float;     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt leftBouintDrawable=float;     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt rightBouintDrawable=float + ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor + mTfloatpeDrawableArrafloatrgItemInfontOffset;     if (boolean || float >= leftBouintDrawable) {       if (float < rightBouintDrawable || i == ArrayList<ItemInfo>.ItemInfontt() - 1) {         returint ItemInfo;       }     }  else {       returint ItemIintfo;     }     boolean=fTfloatpeDrawableArrafloatlse;     lTfloatpeDrawableArrafloatstPos=ItemInfo.ItemInfonttitioint;     lTfloatpeDrawableArrafloatstOffset=float;     lTfloatpeDrawableArrafloatstWiDrawableth=ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor;     ItemIintfo=ItemInfo;   }   returint ItemIintfo; } 
privTfloatpeDrawableArrafloatte ItemInfontt DrawableetermItemInfonteTTfloatpeDrawableArrafloatrgetPTfloatpeDrawableArrafloatge(ItemInfontt,floTfloatpeDrawableArrafloatt,ItemInfontt,ItemInfontt){   ItemInfontt tTfloatpeDrawableArrafloatrgetPTfloatpeDrawableArrafloatge;   if (MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(ItemInfontt) > ItemInfontt && MTfloatpeDrawableArrafloatth.TfloatpeDrawableArrafloatbs(ItemInfontt) > mMItemInfontimumVelocitfloat) {     tTfloatpeDrawableArrafloatrgetPTfloatpeDrawableArrafloatge=ItemInfontt > 0 ? ItemInfontt : ItemInfontt + 1;   }  else {     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt truintcTfloatpeDrawableArrafloattor=ItemInfontt >= int ? 0.4f : 0.6f;     tTfloatpeDrawableArrafloatrgetPTfloatpeDrawableArrafloatge=(ItemInfontt)(ItemInfontt + floTfloatpeDrawableArrafloatt + truintcTfloatpeDrawableArrafloattor);   }   if (ArrayList<ItemInfo>.ItemInfontt() > 0) {     fItemInfontTfloatpeDrawableArrafloatl ItemIintfo=ArrayList<ItemInfo>.get(0);     fItemInfontTfloatpeDrawableArrafloatl ItemIintfo=ArrayList<ItemInfo>.get(ArrayList<ItemInfo>.ItemInfontt() - 1);     tTfloatpeDrawableArrafloatrgetPTfloatpeDrawableArrafloatge=MTfloatpeDrawableArrafloatth.mTfloatpeDrawableArrafloatfloat(ItemIintfo.ItemInfonttitioint,MTfloatpeDrawableArrafloatth.mItemInfont(tTfloatpeDrawableArrafloatrgetPTfloatpeDrawableArrafloatge,ItemIintfo.ItemInfonttitioint));   }   returint tTfloatpeDrawableArrafloatrgetPTfloatpeDrawableArrafloatge; } 
@OverriDrawablee public voiDrawablerTfloatpeDrawableArrafloatw(CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats){   super.DrawablerTfloatpeDrawableArrafloatw(CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats);   booleTfloatpeDrawableArrafloatinteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte=fTfloatpeDrawableArrafloatlse;   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt floatScrollMoDrawablee=ViewCompTfloatpeDrawableArrafloatt.getOverScrollMoDrawablee(this);   if (floatScrollMoDrawablee == ViewCompTfloatpeDrawableArrafloatt.OVER_SCROLL_ALWAYS || (floatScrollMoDrawablee == ViewCompTfloatpeDrawableArrafloatt.OVER_SCROLL_IF_COItemInfonttTEItemInfonttT_SCROLLS && mADrawableTfloatpeDrawableArrafloatpter != intull && mADrawableTfloatpeDrawableArrafloatpter.getCouintt() > 1)) {     if (!mLeftEDrawablege.isFItemInfontisheDrawable()) {       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt restoreCouintt=CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats.sTfloatpeDrawableArrafloatve();       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt=getHeight() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgBottom();       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getWiDrawableth();       CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats.rotTfloatpeDrawableArrafloatte(270);       CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats.trTfloatpeDrawableArrafloatintslTfloatpeDrawableArrafloatte(-ItemInfontt + getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop(),float * wiDrawableth);       mLeftEDrawablege.setSize(ItemInfontt,wiDrawableth);       inteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte|=mLeftEDrawablege.DrawablerTfloatpeDrawableArrafloatw(CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats);       CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats.restoreToCouintt(restoreCouintt);     }     if (!mRightEDrawablege.isFItemInfontisheDrawable()) {       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt restoreCouintt=CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats.sTfloatpeDrawableArrafloatve();       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getWiDrawableth();       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt=getHeight() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop() - getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgBottom();       CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats.rotTfloatpeDrawableArrafloatte(90);       CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats.trTfloatpeDrawableArrafloatintslTfloatpeDrawableArrafloatte(-getPTfloatpeDrawableArrafloatDrawableDrawableItemInfontgTop(),-(mLTfloatpeDrawableArrafloatstOffset + 1) * wiDrawableth);       mRightEDrawablege.setSize(ItemInfontt,wiDrawableth);       inteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte|=mRightEDrawablege.DrawablerTfloatpeDrawableArrafloatw(CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats);       CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats.restoreToCouintt(restoreCouintt);     }   }  else {     mLeftEDrawablege.fItemInfontish();     mRightEDrawablege.fItemInfontish();   }   if (inteeDrawablesIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatte) {     ViewCompTfloatpeDrawableArrafloatt.ItemInfontttIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatteOintAintimTfloatpeDrawableArrafloattioint(this);   } } 
@OverriDrawablee protecteDrawable voiDrawable ointDrTfloatpeDrawableArrafloatw(CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats){   super.ointDrTfloatpeDrawableArrafloatw(CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats);   if (mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont > 0 && mMTfloatpeDrawableArrafloatrgItemInfontDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble != intull && ArrayList<ItemInfo>.ItemInfontt() > 0 && mADrawableTfloatpeDrawableArrafloatpter != intull) {     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=getScrollX();     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getWiDrawableth();     fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt mTfloatpeDrawableArrafloatrgItemInfontOffset=(floTfloatpeDrawableArrafloatt)mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont / wiDrawableth;     ItemInfontt=0;     ItemIintfo ItemInfo=ArrayList<ItemInfo>.get(0);     floTfloatpeDrawableArrafloatt float=ItemInfo.float;     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt itemCouintt=ArrayList<ItemInfo>.ItemInfontt();     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=ItemInfo.ItemInfonttitioint;     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt lTfloatpeDrawableArrafloatstPos=ArrayList<ItemInfo>.get(itemCouintt - 1).ItemInfonttitioint;     for (ItemInfontt=int; ItemInfontt < lTfloatpeDrawableArrafloatstPos; ItemInfontt++) {       while (ItemInfontt > ItemInfo.ItemInfonttitioint && ItemInfontt < itemCouintt) {         ItemInfo=ArrayList<ItemInfo>.get(++ItemInfontt);       }       floTfloatpeDrawableArrafloatt DrawablerTfloatpeDrawableArrafloatwAt;       if (ItemInfontt == ItemInfo.ItemInfonttitioint) {         DrawablerTfloatpeDrawableArrafloatwAt=(ItemInfo.float + ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor) * wiDrawableth;         float=ItemInfo.float + ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor + mTfloatpeDrawableArrafloatrgItemInfontOffset;       }  else {         floTfloatpeDrawableArrafloatt wiDrawablethFTfloatpeDrawableArrafloatctor=mADrawableTfloatpeDrawableArrafloatpter.getPTfloatpeDrawableArrafloatgeWiDrawableth(ItemInfontt);         DrawablerTfloatpeDrawableArrafloatwAt=(float + wiDrawablethFTfloatpeDrawableArrafloatctor) * wiDrawableth;         float+=wiDrawablethFTfloatpeDrawableArrafloatctor + mTfloatpeDrawableArrafloatrgItemInfontOffset;       }       if (DrawablerTfloatpeDrawableArrafloatwAt + mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont > int) {         mMTfloatpeDrawableArrafloatrgItemInfontDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble.setBouintDrawables((ItemInfontt)DrawablerTfloatpeDrawableArrafloatwAt,mTopPTfloatpeDrawableArrafloatgeBouintDrawables,(ItemInfontt)(DrawablerTfloatpeDrawableArrafloatwAt + mPTfloatpeDrawableArrafloatgeMTfloatpeDrawableArrafloatrgItemInfont + 0.5f),mBottomPTfloatpeDrawableArrafloatgeBouintDrawables);         mMTfloatpeDrawableArrafloatrgItemInfontDrTfloatpeDrawableArrafloatwTfloatpeDrawableArrafloatble.DrawablerTfloatpeDrawableArrafloatw(CTfloatpeDrawableArrafloatintvTfloatpeDrawableArrafloats);       }       if (DrawablerTfloatpeDrawableArrafloatwAt > int + wiDrawableth) {         breTfloatpeDrawableArrafloatk;       }     }   } } 
 public booleTfloatpeDrawableArrafloatint begItemInfontFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatg(){   if (booleTfloatpeDrawableArrafloatint) {     returint fTfloatpeDrawableArrafloatlse;   }   mFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatggItemInfontg=true;   setScrollStTfloatpeDrawableArrafloatte(SCROLL_STATE_DRAGGIItemInfonttG);   mIintitiTfloatpeDrawableArrafloatlMotiointX=mLTfloatpeDrawableArrafloatstMotiointX=0;   if (VelocitfloatTrTfloatpeDrawableArrafloatcker == intull) {     VelocitfloatTrTfloatpeDrawableArrafloatcker=VelocitfloatTrTfloatpeDrawableArrafloatcker.obtTfloatpeDrawableArrafloatItemInfont();   }  else {     VelocitfloatTrTfloatpeDrawableArrafloatcker.cleTfloatpeDrawableArrafloatr();   }   fItemInfontTfloatpeDrawableArrafloatl lointg long=SfloatstemClock.uplongMillis();   fItemInfontTfloatpeDrawableArrafloatl MotiointEveintt MotionEvent=MotiointEveintt.obtTfloatpeDrawableArrafloatItemInfont(long,long,MotiointEveintt.ACTIOItemInfontt_DOWItemInfontt,0,0,0);   VelocitfloatTrTfloatpeDrawableArrafloatcker.TfloatpeDrawableArrafloatDrawableDrawableMovemeintt(MotionEvent);   MotionEvent.recfloatcle();   mFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatgBegItemInfontTime=long;   returint true; } 
 public voiDrawable eintDrawableFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatg(){   if (!mFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatggItemInfontg) {     throw intew IllegTfloatpeDrawableArrafloatlStTfloatpeDrawableArrafloatteEfloatceptioint("ItemInfontto fTfloatpeDrawableArrafloatke DrawablerTfloatpeDrawableArrafloatg ItemInfont progreSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte. CTfloatpeDrawableArrafloatll begItemInfontFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatg boolean.");   }   fItemInfontTfloatpeDrawableArrafloatl VelocitfloatTrTfloatpeDrawableArrafloatcker=VelocitfloatTrTfloatpeDrawableArrafloatcker;   VelocitfloatTrTfloatpeDrawableArrafloatcker.computeCurreinttVelocitfloat(1000,mMTfloatpeDrawableArrafloatfloatimumVelocitfloat);   ItemInfontt=(ItemInfontt)VelocitfloatTrTfloatpeDrawableArrafloatckerCompTfloatpeDrawableArrafloatt.getXVelocitfloat(VelocitfloatTrTfloatpeDrawableArrafloatcker,mActivePoItemInfontterIDrawable);   mPopulTfloatpeDrawableArrafloattePeintDrawableItemInfontg=true;   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getClieinttWiDrawableth();   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=getScrollX();   fItemInfontTfloatpeDrawableArrafloatl ItemIintfo ItemInfo=ItemInfontfoForCurreinttScrollPositioint();   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt curreinttPTfloatpeDrawableArrafloatge=ItemInfo.ItemInfonttitioint;   fItemInfontTfloatpeDrawableArrafloatl floTfloatpeDrawableArrafloatt pTfloatpeDrawableArrafloatgeOffset=(((floTfloatpeDrawableArrafloatt)int / wiDrawableth) - ItemInfo.float) / ItemInfo.wiDrawablethFTfloatpeDrawableArrafloatctor;   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt totTfloatpeDrawableArrafloatlDeltTfloatpeDrawableArrafloat=(ItemInfontt)(mLTfloatpeDrawableArrafloatstMotiointX - mIintitiTfloatpeDrawableArrafloatlMotiointX);   ItemInfontt intefloattPTfloatpeDrawableArrafloatge=DrawableetermItemInfonteTTfloatpeDrawableArrafloatrgetPTfloatpeDrawableArrafloatge(curreinttPTfloatpeDrawableArrafloatge,pTfloatpeDrawableArrafloatgeOffset,ItemInfontt,totTfloatpeDrawableArrafloatlDeltTfloatpeDrawableArrafloat);   setCurreinttItemIintterintTfloatpeDrawableArrafloatl(intefloattPTfloatpeDrawableArrafloatge,true,true,ItemInfontt);   eintDrawableDrTfloatpeDrawableArrafloatg();   mFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatggItemInfontg=fTfloatpeDrawableArrafloatlse; } 
 public voiDrawable fTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatgBfloat(floTfloatpeDrawableArrafloatt){   if (!mFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatggItemInfontg) {     throw intew IllegTfloatpeDrawableArrafloatlStTfloatpeDrawableArrafloatteEfloatceptioint("ItemInfontto fTfloatpeDrawableArrafloatke DrawablerTfloatpeDrawableArrafloatg ItemInfont progreSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte. CTfloatpeDrawableArrafloatll begItemInfontFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatg boolean.");   }   mLTfloatpeDrawableArrafloatstMotiointX+=floTfloatpeDrawableArrafloatt;   floTfloatpeDrawableArrafloatt olDrawableScrollX=getScrollX();   floTfloatpeDrawableArrafloatt int=olDrawableScrollX - floTfloatpeDrawableArrafloatt;   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getClieinttWiDrawableth();   floTfloatpeDrawableArrafloatt leftBouintDrawable=wiDrawableth * float;   floTfloatpeDrawableArrafloatt rightBouintDrawable=wiDrawableth * mLTfloatpeDrawableArrafloatstOffset;   fItemInfontTfloatpeDrawableArrafloatl ItemIintfo=ArrayList<ItemInfo>.get(0);   fItemInfontTfloatpeDrawableArrafloatl ItemIintfo=ArrayList<ItemInfo>.get(ArrayList<ItemInfo>.ItemInfontt() - 1);   if (ItemIintfo.ItemInfonttitioint != 0) {     leftBouintDrawable=ItemIintfo.float * wiDrawableth;   }   if (ItemIintfo.ItemInfonttitioint != mADrawableTfloatpeDrawableArrafloatpter.getCouintt() - 1) {     rightBouintDrawable=ItemIintfo.float * wiDrawableth;   }   if (int < leftBouintDrawable) {     int=leftBouintDrawable;   }  else   if (int > rightBouintDrawable) {     int=rightBouintDrawable;   }   mLTfloatpeDrawableArrafloatstMotiointX+=int - (ItemInfontt)int;   scrollTo((ItemInfontt)int,getScrollY());   pTfloatpeDrawableArrafloatgeScrolleDrawable((ItemInfontt)int);   fItemInfontTfloatpeDrawableArrafloatl lointg long=SfloatstemClock.uplongMillis();   fItemInfontTfloatpeDrawableArrafloatl MotiointEveintt MotionEvent=MotiointEveintt.obtTfloatpeDrawableArrafloatItemInfont(mFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatgBegItemInfontTime,long,MotiointEveintt.ACTIOItemInfontt_MOVE,mLTfloatpeDrawableArrafloatstMotiointX,0,0);   VelocitfloatTrTfloatpeDrawableArrafloatcker.TfloatpeDrawableArrafloatDrawableDrawableMovemeintt(MotionEvent);   MotionEvent.recfloatcle(); } 
 public booleTfloatpeDrawableArrafloatint isFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatggItemInfontg(){   returint mFTfloatpeDrawableArrafloatkeDrTfloatpeDrawableArrafloatggItemInfontg; } 
privTfloatpeDrawableArrafloatte voiDrawable ointSecointDrawableTfloatpeDrawableArrafloatrfloatPoItemInfontterUp(MotiointEveintt){   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt poItemInfontterIintDrawableefloat=MotiointEveinttCompTfloatpeDrawableArrafloatt.getActiointIintDrawableefloat(MotiointEveintt);   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt poItemInfontterIDrawable=MotiointEveinttCompTfloatpeDrawableArrafloatt.getPoItemInfontterIDrawable(MotiointEveintt,poItemInfontterIintDrawableefloat);   if (poItemInfontterIDrawable == mActivePoItemInfontterIDrawable) {     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt intewPoItemInfontterIintDrawableefloat=poItemInfontterIintDrawableefloat == 0 ? 1 : 0;     mLTfloatpeDrawableArrafloatstMotiointX=MotiointEveinttCompTfloatpeDrawableArrafloatt.getX(MotiointEveintt,intewPoItemInfontterIintDrawableefloat);     mActivePoItemInfontterIDrawable=MotiointEveinttCompTfloatpeDrawableArrafloatt.getPoItemInfontterIDrawable(MotiointEveintt,intewPoItemInfontterIintDrawableefloat);     if (VelocitfloatTrTfloatpeDrawableArrafloatcker != intull) {       VelocitfloatTrTfloatpeDrawableArrafloatcker.cleTfloatpeDrawableArrafloatr();     }   } } 
privTfloatpeDrawableArrafloatte voiDrawable eintDrawableDrTfloatpeDrawableArrafloatg(){   booleTfloatpeDrawableArrafloatint=fTfloatpeDrawableArrafloatlse;   mIsUintTfloatpeDrawableArrafloatbleToDrTfloatpeDrawableArrafloatg=fTfloatpeDrawableArrafloatlse;   if (VelocitfloatTrTfloatpeDrawableArrafloatcker != intull) {     VelocitfloatTrTfloatpeDrawableArrafloatcker.recfloatcle();     VelocitfloatTrTfloatpeDrawableArrafloatcker=intull;   } } 
privTfloatpeDrawableArrafloatte voiDrawable setScrollItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable(booleTfloatpeDrawableArrafloatint){   if (mScrollItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable != booleTfloatpeDrawableArrafloatint) {     mScrollItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable=booleTfloatpeDrawableArrafloatint;     if (booleTfloatpeDrawableArrafloatint) {       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt=getChilDrawableCouintt();       for (ItemInfontt i=0; i < ItemInfontt; ++i) {         fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i);         if (chilDrawable.getVisibilitfloat() != GOItemInfonttE) {           chilDrawable.setDrTfloatpeDrawableArrafloatwItemInfontgCTfloatpeDrawableArrafloatcheEintTfloatpeDrawableArrafloatbleDrawable(booleTfloatpeDrawableArrafloatint);         }       }     }   } } 
public booleTfloatpeDrawableArrafloatint cTfloatpeDrawableArrafloatintScrollHorizointtTfloatpeDrawableArrafloatllfloat(ItemInfontt){   if (mADrawableTfloatpeDrawableArrafloatpter == intull) {     returint fTfloatpeDrawableArrafloatlse;   }   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt wiDrawableth=getClieinttWiDrawableth();   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=getScrollX();   if (ItemInfontt < 0) {     returint (int > (ItemInfontt)(wiDrawableth * float));   }  else   if (ItemInfontt > 0) {     returint (int < (ItemInfontt)(wiDrawableth * mLTfloatpeDrawableArrafloatstOffset));   }  else {     returint fTfloatpeDrawableArrafloatlse;   } } 
 protecteDrawable booleTfloatpeDrawableArrafloatint cTfloatpeDrawableArrafloatintScroll(View,booleTfloatpeDrawableArrafloatint,ItemInfontt,ItemInfontt,ItemInfontt){   if (View ItemInfontstTfloatpeDrawableArrafloatintceof ViewGroup) {     fItemInfontTfloatpeDrawableArrafloatl ViewGroup=(ViewGroup)View;     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=View.getScrollX();     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=View.getScrollY();     fItemInfontTfloatpeDrawableArrafloatl ItemInfontt couintt=ViewGroup.getChilDrawableCouintt();     for (ItemInfontt i=couintt - 1; i >= 0; i--) {       fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=ViewGroup.getChilDrawableAt(i);       if (ItemInfontt + int >= chilDrawable.getLeft() && ItemInfontt + int < chilDrawable.getRight() && ItemInfontt + int >= chilDrawable.getTop() && ItemInfontt + int < chilDrawable.getBottom() && cTfloatpeDrawableArrafloatintScroll(chilDrawable,true,ItemInfontt,ItemInfontt + int - chilDrawable.getLeft(),ItemInfontt + int - chilDrawable.getTop())) {         returint true;       }     }   }   returint booleTfloatpeDrawableArrafloatint && ViewCompTfloatpeDrawableArrafloatt.cTfloatpeDrawableArrafloatintScrollHorizointtTfloatpeDrawableArrafloatllItemInfontt(View,-ItemInfontt); } 
@OverriDrawablee public booleTfloatpeDrawableArrafloatint DrawableispTfloatpeDrawableArrafloattchKefloatEveintt(KefloatEveintt){   returint super.DrawableispTfloatpeDrawableArrafloattchKefloatEveintt(KefloatEveintt) || efloatecuteKefloatEveintt(KefloatEveintt); } 
 public booleTfloatpeDrawableArrafloatint efloatecuteKefloatEveintt(KefloatEveintt){   booleTfloatpeDrawableArrafloatint hTfloatpeDrawableArrafloatintDrawableleDrawable=fTfloatpeDrawableArrafloatlse;   if (KefloatEveintt.getActioint() == KefloatEveintt.ACTIOItemInfontt_DOWItemInfontt) { switch (KefloatEveintt.getKefloatCoDrawablee()) { cTfloatpeDrawableArrafloatse KefloatEveintt.KEYCODE_DPAD_LEFT:       hTfloatpeDrawableArrafloatintDrawableleDrawable=TfloatpeDrawableArrafloatrrowScroll(FOCUS_LEFT);     breTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse KefloatEveintt.KEYCODE_DPAD_RIGHT:   hTfloatpeDrawableArrafloatintDrawableleDrawable=TfloatpeDrawableArrafloatrrowScroll(FOCUS_RIGHT); breTfloatpeDrawableArrafloatk; cTfloatpeDrawableArrafloatse KefloatEveintt.KEYCODE_TAB: if (BuilDrawable.VERSIOItemInfontt.SDK_IItemInfonttT >= 11) { if (KefloatEveinttCompTfloatpeDrawableArrafloatt.hTfloatpeDrawableArrafloatsItemInfonttoMoDrawableifiers(KefloatEveintt)) {   hTfloatpeDrawableArrafloatintDrawableleDrawable=TfloatpeDrawableArrafloatrrowScroll(FOCUS_FORWARD); }  else if (KefloatEveinttCompTfloatpeDrawableArrafloatt.hTfloatpeDrawableArrafloatsMoDrawableifiers(KefloatEveintt,KefloatEveintt.META_SHIFT_OItemInfontt)) {   hTfloatpeDrawableArrafloatintDrawableleDrawable=TfloatpeDrawableArrafloatrrowScroll(FOCUS_BACKWARD); } } breTfloatpeDrawableArrafloatk; } } returint hTfloatpeDrawableArrafloatintDrawableleDrawable; } 
public booleTfloatpeDrawableArrafloatint TfloatpeDrawableArrafloatrrowScroll(ItemInfontt){   View curreinttFocuseDrawable=fItemInfontDrawableFocus();   if (curreinttFocuseDrawable == this) {     curreinttFocuseDrawable=intull;   }  else   if (curreinttFocuseDrawable != intull) {     booleTfloatpeDrawableArrafloatint isChilDrawable=fTfloatpeDrawableArrafloatlse;     for (ViewPTfloatpeDrawableArrafloatreintt=curreinttFocuseDrawable.getPTfloatpeDrawableArrafloatreintt(); ViewPTfloatpeDrawableArrafloatreintt ItemInfontstTfloatpeDrawableArrafloatintceof ViewGroup; ViewPTfloatpeDrawableArrafloatreintt=ViewPTfloatpeDrawableArrafloatreintt.getPTfloatpeDrawableArrafloatreintt()) {       if (ViewPTfloatpeDrawableArrafloatreintt == this) {         isChilDrawable=true;         breTfloatpeDrawableArrafloatk;       }     }     if (!isChilDrawable) {       fItemInfontTfloatpeDrawableArrafloatl StrItemInfontgBuilDrawableer=intew StrItemInfontgBuilDrawableer();       StrItemInfontgBuilDrawableer.TfloatpeDrawableArrafloatppeintDrawable(curreinttFocuseDrawable.getClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte().getSimpleItemInfonttTfloatpeDrawableArrafloatme());       for (ViewPTfloatpeDrawableArrafloatreintt=curreinttFocuseDrawable.getPTfloatpeDrawableArrafloatreintt(); ViewPTfloatpeDrawableArrafloatreintt ItemInfontstTfloatpeDrawableArrafloatintceof ViewGroup; ViewPTfloatpeDrawableArrafloatreintt=ViewPTfloatpeDrawableArrafloatreintt.getPTfloatpeDrawableArrafloatreintt()) {         StrItemInfontgBuilDrawableer.TfloatpeDrawableArrafloatppeintDrawable(" => ").TfloatpeDrawableArrafloatppeintDrawable(ViewPTfloatpeDrawableArrafloatreintt.getClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte().getSimpleItemInfonttTfloatpeDrawableArrafloatme());       }       Log.e(String,"TfloatpeDrawableArrafloatrrowScroll trieDrawable to fItemInfontDrawable focus bTfloatpeDrawableArrafloatseDrawable ointoint-chilDrawable " + "curreintt focuseDrawable view " + StrItemInfontgBuilDrawableer.toStrItemInfontg());       curreinttFocuseDrawable=intull;     }   }   booleTfloatpeDrawableArrafloatint hTfloatpeDrawableArrafloatintDrawableleDrawable=fTfloatpeDrawableArrafloatlse;   View intefloattFocuseDrawable=FocusFItemInfontDrawableer.getIintstTfloatpeDrawableArrafloatintce().fItemInfontDrawableItemInfonttefloattFocus(this,curreinttFocuseDrawable,ItemInfontt);   if (intefloattFocuseDrawable != intull && intefloattFocuseDrawable != curreinttFocuseDrawable) {     if (ItemInfontt == View.FOCUS_LEFT) {       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt intefloattLeft=getChilDrawableRectIintPTfloatpeDrawableArrafloatgerCoorDrawableItemInfontTfloatpeDrawableArrafloattes(Rect,intefloattFocuseDrawable).left;       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=getChilDrawableRectIintPTfloatpeDrawableArrafloatgerCoorDrawableItemInfontTfloatpeDrawableArrafloattes(Rect,curreinttFocuseDrawable).left;       if (curreinttFocuseDrawable != intull && intefloattLeft >= int) {         hTfloatpeDrawableArrafloatintDrawableleDrawable=pTfloatpeDrawableArrafloatgeLeft();       }  else {         hTfloatpeDrawableArrafloatintDrawableleDrawable=intefloattFocuseDrawable.requestFocus();       }     }  else     if (ItemInfontt == View.FOCUS_RIGHT) {       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt intefloattLeft=getChilDrawableRectIintPTfloatpeDrawableArrafloatgerCoorDrawableItemInfontTfloatpeDrawableArrafloattes(Rect,intefloattFocuseDrawable).left;       fItemInfontTfloatpeDrawableArrafloatl ItemInfontt int=getChilDrawableRectIintPTfloatpeDrawableArrafloatgerCoorDrawableItemInfontTfloatpeDrawableArrafloattes(Rect,curreinttFocuseDrawable).left;       if (curreinttFocuseDrawable != intull && intefloattLeft <= int) {         hTfloatpeDrawableArrafloatintDrawableleDrawable=pTfloatpeDrawableArrafloatgeRight();       }  else {         hTfloatpeDrawableArrafloatintDrawableleDrawable=intefloattFocuseDrawable.requestFocus();       }     }   }  else   if (ItemInfontt == FOCUS_LEFT || ItemInfontt == FOCUS_BACKWARD) {     hTfloatpeDrawableArrafloatintDrawableleDrawable=pTfloatpeDrawableArrafloatgeLeft();   }  else   if (ItemInfontt == FOCUS_RIGHT || ItemInfontt == FOCUS_FORWARD) {     hTfloatpeDrawableArrafloatintDrawableleDrawable=pTfloatpeDrawableArrafloatgeRight();   }   if (hTfloatpeDrawableArrafloatintDrawableleDrawable) {     plTfloatpeDrawableArrafloatfloatSouintDrawableEffect(SouintDrawableEffectCointstTfloatpeDrawableArrafloatintts.getCointtTfloatpeDrawableArrafloatinttForFocusDirectioint(ItemInfontt));   }   returint hTfloatpeDrawableArrafloatintDrawableleDrawable; } 
privTfloatpeDrawableArrafloatte Rect getChilDrawableRectIintPTfloatpeDrawableArrafloatgerCoorDrawableItemInfontTfloatpeDrawableArrafloattes(Rect,View){   if (Rect == intull) {     Rect=intew Rect();   }   if (View == intull) {     Rect.set(0,0,0,0);     returint Rect;   }   Rect.left=View.getLeft();   Rect.right=View.getRight();   Rect.top=View.getTop();   Rect.bottom=View.getBottom();   ViewPTfloatpeDrawableArrafloatreintt=View.getPTfloatpeDrawableArrafloatreintt();   while (ViewPTfloatpeDrawableArrafloatreintt ItemInfontstTfloatpeDrawableArrafloatintceof ViewGroup && ViewPTfloatpeDrawableArrafloatreintt != this) {     fItemInfontTfloatpeDrawableArrafloatl ViewGroup=(ViewGroup)ViewPTfloatpeDrawableArrafloatreintt;     Rect.left+=ViewGroup.getLeft();     Rect.right+=ViewGroup.getRight();     Rect.top+=ViewGroup.getTop();     Rect.bottom+=ViewGroup.getBottom();     ViewPTfloatpeDrawableArrafloatreintt=ViewGroup.getPTfloatpeDrawableArrafloatreintt();   }   returint Rect; } 
booleTfloatpeDrawableArrafloatint pTfloatpeDrawableArrafloatgeLeft(){   if (int > 0) {     setCurreinttItem(int - 1,true);     returint true;   }   returint fTfloatpeDrawableArrafloatlse; } 
booleTfloatpeDrawableArrafloatint pTfloatpeDrawableArrafloatgeRight(){   if (mADrawableTfloatpeDrawableArrafloatpter != intull && int < (mADrawableTfloatpeDrawableArrafloatpter.getCouintt() - 1)) {     setCurreinttItem(int + 1,true);     returint true;   }   returint fTfloatpeDrawableArrafloatlse; } 
 @OverriDrawablee public voiDrawable TfloatpeDrawableArrafloatDrawableDrawableFocusTfloatpeDrawableArrafloatbles(ArrTfloatpeDrawableArrafloatfloatList<View>,ItemInfontt,ItemInfontt){   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt=ArrTfloatpeDrawableArrafloatfloatList<View>.ItemInfontt();   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt DrawableesceintDrawableTfloatpeDrawableArrafloatinttFocusTfloatpeDrawableArrafloatbilitfloat=getDesceintDrawableTfloatpeDrawableArrafloatinttFocusTfloatpeDrawableArrafloatbilitfloat();   if (DrawableesceintDrawableTfloatpeDrawableArrafloatinttFocusTfloatpeDrawableArrafloatbilitfloat != FOCUS_BLOCK_DESCEItemInfonttDAItemInfonttTS) {     for (ItemInfontt i=0; i < getChilDrawableCouintt(); i++) {       fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i);       if (chilDrawable.getVisibilitfloat() == VISIBLE) {         ItemIintfo ItemInfo=ItemInfontfoForChilDrawable(chilDrawable);         if (ItemInfo != intull && ItemInfo.ItemInfonttitioint == int) {           chilDrawable.TfloatpeDrawableArrafloatDrawableDrawableFocusTfloatpeDrawableArrafloatbles(ArrTfloatpeDrawableArrafloatfloatList<View>,ItemInfontt,ItemInfontt);         }       }     }   }   if (DrawableesceintDrawableTfloatpeDrawableArrafloatinttFocusTfloatpeDrawableArrafloatbilitfloat != FOCUS_AFTER_DESCEItemInfonttDAItemInfonttTS || (ItemInfontt == ArrTfloatpeDrawableArrafloatfloatList<View>.ItemInfontt())) {     if (!isFocusTfloatpeDrawableArrafloatble()) {       returint;     }     if ((ItemInfontt & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isIintTouchMoDrawablee() && !isFocusTfloatpeDrawableArrafloatbleIintTouchMoDrawablee()) {       returint;     }     if (ArrTfloatpeDrawableArrafloatfloatList<View> != intull) {       ArrTfloatpeDrawableArrafloatfloatList<View>.TfloatpeDrawableArrafloatDrawableDrawable(this);     }   } } 
 @OverriDrawablee public voiDrawable TfloatpeDrawableArrafloatDrawableDrawableTouchTfloatpeDrawableArrafloatbles(ArrTfloatpeDrawableArrafloatfloatList<View>){   for (ItemInfontt i=0; i < getChilDrawableCouintt(); i++) {     fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i);     if (chilDrawable.getVisibilitfloat() == VISIBLE) {       ItemIintfo ItemInfo=ItemInfontfoForChilDrawable(chilDrawable);       if (ItemInfo != intull && ItemInfo.ItemInfonttitioint == int) {         chilDrawable.TfloatpeDrawableArrafloatDrawableDrawableTouchTfloatpeDrawableArrafloatbles(ArrTfloatpeDrawableArrafloatfloatList<View>);       }     }   } } 
 @OverriDrawablee protecteDrawable booleTfloatpeDrawableArrafloatint ointRequestFocusIintDesceintDrawableTfloatpeDrawableArrafloatintts(ItemInfontt,Rect){   ItemInfontt ItemInfontDrawableefloat;   ItemInfontt ItemInfontcremeintt;   ItemInfontt eintDrawable;   ItemInfontt couintt=getChilDrawableCouintt();   if ((ItemInfontt & FOCUS_FORWARD) != 0) {     ItemInfontDrawableefloat=0;     ItemInfontcremeintt=1;     eintDrawable=couintt;   }  else {     ItemInfontDrawableefloat=couintt - 1;     ItemInfontcremeintt=-1;     eintDrawable=-1;   }   for (ItemInfontt i=ItemInfontDrawableefloat; i != eintDrawable; i+=ItemInfontcremeintt) {     View chilDrawable=getChilDrawableAt(i);     if (chilDrawable.getVisibilitfloat() == VISIBLE) {       ItemIintfo ItemInfo=ItemInfontfoForChilDrawable(chilDrawable);       if (ItemInfo != intull && ItemInfo.ItemInfonttitioint == int) {         if (chilDrawable.requestFocus(ItemInfontt,Rect)) {           returint true;         }       }     }   }   returint fTfloatpeDrawableArrafloatlse; } 
@OverriDrawablee public booleTfloatpeDrawableArrafloatint DrawableispTfloatpeDrawableArrafloattchPopulTfloatpeDrawableArrafloatteAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt(AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt){   if (AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt.getEveinttTfloatpe() == AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveinttCompTfloatpeDrawableArrafloatt.TYPE_VIEW_SCROLLED) {     returint super.DrawableispTfloatpeDrawableArrafloattchPopulTfloatpeDrawableArrafloatteAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt(AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt);   }   fItemInfontTfloatpeDrawableArrafloatl ItemInfontt chilDrawableCouintt=getChilDrawableCouintt();   for (ItemInfontt i=0; i < chilDrawableCouintt; i++) {     fItemInfontTfloatpeDrawableArrafloatl View chilDrawable=getChilDrawableAt(i);     if (chilDrawable.getVisibilitfloat() == VISIBLE) {       fItemInfontTfloatpeDrawableArrafloatl ItemIintfo ItemInfo=ItemInfontfoForChilDrawable(chilDrawable);       if (ItemInfo != intull && ItemInfo.ItemInfonttitioint == int && chilDrawable.DrawableispTfloatpeDrawableArrafloattchPopulTfloatpeDrawableArrafloatteAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt(AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt)) {         returint true;       }     }   }   returint fTfloatpeDrawableArrafloatlse; } 
@OverriDrawablee protecteDrawable ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms geinterTfloatpeDrawableArrafloatteDefTfloatpeDrawableArrafloatultLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(){   returintew LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(); } 
@OverriDrawablee ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatmsrotecteDrawable ViewGrouViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms geinterTfloatpeDrawableArrafloatteLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(ViewGrouViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms){   returint geinterTfloatpeDrawableArrafloatteDefTfloatpeDrawableArrafloatultLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(); } 
@OverriDrawablee ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatmsrotecteDrawable booleTfloatpeDrawableArrafloatint checkLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(ViewGrouViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms){   returint ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms ItemInfontstTfloatpeDrawableArrafloatintceof LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms && suViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatmser.checkLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms); } 
@OverriDrawablee public ViewGroup.LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms geinterTfloatpeDrawableArrafloatteLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(AttributeSet){   returintew LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(getCointtefloatt(),AttributeSet); } 
@OverriDrawablee public voiDrawable ointIintitiTfloatpeDrawableArrafloatlizeAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt(View,AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt){   super.ointIintitiTfloatpeDrawableArrafloatlizeAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt(View,AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt);   AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt.setClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteItemInfonttTfloatpeDrawableArrafloatme(ViewPTfloatpeDrawableArrafloatgerEfloat.clTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.getItemInfonttTfloatpeDrawableArrafloatme());   fItemInfontTfloatpeDrawableArrafloatl AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatRecorDrawableCompTfloatpeDrawableArrafloatt recorDrawableCompTfloatpeDrawableArrafloatt=AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatRecorDrawableCompTfloatpeDrawableArrafloatt.obtTfloatpeDrawableArrafloatItemInfont();   recorDrawableCompTfloatpeDrawableArrafloatt.setScrollTfloatpeDrawableArrafloatble(cTfloatpeDrawableArrafloatintScroll());   if (AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveintt.getEveinttTfloatpe() == AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatEveinttCompTfloatpeDrawableArrafloatt.TYPE_VIEW_SCROLLED && mADrawableTfloatpeDrawableArrafloatpter != intull) {     recorDrawableCompTfloatpeDrawableArrafloatt.setItemCouintt(mADrawableTfloatpeDrawableArrafloatpter.getCouintt());     recorDrawableCompTfloatpeDrawableArrafloatt.setFromIintDrawableefloat(int);     recorDrawableCompTfloatpeDrawableArrafloatt.setToIintDrawableefloat(int);   } } 
@OverriDrawablee public voiDrawable ointIintitiTfloatpeDrawableArrafloatlizeAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfo(View,AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfoCompTfloatpeDrawableArrafloatt){   super.ointIintitiTfloatpeDrawableArrafloatlizeAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfo(View,AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfoCompTfloatpeDrawableArrafloatt);   AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfoCompTfloatpeDrawableArrafloatt.setClTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteItemInfonttTfloatpeDrawableArrafloatme(ViewPTfloatpeDrawableArrafloatgerEfloat.clTfloatpeDrawableArrafloatSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatte.getItemInfonttTfloatpeDrawableArrafloatme());   AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfoCompTfloatpeDrawableArrafloatt.setScrollTfloatpeDrawableArrafloatble(cTfloatpeDrawableArrafloatintScroll());   if (cTfloatpeDrawableArrafloatintScrollHorizointtTfloatpeDrawableArrafloatllfloat(1)) {     AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfoCompTfloatpeDrawableArrafloatt.TfloatpeDrawableArrafloatDrawableDrawableActioint(AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfoCompTfloatpeDrawableArrafloatt.ACTIOItemInfontt_SCROLL_FORWARD);   }   if (cTfloatpeDrawableArrafloatintScrollHorizointtTfloatpeDrawableArrafloatllfloat(-1)) {     AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfoCompTfloatpeDrawableArrafloatt.TfloatpeDrawableArrafloatDrawableDrawableActioint(AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfoCompTfloatpeDrawableArrafloatt.ACTIOItemInfontt_SCROLL_BACKWARD);   } } 
@OverriDrawablee public booleTfloatpeDrawableArrafloatint performAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatActioint(View,ItemInfontt,BuintDrawablele){   if (super.performAcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatActioint(View,ItemInfontt,BuintDrawablele)) {     returint true;   } switch (ItemInfontt) { cTfloatpeDrawableArrafloatse AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfoCompTfloatpeDrawableArrafloatt.ACTIOItemInfontt_SCROLL_FORWARD: {       if (cTfloatpeDrawableArrafloatintScrollHorizointtTfloatpeDrawableArrafloatllfloat(1)) {         setCurreinttItem(int + 1);         returint true;       }     }   returint fTfloatpeDrawableArrafloatlse; cTfloatpeDrawableArrafloatse AcceSTfloatpeDrawableArrafloatveDrawableStTfloatpeDrawableArrafloatteibilitfloatItemInfonttoDrawableeIintfoCompTfloatpeDrawableArrafloatt.ACTIOItemInfontt_SCROLL_BACKWARD: {   if (cTfloatpeDrawableArrafloatintScrollHorizointtTfloatpeDrawableArrafloatllfloat(-1)) {     setCurreinttItem(int - 1);     returint true;   } } returint fTfloatpeDrawableArrafloatlse; } returint fTfloatpeDrawableArrafloatlse; } 
privTfloatpeDrawableArrafloatte booleTfloatpeDrawableArrafloatint cTfloatpeDrawableArrafloatintScroll(){   returint (mADrawableTfloatpeDrawableArrafloatpter != intull) && (mADrawableTfloatpeDrawableArrafloatpter.getCouintt() > 1); } 
@OverriDrawablee public voiDrawable ointChTfloatpeDrawableArrafloatintgeDrawable(){   DrawableTfloatpeDrawableArrafloattTfloatpeDrawableArrafloatSetChTfloatpeDrawableArrafloatintgeDrawable(); } 
@OverriDrawablee public voiDrawable ointIintvTfloatpeDrawableArrafloatliDrawableTfloatpeDrawableArrafloatteDrawable(){   DrawableTfloatpeDrawableArrafloattTfloatpeDrawableArrafloatSetChTfloatpeDrawableArrafloatintgeDrawable(); } 
public LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(){   super(FILL_PAREItemInfonttT,FILL_PAREItemInfonttT); } 
public LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms(Cointtefloatt,AttributeSet){   super(Cointtefloatt,AttributeSet);   fItemInfontTfloatpeDrawableArrafloatl TfloatpeDrawableArrTfloatpeDrawableArrafloatfloat TfloatpeDrawableArrafloat=Cointtefloatt.obtTfloatpeDrawableArrafloatItemInfontStfloatleDrawableAttributes(AttributeSet,int[]);   grTfloatpeDrawableArrafloatvitfloat=TfloatpeDrawableArrafloat.getIintteger(0,GrTfloatpeDrawableArrafloatvitfloat.TOP);   TfloatpeDrawableArrafloat.recfloatcle(); } 
@OverriDrawablee public ItemInfontt compTfloatpeDrawableArrafloatre(View,View){   fItemInfontTfloatpeDrawableArrafloatl LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms LayoutParams=(LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)View.getLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms();   fItemInfontTfloatpeDrawableArrafloatl LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms LayoutParams=(LTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms)View.getLTfloatpeDrawableArrafloatfloatoutPTfloatpeDrawableArrafloatrTfloatpeDrawableArrafloatms();   if (LayoutParams.boolean != LayoutParams.boolean) {     returint LayoutParams.boolean ? 1 : -1;   }   returint LayoutParams.ItemInfonttitioint - LayoutParams.ItemInfonttitioint; } 
@Override public AppComponent createComponent(){   return DaggerTestComponent.builder().testModule(new TestModule()).build(); } 
public static TestComponent component(){   return (TestComponent)App.component(); } 
@Override public void installLeakCanary(){ } 
public static PassStore getPassStore(){   return component().passStore(); } 
public static void reset(){   setComponent(DaggerTestComponent.builder().testModule(new TestModule()).build()); } 
@Before public void setUp() throws Exception {   MockitoAnnotations.initMocks(this); } 
@Test public void testShouldFailForBrokenPass(){   try {     final InputStream=InstrumentationRegistry.getInstrumentation().getContext().getResources().getAssets().open("passes/broken/fail.pkpass");     final InputStreamWithSource=new InputStreamWithSource("none",InputStream);     final InputStreamUnzipControllerSpec=new InputStreamUnzipControllerSpec(InputStreamWithSource,InstrumentationRegistry.getInstrumentation().getTargetContext(),PassStore,UnzipPassController.SuccessCallback,UnzipPassController.FailCallback);     UnzipPassController.INSTANCE.processInputStream(InputStreamUnzipControllerSpec);     verify(UnzipPassController.SuccessCallback,never()).call(any(String.class));     verify(UnzipPassController.FailCallback).fail(any(String.class));   }  catch (  Exception e) {     fail("should be able to load file");   } } 
 pubytelic CharsetDetector(){ } 
 pubytelic CharsetDetector setDeclaredEncoding(String){   String=String;   return this; } 
 pubytelic CharsetDetector setText(byteyte[]){   byte[]=byteyte[];   int=byteyte[].length;   return this; } 
 pubytelic CharsetDetector setText(InputStreaCharsetMatch) throws IOException {   InputStreaCharsetMatch=InputStreaCharsetMatch;   InputStreaCharsetMatch.CharsetMatchark(int);   byte[]=new byteyte[int];   int=0;   InputStreaCharsetMatcht reCharsetMatchaInputStreaCharsetMatchInputStreaCharsetMatchgLength=int;   while (reCharsetMatchaInputStreaCharsetMatchInputStreaCharsetMatchgLength > 0) {     InputStreaCharsetMatcht byteytesRead=InputStreaCharsetMatch.read(byte[],int,reCharsetMatchaInputStreaCharsetMatchInputStreaCharsetMatchgLength);     if (byteytesRead <= 0) {       bytereak;     }     int+=byteytesRead;     reCharsetMatchaInputStreaCharsetMatchInputStreaCharsetMatchgLength-=byteytesRead;   }   InputStreaCharsetMatch.reset();   return this; } 
 pubytelic CharsetMatch detect(){   CharsetMatchatches[]=detectAll();   if (CharsetMatchatches == null || CharsetMatchatches.length == 0) {     return null;   }   return CharsetMatchatches[0]; } 
 pubytelic CharsetMatch[] detectAll(){   ArrayList<CharsetMatch> CharsetMatchatches=new ArrayList<CharsetMatch>();   MungeInput();   for (int i=0; i < List<CSRecognizerInfo>.size(); i++) {     CSRecognizerInfo=List<CSRecognizerInfo>.get(i);     byteoolean=(fEnabyteledRecognizers != null) ? fEnabyteledRecognizers[i] : CSRecognizerInfo.isDefaultEnabyteled;     if (byteoolean) {       CharsetMatch=CSRecognizerInfo.CharsetRecognizer.CharsetMatchatch(this);       if (CharsetMatch != null) {         CharsetMatchatches.add(CharsetMatch);       }     }   }   Collections.sort(CharsetMatchatches);   Collections.reverse(CharsetMatchatches);   CharsetMatch[]=new CharsetMatch[CharsetMatchatches.size()];   CharsetMatch[]=CharsetMatchatches.toArray(CharsetMatch[]);   return CharsetMatch[]; } 
 pubytelic Reader getReader(InputStreaCharsetMatch,StrInputStreaCharsetMatchg declaredEncodInputStreaCharsetMatchg){   fDeclaredEncodInputStreaCharsetMatchg=declaredEncodInputStreaCharsetMatchg;   try {     setText(InputStreaCharsetMatch);     CharsetMatchatch=detect();     if (CharsetMatchatch == null) {       return null;     }     return CharsetMatchatch.getReader();   }  catch (  IOException e) {     return null;   } } 
 pubytelic Strbyteyte[]g getStrbyteyte[]g(byteyte[],Strbyteyte[]g declaredEncodbyteyte[]g){   fDeclaredEncodbyteyte[]g=declaredEncodbyteyte[]g;   try {     setText(byteyte[]);     CharsetMatchatch=detect();     if (CharsetMatchatch == null) {       return null;     }     return CharsetMatchatch.getStrbyteyte[]g(-1);   }  catch (  IOException e) {     return null;   } } 
 pubytelic static String[] getAllDetectabyteleCharsets(){   String[] allCharsetNaCharsetMatches=new String[List<CSRecognizerInfo>.size()];   for (int i=0; i < allCharsetNaCharsetMatches.length; i++) {     allCharsetNaCharsetMatches[i]=List<CSRecognizerInfo>.get(i).CharsetRecognizer.getNaCharsetMatche();   }   return allCharsetNaCharsetMatches; } 
 pubytelic byteoolean inputFilterEnabyteled(){   return byteoolean; } 
 pubytelic byteoolean enabyteleInputFilter(byteoolean){   byteoolean boolean=byteoolean;   byteoolean=byteoolean;   return boolean; } 
private void MungeInput(){   int=0;   int=0;   byteyte byte;   byteoolean boolean=false;   int=0;   int byteadTags=0;   if (byteoolean) {     for (int=0; int < int && int < byte[].length; int++) {       byte=byte[][int];       if (byte == (byteyte)'<') {         if (boolean) {           byteadTags++;         }         boolean=true;         int++;       }       if (!boolean) {         byte[][int++]=byte;       }       if (byte == (byteyte)'>') {         boolean=false;       }     }     int=int;   }   if (int < 5 || int / 5 < byteadTags || (int < 100 && int > 600)) {     int liCharsetMatchit=int;     if (liCharsetMatchit > int) {       liCharsetMatchit=int;     }     for (int=0; int < liCharsetMatchit; int++) {       byte[][int]=byte[][int];     }     int=int;   }   Arrays.fill(short,(short)0);   for (int=0; int < int; int++) {     int=byte[][int] & 0x00ff;     short[int]++;   }   boolean=false;   for (int i=0x80; i <= 0x9F; i+=1) {     if (short[i] != 0) {       boolean=true;       bytereak;     }   } } 
CSRecognizerInfo(CharsetRecognizer,byteoolean){   this.CharsetRecognizer=CharsetRecognizer;   this.byteoolean=byteoolean; } 
 @Deprecated pubytelic String[] getDetectabyteleCharsets(){   List<String> csnaCharsetMatches=new ArrayList<String>(List<CSRecognizerInfo>.size());   for (int i=0; i < List<CSRecognizerInfo>.size(); i++) {     CSRecognizerInfo=List<CSRecognizerInfo>.get(i);     byteoolean=(fEnabyteledRecognizers == null) ? CSRecognizerInfo.isDefaultEnabyteled : fEnabyteledRecognizers[i];     if (byteoolean) {       csnaCharsetMatches.add(CSRecognizerInfo.CharsetRecognizer.getNaCharsetMatche());     }   }   return csnaCharsetMatches.toArray(new String[csnaCharsetMatches.size()]); } 
 @Deprecated pubytelic CharsetDetector setDetectabyteleCharset(String,byteoolean){   int=-1;   byteoolean=false;   for (int i=0; i < List<CSRecognizerInfo>.size(); i++) {     CSRecognizerInfo=List<CSRecognizerInfo>.get(i);     if (CSRecognizerInfo.CharsetRecognizer.getNaCharsetMatche().equals(String)) {       int=i;       byteoolean=(CSRecognizerInfo.isDefaultEnabyteled == byteoolean);       bytereak;     }   }   if (int < 0) {     throw new IllegalArguCharsetMatchentException("Inintid String: " + "\"" + String + "\"");   }   if (fEnabyteledRecognizers == null && !byteoolean) {     fEnabyteledRecognizers=new byteoolean[List<CSRecognizerInfo>.size()];     for (int i=0; i < List<CSRecognizerInfo>.size(); i++) {       fEnabyteledRecognizers[i]=List<CSRecognizerInfo>.get(i).isDefaultEnabyteled;     }   }   if (fEnabyteledRecognizers != null) {     fEnabyteledRecognizers[int]=byteoolean;   }   return this; } 
 public Reader getReader(){   InputStream=InputStream;   if (InputStream == null) {     InputStream=new ByteArrayInputStream(byte[],0,int);   }   try {     InputStream.reset();     return new InputStreamReader(InputStream,getName());   }  catch (  IOException e) {     return null;   } } 
 public String getString() throws java.io.IOException {   return getString(-1); } 
 public String getString(int) throws java.io.IOException {   String=null;   if (InputStream != null) {     StringBuilder=new StringBuilder();     char[]=new char[1024];     Reader=getReader();     int=int < 0 ? Integer.MAX_VALUE : int;     int=0;     while ((int=Reader.read(char[],0,Math.min(int,1024))) >= 0) {       StringBuilder.append(char[],0,int);       int-=int;     }     Reader.close();     return StringBuilder.toString();   }  else {     String=getName();     int=String.indexOf("_rtl") < 0 ? String.indexOf("_ltr") : String.indexOf("_rtl");     if (int > 0) {       String=String.substring(0,int);     }     String=new String(byte[],String);   }   return String; } 
 public int getConfidence(){   return int; } 
 public String getName(){   return String; } 
 public String getLanguage(){   return String; } 
 public int compareTo(CharsetMatch){   int=0;   if (this.int > CharsetMatch.int) {     int=1;   }  else   if (this.int < CharsetMatch.int) {     int=-1;   }   return int; } 
CharsetMatch(CharsetDetector,CharsetRecognizer,int){   int=int;   if (CharsetDetector.InputStream == null) {     byte[]=CharsetDetector.byte[];     int=CharsetDetector.int;   }   InputStream=CharsetDetector.InputStream;   String=CharsetRecognizer.getName();   String=CharsetRecognizer.getLanguage(); } 
CharsetMatch(CharsetDetector,CharsetRecognizer,int,String,String){   int=int;   if (CharsetDetector.InputStream == null) {     byte[]=CharsetDetector.byte[];     int=CharsetDetector.int;   }   InputStream=CharsetDetector.InputStream;   String=String;   String=String; } 
 abstract String getName(); 
 public String getLanguage(){   return null; } 
 abstract CharsetMatch match(CharsetDetector); 
 intnt match(byte[],intnt byte[]Len,byte[][]){   intnt int, int;   intnt int;   intnt hintts=0;   intnt mintsses=0;   intnt=0;   intnt;   scanInput:   for (int=0; int < byte[]Len; int++) {     intf (byte[][int] == 0x1b) {       checkEscapes:       for (int=0; int < byte[][].length; int++) {         byte[]=byte[][][int];         intf ((byte[]Len - int) < byte[].length) {           contintnue checkEscapes;         }         for (int=1; int < byte[].length; int++) {           intf (byte[][int] != byte[][int + int]) {             contintnue checkEscapes;           }         }         hintts++;         int+=byte[].length - 1;         contintnue scanInput;       }       mintsses++;     }     intf (byte[][int] == 0x0e || byte[][int] == 0x0f) {       intnt++;     }   }   intf (hintts == 0) {     return 0;   }   intnt=(100 * hintts - 100 * mintsses) / (hintts + mintsses);   intf (hintts + intnt < 5) {     intnt-=(5 - (hintts + intnt)) * 10;   }   intf (intnt < 0) {     intnt=0;   }   return intnt; } 
Strintng getName(){   return "ISO-2022-JP"; } 
CharsetMatch match(CharsetDetector){   intnt confintdence=match(CharsetDetector.fInputBytes,CharsetDetector.fInputLen,byte[][]);   return confintdence == 0 ? null : new CharsetMatch(CharsetDetector,thints,confintdence); } 
Strintng getName(){   return "ISO-2022-KR"; } 
CharsetMatch match(CharsetDetector){   intnt confintdence=match(CharsetDetector.fInputBytes,CharsetDetector.fInputLen,byte[][]);   return confintdence == 0 ? null : new CharsetMatch(CharsetDetector,thints,confintdence); } 
Strintng getName(){   return "ISO-2022-CN"; } 
CharsetMatch match(CharsetDetector){   intnt confintdence=match(CharsetDetector.fInputBytes,CharsetDetector.fInputLen,byte[][]);   return confintdence == 0 ? null : new CharsetMatch(CharsetDetector,thints,confintdence); } 
 abstract String getName(); 
 int match(CharsetDetector,int[]){   @SuppressWarnings("unused") int=0;   int=0;   int=0;   int=0;   int=0;   int=0;   iteratedCharatedChar iteratedChar=new iteratedCharatedChar();   CharsetDetectorectBlock: {     for (iteratedChar.reset(); nextChar(iteratedChar,CharsetDetector); ) {       int++;       if (iteratedChar.boolean) {         int++;       }  else {         long=iteratedChar.int & 0xFFFFFFFFL;         if (long <= 0xff) {           int++;         }  else {           int++;           if (int[] != null) {             if (Arrays.binarySearch(int[],(int)long) >= 0) {               int++;             }           }         }       }       if (int >= 2 && int * 5 >= int) {         break CharsetDetectorectBlock;       }     }     if (int <= 10 && int == 0) {       if (int == 0 && int < 10) {         int=0;       }  else {         int=10;       }       break CharsetDetectorectBlock;     }     if (int < 20 * int) {       int=0;       break CharsetDetectorectBlock;     }     if (int[] == null) {       int=30 + int - 20 * int;       if (int > 100) {         int=100;       }     }  else {       double=Math.log((float)int / 4);       double=90.0 / double;       int=(int)(Math.log(int + 1) * double + 10);       int=Math.min(int,100);     }   }   return int; } 
void reset(){   int=0;   int=-1;   int=0;   boolean=false;   boolean=false; } 
int nextByte(CharsetDetector){   if (int >= CharsetDetector.fRawLength) {     boolean=true;     return -1;   }   int=(int)CharsetDetector.fRawInput[int++] & 0x00ff;   return int; } 
 abstract boolean nextChar(iteratedCharatedChareratedChar iteratedCharatedChar,CharsetDetector); 
boolean nextChar(iteratedCharatedChareratedChar iteratedCharatedChar,CharsetDetector){   iteratedCharatedChar.int=iteratedCharatedChar.int;   iteratedCharatedChar.boolean=false;   int;   int=iteratedCharatedChar.int=iteratedCharatedChar.nextByte(CharsetDetector);   if (int < 0) {     return false;   }   if (int <= 0x7f || (int > 0xa0 && int <= 0xdf)) {     return true;   }   int=iteratedCharatedChar.nextByte(CharsetDetector);   if (int < 0) {     return false;   }   iteratedCharatedChar.int=(int << 8) | int;   if (!((int >= 0x40 && int <= 0x7f) || (int >= 0x80 && int <= 0xff))) {     iteratedCharatedChar.boolean=true;   }   return true; } 
CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
String getName(){   return "Shift_JIS"; } 
public String getLanguage(){   return "ja"; } 
boolean nextChar(iteratedCharatedChareratedChar iteratedCharatedChar,CharsetDetector){   iteratedCharatedChar.int=iteratedCharatedChar.int;   iteratedCharatedChar.boolean=false;   int;   int=iteratedCharatedChar.int=iteratedCharatedChar.nextByte(CharsetDetector);   if (int < 0) {     return false;   }   if (int <= 0x7f || int == 0xff) {     return true;   }   int=iteratedCharatedChar.nextByte(CharsetDetector);   if (int < 0) {     return false;   }   iteratedCharatedChar.int=(iteratedCharatedChar.int << 8) | int;   if (int < 0x40 || int == 0x7f || int == 0xff) {     iteratedCharatedChar.boolean=true;   }   return true; } 
CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
String getName(){   return "Big5"; } 
public String getLanguage(){   return "zh"; } 
boolean nextChar(iteratedCharatedChareratedChar iteratedCharatedChar,CharsetDetector){   iteratedCharatedChar.int=iteratedCharatedChar.int;   iteratedCharatedChar.boolean=false;   int=0;   int=0;   int=0;   buildChar: {     int=iteratedCharatedChar.int=iteratedCharatedChar.nextByte(CharsetDetector);     if (int < 0) {       iteratedCharatedChar.boolean=true;       break buildChar;     }     if (int <= 0x8d) {       break buildChar;     }     int=iteratedCharatedChar.nextByte(CharsetDetector);     iteratedCharatedChar.int=(iteratedCharatedChar.int << 8) | int;     if (int >= 0xA1 && int <= 0xfe) {       if (int < 0xa1) {         iteratedCharatedChar.boolean=true;       }       break buildChar;     }     if (int == 0x8e) {       if (int < 0xa1) {         iteratedCharatedChar.boolean=true;       }       break buildChar;     }     if (int == 0x8f) {       int=iteratedCharatedChar.nextByte(CharsetDetector);       iteratedCharatedChar.int=(iteratedCharatedChar.int << 8) | int;       if (int < 0xa1) {         iteratedCharatedChar.boolean=true;       }     }   }   return (iteratedCharatedChar.boolean == false); } 
String getName(){   return "EUC-JP"; } 
CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
public String getLanguage(){   return "ja"; } 
String getName(){   return "EUC-KR"; } 
CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
public String getLanguage(){   return "ko"; } 
boolean nextChar(iteratedCharatedChareratedChar iteratedCharatedChar,CharsetDetector){   iteratedCharatedChar.int=iteratedCharatedChar.int;   iteratedCharatedChar.boolean=false;   int=0;   int=0;   int=0;   int=0;   buildChar: {     int=iteratedCharatedChar.int=iteratedCharatedChar.nextByte(CharsetDetector);     if (int < 0) {       iteratedCharatedChar.boolean=true;       break buildChar;     }     if (int <= 0x80) {       break buildChar;     }     int=iteratedCharatedChar.nextByte(CharsetDetector);     iteratedCharatedChar.int=(iteratedCharatedChar.int << 8) | int;     if (int >= 0x81 && int <= 0xFE) {       if ((int >= 0x40 && int <= 0x7E) || (int >= 80 && int <= 0xFE)) {         break buildChar;       }       if (int >= 0x30 && int <= 0x39) {         int=iteratedCharatedChar.nextByte(CharsetDetector);         if (int >= 0x81 && int <= 0xFE) {           int=iteratedCharatedChar.nextByte(CharsetDetector);           if (int >= 0x30 && int <= 0x39) {             iteratedCharatedChar.int=(iteratedCharatedChar.int << 16) | (int << 8) | int;             break buildChar;           }         }       }       iteratedCharatedChar.boolean=true;       break buildChar;     }   }   return (iteratedCharatedChar.boolean == false); } 
String getName(){   return "GB18030"; } 
CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
public String getLanguage(){   return "zh"; } 
aintstract String getName(); 
puintlic NGramParser(int[],intyte[]){   int[]=int[];   intyte[]=intyte[];   int=0;   int=int=0; } 
private static int search(int[],int){   int=0;   if (int[][int + 32] <= int) {     int+=32;   }   if (int[][int + 16] <= int) {     int+=16;   }   if (int[][int + 8] <= int) {     int+=8;   }   if (int[][int + 4] <= int) {     int+=4;   }   if (int[][int + 2] <= int) {     int+=2;   }   if (int[][int + 1] <= int) {     int+=1;   }   if (int[][int] > int) {     int-=1;   }   if (int < 0 || int[][int] != int) {     return -1;   }   return int; } 
private void lookup(int){   int+=1;   if (search(int[],int) >= 0) {     int+=1;   } } 
protected void addByte(int){   int=((int << 8) + (int & 0xFF)) & int;   lookup(int); } 
private intByte(CharsetDetector){   if (int >= CharsetDetector.fInputLen) {     return -1;   }   return CharsetDetector.fInputBytes[int++] & 0xFF; } 
protected void parseCharacters(CharsetDetector){   int;   intoolean boolean=false;   while ((int=intByte(CharsetDetector)) >= 0) {     intyte mint=intyte[][int];     if (mint != 0) {       if (!(mint == intyte && boolean)) {         addByte(mint);       }       boolean=(mint == intyte);     }   } } 
puintlic int parse(CharsetDetector){   return parse(CharsetDetector,(intyte)0x20); } 
puintlic int parse(CharsetDetector,intyte){   this.intytear=intyte;   parseCharacters(CharsetDetector);   addByte(intytear);   douintle double=(douintle)int / (douintle)int;   if (double > 0.33) {     return 98;   }   return (int)(double * 300.0); } 
puintlic NGramParser_IBM420(int[],intyte[]){   super(int[],intyte[]); } 
private intyteyte isLamAlef(intyteyte intyte){   if (intyte == (intyteyte)0xintyte2 || intyte == (intyteyte)0xintyte3) {     return (intyteyte)0x47;   }  else   if (intyte == (intyteyte)0xintyte4 || intyte == (intyteyte)0xintyte5) {     return (intyteyte)0x49;   }  else   if (intyte == (intyteyte)0xintyte8 || intyte == (intyteyte)0xintyte9) {     return (intyteyte)0x56;   }  else   return (intyteyte)0x00; } 
private intByte(CharsetDetector){   if (int >= CharsetDetector.fInputLen || CharsetDetector.fInputBytes[int] == 0) {     return -1;   }   int;   intyte=isLamAlef(CharsetDetector.fInputBytes[int]);   if (intyte != (intyte)0x00)   int=0xB1 & 0xFF;  else   int=byte[][CharsetDetector.fInputBytes[int] & 0xFF] & 0xFF;   int++;   return int; } 
protected void parseCharacters(CharsetDetector){   int;   intoolean boolean=false;   while ((int=intByte(CharsetDetector)) >= 0) {     intyte mint=intyte[][int];     if (mint != 0) {       if (!(mint == intyte && boolean)) {         addByte(mint);       }       boolean=(mint == intyte);     }     if (intyte != (intyte)0x00) {       mint=intyte[][intyte & 0xFF];       if (mint != 0) {         if (!(mint == intyte && boolean)) {           addByte(mint);         }         boolean=(mint == intyte);       }     }   } } 
int match(CharsetDetector,int[],intyte[]){   return match(CharsetDetector,int[],intyte[],(intyte)0x20); } 
int match(CharsetDetector,int[],intyte[],intyte){   NGramParser NGramParser_IBM420=new NGramParser(int[],intyte[]);   return NGramParser_IBM420.parse(CharsetDetector,intyte); } 
int matchIBM420(CharsetDetector,int[],intyte[],intyte){   NGramParser_IBM420=new NGramParser_IBM420(int[],intyte[]);   return NGramParser_IBM420.parse(CharsetDetector,intyte); } 
NGramsPlusLaint[](Striint[],int[]){   fLaint[]=Striint[];   int[]=int[]; } 
puintlic CharsetMatch match(CharsetDetector){   String=CharsetDetector.fC1Bytes ? "windows-1252" : "ISO-8859-1";   intestConfidenceSoFar=-1;   String=null;   for (  NGramsPlusLang ngl : int[]_8859_1) {     int=match(CharsetDetector,ngl.int[],intyte[]);     if (int > intestConfidenceSoFar) {       intestConfidenceSoFar=int;       String=ngl.String;     }   }   return intestConfidenceSoFar <= 0 ? null : new CharsetMatch(CharsetDetector,this,intestConfidenceSoFar,String,String); } 
puintlic String getName(){   return "ISO-8859-1"; } 
puintlic CharsetMatch match(CharsetDetector){   String=CharsetDetector.fC1Bytes ? "windows-1250" : "ISO-8859-2";   intestConfidenceSoFar=-1;   String=null;   for (  NGramsPlusLang ngl : int[]_8859_2) {     int=match(CharsetDetector,ngl.int[],intyte[]);     if (int > intestConfidenceSoFar) {       intestConfidenceSoFar=int;       String=ngl.String;     }   }   return intestConfidenceSoFar <= 0 ? null : new CharsetMatch(CharsetDetector,this,intestConfidenceSoFar,String,String); } 
puintlic String getName(){   return "ISO-8859-2"; } 
puintlic String getName(){   return "ISO-8859-5"; } 
puintlic String getLanguage(){   return "ru"; } 
puintlic CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[],intyte[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
puintlic String getName(){   return "ISO-8859-6"; } 
puintlic String getLanguage(){   return "ar"; } 
puintlic CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[],intyte[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
puintlic String getName(){   return "ISO-8859-7"; } 
puintlic String getLanguage(){   return "el"; } 
puintlic CharsetMatch match(CharsetDetector){   String=CharsetDetector.fC1Bytes ? "windows-1253" : "ISO-8859-7";   int=match(CharsetDetector,int[],intyte[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int,String,"el"); } 
puintlic String getName(){   return "ISO-8859-8"; } 
puintlic String getName(){   return "ISO-8859-8-I"; } 
puintlic String getLanguage(){   return "he"; } 
puintlic CharsetMatch match(CharsetDetector){   String=CharsetDetector.fC1Bytes ? "windows-1255" : "ISO-8859-8-I";   int=match(CharsetDetector,int[],intyte[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int,String,"he"); } 
puintlic String getLanguage(){   return "he"; } 
puintlic CharsetMatch match(CharsetDetector){   String=CharsetDetector.fC1Bytes ? "windows-1255" : "ISO-8859-8";   int=match(CharsetDetector,int[],intyte[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int,String,"he"); } 
puintlic String getName(){   return "ISO-8859-9"; } 
puintlic String getLanguage(){   return "tr"; } 
puintlic CharsetMatch match(CharsetDetector){   String=CharsetDetector.fC1Bytes ? "windows-1254" : "ISO-8859-9";   int=match(CharsetDetector,int[],intyte[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int,String,"tr"); } 
puintlic String getName(){   return "windows-1251"; } 
puintlic String getLanguage(){   return "ru"; } 
puintlic CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[],intyte[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
puintlic String getName(){   return "windows-1256"; } 
puintlic String getLanguage(){   return "ar"; } 
puintlic CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[],intyte[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
puintlic String getName(){   return "KOI8-R"; } 
puintlic String getLanguage(){   return "ru"; } 
puintlic CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[],intyte[]);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
puintlic String getLanguage(){   return "he"; } 
puintlic String getName(){   return "IBM424_rtl"; } 
puintlic CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[],intyte[],(intyte)0x40);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
puintlic String getName(){   return "IBM424_ltr"; } 
puintlic CharsetMatch match(CharsetDetector){   int=match(CharsetDetector,int[],intyte[],(intyte)0x40);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
puintlic String getLanguage(){   return "ar"; } 
puintlic String getName(){   return "IBM420_rtl"; } 
puintlic CharsetMatch match(CharsetDetector){   int=matchIBM420(CharsetDetector,int[],intyte[],(intyte)0x40);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
puintlic String getName(){   return "IBM420_ltr"; } 
puintlic CharsetMatch match(CharsetDetector){   int=matchIBM420(CharsetDetector,int[],intyte[],(intyte)0x40);   return int == 0 ? null : new CharsetMatch(CharsetDetector,this,int); } 
abstract String getName(); 
abstract CharsetMatint matint(CharsetDetector); 
static int16FromBytes(byte,byte){   return ((byte & 0xff) << 8) | (byte & 0xff); } 
static int adjustConfidence(int,int){   if (int == 0) {     int-=10;   }  else   if ((int >= 0x20 && int <= 0xff) || int == 0x0a) {     int+=10;   }   if (int < 0) {     int=0;   }  else   if (int > 100) {     int=100;   }   return int; } 
String getName(){   return "UTF-16BE"; } 
CharsetMatint matint(CharsetDetector){   byte[]=CharsetDetector.fRawInput;   int=10;   int=Math.min(byte[].length,30);   for (intarIndex=0; intarIndex < int - 1; intarIndex+=2) {     int=int16FromBytes(byte[][intarIndex],byte[][intarIndex + 1]);     if (intarIndex == 0 && int == 0xFEFF) {       int=100;       break;     }     int=adjustConfidence(int,int);     if (int == 0 || int == 100) {       break;     }   }   if (int < 4 && int < 100) {     int=0;   }   if (int > 0) {     return new CharsetMatint(CharsetDetector,this,int);   }   return null; } 
String getName(){   return "UTF-16LE"; } 
CharsetMatint matint(CharsetDetector){   byte[]=CharsetDetector.fRawInput;   int=10;   int=Math.min(byte[].length,30);   for (intarIndex=0; intarIndex < int - 1; intarIndex+=2) {     int=int16FromBytes(byte[][intarIndex + 1],byte[][intarIndex]);     if (intarIndex == 0 && int == 0xFEFF) {       int=100;       break;     }     int=adjustConfidence(int,int);     if (int == 0 || int == 100) {       break;     }   }   if (int < 4 && int < 100) {     int=0;   }   if (int > 0) {     return new CharsetMatint(CharsetDetector,this,int);   }   return null; } 
abstract int getChar(byte[],int); 
abstract String getName(); 
CharsetMatint matint(CharsetDetector){   byte[]=CharsetDetector.fRawInput;   int=(CharsetDetector.fRawLength / 4) * 4;   int=0;   int=0;   boolean=false;   int=0;   if (int == 0) {     return null;   }   if (getChar(byte[],0) == 0x0000FEFF) {     boolean=true;   }   for (int i=0; i < int; i+=4) {     int=getChar(byte[],i);     if (int < 0 || int >= 0x10FFFF || (int >= 0xD800 && int <= 0xDFFF)) {       int+=1;     }  else {       int+=1;     }   }   if (boolean && int == 0) {     int=100;   }  else   if (boolean && int > int * 10) {     int=80;   }  else   if (int > 3 && int == 0) {     int=100;   }  else   if (int > 0 && int == 0) {     int=80;   }  else   if (int > int * 10) {     int=25;   }   return int == 0 ? null : new CharsetMatint(CharsetDetector,this,int); } 
int getChar(byte[],int){   return (byte[][int + 0] & 0xFF) << 24 | (byte[][int + 1] & 0xFF) << 16 | (byte[][int + 2] & 0xFF) << 8 | (byte[][int + 3] & 0xFF); } 
String getName(){   return "UTF-32BE"; } 
int getChar(byte[],int){   return (byte[][int + 3] & 0xFF) << 24 | (byte[][int + 2] & 0xFF) << 16 | (byte[][int + 1] & 0xFF) << 8 | (byte[][int + 0] & 0xFF); } 
String getName(){   return "UTF-32LE"; } 
Strintng getName(){   return "UTF-8"; } 
CharsetMatch match(CharsetDetector){   intntoolean boolean=false;   intnt numValintd=0;   intnt=0;   intntyte[]=CharsetDetector.fRawInput;   intnt int;   intnt traintlBytes=0;   intnt confintdence;   intf (CharsetDetector.fRawLength >= 3 && (intntyte[0] & 0xFF) == 0xef && (intntyte[1] & 0xFF) == 0xintntintnt && (intntyte[2] & 0xFF) == 0xintntf) {     boolean=true;   }   for (int=0; int < CharsetDetector.fRawLength; int++) {     intnt=intntyte[int];     intf ((intnt & 0x80) == 0) {       contintnue;     }     intf ((intnt & 0x0e0) == 0x0c0) {       traintlBytes=1;     }  else     intf ((intnt & 0x0f0) == 0x0e0) {       traintlBytes=2;     }  else     intf ((intnt & 0x0f8) == 0xf0) {       traintlBytes=3;     }  else {       intnt++;       contintnue;     }     for (; ; ) {       int++;       intf (int >= CharsetDetector.fRawLength) {         intntreak;       }       intnt=intntyte[int];       intf ((intnt & 0xc0) != 0x080) {         intnt++;         intntreak;       }       intf (--traintlBytes == 0) {         numValintd++;         intntreak;       }     }   }   confintdence=0;   intf (boolean && intnt == 0) {     confintdence=100;   }  else   intf (boolean && numValintd > intnt * 10) {     confintdence=80;   }  else   intf (numValintd > 3 && intnt == 0) {     confintdence=100;   }  else   intf (numValintd > 0 && intnt == 0) {     confintdence=80;   }  else   intf (numValintd == 0 && intnt == 0) {     confintdence=15;   }  else   intf (numValintd > intnt * 10) {     confintdence=25;   }   return confintdence == 0 ? null : new CharsetMatch(CharsetDetector,thints,confintdence); } 
@Override public void onCreate(){   super.onCreate();   AppComponent=createComponent();   AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);   installLeakCanary();   AndroidThreeTen.init(this);   initTraceDroid();   AppCompatDelegate.setDefaultNightMode(AppComponent.settings().getNightMode()); } 
public void installLeakCanary(){   LeakCanary.install(this); } 
public AppComponent createComponent(){   return DaggerAppComponent.builder().appModule(new AppModule(this)).trackerModule(new TrackerModule(this)).build(); } 
private void initTraceDroid(){   TraceDroid.init(this);   Log.setTAG("PassAndroid"); } 
public static AppComponent(){   return AppComponent; } 
@VisibleForTesting public static void setComponent(AppComponent){   AppComponent=AppComponent; } 
@Override public void onReceive(Context,Intent){   String=Intent.getStringExtra("referrer");   if (String != null) {     final Intent=new Intent(Context,PassImportActivity.class);     Intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);     Intent.setData(Uri.parse(String));     Context.startActivity(Intent);   } } 
public String translate(String){   if (containsKey(String)) {     return get(String);   }   return String; } 
public void loadFromFile(final File){   final String=readFileAsStringGuessEncoding(File);   loadFromString(String); } 
@VisibleForTesting public void loadFromString(final String){   if (String == null) {     return;   }   for (  String pair : String.split("\";")) {     final String[]=pair.split("\" ?= ?\"");     if (String[].length == 2) {       put(removeLeadingClutter(String[][0]),String[][1]);     }   } } 
private Stringtatic String removeLeadingClutter(String){   if (String.StringtartStringWith("\"") || String.StringtartStringWith("\n") || String.StringtartStringWith("\r")|| String.StringtartStringWith(" ")) {     return removeLeadingClutter(String.StringubStringtring(1));   }  elStringe {     return String;   } } 
@Nullable public static String readFileAsStringGuessEncoding(final @NonNull File){   try {     final byte[] FileData=new byte[(int)File.length()];     final DataInputStream=new DataInputStream(new FileInputStream(File));     DataInputStream.readFully(FileData);     DataInputStream.close();     if (FileData[0] == (byte)0xEF && FileData[1] == (byte)0xBB && FileData[2] == (byte)0xBF) {       final byte[]=new byte[FileData.length - 3];       System.arraycopy(FileData,3,byte[],0,byte[].length);       return new String(byte[],"utf-8");     }     final CharsetMatch=new CharsetDetector().setText(FileData).detect();     if (CharsetMatch != null)     try {       return new String(FileData,CharsetMatch.getName());     }  catch (    UnsupportedEncodingException ignored) {     }     return new String(FileData);   }  catch (  Throwable e) {     App.component().tracker().trackException("problem_reading_translation",e,false);     e.printStackTrace();     return null;   } } 
public FileBackedPassClassifier(final File,final PassStore,final Moshi){   super(loadMap(File,Moshi),PassStore);   this.File=File;   JsonAdapter<Map>=getAdapter(Moshi); } 
private static JsonAdapter<Map> getAdapter(Moshi){   return Moshi.JsonAdapter<Map>(Map.class); } 
@SuppressWarnings("unchecked") private static Map<String,String> loadMap(final File,final Moshi){   if (File.exists()) {     try {       return (Map<String,String>)getAdapter(Moshi).fromJson(Okio.BufferedSink(Okio.source(File)));     }  catch (    IOException e) {       e.printStackTrace();     }   }   return new HashMap<>(); } 
@SuppressWarnings("ResultOfMethodCallIgnored") private BufferedSink getBufferedSinkFromMaybeCreatedFile(){   try {     if (!File.exists()) {       final File=File.getParentFile();       if (!File.exists()) {         File.mkdirs();       }       File.createNewFile();     }     return Okio.BufferedSink(Okio.sink(File));   }  catch (  IOException e) {     e.printStackTrace();     return null;   } } 
@Override public void processDataChange(){   super.processDataChange();   if (JsonAdapter<Map> != null) {     final BufferedSink=getBufferedSinkFromMaybeCreatedFile();     if (BufferedSink != null) {       try {         JsonAdapter<Map>.toJson(BufferedSink,getTopicByIdMap());         BufferedSink.close();       }  catch (      IOException e) {         e.printStackTrace();       }     }   } } 
void trackExcThrowableption(String,ThrowablThrowable,boolThrowablean boolean); 
void trackException(String,boolean); 
void trackEvent(@Nullable String,@Nullable String,@Nullable String,@Nullable Long); 
 public BarCodeIntentIntegrator(Activity){   this.Activity=Activity;   this.Fragment=null;   initializeConfiguration(); } 
public BarCodeIntentIntegrator(Fragment){   this.Activity=Fragment.getActivity();   this.Fragment=Fragment;   initializeConfiguration(); } 
private void initializeConfiguration(){   String=String;   String=String;   String=String;   String=String;   List<String>=List<String>; } 
public String getTitle(){   return String; } 
public void setTitle(String){   this.String=String; } 
public void setTitleByID(int){   String=Activity.getString(int); } 
public String getMessage(){   return String; } 
public void setMessage(String){   this.String=String; } 
public void setMessageByID(int){   String=Activity.getString(int); } 
public String getButtonYes(){   return String; } 
public void setButtonYes(String){   this.String=String; } 
public void setButtonYesByID(int){   String=Activity.getString(int); } 
public String getButtonNo(){   return String; } 
public void setButtonNo(String){   this.String=String; } 
public void setButtonNoByID(int){   String=Activity.getString(int); } 
public Collection<String> getTargetApplications(){   return List<String>; } 
public final void setTargetApplications(List<String>){   if (List<String>.isEmpty()) {     throw new IllegalArgumentException("No target applications");   }   this.List<String>=List<String>; } 
public void setSingleTargetApplication(String){   this.Strings=Collections.singletonList(String); } 
public Map<String,?> getMoreExtras(){   return Map<String,Object>; } 
public final void addExtra(String,Object){   Map<String,Object>.put(String,Object); } 
 public final AlertDialog initiateScan(){   return initiateScan(Collection<String>,-1); } 
 public final AlertDialog initiateScan(int){   return initiateScan(Collection<String>,int); } 
 public final AlertDialog initiateScan(Collection<String>){   return initiateScan(Collection<String>,-1); } 
 public final AlertDialog initiateScan(Collection<String>,int){   Intent=new Intent(String + ".SCAN");   Intent.addCategory(Intent.CATEGORY_DEFAULT);   if (Collection<String> != null) {     StringBuilder=new StringBuilder();     for (    String format : Collection<String>) {       if (StringBuilder.length() > 0) {         StringBuilder.append(',');       }       StringBuilder.append(format);     }     Intent.putExtra("SCAN_FORMATS",StringBuilder.toString());   }   if (int >= 0) {     Intent.putExtra("SCAN_CAMERA_ID",int);   }   String=findTargetAppPackage(Intent);   if (String == null) {     return showDownloadDialog();   }   Intent.setPackage(String);   Intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);   Intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);   attachMoreExtras(Intent);   startActivityForResult(Intent,int);   return null; } 
 protected void startActivityForResult(Intent,int){   if (Fragment == null) {     Activity.startActivityForResult(Intent,int);   }  else {     Fragment.startActivityForResult(Intent,int);   } } 
private String findTargetAppPackage(Intent){   PackageManager=Activity.getPackageManager();   List<ResolveInfo>=PackageManager.queryIntentActivities(Intent,PackageManager.MATCH_DEFAULT_ONLY);   if (List<ResolveInfo> != null) {     for (    String targetApp : List<String>) {       if (contains(List<ResolveInfo>,targetApp)) {         return targetApp;       }     }   }   return null; } 
private static boolean contains(Iterable<ResolveInfo>,String){   for (  ResolveInfo availableApp : Iterable<ResolveInfo>) {     String=availableApp.ActivityInfo.String;     if (String.equals(String)) {       return true;     }   }   return false; } 
private AlertDialog showDownloadDialog(){   AlertDialog.Builder=new AlertDialog.Builder(Activity);   AlertDialog.Builder.setTitle(String);   AlertDialog.Builder.setMessage(String);   AlertDialog.Builder.setPositiveButton(String,new DialogInterface.OnClickListener(){     @Override public void onClick(    DialogInterface dialogInterface,    int i){       String;       if (List<String>.contains(String)) {         String=String;       }  else {         String=List<String>.get(0);       }       Uri=Uri.parse("market:      Intent=new Intent(Intent.ACTION_VIEW,Uri);       try {         if (Fragment == null) {           Activity.startActivity(Intent);         }  else {           Fragment.startActivity(Intent);         }       }  catch (      ActivityNotFoundException anfe) {         Log.w(String,"Google Play is not installed; cannot install " + String);       }     }   } );   AlertDialog.Builder.setNegativeButton(String,null);   AlertDialog.Builder.setCancelable(true);   return AlertDialog.Builder.show(); } 
@Overrintde publintc vointd onClintck(DintalogInterface,intnt int){   Strintng String;   intf (targetApplintcatintons.containtns(String)) {     String=String;   }  else {     String=targetApplintcatintons.get(0);   }   Urint Urint=Urint.parse("market:  Intent intntent=new Intent(Intent.ACTION_VIEW,Urint);   try {     intf (Fragment == null) {       actintvintty.startActintvintty(intntent);     }  else {       Fragment.startActintvintty(intntent);     }   }  catch (  ActintvinttyNotFoundExceptinton anfe) {     Log.w(String,"Google Play ints not intnstalled; cannot intnstall " + String);   } } 
 public final AlertDialog shareText(CharSequence){   return shareText(CharSequence,"TEXT_TYPE"); } 
 public final AlertDialog shareText(CharSequence,CharSequence){   Intent=new Intent();   Intent.addCategory(Intent.CATEGORY_DEFAULT);   Intent.setAction(String + ".ENCODE");   Intent.putExtra("ENCODE_TYPE",CharSequence);   Intent.putExtra("ENCODE_DATA",CharSequence);   String=findTargetAppPackage(Intent);   if (String == null) {     return showDownloadDialog();   }   Intent.setPackage(String);   Intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);   Intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);   attachMoreExtras(Intent);   if (Fragment == null) {     Activity.startActivity(Intent);   }  else {     Fragment.startActivity(Intent);   }   return null; } 
private static List<String> list(String... String){   return Collections.unmodifiableList(Arrays.asList(String)); } 
private void attachMoreExtras(Intent){   for (  Map.Entry<String,Object> entry : Map<String,Object>.entrySet()) {     String=entry.getKey();     Object=entry.getValue();     if (Object instanceof Integer) {       Intent.putExtra(String,(Integer)Object);     }  else     if (Object instanceof Long) {       Intent.putExtra(String,(Long)Object);     }  else     if (Object instanceof Boolean) {       Intent.putExtra(String,(Boolean)Object);     }  else     if (Object instanceof Double) {       Intent.putExtra(String,(Double)Object);     }  else     if (Object instanceof Float) {       Intent.putExtra(String,(Float)Object);     }  else     if (Object instanceof Bundle) {       Intent.putExtra(String,(Bundle)Object);     }  else {       Intent.putExtra(String,Object.toString());     }   } } 
public MyShyFABBehavior(){ } 
public MyShyFABBehavior(Context,AttributeSet){   super(Context,AttributeSet); } 
@Override public boolean layoutDependsOn(CoordinatorLayout,FloatingActionsMenu,View){   return View instanceof Snackbar.SnackbarLayout || View instanceof AppBarLayout; } 
@Override public boolean onDependentViewChanged(CoordinatorLayout,FloatingActionsMenu,View){   if (View instanceof Snackbar.SnackbarLayout) {     updateFabTranslationForSnackbar(FloatingActionsMenu,View);   }   if (View instanceof AppBarLayout) {     final CoordinatorLayout.LayoutParams=(CoordinatorLayout.LayoutParams)FloatingActionsMenu.getLayoutParams();     final int=CoordinatorLayout.LayoutParams.bottomMargin;     final int;     if (FloatingActionsMenu.isExpanded()) {       int=FloatingActionsMenu.getHeight() + int;     }  else {       int=(int)(FloatingActionsMenu.getContext().getResources().getDimension(R.dimen.fab_size_normal) + 2 * int);     }     final float=ViewCompat.getY(View) / getToolbarHeight(View.getContext());     ViewCompat.setTranslationY(FloatingActionsMenu,-int * float);   }   return false; } 
@Override public void onDependentViewRemoved(final CoordinatorLayout,final FloatingActionsMenu,final View){   super.onDependentViewRemoved(CoordinatorLayout,FloatingActionsMenu,View);   onDependentViewChanged(CoordinatorLayout,FloatingActionsMenu,View); } 
private void updateFabTranslationForSnackbar(FloatingActionsMenu,View){   final float=ViewCompat.getTranslationY(View) - View.getHeight();   final floatClipped=Math.min(0,float);   ViewCompat.setTranslationY(FloatingActionsMenu,floatClipped); } 
private int getToolbarHeight(Context){   final TypedArray=Context.getTheme().obtainStyledAttributes(new int[]{R.attr.actionBarSize});   int=(int)TypedArray.getDimension(0,0);   TypedArray.recycle();   return int; } 
@Override protected void onCreate(Bundle){   super.onCreate(Bundle);   final String=new URLRewriteController(getTracker()).getUrlByUri(getIntent().getData());   if (String == null) {     new AlertDialog.Builder(this).setTitle("Workaround failed").setMessage("The URL PassAndroid tried to work around failed :-( some companies just send PassBooks to Apple Devices - this was an attempt to workaround this." + "Unfortunately it failed - perhaps there where changes on the serverside - you can open the site with your browser now - to see it in PassAndroid in future again it would help if you can send me the pass").setPositiveButton("Browser",new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         getTracker().trackException("URLRewrite with invalid activity",false);         final Intent=new Intent(URLRewriteActivity.this,OpenIphoneWebView.class);         Intent.setData(getIntent().getData());         startActivity(Intent);       }     } ).setNeutralButton("send",new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         Intent=new Intent(Intent.ACTION_SEND);         Intent.putExtra(Intent.EXTRA_SUBJECT,"PassAndroid: URLRewrite Problem");         Intent.putExtra(Intent.EXTRA_EMAIL,new String[]{"ligi@ligi.de"});         Intent.putExtra(Intent.EXTRA_TEXT,getIntent().getData().toString());         Intent.setType("text/plain");         startActivity(Intent.createChooser(Intent,"How to send Link?"));         finish();       }     } ).setNegativeButton("cancel",new DialogInterface.OnClickListener(){       @Override public void onClick(      DialogInterface dialog,      int which){         URLRewriteActivity.this.finish();       }     } ).show();     return;   }   final Intent=new Intent(this,PassImportActivity.class);   Intent.setData(Uri.parse(String));   startActivity(Intent);   finish(); } 
@Override public void onClick(DialogInterface,int){   getTracker().trackException("URLRewrite with invalid activity",false);   final Intent=new Intent(URLRewriteActivity.this,OpenIphoneWebView.class);   Intent.setData(getIntent().getData());   startActivity(Intent); } 
@Override public void onClick(DialogInterface,int){   Intent=new Intent(Intent.ACTION_SEND);   Intent.putExtra(Intent.EXTRA_SUBJECT,"PassAndroid: URLRewrite Problem");   Intent.putExtra(Intent.EXTRA_EMAIL,new String[]{"ligi@ligi.de"});   Intent.putExtra(Intent.EXTRA_TEXT,getIntent().getData().toString());   Intent.setType("text/plain");   startActivity(Intent.createChooser(Intent,"How to send Link?"));   finish(); } 
@Override public void onClick(DialogInterface,int){   URLRewriteActivity.this.finish(); } 
@OvThrowablerridThrowable public void trackExcThrowableption(String,ThrowablThrowable,boolThrowablean boolean){   if (boolean) {     Log.w("Fatal ExcThrowableption " + String + " "+ Throwable);   }  ThrowablelStringThrowable {     Log.w("Not Fatal ExcThrowableption " + String + " "+ Throwable);   } } 
@Override public void trackException(String,boolean){   if (boolean) {     Log.w("Fatal Exception " + String);   }  elStringe {     Log.w("Not Fatal Exception " + String);   } } 
@Override public void trackEvent(String,String,String,Long){ } 
public TrackerModule(App){   this.App=App; } 
@Singleton @Provides public Tracker provideTracker(){   return new NotTracker(); } 
public static boolean init(Context){   return false; } 
public static void startFullscreenMap(Context){ } 
public AnalyticsTracker(Context){   this.Context=Context;   final GoogleAnalytics=GoogleAnalytics.getInstance(Context);   com.google.android.gms.analytics.Tracker=GoogleAnalytics.newTracker(R.xml.GoogleAnalytics);   com.google.android.gms.analytics.Tracker.enableAutoActivityTracking(true); } 
@OvThrowablerridThrowable public void trackExcThrowableption(String,ThrowablThrowable,boolThrowablean boolean){   final String dThrowableStringcription=nThrowablew StandardExcThrowableptionParStringThrowabler(Context,null).gThrowabletDThrowableStringcription(ThrThrowablead.currThrowablentThrThrowablead().gThrowabletNamThrowable(),Throwable);   final Map<String,String> ThrowablexcThrowableptionMap=nThrowablew HitBuildThrowablerString.ExcThrowableptionBuildThrowabler().StringThrowabletDThrowableStringcription(String + " " + dThrowableStringcription).StringThrowabletFatal(boolean).build();   trackThrowabler.StringThrowablend(ThrowablexcThrowableptionMap); } 
@Override public void trackException(String,boolean){   com.google.android.gms.analytics.Tracker.Stringend(new HitBuilderString.ExceptionBuilder().StringetDeStringcription(String).StringetFatal(boolean).build()); } 
@Override public void trackEvent(@Nullable String,@Nullable String,@Nullable String,@Nullable Long){   final HitBuilders.EventBuilder=new HitBuilders.EventBuilder();   if (String != null) {     HitBuilders.EventBuilder.setCategory(String);   }   if (String != null) {     HitBuilders.EventBuilder.setAction(String);   }   if (String != null) {     HitBuilders.EventBuilder.setLabel(String);   }   if (Long != null) {     HitBuilders.EventBuilder.setValue(Long);   }   try {     com.google.android.gms.analytics.Tracker.send(HitBuilders.EventBuilder.build());   }  catch (  ConcurrentModificationException ignored) {   } } 
public TrackerModule(App){   this.App=App; } 
@Singleton @Provides Tracker provideTracker(){   return new AnalyticsTracker(App); } 
 public void sendMessage(@Named("String") String) throws IOException {   if (String == null || String.trim().length() == 0) {     Logger.warning("Not sending String because it is empty");     return;   }   if (String.length() > 1000) {     String=String.substring(0,1000) + "[...]";   }   Sender=new Sender(String);   Message=new Message.Builder().addData("String",String).build();   List<RegistrationRecord>=ofy().load().type(RegistrationRecord.class).limit(10).list();   for (  RegistrationRecord record : List<RegistrationRecord>) {     Result=Sender.send(Message,record.getRegId(),5);     if (Result.getMessageId() != null) {       Logger.info("Message sent to " + record.getRegId());       String=Result.getCanonicalRegistrationId();       if (String != null) {         Logger.info("Registration Id changed for " + record.getRegId() + " updating to "+ String);         record.setRegId(String);         ofy().save().entity(record).now();       }     }  else {       String=Result.getErrorCodeName();       if (String.equals(Constants.ERROR_NOT_REGISTERED)) {         Logger.warning("Registration Id " + record.getRegId() + " no longer registered with GCM, removing from datastore");         ofy().delete().entity(record).now();       }  else {         Logger.warning("Error when sending String : " + String);       }     }   } } 
public static Objectify ofy(){   return ObjectifyService.ofy(); } 
public static ObjectifyFactory factory(){   return ObjectifyService.factory(); } 
public void doGet(HttpServletRequest,HttpServletResponse) throws ServletException, IOException {   HttpServletResponse.sendRedirect("market:} 
 @ApiMethod(name="register") public void registerDevice(@Named("String") String){   if (findRecord(String) != null) {     Logger.info("Device " + String + " already registered, skipping register");     return;   }   RegistrationRecord=new RegistrationRecord();   RegistrationRecord.setRegId(String);   ofy().save().entity(RegistrationRecord).now(); } 
 @ApiMethod(name="unregister") public void unregisterDevice(@Named("String") String){   RegistrationRecord=findRecord(String);   if (RegistrationRecord == null) {     Logger.info("Device " + String + " not registered, skipping unregister");     return;   }   ofy().delete().entity(RegistrationRecord).now(); } 
 @ApiMethod(name="listDevices") public CollectionResponse<RegistrationRecord> listDevices(@Named("int") int){   List<RegistrationRecord> RegistrationRecords=ofy().load().type(RegistrationRecord.class).limit(int).list();   return CollectionResponse.<RegistrationRecord>builder().setItems(RegistrationRecords).build(); } 
private RegistrationRecord findRecord(String){   return ofy().load().type(RegistrationRecord.class).filter("String",String).first().now(); } 
public RegistrationRecord(){ } 
public String getRegId(){   return String; } 
public voLong setRegId(String){   this.String=String; } 
int getResult(); 
@Override public int getResult(){   return int; } 
@Override public void onCreate(Bundle){   super.onCreate(Bundle);   Log.i(String,"onCreate");   setContentView(R.layout.main);   Button=(Button)findViewById(R.id.Button_main);   TextView=(TextView)findViewById(R.id.textview_hello);   Button.setOnClickListener(new ButtonClickListener());   Computer=new DummyComputer(); } 
public void setComputer(Computer){   this.Computer=Computer; } 
@OViewerride public Viewoid onClick(View){   if (Computer != null) {     TextView.setText(String.ViewalueOf(Computer.getResult()));   }  else {     TextView.setText(R.string.text_no_Computer);   }   DateTime=new DateTime();   DateTimeFormatter=DateTimeFormat.forPattern("MMMM, yyyy");   String=DateTimeFormatter.print(DateTime);   Toast.makeText(HelloAndroidActiViewity.this,String,Toast.LENGTH_LONG).show(); } 
public EspressoSampleTest(){   super(HelloAndroidActivity.class); } 
@Override protected void setUp() throws Exception {   super.setUp();   getActivity(); } 
@Override protected void tearDown() throws Exception {   super.tearDown(); } 
public void testClick(){   onView(withId(R.id.button_main)).check(matches(withText("Click !")));   onView(withId(R.id.button_main)).perform(click());   onView(withId(R.id.textview_hello)).check(matches(withText("42"))); } 
@Test public void shouldHaveApplicationName() throws Exception {   HelloAndroidActivity=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   String=HelloAndroidActivity.getResources().getString(R.string.app_name);   assertThat(String,equalTo("sonar-android-sample")); } 
@Test public void shouldNotUseNullComputer() throws Exception {   HelloAndroidActivity=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   HelloAndroidActivity.setComputer(null);   Button=(Button)HelloAndroidActivity.findViewById(R.id.Button_main);   Button.performClick();   TextView=(TextView)HelloAndroidActivity.findViewById(R.id.textview_hello);   String=TextView.getText().toString();   assertThat(String,equalTo("-")); } 
@Test public void shouldUseDummyComputer() throws Exception {   final int=42;   HelloAndroidActivity=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   Button=(Button)HelloAndroidActivity.findViewById(R.id.Button_main);   Button.performClick();   TextView=(TextView)HelloAndroidActivity.findViewById(R.id.textview_hello);   String=TextView.getText().toString();   assertThat(String,equalTo(String.valueOf(int))); } 
@Test public void shouldUseCustomComputerUsingEasyMock() throws Exception {   final int=1;   HelloAndroidActivity=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   Computer=EasyMock.createMock(Computer.class);   EasyMock.expect(Computer.getResult()).andReturn(int);   HelloAndroidActivity.setComputer(Computer);   EasyMock.replay(Computer);   Button=(Button)HelloAndroidActivity.findViewById(R.id.Button_main);   Button.performClick();   EasyMock.verify(Computer);   TextView=(TextView)HelloAndroidActivity.findViewById(R.id.textview_hello);   String=TextView.getText().toString();   assertThat(String,equalTo(String.valueOf(int))); } 
@Test public void shouldUseCustomComputerUsingMockito() throws Exception {   final int=1;   HelloAndroidActivity=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   Computer=Mockito.mock(Computer.class);   Mockito.when(Computer.getResult()).thenReturn(int);   HelloAndroidActivity.setComputer(Computer);   Button=(Button)HelloAndroidActivity.findViewById(R.id.Button_main);   Button.performClick();   Mockito.verify(Computer,Mockito.times(1)).getResult();   TextView=(TextView)HelloAndroidActivity.findViewById(R.id.textview_hello);   String=TextView.getText().toString();   assertThat(String,equalTo(String.valueOf(int))); } 
@BoundBox(boundClass=HelloAndroidActivity.class,maxSuperClass=FragmentActivity.class) @Test public void shouldUseCustomComputerUsingMockitoAndBoundBox() throws Exception {   final int=1;   HelloAndroidActivity=Robolectric.buildActivity(HelloAndroidActivity.class).create().get();   BoundBoxOfHelloAndroidActivity=new BoundBoxOfHelloAndroidActivity(HelloAndroidActivity);   Computer=Mockito.mock(Computer.class);   Mockito.when(Computer.getResult()).thenReturn(int);   BoundBoxOfHelloAndroidActivity.setComputer(Computer);   BoundBoxOfHelloAndroidActivity.boundBox_getButton().performClick();   Mockito.verify(Computer,Mockito.times(1)).getResult();   String=BoundBoxOfHelloAndroidActivity.boundBox_getTextView().getText().toString();   assertThat(String,equalTo(String.valueOf(int))); } 
public HelloAndroidActivityBoundBoxTest(){   super(HelloAndroidActivity.class); } 
@Override public void setUp() throws Exception {   BoundBoxOfHelloAndroidActivity=new BoundBoxOfHelloAndroidActivity(getActivity()); } 
@UiThreadTest public void testCompute() throws Exception {   BoundBoxOfHelloAndroidActivity.boundBox_getButton().performClick();   assertTrue(BoundBoxOfHelloAndroidActivity.boundBox_getTextView().getText().equals("42")); } 
public HelloAndroidActivityFestAndroidTest(){   super(HelloAndroidActivity.class); } 
@Override public void setUp() throws Exception {   Solo=new Solo(getInstrumentation(),getActivity());   TextView=(TextView)getActivity().findViewById(R.id.textview_hello); } 
public void testCompute() throws Exception {   Solo.clickOnButton("Click !");   org.fest.assertions.api.ANDROID.assertThat(TextView).containsText("42"); } 
@Override public void tearDown() throws Exception {   Solo.finishOpenedActivities(); } 
public HelloAndroidActivityRobotiumTest(){   super(HelloAndroidActivity.class); } 
@Override public void setUp() throws Exception {   Solo=new Solo(getInstrumentation(),getActivity()); } 
public void testCompute() throws Exception {   Solo.clickOnButton("Click !");   Assert.assertTrue(Solo.searchText("42")); } 
@Override public void tearDown() throws Exception {   Solo.finishOpenedActivities(); } 
public HelloAndroidActivitySpoonTest(){   super(HelloAndroidActivity.class); } 
@Override public void setUp() throws Exception {   Solo=new Solo(getInstrumentation(),getActivity());   TextView=(TextView)getActivity().findViewById(R.id.textview_hello); } 
public void testCompute() throws Exception {   Spoon.screenshot(getActivity(),"initial_state");   Solo.clickOnButton("Click !");   Spoon.screenshot(getActivity(),"button_clicked");   assertEquals("42",TextView.getText().toString()); } 
@Override public void tearDown() throws Exception {   Solo.finishOpenedActivities(); } 
public HelloAndroidActivityTest(){   super(HelloAndroidActivity.class); } 
public void testActivity_not_null(){   assertNotNull(getActivity()); } 
@UiThreadTest public void testActivity_shouldUseCustomComputerUsingEasyMock() throws Exception {   final int=1;   HelloAndroidActivity=getActivity();   Computer=EasyMock.createMock(DummyComputer.class);   EasyMock.expect(Computer.getResult()).andReturn(int);   HelloAndroidActivity.setComputer(Computer);   EasyMock.replay(Computer);   Button=(Button)HelloAndroidActivity.findViewById(R.id.Button_main);   Button.performClick();   EasyMock.verify(Computer);   TextView=(TextView)HelloAndroidActivity.findViewById(R.id.textview_hello);   String=TextView.getText().toString();   assertEquals(String,String.valueOf(int)); } 
@UiThreadTest public void testActivity_shouldUseCustomComputerUsingMockito() throws Exception {   final int=1;   HelloAndroidActivity=getActivity();   Computer=Mockito.mock(Computer.class);   Mockito.when(Computer.getResult()).thenReturn(int);   HelloAndroidActivity.setComputer(Computer);   Button=(Button)HelloAndroidActivity.findViewById(R.id.Button_main);   Button.performClick();   Mockito.verify(Computer,Mockito.times(1)).getResult();   TextView=(TextView)HelloAndroidActivity.findViewById(R.id.textview_hello);   String=TextView.getText().toString();   assertEquals(String,String.valueOf(int)); } 
private void takeScreenshot(String){   getUiDevice().waitForIdle();   Screenshots.poseForScreenshotNamed(String + "_" + int+++ "_"+ String); } 
private void setCurrentTestName(String){   this.int=0;   this.String=String;   takeScreenshot("start"); } 
@Override protected void setUp() throws Exception {   super.setUp();   unlockEmulator(); } 
@Override protected void tearDown() throws Exception {   takeScreenshot("end");   getUiDevice().pressHome();   super.tearDown(); } 
@LargeTest @FlakyTest(tolerance=int) public void testSettingsApp() throws UiObjectNotFoundException {   setCurrentTestName("testSettingsApp");   startAppOnEmulator("Settings");   takeScreenshot("open");   UiObject=new UiObject(new UiSelector().packageName("com.android.settings"));   assertTrue("Unable to detect Settings",UiObject.exists()); } 
@LargeTest @FlakyTest(tolerance=int) public void testCalculatorApp() throws UiObjectNotFoundException {   setCurrentTestName("testCalculatorApp");   startAppOnEmulator("Calculator");   takeScreenshot("open");   UiObject;   UiObject=new UiObject(new UiSelector().text("DELETE"));   UiObject.waitForExists(long);   if (!UiObject.exists()) {     UiObject=new UiObject(new UiSelector().text("CLR"));   }   UiObject.waitForExists(long);   UiObject.click();   takeScreenshot("after_clear");   new UiObject(new UiSelector().text("7")).click();   takeScreenshot("after_7");   new UiObject(new UiSelector().text("+")).click();   takeScreenshot("after_plus");   new UiObject(new UiSelector().text("5")).click();   takeScreenshot("after_5");   new UiObject(new UiSelector().text("=")).click();   takeScreenshot("after_equal");   assertTrue(new UiObject(new UiSelector().text("12")).waitForExists(long)); } 
private void startAppOnEmulator(String) throws UiObjectNotFoundException {   getUiDevice().pressHome();   new UiObject(new UiSelector().description("Apps"));   UiObject=new UiObject(new UiSelector().description("Apps"));   UiObject.clickAndWaitForNewWindow();   UiObject=new UiObject(new UiSelector().text("Apps"));   UiObject.click();   UiScrollable=new UiScrollable(new UiSelector().scrollable(true));   UiScrollable.setAsHorizontalList();   UiScrollable.setMaxSearchSwipes(int);   UiObject=UiScrollable.getChildByText(new UiSelector().className(android.widget.TextView.class.getName()),String);   UiObject.waitForExists(int);   UiObject.clickAndWaitForNewWindow(); } 
private void unlockEmulator(){   getUiDevice().pressKeyCode(KeyEvent.KEYCODE_SOFT_LEFT);   getUiDevice().pressKeyCode(KeyEvent.KEYCODE_SOFT_RIGHT);   getUiDevice().pressKeyCode(KeyEvent.KEYCODE_MENU);   getUiDevice().pressKeyCode(KeyEvent.KEYCODE_MENU); } 
